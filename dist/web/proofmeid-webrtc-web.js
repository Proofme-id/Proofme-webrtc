/*! For license information please see proofmeid-webrtc-web.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ProofmeId=t():e.ProofmeId=t()}(self,(function(){return(()=>{var e={945:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.IProofmeDataPurpose=void 0,(n=t.IProofmeDataPurpose||(t.IProofmeDataPurpose={})).AGE_VERIFICATION="AGE_VERIFICATION",n.KYC_VERIFICATION="KYC_VERIFICATION",n.ACCESS_CONTROL="ACCESS_CONTROL",n.ONLINE_VERIFICATION="ONLINE_VERIFICATION",n.IDENTIFICATION="IDENTIFICATION"},491:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.IProofmeDataStorage=void 0,(n=t.IProofmeDataStorage||(t.IProofmeDataStorage={})).DATABASE="DATABASE",n.CERTIFICATE="CERTIFICATE",n.NOT_STORED="NOT_STORED"},611:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtilsProvider=void 0;const s=n(810),a=i(n(9));class l{proofmeUtils=new s.ProofmeUtils;async validCredentials(e,t,n,r){return this.proofmeUtils.validCredentialsFunc(e,t,n,r)}async validCredentialsTrustedParties(e,t,n,r,o,i){return this.proofmeUtils.validCredentialsTrustedPartiesFunc(e,t,n,r,o,i)}signCredential(e,t){return this.proofmeUtils.signCredential(e,t)}signCredentialObject(e,t){return this.proofmeUtils.signCredentialObject(e,t)}signProofObject(e,t){return this.proofmeUtils.signProofObject(e,t)}static ɵfac=function(e){return new(e||l)};static ɵprov=a.ɵɵdefineInjectable({token:l,factory:l.ɵfac})}t.ProofmeUtilsProvider=l},810:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtils=void 0;const o=r(n(519)),i=n(621);t.ProofmeUtils=class{async validCredentialsTrustedPartiesFunc(e,t,n,r,i,s){const a=new o.default(t),l=this.requestedCredentialsCorrect(e,n);if(!l.success)return l.credentials=e,l;const c=await this.validCredentialsFunc(e,t,i,s);if(!c.valid)return c;for(const e of r)a.utils.isAddress(e)||(console.error(`Trusted party did ${e} is NOT a valid address and is removed.`),r=r.filter((t=>t!==e)));if(r.length>0){const t=[];let n=0,o=0;const i=[];for(const[s]of Object.entries(e.credentials))for(const[l,c]of Object.entries(e.credentials[s].credentials)){o++;const e=c.issuer.id.split(":")[2];let s=!1,u=null,d=null,f=!0;for(const o of r){const r=t.find((t=>t.issuerDidContractAddress===e&&t.did===o));let p=null;if(r?p=r.claim:(p=await this.getClaims(e,o,a),t.push({issuerDidContractAddress:e,did:o,claim:p})),p)if(f=!1,new Date(p.expirationDate)>new Date){const e=p.keys;d=e;const t=`${c.provider}_${l}`;if(!e.includes(t)){u=t;break}if(!u){n++,s=!0;break}}else i.push({credential:c,valid:!1,code:14,message:"Claim expired."})}f?i.push({credential:c,valid:!1,code:13,message:`No claims found to check. Checked dids ${r}`}):!u||s||i.push({credential:c,valid:!1,code:12,message:`Tried to validate attribute ${u} but provider was not allowed to issue. Allowed attributes: ${d.join(", ")}`})}return n===o?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential",requestedCheckResult:l}:{valid:!1,code:1,message:"Invalid credentials",invalidCredentials:i}}return{valid:!1,code:10,message:"No trusted parties to check."}}async validCredentialsFunc(e,t,n,r){"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e);const s=new o.default(t),a=[];let l=0,c=0;const u=[];for(const[o]of Object.entries(e.credentials)){const d={credentials:{[o]:JSON.parse(JSON.stringify(e.credentials[o]))}};delete d.credentials[o].proof.signature;const f=s.eth.accounts.recover(JSON.stringify(d),e.credentials[o].proof.signature);if(this.userCredentialSignatureWrong(e.credentials[o].proof.holder,f))for(const[,d]of Object.entries(e.credentials[o].credentials)){if(c++,!d.version){u.push({credential:d,code:8,message:"Incorrect credential version. Renew your credentials"});continue}const f=new Date(d.expirationDate),p=new Date;if(p>f){u.push({credential:d,code:7,message:`Your credential expired on ${f}`});continue}const h=new Date(e.credentials[o].proof.nonce);if(this.calculateMinutesDifference(p,h)>5&&n)u.push({credential:d,code:2,message:"Nonce too old"});else if(this.issuerCredentialSignatureWrong(d,s)){const n=d.proof.holder,c=d.issuer.id.split(":")[2];if(await this.didContractKeyWrong(s,t,i.claimHolderAbi,n,c,a)){const n=e.credentials[o].proof.holder,c=d.id.split(":")[2];await this.didContractKeyWrong(s,t,i.claimHolderAbi,n,c,a)?r&&void 0!==d.verified&&!0!==d.verified?u.push({credential:d,code:15,message:"Liveness check required but credential not verified"}):l++:u.push({credential:d,code:6,message:"User did incorrect"})}else u.push({credential:d,code:5,message:"Issuer did incorrect"})}else u.push({credential:d,code:4,message:"Issuer signature incorrect"})}else u.push({credential:e.credentials[o],code:3,message:"User signature incorrect"})}return c>0&&l===c?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential"}:{valid:!1,code:1,message:"Invalid credential",invalidCredentials:u}}userCredentialSignatureWrong(e,t){return e===t||(console.error(`User signature of credential ${e} does not match recoveredAddress ${t}`),!1)}issuerCredentialSignatureWrong(e,t){const n=e.proof.signature,r=e.proof.holder,o=JSON.parse(JSON.stringify(e));delete o.proof.signature;const i=t.eth.accounts.recover(JSON.stringify(o),n);return r===i||(console.error(`Issuer signature of credential ${r} does not match recoveredAddress ${i}`),!1)}async didContractKeyWrong(e,t,n,r,i,s){const a=s.find((e=>e.did==i&&e.holderKey===r));if(a)return a.result;{const a=[];if(i===r)return s.push({did:i,holderKey:r,result:!0}),!0;{const l=this.getSha3Key(r,e),c=new(new o.default(t).eth.Contract)(n,i);if(!this.knownAddressesContains(a,l,i)){const e=parseInt(await this.getKeyPurpose(c,l),10);if(0===e||e>3)return s.push({did:i,holderKey:r,result:!1}),!1;a.push({sha3Key:l,didAddress:i})}return s.push({did:i,holderKey:r,result:!0}),!0}}}knownAddressesContains(e,t,n){for(const r of e)if(r.sha3Key===t&&r.didContractAddress===n)return!0}getSha3Key(e,t){return t.utils.keccak256(e)}async getKeyPurpose(e,t){return null===e.options.address?Promise.resolve("-1"):await e.methods.getKeyPurpose(t).call()}calculateMinutesDifference(e,t){let n=(e.getTime()-t.getTime())/1e3;return n/=60,Math.abs(Math.round(n))}reOrderCredentialObject(e){for(const t of Object.keys(e.credentials)){const n=[];for(const r of Object.keys(e.credentials[t].credentials))n.push(r);n.sort();const r={};for(const o of n){const n=this.reOrderCredential(e.credentials[t].credentials[o]);r[o]=n}e.credentials[t].proof=this.reOrderCredentialProof(e.credentials[t].proof),e.credentials[t]={credentials:r,proof:e.credentials[t].proof}}return e}reOrderCredential(e){return this.sortObjectAlphabetically(e)}sortObjectAlphabetically(e){const t={},n=Object.keys(e);n.sort(((e,t)=>(e=e.toLowerCase())<(t=t.toLowerCase())?-1:e>t?1:0));for(const r in n){const o=n[r];"object"!=typeof e[o]||e[o]instanceof Array?t[o]=e[o]:t[o]=this.sortObjectAlphabetically(e[o])}return t}reOrderCredentialProof(e){return{holder:e.holder,nonce:e.nonce,signature:e.signature,type:e.type}}signCredential(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredential(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature}signCredentialObject(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature}async getClaims(e,t,n){const r=new n.eth.Contract(i.claimHolderAbi,t),o=await r.methods.getClaimIdsByType(e).call();if(!(o.length>0))return Promise.resolve(null);try{const e=await r.methods.getClaim(o[o.length-1]).call(),t=JSON.parse(n.utils.toAscii(e.data));return Promise.resolve(t)}catch(e){return Promise.resolve(null)}}signProofObject(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderProofObject(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature}reOrderProofObject(e){return this.sortObjectAlphabetically(e)}requestedCredentialsCorrect(e,t){const n={success:!0,missingKeys:[]};for(const r of t.credentials){let o=!1;if(t.minimumRequired&&(o=!!t.minimumRequired.data.find((e=>e===r.key))),r.required&&!o){Array.isArray(r.provider)||(r.provider=[r.provider]);let t=!1;for(const n of r.provider)e.credentials[n]&&e.credentials[n].credentials&&e.credentials[n].credentials[r.key]&&(t=!0);t||(n.success=!1,n.missingKeys.push(r))}}if(t.minimumRequired){const r=Object.keys(e.credentials),o=t.minimumRequired.data;let i=0;for(const t of r)for(const n of o)e.credentials[t]&&e.credentials[t].credentials&&e.credentials[t].credentials[n]&&i++;i<t.minimumRequired.amount&&(n.success=!1,n.missingMessage=`Check the minimumRequired array. Found ${i} items and required amount ${t.minimumRequired.amount}`)}return n}}},515:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.SignalingServer=void 0;const s=i(n(352)),a=n(828),l=i(n(85));t.SignalingServer=class{wsServer;rtcConnectionConfig;setRTCConnectionConfig(e){this.rtcConnectionConfig=e}getRTCConnectionConfig(e){if(this.rtcConnectionConfig.turnEnabled){const t=`${Math.floor(Date.now()/1e3)+this.rtcConnectionConfig.turnExpiration}:${e}`,n=l.createHmac("sha1",this.rtcConnectionConfig.turnSecret).update(t.toString()).digest("base64");return{iceCandidatePoolSize:5,iceServers:[{urls:[this.rtcConnectionConfig.turnUrl],credential:n,username:t}]}}if(this.rtcConnectionConfig.stunEnabled)return{iceServers:[{urls:[this.rtcConnectionConfig.stunUrl]}]}}startSignal(e){this.wsServer=new s.Server({server:e});const t=(e,t)=>{e.send(JSON.stringify(t))};this.wsServer.on("connection",(e=>{e.uuid=(0,a.v4)(),e.did=null,e.host=!1,e.authenticated=!1,e.connected=null,e.on("error",(e=>{})),e.on("message",(n=>{let r;try{r=JSON.parse(n)}catch(e){r={}}const{type:o,token:i,host:s,offer:l,answer:c,candidate:u}=r;switch(o){case"auth":i?(e.authenticated=!0,t(e,{type:"AUTH",success:!0,message:"Authentication successful"})):t(e,{type:"auth",success:!1,message:"Could not validate token"});break;case"host":e.host=!0,t(e,{type:"host",success:!0,message:"Host initialised "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")});break;case"ping":t(e,{type:"pong"});break;case"connect":{const n=[...this.wsServer.clients].filter((e=>e.uuid===s&&null===e.connected&&!0===e.host));1===n.length?(t(n[0],{type:"connected",success:!0,message:"Client connected "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")}),t(e,{type:"connected",success:!0,message:"Connected to "+s,webRtcConnectionConfig:this.getRTCConnectionConfig("client")}),e.connected=n[0].uuid,n[0].connected=e.uuid):t(e,{type:"connected",success:!1,message:"Could not connect to "+s});break}case"offer":if(null!=e.connected&&this.wsServer.clients.size>0){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"offer",success:!0,offer:l}),t(e,{type:"offer",success:!0,offer:l})):t(e,{type:"offer",success:!1,offer:l,message:"Connection not found."})}else t(e,{type:"offer",success:!1,offer:l,message:"Too soon..."});break;case"answer":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"answer",success:!0,answer:c}),t(e,{type:"answer",success:!0,answer:c})):t(e,{type:"answer",success:!1,answer:c,message:"Connection not found."})}else t(e,{type:"answer",success:!1,answer:c,message:"Too soon..."});break;case"candidate":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?t(n[0],{type:"candidate",success:!0,candidate:u}):t(e,{type:"candidate",success:!1,candidate:u,message:"Connection not found."})}else t(e,{type:"candidate",success:!1,candidate:u,message:"Too soon..."});break;case"leave":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));e.uuid=(0,a.v4)(),1===n.length?(t(n[0],{type:"leave",success:!0,message:"Connection left on receive leave"}),n[0].connected=null,t(e,{type:"leave",success:!0,message:"Connection left.",uuid:e.uuid})):t(e,{type:"leave",success:!1,message:"Connection not found.",uuid:e.uuid}),e.connected=null}else e.uuid=(0,a.v4)(),t(e,{type:"leave",success:!1,message:"Not connected to host/client.",uuid:e.uuid});break;default:t(e,{type:"error",message:"Command not found: "+o})}})),e.on("close",((e,n,r)=>{if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length&&(t(n[0],{type:"leave",success:!0,message:"Connection left on websocket close"}),n[0].connected=null),e.connected=null}})),e.send(JSON.stringify({type:"connect",message:"Well hello there, I am the Signaling Server",success:!0}))}))}}},621:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.claimHolderAbi=void 0,t.claimHolderAbi=[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}]},299:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.WebRtcProvider=void 0;const s=n(964),a=n(904),l=n(367),c=i(n(9));class u{webRtcConfig;hostUuid;peerConnection=null;dataChannel=null;wsClient=null;receivedActions$=new s.BehaviorSubject(null);uuid$=new s.BehaviorSubject(null);websocketMessage$=new s.BehaviorSubject(null);websocketConnectionClosed$=new s.BehaviorSubject(null);websocketConnectionOpen$=new s.BehaviorSubject(null);websocketConnectionError$=new s.BehaviorSubject(null);webRtcConnectionConfig;connectionTimeout=null;pongCheckInterval=null;pingTimeout=null;WEBSOCKET_PING_ANSWER_DELAY=1e3;WEBSOCKET_PING_PONG_ALLOWED_TIME=3e3;getConfig(){return this.webRtcConfig}setHostUuid(e){this.hostUuid=e}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState&&this.dataChannel.send(JSON.stringify({action:e,...t}))}sendWebsocketData(e,t){console.log("this.wsClient:",this.wsClient),console.log("this.wsClient.OPEN:",this.wsClient.OPEN),console.log("this.wsClient.readyState:",this.wsClient.readyState),this.wsClient&&this.wsClient.readyState===this.wsClient.OPEN?this.wsClient.send(JSON.stringify({action:e,...t})):console.error(`Attempted to send data with action ${e} but websocket channel is not open`)}getWebsocket(){return this.wsClient}setUuid(e){this.uuid$.next(e)}disconnect(){clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),this.peerConnection&&this.peerConnection.close(),this.dataChannel&&this.dataChannel.close(),this.wsClient&&(this.wsClient.close(),this.wsClient.onclose=null),this.peerConnection=null,this.dataChannel=null,this.wsClient=null,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)}remoteDisconnect(){this.dataChannel&&"open"===this.dataChannel.readyState&&this.dataChannel.send(JSON.stringify({action:"disconnect"})),setTimeout((()=>{this.disconnect()}),1e3)}async sendOffer(e,t){const n=await e.createOffer();await e.setLocalDescription(n),t.send(JSON.stringify({type:"offer",offer:n}))}async launchWebsocketClient(e){this.webRtcConfig=e;let t=null;this.receivedActions$=new s.BehaviorSubject(null),this.connectionTimeout&&clearTimeout(this.connectionTimeout),this.uuid$=new s.BehaviorSubject(null),this.websocketMessage$=new s.BehaviorSubject(null),this.websocketConnectionClosed$=new s.BehaviorSubject(null),this.websocketConnectionOpen$=new s.BehaviorSubject(null),this.websocketConnectionError$=new s.BehaviorSubject(null);let n=this.webRtcConfig.signalingUrl;n||(n="wss://auth.proofme.id"),console.log("Connecting to signaling server:",n),console.log("webRtcConfig.channelId:",e.channel);let r=`${n}?channel=${e.channel}`;e.data&&(r=`${r}&data=${e.data}`),this.wsClient=new l.w3cwebsocket(r),this.connectionTimeout=setTimeout((()=>{!0!==t&&(this.websocketConnectionError$.next(!0),this.wsClient.close())}),1e4),this.wsClient.onerror=e=>{t=!1,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1),this.websocketConnectionError$.next(!0)},this.wsClient.onclose=()=>{this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)},this.wsClient.onopen=()=>{t=!0,this.websocketConnectionClosed$.next(!1),this.websocketConnectionOpen$.next(!0)},this.wsClient.onmessage=async e=>{if(this.websocketMessage$.next(e),e.data){let t;try{t=JSON.parse(e.data)}catch(e){t={}}const{type:n,message:r,success:o,uuid:i,offer:s,answer:l,candidate:c,webRtcConnectionConfig:u}=t;switch(n){case"error":"Command not found: ping"==r&&(clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing());break;case"connect":if(o)if(this.webRtcConfig.isHost){const e=500;let t=0;const n=setInterval((()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"host"}))),t>=e&&clearInterval(n),t++}),50)}else{const e=500;let t=0;const n=setInterval((async()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"connect",host:this.hostUuid}))),t>=e&&clearInterval(n),t++}),50)}break;case"connected":clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),u&&(this.webRtcConnectionConfig=u,this.webRtcConfig.isHost||await this.setupPeerconnection(this.hostUuid)),i&&this.webRtcConfig.isHost&&await this.sendOffer(this.peerConnection,this.wsClient);break;case"pong":clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing();break;case"offer":if(console.log("P2P - Received offer"),s&&!this.webRtcConfig.isHost){const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.wsClient.send(JSON.stringify({type:"answer",answer:e}))}break;case"host":i&&this.webRtcConfig.isHost&&(this.setUuid(i),u&&(this.webRtcConnectionConfig=u),await this.setupPeerconnection(i),this.sendPing());break;case"leave":this.setUuid(null),this.disconnect();break;case"answer":console.log("P2P - Received answer"),l&&await this.peerConnection.setRemoteDescription(new a.RTCSessionDescription(l));break;case"candidate":if(c){const e=new a.RTCIceCandidate(c);await this.peerConnection.addIceCandidate(e)}break;case"client":u&&(this.webRtcConnectionConfig=u,this.webRtcConfig.isHost||(await this.setupPeerconnection(this.hostUuid),await this.sendOffer(this.peerConnection,this.wsClient)))}}}}sendPing(){this.pingTimeout=setTimeout((()=>{1===this.wsClient.readyState&&this.wsClient.send(JSON.stringify({type:"ping"}))}),this.WEBSOCKET_PING_ANSWER_DELAY)}async setupPeerconnection(e){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){t={}}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new a.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}async setupClientPeerconnection(){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){t={}}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new a.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}static ɵfac=function(e){return new(e||u)};static ɵprov=c.ɵɵdefineInjectable({token:u,factory:u.ɵfac})}t.WebRtcProvider=u},964:e=>{"use strict";e.exports=require("rxjs")},828:e=>{"use strict";e.exports=require("uuid")},519:e=>{"use strict";e.exports=require("web3")},367:e=>{"use strict";e.exports=require("websocket")},904:e=>{"use strict";e.exports=require("wrtc")},352:e=>{"use strict";e.exports=require("ws")},85:()=>{},9:(e,t,n)=>{"use strict";n.r(t),n.d(t,{ANALYZE_FOR_ENTRY_COMPONENTS:()=>fo,APP_BOOTSTRAP_LISTENER:()=>Vm,APP_ID:()=>km,APP_INITIALIZER:()=>Om,ApplicationInitStatus:()=>Sm,ApplicationModule:()=>db,ApplicationRef:()=>wv,Attribute:()=>co,COMPILER_OPTIONS:()=>Qm,CUSTOM_ELEMENTS_SCHEMA:()=>ks,ChangeDetectionStrategy:()=>Je,ChangeDetectorRef:()=>Sv,Compiler:()=>Wm,CompilerFactory:()=>Zm,Component:()=>_m,ComponentFactory:()=>sg,ComponentFactoryResolver:()=>lg,ComponentRef:()=>ig,ContentChild:()=>go,ContentChildren:()=>ho,DEFAULT_CURRENCY_CODE:()=>Hm,DebugElement:()=>Vv,DebugEventListener:()=>Pv,DebugNode:()=>Rv,DefaultIterableDiffer:()=>Zv,Directive:()=>wm,ElementRef:()=>ug,EmbeddedViewRef:()=>Nv,ErrorHandler:()=>Ss,EventEmitter:()=>iy,Host:()=>ei,HostBinding:()=>xm,HostListener:()=>Im,INJECTOR:()=>Pc,Inject:()=>Go,InjectFlags:()=>We,Injectable:()=>cd,InjectionToken:()=>uo,Injector:()=>Kc,Input:()=>Mm,IterableDiffers:()=>rb,KeyValueDiffers:()=>ib,LOCALE_ID:()=>Lm,MissingTranslationStrategy:()=>qm,ModuleWithComponentFactories:()=>zm,NO_ERRORS_SCHEMA:()=>As,NgModule:()=>Em,NgModuleFactory:()=>Eg,NgModuleRef:()=>Ig,NgProbeToken:()=>fv,NgZone:()=>Jm,Optional:()=>Jo,Output:()=>Dm,PACKAGE_ROOT_URL:()=>$m,PLATFORM_ID:()=>Rm,PLATFORM_INITIALIZER:()=>jm,Pipe:()=>Cm,PlatformRef:()=>vv,Query:()=>po,QueryList:()=>ay,ReflectiveInjector:()=>Od,ReflectiveKey:()=>hd,Renderer2:()=>pg,RendererFactory2:()=>fg,RendererStyleFlags2:()=>zs,ResolvedReflectiveFactory:()=>wd,Sanitizer:()=>hg,SecurityContext:()=>ls,Self:()=>Yo,SimpleChange:()=>tn,SkipSelf:()=>Xo,TRANSLATIONS:()=>Bm,TRANSLATIONS_FORMAT:()=>Um,TemplateRef:()=>ly,Testability:()=>ov,TestabilityRegistry:()=>iv,Type:()=>_o,VERSION:()=>yg,Version:()=>gg,ViewChild:()=>mo,ViewChildren:()=>yo,ViewContainerRef:()=>fy,ViewEncapsulation:()=>Xe,ViewRef:()=>Av,asNativeElements:()=>jv,assertPlatform:()=>gv,createNgModuleRef:()=>kg,createPlatform:()=>pv,createPlatformFactory:()=>hv,defineInjectable:()=>Ve,destroyPlatform:()=>yv,enableProdMode:()=>Iv,forwardRef:()=>ue,getDebugNode:()=>qv,getModuleFactory:()=>Ev,getNgModuleById:()=>Tv,getPlatform:()=>mv,inject:()=>Qo,isDevMode:()=>xv,platformCore:()=>ub,resolveForwardRef:()=>de,setTestabilityGetter:()=>sv,ɵALLOW_MULTIPLE_PLATFORMS:()=>dv,ɵAPP_ID_RANDOM_PROVIDER:()=>Nm,ɵChangeDetectorStatus:()=>Ye,ɵComponentFactory:()=>sg,ɵConsole:()=>Fm,ɵDEFAULT_LOCALE_ID:()=>Vp,ɵINJECTOR_SCOPE:()=>Rc,ɵLifecycleHooksFeature:()=>gu,ɵLocaleDataIndex:()=>jp,ɵNG_COMP_DEF:()=>ct,ɵNG_DIR_DEF:()=>ut,ɵNG_ELEMENT_ID:()=>ht,ɵNG_INJ_DEF:()=>Ue,ɵNG_MOD_DEF:()=>ft,ɵNG_PIPE_DEF:()=>dt,ɵNG_PROV_DEF:()=>Be,ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR:()=>mg,ɵNO_CHANGE:()=>Ha,ɵNgModuleFactory:()=>Ng,ɵNoopNgZone:()=>rv,ɵReflectionCapabilities:()=>jo,ɵRender3ComponentFactory:()=>Mg,ɵRender3ComponentRef:()=>Dg,ɵRender3NgModuleRef:()=>Ag,ɵRuntimeError:()=>pe,ɵViewRef:()=>bg,ɵ_sanitizeHtml:()=>ss,ɵ_sanitizeUrl:()=>$i,ɵallowSanitizationBypassAndThrow:()=>Ii,ɵbypassSanitizationTrustHtml:()=>Ti,ɵbypassSanitizationTrustResourceUrl:()=>Ai,ɵbypassSanitizationTrustScript:()=>Si,ɵbypassSanitizationTrustStyle:()=>Oi,ɵbypassSanitizationTrustUrl:()=>ki,ɵclearResolutionOfComponentResourcesQueue:()=>ci,ɵcompileComponent:()=>rm,ɵcompileDirective:()=>om,ɵcompileNgModule:()=>By,ɵcompileNgModuleDefs:()=>Uy,ɵcompileNgModuleFactory:()=>cv,ɵcompilePipe:()=>vm,ɵcreateInjector:()=>Hc,ɵdefaultIterableDiffers:()=>lb,ɵdefaultKeyValueDiffers:()=>cb,ɵdetectChanges:()=>Ac,ɵdevModeEqual:()=>Tu,ɵfindLocaleData:()=>Sp,ɵflushModuleScopingQueueAsMuchAsPossible:()=>Ly,ɵgetDebugNode:()=>qv,ɵgetDebugNodeR2:()=>zv,ɵgetDirectives:()=>tu,ɵgetHostElement:()=>ru,ɵgetInjectableDef:()=>Fe,ɵgetLContext:()=>vs,ɵgetLocaleCurrencyCode:()=>kp,ɵgetLocalePluralCase:()=>Ap,ɵgetSanitizationBypassType:()=>Ei,ɵglobal:()=>it,ɵinjectChangeDetectorRef:()=>kv,ɵisBoundToModule:()=>uv,ɵisDefaultChangeDetectionStrategy:()=>et,ɵisListLikeIterable:()=>Ou,ɵisObservable:()=>qd,ɵisPromise:()=>Bd,ɵisSubscribable:()=>Ud,ɵivyEnabled:()=>fb,ɵmakeDecorator:()=>io,ɵmarkDirty:()=>Nc,ɵnoSideEffects:()=>Ge,ɵpatchComponentDefWithScope:()=>Yy,ɵpublishDefaultGlobalUtils:()=>cu,ɵpublishGlobalUtil:()=>uu,ɵregisterLocaleData:()=>Op,ɵregisterNgModuleType:()=>Og,ɵrenderComponent:()=>du,ɵresetCompiledComponents:()=>Ky,ɵresetJitOptions:()=>Vy,ɵresolveComponentResources:()=>ii,ɵsetClassMetadata:()=>xg,ɵsetCurrentInjector:()=>Uo,ɵsetDocument:()=>hn,ɵsetLocaleId:()=>Bp,ɵstore:()=>rd,ɵstringify:()=>ae,ɵtransitiveScopesFor:()=>Xy,ɵunregisterLocaleData:()=>Pp,ɵunwrapSafeValue:()=>xi,ɵwhenRendered:()=>yu,ɵɵCopyDefinitionFeature:()=>xu,ɵɵFactoryTarget:()=>vo,ɵɵInheritDefinitionFeature:()=>vu,ɵɵNgOnChangesFeature:()=>nn,ɵɵProvidersFeature:()=>og,ɵɵadvance:()=>Ba,ɵɵattribute:()=>Vu,ɵɵattributeInterpolate1:()=>Qu,ɵɵattributeInterpolate2:()=>Zu,ɵɵattributeInterpolate3:()=>Ku,ɵɵattributeInterpolate4:()=>Gu,ɵɵattributeInterpolate5:()=>Ju,ɵɵattributeInterpolate6:()=>Yu,ɵɵattributeInterpolate7:()=>Xu,ɵɵattributeInterpolate8:()=>ed,ɵɵattributeInterpolateV:()=>td,ɵɵclassMap:()=>Ef,ɵɵclassMapInterpolate1:()=>Jf,ɵɵclassMapInterpolate2:()=>Yf,ɵɵclassMapInterpolate3:()=>Xf,ɵɵclassMapInterpolate4:()=>ep,ɵɵclassMapInterpolate5:()=>tp,ɵɵclassMapInterpolate6:()=>np,ɵɵclassMapInterpolate7:()=>rp,ɵɵclassMapInterpolate8:()=>op,ɵɵclassMapInterpolateV:()=>ip,ɵɵclassProp:()=>Df,ɵɵcontentQuery:()=>Oy,ɵɵdefineComponent:()=>yt,ɵɵdefineDirective:()=>Dt,ɵɵdefineInjectable:()=>Re,ɵɵdefineInjector:()=>$e,ɵɵdefineNgModule:()=>_t,ɵɵdefinePipe:()=>xt,ɵɵdirectiveInject:()=>kd,ɵɵdisableBindings:()=>Nn,ɵɵelement:()=>Vd,ɵɵelementContainer:()=>Ld,ɵɵelementContainerEnd:()=>Fd,ɵɵelementContainerStart:()=>$d,ɵɵelementEnd:()=>Rd,ɵɵelementStart:()=>jd,ɵɵenableBindings:()=>An,ɵɵgetCurrentView:()=>Hd,ɵɵgetInheritedFactory:()=>Xr,ɵɵhostProperty:()=>Dp,ɵɵi18n:()=>Wh,ɵɵi18nApply:()=>Kh,ɵɵi18nAttributes:()=>Qh,ɵɵi18nEnd:()=>zh,ɵɵi18nExp:()=>Zh,ɵɵi18nPostprocess:()=>Gh,ɵɵi18nStart:()=>qh,ɵɵinject:()=>zo,ɵɵinjectAttribute:()=>to,ɵɵinvalidFactory:()=>Ad,ɵɵinvalidFactoryDep:()=>Wo,ɵɵlistener:()=>zd,ɵɵloadQuery:()=>Sy,ɵɵnamespaceHTML:()=>gr,ɵɵnamespaceMathML:()=>hr,ɵɵnamespaceSVG:()=>pr,ɵɵnextContext:()=>Gd,ɵɵngDeclareClassMetadata:()=>hb,ɵɵngDeclareComponent:()=>gb,ɵɵngDeclareDirective:()=>pb,ɵɵngDeclareFactory:()=>yb,ɵɵngDeclareInjectable:()=>vb,ɵɵngDeclareInjector:()=>bb,ɵɵngDeclareNgModule:()=>wb,ɵɵngDeclarePipe:()=>_b,ɵɵpipe:()=>Gg,ɵɵpipeBind1:()=>Jg,ɵɵpipeBind2:()=>Yg,ɵɵpipeBind3:()=>Xg,ɵɵpipeBind4:()=>ey,ɵɵpipeBindV:()=>ty,ɵɵprojection:()=>Xd,ɵɵprojectionDef:()=>Yd,ɵɵproperty:()=>Nd,ɵɵpropertyInterpolate:()=>ef,ɵɵpropertyInterpolate1:()=>tf,ɵɵpropertyInterpolate2:()=>nf,ɵɵpropertyInterpolate3:()=>rf,ɵɵpropertyInterpolate4:()=>of,ɵɵpropertyInterpolate5:()=>sf,ɵɵpropertyInterpolate6:()=>af,ɵɵpropertyInterpolate7:()=>lf,ɵɵpropertyInterpolate8:()=>cf,ɵɵpropertyInterpolateV:()=>uf,ɵɵpureFunction0:()=>Pg,ɵɵpureFunction1:()=>jg,ɵɵpureFunction2:()=>Rg,ɵɵpureFunction3:()=>Vg,ɵɵpureFunction4:()=>$g,ɵɵpureFunction5:()=>Fg,ɵɵpureFunction6:()=>Lg,ɵɵpureFunction7:()=>Hg,ɵɵpureFunction8:()=>Bg,ɵɵpureFunctionV:()=>Ug,ɵɵqueryRefresh:()=>Ey,ɵɵreference:()=>od,ɵɵresolveBody:()=>Ls,ɵɵresolveDocument:()=>Fs,ɵɵresolveWindow:()=>$s,ɵɵrestoreView:()=>Rn,ɵɵsanitizeHtml:()=>cs,ɵɵsanitizeResourceUrl:()=>fs,ɵɵsanitizeScript:()=>ps,ɵɵsanitizeStyle:()=>us,ɵɵsanitizeUrl:()=>ds,ɵɵsanitizeUrlOrResourceUrl:()=>ys,ɵɵsetComponentScope:()=>mt,ɵɵsetNgModuleScope:()=>Ct,ɵɵstyleMap:()=>xf,ɵɵstyleMapInterpolate1:()=>sp,ɵɵstyleMapInterpolate2:()=>ap,ɵɵstyleMapInterpolate3:()=>lp,ɵɵstyleMapInterpolate4:()=>cp,ɵɵstyleMapInterpolate5:()=>up,ɵɵstyleMapInterpolate6:()=>dp,ɵɵstyleMapInterpolate7:()=>fp,ɵɵstyleMapInterpolate8:()=>pp,ɵɵstyleMapInterpolateV:()=>hp,ɵɵstyleProp:()=>Mf,ɵɵstylePropInterpolate1:()=>gp,ɵɵstylePropInterpolate2:()=>yp,ɵɵstylePropInterpolate3:()=>mp,ɵɵstylePropInterpolate4:()=>vp,ɵɵstylePropInterpolate5:()=>bp,ɵɵstylePropInterpolate6:()=>wp,ɵɵstylePropInterpolate7:()=>_p,ɵɵstylePropInterpolate8:()=>Cp,ɵɵstylePropInterpolateV:()=>Mp,ɵɵsyntheticHostListener:()=>Wd,ɵɵsyntheticHostProperty:()=>xp,ɵɵtemplate:()=>nd,ɵɵtemplateRefExtractor:()=>Py,ɵɵtext:()=>Lf,ɵɵtextInterpolate:()=>Hf,ɵɵtextInterpolate1:()=>Bf,ɵɵtextInterpolate2:()=>Uf,ɵɵtextInterpolate3:()=>qf,ɵɵtextInterpolate4:()=>zf,ɵɵtextInterpolate5:()=>Wf,ɵɵtextInterpolate6:()=>Qf,ɵɵtextInterpolate7:()=>Zf,ɵɵtextInterpolate8:()=>Kf,ɵɵtextInterpolateV:()=>Gf,ɵɵtrustConstantHtml:()=>hs,ɵɵtrustConstantResourceUrl:()=>gs,ɵɵviewQuery:()=>Ty});var r=n(964);const o=require("tslib");var i=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function s(e){return"function"==typeof e}function a(e){return s(null==e?void 0:e.then)}function l(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var c=l((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function u(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var d=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}return e.prototype.unsubscribe=function(){var e,t,n,r,i;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=(0,o.__values)(a),u=l.next();!u.done;u=l.next())u.value.remove(this)}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}else a.remove(this);var d=this.initialTeardown;if(s(d))try{d()}catch(e){i=e instanceof c?e.errors:[e]}var f=this._teardowns;if(f){this._teardowns=null;try{for(var p=(0,o.__values)(f),g=p.next();!g.done;g=p.next()){var y=g.value;try{h(y)}catch(e){i=null!=i?i:[],e instanceof c?i=(0,o.__spreadArray)((0,o.__spreadArray)([],(0,o.__read)(i)),(0,o.__read)(e.errors)):i.push(e)}}}catch(e){n={error:e}}finally{try{g&&!g.done&&(r=p.return)&&r.call(p)}finally{if(n)throw n.error}}}if(i)throw new c(i)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)h(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&u(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&u(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}(),f=d.EMPTY;function p(e){return e instanceof d||e&&"closed"in e&&s(e.remove)&&s(e.add)&&s(e.unsubscribe)}function h(e){s(e)?e():e.unsubscribe()}var g=null,y=null,m=void 0,v=!1,b=!1,w={setTimeout:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=w.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,(0,o.__spreadArray)([],(0,o.__read)(e)))},clearTimeout:function(e){var t=w.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function _(e){w.setTimeout((function(){if(!g)throw e;g(e)}))}function C(){}var M=D("C",void 0,void 0);function D(e,t,n){return{kind:e,value:t,error:n}}var x=null;function I(e){if(v){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,r=n.errorThrown,o=n.error;if(x=null,r)throw o}}else e()}var E=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,p(t)&&t.add(n)):n.destination=P,n}return(0,o.__extends)(t,e),t.create=function(e,t,n){return new k(e,t,n)},t.prototype.next=function(e){this.isStopped?N(function(e){return D("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?N(D("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?N(M,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(d),T=Function.prototype.bind;function O(e,t){return T.call(e,t)}var S=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){A(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){A(e)}else A(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){A(e)}},e}(),k=function(e){function t(t,n,r){var o,i,a=e.call(this)||this;return s(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&b?((i=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},o={next:t.next&&O(t.next,i),error:t.error&&O(t.error,i),complete:t.complete&&O(t.complete,i)}):o=t,a.destination=new S(o),a}return(0,o.__extends)(t,e),t}(E);function A(e){var t;v?(t=e,v&&x&&(x.errorThrown=!0,x.error=t)):_(e)}function N(e,t){var n=y;n&&w.setTimeout((function(){return n(e,t)}))}var P={closed:!0,next:C,error:function(e){throw e},complete:C},j="function"==typeof Symbol&&Symbol.observable||"@@observable";function R(e){return e}function V(e){return 0===e.length?R:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var $=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,o=this,i=(r=e)&&r instanceof E||function(e){return e&&s(e.next)&&s(e.error)&&s(e.complete)}(r)&&p(r)?e:new k(e,t,n);return I((function(){var e=o,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=F(t))((function(t,r){var o=new k({next:function(t){try{e(t)}catch(e){r(e),o.unsubscribe()}},error:r,complete:t});n.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[j]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return V(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=F(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function F(e){var t;return null!==(t=null!=e?e:m)&&void 0!==t?t:Promise}function L(e){return s(e[j])}function H(e){return Symbol.asyncIterator&&s(null==e?void 0:e[Symbol.asyncIterator])}function B(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var U="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function q(e){return s(null==e?void 0:e[U])}function z(e){return(0,o.__asyncGenerator)(this,arguments,(function(){var t,n,r;return(0,o.__generator)(this,(function(i){switch(i.label){case 0:t=e.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,(0,o.__await)(t.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,(0,o.__await)(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,(0,o.__await)(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function W(e){return s(null==e?void 0:e.getReader)}function Q(e){if(e instanceof $)return e;if(null!=e){if(L(e))return r=e,new $((function(e){var t=r[j]();if(s(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(i(e))return n=e,new $((function(e){for(var t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()}));if(a(e))return function(e){return new $((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,_)}))}(e);if(H(e))return Z(e);if(q(e))return t=e,new $((function(e){var n,r;try{for(var i=(0,o.__values)(t),s=i.next();!s.done;s=i.next()){var a=s.value;if(e.next(a),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}e.complete()}));if(W(e))return Z(z(e))}var t,n,r;throw B(e)}function Z(e){return new $((function(t){(function(e,t){var n,r,i,s;return(0,o.__awaiter)(this,void 0,void 0,(function(){var a,l;return(0,o.__generator)(this,(function(c){switch(c.label){case 0:c.trys.push([0,5,6,11]),n=(0,o.__asyncValues)(e),c.label=1;case 1:return[4,n.next()];case 2:if((r=c.sent()).done)return[3,4];if(a=r.value,t.next(a),t.closed)return[2];c.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=c.sent(),i={error:l},[3,11];case 6:return c.trys.push([6,,9,10]),r&&!r.done&&(s=n.return)?[4,s.call(n)]:[3,8];case 7:c.sent(),c.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function K(e){return function(t){if(function(e){return s(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function G(e,t,n,r,o){return new J(e,t,n,r,o)}var J=function(e){function t(t,n,r,o,i,s){var a=e.call(this,t)||this;return a.onFinalize=i,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return(0,o.__extends)(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(E);var Y=new $((function(e){return e.complete()}));function X(e){return e<=0?function(){return Y}:K((function(t,n){var r=0;t.subscribe(G(n,(function(t){++r<=e&&(n.next(t),e<=r&&n.complete())})))}))}var ee=l((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),te=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return(0,o.__extends)(t,e),t.prototype.lift=function(e){var t=new ne(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new ee},t.prototype.next=function(e){var t=this;I((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){var i=t.observers.slice();try{for(var s=(0,o.__values)(i),a=s.next();!a.done;a=s.next())a.value.next(e)}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;I((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;I((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=t.hasError,r=t.isStopped,o=t.observers;return n||r?f:(o.push(e),new d((function(){return u(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new $;return e.source=this,e},t.create=function(e,t){return new ne(e,t)},t}($),ne=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return(0,o.__extends)(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:f},t}(te);function re(e){void 0===e&&(e={});var t=e.connector,n=void 0===t?function(){return new te}:t,r=e.resetOnError,o=void 0===r||r,i=e.resetOnComplete,s=void 0===i||i,a=e.resetOnRefCountZero,l=void 0===a||a;return function(e){var t=null,r=null,i=null,a=0,c=!1,u=!1,d=function(){null==r||r.unsubscribe(),r=null},f=function(){d(),t=i=null,c=u=!1},p=function(){var e=t;f(),null==e||e.unsubscribe()};return K((function(e,h){a++,u||c||d();var g,y=i=null!=i?i:n();h.add((function(){0!=--a||u||c||(r=oe(p,l))})),y.subscribe(h),t||(t=new k({next:function(e){return y.next(e)},error:function(e){u=!0,d(),r=oe(f,o,e),y.error(e)},complete:function(){c=!0,d(),r=oe(f,s),y.complete()}}),(g=e,Q(g)).subscribe(t))}))(e)}}function oe(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];return!0===t?(e(),null):!1===t?null:t.apply(void 0,(0,o.__spreadArray)([],(0,o.__read)(n))).pipe(X(1)).subscribe((function(){return e()}))}function ie(e){for(let t in e)if(e[t]===ie)return t;throw Error("Could not find renamed property on target object.")}function se(e,t){for(const n in t)t.hasOwnProperty(n)&&!e.hasOwnProperty(n)&&(e[n]=t[n])}function ae(e){if("string"==typeof e)return e;if(Array.isArray(e))return"["+e.map(ae).join(", ")+"]";if(null==e)return""+e;if(e.overriddenName)return`${e.overriddenName}`;if(e.name)return`${e.name}`;const t=e.toString();if(null==t)return""+t;const n=t.indexOf("\n");return-1===n?t:t.substring(0,n)}function le(e,t){return null==e||""===e?null===t?"":t:null==t||""===t?e:e+" "+t}const ce=ie({__forward_ref__:ie});function ue(e){return e.__forward_ref__=ue,e.toString=function(){return ae(this())},e}function de(e){return fe(e)?e():e}function fe(e){return"function"==typeof e&&e.hasOwnProperty(ce)&&e.__forward_ref__===ue}class pe extends Error{constructor(e,t){super(he(e,t)),this.code=e}}function he(e,t){const n=`NG0${Math.abs(e)}`;let r=`${n}${t?": "+t:""}`;return ngDevMode&&e<0&&(r=`${r}. Find more at https://angular.io/errors/${n}`),r}function ge(e){return"string"==typeof e?e:null==e?"":String(e)}function ye(e){return"function"==typeof e?e.name||e.toString():"object"==typeof e&&null!=e&&"function"==typeof e.type?e.type.name||e.type.toString():ge(e)}function me(e,t){const n=t?`. Dependency path: ${t.join(" > ")} > ${e}`:"";throw new pe(-200,`Circular dependency in DI detected for ${e}${n}`)}function ve(){throw new Error("Cannot mix multi providers and regular providers")}function be(e,t){const n=t?` in ${t}`:"";throw new pe(-201,`No provider for ${ye(e)} found${n}`)}function we(e,t){"number"!=typeof e&&Ae(t,typeof e,"number","===")}function _e(e,t,n){we(e,"Expected a number"),Te(e,n,"Expected number to be less than or equal to"),Se(e,t,"Expected number to be greater than or equal to")}function Ce(e,t){"string"!=typeof e&&Ae(t,null===e?"null":typeof e,"string","===")}function Me(e,t,n){e!=t&&Ae(n,e,t,"==")}function De(e,t,n){e==t&&Ae(n,e,t,"!=")}function xe(e,t,n){e!==t&&Ae(n,e,t,"===")}function Ie(e,t,n){e===t&&Ae(n,e,t,"!==")}function Ee(e,t,n){e<t||Ae(n,e,t,"<")}function Te(e,t,n){e<=t||Ae(n,e,t,"<=")}function Oe(e,t,n){e>t||Ae(n,e,t,">")}function Se(e,t,n){e>=t||Ae(n,e,t,">=")}function ke(e,t){null==e&&Ae(t,e,null,"!=")}function Ae(e,t,n,r){throw new Error(`ASSERTION ERROR: ${e}`+(null==r?"":` [Expected=> ${n} ${r} ${t} <=Actual]`))}function Ne(e){"undefined"!=typeof Node&&e instanceof Node||"object"==typeof e&&null!=e&&"WebWorkerRenderNode"===e.constructor.name||Ae(`The provided value must be an instance of a DOM Node but got ${ae(e)}`)}function Pe(e,t){ke(e,"Array must be defined.");const n=e.length;(t<0||t>=n)&&Ae(`Index expected to be less than ${n} but got ${t}`)}function je(e,...t){if(-1!==t.indexOf(e))return!0;Ae(`Expected value to be one of ${JSON.stringify(t)} but was ${JSON.stringify(e)}.`)}function Re(e){return{token:e.token,providedIn:e.providedIn||null,factory:e.factory,value:void 0}}const Ve=Re;function $e(e){return{providers:e.providers||[],imports:e.imports||[]}}function Fe(e){return Le(e,Be)||Le(e,qe)}function Le(e,t){return e.hasOwnProperty(t)?e[t]:null}function He(e){return e&&(e.hasOwnProperty(Ue)||e.hasOwnProperty(ze))?e[Ue]:null}const Be=ie({ɵprov:ie}),Ue=ie({ɵinj:ie}),qe=ie({ngInjectableDef:ie}),ze=ie({ngInjectorDef:ie});var We;let Qe;function Ze(e){const t=Qe;return Qe=e,t}function Ke(e,t,n){const r=Fe(e);return r&&"root"==r.providedIn?void 0===r.value?r.value=r.factory():r.value:n&We.Optional?null:void 0!==t?t:void be(ae(e),"Injector")}function Ge(e){return{toString:e}.toString()}var Je,Ye,Xe;function et(e){return null==e||e===Je.Default}!function(e){e[e.Default=0]="Default",e[e.Host=1]="Host",e[e.Self=2]="Self",e[e.SkipSelf=4]="SkipSelf",e[e.Optional=8]="Optional"}(We||(We={})),function(e){e[e.OnPush=0]="OnPush",e[e.Default=1]="Default"}(Je||(Je={})),function(e){e[e.CheckOnce=0]="CheckOnce",e[e.Checked=1]="Checked",e[e.CheckAlways=2]="CheckAlways",e[e.Detached=3]="Detached",e[e.Errored=4]="Errored",e[e.Destroyed=5]="Destroyed"}(Ye||(Ye={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(Xe||(Xe={}));const tt="undefined"!=typeof globalThis&&globalThis,nt="undefined"!=typeof window&&window,rt="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,ot="undefined"!=typeof global&&global,it=tt||ot||nt||rt;function st(){return!("undefined"!=typeof ngDevMode&&!ngDevMode||("object"!=typeof ngDevMode&&function(){const e="undefined"!=typeof location?location.toString():"",t={namedConstructors:-1!=e.indexOf("ngDevMode=namedConstructors"),firstCreatePass:0,tNode:0,tView:0,rendererCreateTextNode:0,rendererSetText:0,rendererCreateElement:0,rendererAddEventListener:0,rendererSetAttribute:0,rendererRemoveAttribute:0,rendererSetProperty:0,rendererSetClassName:0,rendererAddClass:0,rendererRemoveClass:0,rendererSetStyle:0,rendererRemoveStyle:0,rendererDestroy:0,rendererDestroyNode:0,rendererMoveNode:0,rendererRemoveNode:0,rendererAppendChild:0,rendererInsertBefore:0,rendererCreateComment:0},n=-1===e.indexOf("ngDevMode=false");it.ngDevMode=n&&t}(),"undefined"==typeof ngDevMode||!ngDevMode))}const at={},lt=[];("undefined"==typeof ngDevMode||ngDevMode)&&st()&&(Object.freeze(at),Object.freeze(lt));const ct=ie({ɵcmp:ie}),ut=ie({ɵdir:ie}),dt=ie({ɵpipe:ie}),ft=ie({ɵmod:ie}),pt=ie({ɵfac:ie}),ht=ie({__NG_ELEMENT_ID__:ie});let gt=0;function yt(e){return Ge((()=>{("undefined"==typeof ngDevMode||ngDevMode)&&st();const t={},n={type:e.type,providersResolver:null,decls:e.decls,vars:e.vars,factory:null,template:e.template||null,consts:e.consts||null,ngContentSelectors:e.ngContentSelectors,hostBindings:e.hostBindings||null,hostVars:e.hostVars||0,hostAttrs:e.hostAttrs||null,contentQueries:e.contentQueries||null,declaredInputs:t,inputs:null,outputs:null,exportAs:e.exportAs||null,onPush:e.changeDetection===Je.OnPush,directiveDefs:null,pipeDefs:null,selectors:e.selectors||lt,viewQuery:e.viewQuery||null,features:e.features||null,data:e.data||{},encapsulation:e.encapsulation||Xe.Emulated,id:"c",styles:e.styles||lt,_:null,setInput:null,schemas:e.schemas||null,tView:null},r=e.directives,o=e.features,i=e.pipes;return n.id+=gt++,n.inputs=Mt(e.inputs,t),n.outputs=Mt(e.outputs),o&&o.forEach((e=>e(n))),n.directiveDefs=r?()=>("function"==typeof r?r():r).map(vt):null,n.pipeDefs=i?()=>("function"==typeof i?i():i).map(bt):null,n}))}function mt(e,t,n){const r=e.ɵcmp;r.directiveDefs=()=>t.map(vt),r.pipeDefs=()=>n.map(bt)}function vt(e){const t=It(e)||Et(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is neither 'ComponentType' or 'DirectiveType'.`);return t}function bt(e){const t=Tt(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is not a 'PipeType'.`);return t}const wt={};function _t(e){return Ge((()=>{const t={type:e.type,bootstrap:e.bootstrap||lt,declarations:e.declarations||lt,imports:e.imports||lt,exports:e.exports||lt,transitiveCompileScopes:null,schemas:e.schemas||null,id:e.id||null};return null!=e.id&&(wt[e.id]=e.type),t}))}function Ct(e,t){return Ge((()=>{const n=Ot(e,!0);n.declarations=t.declarations||lt,n.imports=t.imports||lt,n.exports=t.exports||lt}))}function Mt(e,t){if(null==e)return at;const n={};for(const r in e)if(e.hasOwnProperty(r)){let o=e[r],i=o;Array.isArray(o)&&(i=o[1],o=o[0]),n[o]=r,t&&(t[o]=i)}return n}const Dt=yt;function xt(e){return{type:e.type,name:e.name,factory:null,pure:!1!==e.pure,onDestroy:e.type.prototype.ngOnDestroy||null}}function It(e){return e[ct]||null}function Et(e){return e[ut]||null}function Tt(e){return e[dt]||null}function Ot(e,t){const n=e[ft]||null;if(!n&&!0===t)throw new Error(`Type ${ae(e)} does not have 'ɵmod' property.`);return n}const St=20,kt=["Root","Component","Embedded"],At=10;function Nt(e){return Array.isArray(e)&&"object"==typeof e[1]}function Pt(e){return Array.isArray(e)&&!0===e[1]}function jt(e){return 0!=(8&e.flags)}function Rt(e){return 2==(2&e.flags)}function Vt(e){return 1==(1&e.flags)}function $t(e){return null!==e.template}function Ft(e,t){Lt(e,t[1])}function Lt(e,t){Ht(e),e.hasOwnProperty("tView_")&&Me(e.tView_,t,"This TNode does not belong to this TView.")}function Ht(e){ke(e,"TNode must be defined"),e&&"object"==typeof e&&e.hasOwnProperty("directiveStylingLast")||Ae("Not of type TNode, got: "+e)}function Bt(e){ke(e,"Expected TIcu to be defined"),"number"!=typeof e.currentCaseLViewIndex&&Ae("Object is not of TIcu type.")}function Ut(e,t="Type passed in is not ComponentType, it does not have 'ɵcmp' property."){It(e)||Ae(t)}function qt(e){ke(e,"currentTNode should exist!"),ke(e.parent,"currentTNode should have a parent")}function zt(e){ke(e,"LContainer must be defined"),Me(Pt(e),!0,"Expecting LContainer")}function Wt(e){e&&Me(Nt(e),!0,"Expecting LView or undefined or null")}function Qt(e){ke(e,"LView must be defined"),Me(Nt(e),!0,"Expecting LView")}function Zt(e,t){Me(e.firstCreatePass,!0,t||"Should only be called in first create pass.")}function Kt(e,t){Me(e.firstUpdatePass,!0,t||"Should only be called in first update pass.")}function Gt(e,t){Jt(e[1].expandoStartIndex,e.length,t)}function Jt(e,t,n){e<=n&&n<t||Ae(`Index out of range (expecting ${e} <= ${n} < ${t})`)}function Yt(e,t){ke(e,t||"Component views should always have a parent view (component's host view)")}function Xt(e,t){Gt(e,t),Gt(e,t+8),we(e[t+0],"injectorIndex should point to a bloom filter"),we(e[t+1],"injectorIndex should point to a bloom filter"),we(e[t+2],"injectorIndex should point to a bloom filter"),we(e[t+3],"injectorIndex should point to a bloom filter"),we(e[t+4],"injectorIndex should point to a bloom filter"),we(e[t+5],"injectorIndex should point to a bloom filter"),we(e[t+6],"injectorIndex should point to a bloom filter"),we(e[t+7],"injectorIndex should point to a bloom filter"),we(e[t+8],"injectorIndex should point to parent injector")}function en(e,t){const n=e.hasOwnProperty(pt);if(!n&&!0===t&&ngDevMode)throw new Error(`Type ${ae(e)} does not have 'ɵfac' property.`);return n?e[pt]:null}class tn{constructor(e,t,n){this.previousValue=e,this.currentValue=t,this.firstChange=n}isFirstChange(){return this.firstChange}}function nn(){return rn}function rn(e){return e.type.prototype.ngOnChanges&&(e.setInput=sn),on}function on(){const e=an(this),t=e?.current;if(t){const n=e.previous;if(n===at)e.previous=t;else for(let e in t)n[e]=t[e];e.current=null,this.ngOnChanges(t)}}function sn(e,t,n,r){const o=an(e)||function(e,t){return e.__ngSimpleChanges__=t}(e,{previous:at,current:null}),i=o.current||(o.current={}),s=o.previous,a=this.declaredInputs[n],l=s[a];i[a]=new tn(l&&l.currentValue,t,s===at),e[r]=t}function an(e){return e.__ngSimpleChanges__||null}nn.ngInherit=!0;let ln=null;const cn=e=>{ln=e},un=function(e,t,n){null!=ln&&ln(e,t,n)},dn="svg",fn="math";let pn;function hn(e){pn=e}function gn(){return void 0!==pn?pn:"undefined"!=typeof document?document:void 0}var yn;function mn(e){return!!e.listen}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(yn||(yn={}));const vn={createRenderer:(e,t)=>gn()};function bn(e){for(;Array.isArray(e);)e=e[0];return e}function wn(e,t){return ngDevMode&&Pe(t,e),ngDevMode&&Se(e,St,"Expected to be past HEADER_OFFSET"),bn(t[e])}function _n(e,t){ngDevMode&&Ft(e,t),ngDevMode&&Pe(t,e.index);const n=bn(t[e.index]);return ngDevMode&&!mn(t[11])&&Ne(n),n}function Cn(e,t){ngDevMode&&Oe(t,-1,"wrong index for TNode"),ngDevMode&&Ee(t,e.data.length,"wrong index for TNode");const n=e.data[t];return ngDevMode&&null!==n&&Ht(n),n}function Mn(e,t){return ngDevMode&&Pe(e,t),e[t]}function Dn(e,t){ngDevMode&&Pe(t,e);const n=t[e];return Nt(n)?n:n[0]}function xn(e){return 4==(4&e[2])}function In(e){return 128==(128&e[2])}function En(e,t){return null==t?null:(ngDevMode&&Pe(e,t),e[t])}function Tn(e){e[18]=0}function On(e,t){e[5]+=t;let n=e,r=e[3];for(;null!==r&&(1===t&&1===n[5]||-1===t&&0===n[5]);)r[5]+=t,n=r,r=r[3]}const Sn={lFrame:sr(null),bindingsEnabled:!0,isInCheckNoChangesMode:!1};function kn(){return Sn.bindingsEnabled}function An(){Sn.bindingsEnabled=!0}function Nn(){Sn.bindingsEnabled=!1}function Pn(){return Sn.lFrame.lView}function jn(){return Sn.lFrame.tView}function Rn(e){return Sn.lFrame.contextLView=e,e[8]}function Vn(){let e=$n();for(;null!==e&&64===e.type;)e=e.parent;return e}function $n(){return Sn.lFrame.currentTNode}function Fn(){const e=Sn.lFrame,t=e.currentTNode;return e.isParent?t:t.parent}function Ln(e,t){ngDevMode&&e&&Lt(e,Sn.lFrame.tView);const n=Sn.lFrame;n.currentTNode=e,n.isParent=t}function Hn(){return Sn.lFrame.isParent}function Bn(){Sn.lFrame.isParent=!1}function Un(){return Sn.isInCheckNoChangesMode}function qn(e){Sn.isInCheckNoChangesMode=e}function zn(){const e=Sn.lFrame;let t=e.bindingRootIndex;return-1===t&&(t=e.bindingRootIndex=e.tView.bindingStartIndex),t}function Wn(){return Sn.lFrame.bindingIndex}function Qn(e){return Sn.lFrame.bindingIndex=e}function Zn(){return Sn.lFrame.bindingIndex++}function Kn(e){const t=Sn.lFrame,n=t.bindingIndex;return t.bindingIndex=t.bindingIndex+e,n}function Gn(e){Sn.lFrame.inI18n=e}function Jn(e,t){const n=Sn.lFrame;n.bindingIndex=n.bindingRootIndex=e,Yn(t)}function Yn(e){Sn.lFrame.currentDirectiveIndex=e}function Xn(e){const t=Sn.lFrame.currentDirectiveIndex;return-1===t?null:e[t]}function er(){return Sn.lFrame.currentQueryIndex}function tr(e){Sn.lFrame.currentQueryIndex=e}function nr(e){const t=e[1];return 2===t.type?(ngDevMode&&ke(t.declTNode,"Embedded TNodes should have declaration parents."),t.declTNode):1===t.type?e[6]:null}function rr(e,t,n){if(ngDevMode&&Wt(e),n&We.SkipSelf){ngDevMode&&Lt(t,e[1]);let r=t,o=e;for(;ngDevMode&&ke(r,"Parent TNode should be defined"),r=r.parent,!(null!==r||n&We.Host||(r=nr(o),null===r)||(ngDevMode&&ke(o,"Parent LView should be defined"),o=o[15],10&r.type)););if(null===r)return!1;t=r,e=o}ngDevMode&&Ft(t,e);const r=Sn.lFrame=ir();return r.currentTNode=t,r.lView=e,!0}function or(e){ngDevMode&&De(e[0],e[1],"????"),ngDevMode&&Wt(e);const t=ir();ngDevMode&&(Me(t.isParent,!0,"Expected clean LFrame"),Me(t.lView,null,"Expected clean LFrame"),Me(t.tView,null,"Expected clean LFrame"),Me(t.selectedIndex,-1,"Expected clean LFrame"),Me(t.elementDepthCount,0,"Expected clean LFrame"),Me(t.currentDirectiveIndex,-1,"Expected clean LFrame"),Me(t.currentNamespace,null,"Expected clean LFrame"),Me(t.bindingRootIndex,-1,"Expected clean LFrame"),Me(t.currentQueryIndex,0,"Expected clean LFrame"));const n=e[1];Sn.lFrame=t,ngDevMode&&n.firstChild&&Lt(n.firstChild,n),t.currentTNode=n.firstChild,t.lView=e,t.tView=n,t.contextLView=e,t.bindingIndex=n.bindingStartIndex,t.inI18n=!1}function ir(){const e=Sn.lFrame,t=null===e?null:e.child;return null===t?sr(e):t}function sr(e){const t={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:e,child:null,inI18n:!1};return null!==e&&(e.child=t),t}function ar(){const e=Sn.lFrame;return Sn.lFrame=e.parent,e.currentTNode=null,e.lView=null,e}const lr=ar;function cr(){const e=ar();e.isParent=!0,e.tView=null,e.selectedIndex=-1,e.contextLView=null,e.elementDepthCount=0,e.currentDirectiveIndex=-1,e.currentNamespace=null,e.bindingRootIndex=-1,e.bindingIndex=-1,e.currentQueryIndex=0}function ur(){return Sn.lFrame.selectedIndex}function dr(e){ngDevMode&&-1!==e&&Se(e,St,"Index must be past HEADER_OFFSET (or -1)."),ngDevMode&&Ee(e,Sn.lFrame.lView.length,"Can't set index passed end of LView"),Sn.lFrame.selectedIndex=e}function fr(){const e=Sn.lFrame;return Cn(e.tView,e.selectedIndex)}function pr(){Sn.lFrame.currentNamespace=dn}function hr(){Sn.lFrame.currentNamespace=fn}function gr(){Sn.lFrame.currentNamespace=null}function yr(e,t){ngDevMode&&Zt(e);for(let n=t.directiveStart,r=t.directiveEnd;n<r;n++){const t=e.data[n];ngDevMode&&ke(t,"Expecting DirectiveDef");const r=t.type.prototype,{ngAfterContentInit:o,ngAfterContentChecked:i,ngAfterViewInit:s,ngAfterViewChecked:a,ngOnDestroy:l}=r;o&&(e.contentHooks||(e.contentHooks=[])).push(-n,o),i&&((e.contentHooks||(e.contentHooks=[])).push(n,i),(e.contentCheckHooks||(e.contentCheckHooks=[])).push(n,i)),s&&(e.viewHooks||(e.viewHooks=[])).push(-n,s),a&&((e.viewHooks||(e.viewHooks=[])).push(n,a),(e.viewCheckHooks||(e.viewCheckHooks=[])).push(n,a)),null!=l&&(e.destroyHooks||(e.destroyHooks=[])).push(n,l)}}function mr(e,t,n){wr(e,t,3,n)}function vr(e,t,n,r){ngDevMode&&De(n,3,"Init pre-order hooks should not be called more than once"),(3&e[2])===n&&wr(e,t,n,r)}function br(e,t){ngDevMode&&De(t,3,"Init hooks phase should not be incremented after all init hooks have been run.");let n=e[2];(3&n)===t&&(n&=2047,n+=1,e[2]=n)}function wr(e,t,n,r){ngDevMode&&Me(Un(),!1,"Hooks should never be run when in check no changes mode.");const o=void 0!==r?65535&e[18]:0,i=null!=r?r:-1,s=t.length-1;let a=0;for(let l=o;l<s;l++)if("number"==typeof t[l+1]){if(a=t[l],null!=r&&a>=r)break}else t[l]<0&&(e[18]+=65536),(a<i||-1==i)&&(_r(e,n,t,l),e[18]=(4294901760&e[18])+l+2),l++}function _r(e,t,n,r){const o=n[r]<0,i=n[r+1],s=e[o?-n[r]:n[r]];if(o){if(e[2]>>11<e[18]>>16&&(3&e[2])===t){e[2]+=2048,un(4,s,i);try{i.call(s)}finally{un(5,s,i)}}}else{un(4,s,i);try{i.call(s)}finally{un(5,s,i)}}}const Cr=-1;class Mr{constructor(e,t,n){this.factory=e,this.resolving=!1,ngDevMode&&ke(e,"Factory not specified"),ngDevMode&&Me(typeof e,"function","Expected factory function."),this.canSeeViewProviders=t,this.injectImpl=n}}function Dr(e){let t="";return 1&e&&(t+="|Text"),2&e&&(t+="|Element"),4&e&&(t+="|Container"),8&e&&(t+="|ElementContainer"),16&e&&(t+="|Projection"),32&e&&(t+="|IcuContainer"),64&e&&(t+="|Placeholder"),t.length>0?t.substring(1):t}function xr(e,t,n){ke(e,"should be called with a TNode"),0==(e.type&t)&&Ae(n||`Expected [${Dr(t)}] but got ${Dr(e.type)}.`)}function Ir(e,t,n){const r=mn(e);let o=0;for(;o<n.length;){const i=n[o];if("number"==typeof i){if(0!==i)break;o++;const s=n[o++],a=n[o++],l=n[o++];ngDevMode&&ngDevMode.rendererSetAttribute++,r?e.setAttribute(t,a,l,s):t.setAttributeNS(s,a,l)}else{const s=i,a=n[++o];ngDevMode&&ngDevMode.rendererSetAttribute++,Tr(s)?r&&e.setProperty(t,s,a):r?e.setAttribute(t,s,a):t.setAttribute(s,a),o++}}return o}function Er(e){return 3===e||4===e||6===e}function Tr(e){return 64===e.charCodeAt(0)}function Or(e,t){if(null===t||0===t.length);else if(null===e||0===e.length)e=t.slice();else{let n=-1;for(let r=0;r<t.length;r++){const o=t[r];"number"==typeof o?n=o:0===n||Sr(e,n,o,null,-1===n||2===n?t[++r]:null)}}return e}function Sr(e,t,n,r,o){let i=0,s=e.length;if(-1===t)s=-1;else for(;i<e.length;){const n=e[i++];if("number"==typeof n){if(n===t){s=-1;break}if(n>t){s=i-1;break}}}for(;i<e.length;){const t=e[i];if("number"==typeof t)break;if(t===n){if(null===r)return void(null!==o&&(e[i+1]=o));if(r===e[i+1])return void(e[i+2]=o)}i++,null!==r&&i++,null!==o&&i++}-1!==s&&(e.splice(s,0,t),i=s+1),e.splice(i++,0,n),null!==r&&e.splice(i++,0,r),null!==o&&e.splice(i++,0,o)}function kr(e){return e!==Cr}function Ar(e){return ngDevMode&&we(e,"Number expected"),ngDevMode&&De(e,-1,"Not a valid state."),ngDevMode&&Oe(32767&e,St,"Parent injector must be pointing past HEADER_OFFSET."),32767&e}function Nr(e,t){let n=e>>16,r=t;for(;n>0;)r=r[15],n--;return r}let Pr=!0;function jr(e){const t=Pr;return Pr=e,t}let Rr=0;function Vr(e,t){const n=Fr(e,t);if(-1!==n)return n;const r=t[1];r.firstCreatePass&&(e.injectorIndex=t.length,$r(r.data,e),$r(t,null),$r(r.blueprint,null));const o=Lr(e,t),i=e.injectorIndex;if(kr(o)){const e=Ar(o),n=Nr(o,t),r=n[1].data;for(let o=0;o<8;o++)t[i+o]=n[e+o]|r[e+o]}return t[i+8]=o,i}function $r(e,t){e.push(0,0,0,0,0,0,0,0,t)}function Fr(e,t){return-1===e.injectorIndex||e.parent&&e.parent.injectorIndex===e.injectorIndex||null===t[e.injectorIndex+8]?-1:(ngDevMode&&Pe(t,e.injectorIndex),e.injectorIndex)}function Lr(e,t){if(e.parent&&-1!==e.parent.injectorIndex)return e.parent.injectorIndex;let n=0,r=null,o=t;for(;null!==o;){const e=o[1],t=e.type;if(2===t?(ngDevMode&&ke(e.declTNode,"Embedded TNodes should have declaration parents."),r=e.declTNode):1===t?r=o[6]:(ngDevMode&&Me(e.type,0,"Root type expected"),r=null),null===r)return Cr;if(ngDevMode&&r&&Ft(r,o[15]),n++,o=o[15],-1!==r.injectorIndex)return r.injectorIndex|n<<16}return Cr}function Hr(e,t,n){!function(e,t,n){let r;ngDevMode&&Me(t.firstCreatePass,!0,"expected firstCreatePass to be true"),"string"==typeof n?r=n.charCodeAt(0)||0:n.hasOwnProperty(ht)&&(r=n[ht]),null==r&&(r=n[ht]=Rr++);const o=255&r,i=1<<o;t.data[e+(o>>5)]|=i}(e,t,n)}function Br(e,t,n){if(n&We.Optional)return e;be(t,"NodeInjector")}function Ur(e,t,n,r){if(n&We.Optional&&void 0===r&&(r=null),0==(n&(We.Self|We.Host))){const o=e[9],i=Ze(void 0);try{return o?o.get(t,r,n&We.Optional):Ke(t,r,n&We.Optional)}finally{Ze(i)}}return Br(r,t,n)}function qr(e,t,n,r=We.Default,o){if(null!==e){const i=function(e){if(ngDevMode&&ke(e,"token must be defined"),"string"==typeof e)return e.charCodeAt(0)||0;const t=e.hasOwnProperty(ht)?e[ht]:void 0;return"number"==typeof t?t>=0?255&t:(ngDevMode&&Me(t,-1,"Expecting to get Special Injector Id"),Wr):t}(n);if("function"==typeof i){if(!rr(t,e,r))return r&We.Host?Br(o,n,r):Ur(t,n,r,o);try{const e=i(r);if(null!=e||r&We.Optional)return e;be(n)}finally{lr()}}else if("number"==typeof i){let o=null,s=Fr(e,t),a=Cr,l=r&We.Host?t[16][6]:null;for((-1===s||r&We.SkipSelf)&&(a=-1===s?Lr(e,t):t[s+8],a!==Cr&&Jr(r,!1)?(o=t[1],s=Ar(a),t=Nr(a,t)):s=-1);-1!==s;){ngDevMode&&Xt(t,s);const e=t[1];if(ngDevMode&&Ft(e.data[s+8],t),Gr(i,s,e.data)){const e=Qr(s,t,n,o,r,l);if(e!==zr)return e}a=t[s+8],a!==Cr&&Jr(r,t[1].data[s+8]===l)&&Gr(i,s,t)?(o=e,s=Ar(a),t=Nr(a,t)):s=-1}}}return Ur(t,n,r,o)}const zr={};function Wr(){return new Yr(Vn(),Pn())}function Qr(e,t,n,r,o,i){const s=t[1],a=s.data[e+8],l=Zr(a,s,n,null==r?Rt(a)&&Pr:r!=s&&0!=(3&a.type),o&We.Host&&i===a);return null!==l?Kr(t,s,l,a):zr}function Zr(e,t,n,r,o){const i=e.providerIndexes,s=t.data,a=1048575&i,l=e.directiveStart,c=e.directiveEnd,u=i>>20,d=o?a+u:c;for(let e=r?a:a+u;e<d;e++){const t=s[e];if(e<l&&n===t||e>=l&&t.type===n)return e}if(o){const e=s[l];if(e&&$t(e)&&e.type===n)return l}return null}function Kr(e,t,n,r){let o=e[n];const i=t.data;if(o instanceof Mr){const a=o;a.resolving&&me(ye(i[n]));const l=jr(a.canSeeViewProviders);a.resolving=!0;const c=a.injectImpl?Ze(a.injectImpl):null,u=rr(e,r,We.Default);ngDevMode&&Me(u,!0,"Because flags do not contain `SkipSelf' we expect this to always succeed.");try{o=e[n]=a.factory(void 0,i,e,r),t.firstCreatePass&&n>=r.directiveStart&&(ngDevMode&&(void 0!==(s=i[n]).type&&null!=s.selectors&&void 0!==s.inputs||Ae("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.")),function(e,t,n){ngDevMode&&Zt(n);const{ngOnChanges:r,ngOnInit:o,ngDoCheck:i}=t.type.prototype;if(r){const r=rn(t);(n.preOrderHooks||(n.preOrderHooks=[])).push(e,r),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,r)}o&&(n.preOrderHooks||(n.preOrderHooks=[])).push(0-e,o),i&&((n.preOrderHooks||(n.preOrderHooks=[])).push(e,i),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,i))}(n,i[n],t))}finally{null!==c&&Ze(c),jr(l),a.resolving=!1,lr()}}var s;return o}function Gr(e,t,n){const r=1<<e;return!!(n[t+(e>>5)]&r)}function Jr(e,t){return!(e&We.Self||e&We.Host&&t)}class Yr{constructor(e,t){this._tNode=e,this._lView=t}get(e,t,n){return qr(this._tNode,this._lView,e,n,t)}}function Xr(e){return Ge((()=>{const t=e.prototype.constructor,n=t[pt]||eo(t),r=Object.prototype;let o=Object.getPrototypeOf(e.prototype).constructor;for(;o&&o!==r;){const e=o[pt]||eo(o);if(e&&e!==n)return e;o=Object.getPrototypeOf(o)}return e=>new e}))}function eo(e){return fe(e)?()=>{const t=eo(de(e));return t&&t()}:en(e)}function to(e){return function(e,t){if(ngDevMode&&xr(e,15),ngDevMode&&ke(e,"expecting tNode"),"class"===t)return e.classes;if("style"===t)return e.styles;const n=e.attrs;if(n){const e=n.length;let r=0;for(;r<e;){const o=n[r];if(Er(o))break;if(0===o)r+=2;else if("number"==typeof o)for(r++;r<e&&"string"==typeof n[r];)r++;else{if(o===t)return n[r+1];r+=2}}}return null}(Vn(),e)}const no="__annotations__",ro="__parameters__",oo="__prop__metadata__";function io(e,t,n,r,o){return Ge((()=>{const i=so(t);function s(...e){if(this instanceof s)return i.call(this,...e),this;const t=new s(...e);return function(n){return o&&o(n,...e),(n.hasOwnProperty(no)?n[no]:Object.defineProperty(n,no,{value:[]})[no]).push(t),r&&r(n),n}}return n&&(s.prototype=Object.create(n.prototype)),s.prototype.ngMetadataName=e,s.annotationCls=s,s}))}function so(e){return function(...t){if(e){const n=e(...t);for(const e in n)this[e]=n[e]}}}function ao(e,t,n){return Ge((()=>{const r=so(t);function o(...e){if(this instanceof o)return r.apply(this,e),this;const t=new o(...e);return n.annotation=t,n;function n(e,n,r){const o=e.hasOwnProperty(ro)?e[ro]:Object.defineProperty(e,ro,{value:[]})[ro];for(;o.length<=r;)o.push(null);return(o[r]=o[r]||[]).push(t),e}}return n&&(o.prototype=Object.create(n.prototype)),o.prototype.ngMetadataName=e,o.annotationCls=o,o}))}function lo(e,t,n,r){return Ge((()=>{const o=so(t);function i(...e){if(this instanceof i)return o.apply(this,e),this;const t=new i(...e);return function(n,o){const i=n.constructor,s=i.hasOwnProperty(oo)?i[oo]:Object.defineProperty(i,oo,{value:{}})[oo];s[o]=s.hasOwnProperty(o)&&s[o]||[],s[o].unshift(t),r&&r(n,o,...e)}}return n&&(i.prototype=Object.create(n.prototype)),i.prototype.ngMetadataName=e,i.annotationCls=i,i}))}const co=ao("Attribute",(e=>({attributeName:e,__NG_ELEMENT_ID__:()=>to(e)})));class uo{constructor(e,t){this._desc=e,this.ngMetadataName="InjectionToken",this.ɵprov=void 0,"number"==typeof t?(("undefined"==typeof ngDevMode||ngDevMode)&&Ee(t,0,"Only negative numbers are supported here"),this.__NG_ELEMENT_ID__=t):void 0!==t&&(this.ɵprov=Re({token:this,providedIn:t.providedIn||"root",factory:t.factory}))}toString(){return`InjectionToken ${this._desc}`}}const fo=new uo("AnalyzeForEntryComponents");class po{}const ho=lo("ContentChildren",((e,t={})=>({selector:e,first:!1,isViewQuery:!1,descendants:!1,emitDistinctChangesOnly:!0,...t})),po),go=lo("ContentChild",((e,t={})=>({selector:e,first:!0,isViewQuery:!1,descendants:!0,...t})),po),yo=lo("ViewChildren",((e,t={})=>({selector:e,first:!1,isViewQuery:!0,descendants:!0,emitDistinctChangesOnly:!0,...t})),po),mo=lo("ViewChild",((e,t)=>({selector:e,first:!0,isViewQuery:!0,descendants:!0,...t})),po);var vo,bo;function wo(e){const t=it.ng;if(t&&t.ɵcompilerFacade)return t.ɵcompilerFacade;if("undefined"==typeof ngDevMode||ngDevMode){console.error(`JIT compilation failed for ${e.kind}`,e.type);let t=`The ${e.kind} '${e.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n`;throw 1===e.usage?(t+=`The ${e.kind} is part of a library that has been partially compiled.\n`,t+="However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n",t+="\n",t+="Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n"):t+="JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n",t+="Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n",t+="or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.",new Error(t)}throw new Error("JIT compiler unavailable")}!function(e){e[e.Directive=0]="Directive",e[e.Component=1]="Component",e[e.Injectable=2]="Injectable",e[e.Pipe=3]="Pipe",e[e.NgModule=4]="NgModule"}(vo||(vo={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(bo||(bo={}));const _o=Function;function Co(e){return"function"==typeof e}function Mo(e,t){void 0===t&&(t=e);for(let n=0;n<e.length;n++){let r=e[n];Array.isArray(r)?(t===e&&(t=e.slice(0,n)),Mo(r,t)):t!==e&&t.push(r)}return t}function Do(e,t){e.forEach((e=>Array.isArray(e)?Do(e,t):t(e)))}function xo(e,t,n){t>=e.length?e.push(n):e.splice(t,0,n)}function Io(e,t){return t>=e.length-1?e.pop():e.splice(t,1)[0]}function Eo(e,t){const n=[];for(let r=0;r<e;r++)n.push(t);return n}function To(e,t,n){let r=So(e,t);return r>=0?e[1|r]=n:(r=~r,function(e,t,n,r){ngDevMode&&Te(t,e.length,"Can't insert past array end.");let o=e.length;if(o==t)e.push(n,r);else if(1===o)e.push(r,e[0]),e[0]=n;else{for(o--,e.push(e[o-1],e[o]);o>t;){const t=o-2;e[o]=e[t],o--}e[t]=n,e[t+1]=r}}(e,r,t,n)),r}function Oo(e,t){const n=So(e,t);if(n>=0)return e[1|n]}function So(e,t){return function(e,t,n){ngDevMode&&Me(Array.isArray(e),!0,"Expecting an array");let r=0,o=e.length>>n;for(;o!==r;){const i=r+(o-r>>1),s=e[i<<n];if(t===s)return i<<n;s>t?o=i:r=i+1}return~(o<<n)}(e,t,1)}const ko=/^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/,Ao=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/,No=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/,Po=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;class jo{constructor(e){this._reflect=e||it.Reflect}isReflectionEnabled(){return!0}factory(e){return(...t)=>new e(...t)}_zipTypesAndAnnotations(e,t){let n;n=Eo(void 0===e?t.length:e.length);for(let r=0;r<n.length;r++)void 0===e?n[r]=[]:e[r]&&e[r]!=Object?n[r]=[e[r]]:n[r]=[],t&&null!=t[r]&&(n[r]=n[r].concat(t[r]));return n}_ownParameters(e,t){if(n=e.toString(),ko.test(n)||Po.test(n)||Ao.test(n)&&!No.test(n))return null;var n;if(e.parameters&&e.parameters!==t.parameters)return e.parameters;const r=e.ctorParameters;if(r&&r!==t.ctorParameters){const e="function"==typeof r?r():r,t=e.map((e=>e&&e.type)),n=e.map((e=>e&&Ro(e.decorators)));return this._zipTypesAndAnnotations(t,n)}const o=e.hasOwnProperty(ro)&&e[ro],i=this._reflect&&this._reflect.getOwnMetadata&&this._reflect.getOwnMetadata("design:paramtypes",e);return i||o?this._zipTypesAndAnnotations(i,o):Eo(e.length)}parameters(e){if(!Co(e))return[];const t=Vo(e);let n=this._ownParameters(e,t);return n||t===Object||(n=this.parameters(t)),n||[]}_ownAnnotations(e,t){if(e.annotations&&e.annotations!==t.annotations){let t=e.annotations;return"function"==typeof t&&t.annotations&&(t=t.annotations),t}return e.decorators&&e.decorators!==t.decorators?Ro(e.decorators):e.hasOwnProperty(no)?e[no]:null}annotations(e){if(!Co(e))return[];const t=Vo(e),n=this._ownAnnotations(e,t)||[];return(t!==Object?this.annotations(t):[]).concat(n)}_ownPropMetadata(e,t){if(e.propMetadata&&e.propMetadata!==t.propMetadata){let t=e.propMetadata;return"function"==typeof t&&t.propMetadata&&(t=t.propMetadata),t}if(e.propDecorators&&e.propDecorators!==t.propDecorators){const t=e.propDecorators,n={};return Object.keys(t).forEach((e=>{n[e]=Ro(t[e])})),n}return e.hasOwnProperty(oo)?e[oo]:null}propMetadata(e){if(!Co(e))return{};const t=Vo(e),n={};if(t!==Object){const e=this.propMetadata(t);Object.keys(e).forEach((t=>{n[t]=e[t]}))}const r=this._ownPropMetadata(e,t);return r&&Object.keys(r).forEach((e=>{const t=[];n.hasOwnProperty(e)&&t.push(...n[e]),t.push(...r[e]),n[e]=t})),n}ownPropMetadata(e){return Co(e)&&this._ownPropMetadata(e,Vo(e))||{}}hasLifecycleHook(e,t){return e instanceof _o&&t in e.prototype}guards(e){return{}}getter(e){return new Function("o","return o."+e+";")}setter(e){return new Function("o","v","return o."+e+" = v;")}method(e){return new Function("o","args",`if (!o.${e}) throw new Error('"${e}" is undefined');\n        return o.${e}.apply(o, args);`)}importUri(e){return"object"==typeof e&&e.filePath?e.filePath:`./${ae(e)}`}resourceUri(e){return`./${ae(e)}`}resolveIdentifier(e,t,n,r){return r}resolveEnum(e,t){return e[t]}}function Ro(e){return e?e.map((e=>new(0,e.type.annotationCls)(...e.args?e.args:[]))):[]}function Vo(e){const t=e.prototype?Object.getPrototypeOf(e.prototype):null;return(t?t.constructor:null)||Object}const $o={},Fo=/\n/gm,Lo="__source",Ho=ie({provide:String,useValue:ie});let Bo;function Uo(e){const t=Bo;return Bo=e,t}function qo(e,t=We.Default){if(void 0===Bo){const e="undefined"==typeof ngDevMode||ngDevMode?"inject() must be called from an injection context":"";throw new pe(203,e)}return null===Bo?Ke(e,void 0,t):Bo.get(e,t&We.Optional?null:void 0,t)}function zo(e,t=We.Default){return(Qe||qo)(de(e),t)}function Wo(e){const t=ngDevMode?`This constructor is not compatible with Angular Dependency Injection because its dependency at index ${e} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${e} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`:"invalid";throw new Error(t)}const Qo=zo;function Zo(e){const t=[];for(let n=0;n<e.length;n++){const r=de(e[n]);if(Array.isArray(r)){if(0===r.length){const e="undefined"==typeof ngDevMode||ngDevMode?"Arguments array must have arguments.":"";throw new pe(900,e)}let e,n=We.Default;for(let t=0;t<r.length;t++){const o=r[t],i=o.__NG_DI_FLAG__;"number"==typeof i?-1===i?e=o.token:n|=i:e=o}t.push(zo(e,n))}else t.push(zo(r))}return t}function Ko(e,t){return e.__NG_DI_FLAG__=t,e.prototype.__NG_DI_FLAG__=t,e}const Go=Ko(ao("Inject",(e=>({token:e}))),-1),Jo=Ko(ao("Optional"),8),Yo=Ko(ao("Self"),2),Xo=Ko(ao("SkipSelf"),4),ei=Ko(ao("Host"),1);let ti=null;function ni(){return ti=ti||new jo}function ri(e){return oi(ni().parameters(e))}function oi(e){return e.map((e=>function(e){const t={token:null,attribute:null,host:!1,optional:!1,self:!1,skipSelf:!1};if(Array.isArray(e)&&e.length>0)for(let n=0;n<e.length;n++){const r=e[n];if(void 0===r)continue;const o=Object.getPrototypeOf(r);if(r instanceof Jo||"Optional"===o.ngMetadataName)t.optional=!0;else if(r instanceof Xo||"SkipSelf"===o.ngMetadataName)t.skipSelf=!0;else if(r instanceof Yo||"Self"===o.ngMetadataName)t.self=!0;else if(r instanceof ei||"Host"===o.ngMetadataName)t.host=!0;else if(r instanceof Go)t.token=r.token;else if(r instanceof co){if(void 0===r.attributeName)throw new Error("Attribute name must be defined.");t.attribute=r.attributeName}else t.token=r}else void 0===e||Array.isArray(e)&&0===e.length?t.token=null:t.token=e;return t}(e)))}function ii(e){const t=[],n=new Map;function r(t){let r=n.get(t);if(!r){const o=e(t);n.set(t,r=o.then(ui))}return r}return si.forEach(((e,n)=>{const o=[];e.templateUrl&&o.push(r(e.templateUrl).then((t=>{e.template=t})));const i=e.styleUrls,s=e.styles||(e.styles=[]),a=e.styles.length;i&&i.forEach(((t,n)=>{s.push(""),o.push(r(t).then((r=>{s[a+n]=r,i.splice(i.indexOf(t),1),0==i.length&&(e.styleUrls=void 0)})))}));const l=Promise.all(o).then((()=>function(e){ai.delete(e)}(n)));t.push(l)})),ci(),Promise.all(t).then((()=>{}))}let si=new Map;const ai=new Set;function li(e){return!!(e.templateUrl&&!e.hasOwnProperty("template")||e.styleUrls&&e.styleUrls.length)}function ci(){const e=si;return si=new Map,e}function ui(e){return"string"==typeof e?e:e.text()}let di,fi;function pi(){if(void 0===di&&(di=null,it.trustedTypes))try{di=it.trustedTypes.createPolicy("angular",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch{}return di}function hi(e){return pi()?.createHTML(e)||e}function gi(){if(void 0===fi&&(fi=null,it.trustedTypes))try{fi=it.trustedTypes.createPolicy("angular#unsafe-bypass",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch{}return fi}function yi(e){return gi()?.createHTML(e)||e}function mi(e){return gi()?.createScript(e)||e}function vi(e){return gi()?.createScriptURL(e)||e}class bi{constructor(e){this.changingThisBreaksApplicationSecurity=e}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see https://g.co/ng/security#xss)`}}class wi extends bi{getTypeName(){return"HTML"}}class _i extends bi{getTypeName(){return"Style"}}class Ci extends bi{getTypeName(){return"Script"}}class Mi extends bi{getTypeName(){return"URL"}}class Di extends bi{getTypeName(){return"ResourceURL"}}function xi(e){return e instanceof bi?e.changingThisBreaksApplicationSecurity:e}function Ii(e,t){const n=Ei(e);if(null!=n&&n!==t){if("ResourceURL"===n&&"URL"===t)return!0;throw new Error(`Required a safe ${t}, got a ${n} (see https://g.co/ng/security#xss)`)}return n===t}function Ei(e){return e instanceof bi&&e.getTypeName()||null}function Ti(e){return new wi(e)}function Oi(e){return new _i(e)}function Si(e){return new Ci(e)}function ki(e){return new Mi(e)}function Ai(e){return new Di(e)}function Ni(e){const t=new ji(e);return function(){try{return!!(new window.DOMParser).parseFromString(hi(""),"text/html")}catch{return!1}}()?new Pi(t):t}class Pi{constructor(e){this.inertDocumentHelper=e}getInertBodyElement(e){e="<body><remove></remove>"+e;try{const t=(new window.DOMParser).parseFromString(hi(e),"text/html").body;return null===t?this.inertDocumentHelper.getInertBodyElement(e):(t.removeChild(t.firstChild),t)}catch{return null}}}class ji{constructor(e){if(this.defaultDoc=e,this.inertDocument=this.defaultDoc.implementation.createHTMLDocument("sanitization-inert"),null==this.inertDocument.body){const e=this.inertDocument.createElement("html");this.inertDocument.appendChild(e);const t=this.inertDocument.createElement("body");e.appendChild(t)}}getInertBodyElement(e){const t=this.inertDocument.createElement("template");if("content"in t)return t.innerHTML=hi(e),t;const n=this.inertDocument.createElement("body");return n.innerHTML=hi(e),this.defaultDoc.documentMode&&this.stripCustomNsAttrs(n),n}stripCustomNsAttrs(e){const t=e.attributes;for(let n=t.length-1;0<n;n--){const r=t.item(n).name;"xmlns:ns1"!==r&&0!==r.indexOf("ns1:")||e.removeAttribute(r)}let n=e.firstChild;for(;n;)n.nodeType===Node.ELEMENT_NODE&&this.stripCustomNsAttrs(n),n=n.nextSibling}}const Ri=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,Vi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function $i(e){return(e=String(e)).match(Ri)||e.match(Vi)?e:(("undefined"==typeof ngDevMode||ngDevMode)&&console.warn(`WARNING: sanitizing unsafe URL value ${e} (see https://g.co/ng/security#xss)`),"unsafe:"+e)}function Fi(e){return(e=String(e)).split(",").map((e=>$i(e.trim()))).join(", ")}function Li(e){const t={};for(const n of e.split(","))t[n]=!0;return t}function Hi(...e){const t={};for(const n of e)for(const e in n)n.hasOwnProperty(e)&&(t[e]=!0);return t}const Bi=Li("area,br,col,hr,img,wbr"),Ui=Li("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),qi=Li("rp,rt"),zi=Hi(qi,Ui),Wi=Hi(Ui,Li("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),Qi=Hi(qi,Li("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),Zi=Hi(Bi,Wi,Qi,zi),Ki=Li("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),Gi=Li("srcset"),Ji=Li("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),Yi=Li("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext"),Xi=Hi(Ki,Gi,Ji,Yi),es=Li("script,style,template");class ts{constructor(){this.sanitizedSomething=!1,this.buf=[]}sanitizeChildren(e){let t=e.firstChild,n=!0;for(;t;)if(t.nodeType===Node.ELEMENT_NODE?n=this.startElement(t):t.nodeType===Node.TEXT_NODE?this.chars(t.nodeValue):this.sanitizedSomething=!0,n&&t.firstChild)t=t.firstChild;else for(;t;){t.nodeType===Node.ELEMENT_NODE&&this.endElement(t);let e=this.checkClobberedElement(t,t.nextSibling);if(e){t=e;break}t=this.checkClobberedElement(t,t.parentNode)}return this.buf.join("")}startElement(e){const t=e.nodeName.toLowerCase();if(!Zi.hasOwnProperty(t))return this.sanitizedSomething=!0,!es.hasOwnProperty(t);this.buf.push("<"),this.buf.push(t);const n=e.attributes;for(let e=0;e<n.length;e++){const t=n.item(e),r=t.name,o=r.toLowerCase();if(!Xi.hasOwnProperty(o)){this.sanitizedSomething=!0;continue}let i=t.value;Ki[o]&&(i=$i(i)),Gi[o]&&(i=Fi(i)),this.buf.push(" ",r,'="',os(i),'"')}return this.buf.push(">"),!0}endElement(e){const t=e.nodeName.toLowerCase();Zi.hasOwnProperty(t)&&!Bi.hasOwnProperty(t)&&(this.buf.push("</"),this.buf.push(t),this.buf.push(">"))}chars(e){this.buf.push(os(e))}checkClobberedElement(e,t){if(t&&(e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)===Node.DOCUMENT_POSITION_CONTAINED_BY)throw new Error(`Failed to sanitize html because the element is clobbered: ${e.outerHTML}`);return t}}const ns=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,rs=/([^\#-~ |!])/g;function os(e){return e.replace(/&/g,"&amp;").replace(ns,(function(e){return"&#"+(1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536)+";"})).replace(rs,(function(e){return"&#"+e.charCodeAt(0)+";"})).replace(/</g,"&lt;").replace(/>/g,"&gt;")}let is;function ss(e,t){let n=null;try{is=is||Ni(e);let r=t?String(t):"";n=is.getInertBodyElement(r);let o=5,i=r;do{if(0===o)throw new Error("Failed to sanitize html because the input is unstable");o--,r=i,i=n.innerHTML,n=is.getInertBodyElement(r)}while(r!==i);const s=new ts,a=s.sanitizeChildren(as(n)||n);return("undefined"==typeof ngDevMode||ngDevMode)&&s.sanitizedSomething&&console.warn("WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss"),hi(a)}finally{if(n){const e=as(n)||n;for(;e.firstChild;)e.removeChild(e.firstChild)}}}function as(e){return"content"in e&&function(e){return e.nodeType===Node.ELEMENT_NODE&&"TEMPLATE"===e.nodeName}(e)?e.content:null}var ls;function cs(e){const t=ms();return t?yi(t.sanitize(ls.HTML,e)||""):Ii(e,"HTML")?yi(xi(e)):ss(gn(),ge(e))}function us(e){const t=ms();return t?t.sanitize(ls.STYLE,e)||"":Ii(e,"Style")?xi(e):ge(e)}function ds(e){const t=ms();return t?t.sanitize(ls.URL,e)||"":Ii(e,"URL")?xi(e):$i(ge(e))}function fs(e){const t=ms();if(t)return vi(t.sanitize(ls.RESOURCE_URL,e)||"");if(Ii(e,"ResourceURL"))return vi(xi(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a resource URL context (see https://g.co/ng/security#xss)":"";throw new pe(904,n)}function ps(e){const t=ms();if(t)return mi(t.sanitize(ls.SCRIPT,e)||"");if(Ii(e,"Script"))return mi(xi(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a script context":"";throw new pe(905,n)}function hs(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted HTML constant: ${e.join("?")}`);return hi(e[0])}function gs(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted URL constant: ${e.join("?")}`);return function(e){return pi()?.createScriptURL(e)||e}(e[0])}function ys(e,t,n){return function(e,t){return"src"===t&&("embed"===e||"frame"===e||"iframe"===e||"media"===e||"script"===e)||"href"===t&&("base"===e||"link"===e)?fs:ds}(t,n)(e)}function ms(){const e=Pn();return e&&e[12]}function vs(e){let t=Cs(e);if(t){if(Array.isArray(t)){const r=t;let o,i,s;if((n=e)&&n.constructor&&n.constructor.ɵcmp){if(o=Is(r,e),-1==o)throw new Error("The provided component was not found in the application");i=e}else if(function(e){return e&&e.constructor&&e.constructor.ɵdir}(e)){if(o=function(e,t){let n=e[1].firstChild;for(;n;){const r=n.directiveStart,o=n.directiveEnd;for(let i=r;i<o;i++)if(e[i]===t)return n.index;n=xs(n)}return-1}(r,e),-1==o)throw new Error("The provided directive was not found in the application");s=Es(o,r,!1)}else if(o=Ds(r,e),-1==o)return null;const a=bn(r[o]),l=Cs(a),c=l&&!Array.isArray(l)?l:bs(r,o,a);if(i&&void 0===c.component&&(c.component=i,_s(c.component,c)),s&&void 0===c.directives){c.directives=s;for(let e=0;e<s.length;e++)_s(s[e],c)}_s(c.native,c),t=c}}else{const n=e;ngDevMode&&Ne(n);let r=n;for(;r=r.parentNode;){const e=Cs(r);if(e){let r;if(r=Array.isArray(e)?e:e.lView,!r)return null;const o=Ds(r,n);if(o>=0){const e=bn(r[o]),n=bs(r,o,e);_s(e,n),t=n;break}}}}var n;return t||null}function bs(e,t,n){return{lView:e,nodeIndex:t,native:n,component:void 0,directives:void 0,localRefs:void 0}}function ws(e){let t,n=Cs(e);if(Array.isArray(n)){const r=Is(n,e);t=Dn(r,n);const o=bs(n,r,t[0]);o.component=e,_s(e,o),_s(o.native,o)}else{const e=n;t=Dn(e.nodeIndex,e.lView)}return t}function _s(e,t){ngDevMode&&ke(e,"Target expected"),e.__ngContext__=t}function Cs(e){return ngDevMode&&ke(e,"Target expected"),e.__ngContext__||null}function Ms(e){const t=Cs(e);return t?Array.isArray(t)?t:t.lView:null}function Ds(e,t){const n=e[1];for(let r=St;r<n.bindingStartIndex;r++)if(bn(e[r])===t)return r;return-1}function xs(e){if(e.child)return e.child;if(e.next)return e.next;for(;e.parent&&!e.parent.next;)e=e.parent;return e.parent&&e.parent.next}function Is(e,t){const n=e[1].components;if(n)for(let r=0;r<n.length;r++){const o=n[r];if(Dn(o,e)[8]===t)return o}else if(Dn(St,e)[8]===t)return St;return-1}function Es(e,t,n){const r=t[1].data[e];let o=r.directiveStart;if(0==o)return lt;const i=r.directiveEnd;return!n&&2&r.flags&&o++,t.slice(o,i)}function Ts(e){return e.ngOriginalError}function Os(e,...t){e.error(...t)}!function(e){e[e.NONE=0]="NONE",e[e.HTML=1]="HTML",e[e.STYLE=2]="STYLE",e[e.SCRIPT=3]="SCRIPT",e[e.URL=4]="URL",e[e.RESOURCE_URL=5]="RESOURCE_URL"}(ls||(ls={}));class Ss{constructor(){this._console=console}handleError(e){const t=this._findOriginalError(e),n=function(e){return e&&e.ngErrorLogger||Os}(e);n(this._console,"ERROR",e),t&&n(this._console,"ORIGINAL ERROR",t)}_findOriginalError(e){let t=e&&Ts(e);for(;t&&Ts(t);)t=Ts(t);return t||null}}const ks={name:"custom-elements"},As={name:"no-errors-schema"},Ns=/^>|^->|<!--|-->|--!>|<!-$/g,Ps=/(<|>)/;function js(e){return e.replace(Ns,(e=>e.replace(Ps,"​$1​")))}const Rs=/([A-Z])/g,Vs=("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(it);function $s(e){return e.ownerDocument.defaultView}function Fs(e){return e.ownerDocument}function Ls(e){return e.ownerDocument.body}const Hs="�";function Bs(e){return e instanceof Function?e():e}function Us(e){throw new pe(-300,`Multiple components match node with tagname ${e.value}`)}function qs(e,t,n,r,o){const[i,s,...a]=r.split(Hs);let l=s,c=s;for(let r=0;r<a.length;r++){const i=t+r;l+=`${e[i]}${a[r]}`,c+=`${i===n?o:e[i]}${a[r]}`}return{propName:i,oldValue:l,newValue:c}}var zs;let Ws;function Qs(e,t){return Ws(e,t)}function Zs(e){ngDevMode&&Qt(e);const t=e[3];return Pt(t)?t[3]:t}function Ks(e){const t=function(e){ngDevMode&&ke(e,"component");let t=Nt(e)?e:Ms(e);for(;t&&!(512&t[2]);)t=Zs(t);return ngDevMode&&Qt(t),t}(e);return ngDevMode&&ke(t[8],"RootView has no context. Perhaps it is disconnected?"),t[8]}function Gs(e){return Ys(e[13])}function Js(e){return Ys(e[4])}function Ys(e){for(;null!==e&&!Pt(e);)e=e[4];return e}function Xs(e,t,n,r,o){if(null!=r){let i,s=!1;Pt(r)?i=r:Nt(r)&&(s=!0,ngDevMode&&ke(r[0],"HOST must be defined for a component LView"),r=r[0]);const a=bn(r);ngDevMode&&!mn(t)&&Ne(a),0===e&&null!==n?null==o?da(t,n,a):ua(t,n,a,o||null,!0):1===e&&null!==n?ua(t,n,a,o||null,!0):2===e?Ma(t,a,s):3===e&&(ngDevMode&&ngDevMode.rendererDestroyNode++,t.destroyNode(a)),null!=i&&function(e,t,n,r,o){ngDevMode&&zt(n);const i=n[7];i!==bn(n)&&Xs(t,e,r,i,o);for(let o=At;o<n.length;o++){const s=n[o];xa(s[1],s,e,t,r,i)}}(t,e,i,n,o)}}function ea(e,t){return ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&ngDevMode.rendererSetText++,mn(e)?e.createText(t):e.createTextNode(t)}function ta(e,t,n){ngDevMode&&ngDevMode.rendererSetText++,mn(e)?e.setValue(t,n):t.textContent=n}function na(e,t){return ngDevMode&&ngDevMode.rendererCreateComment++,e.createComment(js(t))}function ra(e,t,n){if(ngDevMode&&ngDevMode.rendererCreateElement++,mn(e))return e.createElement(t,n);{const r=null!==n?function(e){const t=e.toLowerCase();return t===dn?"http://www.w3.org/2000/svg":t===fn?"http://www.w3.org/1998/MathML/":null}(n):null;return null===r?e.createElement(t):e.createElementNS(r,t)}}function oa(e,t){ngDevMode&&zt(e),ngDevMode&&ke(e[9],"A projected view should belong to a non-empty projected views collection");const n=e[9],r=n.indexOf(t),o=t[3];ngDevMode&&zt(o),1024&t[2]&&(t[2]&=-1025,On(o,-1)),n.splice(r,1)}function ia(e,t){if(e.length<=At)return;const n=At+t,r=e[n];if(r){const i=r[17];null!==i&&i!==e&&oa(i,r),t>0&&(e[n-1][4]=r[4]);const s=Io(e,At+t);xa(r[1],o=r,o[11],2,null,null),o[0]=null,o[6]=null;const a=s[19];null!==a&&a.detachView(s[1]),r[3]=null,r[4]=null,r[2]&=-129}var o;return r}function sa(e,t){if(!(256&t[2])){const n=t[11];mn(n)&&n.destroyNode&&xa(e,t,n,3,null,null),function(e){let t=e[13];if(!t)return aa(e[1],e);for(;t;){let n=null;if(Nt(t))n=t[13];else{ngDevMode&&zt(t);const e=t[10];e&&(n=e)}if(!n){for(;t&&!t[4]&&t!==e;)Nt(t)&&aa(t[1],t),t=t[3];null===t&&(t=e),Nt(t)&&aa(t[1],t),n=t&&t[4]}t=n}}(t)}}function aa(e,t){if(!(256&t[2])){t[2]&=-129,t[2]|=256,function(e,t){let n;if(null!=e&&null!=(n=e.destroyHooks))for(let e=0;e<n.length;e+=2){const r=t[n[e]];if(!(r instanceof Mr)){const t=n[e+1];if(Array.isArray(t))for(let e=0;e<t.length;e+=2){const n=r[t[e]],o=t[e+1];un(4,n,o);try{o.call(n)}finally{un(5,n,o)}}else{un(4,r,t);try{t.call(r)}finally{un(5,r,t)}}}}}(e,t),function(e,t){const n=e.cleanup,r=t[7];let o=-1;if(null!==n)for(let e=0;e<n.length-1;e+=2)if("string"==typeof n[e]){const i=n[e+1],s="function"==typeof i?i(t):bn(t[i]),a=r[o=n[e+2]],l=n[e+3];"boolean"==typeof l?s.removeEventListener(n[e],a,l):l>=0?r[o=l]():r[o=-l].unsubscribe(),e+=2}else{const t=r[o=n[e+1]];n[e].call(t)}if(null!==r){for(let e=o+1;e<r.length;e++){const t=r[e];ngDevMode&&(s="Expecting instance cleanup function.","function"!=typeof(i=t)&&Ae(s,null===i?"null":typeof i,"function","===")),t()}t[7]=null}var i,s}(e,t),1===t[1].type&&mn(t[11])&&(ngDevMode&&ngDevMode.rendererDestroy++,t[11].destroy());const n=t[17];if(null!==n&&Pt(t[3])){n!==t[3]&&oa(n,t);const r=t[19];null!==r&&r.detachView(e)}}}function la(e,t,n){return ca(e,t.parent,n)}function ca(e,t,n){let r=t;for(;null!==r&&40&r.type;)r=(t=r).parent;if(null===r)return n[0];if(ngDevMode&&xr(r,7),2&r.flags){ngDevMode&&Ft(r,n);const t=e.data[r.directiveStart].encapsulation;if(t===Xe.None||t===Xe.Emulated)return null}return _n(r,n)}function ua(e,t,n,r,o){ngDevMode&&ngDevMode.rendererInsertBefore++,mn(e)?e.insertBefore(t,n,r,o):t.insertBefore(n,r,o)}function da(e,t,n){ngDevMode&&ngDevMode.rendererAppendChild++,ngDevMode&&ke(t,"parent node must be defined"),mn(e)?e.appendChild(t,n):t.appendChild(n)}function fa(e,t,n,r,o){null!==r?ua(e,t,n,r,o):da(e,t,n)}function pa(e,t){return mn(e)?e.parentNode(t):t.parentNode}function ha(e,t,n){return ma(e,t,n)}function ga(e,t,n){return 40&e.type?_n(e,n):null}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(zs||(zs={}));let ya,ma=ga;function va(e,t){ma=e,ya=t}function ba(e,t,n,r){const o=la(e,r,t),i=t[11],s=ha(r.parent||t[6],r,t);if(null!=o)if(Array.isArray(n))for(let e=0;e<n.length;e++)fa(i,o,n[e],s,!1);else fa(i,o,n,s,!1);void 0!==ya&&ya(i,r,t,n,o)}function wa(e,t){if(null!==t){ngDevMode&&xr(t,63);const n=t.type;if(3&n)return _n(t,e);if(4&n)return Ca(-1,e[t.index]);if(8&n){const n=t.child;if(null!==n)return wa(e,n);{const n=e[t.index];return Pt(n)?Ca(-1,n):bn(n)}}if(32&n)return Qs(t,e)()||bn(e[t.index]);{const n=_a(e,t);if(null!==n){if(Array.isArray(n))return n[0];const t=Zs(e[16]);return ngDevMode&&Yt(t),wa(t,n)}return wa(e,t.next)}}return null}function _a(e,t){if(null!==t){const n=e[16][6],r=t.projection;return ngDevMode&&function(e,t){ke(e[16],"Component views should exist."),ke(e[16][6].projection,"Components with projection nodes (<ng-content>) must have projection slots defined.")}(e),n.projection[r]}return null}function Ca(e,t){const n=At+e+1;if(n<t.length){const e=t[n],r=e[1].firstChild;if(null!==r)return wa(e,r)}return t[7]}function Ma(e,t,n){ngDevMode&&ngDevMode.rendererRemoveNode++;const r=pa(e,t);r&&function(e,t,n,r){mn(e)?e.removeChild(t,n,r):t.removeChild(n)}(e,r,t,n)}function Da(e,t,n,r,o,i,s){for(;null!=n;){ngDevMode&&Ft(n,r),ngDevMode&&xr(n,63);const a=r[n.index],l=n.type;if(s&&0===t&&(a&&_s(bn(a),r),n.flags|=4),64!=(64&n.flags))if(8&l)Da(e,t,n.child,r,o,i,!1),Xs(t,e,o,a,i);else if(32&l){const s=Qs(n,r);let l;for(;l=s();)Xs(t,e,o,l,i);Xs(t,e,o,a,i)}else 16&l?Ia(e,t,r,n,o,i):(ngDevMode&&xr(n,7),Xs(t,e,o,a,i));n=s?n.projectionNext:n.next}}function xa(e,t,n,r,o,i){Da(n,r,e.firstChild,t,o,i,!1)}function Ia(e,t,n,r,o,i){const s=n[16],a=s[6];ngDevMode&&Me(typeof r.projection,"number","expecting projection index");const l=a.projection[r.projection];if(Array.isArray(l))for(let n=0;n<l.length;n++)Xs(t,e,o,l[n],i);else Da(e,t,l,s[3],o,i,!0)}function Ea(e,t,n){ngDevMode&&Ce(n,"'newValue' should be a string"),mn(e)?e.setAttribute(t,"style",n):t.style.cssText=n,ngDevMode&&ngDevMode.rendererSetStyle++}function Ta(e,t,n){ngDevMode&&Ce(n,"'newValue' should be a string"),mn(e)?""===n?e.removeAttribute(t,"class"):e.setAttribute(t,"class",n):t.className=n,ngDevMode&&ngDevMode.rendererSetClassName++}function Oa(e,t,n){ngDevMode&&De(t,"",'can not look for "" string.');let r=e.length;for(;;){const o=e.indexOf(t,n);if(-1===o)return o;if(0===o||e.charCodeAt(o-1)<=32){const n=t.length;if(o+n===r||e.charCodeAt(o+n)<=32)return o}n=o+1}}const Sa="ng-template";function ka(e,t,n){ngDevMode&&Me(t,t.toLowerCase(),"Class name expected to be lowercase.");let r=0;for(;r<e.length;){let o=e[r++];if(n&&"class"===o){if(o=e[r],-1!==Oa(o.toLowerCase(),t,0))return!0}else if(1===o){for(;r<e.length&&"string"==typeof(o=e[r++]);)if(o.toLowerCase()===t)return!0;return!1}}return!1}function Aa(e){return 4===e.type&&e.value!==Sa}function Na(e,t,n){return t===(4!==e.type||n?e.value:Sa)}function Pa(e,t,n){ngDevMode&&ke(t[0],"Selector should have a tag name");let r=4;const o=e.attrs||[],i=function(e){for(let t=0;t<e.length;t++)if(Er(e[t]))return t;return e.length}(o);let s=!1;for(let a=0;a<t.length;a++){const l=t[a];if("number"!=typeof l){if(!s)if(4&r){if(r=2|1&r,""!==l&&!Na(e,l,n)||""===l&&1===t.length){if(ja(r))return!1;s=!0}}else{const c=8&r?l:t[++a];if(8&r&&null!==e.attrs){if(!ka(e.attrs,c,n)){if(ja(r))return!1;s=!0}continue}const u=Ra(8&r?"class":l,o,Aa(e),n);if(-1===u){if(ja(r))return!1;s=!0;continue}if(""!==c){let e;u>i?e="":(ngDevMode&&De(o[u],0,"We do not match directives on namespaced attributes"),e=o[u+1].toLowerCase());const t=8&r?e:null;if(t&&-1!==Oa(t,c,0)||2&r&&c!==e){if(ja(r))return!1;s=!0}}}}else{if(!s&&!ja(r)&&!ja(l))return!1;if(s&&ja(l))continue;s=!1,r=l|1&r}}return ja(r)||s}function ja(e){return 0==(1&e)}function Ra(e,t,n,r){if(null===t)return-1;let o=0;if(r||!n){let n=!1;for(;o<t.length;){const r=t[o];if(r===e)return o;if(3===r||6===r)n=!0;else{if(1===r||2===r){let e=t[++o];for(;"string"==typeof e;)e=t[++o];continue}if(4===r)break;if(0===r){o+=4;continue}}o+=n?1:2}return-1}return function(e,t){let n=e.indexOf(4);if(n>-1)for(n++;n<e.length;){const r=e[n];if("number"==typeof r)return-1;if(r===t)return n;n++}return-1}(t,e)}function Va(e,t,n=!1){for(let r=0;r<t.length;r++)if(Pa(e,t[r],n))return!0;return!1}function $a(e,t){e:for(let n=0;n<t.length;n++){const r=t[n];if(e.length===r.length){for(let t=0;t<e.length;t++)if(e[t]!==r[t])continue e;return!0}}return!1}function Fa(e,t){return e?":not("+t.trim()+")":t}function La(e){let t=e[0],n=1,r=2,o="",i=!1;for(;n<e.length;){let s=e[n];if("string"==typeof s)if(2&r){const t=e[++n];o+="["+s+(t.length>0?'="'+t+'"':"")+"]"}else 8&r?o+="."+s:4&r&&(o+=" "+s);else""===o||ja(s)||(t+=Fa(i,o),o=""),r=s,i=i||!ja(r);n++}return""!==o&&(t+=Fa(i,o)),t}const Ha="undefined"==typeof ngDevMode||ngDevMode?{__brand__:"NO_CHANGE"}:{};function Ba(e){ngDevMode&&Oe(e,0,"Can only advance forward"),Ua(jn(),Pn(),ur()+e,Un())}function Ua(e,t,n,r){if(ngDevMode&&function(e,t){const n=e[1];Jt(St,n.bindingStartIndex,t)}(t,n),!r)if(3==(3&t[2])){const r=e.preOrderCheckHooks;null!==r&&mr(t,r,n)}else{const r=e.preOrderHooks;null!==r&&vr(t,r,0,n)}dr(n)}function qa(e){if(!ngDevMode)throw new Error("Looks like we are in 'prod mode', but we are creating a named Array type, which is wrong! Check your code");try{return function(...e){if("undefined"==typeof ngDevMode)throw new Error("newTrustedFunctionForDev should never be called in production");if(!it.trustedTypes)return new Function(...e);const t=`(function anonymous(${e.slice(0,-1).join(",")}\n) { ${e[e.length-1]}\n})`,n=it.eval((r=t,pi()?.createScript(r)||r));var r;return void 0===n.bind?new Function(...e):(n.toString=()=>t,n.bind(it))}("Array",`return class ${e} extends Array{}`)(Array)}catch(e){return Array}}function za(e,t){return ngDevMode&&_e(e,0,32767),ngDevMode&&_e(t,0,32767),e<<17|t<<2}function Wa(e){return ngDevMode&&we(e,"expected number"),e>>17&32767}function Qa(e){return ngDevMode&&we(e,"expected number"),2==(2&e)}function Za(e){return ngDevMode&&we(e,"expected number"),2|e}function Ka(e){return ngDevMode&&we(e,"expected number"),(131068&e)>>2}function Ga(e,t){return ngDevMode&&we(e,"expected number"),ngDevMode&&_e(t,0,32767),-131069&e|t<<2}function Ja(e){return ngDevMode&&we(e,"expected number"),1==(1&e)}function Ya(e){return ngDevMode&&we(e,"expected number"),1|e}function Xa(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{value:t,enumerable:!1})}function el(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{get:t,enumerable:!1})}let tl,nl,rl,ol,il;class sl extends Array{}class al extends Array{}class ll extends Array{}function cl(e){if(null==e)return"";const t=e.lastIndexOf("_Template");return"_"+(-1===t?e:e.substr(0,t))}function ul(e,t){const n=e.tView_.data,r=[],o=t?e.classBindings:e.styleBindings,i=Wa(o),s=Ka(o);let a=0!==s,l=a?s:i;for(;0!==l;){const e=n[l],t=n[l+1];r.unshift({key:e,index:l,isTemplate:a,prevDuplicate:Qa(t),nextDuplicate:Ja(t),nextIndex:Ka(t),prevIndex:Wa(t)}),l===i&&(a=!1),l=Wa(t)}return r.push((t?e.residualClasses:e.residualStyles)||null),r}function dl(e,t){for(;e;)t.push(e.template_),e=e.next}class fl extends Array{}let pl;class hl extends Array{}class gl extends Array{}class yl extends Array{}class ml extends Array{}class vl extends Array{}class bl extends Array{}class wl extends Array{}function _l(e){if(e){const t=e.debug;return ke(t,"Object does not have a debug representation."),t}return e}function Cl(e,t=!1){const n=bn(e);if(n)switch(n.nodeType){case Node.TEXT_NODE:return n.textContent;case Node.COMMENT_NODE:return`\x3c!--${n.textContent}--\x3e`;case Node.ELEMENT_NODE:const e=n.outerHTML;if(t)return e;{const t=">"+n.innerHTML+"<";return e.split(t)[0]+">"}}return null}class Ml{constructor(e){this._raw_lView=e}get flags(){const e=this._raw_lView[2];return{__raw__flags__:e,initPhaseState:3&e,creationMode:!!(4&e),firstViewPass:!!(8&e),checkAlways:!!(16&e),dirty:!!(64&e),attached:!!(128&e),destroyed:!!(256&e),isRoot:!!(512&e),indexWithinInitPhase:e>>11}}get parent(){return _l(this._raw_lView[3])}get hostHTML(){return Cl(this._raw_lView[0],!0)}get html(){return(this.nodes||[]).map(Dl).join("")}get context(){return this._raw_lView[8]}get nodes(){const e=this._raw_lView;return Il(e[1].firstChild,e)}get template(){return this.tView.template_}get tView(){return this._raw_lView[1]}get cleanup(){return this._raw_lView[7]}get injector(){return this._raw_lView[9]}get rendererFactory(){return this._raw_lView[10]}get renderer(){return this._raw_lView[11]}get sanitizer(){return this._raw_lView[12]}get childHead(){return _l(this._raw_lView[13])}get next(){return _l(this._raw_lView[4])}get childTail(){return _l(this._raw_lView[14])}get declarationView(){return _l(this._raw_lView[15])}get queries(){return this._raw_lView[19]}get tHost(){return this._raw_lView[6]}get decls(){return xl(this.tView,this._raw_lView,St,this.tView.bindingStartIndex)}get vars(){return xl(this.tView,this._raw_lView,this.tView.bindingStartIndex,this.tView.expandoStartIndex)}get expando(){return xl(this.tView,this._raw_lView,this.tView.expandoStartIndex,this._raw_lView.length)}get childViews(){const e=[];let t=this.childHead;for(;t;)e.push(t),t=t.next;return e}}function Dl(e){if("ElementContainer"===e.type)return(e.children||[]).map(Dl).join("");if("IcuContainer"===e.type)throw new Error("Not implemented");return Cl(e.native,!0)||""}function xl(e,t,n,r){let o=[];for(let i=n;i<r;i++)o.push({index:i,t:e.data[i],l:t[i]});return{start:n,end:r,length:r-n,content:o}}function Il(e,t){if(e){const n=[];let r=e;for(;r;)n.push(El(r,t)),r=r.next;return n}return[]}function El(e,t){const n=bn(t[e.index]),r=[],o=[],i=t[1];for(let n=e.directiveStart;n<e.directiveEnd;n++){const e=i.data[n];r.push(e.type),o.push(t[n])}return{html:Cl(n),type:Dr(e.type),tNode:e,native:n,children:Il(e.child,t),factories:r,instances:o,injector:Tl(e,i,t),get injectorResolutionPath(){return e.debugNodeInjectorPath(t)}}}function Tl(e,t,n){const r=[];for(let n=e.providerIndexStart_;n<e.providerIndexEnd_;n++)r.push(t.data[n]);const o=[];for(let n=e.providerIndexEnd_;n<e.directiveEnd;n++)o.push(t.data[n]);return{bloom:Sl(n,e.injectorIndex),cumulativeBloom:Sl(t.data,e.injectorIndex),providers:o,viewProviders:r,parentInjectorIndex:n[e.providerIndexStart_-1]}}function Ol(e,t){const n=e[t];if("number"!=typeof n)return"????????";const r="00000000"+n.toString(2);return r.substring(r.length-8)}function Sl(e,t){return t<0?"NO_NODE_INJECTOR":`${Ol(e,t+7)}_${Ol(e,t+6)}_${Ol(e,t+5)}_${Ol(e,t+4)}_${Ol(e,t+3)}_${Ol(e,t+2)}_${Ol(e,t+1)}_${Ol(e,t+0)}`}class kl{constructor(e){this._raw_lContainer=e}get hasTransplantedViews(){return this._raw_lContainer[2]}get views(){return this._raw_lContainer.slice(At).map(_l)}get parent(){return _l(this._raw_lContainer[3])}get movedViews(){return this._raw_lContainer[9]}get host(){return this._raw_lContainer[0]}get native(){return this._raw_lContainer[7]}get next(){return _l(this._raw_lContainer[4])}}const Al=Promise.resolve(null);function Nl(e,t){const n=e.contentQueries;if(null!==n)for(let r=0;r<n.length;r+=2){const o=n[r],i=n[r+1];if(-1!==i){const n=e.data[i];ngDevMode&&ke(n,"DirectiveDef not found."),ngDevMode&&ke(n.contentQueries,"contentQueries function should be defined"),tr(o),n.contentQueries(2,t[i],i)}}}function Pl(e,t,n,r,o,i,s,a,l,c){const u=ngDevMode?function(e){return function(e,t){switch(e){case 0:return void 0===rl&&(rl=new sl),rl;case 1:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===ol&&(ol=new al),ol;void 0===tl&&(tl=new Map);let e=tl.get(t);return void 0===e&&(e=new(qa("LComponentView"+cl(t))),tl.set(t,e)),e;case 2:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===il&&(il=new ll),il;void 0===nl&&(nl=new Map);let n=nl.get(t);return void 0===n&&(n=new(qa("LEmbeddedView"+cl(t))),nl.set(t,n)),n}}(e.type,e.template&&e.template.name).concat(e.blueprint)}(t):t.blueprint.slice();return u[0]=o,u[2]=140|r,Tn(u),ngDevMode&&t.declTNode&&e&&Ft(t.declTNode,e),u[3]=u[15]=e,u[8]=n,u[10]=s||e&&e[10],ngDevMode&&ke(u[10],"RendererFactory is required"),u[11]=a||e&&e[11],ngDevMode&&ke(u[11],"Renderer is required"),u[12]=l||e&&e[12]||null,u[9]=c||e&&e[9]||null,u[6]=i,ngDevMode&&Me(2!=t.type||null!==e,!0,"Embedded views must have parentLView"),u[16]=2==t.type?e[16]:u,ngDevMode&&function(e){Xa(e,new Ml(e))}(u),u}function jl(e,t,n,r,o){ngDevMode&&0!==t&&Se(t,St,"TNodes can't be in the LView header."),ngDevMode&&function(e){2!==e&&1!==e&&4!==e&&8!==e&&32!==e&&16!==e&&64!==e&&Ae(`Expected TNodeType to have only a single type selected, but got ${Dr(e)}.`)}(n);let i=e.data[t];if(null===i)i=Rl(e,t,n,r,o),Sn.lFrame.inI18n&&(i.flags|=64);else if(64&i.type){i.type=n,i.value=r,i.attrs=o;const s=Fn();i.injectorIndex=null===s?-1:s.injectorIndex,ngDevMode&&Lt(i,e),ngDevMode&&Me(t,i.index,"Expecting same index")}return Ln(i,!0),i}function Rl(e,t,n,r,o){const i=$n(),s=Hn(),a=s?i:i&&i.parent,l=e.data[t]=function(e,t,n,r,o,i){ngDevMode&&0!==r&&Se(r,St,"TNodes can't be in the LView header."),ngDevMode&&Ie(i,void 0,"'undefined' is not valid value for 'attrs'"),ngDevMode&&ngDevMode.tNode++,ngDevMode&&t&&Lt(t,e);let s=t?t.injectorIndex:-1;const a=ngDevMode?new class{constructor(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m,v,b,w,_,C,M,D,x,I,E,T,O,S,k){this.tView_=e,this.type=t,this.index=n,this.insertBeforeIndex=r,this.injectorIndex=o,this.directiveStart=i,this.directiveEnd=s,this.directiveStylingLast=a,this.propertyBindings=l,this.flags=c,this.providerIndexes=u,this.value=d,this.attrs=f,this.mergedAttrs=p,this.localNames=h,this.initialInputs=g,this.inputs=y,this.outputs=m,this.tViews=v,this.next=b,this.projectionNext=w,this.child=_,this.parent=C,this.projection=M,this.styles=D,this.stylesWithoutHost=x,this.residualStyles=I,this.classes=E,this.classesWithoutHost=T,this.residualClasses=O,this.classBindings=S,this.styleBindings=k}debugNodeInjectorPath(e){const t=[];let n=Fr(this,e);if(-1===n){const t=Lr(this,e);t!==Cr&&(n=Ar(t),e=Nr(t,e))}for(;-1!==n;){ngDevMode&&Xt(e,n);const r=e[1].data[n+8];t.push(El(r,e));const o=e[n+8];o===Cr?n=-1:(n=Ar(o),e=Nr(o,e))}return t}get type_(){return Dr(this.type)||`TNodeType.?${this.type}?`}get flags_(){const e=[];return 16&this.flags&&e.push("TNodeFlags.hasClassInput"),8&this.flags&&e.push("TNodeFlags.hasContentQuery"),32&this.flags&&e.push("TNodeFlags.hasStyleInput"),128&this.flags&&e.push("TNodeFlags.hasHostBindings"),2&this.flags&&e.push("TNodeFlags.isComponentHost"),1&this.flags&&e.push("TNodeFlags.isDirectiveHost"),64&this.flags&&e.push("TNodeFlags.isDetached"),4&this.flags&&e.push("TNodeFlags.isProjected"),e.join("|")}get template_(){if(1&this.type)return this.value;const e=[],t="string"==typeof this.value&&this.value||this.type_;if(e.push("<",t),this.flags&&e.push(" ",this.flags_),this.attrs)for(let t=0;t<this.attrs.length;){const n=this.attrs[t++];if("number"==typeof n)break;const r=this.attrs[t++];e.push(" ",n,'="',r,'"')}return e.push(">"),dl(this.child,e),e.push("</",t,">"),e.join("")}get styleBindings_(){return ul(this,!1)}get classBindings_(){return ul(this,!0)}get providerIndexStart_(){return 1048575&this.providerIndexes}get providerIndexEnd_(){return this.providerIndexStart_+(this.providerIndexes>>>20)}}(e,n,r,null,s,-1,-1,-1,null,0,0,o,i,null,null,void 0,null,null,null,null,null,null,t,null,null,null,void 0,null,null,void 0,0,0):{type:n,index:r,insertBeforeIndex:null,injectorIndex:s,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,value:o,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:t,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0};return ngDevMode&&Object.seal(a),a}(e,a,n,t,r,o);return null===e.firstChild&&(e.firstChild=l),null!==i&&(s?null==i.child&&null!==l.parent&&(i.child=l):null===i.next&&(i.next=l)),l}function Vl(e,t,n,r){if(0===n)return-1;ngDevMode&&(Zt(e),xe(e,t[1],"`LView` must be associated with `TView`!"),Me(e.data.length,t.length,"Expecting LView to be same size as TView"),Me(e.data.length,e.blueprint.length,"Expecting Blueprint to be same size as TView"),Kt(e));const o=t.length;for(let o=0;o<n;o++)t.push(r),e.blueprint.push(r),e.data.push(null);return o}function $l(e,t,n){ngDevMode&&Me(xn(t),!0,"Should be run in creation mode"),or(t);try{const r=e.viewQuery;null!==r&&Cc(1,r,n);const o=e.template;null!==o&&Hl(e,t,o,1,n),e.firstCreatePass&&(e.firstCreatePass=!1),e.staticContentQueries&&Nl(e,t),e.staticViewQueries&&Cc(2,e.viewQuery,n);const i=e.components;null!==i&&function(e,t){for(let n=0;n<t.length;n++)yc(e,t[n])}(t,i)}catch(t){throw e.firstCreatePass&&(e.incompleteFirstPass=!0,e.firstCreatePass=!1),t}finally{t[2]&=-5,cr()}}function Fl(e,t,n,r){ngDevMode&&Me(xn(t),!1,"Should be run in update mode");const o=t[2];if(256==(256&o))return;or(t);const i=Un();try{Tn(t),Qn(e.bindingStartIndex),null!==n&&Hl(e,t,n,2,r);const s=3==(3&o);if(!i)if(s){const n=e.preOrderCheckHooks;null!==n&&mr(t,n,null)}else{const n=e.preOrderHooks;null!==n&&vr(t,n,0,null),br(t,0)}if(function(e){for(let t=Gs(e);null!==t;t=Js(t)){if(!t[2])continue;const e=t[9];ngDevMode&&ke(e,"Transplanted View flags set but missing MOVED_VIEWS");for(let t=0;t<e.length;t++){const n=e[t],r=n[3];ngDevMode&&zt(r),0==(1024&n[2])&&On(r,1),n[2]|=1024}}}(t),function(e){for(let t=Gs(e);null!==t;t=Js(t))for(let e=At;e<t.length;e++){const n=t[e],r=n[1];ngDevMode&&ke(r,"TView must be allocated"),In(n)&&Fl(r,n,r.template,n[8])}}(t),null!==e.contentQueries&&Nl(e,t),!i)if(s){const n=e.contentCheckHooks;null!==n&&mr(t,n)}else{const n=e.contentHooks;null!==n&&vr(t,n,1),br(t,1)}!function(e,t){const n=e.hostBindingOpCodes;if(null!==n)try{for(let e=0;e<n.length;e++){const r=n[e];if(r<0)dr(~r);else{const o=r,i=n[++e],s=n[++e];Jn(i,o),s(2,t[o])}}}finally{dr(-1)}}(e,t);const a=e.components;null!==a&&function(e,t){for(let n=0;n<t.length;n++)hc(e,t[n])}(t,a);const l=e.viewQuery;if(null!==l&&Cc(2,l,r),!i)if(s){const n=e.viewCheckHooks;null!==n&&mr(t,n)}else{const n=e.viewHooks;null!==n&&vr(t,n,2),br(t,2)}!0===e.firstUpdatePass&&(e.firstUpdatePass=!1),i||(t[2]&=-73),1024&t[2]&&(t[2]&=-1025,On(t[3],-1))}finally{cr()}}function Ll(e,t,n,r){const o=t[10],i=!Un(),s=xn(t);try{i&&!s&&o.begin&&o.begin(),s&&$l(e,t,r),Fl(e,t,n,r)}finally{i&&!s&&o.end&&o.end()}}function Hl(e,t,n,r,o){const i=ur(),s=2&r;try{dr(-1),s&&t.length>St&&Ua(e,t,St,Un()),un(s?2:0,o),n(r,o)}finally{dr(i),un(s?3:1,o)}}function Bl(e,t,n){if(jt(t)){const r=t.directiveStart,o=t.directiveEnd;for(let t=r;t<o;t++){const r=e.data[t];r.contentQueries&&r.contentQueries(1,n[t],t)}}}function Ul(e,t,n){kn()&&(function(e,t,n,r){const o=n.directiveStart,i=n.directiveEnd;e.firstCreatePass||Vr(n,t),_s(r,t);const s=n.initialInputs;for(let r=o;r<i;r++){const i=e.data[r],a=$t(i);a&&(ngDevMode&&xr(n,3),ac(t,n,i));const l=Kr(t,e,r,n);_s(l,t),null!==s&&uc(t,r-o,l,i,n,s),a&&(Dn(n.index,t)[8]=l)}}(e,t,n,_n(n,t)),128==(128&n.flags)&&function(e,t,n){const r=n.directiveStart,o=n.directiveEnd,i=(e.firstCreatePass,n.index),s=Sn.lFrame.currentDirectiveIndex;try{dr(i);for(let n=r;n<o;n++){const r=e.data[n],o=t[n];Yn(n),null===r.hostBindings&&0===r.hostVars&&null===r.hostAttrs||nc(r,o)}}finally{dr(-1),Yn(s)}}(e,t,n))}function ql(e,t,n=_n){const r=t.localNames;if(null!==r){let o=t.index+1;for(let i=0;i<r.length;i+=2){const s=r[i+1],a=-1===s?n(t,e):e[s];e[o++]=a}}}function zl(e){const t=e.tView;if(null===t||t.incompleteFirstPass){const t=null;return e.tView=Wl(1,t,e.template,e.decls,e.vars,e.directiveDefs,e.pipeDefs,e.viewQuery,e.schemas,e.consts)}return t}function Wl(e,t,n,r,o,i,s,a,l,c){ngDevMode&&ngDevMode.tView++;const u=St+r,d=u+o,f=function(e,t){const n=ngDevMode?new hl:[];for(let r=0;r<t;r++)n.push(r<e?null:Ha);return n}(u,d),p="function"==typeof c?c():c,h=f[1]=ngDevMode?new class{constructor(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m,v,b,w,_,C,M,D,x,I,E,T,O,S,k){this.type=e,this.blueprint=t,this.template=n,this.queries=r,this.viewQuery=o,this.declTNode=i,this.data=s,this.bindingStartIndex=a,this.expandoStartIndex=l,this.hostBindingOpCodes=c,this.firstCreatePass=u,this.firstUpdatePass=d,this.staticViewQueries=f,this.staticContentQueries=p,this.preOrderHooks=h,this.preOrderCheckHooks=g,this.contentHooks=y,this.contentCheckHooks=m,this.viewHooks=v,this.viewCheckHooks=b,this.destroyHooks=w,this.cleanup=_,this.contentQueries=C,this.components=M,this.directiveRegistry=D,this.pipeRegistry=x,this.firstChild=I,this.schemas=E,this.consts=T,this.incompleteFirstPass=O,this._decls=S,this._vars=k}get template_(){const e=[];return dl(this.firstChild,e),e.join("")}get type_(){return kt[this.type]||`TViewType.?${this.type}?`}}(e,f,n,null,a,t,(g=f,void 0===pl&&(pl=new fl),pl.concat(g)).fill(null,u),u,d,null,!0,!0,!1,!1,null,null,null,null,null,null,null,null,null,null,"function"==typeof i?i():i,"function"==typeof s?s():s,null,l,p,!1,r,o):{type:e,blueprint:f,template:n,queries:null,viewQuery:a,declTNode:t,data:f.slice().fill(null,u),bindingStartIndex:u,expandoStartIndex:d,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof i?i():i,pipeRegistry:"function"==typeof s?s():s,firstChild:null,schemas:l,consts:p,incompleteFirstPass:!1};var g;return ngDevMode&&Object.seal(h),h}function Ql(e,t,n){if(mn(e)){const r=n===Xe.ShadowDom;return e.selectRootElement(t,r)}let r="string"==typeof t?e.querySelector(t):t;return ngDevMode&&function(e,t){if(!e)throw new Error(`Renderer: ${"string"==typeof t?"Host node with selector not found:":"Host node is required:"} [${ye(t)}]`)}(r,t),r.textContent="",r}function Zl(e,t,n,r){const o=xc(t);null===n?(ngDevMode&&Object.freeze(Ic(e)),o.push(r)):(o.push(n),e.firstCreatePass&&Ic(e).push(r,o.length-1))}function Kl(e,t,n){for(let r in e)if(e.hasOwnProperty(r)){n=null===n?{}:n;const o=e[r];n.hasOwnProperty(r)?n[r].push(t,o):n[r]=[t,o]}return n}function Gl(e,t,n,r,o,i,s,a){ngDevMode&&Ie(o,Ha,"Incoming value should never be NO_CHANGE.");const l=_n(t,n);let c,u=t.inputs;if(!a&&null!=u&&(c=u[r]))Oc(e,n,c,r,o),Rt(t)&&function(e,t){ngDevMode&&Qt(e);const n=Dn(t,e);16&n[2]||(n[2]|=64)}(n,t.index),ngDevMode&&function(e,t,n,r,o){if(7&n)for(let i=0;i<r.length;i+=2)Jl(e,t,n,r[i+1],o)}(n,l,t.type,c,o);else if(3&t.type){if(r="class"===(d=r)?"className":"for"===d?"htmlFor":"formaction"===d?"formAction":"innerHtml"===d?"innerHTML":"readonly"===d?"readOnly":"tabindex"===d?"tabIndex":d,ngDevMode){if(function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event property '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...\nIf '${e}' is a directive input, make sure the directive is imported by the current module.`;throw new pe(306,t)}}(r),!function(e,t,n,r){return null===e.schemas||(!!(Yl(e,r.value)||n in t||Tr(n))||("undefined"==typeof Node||null===Node||!(t instanceof Node)))}(e,l,r,t))return void Xl(r,t);ngDevMode.rendererSetProperty++}o=null!=s?s(o,t.value||"",r):o,mn(i)?i.setProperty(l,r,o):Tr(r)||(l.setProperty?l.setProperty(r,o):l[r]=o)}else 12&t.type&&ngDevMode&&!Yl(e,t.value)&&Xl(r,t);var d}function Jl(e,t,n,r,o){const i=e[11];var s;s=r.replace(/[$@]/g,"_"),r=`ng-reflect-${s.replace(Rs,((...e)=>"-"+e[1].toLowerCase()))}`;const a=function(e){try{return null!=e?e.toString().slice(0,30):e}catch(e){return"[ERROR] Exception while trying to serialize the value"}}(o);if(3&n)null==o?mn(i)?i.removeAttribute(t,r):t.removeAttribute(r):mn(i)?i.setAttribute(t,r,a):t.setAttribute(r,a);else{const e=js(`bindings=${JSON.stringify({[r]:a},null,2)}`);mn(i)?i.setValue(t,e):t.textContent=e}}function Yl(e,t){const n=e.schemas;if(null!==n)for(let e=0;e<n.length;e++){const r=n[e];if(r===As||r===ks&&t&&t.indexOf("-")>-1)return!0}return!1}function Xl(e,t){let n=`Can't bind to '${e}' since it isn't a known property of '${t.value}'.`;console.error(he(303,n))}function ec(e,t,n,r){ngDevMode&&Zt(e);let o=!1;if(kn()){const i=function(e,t,n){ngDevMode&&Zt(e),ngDevMode&&xr(n,15);const r=e.directiveRegistry;let o=null;if(r)for(let i=0;i<r.length;i++){const s=r[i];Va(n,s.selectors,!1)&&(o||(o=ngDevMode?new gl:[]),Hr(Vr(n,t),e,s.type),$t(s)?(ngDevMode&&(xr(n,2,`"${n.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${ae(s.type)} component.`),2&n.flags&&Us(n)),rc(e,n),o.unshift(s)):o.push(s))}return o}(e,t,n),s=null===r?null:{"":-1};if(null!==i){o=!0,ic(n,e.data.length,i.length);for(let e=0;e<i.length;e++){const t=i[e];t.providersResolver&&t.providersResolver(t)}let r=!1,a=!1,l=Vl(e,t,i.length,null);ngDevMode&&xe(l,n.directiveStart,"TNode.directiveStart should point to just allocated space");for(let o=0;o<i.length;o++){const c=i[o];n.mergedAttrs=Or(n.mergedAttrs,c.hostAttrs),sc(e,n,t,l,c),oc(l,c,s),null!==c.contentQueries&&(n.flags|=8),null===c.hostBindings&&null===c.hostAttrs&&0===c.hostVars||(n.flags|=128);const u=c.type.prototype;!r&&(u.ngOnChanges||u.ngOnInit||u.ngDoCheck)&&((e.preOrderHooks||(e.preOrderHooks=[])).push(n.index),r=!0),a||!u.ngOnChanges&&!u.ngDoCheck||((e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(n.index),a=!0),l++}!function(e,t){ngDevMode&&Zt(e);const n=t.directiveStart,r=t.directiveEnd,o=e.data,i=t.attrs,s=ngDevMode?new vl:[];let a=null,l=null;for(let e=n;e<r;e++){const n=o[e],r=n.inputs,c=null===i||Aa(t)?null:dc(r,i);s.push(c),a=Kl(r,e,a),l=Kl(n.outputs,e,l)}null!==a&&(a.hasOwnProperty("class")&&(t.flags|=16),a.hasOwnProperty("style")&&(t.flags|=32)),t.initialInputs=s,t.inputs=a,t.outputs=l}(e,n)}s&&function(e,t,n){if(t){const r=e.localNames=ngDevMode?new ml:[];for(let e=0;e<t.length;e+=2){const o=n[t[e+1]];if(null==o)throw new pe(-301,ngDevMode&&`Export of name '${t[e+1]}' not found!`);r.push(t[e],o)}}}(n,r,s)}return n.mergedAttrs=Or(n.mergedAttrs,n.attrs),o}function tc(e,t,n,r,o,i){ngDevMode&&Zt(e);const s=i.hostBindings;if(s){let n=e.hostBindingOpCodes;null===n&&(n=e.hostBindingOpCodes=[]);const i=~t.index;(function(e){let t=e.length;for(;t>0;){const n=e[--t];if("number"==typeof n&&n<0)return n}return 0})(n)!=i&&n.push(i),n.push(r,o,s)}}function nc(e,t){null!==e.hostBindings&&e.hostBindings(1,t)}function rc(e,t){ngDevMode&&Zt(e),t.flags|=2,(e.components||(e.components=ngDevMode?new yl:[])).push(t.index)}function oc(e,t,n){if(n){if(t.exportAs)for(let r=0;r<t.exportAs.length;r++)n[t.exportAs[r]]=e;$t(t)&&(n[""]=e)}}function ic(e,t,n){ngDevMode&&De(n,e.directiveEnd-e.directiveStart,"Reached the max number of directives"),e.flags|=1,e.directiveStart=t,e.directiveEnd=t+n,e.providerIndexes=t}function sc(e,t,n,r,o){ngDevMode&&Se(r,St,"Must be in Expando section"),e.data[r]=o;const i=o.factory||(o.factory=en(o.type,!0)),s=new Mr(i,$t(o),null);e.blueprint[r]=s,n[r]=s,tc(e,t,0,r,Vl(e,n,o.hostVars,Ha),o)}function ac(e,t,n){const r=_n(t,e),o=zl(n),i=e[10],s=mc(e,Pl(e,o,null,n.onPush?64:16,r,t,i,i.createRenderer(r,n),null,null));e[t.index]=s}function lc(e,t,n,r,o,i){ngDevMode&&(Ie(r,Ha,"Incoming value should never be NO_CHANGE."),function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event attribute '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...`;throw new pe(306,t)}}(n),xr(e,2,`Attempted to set attribute \`${n}\` on a container node. Host bindings are not valid on ng-container or ng-template.`));const s=_n(e,t);cc(t[11],s,i,e.value,n,r,o)}function cc(e,t,n,r,o,i,s){if(null==i)ngDevMode&&ngDevMode.rendererRemoveAttribute++,mn(e)?e.removeAttribute(t,o,n):t.removeAttribute(o);else{ngDevMode&&ngDevMode.rendererSetAttribute++;const a=null==s?ge(i):s(i,r||"",o);mn(e)?e.setAttribute(t,o,a,n):n?t.setAttributeNS(n,o,a):t.setAttribute(o,a)}}function uc(e,t,n,r,o,i){const s=i[t];if(null!==s){const t=r.setInput;for(let i=0;i<s.length;){const a=s[i++],l=s[i++],c=s[i++];null!==t?r.setInput(n,c,a,l):n[l]=c,ngDevMode&&Jl(e,_n(o,e),o.type,l,c)}}}function dc(e,t){let n=null,r=0;for(;r<t.length;){const o=t[r];if(0!==o)if(5!==o){if("number"==typeof o)break;e.hasOwnProperty(o)&&(null===n&&(n=[]),n.push(o,e[o],t[r+1])),r+=2}else r+=2;else r+=4}return n}const fc=class extends Array{};function pc(e,t,n,r){ngDevMode&&Qt(t),ngDevMode&&!mn(t[11])&&Ne(n);const o=new(ngDevMode?fc:Array)(e,!0,!1,t,null,0,r,n,null,null);return ngDevMode&&Me(o.length,At,"Should allocate correct number of slots for LContainer header."),ngDevMode&&function(e){Xa(e,new kl(e))}(o),o}function hc(e,t){ngDevMode&&Me(xn(e),!1,"Should be run in update mode");const n=Dn(t,e);if(In(n)){const e=n[1];80&n[2]?Fl(e,n,e.template,n[8]):n[5]>0&&gc(n)}}function gc(e){for(let t=Gs(e);null!==t;t=Js(t))for(let e=At;e<t.length;e++){const n=t[e];if(1024&n[2]){const e=n[1];ngDevMode&&ke(e,"TView must be allocated"),Fl(e,n,e.template,n[8])}else n[5]>0&&gc(n)}const t=e[1].components;if(null!==t)for(let n=0;n<t.length;n++){const r=Dn(t[n],e);In(r)&&r[5]>0&&gc(r)}}function yc(e,t){ngDevMode&&Me(xn(e),!0,"Should be run in creation mode");const n=Dn(t,e),r=n[1];!function(e,t){for(let n=t.length;n<e.blueprint.length;n++)t.push(e.blueprint[n])}(r,n),$l(r,n,n[8])}function mc(e,t){return e[13]?e[14][4]=t:e[13]=t,e[14]=t,t}function vc(e){for(;e;){e[2]|=64;const t=Zs(e);if(0!=(512&e[2])&&!t)return e;e=t}return null}function bc(e){for(let t=0;t<e.components.length;t++){const n=e.components[t],r=Ms(n),o=r[1];Ll(o,r,o.template,n)}}function wc(e,t,n){const r=t[10];r.begin&&r.begin();try{Fl(e,t,e.template,n)}catch(e){throw Tc(t,e),e}finally{r.end&&r.end()}}function _c(e){bc(e[8])}function Cc(e,t,n){ngDevMode&&ke(t,"View queries function to execute must be defined."),tr(0),t(e,n)}function Mc(e,t,n,r,...o){if(null===e[r]&&(null==t.inputs||!t.inputs[n])){(t.propertyBindings||(t.propertyBindings=[])).push(r);let i=n;o.length>0&&(i+=Hs+o.join(Hs)),e[r]=i}}const Dc=Al;function xc(e){return e[7]||(e[7]=ngDevMode?new bl:[])}function Ic(e){return e.cleanup||(e.cleanup=ngDevMode?new wl:[])}function Ec(e,t,n){return(null===e||$t(e))&&(n=function(e){for(;Array.isArray(e);){if("object"==typeof e[1])return e;e=e[0]}return null}(n[t.index])),n[11]}function Tc(e,t){const n=e[9],r=n?n.get(Ss,null):null;r&&r.handleError(t)}function Oc(e,t,n,r,o){for(let i=0;i<n.length;){const s=n[i++],a=n[i++],l=t[s];ngDevMode&&Pe(t,s);const c=e.data[s];null!==c.setInput?c.setInput(l,o,r,a):l[a]=o}}function Sc(e,t,n){ngDevMode&&Ce(n,"Value should be a string"),ngDevMode&&Ie(n,Ha,"value should not be NO_CHANGE"),ngDevMode&&Pe(e,t);const r=wn(t,e);ngDevMode&&ke(r,"native element should exist"),ta(e[11],r,n)}function kc(e,t,n){ngDevMode&&Zt(jn(),"Expecting to be called in first template pass only");let r=n?e.styles:null,o=n?e.classes:null,i=0;if(null!==t)for(let e=0;e<t.length;e++){const n=t[e];"number"==typeof n?i=n:1==i?o=le(o,n):2==i&&(r=le(r,n+": "+t[++e]+";"))}n?e.styles=r:e.stylesWithoutHost=r,n?e.classes=o:e.classesWithoutHost=o}function Ac(e){const t=ws(e);wc(t[1],t,e)}function Nc(e){ngDevMode&&ke(e,"component");const t=vc(ws(e));ngDevMode&&ke(t[8],"rootContext should be defined"),function(e,t){if(0===e.flags&&e.clean==Al){let t;e.flags|=1,e.clean=new Promise((e=>t=e)),e.scheduler((()=>{if(1&e.flags&&(e.flags&=-2,bc(e)),2&e.flags){e.flags&=-3;const t=e.playerHandler;t&&t.flushPlayers()}e.clean=Al,t(null)}))}}(t[8])}const Pc=new uo("INJECTOR",-1);class jc{get(e,t=$o){if(t===$o){const t=new Error(`NullInjectorError: No provider for ${ae(e)}!`);throw t.name="NullInjectorError",t}return t}}const Rc=new uo("Set Injector scope."),Vc={},$c={};let Fc;function Lc(){return void 0===Fc&&(Fc=new jc),Fc}function Hc(e,t=null,n=null,r){const o=Bc(e,t,n,r);return o._resolveInjectorDefTypes(),o}function Bc(e,t=null,n=null,r){return new Uc(e,n,t||Lc(),r)}class Uc{constructor(e,t,n,r=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const o=[];t&&Do(t,(n=>this.processProvider(n,e,t))),Do([e],(e=>this.processInjectorType(e,[],o))),this.records.set(Pc,Wc(void 0,this));const i=this.records.get(Rc);this.scope=null!=i?i.value:null,this.source=r||("object"==typeof e?null:ae(e))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach((e=>e.ngOnDestroy()))}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(e,t=$o,n=We.Default){this.assertNotDestroyed();const r=Uo(this),o=Ze(void 0);try{if(!(n&We.SkipSelf)){let t=this.records.get(e);if(void 0===t){const n=("function"==typeof(i=e)||"object"==typeof i&&i instanceof uo)&&Fe(e);t=n&&this.injectableDefInScope(n)?Wc(qc(e),Vc):null,this.records.set(e,t)}if(null!=t)return this.hydrate(e,t)}const s=n&We.Self?Lc():this.parent;return t=n&We.Optional&&t===$o?null:t,s.get(e,t)}catch(t){if("NullInjectorError"===t.name){if((t.ngTempTokenPath=t.ngTempTokenPath||[]).unshift(ae(e)),r)throw t;return function(e,t,n,r){const o=e.ngTempTokenPath;throw t[Lo]&&o.unshift(t[Lo]),e.message=function(e,t,n,r=null){e=e&&"\n"===e.charAt(0)&&"ɵ"==e.charAt(1)?e.substr(2):e;let o=ae(t);if(Array.isArray(t))o=t.map(ae).join(" -> ");else if("object"==typeof t){let e=[];for(let n in t)if(t.hasOwnProperty(n)){let r=t[n];e.push(n+":"+("string"==typeof r?JSON.stringify(r):ae(r)))}o=`{${e.join(", ")}}`}return`${n}${r?"("+r+")":""}[${o}]: ${e.replace(Fo,"\n  ")}`}("\n"+e.message,o,n,r),e.ngTokenPath=o,e.ngTempTokenPath=null,e}(t,e,"R3InjectorError",this.source)}throw t}finally{Ze(o),Uo(r)}var i}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach((e=>this.get(e)))}toString(){const e=[];return this.records.forEach(((t,n)=>e.push(ae(n)))),`R3Injector[${e.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new pe(205,ngDevMode&&"Injector has already been destroyed.")}processInjectorType(e,t,n){if(!(e=de(e)))return!1;let r=He(e);const o=null==r&&e.ngModule||void 0,i=void 0===o?e:o;ngDevMode&&-1!==t.indexOf(i)&&me(ae(i),t.map(ae));const s=-1!==n.indexOf(i);if(void 0!==o&&(r=He(o)),null==r)return!1;if(null!=r.imports&&!s){let e;ngDevMode&&t.push(i),n.push(i);try{Do(r.imports,(r=>{this.processInjectorType(r,t,n)&&(void 0===e&&(e=[]),e.push(r))}))}finally{ngDevMode&&t.pop()}if(void 0!==e)for(let t=0;t<e.length;t++){const{ngModule:n,providers:r}=e[t];Do(r,(e=>this.processProvider(e,n,r||lt)))}}this.injectorDefTypes.add(i);const a=en(i)||(()=>new i);this.records.set(i,Wc(a,Vc));const l=r.providers;if(null!=l&&!s){const t=e;Do(l,(e=>this.processProvider(e,t,l)))}return void 0!==o&&void 0!==e.providers}processProvider(e,t,n){let r=Zc(e=de(e))?e:de(e&&e.provide);const o=function(e,t,n){return Qc(e)?Wc(void 0,e.useValue):Wc(zc(e,t,n),Vc)}(e,t,n);if(Zc(e)||!0!==e.multi){const e=this.records.get(r);ngDevMode&&e&&void 0!==e.multi&&ve()}else{let t=this.records.get(r);t?ngDevMode&&void 0===t.multi&&ve():(t=Wc(void 0,Vc,!0),t.factory=()=>Zo(t.multi),this.records.set(r,t)),r=e,t.multi.push(e)}this.records.set(r,o)}hydrate(e,t){var n;return ngDevMode&&t.value===$c?me(ae(e)):t.value===Vc&&(t.value=$c,t.value=t.factory()),"object"==typeof t.value&&t.value&&null!==(n=t.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(t.value),t.value}injectableDefInScope(e){if(!e.providedIn)return!1;const t=de(e.providedIn);return"string"==typeof t?"any"===t||t===this.scope:this.injectorDefTypes.has(t)}}function qc(e){const t=Fe(e),n=null!==t?t.factory:en(e);if(null!==n)return n;if(e instanceof uo)throw new pe(204,ngDevMode&&`Token ${ae(e)} is missing a ɵprov definition.`);if(e instanceof Function)return function(e){const t=e.length;if(t>0){const n=Eo(t,"?");throw new pe(204,ngDevMode&&`Can't resolve all parameters for ${ae(e)}: (${n.join(", ")}).`)}const n=function(e){const t=e&&(e[Be]||e[qe]);if(t){const n=function(e){if(e.hasOwnProperty("name"))return e.name;const t=(""+e).match(/^function\s*([^\s(]+)/);return null===t?"":t[1]}(e);return console.warn(`DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${n}" class.`),t}return null}(e);return null!==n?()=>n.factory(e):()=>new e}(e);throw new pe(204,ngDevMode&&"unreachable")}function zc(e,t,n){let r;if(Zc(e)){const t=de(e);return en(t)||qc(t)}if(Qc(e))r=()=>de(e.useValue);else if((o=e)&&o.useFactory)r=()=>e.useFactory(...Zo(e.deps||[]));else if(function(e){return!(!e||!e.useExisting)}(e))r=()=>zo(de(e.useExisting));else{const o=de(e&&(e.useClass||e.provide));if(ngDevMode&&!o&&function(e,t,n){let r="";throw e&&t&&(r=` - only instances of Provider and Type are allowed, got: [${t.map((e=>e==n?"?"+n+"?":"...")).join(", ")}]`),new Error(`Invalid provider for the NgModule '${ae(e)}'`+r)}(t,n,e),!function(e){return!!e.deps}(e))return en(o)||qc(o);r=()=>new o(...Zo(e.deps))}var o;return r}function Wc(e,t,n=!1){return{factory:e,value:t,multi:n?[]:void 0}}function Qc(e){return null!==e&&"object"==typeof e&&Ho in e}function Zc(e){return"function"==typeof e}class Kc{static create(e,t){if(Array.isArray(e))return Hc({name:""},t,e,"");{const t=e.name??"";return Hc({name:t},e.parent,e.providers,t)}}}function Gc(e){su(e);const t=vs(e);return null===t?null:(void 0===t.component&&(t.component=function(e,t){const n=t[1].data[e];let r=n.directiveStart;return 2&n.flags?t[r]:null}(t.nodeIndex,t.lView)),t.component)}function Jc(e){su(e);const t=vs(e);return null===t?null:t.lView[8]}function Yc(e){const t=vs(e);if(null===t)return null;let n,r=t.lView;for(ngDevMode&&Qt(r);2===r[1].type&&(n=Zs(r));)r=n;return 512&r[2]?null:r[8]}function Xc(e){return[...Ks(e).components]}function eu(e){const t=vs(e);if(null===t)return Kc.NULL;const n=t.lView[1].data[t.nodeIndex];return new Yr(n,t.lView)}function tu(e){if(e instanceof Text)return[];const t=vs(e);if(null===t)return[];const n=t.lView,r=n[1],o=t.nodeIndex;return r?.data[o]?(void 0===t.directives&&(t.directives=Es(o,n,!1)),null===t.directives?[]:[...t.directives]):[]}function nu(e){const{constructor:t}=e;if(!t)throw new Error("Unable to find the instance constructor");const n=It(t);if(n)return{inputs:n.inputs,outputs:n.outputs,encapsulation:n.encapsulation,changeDetection:n.onPush?Je.OnPush:Je.Default};const r=Et(t);return r?{inputs:r.inputs,outputs:r.outputs}:null}function ru(e){return vs(e).native}function ou(e){su(e);const t=vs(e);if(null===t)return[];const n=t.lView,r=n[1],o=n[7],i=r.cleanup,s=[];if(i&&o)for(let t=0;t<i.length;){const r=i[t++],a=i[t++];if("string"==typeof r){const l=r,c=bn(n[a]),u=o[i[t++]],d=i[t++],f="boolean"==typeof d||d>=0?"dom":"output",p="boolean"==typeof d&&d;e==c&&s.push({element:e,name:l,callback:u,useCapture:p,type:f})}}return s.sort(iu),s}function iu(e,t){return e.name==t.name?0:e.name<t.name?-1:1}function su(e){if("undefined"!=typeof Element&&!(e instanceof Element))throw new Error("Expecting instance of DOM Element")}function au(e){Nc(e),Xc(e).forEach((e=>Ac(e)))}Kc.THROW_IF_NOT_FOUND=$o,Kc.NULL=new jc,Kc.ɵprov=Re({token:Kc,providedIn:"any",factory:()=>zo(Pc)}),Kc.__NG_ELEMENT_ID__=-1;let lu=!1;function cu(){lu||(lu=!0,uu("ɵsetProfiler",cn),uu("getDirectiveMetadata",nu),uu("getComponent",Gc),uu("getContext",Jc),uu("getListeners",ou),uu("getOwningComponent",Yc),uu("getHostElement",ru),uu("getInjector",eu),uu("getRootComponents",Xc),uu("getDirectives",tu),uu("applyChanges",au))}function uu(e,t){if("undefined"==typeof COMPILED||!COMPILED){const n=it;if(ngDevMode&&ke(t,"function not defined"),n){let r=n.ng;r||(r=n.ng={}),r[e]=t}}}function du(e,t={}){ngDevMode&&cu(),ngDevMode&&Ut(e);const n=t.rendererFactory||vn,r=t.sanitizer||null,o=It(e);o.type!=e&&(o.type=e);const i=o.selectors[0][0],s=Ql(n.createRenderer(null,null),t.host||i,o.encapsulation),a=o.onPush?576:528,l=hu(t.scheduler,t.playerHandler),c=n.createRenderer(s,o),u=Wl(0,null,null,1,0,null,null,null,null,null),d=Pl(null,u,l,a,null,null,n,c,null,t.injector||null);let f;or(d);try{n.begin&&n.begin(),f=pu(fu(s,o,d,n,c,r),o,d,l,t.hostFeatures||null),$l(u,d,null),Fl(u,d,null,null)}finally{cr(),n.end&&n.end()}return f}function fu(e,t,n,r,o,i){const s=n[1];ngDevMode&&Pe(n,20),n[20]=e;const a=jl(s,20,2,"#host",null),l=a.mergedAttrs=t.hostAttrs;null!==l&&(kc(a,l,!0),null!==e&&(Ir(o,e,l),null!==a.classes&&Ta(o,e,a.classes),null!==a.styles&&Ea(o,e,a.styles)));const c=r.createRenderer(e,t),u=Pl(n,zl(t),null,t.onPush?64:16,n[20],a,r,c,i||null,null);return s.firstCreatePass&&(Hr(Vr(a,n),s,t.type),rc(s,a),ic(a,n.length,1)),mc(n,u),n[20]=u}function pu(e,t,n,r,o){const i=n[1],s=function(e,t,n){const r=Vn();if(e.firstCreatePass){n.providersResolver&&n.providersResolver(n);const o=Vl(e,t,1,null);ngDevMode&&Me(o,r.directiveStart,"Because this is a root component the allocated expando should match the TNode component."),sc(e,r,t,o,n)}const o=Kr(t,e,r.directiveStart,r);_s(o,t);const i=_n(r,t);return i&&_s(i,t),o}(i,n,t);if(r.components.push(s),e[8]=s,o&&o.forEach((e=>e(s,t))),t.contentQueries){const e=Vn();ngDevMode&&ke(e,"TNode expected"),t.contentQueries(1,s,e.directiveStart)}const a=Vn();return ngDevMode&&ke(a,"tNode should have been already created"),!i.firstCreatePass||null===t.hostBindings&&null===t.hostAttrs||(dr(a.index),tc(n[1],a,0,a.directiveStart,a.directiveEnd,t),nc(t,s)),s}function hu(e,t){return{components:[],scheduler:e||Vs,clean:Dc,playerHandler:t||null,flags:0}}function gu(e,t){const n=Ms(e);ngDevMode&&ke(n,"LView is required");const r=n[1],o=Vn();ngDevMode&&ke(o,"TNode is required"),yr(r,o)}function yu(e){return Ks(e).clean}function mu(e){return Object.getPrototypeOf(e.prototype).constructor}function vu(e){let t=mu(e.type),n=!0;const r=[e];for(;t;){let o;if($t(e))o=t.ɵcmp||t.ɵdir;else{if(t.ɵcmp){const e="undefined"==typeof ngDevMode||ngDevMode?"Directives cannot inherit Components":"";throw new pe(903,e)}o=t.ɵdir}if(o){if(n){r.push(o);const t=e;t.inputs=bu(e.inputs),t.declaredInputs=bu(e.declaredInputs),t.outputs=bu(e.outputs);const n=o.hostBindings;n&&Cu(e,n);const i=o.viewQuery,s=o.contentQueries;if(i&&wu(e,i),s&&_u(e,s),se(e.inputs,o.inputs),se(e.declaredInputs,o.declaredInputs),se(e.outputs,o.outputs),$t(o)&&o.data.animation){const t=e.data;t.animation=(t.animation||[]).concat(o.data.animation)}}const t=o.features;if(t)for(let r=0;r<t.length;r++){const o=t[r];o&&o.ngInherit&&o(e),o===vu&&(n=!1)}}t=Object.getPrototypeOf(t)}!function(e){let t=0,n=null;for(let r=e.length-1;r>=0;r--){const o=e[r];o.hostVars=t+=o.hostVars,o.hostAttrs=Or(o.hostAttrs,n=Or(n,o.hostAttrs))}}(r)}function bu(e){return e===at?{}:e===lt?[]:e}function wu(e,t){const n=e.viewQuery;e.viewQuery=n?(e,r)=>{t(e,r),n(e,r)}:t}function _u(e,t){const n=e.contentQueries;e.contentQueries=n?(e,r,o)=>{t(e,r,o),n(e,r,o)}:t}function Cu(e,t){const n=e.hostBindings;e.hostBindings=n?(e,r)=>{t(e,r),n(e,r)}:t}const Mu=["providersResolver"],Du=["template","decls","consts","vars","onPush","ngContentSelectors","styles","encapsulation","schemas"];function xu(e){let t,n=mu(e.type);t=$t(e)?n.ɵcmp:n.ɵdir;const r=e;for(const e of Mu)r[e]=t[e];if($t(t))for(const e of Du)r[e]=t[e]}let Iu=null;function Eu(){if(!Iu){const e=it.Symbol;if(e&&e.iterator)Iu=e.iterator;else{const e=Object.getOwnPropertyNames(Map.prototype);for(let t=0;t<e.length;++t){const n=e[t];"entries"!==n&&"size"!==n&&Map.prototype[n]===Map.prototype.entries&&(Iu=n)}}}return Iu}function Tu(e,t){const n=Ou(e),r=Ou(t);if(n&&r)return function(e,t,n){const r=e[Eu()](),o=t[Eu()]();for(;;){const e=r.next(),t=o.next();if(e.done&&t.done)return!0;if(e.done||t.done)return!1;if(!n(e.value,t.value))return!1}}(e,t,Tu);{const o=e&&("object"==typeof e||"function"==typeof e),i=t&&("object"==typeof t||"function"==typeof t);return!(n||!o||r||!i)||Object.is(e,t)}}function Ou(e){return!!Su(e)&&(Array.isArray(e)||!(e instanceof Map)&&Eu()in e)}function Su(e){return null!==e&&("function"==typeof e||"object"==typeof e)}function ku(e,t,n){return e[t]=n}function Au(e,t){return ngDevMode&&Pe(e,t),ngDevMode&&Ie(e[t],Ha,"Stored value should never be NO_CHANGE."),e[t]}function Nu(e,t,n){ngDevMode&&Ie(n,Ha,"Incoming value should never be NO_CHANGE."),ngDevMode&&Ee(t,e.length,"Slot should have been initialized to NO_CHANGE");const r=e[t];if(Object.is(r,n))return!1;if(ngDevMode&&Un()){const o=r!==Ha?r:void 0;if(!Tu(o,n)){const i=function(e,t,n,r){const o=e[1].data,i=o[t];if("string"==typeof i)return i.indexOf(Hs)>-1?qs(e,t,t,i,r):{propName:i,oldValue:n,newValue:r};if(null===i){let n=t-1;for(;"string"!=typeof o[n]&&null===o[n+1];)n--;const i=o[n];if("string"==typeof i){const o=i.match(new RegExp(Hs,"g"));if(o&&o.length-1>t-n)return qs(e,n,t,i,r)}}return{propName:void 0,oldValue:n,newValue:r}}(e,t,o,n);!function(e,t,n,r){let o=`ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${r?` for '${r}'`:""}: '${t}'. Current value: '${n}'.`;throw e&&(o+=" It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?"),new pe(-100,o)}(r===Ha,i.oldValue,i.newValue,i.propName)}return!1}return e[t]=n,!0}function Pu(e,t,n,r){const o=Nu(e,t,n);return Nu(e,t+1,r)||o}function ju(e,t,n,r,o){const i=Pu(e,t,n,r);return Nu(e,t+2,o)||i}function Ru(e,t,n,r,o,i){const s=Pu(e,t,n,r);return Pu(e,t+2,o,i)||s}function Vu(e,t,n,r){const o=Pn(),i=Zn();if(Nu(o,i,t)){const s=jn(),a=fr();lc(a,o,e,t,n,r),ngDevMode&&Mc(s.data,a,"attr."+e,i)}return Vu}function $u(e,t){ngDevMode&&Ee(2,t.length,"should have at least 3 values"),ngDevMode&&Me(t.length%2,1,"should have an odd number of values");let n=!1,r=Wn();for(let o=1;o<t.length;o+=2)n=Nu(e,r++,t[o])||n;if(Qn(r),!n)return Ha;let o=t[0];for(let e=1;e<t.length;e+=2)o+=ge(t[e])+t[e+1];return o}function Fu(e,t,n,r){return Nu(e,Zn(),n)?t+ge(n)+r:Ha}function Lu(e,t,n,r,o,i){const s=Pu(e,Wn(),n,o);return Kn(2),s?t+ge(n)+r+ge(o)+i:Ha}function Hu(e,t,n,r,o,i,s,a){const l=ju(e,Wn(),n,o,s);return Kn(3),l?t+ge(n)+r+ge(o)+i+ge(s)+a:Ha}function Bu(e,t,n,r,o,i,s,a,l,c){const u=Ru(e,Wn(),n,o,s,l);return Kn(4),u?t+ge(n)+r+ge(o)+i+ge(s)+a+ge(l)+c:Ha}function Uu(e,t,n,r,o,i,s,a,l,c,u,d){const f=Wn();let p=Ru(e,f,n,o,s,l);return p=Nu(e,f+4,u)||p,Kn(5),p?t+ge(n)+r+ge(o)+i+ge(s)+a+ge(l)+c+ge(u)+d:Ha}function qu(e,t,n,r,o,i,s,a,l,c,u,d,f,p){const h=Wn();let g=Ru(e,h,n,o,s,l);return g=Pu(e,h+4,u,f)||g,Kn(6),g?t+ge(n)+r+ge(o)+i+ge(s)+a+ge(l)+c+ge(u)+d+ge(f)+p:Ha}function zu(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g){const y=Wn();let m=Ru(e,y,n,o,s,l);return m=ju(e,y+4,u,f,h)||m,Kn(7),m?t+ge(n)+r+ge(o)+i+ge(s)+a+ge(l)+c+ge(u)+d+ge(f)+p+ge(h)+g:Ha}function Wu(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m){const v=Wn();let b=Ru(e,v,n,o,s,l);return b=Ru(e,v+4,u,f,h,y)||b,Kn(8),b?t+ge(n)+r+ge(o)+i+ge(s)+a+ge(l)+c+ge(u)+d+ge(f)+p+ge(h)+g+ge(y)+m:Ha}function Qu(e,t,n,r,o,i){const s=Pn(),a=Fu(s,t,n,r);if(a!==Ha){const n=fr();lc(n,s,e,a,o,i),ngDevMode&&Mc(jn().data,n,"attr."+e,Wn()-1,t,r)}return Qu}function Zu(e,t,n,r,o,i,s,a){const l=Pn(),c=Lu(l,t,n,r,o,i);if(c!==Ha){const n=fr();lc(n,l,e,c,s,a),ngDevMode&&Mc(jn().data,n,"attr."+e,Wn()-2,t,r,i)}return Zu}function Ku(e,t,n,r,o,i,s,a,l,c){const u=Pn(),d=Hu(u,t,n,r,o,i,s,a);if(d!==Ha){const n=fr();lc(n,u,e,d,l,c),ngDevMode&&Mc(jn().data,n,"attr."+e,Wn()-3,t,r,i,a)}return Ku}function Gu(e,t,n,r,o,i,s,a,l,c,u,d){const f=Pn(),p=Bu(f,t,n,r,o,i,s,a,l,c);if(p!==Ha){const n=fr();lc(n,f,e,p,u,d),ngDevMode&&Mc(jn().data,n,"attr."+e,Wn()-4,t,r,i,a,c)}return Gu}function Ju(e,t,n,r,o,i,s,a,l,c,u,d,f,p){const h=Pn(),g=Uu(h,t,n,r,o,i,s,a,l,c,u,d);if(g!==Ha){const n=fr();lc(n,h,e,g,f,p),ngDevMode&&Mc(jn().data,n,"attr."+e,Wn()-5,t,r,i,a,c,d)}return Ju}function Yu(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g){const y=Pn(),m=qu(y,t,n,r,o,i,s,a,l,c,u,d,f,p);if(m!==Ha){const n=fr();lc(n,y,e,m,h,g),ngDevMode&&Mc(jn().data,n,"attr."+e,Wn()-6,t,r,i,a,c,d,p)}return Yu}function Xu(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m){const v=Pn(),b=zu(v,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g);if(b!==Ha){const n=fr();lc(n,v,e,b,y,m),ngDevMode&&Mc(jn().data,n,"attr."+e,Wn()-7,t,r,i,a,c,d,p,g)}return Xu}function ed(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m,v,b){const w=Pn(),_=Wu(w,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m);if(_!==Ha){const n=fr();lc(n,w,e,_,v,b),ngDevMode&&Mc(jn().data,n,"attr."+e,Wn()-8,t,r,i,a,c,d,p,g,m)}return ed}function td(e,t,n,r){const o=Pn(),i=$u(o,t);if(i!==Ha){const s=fr();if(lc(s,o,e,i,n,r),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Mc(jn().data,s,"attr."+e,Wn()-n.length+1,...n)}}return td}function nd(e,t,n,r,o,i,s,a){const l=Pn(),c=jn(),u=e+St,d=c.firstCreatePass?function(e,t,n,r,o,i,s,a,l){ngDevMode&&Zt(t),ngDevMode&&ngDevMode.firstCreatePass++;const c=t.consts,u=jl(t,e,4,s||null,En(c,a));ec(t,n,u,En(c,l)),yr(t,u);const d=u.tViews=Wl(2,u,r,o,i,t.directiveRegistry,t.pipeRegistry,null,t.schemas,c);return null!==t.queries&&(t.queries.template(t,u),d.queries=t.queries.embeddedTView(u)),u}(u,c,l,t,n,r,o,i,s):c.data[u];Ln(d,!1);const f=l[11].createComment(ngDevMode?"container":"");ba(c,l,f,d),_s(f,l),mc(l,l[u]=pc(f,l,f,d)),Vt(d)&&Ul(c,l,d),null!=s&&ql(l,d,a)}function rd(e,t,n,r){n>=e.data.length&&(e.data[n]=null,e.blueprint[n]=null),t[n]=r}function od(e){return Mn(Sn.lFrame.contextLView,St+e)}const id={ɵɵdefineInjectable:Re,ɵɵdefineInjector:$e,ɵɵinject:zo,ɵɵinvalidFactoryDep:Wo,resolveForwardRef:de};const sd=ie({provide:String,useValue:ie});function ad(e){return void 0!==e.useClass}function ld(e){return void 0!==e.useFactory}const cd=io("Injectable",void 0,void 0,void 0,((e,t)=>function(e,t){let n=null,r=null;e.hasOwnProperty(Be)||Object.defineProperty(e,Be,{get:()=>{if(null===n){const r=wo({usage:0,kind:"injectable",type:e});n=r.compileInjectable(id,`ng:///${e.name}/ɵprov.js`,function(e,t){const n=t||{providedIn:null},r={name:e.name,type:e,typeArgumentCount:0,providedIn:n.providedIn};return(ad(n)||ld(n))&&void 0!==n.deps&&(r.deps=oi(n.deps)),ad(n)?r.useClass=n.useClass:function(e){return sd in e}(n)?r.useValue=n.useValue:ld(n)?r.useFactory=n.useFactory:function(e){return void 0!==e.useExisting}(n)&&(r.useExisting=n.useExisting),r}(e,t))}return n}}),e.hasOwnProperty(pt)||Object.defineProperty(e,pt,{get:()=>{if(null===r){const t=wo({usage:0,kind:"injectable",type:e});r=t.compileFactory(id,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,typeArgumentCount:0,deps:ri(e),target:t.FactoryTarget.Injectable})}return r},configurable:!0})}(e,t)));function ud(e){return e.length>1?" ("+function(e){const t=[];for(let n=0;n<e.length;++n){if(t.indexOf(e[n])>-1)return t.push(e[n]),t;t.push(e[n])}return t}(e.slice().reverse()).map((e=>ae(e.token))).join(" -> ")+")":""}function dd(e,t,n,r){const o=[t],i=n(o),s=r?function(e,t){const n=`${e} caused by: ${t instanceof Error?t.message:t}`,r=Error(n);return r.ngOriginalError=t,r}(i,r):Error(i);return s.addKey=fd,s.keys=o,s.injectors=[e],s.constructResolvingMessage=n,s.ngOriginalError=r,s}function fd(e,t){this.injectors.push(e),this.keys.push(t),this.message=this.constructResolvingMessage(this.keys)}function pd(e,t){const n=[];for(let e=0,r=t.length;e<r;e++){const r=t[e];r&&0!=r.length?n.push(r.map(ae).join(" ")):n.push("?")}return Error("Cannot resolve all parameters for '"+ae(e)+"'("+n.join(", ")+"). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '"+ae(e)+"' is decorated with Injectable.")}class hd{constructor(e,t){if(this.token=e,this.id=t,!e)throw new Error("Token must be defined!");this.displayName=ae(this.token)}static get(e){return gd.get(de(e))}static get numberOfKeys(){return gd.numberOfKeys}}const gd=new class{constructor(){this._allKeys=new Map}get(e){if(e instanceof hd)return e;if(this._allKeys.has(e))return this._allKeys.get(e);const t=new hd(e,hd.numberOfKeys);return this._allKeys.set(e,t),t}get numberOfKeys(){return this._allKeys.size}},yd=new class{constructor(e){this.reflectionCapabilities=e}updateCapabilities(e){this.reflectionCapabilities=e}factory(e){return this.reflectionCapabilities.factory(e)}parameters(e){return this.reflectionCapabilities.parameters(e)}annotations(e){return this.reflectionCapabilities.annotations(e)}propMetadata(e){return this.reflectionCapabilities.propMetadata(e)}hasLifecycleHook(e,t){return this.reflectionCapabilities.hasLifecycleHook(e,t)}getter(e){return this.reflectionCapabilities.getter(e)}setter(e){return this.reflectionCapabilities.setter(e)}method(e){return this.reflectionCapabilities.method(e)}importUri(e){return this.reflectionCapabilities.importUri(e)}resourceUri(e){return this.reflectionCapabilities.resourceUri(e)}resolveIdentifier(e,t,n,r){return this.reflectionCapabilities.resolveIdentifier(e,t,n,r)}resolveEnum(e,t){return this.reflectionCapabilities.resolveEnum(e,t)}}(new jo);class md{constructor(e,t,n){this.key=e,this.optional=t,this.visibility=n}static fromKey(e){return new md(e,!1,null)}}const vd=[];class bd{constructor(e,t,n){this.key=e,this.resolvedFactories=t,this.multiProvider=n,this.resolvedFactory=this.resolvedFactories[0]}}class wd{constructor(e,t){this.factory=e,this.dependencies=t}}function _d(e){let t,n;if(e.useClass){const r=de(e.useClass);t=yd.factory(r),n=xd(r)}else e.useExisting?(t=e=>e,n=[md.fromKey(hd.get(e.useExisting))]):e.useFactory?(t=e.useFactory,n=function(e,t){if(t){const n=t.map((e=>[e]));return t.map((t=>Id(e,t,n)))}return xd(e)}(e.useFactory,e.deps)):(t=()=>e.useValue,n=vd);return new wd(t,n)}function Cd(e){return new bd(hd.get(e.provide),[_d(e)],e.multi||!1)}function Md(e){const t=function(e,t){for(let n=0;n<e.length;n++){const r=e[n],o=t.get(r.key.id);if(o){if(r.multiProvider!==o.multiProvider)throw Error(`Cannot mix multi providers and regular providers, got: ${o} ${r}`);if(r.multiProvider)for(let e=0;e<r.resolvedFactories.length;e++)o.resolvedFactories.push(r.resolvedFactories[e]);else t.set(r.key.id,r)}else{let e;e=r.multiProvider?new bd(r.key,r.resolvedFactories.slice(),r.multiProvider):r,t.set(r.key.id,e)}}return t}(Dd(e,[]).map(Cd),new Map);return Array.from(t.values())}function Dd(e,t){return e.forEach((e=>{if(e instanceof _o)t.push({provide:e,useClass:e});else if(e&&"object"==typeof e&&void 0!==e.provide)t.push(e);else{if(!Array.isArray(e))throw Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${e}`);Dd(e,t)}})),t}function xd(e){const t=yd.parameters(e);if(!t)return[];if(t.some((e=>null==e)))throw pd(e,t);return t.map((n=>Id(e,n,t)))}function Id(e,t,n){let r=null,o=!1;if(!Array.isArray(t))return Ed(t instanceof Go?t.token:t,o,null);let i=null;for(let e=0;e<t.length;++e){const n=t[e];n instanceof _o?r=n:n instanceof Go?r=n.token:n instanceof Jo?o=!0:n instanceof Yo||n instanceof Xo?i=n:n instanceof uo&&(r=n)}if(r=de(r),null!=r)return Ed(r,o,i);throw pd(e,n)}function Ed(e,t,n){return new md(hd.get(e),t,n)}const Td={};class Od{static resolve(e){return Md(e)}static resolveAndCreate(e,t){const n=Od.resolve(e);return Od.fromResolvedProviders(n,t)}static fromResolvedProviders(e,t){return new Sd(e,t)}}class Sd{constructor(e,t){this._constructionCounter=0,this._providers=e,this.parent=t||null;const n=e.length;this.keyIds=[],this.objs=[];for(let t=0;t<n;t++)this.keyIds[t]=e[t].key.id,this.objs[t]=Td}get(e,t=$o){return this._getByKey(hd.get(e),null,t)}resolveAndCreateChild(e){const t=Od.resolve(e);return this.createChildFromResolved(t)}createChildFromResolved(e){const t=new Sd(e);return t.parent=this,t}resolveAndInstantiate(e){return this.instantiateResolved(Od.resolve([e])[0])}instantiateResolved(e){return this._instantiateProvider(e)}getProviderAtIndex(e){if(e<0||e>=this._providers.length)throw function(e){return Error(`Index ${e} is out-of-bounds.`)}(e);return this._providers[e]}_new(e){if(this._constructionCounter++>this._getMaxNumberOfObjects())throw this,dd(this,e.key,(function(e){return`Cannot instantiate cyclic dependency!${ud(e)}`}));return this._instantiateProvider(e)}_getMaxNumberOfObjects(){return this.objs.length}_instantiateProvider(e){if(e.multiProvider){const t=[];for(let n=0;n<e.resolvedFactories.length;++n)t[n]=this._instantiate(e,e.resolvedFactories[n]);return t}return this._instantiate(e,e.resolvedFactories[0])}_instantiate(e,t){const n=t.factory;let r,o;try{r=t.dependencies.map((e=>this._getByReflectiveDependency(e)))}catch(t){throw t.addKey&&t.addKey(this,e.key),t}try{o=n(...r)}catch(t){throw this,i=t,t.stack,dd(this,e.key,(function(e){const t=ae(e[0].token);return`${i.message}: Error during instantiation of ${t}!${ud(e)}.`}),i)}var i;return o}_getByReflectiveDependency(e){return this._getByKey(e.key,e.visibility,e.optional?null:$o)}_getByKey(e,t,n){return e===Sd.INJECTOR_KEY?this:t instanceof Yo?this._getByKeySelf(e,n):this._getByKeyDefault(e,n,t)}_getObjByKeyId(e){for(let t=0;t<this.keyIds.length;t++)if(this.keyIds[t]===e)return this.objs[t]===Td&&(this.objs[t]=this._new(this._providers[t])),this.objs[t];return Td}_throwOrNull(e,t){if(t!==$o)return t;throw function(e,t){return dd(e,t,(function(e){return`No provider for ${ae(e[0].token)}!${ud(e)}`}))}(this,e)}_getByKeySelf(e,t){const n=this._getObjByKeyId(e.id);return n!==Td?n:this._throwOrNull(e,t)}_getByKeyDefault(e,t,n){let r;for(r=n instanceof Xo?this.parent:this;r instanceof Sd;){const t=r,n=t._getObjByKeyId(e.id);if(n!==Td)return n;r=t.parent}return null!==r?r.get(e.token,t):this._throwOrNull(e,t)}get displayName(){return`ReflectiveInjector(providers: [${function(e,t){const n=[];for(let t=0;t<e._providers.length;++t)n[t]=' "'+e.getProviderAtIndex(t).key.displayName+'" ';return n}(this).join(", ")}])`}toString(){return this.displayName}}function kd(e,t=We.Default){const n=Pn();return null===n?(ngDevMode&&(ngDevMode&&De(Qe,kd,"Calling ɵɵinject would cause infinite recursion")),zo(e,t)):qr(Vn(),n,de(e),t)}function Ad(){const e=ngDevMode?"This constructor was not compatible with Dependency Injection.":"invalid";throw new Error(e)}function Nd(e,t,n){const r=Pn(),o=Zn();if(Nu(r,o,t)){const i=jn(),s=fr();Gl(i,s,r,e,t,r[11],n,!1),ngDevMode&&Mc(i.data,s,e,o)}return Nd}function Pd(e,t,n,r,o){const i=o?"class":"style";Oc(e,n,t.inputs[i],i,r)}function jd(e,t,n,r){const o=Pn(),i=jn(),s=St+e;ngDevMode&&Me(Wn(),i.bindingStartIndex,"elements should be created before any bindings"),ngDevMode&&Pe(o,s);const a=o[11],l=o[s]=ra(a,t,Sn.lFrame.currentNamespace),c=i.firstCreatePass?function(e,t,n,r,o,i,s){ngDevMode&&Zt(t),ngDevMode&&ngDevMode.firstCreatePass++;const a=t.consts,l=jl(t,e,2,o,En(a,i)),c=ec(t,n,l,En(a,s));return ngDevMode&&function(e,t,n,r){if(null===e.schemas)return;const o=n.value;if(!r&&null!==o&&("undefined"!=typeof HTMLUnknownElement&&HTMLUnknownElement&&t instanceof HTMLUnknownElement||"undefined"!=typeof customElements&&o.indexOf("-")>-1&&!customElements.get(o))&&!Yl(e,o)){let e=`'${o}' is not a known element:\n`;e+=`1. If '${o}' is an Angular component, then verify that it is part of this module.\n`,o&&o.indexOf("-")>-1?e+=`2. If '${o}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`:e+="2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.",console.error(he(304,e))}}(t,r,l,c),null!==l.attrs&&kc(l,l.attrs,!1),null!==l.mergedAttrs&&kc(l,l.mergedAttrs,!0),null!==t.queries&&t.queries.elementStart(t,l),l}(s,i,o,l,t,n,r):i.data[s];Ln(c,!0);const u=c.mergedAttrs;null!==u&&Ir(a,l,u);const d=c.classes;null!==d&&Ta(a,l,d);const f=c.styles;return null!==f&&Ea(a,l,f),64!=(64&c.flags)&&ba(i,o,l,c),0===Sn.lFrame.elementDepthCount&&_s(l,o),Sn.lFrame.elementDepthCount++,Vt(c)&&(Ul(i,o,c),Bl(i,c,o)),null!==r&&ql(o,c),jd}function Rd(){let e=Vn();ngDevMode&&ke(e,"No parent node to close."),Hn()?Bn():(ngDevMode&&qt(Vn()),e=e.parent,Ln(e,!1));const t=e;ngDevMode&&xr(t,3),Sn.lFrame.elementDepthCount--;const n=jn();return n.firstCreatePass&&(yr(n,e),jt(e)&&n.queries.elementEnd(e)),null!=t.classesWithoutHost&&function(e){return 0!=(16&e.flags)}(t)&&Pd(n,t,Pn(),t.classesWithoutHost,!0),null!=t.stylesWithoutHost&&function(e){return 0!=(32&e.flags)}(t)&&Pd(n,t,Pn(),t.stylesWithoutHost,!1),Rd}function Vd(e,t,n,r){return jd(e,t,n,r),Rd(),Vd}function $d(e,t,n){const r=Pn(),o=jn(),i=e+St;ngDevMode&&Pe(r,i),ngDevMode&&Me(Wn(),o.bindingStartIndex,"element containers should be created before any bindings");const s=o.firstCreatePass?function(e,t,n,r,o){ngDevMode&&ngDevMode.firstCreatePass++;const i=t.consts,s=En(i,r),a=jl(t,e,8,"ng-container",s);return null!==s&&kc(a,s,!0),ec(t,n,a,En(i,o)),null!==t.queries&&t.queries.elementStart(t,a),a}(i,o,r,t,n):o.data[i];Ln(s,!0),ngDevMode&&ngDevMode.rendererCreateComment++;const a=r[i]=r[11].createComment(ngDevMode?"ng-container":"");return ba(o,r,a,s),_s(a,r),Vt(s)&&(Ul(o,r,s),Bl(o,s,r)),null!=n&&ql(r,s),$d}function Fd(){let e=Vn();const t=jn();return Hn()?Bn():(ngDevMode&&qt(e),e=e.parent,Ln(e,!1)),ngDevMode&&xr(e,8),t.firstCreatePass&&(yr(t,e),jt(e)&&t.queries.elementEnd(e)),Fd}function Ld(e,t,n){return $d(e,t,n),Fd(),Ld}function Hd(){return Pn()}function Bd(e){return!!e&&"function"==typeof e.then}function Ud(e){return!!e&&"function"==typeof e.subscribe}Sd.INJECTOR_KEY=hd.get(Kc);const qd=Ud;function zd(e,t,n,r){const o=Pn(),i=jn(),s=Vn();return Qd(i,o,o[11],s,e,t,!!n,r),zd}function Wd(e,t){const n=Vn(),r=Pn(),o=jn();return Qd(o,r,Ec(Xn(o.data),n,r),n,e,t,!1),Wd}function Qd(e,t,n,r,o,i,s,a){const l=Vt(r),c=e.firstCreatePass&&Ic(e),u=t[8],d=xc(t);ngDevMode&&xr(r,15);let f=!0;if(3&r.type||a){const p=_n(r,t),h=a?a(p):p,g=d.length,y=a?e=>a(bn(e[r.index])):r.index;if(mn(n)){let s=null;if(!a&&l&&(s=function(e,t,n,r){const o=e.cleanup;if(null!=o)for(let e=0;e<o.length-1;e+=2){const i=o[e];if(i===n&&o[e+1]===r){const n=t[7],r=o[e+2];return n.length>r?n[r]:null}"string"==typeof i&&(e+=2)}return null}(e,t,o,r.index)),null!==s)(s.__ngLastListenerFn__||s).__ngNextListenerFn__=i,s.__ngLastListenerFn__=i,f=!1;else{i=Kd(r,t,u,i,!1);const e=n.listen(h,o,i);ngDevMode&&ngDevMode.rendererAddEventListener++,d.push(i,e),c&&c.push(o,y,g,g+1)}}else i=Kd(r,t,u,i,!0),h.addEventListener(o,i,s),ngDevMode&&ngDevMode.rendererAddEventListener++,d.push(i),c&&c.push(o,y,g,s)}else i=Kd(r,t,u,i,!1);const p=r.outputs;let h;if(f&&null!==p&&(h=p[o])){const e=h.length;if(e)for(let n=0;n<e;n+=2){const e=h[n];ngDevMode&&Pe(t,e);const s=h[n+1],a=t[e],l=a[s];if(ngDevMode&&!qd(l))throw new Error(`@Output ${s} not initialized in '${a.constructor.name}'.`);const u=l.subscribe(i),f=d.length;d.push(i,u),c&&c.push(o,r.index,f,-(f+1))}}}function Zd(e,t,n,r){try{return un(6,t,n),!1!==n(r)}catch(t){return Tc(e,t),!1}finally{un(7,t,n)}}function Kd(e,t,n,r,o){return function i(s){if(s===Function)return r;const a=2&e.flags?Dn(e.index,t):t;0==(32&t[2])&&vc(a);let l=Zd(t,n,r,s),c=i.__ngNextListenerFn__;for(;c;)l=Zd(t,n,c,s)&&l,c=c.__ngNextListenerFn__;return o&&!1===l&&(s.preventDefault(),s.returnValue=!1),l}}function Gd(e=1){return function(e){return(Sn.lFrame.contextLView=function(e,t){for(;e>0;)ngDevMode&&ke(t[15],"Declaration view should be defined if nesting level is greater than 0."),t=t[15],e--;return t}(e,Sn.lFrame.contextLView))[8]}(e)}function Jd(e,t){let n=null;const r=function(e){const t=e.attrs;if(null!=t){const e=t.indexOf(5);if(0==(1&e))return t[e+1]}return null}(e);for(let o=0;o<t.length;o++){const i=t[o];if("*"!==i){if(null===r?Va(e,i,!0):$a(r,i))return o}else n=o}return n}function Yd(e){const t=Pn()[16][6];if(!t.projection){const n=e?e.length:1,r=t.projection=Eo(n,null),o=r.slice();let i=t.child;for(;null!==i;){const t=e?Jd(i,e):0;null!==t&&(o[t]?o[t].projectionNext=i:r[t]=i,o[t]=i),i=i.next}}}function Xd(e,t=0,n){const r=Pn(),o=jn(),i=jl(o,St+e,16,null,n||null);null===i.projection&&(i.projection=t),Bn(),64!=(64&i.flags)&&function(e,t,n){Ia(t[11],0,t,n,la(e,n,t),ha(n.parent||t[6],n,t))}(o,r,i)}function ef(e,t,n){return tf(e,"",t,"",n),ef}function tf(e,t,n,r,o){const i=Pn(),s=Fu(i,t,n,r);if(s!==Ha){const n=jn(),a=fr();Gl(n,a,i,e,s,i[11],o,!1),ngDevMode&&Mc(n.data,a,e,Wn()-1,t,r)}return tf}function nf(e,t,n,r,o,i,s){const a=Pn(),l=Lu(a,t,n,r,o,i);if(l!==Ha){const n=jn(),o=fr();Gl(n,o,a,e,l,a[11],s,!1),ngDevMode&&Mc(n.data,o,e,Wn()-2,t,r,i)}return nf}function rf(e,t,n,r,o,i,s,a,l){const c=Pn(),u=Hu(c,t,n,r,o,i,s,a);if(u!==Ha){const n=jn(),o=fr();Gl(n,o,c,e,u,c[11],l,!1),ngDevMode&&Mc(n.data,o,e,Wn()-3,t,r,i,a)}return rf}function of(e,t,n,r,o,i,s,a,l,c,u){const d=Pn(),f=Bu(d,t,n,r,o,i,s,a,l,c);if(f!==Ha){const n=jn(),o=fr();Gl(n,o,d,e,f,d[11],u,!1),ngDevMode&&Mc(n.data,o,e,Wn()-4,t,r,i,a,c)}return of}function sf(e,t,n,r,o,i,s,a,l,c,u,d,f){const p=Pn(),h=Uu(p,t,n,r,o,i,s,a,l,c,u,d);if(h!==Ha){const n=jn(),o=fr();Gl(n,o,p,e,h,p[11],f,!1),ngDevMode&&Mc(n.data,o,e,Wn()-5,t,r,i,a,c,d)}return sf}function af(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h){const g=Pn(),y=qu(g,t,n,r,o,i,s,a,l,c,u,d,f,p);if(y!==Ha){const n=jn(),o=fr();Gl(n,o,g,e,y,g[11],h,!1),ngDevMode&&Mc(n.data,o,e,Wn()-6,t,r,i,a,c,d,p)}return af}function lf(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y){const m=Pn(),v=zu(m,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g);if(v!==Ha){const n=jn(),o=fr();Gl(n,o,m,e,v,m[11],y,!1),ngDevMode&&Mc(n.data,o,e,Wn()-7,t,r,i,a,c,d,p,g)}return lf}function cf(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m,v){const b=Pn(),w=Wu(b,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m);if(w!==Ha){const n=jn(),o=fr();Gl(n,o,b,e,w,b[11],v,!1),ngDevMode&&Mc(n.data,o,e,Wn()-8,t,r,i,a,c,d,p,g,m)}return cf}function uf(e,t,n){const r=Pn(),o=$u(r,t);if(o!==Ha){const i=jn(),s=fr();if(Gl(i,s,r,e,o,r[11],n,!1),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Mc(i.data,s,e,Wn()-n.length+1,...n)}}return uf}function df(e,t,n,r,o){const i=e[n+1],s=null===t;let a=r?Wa(i):Ka(i),l=!1;for(;0!==a&&(!1===l||s);){ngDevMode&&Pe(e,a);const n=e[a],o=e[a+1];ff(n,t)&&(l=!0,e[a+1]=r?Ya(o):Za(o)),a=r?Wa(o):Ka(o)}l&&(e[n+1]=r?Za(i):Ya(i))}function ff(e,t){return ngDevMode&&De(Array.isArray(t),!0,"Expected that 'tStylingKey' has been unwrapped"),null===e||null==t||(Array.isArray(e)?e[1]:e)===t||!(!Array.isArray(e)||"string"!=typeof t)&&So(e,t)>=0}const pf={textEnd:0,key:0,keyEnd:0,value:0,valueEnd:0};function hf(e){return e.substring(pf.key,pf.keyEnd)}function gf(e){return e.substring(pf.value,pf.valueEnd)}function yf(e,t){const n=pf.textEnd;return n===t?-1:(t=pf.keyEnd=function(e,t,n){for(;t<n&&e.charCodeAt(t)>32;)t++;return t}(e,pf.key=t,n),bf(e,t,n))}function mf(e,t){const n=pf.textEnd;let r=pf.key=bf(e,t,n);return n===r?-1:(r=pf.keyEnd=function(e,t,n){let r;for(;t<n&&(45===(r=e.charCodeAt(t))||95===r||(-33&r)>=65&&(-33&r)<=90||r>=48&&r<=57);)t++;return t}(e,r,n),r=wf(e,r,n,58),r=pf.value=bf(e,r,n),r=pf.valueEnd=function(e,t,n){let r=-1,o=-1,i=-1,s=t,a=s;for(;s<n;){const l=e.charCodeAt(s++);if(59===l)return a;34===l||39===l?a=s=_f(e,l,s,n):t===s-4&&85===i&&82===o&&76===r&&40===l?a=s=_f(e,41,s,n):l>32&&(a=s),i=o,o=r,r=-33&l}return a}(e,r,n),wf(e,r,n,59))}function vf(e){pf.key=0,pf.keyEnd=0,pf.value=0,pf.valueEnd=0,pf.textEnd=e.length}function bf(e,t,n){for(;t<n&&e.charCodeAt(t)<=32;)t++;return t}function wf(e,t,n,r){return(t=bf(e,t,n))<n&&(ngDevMode&&e.charCodeAt(t)!==r&&Cf(e,String.fromCharCode(r),t),t++),t}function _f(e,t,n,r){let o=-1,i=n;for(;i<r;){const n=e.charCodeAt(i++);if(n==t&&92!==o)return i;o=92==n&&92===o?0:n}throw ngDevMode?Cf(e,String.fromCharCode(t),r):new Error}function Cf(e,t,n){throw ngDevMode&&Me("string"==typeof e,!0,"String expected here"),Ae(`Malformed style at location ${n} in string '`+e.substring(0,n)+"[>>"+e.substring(n,n+1)+"<<]"+e.substr(n+1)+`'. Expecting '${t}'.`)}function Mf(e,t,n){return Of(e,t,n,!1),Mf}function Df(e,t){return Of(e,t,null,!0),Df}function xf(e){Sf(jf,If,e,!1)}function If(e,t){for(let n=function(e){return vf(e),mf(e,bf(e,0,pf.textEnd))}(t);n>=0;n=mf(t,n))jf(e,hf(t),gf(t))}function Ef(e){Sf(To,Tf,e,!0)}function Tf(e,t){for(let n=function(e){return vf(e),yf(e,bf(e,0,pf.textEnd))}(t);n>=0;n=yf(t,n))To(e,hf(t),!0)}function Of(e,t,n,r){const o=Pn(),i=jn(),s=Kn(2);i.firstUpdatePass&&Af(i,e,s,r),t!==Ha&&Nu(o,s,t)&&Rf(i,i.data[ur()],o,o[11],e,o[s+1]=function(e,t){return null==e||("string"==typeof t?e+=t:"object"==typeof e&&(e=ae(xi(e)))),e}(t,n),r,s)}function Sf(e,t,n,r){const o=jn(),i=Kn(2);o.firstUpdatePass&&Af(o,null,i,r);const s=Pn();if(n!==Ha&&Nu(s,i,n)){const a=o.data[ur()];if(Ff(a,r)&&!kf(o,i)){if(ngDevMode){const e=o.data[i];Me(Array.isArray(e)?e[1]:e,!1,"Styling linked list shadow input should be marked as 'false'")}let e=r?a.classesWithoutHost:a.stylesWithoutHost;ngDevMode&&!1===r&&null!==e&&Me(e.endsWith(";"),!0,"Expecting static portion to end with ';'"),null!==e&&(n=le(e,n||"")),Pd(o,a,s,n,r)}else!function(e,t,n,r,o,i,s,a){o===Ha&&(o=lt);let l=0,c=0,u=0<o.length?o[0]:null,d=0<i.length?i[0]:null;for(;null!==u||null!==d;){ngDevMode&&Ee(l,999,"Are we stuck in infinite loop?"),ngDevMode&&Ee(c,999,"Are we stuck in infinite loop?");const f=l<o.length?o[l+1]:void 0,p=c<i.length?i[c+1]:void 0;let h,g=null;u===d?(l+=2,c+=2,f!==p&&(g=d,h=p)):null===d||null!==u&&u<d?(l+=2,g=u):(ngDevMode&&ke(d,"Expecting to have a valid key"),c+=2,g=d,h=p),null!==g&&Rf(e,t,n,r,g,h,s,a),u=l<o.length?o[l]:null,d=c<i.length?i[c]:null}}(o,a,s,s[11],s[i+1],s[i+1]=function(e,t,n){if(null==n||""===n)return lt;const r=[],o=xi(n);if(Array.isArray(o))for(let t=0;t<o.length;t++)e(r,o[t],!0);else if("object"==typeof o)for(const t in o)o.hasOwnProperty(t)&&e(r,t,o[t]);else"string"==typeof o?t(r,o):ngDevMode&&Ae("Unsupported styling type "+typeof o+": "+o);return r}(e,t,n),r,i)}}function kf(e,t){return t>=e.expandoStartIndex}function Af(e,t,n,r){ngDevMode&&Kt(e);const o=e.data;if(null===o[n+1]){const i=o[ur()];ngDevMode&&ke(i,"TNode expected");const s=kf(e,n);Ff(i,r)&&null===t&&!s&&(t=!1),t=function(e,t,n,r){const o=Xn(e);let i=r?t.residualClasses:t.residualStyles;if(null===o)0===(r?t.classBindings:t.styleBindings)&&(n=Pf(n=Nf(null,e,t,n,r),t.attrs,r),i=null);else{const s=t.directiveStylingLast;if(-1===s||e[s]!==o)if(n=Nf(o,e,t,n,r),null===i){let n=function(e,t,n){const r=n?t.classBindings:t.styleBindings;if(0!==Ka(r))return e[Wa(r)]}(e,t,r);void 0!==n&&Array.isArray(n)&&(n=Nf(null,e,t,n[1],r),n=Pf(n,t.attrs,r),function(e,t,n,r){const o=n?t.classBindings:t.styleBindings;ngDevMode&&De(Ka(o),0,"Expecting to have at least one template styling binding."),e[Wa(o)]=r}(e,t,r,n))}else i=function(e,t,n){let r;const o=t.directiveEnd;ngDevMode&&De(t.directiveStylingLast,-1,"By the time this function gets called at least one hostBindings-node styling instruction must have executed.");for(let i=1+t.directiveStylingLast;i<o;i++)r=Pf(r,e[i].hostAttrs,n);return Pf(r,t.attrs,n)}(e,t,r)}return void 0!==i&&(r?t.residualClasses=i:t.residualStyles=i),n}(o,i,t,r),function(e,t,n,r,o,i){ngDevMode&&Kt(jn());let s=i?t.classBindings:t.styleBindings,a=Wa(s),l=Ka(s);e[r]=n;let c,u=!1;if(Array.isArray(n)){const e=n;c=e[1],(null===c||So(e,c)>0)&&(u=!0)}else c=n;if(o)if(0!==l){const t=Wa(e[a+1]);e[r+1]=za(t,a),0!==t&&(e[t+1]=Ga(e[t+1],r)),e[a+1]=(d=e[a+1],f=r,ngDevMode&&we(d,"expected number"),ngDevMode&&_e(f,0,32767),131071&d|f<<17)}else e[r+1]=za(a,0),0!==a&&(e[a+1]=Ga(e[a+1],r)),a=r;else e[r+1]=za(l,0),ngDevMode&&Me(0!==a&&0===l,!1,"Adding template bindings after hostBindings is not allowed."),0===a?a=r:e[l+1]=Ga(e[l+1],r),l=r;var d,f;u&&(e[r+1]=Za(e[r+1])),df(e,c,r,!0),df(e,c,r,!1),function(e,t,n,r,o){const i=o?e.residualClasses:e.residualStyles;null!=i&&"string"==typeof t&&So(i,t)>=0&&(n[r+1]=Ya(n[r+1]))}(t,c,e,r,i),s=za(a,l),i?t.classBindings=s:t.styleBindings=s}(o,i,t,n,s,r)}}function Nf(e,t,n,r,o){let i=null;const s=n.directiveEnd;let a=n.directiveStylingLast;for(-1===a?a=n.directiveStart:a++;a<s&&(i=t[a],ngDevMode&&ke(i,"expected to be defined"),r=Pf(r,i.hostAttrs,o),i!==e);)a++;return null!==e&&(n.directiveStylingLast=a),r}function Pf(e,t,n){const r=n?1:2;let o=-1;if(null!==t)for(let i=0;i<t.length;i++){const s=t[i];"number"==typeof s?o=s:o===r&&(Array.isArray(e)||(e=void 0===e?[]:["",e]),To(e,s,!!n||t[++i]))}return void 0===e?null:e}function jf(e,t,n){To(e,t,xi(n))}function Rf(e,t,n,r,o,i,s,a){if(!(3&t.type))return;const l=e.data,c=l[a+1];$f(Ja(c)?Vf(l,t,n,o,Ka(c),s):void 0)||($f(i)||Qa(c)&&(i=Vf(l,null,n,o,a,s)),function(e,t,n,r,o){const i=mn(e);if(t)o?(ngDevMode&&ngDevMode.rendererAddClass++,i?e.addClass(n,r):(ngDevMode&&ke(n.classList,"HTMLElement expected"),n.classList.add(r))):(ngDevMode&&ngDevMode.rendererRemoveClass++,i?e.removeClass(n,r):n.classList.remove(r));else{let t=-1===r.indexOf("-")?void 0:zs.DashCase;if(null==o)ngDevMode&&ngDevMode.rendererRemoveStyle++,i?e.removeStyle(n,r,t):n.style.removeProperty(r);else{const s="string"==typeof o&&o.endsWith("!important");s&&(o=o.slice(0,-10),t|=zs.Important),ngDevMode&&ngDevMode.rendererSetStyle++,i?e.setStyle(n,r,o,t):(ngDevMode&&ke(n.style,"HTMLElement expected"),n.style.setProperty(r,o,s?"important":""))}}}(r,s,wn(ur(),n),o,i))}function Vf(e,t,n,r,o,i){const s=null===t;let a;for(;o>0;){const t=e[o],i=Array.isArray(t),l=i?t[1]:t,c=null===l;let u=n[o+1];u===Ha&&(u=c?lt:void 0);let d=c?Oo(u,r):l===r?u:void 0;if(i&&!$f(d)&&(d=Oo(t,r)),$f(d)&&(a=d,s))return a;const f=e[o+1];o=s?Wa(f):Ka(f)}if(null!==t){let e=i?t.residualClasses:t.residualStyles;null!=e&&(a=Oo(e,r))}return a}function $f(e){return void 0!==e}function Ff(e,t){return 0!=(e.flags&(t?16:32))}function Lf(e,t=""){const n=Pn(),r=jn(),o=e+St;ngDevMode&&Me(Wn(),r.bindingStartIndex,"text nodes should be created before any bindings"),ngDevMode&&Pe(n,o);const i=r.firstCreatePass?jl(r,o,1,t,null):r.data[o],s=n[o]=ea(n[11],t);ba(r,n,s,i),Ln(i,!1)}function Hf(e){return Bf("",e,""),Hf}function Bf(e,t,n){const r=Pn(),o=Fu(r,e,t,n);return o!==Ha&&Sc(r,ur(),o),Bf}function Uf(e,t,n,r,o){const i=Pn(),s=Lu(i,e,t,n,r,o);return s!==Ha&&Sc(i,ur(),s),Uf}function qf(e,t,n,r,o,i,s){const a=Pn(),l=Hu(a,e,t,n,r,o,i,s);return l!==Ha&&Sc(a,ur(),l),qf}function zf(e,t,n,r,o,i,s,a,l){const c=Pn(),u=Bu(c,e,t,n,r,o,i,s,a,l);return u!==Ha&&Sc(c,ur(),u),zf}function Wf(e,t,n,r,o,i,s,a,l,c,u){const d=Pn(),f=Uu(d,e,t,n,r,o,i,s,a,l,c,u);return f!==Ha&&Sc(d,ur(),f),Wf}function Qf(e,t,n,r,o,i,s,a,l,c,u,d,f){const p=Pn(),h=qu(p,e,t,n,r,o,i,s,a,l,c,u,d,f);return h!==Ha&&Sc(p,ur(),h),Qf}function Zf(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h){const g=Pn(),y=zu(g,e,t,n,r,o,i,s,a,l,c,u,d,f,p,h);return y!==Ha&&Sc(g,ur(),y),Zf}function Kf(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y){const m=Pn(),v=Wu(m,e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y);return v!==Ha&&Sc(m,ur(),v),Kf}function Gf(e){const t=Pn(),n=$u(t,e);return n!==Ha&&Sc(t,ur(),n),Gf}function Jf(e,t,n){Sf(To,Tf,Fu(Pn(),e,t,n),!0)}function Yf(e,t,n,r,o){Sf(To,Tf,Lu(Pn(),e,t,n,r,o),!0)}function Xf(e,t,n,r,o,i,s){Sf(To,Tf,Hu(Pn(),e,t,n,r,o,i,s),!0)}function ep(e,t,n,r,o,i,s,a,l){Sf(To,Tf,Bu(Pn(),e,t,n,r,o,i,s,a,l),!0)}function tp(e,t,n,r,o,i,s,a,l,c,u){Sf(To,Tf,Uu(Pn(),e,t,n,r,o,i,s,a,l,c,u),!0)}function np(e,t,n,r,o,i,s,a,l,c,u,d,f){Sf(To,Tf,qu(Pn(),e,t,n,r,o,i,s,a,l,c,u,d,f),!0)}function rp(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h){Sf(To,Tf,zu(Pn(),e,t,n,r,o,i,s,a,l,c,u,d,f,p,h),!0)}function op(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y){Sf(To,Tf,Wu(Pn(),e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y),!0)}function ip(e){Sf(To,Tf,$u(Pn(),e),!0)}function sp(e,t,n){xf(Fu(Pn(),e,t,n))}function ap(e,t,n,r,o){xf(Lu(Pn(),e,t,n,r,o))}function lp(e,t,n,r,o,i,s){xf(Hu(Pn(),e,t,n,r,o,i,s))}function cp(e,t,n,r,o,i,s,a,l){xf(Bu(Pn(),e,t,n,r,o,i,s,a,l))}function up(e,t,n,r,o,i,s,a,l,c,u){xf(Uu(Pn(),e,t,n,r,o,i,s,a,l,c,u))}function dp(e,t,n,r,o,i,s,a,l,c,u,d,f){xf(qu(Pn(),e,t,n,r,o,i,s,a,l,c,u,d,f))}function fp(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h){xf(zu(Pn(),e,t,n,r,o,i,s,a,l,c,u,d,f,p,h))}function pp(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y){xf(Wu(Pn(),e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y))}function hp(e){xf($u(Pn(),e))}function gp(e,t,n,r,o){return Of(e,Fu(Pn(),t,n,r),o,!1),gp}function yp(e,t,n,r,o,i,s){return Of(e,Lu(Pn(),t,n,r,o,i),s,!1),yp}function mp(e,t,n,r,o,i,s,a,l){return Of(e,Hu(Pn(),t,n,r,o,i,s,a),l,!1),mp}function vp(e,t,n,r,o,i,s,a,l,c,u){return Of(e,Bu(Pn(),t,n,r,o,i,s,a,l,c),u,!1),vp}function bp(e,t,n,r,o,i,s,a,l,c,u,d,f){return Of(e,Uu(Pn(),t,n,r,o,i,s,a,l,c,u,d),f,!1),bp}function wp(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h){return Of(e,qu(Pn(),t,n,r,o,i,s,a,l,c,u,d,f,p),h,!1),wp}function _p(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y){return Of(e,zu(Pn(),t,n,r,o,i,s,a,l,c,u,d,f,p,h,g),y,!1),_p}function Cp(e,t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m,v){return Of(e,Wu(Pn(),t,n,r,o,i,s,a,l,c,u,d,f,p,h,g,y,m),v,!1),Cp}function Mp(e,t,n){return Of(e,$u(Pn(),t),n,!1),Mp}function Dp(e,t,n){const r=Pn(),o=Zn();if(Nu(r,o,t)){const i=jn(),s=fr();Gl(i,s,r,e,t,r[11],n,!0),ngDevMode&&Mc(i.data,s,e,o)}return Dp}function xp(e,t,n){const r=Pn(),o=Zn();if(Nu(r,o,t)){const i=jn(),s=fr();Gl(i,s,r,e,t,Ec(Xn(i.data),s,r),n,!0),ngDevMode&&Mc(i.data,s,e,o)}return xp}"undefined"==typeof ngI18nClosureMode&&(it.ngI18nClosureMode="undefined"!=typeof goog&&"function"==typeof goog.getMsg);const Ip=void 0;var Ep=["en",[["a","p"],["AM","PM"],Ip],[["AM","PM"],Ip,Ip],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],Ip,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],Ip,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",Ip,"{1} 'at' {0}",Ip],[".",",",";","%","+","-","E","×","‰","∞","NaN",":"],["#,##0.###","#,##0%","¤#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(e){const t=Math.floor(Math.abs(e)),n=e.toString().replace(/^[^.]*\.?/,"").length;return 1===t&&0===n?1:5}];let Tp={};function Op(e,t,n){"string"!=typeof t&&(n=t,t=e[jp.LocaleId]),t=t.toLowerCase().replace(/_/g,"-"),Tp[t]=e,n&&(Tp[t][jp.ExtraData]=n)}function Sp(e){const t=function(e){return e.toLowerCase().replace(/_/g,"-")}(e);let n=Np(t);if(n)return n;const r=t.split("-")[0];if(n=Np(r),n)return n;if("en"===r)return Ep;throw new Error(`Missing locale data for the locale "${e}".`)}function kp(e){return Sp(e)[jp.CurrencyCode]||null}function Ap(e){return Sp(e)[jp.PluralCase]}function Np(e){return e in Tp||(Tp[e]=it.ng&&it.ng.common&&it.ng.common.locales&&it.ng.common.locales[e]),Tp[e]}function Pp(){Tp={}}var jp;!function(e){e[e.LocaleId=0]="LocaleId",e[e.DayPeriodsFormat=1]="DayPeriodsFormat",e[e.DayPeriodsStandalone=2]="DayPeriodsStandalone",e[e.DaysFormat=3]="DaysFormat",e[e.DaysStandalone=4]="DaysStandalone",e[e.MonthsFormat=5]="MonthsFormat",e[e.MonthsStandalone=6]="MonthsStandalone",e[e.Eras=7]="Eras",e[e.FirstDayOfWeek=8]="FirstDayOfWeek",e[e.WeekendRange=9]="WeekendRange",e[e.DateFormat=10]="DateFormat",e[e.TimeFormat=11]="TimeFormat",e[e.DateTimeFormat=12]="DateTimeFormat",e[e.NumberSymbols=13]="NumberSymbols",e[e.NumberFormats=14]="NumberFormats",e[e.CurrencyCode=15]="CurrencyCode",e[e.CurrencySymbol=16]="CurrencySymbol",e[e.CurrencyName=17]="CurrencyName",e[e.Currencies=18]="Currencies",e[e.Directionality=19]="Directionality",e[e.PluralCase=20]="PluralCase",e[e.ExtraData=21]="ExtraData"}(jp||(jp={}));const Rp=["zero","one","two","few","many"],Vp="en-US",$p={marker:"element"},Fp={marker:"ICU"};var Lp;!function(e){e[e.SHIFT=2]="SHIFT",e[e.APPEND_EAGERLY=1]="APPEND_EAGERLY",e[e.COMMENT=2]="COMMENT"}(Lp||(Lp={}));let Hp=Vp;function Bp(e){ke(e,"Expected localeId to be defined"),"string"==typeof e&&(Hp=e.toLowerCase().replace(/_/g,"-"))}function Up(e,t,n){const r=t.insertBeforeIndex,o=Array.isArray(r)?r[0]:r;return null===o?ga(e,0,n):(ngDevMode&&Pe(n,o),bn(n[o]))}function qp(e,t,n,r,o){const i=t.insertBeforeIndex;if(Array.isArray(i)){ngDevMode&&Ne(r);let s=r,a=null;if(3&t.type||(a=s,s=o),null!==s&&0==(2&t.flags))for(let t=1;t<i.length;t++)ua(e,s,n[i[t]],a,!1)}}function zp(e,t){if(ngDevMode&&Me(t.insertBeforeIndex,null,"We expect that insertBeforeIndex is not set"),e.push(t),e.length>1)for(let n=e.length-2;n>=0;n--){const r=e[n];Wp(r)||Qp(r,t)&&null===Zp(r)&&Kp(r,t.index)}}function Wp(e){return!(64&e.type)}function Qp(e,t){return Wp(t)||e.index>t.index}function Zp(e){const t=e.insertBeforeIndex;return Array.isArray(t)?t[0]:t}function Kp(e,t){const n=e.insertBeforeIndex;Array.isArray(n)?n[0]=t:(va(Up,qp),e.insertBeforeIndex=t)}function Gp(e,t){const n=e.data[t];if(null===n||"string"==typeof n)return null;!ngDevMode||n.hasOwnProperty("tViews")||n.hasOwnProperty("currentCaseLViewIndex")||Ae("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: "+n);const r=n.hasOwnProperty("currentCaseLViewIndex")?n:n.value;return ngDevMode&&Bt(r),r}function Jp(e,t,n){const r=Rl(e,n,64,null,null);return zp(t,r),r}function Yp(e,t){const n=t[e.currentCaseLViewIndex];return null===n?n:n<0?~n:n}function Xp(e){return e>>>17}function eh(e){return(131070&e)>>>1}function th(e){return 1&e}let nh=0,rh=0;function oh(e,t,n,r){ngDevMode&&Ne(r);const o=n[11];let i,s=null;for(let a=0;a<t.length;a++){const l=t[a];if("string"==typeof l){const e=t[++a];null===n[e]&&(ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&Pe(n,e),n[e]=ea(o,l))}else if("number"==typeof l)switch(1&l){case 0:const c=Xp(l);let u,d;if(null===s&&(s=c,i=pa(o,r)),c===s?(u=r,d=i):(u=null,d=bn(n[c])),null!==d){ngDevMode&&Ne(d);const t=eh(l);ngDevMode&&Oe(t,St,"Missing ref");const r=n[t];ngDevMode&&Ne(r),ua(o,d,r,u,!1);const i=Gp(e,t);if(null!==i&&"object"==typeof i){ngDevMode&&Bt(i);const t=Yp(i,n);null!==t&&oh(e,i.create[t],n,n[i.anchorIdx])}}break;case 1:const f=l>>>1,p=t[++a],h=t[++a];cc(o,wn(f,n),null,null,p,h,null);break;default:if(ngDevMode)throw new pe(700,`Unable to determine the type of mutate operation for "${l}"`)}else switch(l){case Fp:const e=t[++a],r=t[++a];null===n[r]&&(ngDevMode&&Me(typeof e,"string",`Expected "${e}" to be a comment node value`),ngDevMode&&ngDevMode.rendererCreateComment++,ngDevMode&&Gt(n,r),_s(n[r]=na(o,e),n));break;case $p:const i=t[++a],s=t[++a];null===n[s]&&(ngDevMode&&Me(typeof i,"string",`Expected "${i}" to be an element node tag name`),ngDevMode&&ngDevMode.rendererCreateElement++,ngDevMode&&Gt(n,s),_s(n[s]=ra(o,i,null),n));break;default:ngDevMode&&Ae(`Unable to determine the type of mutate operation for "${l}"`)}}}function ih(e,t,n,r,o){for(let i=0;i<n.length;i++){const s=n[i],a=n[++i];if(s&o){let o="";for(let s=i+1;s<=i+a;s++){const i=n[s];if("string"==typeof i)o+=i;else if("number"==typeof i)if(i<0)o+=ge(t[r-i]);else{const a=i>>>2;switch(3&i){case 1:const i=n[++s],l=n[++s],c=e.data[a];ngDevMode&&ke(c,"Experting TNode or string"),"string"==typeof c?cc(t[11],t[a],null,c,i,o,l):Gl(e,c,t,i,o,t[11],l,!1);break;case 0:const u=t[a];null!==u&&ta(t[11],u,o);break;case 2:ah(e,Gp(e,a),t,o);break;case 3:sh(e,Gp(e,a),r,t)}}}}else{const o=n[i+1];if(o>0&&3==(3&o)){const n=Gp(e,o>>>2);t[n.currentCaseLViewIndex]<0&&sh(e,n,r,t)}}i+=a}}function sh(e,t,n,r){ngDevMode&&Pe(r,t.currentCaseLViewIndex);let o=r[t.currentCaseLViewIndex];if(null!==o){let i=nh;o<0&&(o=r[t.currentCaseLViewIndex]=~o,i=-1),ih(e,r,t.update[o],n,i)}}function ah(e,t,n,r){const o=function(e,t){let n=e.cases.indexOf(t);if(-1===n)switch(e.type){case 1:{const r=function(e,t){const n=Ap(t)(parseInt(e,10)),r=Rp[n];return void 0!==r?r:"other"}(t,Hp);n=e.cases.indexOf(r),-1===n&&"other"!==r&&(n=e.cases.indexOf("other"));break}case 0:n=e.cases.indexOf("other")}return-1===n?null:n}(t,r);if(Yp(t,n)!==o&&(lh(e,t,n),n[t.currentCaseLViewIndex]=null===o?null:~o,null!==o)){const r=n[t.anchorIdx];r&&(ngDevMode&&Ne(r),oh(e,t.create[o],n,r))}}function lh(e,t,n){let r=Yp(t,n);if(null!==r){const o=t.remove[r];for(let t=0;t<o.length;t++){const r=o[t];if(r>0){const e=wn(r,n);null!==e&&Ma(n[11],e)}else lh(e,Gp(e,~r),n)}}}function ch(){const e=[];let t,n,r=-1;function o(e,t){r=0;const o=Yp(e,t);null!==o?(ngDevMode&&_e(o,0,e.cases.length-1),n=e.remove[o]):n=lt}function i(){if(r<n.length){const s=n[r++];if(ngDevMode&&we(s,"Expecting OpCode number"),s>0){const e=t[s];return ngDevMode&&Ne(e),e}{e.push(r,n);const a=~s,l=t[1].data[a];return ngDevMode&&Bt(l),o(l,t),i()}}return 0===e.length?null:(n=e.pop(),r=e.pop(),i())}return function(n,r){for(t=r;e.length;)e.pop();return ngDevMode&&Ft(n,r),o(n.value,r),i}}function uh(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const r=t[e++],o=t[e],i=(r&Lp.COMMENT)===Lp.COMMENT,s=(r&Lp.APPEND_EAGERLY)===Lp.APPEND_EAGERLY,a=r>>>Lp.SHIFT;n.push(`lView[${a}] = document.${i?"createComment":"createText"}(${JSON.stringify(o)});`),s&&n.push(`parent.appendChild(lView[${a}]);`)}return n}function dh(e){const t=new hh(e||(Array.isArray(this)?this:[]));let n=[];function r(e){const n=e>>>2;switch(3&e){case 0:return`(lView[${n}] as Text).textContent = $$$`;case 1:const e=t.consumeString(),r=t.consumeFunction();return`(lView[${n}] as Element).setAttribute('${e}', ${r?`(${r})($$$)`:"$$$"})`;case 2:return`icuSwitchCase(${n}, $$$)`;case 3:return`icuUpdateCase(${n})`}throw new Error("unexpected OpCode")}for(;t.hasMore();){let e=t.consumeNumber(),o=t.consumeNumber();const i=t.i+o,s=[];let a="";for(;t.i<i;){let e=t.consumeNumberOrString();if("string"==typeof e)a+=e;else if(e<0)a+="${lView[i"+e+"]}";else{const t=r(e);s.push(t.replace("$$$","`"+a+"`")+";"),a=""}}n.push(`if (mask & 0b${e.toString(2)}) { ${s.join(" ")} }`)}return n}function fh(e){const t=new hh(e||(Array.isArray(this)?this:[]));let n=[];function r(e){const n=Xp(e),r=eh(e);switch(th(e)){case 0:return`(lView[${n}] as Element).appendChild(lView[${o}])`;case 1:return`(lView[${r}] as Element).setAttribute("${t.consumeString()}", "${t.consumeString()}")`}throw new Error("Unexpected OpCode: "+th(e))}let o=-1;for(;t.hasMore();){let e=t.consumeNumberStringOrMarker();if(e===Fp){const e=t.consumeString();o=t.consumeNumber(),n.push(`lView[${o}] = document.createComment("${e}")`)}else if(e===$p){const e=t.consumeString();o=t.consumeNumber(),n.push(`lView[${o}] = document.createElement("${e}")`)}else if("string"==typeof e)o=t.consumeNumber(),n.push(`lView[${o}] = document.createTextNode("${e}")`);else{if("number"!=typeof e)throw new Error("Unexpected value");{const t=r(e);t&&n.push(t)}}}return n}function ph(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const r=t[e];r>0?n.push(`remove(lView[${r}])`):n.push(`removeNestedICU(${~r})`)}return n}class hh{constructor(e){this.i=0,this.codes=e}hasMore(){return this.i<this.codes.length}consumeNumber(){let e=this.codes[this.i++];return we(e,"expecting number in OpCode"),e}consumeString(){let e=this.codes[this.i++];return Ce(e,"expecting string in OpCode"),e}consumeFunction(){let e=this.codes[this.i++];if(null===e||"function"==typeof e)return e;throw new Error("expecting function in OpCode")}consumeNumberOrString(){let e=this.codes[this.i++];return"string"==typeof e||we(e,"expecting number or string in OpCode"),e}consumeNumberStringOrMarker(){let e=this.codes[this.i++];return"string"==typeof e||"number"==typeof e||e==Fp||e==$p||we(e,"expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode"),e}}const gh=/�(\d+):?\d*�/gi,yh=/({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi,mh=/�(\d+)�/,vh=/^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/,bh=/�\/?\*(\d+:\d+)�/gi,wh=/�(\/?[#*]\d+):?\d*�/gi,_h=/\uE500/g;function Ch(e,t,n,r,o,i,s){const a=Vl(e,r,1,null);let l=a<<Lp.SHIFT,c=Fn();t===c&&(c=null),null===c&&(l|=Lp.APPEND_EAGERLY),s&&(l|=Lp.COMMENT,void 0===Ws&&(Ws=ch())),o.push(l,null===i?"":i);const u=Rl(e,a,s?32:1,null===i?ngDevMode?"{{?}}":"":i,null);zp(n,u);const d=u.index;return Ln(u,!1),null!==c&&t!==c&&function(e,t){ngDevMode&&Ht(e);let n=e.insertBeforeIndex;null===n?(va(Up,qp),n=e.insertBeforeIndex=[null,t]):(Me(Array.isArray(n),!0,"Expecting array here"),n.push(t))}(c,d),u}function Mh(e,t,n,r,o,i,s){const a=s.match(gh),l=Ch(e,t,n,i,r,a?null:s,!1);a&&Dh(o,s,l.index,null,0,null)}function Dh(e,t,n,r,o,i){ngDevMode&&Se(n,St,"Index must be in absolute LView offset");const s=e.length,a=s+1;e.push(null,null);const l=s+2;ngDevMode&&el(e,dh);const c=t.split(gh);let u=0;for(let t=0;t<c.length;t++){const n=c[t];if(1&t){const t=o+parseInt(n,10);e.push(-1-t),u|=Ih(t)}else""!==n&&e.push(n)}return e.push(n<<2|(r?1:0)),r&&e.push(r,i),e[s]=u,e[a]=e.length-l,u}function xh(e){let t=0;for(let n=0;n<e.length;n++){const r=e[n];"number"==typeof r&&r<0&&t++}return t}function Ih(e){return 1<<Math.min(e,31)}function Eh(e){let t,n,r="",o=0,i=!1;for(;null!==(t=bh.exec(e));)i?t[0]===`�/*${n}�`&&(o=t.index,i=!1):(r+=e.substring(o,t.index+t[0].length),n=t[1],i=!0);return ngDevMode&&Me(i,!1,`Tag mismatch: unable to find the end of the sub-template in the translation "${e}"`),r+=e.substr(o),r}function Th(e,t,n,r,o,i){ngDevMode&&ke(o,"ICU expression must be defined");let s=0;const a={type:o.type,currentCaseLViewIndex:Vl(e,t,1,null),anchorIdx:i,cases:[],create:[],remove:[],update:[]};!function(e,t,n){e.push(Ih(t.mainBinding),2,-1-t.mainBinding,n<<2|2)}(n,o,i),function(e,t,n){const r=e.data[t];ngDevMode&&Me(null===r||r.hasOwnProperty("tViews"),!0,"We expect to get 'null'|'TIcuContainer'"),null===r?e.data[t]=n:(ngDevMode&&xr(r,32),r.value=n)}(e,i,a);const l=o.values;for(let i=0;i<l.length;i++){const c=l[i],u=[];for(let e=0;e<c.length;e++){const t=c[e];if("string"!=typeof t){const n=u.push(t)-1;c[e]=`\x3c!--�${n}�--\x3e`}}s=kh(e,a,t,n,r,o.cases[i],c.join(""),u)|s}s&&function(e,t,n){e.push(t,1,n<<2|3)}(n,s,i)}function Oh(e){const t=[],n=[];let r=1,o=0;const i=Sh(e=e.replace(vh,(function(e,t,n){return r="select"===n?0:1,o=parseInt(t.substr(1),10),""})));for(let e=0;e<i.length;){let o=i[e++].trim();1===r&&(o=o.replace(/\s*(?:=)?(\w+)\s*/,"$1")),o.length&&t.push(o);const s=Sh(i[e++]);t.length>n.length&&n.push(s)}return{type:r,mainBinding:o,cases:t,values:n}}function Sh(e){if(!e)return[];let t=0;const n=[],r=[],o=/[{}]/g;let i;for(o.lastIndex=0;i=o.exec(e);){const o=i.index;if("}"==i[0]){if(n.pop(),0==n.length){const n=e.substring(t,o);vh.test(n)?r.push(Oh(n)):r.push(n),t=o+1}}else{if(0==n.length){const n=e.substring(t,o);r.push(n),t=o+1}n.push("{")}}const s=e.substring(t);return r.push(s),r}function kh(e,t,n,r,o,i,s,a){const l=[],c=[],u=[];ngDevMode&&(el(l,fh),el(c,ph),el(u,dh)),t.cases.push(i),t.create.push(l),t.remove.push(c),t.update.push(u);const d=Ni(gn()).getInertBodyElement(s);ngDevMode&&ke(d,"Unable to generate inert body element");const f=as(d)||d;return f?Ah(e,t,n,r,l,c,u,f,o,a,0):0}function Ah(e,t,n,r,o,i,s,a,l,c,u){let d=0,f=a.firstChild;for(;f;){const a=Vl(e,n,1,null);switch(f.nodeType){case Node.ELEMENT_NODE:const p=f,h=p.tagName.toLowerCase();if(Zi.hasOwnProperty(h)){jh(o,$p,h,l,a),e.data[a]=h;const g=p.attributes;for(let e=0;e<g.length;e++){const t=g.item(e),n=t.name.toLowerCase();t.value.match(gh)?Xi.hasOwnProperty(n)?Ki[n]?Dh(s,t.value,a,t.name,0,$i):Gi[n]?Dh(s,t.value,a,t.name,0,Fi):Dh(s,t.value,a,t.name,0,null):ngDevMode&&console.warn(`WARNING: ignoring unsafe attribute value ${n} on element ${h} (see https://g.co/ng/security#xss)`):Rh(o,a,t)}d=Ah(e,t,n,r,o,i,s,f,a,c,u+1)|d,Nh(i,a,u)}break;case Node.TEXT_NODE:const g=f.textContent||"",y=g.match(gh);jh(o,null,y?"":g,l,a),Nh(i,a,u),y&&(d=Dh(s,g,a,null,0,null)|d);break;case Node.COMMENT_NODE:const m=mh.exec(f.textContent||"");if(m){const t=parseInt(m[1],10),s=c[t];jh(o,Fp,ngDevMode?`nested ICU ${t}`:"",l,a),Th(e,n,r,l,s,a),Ph(i,a,u)}}f=f.nextSibling}return d}function Nh(e,t,n){0===n&&e.push(t)}function Ph(e,t,n){0===n&&(e.push(~t),e.push(t))}function jh(e,t,n,r,o){var i,s;null!==t&&e.push(t),e.push(n,o,(0,i=r,s=o,ngDevMode&&Se(i,0,"Missing parent index"),ngDevMode&&Oe(s,0,"Missing ref index"),0|i<<17|s<<1))}function Rh(e,t,n){e.push(t<<1|1,n.name,n.value)}const Vh=/\[(�.+?�?)\]/,$h=/\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g,Fh=/({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g,Lh=/{([A-Z0-9_]+)}/g,Hh=/�I18N_EXP_(ICU(_\d+)?)�/g,Bh=/\/\*/,Uh=/\d+\:(\d+)/;function qh(e,t,n=-1){const r=jn(),o=Pn(),i=St+e;ngDevMode&&ke(r,"tView should be defined");const s=En(r.consts,t),a=Fn();r.firstCreatePass&&function(e,t,n,r,o,i){const s=Fn(),a=[],l=[],c=[[]];ngDevMode&&(el(a,uh),el(l,dh)),o=function(e,t){if(function(e){return-1===e}(t))return Eh(e);{const n=e.indexOf(`:${t}�`)+2+t.toString().length,r=e.search(new RegExp(`�\\/\\*\\d+:${t}�`));return Eh(e.substring(n,r))}}(o,i);const u=(d=o,d.replace(_h," ")).split(wh);var d;for(let i=0;i<u.length;i++){let d=u[i];if(0==(1&i)){const i=Sh(d);for(let u=0;u<i.length;u++){let d=i[u];if(0==(1&u)){const t=d;ngDevMode&&Ce(t,"Parsed ICU part should be string"),""!==t&&Mh(e,s,c[0],a,l,n,t)}else{const i=d;if("object"!=typeof i)throw new Error(`Unable to parse ICU expression in "${o}" message.`);const u=Ch(e,s,c[0],n,a,ngDevMode?`ICU ${r}:${i.mainBinding}`:"",!0).index;ngDevMode&&Se(u,St,"Index must be in absolute LView offset"),Th(e,n,l,t,i,u)}}}else{const t=47===d.charCodeAt(0),n=d.charCodeAt(t?1:0);ngDevMode&&je(n,42,35);const r=St+Number.parseInt(d.substring(t?2:1));if(t)c.shift(),Ln(Fn(),!1);else{const t=Jp(e,c[0],r);c.unshift([]),Ln(t,!0)}}}e.data[r]={create:a,update:l}}(r,null===a?0:a.index,o,i,s,n);const l=r.data[i],c=ca(r,a===o[6]?null:a,o),u=a&&8&a.type?o[a.index]:null;!function(e,t,n,r){const o=e[11];for(let i=0;i<t.length;i++){const s=t[i++],a=t[i],l=(s&Lp.COMMENT)===Lp.COMMENT,c=(s&Lp.APPEND_EAGERLY)===Lp.APPEND_EAGERLY,u=s>>>Lp.SHIFT;let d=e[u];null===d&&(d=e[u]=l?o.createComment(a):ea(o,a)),c&&null!==n&&ua(o,n,d,r,!1)}}(o,l.create,c,u),Gn(!0)}function zh(){Gn(!1)}function Wh(e,t,n){qh(e,t,n),zh()}function Qh(e,t){const n=jn();ngDevMode&&ke(n,"tView should be defined");const r=En(n.consts,t);!function(e,t,n){const r=Vn().index,o=[];if(ngDevMode&&el(o,dh),e.firstCreatePass&&null===e.data[t]){for(let e=0;e<n.length;e+=2){const t=n[e],i=n[e+1];if(""!==i){if(yh.test(i))throw new Error(`ICU expressions are not supported in attributes. Message: "${i}".`);Dh(o,i,r,t,xh(o),null)}}e.data[t]=o}}(n,e+St,r)}function Zh(e){return Nu(Pn(),Zn(),e)&&(nh|=1<<Math.min(rh,31)),rh++,Zh}function Kh(e){!function(e,t,n){if(rh>0){ngDevMode&&ke(e,"tView should be defined");const r=e.data[n];ih(e,t,Array.isArray(r)?r:r.update,Wn()-rh-1,nh)}nh=0,rh=0}(jn(),Pn(),e+St)}function Gh(e,t={}){return function(e,t={}){let n=e;if(Vh.test(e)){const e={},t=[0];n=n.replace($h,((n,r,o)=>{const i=r||o,s=e[i]||[];if(s.length||(i.split("|").forEach((e=>{const t=e.match(Uh),n=t?parseInt(t[1],10):0,r=Bh.test(e);s.push([n,r,e])})),e[i]=s),!s.length)throw new Error(`i18n postprocess: unmatched placeholder - ${i}`);const a=t[t.length-1];let l=0;for(let e=0;e<s.length;e++)if(s[e][0]===a){l=e;break}const[c,u,d]=s[l];return u?t.pop():a!==c&&t.push(c),s.splice(l,1),d}))}return Object.keys(t).length?(n=n.replace(Fh,((e,n,r,o,i,s)=>t.hasOwnProperty(r)?`${n}${t[r]}${s}`:e)),n=n.replace(Lh,((e,n)=>t.hasOwnProperty(n)?t[n]:e)),n=n.replace(Hh,((e,n)=>{if(t.hasOwnProperty(n)){const r=t[n];if(!r.length)throw new Error(`i18n postprocess: unmatched ICU - ${e} with key: ${n}`);return r.shift()}return e})),n):n}(e,t)}function Jh(e,t,n,r,o){if(e=de(e),Array.isArray(e))for(let i=0;i<e.length;i++)Jh(e[i],t,n,r,o);else{const i=jn(),s=Pn();let a=Zc(e)?e:de(e.provide),l=zc(e);const c=Vn(),u=1048575&c.providerIndexes,d=c.directiveStart,f=c.providerIndexes>>20;if(Zc(e)||!e.multi){const r=new Mr(l,o,kd),p=eg(a,t,o?u:u+f,d);-1===p?(Hr(Vr(c,s),i,a),Yh(i,e,t.length),t.push(a),c.directiveStart++,c.directiveEnd++,o&&(c.providerIndexes+=1048576),n.push(r),s.push(r)):(n[p]=r,s[p]=r)}else{const p=eg(a,t,u+f,d),h=eg(a,t,u,u+f),g=p>=0&&n[p],y=h>=0&&n[h];if(o&&!y||!o&&!g){Hr(Vr(c,s),i,a);const u=function(e,t,n,r,o){const i=new Mr(e,n,kd);return i.multi=[],i.index=t,i.componentProviders=0,Xh(i,o,r&&!n),i}(o?ng:tg,n.length,o,r,l);!o&&y&&(n[h].providerFactory=u),Yh(i,e,t.length,0),t.push(a),c.directiveStart++,c.directiveEnd++,o&&(c.providerIndexes+=1048576),n.push(u),s.push(u)}else Yh(i,e,p>-1?p:h,Xh(n[o?h:p],l,!o&&r));!o&&r&&y&&n[h].componentProviders++}}}function Yh(e,t,n,r){const o=Zc(t),i=!!t.useClass;if(o||i){const s=(i?de(t.useClass):t).prototype.ngOnDestroy;if(s){const i=e.destroyHooks||(e.destroyHooks=[]);if(!o&&t.multi){ngDevMode&&ke(r,"indexInFactory when registering multi factory destroy hook");const e=i.indexOf(n);-1===e?i.push(n,[r,s]):i[e+1].push(r,s)}else i.push(n,s)}}}function Xh(e,t,n){return n&&e.componentProviders++,e.multi.push(t)-1}function eg(e,t,n,r){for(let o=n;o<r;o++)if(t[o]===e)return o;return-1}function tg(e,t,n,r){return rg(this.multi,[])}function ng(e,t,n,r){const o=this.multi;let i;if(this.providerFactory){const e=this.providerFactory.componentProviders,t=Kr(n,n[1],this.providerFactory.index,r);i=t.slice(0,e),rg(o,i);for(let n=e;n<t.length;n++)i.push(t[n])}else i=[],rg(o,i);return i}function rg(e,t){for(let n=0;n<e.length;n++){const r=e[n];t.push(r())}return t}function og(e,t=[]){return n=>{n.providersResolver=(n,r)=>function(e,t,n){const r=jn();if(r.firstCreatePass){const o=$t(e);Jh(n,r.data,r.blueprint,o,!0),Jh(t,r.data,r.blueprint,o,!1)}}(n,r?r(e):e,t)}}class ig{}class sg{}class ag{resolveComponentFactory(e){throw function(e){const t=Error(`No component factory found for ${ae(e)}. Did you add it to @NgModule.entryComponents?`);return t.ngComponent=e,t}(e)}}class lg{}function cg(e,t){return new ug(_n(e,t))}lg.NULL=new ag;class ug{constructor(e){this.nativeElement=e}}function dg(e){return e instanceof ug?e.nativeElement:e}ug.__NG_ELEMENT_ID__=function(){return cg(Vn(),Pn())},new uo("Renderer2Interceptor");class fg{}class pg{}pg.__NG_ELEMENT_ID__=()=>function(){const e=Pn(),t=Dn(Vn().index,e);return function(e){const t=e[11];if(ngDevMode&&!mn(t))throw new Error("Cannot inject Renderer2 when the application uses Renderer3!");return t}(Nt(t)?t:e)}();class hg{}hg.ɵprov=Re({token:hg,providedIn:"root",factory:()=>null});class gg{constructor(e){this.full=e,this.major=e.split(".")[0],this.minor=e.split(".")[1],this.patch=e.split(".").slice(2).join(".")}}const yg=new gg("13.2.6"),mg={};function vg(e,t,n,r,o=!1){for(;null!==n;){ngDevMode&&xr(n,63);const i=t[n.index];if(null!==i&&r.push(bn(i)),Pt(i))for(let e=At;e<i.length;e++){const t=i[e],n=t[1].firstChild;null!==n&&vg(t[1],t,n,r)}const s=n.type;if(8&s)vg(e,t,n.child,r);else if(32&s){const e=Qs(n,t);let o;for(;o=e();)r.push(o)}else if(16&s){const e=_a(t,n);if(Array.isArray(e))r.push(...e);else{const n=Zs(t[16]);ngDevMode&&Yt(n),vg(n[1],n,e,r,!0)}}n=o?n.projectionNext:n.next}return r}class bg{constructor(e,t){this._lView=e,this._cdRefInjectingView=t,this._appRef=null,this._attachedToViewContainer=!1}get rootNodes(){const e=this._lView,t=e[1];return vg(t,e,t.firstChild,[])}get context(){return this._lView[8]}set context(e){this._lView[8]=e}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._attachedToViewContainer){const e=this._lView[3];if(Pt(e)){const t=e[8],n=t?t.indexOf(this):-1;n>-1&&(ngDevMode&&Me(n,e.indexOf(this._lView)-At,"An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array."),ia(e,n),Io(t,n))}this._attachedToViewContainer=!1}sa(this._lView[1],this._lView)}onDestroy(e){Zl(this._lView[1],this._lView,null,e)}markForCheck(){vc(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){wc(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(e,t,n){qn(!0);try{wc(e,t,n)}finally{qn(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(){if(this._appRef){const e=ngDevMode?"This view is already attached directly to the ApplicationRef!":"";throw new pe(902,e)}this._attachedToViewContainer=!0}detachFromAppRef(){var e;this._appRef=null,xa(this._lView[1],e=this._lView,e[11],2,null,null)}attachToAppRef(e){if(this._attachedToViewContainer){const e=ngDevMode?"This view is already attached to a ViewContainer!":"";throw new pe(902,e)}this._appRef=e}}class wg extends bg{constructor(e){super(e),this._view=e}detectChanges(){_c(this._view)}checkNoChanges(){!function(e){qn(!0);try{_c(e)}finally{qn(!1)}}(this._view)}get context(){return null}}class _g extends lg{constructor(e){super(),this.ngModule=e}resolveComponentFactory(e){ngDevMode&&Ut(e);const t=It(e);return new Mg(t,this.ngModule)}}function Cg(e){const t=[];for(let n in e)if(e.hasOwnProperty(n)){const r=e[n];t.push({propName:r,templateName:n})}return t}class Mg extends sg{constructor(e,t){super(),this.componentDef=e,this.ngModule=t,this.componentType=e.type,this.selector=e.selectors.map(La).join(","),this.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],this.isBoundToModule=!!t}get inputs(){return Cg(this.componentDef.inputs)}get outputs(){return Cg(this.componentDef.outputs)}create(e,t,n,r){const o=(r=r||this.ngModule)?function(e,t){return{get:(n,r,o)=>{const i=e.get(n,mg,o);return i!==mg||r===mg?i:t.get(n,r,o)}}}(e,r.injector):e,i=o.get(fg,vn),s=o.get(hg,null),a=i.createRenderer(null,this.componentDef),l=this.componentDef.selectors[0][0]||"div",c=n?Ql(a,n,this.componentDef.encapsulation):ra(i.createRenderer(null,this.componentDef),l,function(e){const t=e.toLowerCase();return"svg"===t?dn:"math"===t?fn:null}(l)),u=this.componentDef.onPush?576:528,d=hu(),f=Wl(0,null,null,1,0,null,null,null,null,null),p=Pl(null,f,d,u,null,null,i,a,s,o);let h,g;or(p);try{const e=fu(c,this.componentDef,p,i,a);if(c)if(n)Ir(a,c,["ng-version",yg.full]);else{const{attrs:e,classes:t}=function(e){const t=[],n=[];let r=1,o=2;for(;r<e.length;){let i=e[r];if("string"==typeof i)2===o?""!==i&&t.push(i,e[++r]):8===o&&n.push(i);else{if(!ja(o))break;o=i}r++}return{attrs:t,classes:n}}(this.componentDef.selectors[0]);e&&Ir(a,c,e),t&&t.length>0&&Ta(a,c,t.join(" "))}if(g=Cn(f,St),void 0!==t){const e=g.projection=[];for(let n=0;n<this.ngContentSelectors.length;n++){const r=t[n];e.push(null!=r?Array.from(r):null)}}h=pu(e,this.componentDef,p,d,[gu]),$l(f,p,null)}finally{cr()}return new Dg(this.componentType,h,cg(g,p),p,g)}}new _g;class Dg extends ig{constructor(e,t,n,r,o){super(),this.location=n,this._rootLView=r,this._tNode=o,this.instance=t,this.hostView=this.changeDetectorRef=new wg(r),this.componentType=e}get injector(){return new Yr(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(e){this.hostView.onDestroy(e)}}function xg(e,t,n,r){return Ge((()=>{const o=e;null!==t&&(o.hasOwnProperty("decorators")&&void 0!==o.decorators?o.decorators.push(...t):o.decorators=t),null!==n&&(o.ctorParameters=n),null!==r&&(o.hasOwnProperty("propDecorators")&&void 0!==o.propDecorators?o.propDecorators={...o.propDecorators,...r}:o.propDecorators=r)}))}class Ig{}class Eg{}const Tg=new Map;function Og(e){const t=new Set;!function e(n){const r=Ot(n,!0),o=r.id;if(null!==o){(function(e,t,n){if(t&&t!==n)throw new Error(`Duplicate module registered for ${e} - ${ae(t)} vs ${ae(t.name)}`)})(o,Tg.get(o),n),Tg.set(o,n)}const i=Bs(r.imports);for(const n of i)t.has(n)||(t.add(n),e(n))}(e)}function Sg(e){return Tg.get(e)||wt[e]}function kg(e,t){return new Ag(e,t??null)}class Ag extends Ig{constructor(e,t){super(),this._parent=t,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new _g(this);const n=Ot(e);ngDevMode&&ke(n,`NgModule '${ae(e)}' is not a subtype of 'NgModuleType'.`),this._bootstrapComponents=Bs(n.bootstrap),this._r3Injector=Bc(e,t,[{provide:Ig,useValue:this},{provide:lg,useValue:this.componentFactoryResolver}],ae(e)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(e)}get(e,t=Kc.THROW_IF_NOT_FOUND,n=We.Default){return e===Kc||e===Ig||e===Pc?this:this._r3Injector.get(e,t,n)}destroy(){ngDevMode&&ke(this.destroyCbs,"NgModule already destroyed");const e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach((e=>e())),this.destroyCbs=null}onDestroy(e){ngDevMode&&ke(this.destroyCbs,"NgModule already destroyed"),this.destroyCbs.push(e)}}class Ng extends Eg{constructor(e){super(),this.moduleType=e,null!==Ot(e)&&Og(e)}create(e){return new Ag(this.moduleType,e)}}function Pg(e,t,n){const r=zn()+e,o=Pn();return o[r]===Ha?ku(o,r,n?t.call(n):t()):Au(o,r)}function jg(e,t,n,r){return zg(Pn(),zn(),e,t,n,r)}function Rg(e,t,n,r,o){return Wg(Pn(),zn(),e,t,n,r,o)}function Vg(e,t,n,r,o,i){return Qg(Pn(),zn(),e,t,n,r,o,i)}function $g(e,t,n,r,o,i,s){return Zg(Pn(),zn(),e,t,n,r,o,i,s)}function Fg(e,t,n,r,o,i,s,a){const l=zn()+e,c=Pn(),u=Ru(c,l,n,r,o,i);return Nu(c,l+4,s)||u?ku(c,l+5,a?t.call(a,n,r,o,i,s):t(n,r,o,i,s)):Au(c,l+5)}function Lg(e,t,n,r,o,i,s,a,l){const c=zn()+e,u=Pn(),d=Ru(u,c,n,r,o,i);return Pu(u,c+4,s,a)||d?ku(u,c+6,l?t.call(l,n,r,o,i,s,a):t(n,r,o,i,s,a)):Au(u,c+6)}function Hg(e,t,n,r,o,i,s,a,l,c){const u=zn()+e,d=Pn();let f=Ru(d,u,n,r,o,i);return ju(d,u+4,s,a,l)||f?ku(d,u+7,c?t.call(c,n,r,o,i,s,a,l):t(n,r,o,i,s,a,l)):Au(d,u+7)}function Bg(e,t,n,r,o,i,s,a,l,c,u){const d=zn()+e,f=Pn(),p=Ru(f,d,n,r,o,i);return Ru(f,d+4,s,a,l,c)||p?ku(f,d+8,u?t.call(u,n,r,o,i,s,a,l,c):t(n,r,o,i,s,a,l,c)):Au(f,d+8)}function Ug(e,t,n,r){return Kg(Pn(),zn(),e,t,n,r)}function qg(e,t){ngDevMode&&Pe(e,t);const n=e[t];return n===Ha?void 0:n}function zg(e,t,n,r,o,i){const s=t+n;return Nu(e,s,o)?ku(e,s+1,i?r.call(i,o):r(o)):qg(e,s+1)}function Wg(e,t,n,r,o,i,s){const a=t+n;return Pu(e,a,o,i)?ku(e,a+2,s?r.call(s,o,i):r(o,i)):qg(e,a+2)}function Qg(e,t,n,r,o,i,s,a){const l=t+n;return ju(e,l,o,i,s)?ku(e,l+3,a?r.call(a,o,i,s):r(o,i,s)):qg(e,l+3)}function Zg(e,t,n,r,o,i,s,a,l){const c=t+n;return Ru(e,c,o,i,s,a)?ku(e,c+4,l?r.call(l,o,i,s,a):r(o,i,s,a)):qg(e,c+4)}function Kg(e,t,n,r,o,i){let s=t+n,a=!1;for(let t=0;t<o.length;t++)Nu(e,s++,o[t])&&(a=!0);return a?ku(e,s,r.apply(i,o)):qg(e,s)}function Gg(e,t){const n=jn();let r;const o=e+St;n.firstCreatePass?(r=function(e,t){if(t)for(let n=t.length-1;n>=0;n--){const r=t[n];if(e===r.name)return r}if(ngDevMode){const t=Pn()[16][8],n=t?` in the '${t.constructor.name}' component`:"";throw new pe(-302,`The pipe '${e}' could not be found${n}!`)}}(t,n.pipeRegistry),n.data[o]=r,r.onDestroy&&(n.destroyHooks||(n.destroyHooks=[])).push(o,r.onDestroy)):r=n.data[o];const i=r.factory||(r.factory=en(r.type,!0)),s=Ze(kd);try{const e=jr(!1),t=i();return jr(e),rd(n,Pn(),o,t),t}finally{Ze(s)}}function Jg(e,t,n){const r=e+St,o=Pn(),i=Mn(o,r);return ny(o,r)?zg(o,zn(),t,i.transform,n,i):i.transform(n)}function Yg(e,t,n,r){const o=e+St,i=Pn(),s=Mn(i,o);return ny(i,o)?Wg(i,zn(),t,s.transform,n,r,s):s.transform(n,r)}function Xg(e,t,n,r,o){const i=e+St,s=Pn(),a=Mn(s,i);return ny(s,i)?Qg(s,zn(),t,a.transform,n,r,o,a):a.transform(n,r,o)}function ey(e,t,n,r,o,i){const s=e+St,a=Pn(),l=Mn(a,s);return ny(a,s)?Zg(a,zn(),t,l.transform,n,r,o,i,l):l.transform(n,r,o,i)}function ty(e,t,n){const r=e+St,o=Pn(),i=Mn(o,r);return ny(o,r)?Kg(o,zn(),t,i.transform,n,i):i.transform.apply(i,n)}function ny(e,t){return e[1].data[t].pure}class ry extends r.Subject{constructor(e=!1){super(),this.__isAsync=e}emit(e){super.next(e)}subscribe(e,t,n){let o=e,i=t||(()=>null),s=n;if(e&&"object"==typeof e){const t=e;o=t.next?.bind(t),i=t.error?.bind(t),s=t.complete?.bind(t)}this.__isAsync&&(i=oy(i),o&&(o=oy(o)),s&&(s=oy(s)));const a=super.subscribe({next:o,error:i,complete:s});return e instanceof r.Subscription&&e.add(a),a}}function oy(e){return t=>{setTimeout(e,void 0,t)}}const iy=ry;function sy(){return this._results[Eu()]()}class ay{constructor(e=!1){this._emitDistinctChangesOnly=e,this.dirty=!0,this._results=[],this._changesDetected=!1,this._changes=null,this.length=0,this.first=void 0,this.last=void 0;const t=Eu(),n=ay.prototype;n[t]||(n[t]=sy)}get changes(){return this._changes||(this._changes=new iy)}get(e){return this._results[e]}map(e){return this._results.map(e)}filter(e){return this._results.filter(e)}find(e){return this._results.find(e)}reduce(e,t){return this._results.reduce(e,t)}forEach(e){this._results.forEach(e)}some(e){return this._results.some(e)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(e,t){const n=this;n.dirty=!1;const r=Mo(e);(this._changesDetected=!function(e,t,n){if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++){let o=e[r],i=t[r];if(n&&(o=n(o),i=n(i)),i!==o)return!1}return!0}(n._results,r,t))&&(n._results=r,n.length=r.length,n.last=r[this.length-1],n.first=r[0])}notifyOnChanges(){!this._changes||!this._changesDetected&&this._emitDistinctChangesOnly||this._changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}Symbol.iterator;class ly{}ly.__NG_ELEMENT_ID__=function(){return dy(Vn(),Pn())};const cy=ly,uy=class extends cy{constructor(e,t,n){super(),this._declarationLView=e,this._declarationTContainer=t,this.elementRef=n}createEmbeddedView(e){const t=this._declarationTContainer.tViews,n=Pl(this._declarationLView,t,e,16,null,t.declTNode,null,null,null,null),r=this._declarationLView[this._declarationTContainer.index];ngDevMode&&zt(r),n[17]=r;const o=this._declarationLView[19];return null!==o&&(n[19]=o.createEmbeddedView(t)),$l(t,n,e),new bg(n)}};function dy(e,t){return 4&e.type?(ngDevMode&&ke(e.tViews,"TView must be allocated"),new uy(t,e,cg(e,t))):null}class fy{}fy.__NG_ELEMENT_ID__=function(){return my(Vn(),Pn())};const py=fy,hy=class extends py{constructor(e,t,n){super(),this._lContainer=e,this._hostTNode=t,this._hostLView=n}get element(){return cg(this._hostTNode,this._hostLView)}get injector(){return new Yr(this._hostTNode,this._hostLView)}get parentInjector(){const e=Lr(this._hostTNode,this._hostLView);if(kr(e)){const t=Nr(e,this._hostLView),n=Ar(e);ngDevMode&&Xt(t,n);const r=t[1].data[n+8];return new Yr(r,t)}return new Yr(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(e){const t=gy(this._lContainer);return null!==t&&t[e]||null}get length(){return this._lContainer.length-At}createEmbeddedView(e,t,n){const r=e.createEmbeddedView(t||{});return this.insert(r,n),r}createComponent(e,t,n,r,o){const i=e&&!Co(e);let s;if(i)ngDevMode&&Me("object"!=typeof t,!0,"It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)"),s=t;else{ngDevMode&&(ke(It(e),"Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator."),Me("number"!=typeof t,!0,"It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead."));const i=t||{};s=i.index,n=i.injector,r=i.projectableNodes,o=i.ngModuleRef}const a=i?e:new Mg(It(e)),l=n||this.parentInjector;if(!o&&null==a.ngModule){const e=(i?l:this.parentInjector).get(Ig,null);e&&(o=e)}const c=a.create(l,r,void 0,o);return this.insert(c.hostView,s),c}insert(e,t){const n=e._lView,r=n[1];if(ngDevMode&&e.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(Pt(n[3])){const t=this.indexOf(e);if(-1!==t)this.detach(t);else{const t=n[3];ngDevMode&&Me(Pt(t),!0,"An attached view should have its PARENT point to a container.");const r=new hy(t,t[6],t[3]);r.detach(r.indexOf(e))}}const o=this._adjustIndex(t),i=this._lContainer;!function(e,t,n,r){ngDevMode&&Qt(t),ngDevMode&&zt(n);const o=At+r,i=n.length;r>0&&(n[o-1][4]=t),r<i-At?(t[4]=n[o],xo(n,At+r,t)):(n.push(t),t[4]=null),t[3]=n;const s=t[17];null!==s&&n!==s&&function(e,t){ngDevMode&&ke(t,"LView required"),ngDevMode&&zt(e);const n=e[9],r=t[3];ngDevMode&&zt(r);const o=r[3][16];ngDevMode&&ke(o,"Missing insertedComponentLView");const i=t[16];ngDevMode&&ke(i,"Missing declaredComponentLView"),i!==o&&(e[2]=!0),null===n?e[9]=[t]:n.push(t)}(s,t);const a=t[19];null!==a&&a.insertView(e),t[2]|=128}(r,n,i,o);const s=Ca(o,i),a=n[11],l=pa(a,i[7]);return null!==l&&function(e,t,n,r,o,i){r[0]=o,r[6]=t,xa(e,r,n,1,o,i)}(r,i[6],a,n,l,s),e.attachToViewContainerRef(),xo(yy(i),o,e),e}move(e,t){if(ngDevMode&&e.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(e,t)}indexOf(e){const t=gy(this._lContainer);return null!==t?t.indexOf(e):-1}remove(e){const t=this._adjustIndex(e,-1),n=ia(this._lContainer,t);n&&(Io(yy(this._lContainer),t),sa(n[1],n))}detach(e){const t=this._adjustIndex(e,-1),n=ia(this._lContainer,t);return n&&null!=Io(yy(this._lContainer),t)?new bg(n):null}_adjustIndex(e,t=0){return null==e?this.length+t:(ngDevMode&&(Oe(e,-1,`ViewRef index must be positive, got ${e}`),Ee(e,this.length+1+t,"index")),e)}};function gy(e){return e[8]}function yy(e){return e[8]||(e[8]=[])}function my(e,t){let n;ngDevMode&&xr(e,15);const r=t[e.index];if(Pt(r))n=r;else{let o;if(8&e.type)o=bn(r);else{const n=t[11];ngDevMode&&ngDevMode.rendererCreateComment++,o=n.createComment(ngDevMode?"container":"");const r=_n(e,t);ua(n,pa(n,r),o,function(e,t){return mn(e)?e.nextSibling(t):t.nextSibling}(n,r),!1)}t[e.index]=n=pc(r,t,o,e),mc(t,n)}return new hy(n,e,t)}class vy{constructor(e){this.queryList=e,this.matches=null}clone(){return new vy(this.queryList)}setDirty(){this.queryList.setDirty()}}class by{constructor(e=[]){this.queries=e}createEmbeddedView(e){const t=e.queries;if(null!==t){const n=null!==e.contentQueries?e.contentQueries[0]:t.length,r=[];for(let e=0;e<n;e++){const n=t.getByIndex(e),o=this.queries[n.indexInDeclarationView];r.push(o.clone())}return new by(r)}return null}insertView(e){this.dirtyQueriesWithMatches(e)}detachView(e){this.dirtyQueriesWithMatches(e)}dirtyQueriesWithMatches(e){for(let t=0;t<this.queries.length;t++)null!==Ny(e,t).matches&&this.queries[t].setDirty()}}class wy{constructor(e,t,n=null){this.predicate=e,this.flags=t,this.read=n}}class _y{constructor(e=[]){this.queries=e}elementStart(e,t){ngDevMode&&Zt(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].elementStart(e,t)}elementEnd(e){for(let t=0;t<this.queries.length;t++)this.queries[t].elementEnd(e)}embeddedTView(e){let t=null;for(let n=0;n<this.length;n++){const r=null!==t?t.length:0,o=this.getByIndex(n).embeddedTView(e,r);o&&(o.indexInDeclarationView=n,null!==t?t.push(o):t=[o])}return null!==t?new _y(t):null}template(e,t){ngDevMode&&Zt(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].template(e,t)}getByIndex(e){return ngDevMode&&Pe(this.queries,e),this.queries[e]}get length(){return this.queries.length}track(e){this.queries.push(e)}}class Cy{constructor(e,t=-1){this.metadata=e,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=t}elementStart(e,t){this.isApplyingToNode(t)&&this.matchTNode(e,t)}elementEnd(e){this._declarationNodeIndex===e.index&&(this._appliesToNextNode=!1)}template(e,t){this.elementStart(e,t)}embeddedTView(e,t){return this.isApplyingToNode(e)?(this.crossesNgTemplate=!0,this.addMatch(-e.index,t),new Cy(this.metadata)):null}isApplyingToNode(e){if(this._appliesToNextNode&&1!=(1&this.metadata.flags)){const t=this._declarationNodeIndex;let n=e.parent;for(;null!==n&&8&n.type&&n.index!==t;)n=n.parent;return t===(null!==n?n.index:-1)}return this._appliesToNextNode}matchTNode(e,t){const n=this.metadata.predicate;if(Array.isArray(n))for(let r=0;r<n.length;r++){const o=n[r];this.matchTNodeWithReadOption(e,t,My(t,o)),this.matchTNodeWithReadOption(e,t,Zr(t,e,o,!1,!1))}else n===ly?4&t.type&&this.matchTNodeWithReadOption(e,t,-1):this.matchTNodeWithReadOption(e,t,Zr(t,e,n,!1,!1))}matchTNodeWithReadOption(e,t,n){if(null!==n){const r=this.metadata.read;if(null!==r)if(r===ug||r===fy||r===ly&&4&t.type)this.addMatch(t.index,-2);else{const n=Zr(t,e,r,!1,!1);null!==n&&this.addMatch(t.index,n)}else this.addMatch(t.index,n)}}addMatch(e,t){null===this.matches?this.matches=[e,t]:this.matches.push(e,t)}}function My(e,t){const n=e.localNames;if(null!==n)for(let e=0;e<n.length;e+=2)if(n[e]===t)return n[e+1];return null}function Dy(e,t,n,r){return-1===n?function(e,t){return 11&e.type?cg(e,t):4&e.type?dy(e,t):null}(t,e):-2===n?function(e,t,n){return n===ug?cg(t,e):n===ly?dy(t,e):n===fy?(ngDevMode&&xr(t,15),my(t,e)):void(ngDevMode&&Ae(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${ae(n)}.`))}(e,t,r):Kr(e,e[1],n,t)}function xy(e,t,n,r){const o=t[19].queries[r];if(null===o.matches){const r=e.data,i=n.matches,s=[];for(let e=0;e<i.length;e+=2){const o=i[e];if(o<0)s.push(null);else{ngDevMode&&Pe(r,o);const a=r[o];s.push(Dy(t,a,i[e+1],n.metadata.read))}}o.matches=s}return o.matches}function Iy(e,t,n,r){const o=e.queries.getByIndex(n),i=o.matches;if(null!==i){const s=xy(e,t,o,n);for(let e=0;e<i.length;e+=2){const n=i[e];if(n>0)r.push(s[e/2]);else{const o=i[e+1],s=t[-n];ngDevMode&&zt(s);for(let e=At;e<s.length;e++){const t=s[e];t[17]===t[3]&&Iy(t[1],t,o,r)}if(null!==s[9]){const e=s[9];for(let t=0;t<e.length;t++){const n=e[t];Iy(n[1],n,o,r)}}}}}return r}function Ey(e){const t=Pn(),n=jn(),r=er();tr(r+1);const o=Ny(n,r);if(e.dirty&&xn(t)===(2==(2&o.metadata.flags))){if(null===o.matches)e.reset([]);else{const i=o.crossesNgTemplate?Iy(n,t,r,[]):xy(n,t,o,r);e.reset(i,dg),e.notifyOnChanges()}return!0}return!1}function Ty(e,t,n){ngDevMode&&we(t,"Expecting flags");const r=jn();r.firstCreatePass&&(Ay(r,new wy(e,t,n),-1),2==(2&t)&&(r.staticViewQueries=!0)),ky(r,Pn(),t)}function Oy(e,t,n,r){ngDevMode&&we(n,"Expecting flags");const o=jn();if(o.firstCreatePass){const i=Vn();Ay(o,new wy(t,n,r),i.index),function(e,t){const n=e.contentQueries||(e.contentQueries=[]);t!==(n.length?n[n.length-1]:-1)&&n.push(e.queries.length-1,t)}(o,e),2==(2&n)&&(o.staticContentQueries=!0)}ky(o,Pn(),n)}function Sy(){return e=Pn(),t=er(),ngDevMode&&ke(e[19],"LQueries should be defined when trying to load a query"),ngDevMode&&Pe(e[19].queries,t),e[19].queries[t].queryList;var e,t}function ky(e,t,n){const r=new ay(4==(4&n));Zl(e,t,r,r.destroy),null===t[19]&&(t[19]=new by),t[19].queries.push(new vy(r))}function Ay(e,t,n){null===e.queries&&(e.queries=new _y),e.queries.track(new Cy(t,n))}function Ny(e,t){return ngDevMode&&ke(e.queries,"TQueries must be defined to retrieve a TQuery"),e.queries.getByIndex(t)}function Py(e,t){return dy(e,t)}const jy={ɵɵattribute:Vu,ɵɵattributeInterpolate1:Qu,ɵɵattributeInterpolate2:Zu,ɵɵattributeInterpolate3:Ku,ɵɵattributeInterpolate4:Gu,ɵɵattributeInterpolate5:Ju,ɵɵattributeInterpolate6:Yu,ɵɵattributeInterpolate7:Xu,ɵɵattributeInterpolate8:ed,ɵɵattributeInterpolateV:td,ɵɵdefineComponent:yt,ɵɵdefineDirective:Dt,ɵɵdefineInjectable:Re,ɵɵdefineInjector:$e,ɵɵdefineNgModule:_t,ɵɵdefinePipe:xt,ɵɵdirectiveInject:kd,ɵɵgetInheritedFactory:Xr,ɵɵinject:zo,ɵɵinjectAttribute:to,ɵɵinvalidFactory:Ad,ɵɵinvalidFactoryDep:Wo,ɵɵtemplateRefExtractor:Py,ɵɵNgOnChangesFeature:nn,ɵɵProvidersFeature:og,ɵɵCopyDefinitionFeature:xu,ɵɵInheritDefinitionFeature:vu,ɵɵnextContext:Gd,ɵɵnamespaceHTML:gr,ɵɵnamespaceMathML:hr,ɵɵnamespaceSVG:pr,ɵɵenableBindings:An,ɵɵdisableBindings:Nn,ɵɵelementStart:jd,ɵɵelementEnd:Rd,ɵɵelement:Vd,ɵɵelementContainerStart:$d,ɵɵelementContainerEnd:Fd,ɵɵelementContainer:Ld,ɵɵpureFunction0:Pg,ɵɵpureFunction1:jg,ɵɵpureFunction2:Rg,ɵɵpureFunction3:Vg,ɵɵpureFunction4:$g,ɵɵpureFunction5:Fg,ɵɵpureFunction6:Lg,ɵɵpureFunction7:Hg,ɵɵpureFunction8:Bg,ɵɵpureFunctionV:Ug,ɵɵgetCurrentView:Hd,ɵɵrestoreView:Rn,ɵɵlistener:zd,ɵɵprojection:Xd,ɵɵsyntheticHostProperty:xp,ɵɵsyntheticHostListener:Wd,ɵɵpipeBind1:Jg,ɵɵpipeBind2:Yg,ɵɵpipeBind3:Xg,ɵɵpipeBind4:ey,ɵɵpipeBindV:ty,ɵɵprojectionDef:Yd,ɵɵhostProperty:Dp,ɵɵproperty:Nd,ɵɵpropertyInterpolate:ef,ɵɵpropertyInterpolate1:tf,ɵɵpropertyInterpolate2:nf,ɵɵpropertyInterpolate3:rf,ɵɵpropertyInterpolate4:of,ɵɵpropertyInterpolate5:sf,ɵɵpropertyInterpolate6:af,ɵɵpropertyInterpolate7:lf,ɵɵpropertyInterpolate8:cf,ɵɵpropertyInterpolateV:uf,ɵɵpipe:Gg,ɵɵqueryRefresh:Ey,ɵɵviewQuery:Ty,ɵɵloadQuery:Sy,ɵɵcontentQuery:Oy,ɵɵreference:od,ɵɵclassMap:Ef,ɵɵclassMapInterpolate1:Jf,ɵɵclassMapInterpolate2:Yf,ɵɵclassMapInterpolate3:Xf,ɵɵclassMapInterpolate4:ep,ɵɵclassMapInterpolate5:tp,ɵɵclassMapInterpolate6:np,ɵɵclassMapInterpolate7:rp,ɵɵclassMapInterpolate8:op,ɵɵclassMapInterpolateV:ip,ɵɵstyleMap:xf,ɵɵstyleMapInterpolate1:sp,ɵɵstyleMapInterpolate2:ap,ɵɵstyleMapInterpolate3:lp,ɵɵstyleMapInterpolate4:cp,ɵɵstyleMapInterpolate5:up,ɵɵstyleMapInterpolate6:dp,ɵɵstyleMapInterpolate7:fp,ɵɵstyleMapInterpolate8:pp,ɵɵstyleMapInterpolateV:hp,ɵɵstyleProp:Mf,ɵɵstylePropInterpolate1:gp,ɵɵstylePropInterpolate2:yp,ɵɵstylePropInterpolate3:mp,ɵɵstylePropInterpolate4:vp,ɵɵstylePropInterpolate5:bp,ɵɵstylePropInterpolate6:wp,ɵɵstylePropInterpolate7:_p,ɵɵstylePropInterpolate8:Cp,ɵɵstylePropInterpolateV:Mp,ɵɵclassProp:Df,ɵɵadvance:Ba,ɵɵtemplate:nd,ɵɵtext:Lf,ɵɵtextInterpolate:Hf,ɵɵtextInterpolate1:Bf,ɵɵtextInterpolate2:Uf,ɵɵtextInterpolate3:qf,ɵɵtextInterpolate4:zf,ɵɵtextInterpolate5:Wf,ɵɵtextInterpolate6:Qf,ɵɵtextInterpolate7:Zf,ɵɵtextInterpolate8:Kf,ɵɵtextInterpolateV:Gf,ɵɵi18n:Wh,ɵɵi18nAttributes:Qh,ɵɵi18nExp:Zh,ɵɵi18nStart:qh,ɵɵi18nEnd:zh,ɵɵi18nApply:Kh,ɵɵi18nPostprocess:Gh,ɵɵresolveWindow:$s,ɵɵresolveDocument:Fs,ɵɵresolveBody:Ls,ɵɵsetComponentScope:mt,ɵɵsetNgModuleScope:Ct,ɵɵsanitizeHtml:cs,ɵɵsanitizeStyle:us,ɵɵsanitizeResourceUrl:fs,ɵɵsanitizeScript:ps,ɵɵsanitizeUrl:ds,ɵɵsanitizeUrlOrResourceUrl:ys,ɵɵtrustConstantHtml:hs,ɵɵtrustConstantResourceUrl:gs,forwardRef:ue,resolveForwardRef:de};let Ry=null;function Vy(){Ry=null}const $y=[];let Fy=!1;function Ly(){if(!Fy){Fy=!0;try{for(let e=$y.length-1;e>=0;e--){const{moduleType:t,ngModule:n}=$y[e];n.declarations&&n.declarations.every(Hy)&&($y.splice(e,1),Jy(t,n))}}finally{Fy=!1}}}function Hy(e){return Array.isArray(e)?e.every(Hy):!!de(e)}function By(e,t={}){Uy(e,t),function(e,t){$y.push({moduleType:e,ngModule:t})}(e,t)}function Uy(e,t,n=!1){ngDevMode&&ke(e,"Required value moduleType"),ngDevMode&&ke(t,"Required value ngModule");const r=Mo(t.declarations||lt);let o=null;Object.defineProperty(e,ft,{configurable:!0,get:()=>{if(null===o){if(ngDevMode&&t.imports&&t.imports.indexOf(e)>-1)throw new Error(`'${ye(e)}' module can't import itself`);const n=wo({usage:0,kind:"NgModule",type:e});o=n.compileNgModule(jy,`ng:///${e.name}/ɵmod.js`,{type:e,bootstrap:Mo(t.bootstrap||lt).map(de),declarations:r.map(de),imports:Mo(t.imports||lt).map(de).map(em),exports:Mo(t.exports||lt).map(de).map(em),schemas:t.schemas?Mo(t.schemas):null,id:t.id||null}),o.schemas||(o.schemas=[])}return o}});let i=null;Object.defineProperty(e,pt,{get:()=>{if(null===i){const t=wo({usage:0,kind:"NgModule",type:e});i=t.compileFactory(jy,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,deps:ri(e),target:t.FactoryTarget.NgModule,typeArgumentCount:0})}return i},configurable:!!ngDevMode});let s=null;Object.defineProperty(e,Ue,{get:()=>{if(null===s){ngDevMode&&qy(e,n);const r={name:e.name,type:e,providers:t.providers||lt,imports:[(t.imports||lt).map(de),(t.exports||lt).map(de)]},o=wo({usage:0,kind:"NgModule",type:e});s=o.compileInjector(jy,`ng:///${e.name}/ɵinj.js`,r)}return s},configurable:!!ngDevMode})}function qy(e,t,n){if(Zy.get(e))return;let r;if(Zy.set(e,!0),e=de(e),n){if(r=Ot(e),!r)throw new Error(`Unexpected value '${e.name}' imported by the module '${n.name}'. Please add an @NgModule annotation.`)}else r=Ot(e,!0);const o=[],i=Bs(r.declarations),s=Bs(r.imports);Mo(s).map(zy).forEach((t=>{d(t,e),qy(t,!1,e)}));const a=Bs(r.exports);i.forEach((function(t){It(t=de(t))||Et(t)||Tt(t)||o.push(`Unexpected value '${ye(t)}' declared by the module '${ye(e)}'. Please add a @Pipe/@Directive/@Component annotation.`)})),i.forEach((function(e){const t=Et(e=de(e));!It(e)&&t&&0==t.selectors.length&&o.push(`Directive ${ye(e)} has no selector, please add it!`)}));const l=[...i.map(de),...Mo(s.map(Gy)).map(de)];a.forEach((function(t){const n=(It(t=de(t))?"component":Et(t)&&"directive")||Tt(t)&&"pipe";n&&-1===l.lastIndexOf(t)&&o.push(`Can't export ${n} ${ye(t)} from ${ye(e)} as it was neither declared nor imported!`)})),i.forEach((n=>function(t,n){t=de(t);const r=Qy.get(t);if(r&&r!==e){if(!n){const n=[r,e].map(ye).sort();o.push(`Type ${ye(t)} is part of the declarations of 2 modules: ${n[0]} and ${n[1]}! Please consider moving ${ye(t)} to a higher module that imports ${n[0]} and ${n[1]}. You can also create a new NgModule that exports and includes ${ye(t)} then import that NgModule in ${n[0]} and ${n[1]}.`)}}else Qy.set(t,e)}(n,t))),i.forEach((function(e){if(It(e=de(e))){const t=Wy(e,"Component");t&&t.entryComponents&&Do(t.entryComponents,u)}}));const c=Wy(e,"NgModule");if(c&&(c.imports&&Mo(c.imports).map(zy).forEach((t=>{d(t,e),qy(t,!1,e)})),c.bootstrap&&Do(c.bootstrap,(function(e){It(e=de(e))||o.push(`${ye(e)} cannot be used as an entry component.`)})),c.bootstrap&&Do(c.bootstrap,u),c.entryComponents&&Do(c.entryComponents,u)),o.length)throw new Error(o.join("\n"));function u(e){e=de(e),Qy.get(e)||o.push(`Component ${ye(e)} is not part of any NgModule or the module has not been imported into your module.`)}function d(e,t){if(It(e=de(e))||Et(e))throw new Error(`Unexpected directive '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`);if(Tt(e))throw new Error(`Unexpected pipe '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`)}}function zy(e){return(e=de(e)).ngModule||e}function Wy(e,t){let n=null;return r(e.__annotations__),r(e.decorators),n;function r(e){e&&e.forEach(o)}function o(e){n||(Object.getPrototypeOf(e).ngMetadataName==t?n=e:e.type&&Object.getPrototypeOf(e.type).ngMetadataName==t&&(n=e.args[0]))}}let Qy=new WeakMap,Zy=new WeakMap;function Ky(){Qy=new WeakMap,Zy=new WeakMap,$y.length=0}function Gy(e){return[...Mo(Bs(Ot(e=de(e),!0).exports).map((e=>Ot(e)?(qy(e,!1),Gy(e)):e)))]}function Jy(e,t){const n=Mo(t.declarations||lt),r=Xy(e);n.forEach((t=>{t.hasOwnProperty(ct)?Yy(It(t),r):t.hasOwnProperty(ut)||t.hasOwnProperty(dt)||(t.ngSelectorScope=e)}))}function Yy(e,t){e.directiveDefs=()=>Array.from(t.compilation.directives).map((e=>e.hasOwnProperty(ct)?It(e):Et(e))).filter((e=>!!e)),e.pipeDefs=()=>Array.from(t.compilation.pipes).map((e=>Tt(e))),e.schemas=t.schemas,e.tView=null}function Xy(e){if(!tm(e))throw new Error(`${e.name} does not have a module def (ɵmod property)`);const t=Ot(e);if(null!==t.transitiveCompileScopes)return t.transitiveCompileScopes;const n={schemas:t.schemas||null,compilation:{directives:new Set,pipes:new Set},exported:{directives:new Set,pipes:new Set}};return Bs(t.imports).forEach((e=>{const t=e;if(!tm(t))throw new Error(`Importing ${t.name} which does not have a ɵmod property`);const r=Xy(t);r.exported.directives.forEach((e=>n.compilation.directives.add(e))),r.exported.pipes.forEach((e=>n.compilation.pipes.add(e)))})),Bs(t.declarations).forEach((e=>{Tt(e)?n.compilation.pipes.add(e):n.compilation.directives.add(e)})),Bs(t.exports).forEach((e=>{const t=e;if(tm(t)){const e=Xy(t);e.exported.directives.forEach((e=>{n.compilation.directives.add(e),n.exported.directives.add(e)})),e.exported.pipes.forEach((e=>{n.compilation.pipes.add(e),n.exported.pipes.add(e)}))}else Tt(t)?n.exported.pipes.add(t):n.exported.directives.add(t)})),t.transitiveCompileScopes=n,n}function em(e){return function(e){return void 0!==e.ngModule}(e)?e.ngModule:e}function tm(e){return!!Ot(e)}let nm=0;function rm(e,t){("undefined"==typeof ngDevMode||ngDevMode)&&st();let n=null;!function(e,t){li(t)&&(si.set(e,t),ai.add(e))}(e,t),sm(e,t),Object.defineProperty(e,ct,{get:()=>{if(null===n){const r=wo({usage:0,kind:"component",type:e});if(li(t)){const n=[`Component '${e.name}' is not resolved:`];throw t.templateUrl&&n.push(` - templateUrl: ${t.templateUrl}`),t.styleUrls&&t.styleUrls.length&&n.push(` - styleUrls: ${JSON.stringify(t.styleUrls)}`),n.push("Did you run and wait for 'resolveComponentResources()'?"),new Error(n.join("\n"))}const o=Ry;let i=t.preserveWhitespaces;void 0===i&&(i=null!==o&&void 0!==o.preserveWhitespaces&&o.preserveWhitespaces);let s=t.encapsulation;void 0===s&&(s=null!==o&&void 0!==o.defaultEncapsulation?o.defaultEncapsulation:Xe.Emulated);const a=t.templateUrl||`ng:///${e.name}/template.html`,l={...lm(e,t),typeSourceSpan:r.createParseSourceSpan("Component",e.name,a),template:t.template||"",preserveWhitespaces:i,styles:t.styles||lt,animations:t.animations,directives:[],changeDetection:t.changeDetection,pipes:new Map,encapsulation:s,interpolation:t.interpolation,viewProviders:t.viewProviders||null};nm++;try{l.usesInheritance&&cm(e),n=r.compileComponent(jy,a,l)}finally{nm--}if(0===nm&&Ly(),void 0!==e.ngSelectorScope){const t=Xy(e.ngSelectorScope);Yy(n,t)}}return n},configurable:!!ngDevMode})}function om(e,t){let n=null;sm(e,t||{}),Object.defineProperty(e,ut,{get:()=>{if(null===n){const r=im(e,t||{}),o=wo({usage:0,kind:"directive",type:e});n=o.compileDirective(jy,r.sourceMapUrl,r.metadata)}return n},configurable:!!ngDevMode})}function im(e,t){const n=e&&e.name,r=`ng:///${n}/ɵdir.js`,o=wo({usage:0,kind:"directive",type:e}),i=lm(e,t);return i.typeSourceSpan=o.createParseSourceSpan("Directive",n,r),i.usesInheritance&&cm(e),{metadata:i,sourceMapUrl:r}}function sm(e,t){let n=null;Object.defineProperty(e,pt,{get:()=>{if(null===n){const r=im(e,t),o=wo({usage:0,kind:"directive",type:e});n=o.compileFactory(jy,`ng:///${e.name}/ɵfac.js`,{name:r.metadata.name,type:r.metadata.type,typeArgumentCount:0,deps:ri(e),target:o.FactoryTarget.Directive})}return n},configurable:!!ngDevMode})}function am(e){return Object.getPrototypeOf(e.prototype)===Object.prototype}function lm(e,t){const n=ni(),r=n.ownPropMetadata(e);return{name:e.name,type:e,selector:void 0!==t.selector?t.selector:null,host:t.host||at,propMetadata:r,inputs:t.inputs||lt,outputs:t.outputs||lt,queries:dm(e,r,fm),lifecycle:{usesOnChanges:n.hasLifecycleHook(e,"ngOnChanges")},typeSourceSpan:null,usesInheritance:!am(e),exportAs:(o=t.exportAs,void 0===o?null:gm(o)),providers:t.providers||null,viewQueries:dm(e,r,pm)};var o}function cm(e){const t=Object.prototype;let n=Object.getPrototypeOf(e.prototype).constructor;for(;n&&n!==t;)Et(n)||It(n)||!mm(n)||om(n,null),n=Object.getPrototypeOf(n)}function um(e,t){return{propertyName:e,predicate:(n=t.selector,"string"==typeof n?gm(n):de(n)),descendants:t.descendants,first:t.first,read:t.read?t.read:null,static:!!t.static,emitDistinctChangesOnly:!!t.emitDistinctChangesOnly};var n}function dm(e,t,n){const r=[];for(const o in t)if(t.hasOwnProperty(o)){const i=t[o];i.forEach((t=>{if(n(t)){if(!t.selector)throw new Error(`Can't construct a query for the property "${o}" of "${ye(e)}" since the query selector wasn't defined.`);if(i.some(hm))throw new Error("Cannot combine @Input decorators with query decorators");r.push(um(o,t))}}))}return r}function fm(e){const t=e.ngMetadataName;return"ContentChild"===t||"ContentChildren"===t}function pm(e){const t=e.ngMetadataName;return"ViewChild"===t||"ViewChildren"===t}function hm(e){return"Input"===e.ngMetadataName}function gm(e){return e.split(",").map((e=>e.trim()))}const ym=["ngOnChanges","ngOnInit","ngOnDestroy","ngDoCheck","ngAfterViewInit","ngAfterViewChecked","ngAfterContentInit","ngAfterContentChecked"];function mm(e){const t=ni();if(ym.some((n=>t.hasLifecycleHook(e,n))))return!0;const n=t.propMetadata(e);for(const e in n){const t=n[e];for(let e=0;e<t.length;e++){const n=t[e],r=n.ngMetadataName;if(hm(n)||fm(n)||pm(n)||"Output"===r||"HostBinding"===r||"HostListener"===r)return!0}}return!1}function vm(e,t){let n=null,r=null;Object.defineProperty(e,pt,{get:()=>{if(null===r){const n=bm(e,t),o=wo({usage:0,kind:"pipe",type:n.type});r=o.compileFactory(jy,`ng:///${n.name}/ɵfac.js`,{name:n.name,type:n.type,typeArgumentCount:0,deps:ri(e),target:o.FactoryTarget.Pipe})}return r},configurable:!!ngDevMode}),Object.defineProperty(e,dt,{get:()=>{if(null===n){const r=bm(e,t),o=wo({usage:0,kind:"pipe",type:r.type});n=o.compilePipe(jy,`ng:///${r.name}/ɵpipe.js`,r)}return n},configurable:!!ngDevMode})}function bm(e,t){return{type:e,name:e.name,pipeName:t.name,pure:void 0===t.pure||t.pure}}const wm=io("Directive",((e={})=>e),void 0,void 0,((e,t)=>om(e,t))),_m=io("Component",((e={})=>({changeDetection:Je.Default,...e})),wm,void 0,((e,t)=>rm(e,t))),Cm=io("Pipe",(e=>({pure:!0,...e})),void 0,void 0,((e,t)=>vm(e,t))),Mm=lo("Input",(e=>({bindingPropertyName:e}))),Dm=lo("Output",(e=>({bindingPropertyName:e}))),xm=lo("HostBinding",(e=>({hostPropertyName:e}))),Im=lo("HostListener",((e,t)=>({eventName:e,args:t}))),Em=io("NgModule",(e=>e),void 0,void 0,((e,t)=>By(e,t)));function Tm(...e){}const Om=new uo("Application Initializer");class Sm{constructor(e){this.appInits=e,this.resolve=Tm,this.reject=Tm,this.initialized=!1,this.done=!1,this.donePromise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}runInitializers(){if(this.initialized)return;const e=[],t=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let t=0;t<this.appInits.length;t++){const n=this.appInits[t]();if(Bd(n))e.push(n);else if(qd(n)){const t=new Promise(((e,t)=>{n.subscribe({complete:e,error:t})}));e.push(t)}}Promise.all(e).then((()=>{t()})).catch((e=>{this.reject(e)})),0===e.length&&t(),this.initialized=!0}}Sm.ɵfac=function(e){return new(e||Sm)(zo(Om,8))},Sm.ɵprov=Re({token:Sm,factory:Sm.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(Sm,[{type:cd,args:[{providedIn:"root"}]}],(function(){return[{type:void 0,decorators:[{type:Go,args:[Om]},{type:Jo}]}]}),null);const km=new uo("AppId",{providedIn:"root",factory:Am});function Am(){return`${Pm()}${Pm()}${Pm()}`}const Nm={provide:km,useFactory:Am,deps:[]};function Pm(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const jm=new uo("Platform Initializer"),Rm=new uo("Platform ID"),Vm=new uo("appBootstrapListener"),$m=new uo("Application Packages Root URL");class Fm{log(e){console.log(e)}warn(e){console.warn(e)}}Fm.ɵfac=function(e){return new(e||Fm)},Fm.ɵprov=Re({token:Fm,factory:Fm.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(Fm,[{type:cd}],null,null);const Lm=new uo("LocaleId",{providedIn:"root",factory:()=>Qo(Lm,We.Optional|We.SkipSelf)||("undefined"!=typeof ngI18nClosureMode&&ngI18nClosureMode&&"undefined"!=typeof goog&&"en"!==goog.getLocale()?goog.getLocale():"undefined"!=typeof $localize&&$localize.locale||Vp)}),Hm=new uo("DefaultCurrencyCode",{providedIn:"root",factory:()=>"USD"}),Bm=new uo("Translations"),Um=new uo("TranslationsFormat");var qm;!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Ignore=2]="Ignore"}(qm||(qm={}));class zm{constructor(e,t){this.ngModuleFactory=e,this.componentFactories=t}}class Wm{compileModuleSync(e){return new Ng(e)}compileModuleAsync(e){return Promise.resolve(this.compileModuleSync(e))}compileModuleAndAllComponentsSync(e){const t=this.compileModuleSync(e),n=Bs(Ot(e).declarations).reduce(((e,t)=>{const n=It(t);return n&&e.push(new Mg(n)),e}),[]);return new zm(t,n)}compileModuleAndAllComponentsAsync(e){return Promise.resolve(this.compileModuleAndAllComponentsSync(e))}clearCache(){}clearCacheFor(e){}getModuleId(e){}}Wm.ɵfac=function(e){return new(e||Wm)},Wm.ɵprov=Re({token:Wm,factory:Wm.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(Wm,[{type:cd,args:[{providedIn:"root"}]}],null,null);const Qm=new uo("compilerOptions");class Zm{}const Km=Promise.resolve(0);function Gm(e){"undefined"==typeof Zone?Km.then((()=>{e&&e.apply(null,null)})):Zone.current.scheduleMicroTask("scheduleMicrotask",e)}class Jm{constructor({enableLongStackTrace:e=!1,shouldCoalesceEventChangeDetection:t=!1,shouldCoalesceRunChangeDetection:n=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new iy(!1),this.onMicrotaskEmpty=new iy(!1),this.onStable=new iy(!1),this.onError=new iy(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched();const r=this;r._nesting=0,r._outer=r._inner=Zone.current,Zone.TaskTrackingZoneSpec&&(r._inner=r._inner.fork(new Zone.TaskTrackingZoneSpec)),e&&Zone.longStackTraceZoneSpec&&(r._inner=r._inner.fork(Zone.longStackTraceZoneSpec)),r.shouldCoalesceEventChangeDetection=!n&&t,r.shouldCoalesceRunChangeDetection=n,r.lastRequestAnimationFrameId=-1,r.nativeRequestAnimationFrame=function(){let e=it.requestAnimationFrame,t=it.cancelAnimationFrame;if("undefined"!=typeof Zone&&e&&t){const n=e[Zone.__symbol__("OriginalDelegate")];n&&(e=n);const r=t[Zone.__symbol__("OriginalDelegate")];r&&(t=r)}return{nativeRequestAnimationFrame:e,nativeCancelAnimationFrame:t}}().nativeRequestAnimationFrame,function(e){const t=()=>{!function(e){e.isCheckStableRunning||-1!==e.lastRequestAnimationFrameId||(e.lastRequestAnimationFrameId=e.nativeRequestAnimationFrame.call(it,(()=>{e.fakeTopEventTask||(e.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",(()=>{e.lastRequestAnimationFrameId=-1,ev(e),e.isCheckStableRunning=!0,Xm(e),e.isCheckStableRunning=!1}),void 0,(()=>{}),(()=>{}))),e.fakeTopEventTask.invoke()})),ev(e))}(e)};e._inner=e._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:(n,r,o,i,s,a)=>{try{return tv(e),n.invokeTask(o,i,s,a)}finally{(e.shouldCoalesceEventChangeDetection&&"eventTask"===i.type||e.shouldCoalesceRunChangeDetection)&&t(),nv(e)}},onInvoke:(n,r,o,i,s,a,l)=>{try{return tv(e),n.invoke(o,i,s,a,l)}finally{e.shouldCoalesceRunChangeDetection&&t(),nv(e)}},onHasTask:(t,n,r,o)=>{t.hasTask(r,o),n===r&&("microTask"==o.change?(e._hasPendingMicrotasks=o.microTask,ev(e),Xm(e)):"macroTask"==o.change&&(e.hasPendingMacrotasks=o.macroTask))},onHandleError:(t,n,r,o)=>(t.handleError(r,o),e.runOutsideAngular((()=>e.onError.emit(o))),!1)})}(r)}static isInAngularZone(){return"undefined"!=typeof Zone&&!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!Jm.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(Jm.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(e,t,n){return this._inner.run(e,t,n)}runTask(e,t,n,r){const o=this._inner,i=o.scheduleEventTask("NgZoneEvent: "+r,e,Ym,Tm,Tm);try{return o.runTask(i,t,n)}finally{o.cancelTask(i)}}runGuarded(e,t,n){return this._inner.runGuarded(e,t,n)}runOutsideAngular(e){return this._outer.run(e)}}const Ym={};function Xm(e){if(0==e._nesting&&!e.hasPendingMicrotasks&&!e.isStable)try{e._nesting++,e.onMicrotaskEmpty.emit(null)}finally{if(e._nesting--,!e.hasPendingMicrotasks)try{e.runOutsideAngular((()=>e.onStable.emit(null)))}finally{e.isStable=!0}}}function ev(e){e._hasPendingMicrotasks||(e.shouldCoalesceEventChangeDetection||e.shouldCoalesceRunChangeDetection)&&-1!==e.lastRequestAnimationFrameId?e.hasPendingMicrotasks=!0:e.hasPendingMicrotasks=!1}function tv(e){e._nesting++,e.isStable&&(e.isStable=!1,e.onUnstable.emit(null))}function nv(e){e._nesting--,Xm(e)}class rv{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new iy,this.onMicrotaskEmpty=new iy,this.onStable=new iy,this.onError=new iy}run(e,t,n){return e.apply(t,n)}runGuarded(e,t,n){return e.apply(t,n)}runOutsideAngular(e){return e()}runTask(e,t,n,r){return e.apply(t,n)}}class ov{constructor(e){this._ngZone=e,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),e.run((()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")}))}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular((()=>{this._ngZone.onStable.subscribe({next:()=>{Jm.assertNotInAngularZone(),Gm((()=>{this._isZoneStable=!0,this._runCallbacksIfReady()}))}})}))}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())Gm((()=>{for(;0!==this._callbacks.length;){let e=this._callbacks.pop();clearTimeout(e.timeoutId),e.doneCb(this._didWork)}this._didWork=!1}));else{let e=this.getPendingTasks();this._callbacks=this._callbacks.filter((t=>!t.updateCb||!t.updateCb(e)||(clearTimeout(t.timeoutId),!1))),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map((e=>({source:e.source,creationLocation:e.creationLocation,data:e.data}))):[]}addCallback(e,t,n){let r=-1;t&&t>0&&(r=setTimeout((()=>{this._callbacks=this._callbacks.filter((e=>e.timeoutId!==r)),e(this._didWork,this.getPendingTasks())}),t)),this._callbacks.push({doneCb:e,timeoutId:r,updateCb:n})}whenStable(e,t,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');this.addCallback(e,t,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(e,t,n){return[]}}ov.ɵfac=function(e){return new(e||ov)(zo(Jm))},ov.ɵprov=Re({token:ov,factory:ov.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(ov,[{type:cd}],(function(){return[{type:Jm}]}),null);class iv{constructor(){this._applications=new Map,lv.addToWindow(this)}registerApplication(e,t){this._applications.set(e,t)}unregisterApplication(e){this._applications.delete(e)}unregisterAllApplications(){this._applications.clear()}getTestability(e){return this._applications.get(e)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(e,t=!0){return lv.findTestabilityInTree(this,e,t)}}function sv(e){lv=e}iv.ɵfac=function(e){return new(e||iv)},iv.ɵprov=Re({token:iv,factory:iv.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(iv,[{type:cd}],(function(){return[]}),null);let av,lv=new class{addToWindow(e){}findTestabilityInTree(e,t,n){return null}};function cv(e,t,n){ngDevMode&&function(e,t="Type passed in is not NgModuleType, it does not have 'ɵmod' property."){Ot(e)||Ae(t)}(n);const r=new Ng(n);if("undefined"!=typeof ngJitMode&&!ngJitMode)return Promise.resolve(r);const o=e.get(Qm,[]).concat(t);if(function(e){if(null!==Ry){if(e.defaultEncapsulation!==Ry.defaultEncapsulation)return void(ngDevMode&&console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set."));if(e.preserveWhitespaces!==Ry.preserveWhitespaces)return void(ngDevMode&&console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set."))}Ry=e}({defaultEncapsulation:Cv(o.map((e=>e.defaultEncapsulation))),preserveWhitespaces:Cv(o.map((e=>e.preserveWhitespaces)))}),0===si.size)return Promise.resolve(r);const i=function(e){const t=[];return e.forEach((e=>e&&t.push(...e))),t}(o.map((e=>e.providers)));if(0===i.length)return Promise.resolve(r);const s=wo({usage:0,kind:"NgModule",type:n}),a=Kc.create({providers:i}).get(s.ResourceLoader);return ii((e=>Promise.resolve(a.get(e)))).then((()=>r))}function uv(e){return e.isBoundToModule}const dv=new uo("AllowMultipleToken");class fv{constructor(e,t){this.name=e,this.token=t}}function pv(e){if(av&&!av.destroyed&&!av.injector.get(dv,!1)){const e="undefined"==typeof ngDevMode||ngDevMode?"There can be only one platform. Destroy the previous one to create a new one.":"";throw new pe(400,e)}ngDevMode&&cu(),av=e.get(vv);const t=e.get(jm,null);return t&&t.forEach((e=>e())),av}function hv(e,t,n=[]){const r=`Platform: ${t}`,o=new uo(r);return(t=[])=>{let i=mv();if(!i||i.injector.get(dv,!1))if(e)e(n.concat(t).concat({provide:o,useValue:!0}));else{const e=n.concat(t).concat({provide:o,useValue:!0},{provide:Rc,useValue:"platform"});pv(Kc.create({providers:e,name:r}))}return gv(o)}}function gv(e){const t=mv();if(!t){const e="undefined"==typeof ngDevMode||ngDevMode?"No platform exists!":"";throw new pe(401,e)}if(("undefined"==typeof ngDevMode||ngDevMode)&&!t.injector.get(e,null))throw new pe(400,"A platform with a different configuration has been created. Please destroy it first.");return t}function yv(){av&&!av.destroyed&&av.destroy()}function mv(){return av&&!av.destroyed?av:null}class vv{constructor(e){this._injector=e,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(e,t){const n=function(e,t){let n;return n="noop"===e?new rv:("zone.js"===e?void 0:e)||new Jm({enableLongStackTrace:"undefined"!=typeof ngDevMode&&!!ngDevMode,shouldCoalesceEventChangeDetection:!!t?.ngZoneEventCoalescing,shouldCoalesceRunChangeDetection:!!t?.ngZoneRunCoalescing}),n}(t?t.ngZone:void 0,{ngZoneEventCoalescing:t&&t.ngZoneEventCoalescing||!1,ngZoneRunCoalescing:t&&t.ngZoneRunCoalescing||!1}),r=[{provide:Jm,useValue:n}];return n.run((()=>{const t=Kc.create({providers:r,parent:this.injector,name:e.moduleType.name}),o=e.create(t),i=o.injector.get(Ss,null);if(!i){const e="undefined"==typeof ngDevMode||ngDevMode?"No ErrorHandler. Is platform module (BrowserModule) included?":"";throw new pe(402,e)}return n.runOutsideAngular((()=>{const e=n.onError.subscribe({next:e=>{i.handleError(e)}});o.onDestroy((()=>{_v(this._modules,o),e.unsubscribe()}))})),function(e,t,n){try{const r=n();return Bd(r)?r.catch((n=>{throw t.runOutsideAngular((()=>e.handleError(n))),n})):r}catch(n){throw t.runOutsideAngular((()=>e.handleError(n))),n}}(i,n,(()=>{const e=o.injector.get(Sm);return e.runInitializers(),e.donePromise.then((()=>(Bp(o.injector.get(Lm,Vp)||Vp),this._moduleDoBootstrap(o),o)))}))}))}bootstrapModule(e,t=[]){const n=bv({},t);return cv(this.injector,n,e).then((e=>this.bootstrapModuleFactory(e,n)))}_moduleDoBootstrap(e){const t=e.injector.get(wv);if(e._bootstrapComponents.length>0)e._bootstrapComponents.forEach((e=>t.bootstrap(e)));else{if(!e.instance.ngDoBootstrap){const t="undefined"==typeof ngDevMode||ngDevMode?`The module ${ae(e.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`:"";throw new pe(403,t)}e.instance.ngDoBootstrap(t)}this._modules.push(e)}onDestroy(e){this._destroyListeners.push(e)}get injector(){return this._injector}destroy(){if(this._destroyed){const e="undefined"==typeof ngDevMode||ngDevMode?"The platform has already been destroyed!":"";throw new pe(404,e)}this._modules.slice().forEach((e=>e.destroy())),this._destroyListeners.forEach((e=>e())),this._destroyed=!0}get destroyed(){return this._destroyed}}function bv(e,t){return Array.isArray(t)?t.reduce(bv,e):{...e,...t}}vv.ɵfac=function(e){return new(e||vv)(zo(Kc))},vv.ɵprov=Re({token:vv,factory:vv.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(vv,[{type:cd}],(function(){return[{type:Kc}]}),null);class wv{constructor(e,t,n,o,i){this._zone=e,this._injector=t,this._exceptionHandler=n,this._componentFactoryResolver=o,this._initStatus=i,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._onMicrotaskEmptySubscription=this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run((()=>{this.tick()}))}});const s=new r.Observable((e=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular((()=>{e.next(this._stable),e.complete()}))})),a=new r.Observable((e=>{let t;this._zone.runOutsideAngular((()=>{t=this._zone.onStable.subscribe((()=>{Jm.assertNotInAngularZone(),Gm((()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,e.next(!0))}))}))}));const n=this._zone.onUnstable.subscribe((()=>{Jm.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular((()=>{e.next(!1)})))}));return()=>{t.unsubscribe(),n.unsubscribe()}}));this.isStable=(0,r.merge)(s,a.pipe(re()))}bootstrap(e,t){if(!this._initStatus.done){const e="undefined"==typeof ngDevMode||ngDevMode?"Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.":"";throw new pe(405,e)}let n;n=e instanceof sg?e:this._componentFactoryResolver.resolveComponentFactory(e),this.componentTypes.push(n.componentType);const r=uv(n)?void 0:this._injector.get(Ig),o=t||n.selector,i=n.create(Kc.NULL,[],o,r),s=i.location.nativeElement,a=i.injector.get(ov,null),l=a&&i.injector.get(iv);return a&&l&&l.registerApplication(s,a),i.onDestroy((()=>{this.detachView(i.hostView),_v(this.components,i),l&&l.unregisterApplication(s)})),this._loadComponent(i),("undefined"==typeof ngDevMode||ngDevMode)&&this._injector.get(Fm).log("Angular is running in development mode. Call enableProdMode() to enable production mode."),i}tick(){if(this._runningTick){const e="undefined"==typeof ngDevMode||ngDevMode?"ApplicationRef.tick is called recursively":"";throw new pe(101,e)}try{this._runningTick=!0;for(let e of this._views)e.detectChanges();if("undefined"==typeof ngDevMode||ngDevMode)for(let e of this._views)e.checkNoChanges()}catch(e){this._zone.runOutsideAngular((()=>this._exceptionHandler.handleError(e)))}finally{this._runningTick=!1}}attachView(e){const t=e;this._views.push(t),t.attachToAppRef(this)}detachView(e){const t=e;_v(this._views,t),t.detachFromAppRef()}_loadComponent(e){this.attachView(e.hostView),this.tick(),this.components.push(e),this._injector.get(Vm,[]).concat(this._bootstrapListeners).forEach((t=>t(e)))}ngOnDestroy(){this._views.slice().forEach((e=>e.destroy())),this._onMicrotaskEmptySubscription.unsubscribe()}get viewCount(){return this._views.length}}function _v(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}function Cv(e){for(let t=e.length-1;t>=0;t--)if(void 0!==e[t])return e[t]}wv.ɵfac=function(e){return new(e||wv)(zo(Jm),zo(Kc),zo(Ss),zo(lg),zo(Sm))},wv.ɵprov=Re({token:wv,factory:wv.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(wv,[{type:cd,args:[{providedIn:"root"}]}],(function(){return[{type:Jm},{type:Kc},{type:Ss},{type:lg},{type:Sm}]}),null);let Mv=!0,Dv=!1;function xv(){return Dv=!0,Mv}function Iv(){if(Dv)throw new Error("Cannot enable prod mode after platform setup.");(void 0===typeof ngDevMode||ngDevMode)&&(it.ngDevMode=!1),Mv=!1}function Ev(e){const t=Sg(e);if(!t)throw Ov(e);return new Ng(t)}function Tv(e){const t=Sg(e);if(!t)throw Ov(e);return t}function Ov(e){return new Error(`No module with ID ${e} loaded`)}class Sv{}function kv(e){return function(e,t,n){if(Rt(e)&&!n){const n=Dn(e.index,t);return new bg(n,n)}if(47&e.type){const e=t[16];return new bg(e,t)}return null}(Vn(),Pn(),16==(16&e))}Sv.__NG_ELEMENT_ID__=kv;class Av extends Sv{}class Nv extends Av{}class Pv{constructor(e,t){this.name=e,this.callback=t}}function jv(e){return e.map((e=>e.nativeElement))}class Rv{constructor(e){this.nativeNode=e}get parent(){const e=this.nativeNode.parentNode;return e?new Vv(e):null}get injector(){return eu(this.nativeNode)}get componentInstance(){const e=this.nativeNode;return e&&(Gc(e)||Yc(e))}get context(){return Gc(this.nativeNode)||Jc(this.nativeNode)}get listeners(){return ou(this.nativeNode).filter((e=>"dom"===e.type))}get references(){return function(e){const t=vs(e);return null===t?{}:(void 0===t.localRefs&&(t.localRefs=function(e,t){const n=e[1].data[t];if(n&&n.localNames){const t={};let r=n.index+1;for(let o=0;o<n.localNames.length;o+=2)t[n.localNames[o]]=e[r],r++;return t}return null}(t.lView,t.nodeIndex)),t.localRefs||{})}(this.nativeNode)}get providerTokens(){return function(e){const t=vs(e);if(null===t)return[];const n=t.lView[1],r=n.data[t.nodeIndex],o=[],i=1048575&r.providerIndexes,s=r.directiveEnd;for(let e=i;e<s;e++){let t=n.data[e];void 0!==(a=t).type&&void 0!==a.template&&void 0!==a.declaredInputs&&(t=t.type),o.push(t)}var a;return o}(this.nativeNode)}}class Vv extends Rv{constructor(e){ngDevMode&&Ne(e),super(e)}get nativeElement(){return this.nativeNode.nodeType==Node.ELEMENT_NODE?this.nativeNode:null}get name(){const e=vs(this.nativeNode);return null!==e?e.lView[1].data[e.nodeIndex].value:this.nativeNode.nodeName}get properties(){const e=vs(this.nativeNode);if(null===e)return{};const t=e.lView,n=t[1].data,r=n[e.nodeIndex],o={};return function(e,t){if(e){let n=Object.getPrototypeOf(e);const r=Node.prototype;for(;null!==n&&n!==r;){const r=Object.getOwnPropertyDescriptors(n);for(let n in r)if(!n.startsWith("__")&&!n.startsWith("on")){const r=e[n];$v(r)&&(t[n]=r)}n=Object.getPrototypeOf(n)}}}(this.nativeElement,o),function(e,t,n,r){let o=t.propertyBindings;if(null!==o)for(let t=0;t<o.length;t++){const i=o[t],s=r[i].split(Hs),a=s[0];if(s.length>1){let t=s[1];for(let e=1;e<s.length-1;e++)t+=ge(n[i+e-1])+s[e+1];e[a]=t}else e[a]=n[i]}}(o,r,t,n),o}get attributes(){const e={},t=this.nativeElement;if(!t)return e;const n=vs(t);if(null===n)return{};const r=n.lView[1].data[n.nodeIndex].attrs,o=[];if(r){let t=0;for(;t<r.length;){const n=r[t];if("string"!=typeof n)break;const i=r[t+1];e[n]=i,o.push(n.toLowerCase()),t+=2}}const i=t.attributes;for(let t=0;t<i.length;t++){const n=i[t],r=n.name.toLowerCase();-1===o.indexOf(r)&&(e[r]=n.value)}return e}get styles(){return this.nativeElement&&this.nativeElement.style?this.nativeElement.style:{}}get classes(){const e={},t=this.nativeElement.className;return("string"!=typeof t?t.baseVal.split(" "):t.split(" ")).forEach((t=>e[t]=!0)),e}get childNodes(){const e=this.nativeNode.childNodes,t=[];for(let n=0;n<e.length;n++){const r=e[n];t.push(qv(r))}return t}get children(){const e=this.nativeElement;if(!e)return[];const t=e.children,n=[];for(let e=0;e<t.length;e++){const r=t[e];n.push(qv(r))}return n}query(e){return this.queryAll(e)[0]||null}queryAll(e){const t=[];return Fv(this,e,t,!0),t}queryAllNodes(e){const t=[];return Fv(this,e,t,!1),t}triggerEventHandler(e,t){const n=this.nativeNode,r=[];this.listeners.forEach((o=>{if(o.name===e){const e=o.callback;e.call(n,t),r.push(e)}})),"function"==typeof n.eventListeners&&n.eventListeners(e).forEach((e=>{if(-1!==e.toString().indexOf("__ngUnwrap__")){const o=e("__ngUnwrap__");return-1===r.indexOf(o)&&o.call(n,t)}}))}}function $v(e){return"string"==typeof e||"boolean"==typeof e||"number"==typeof e||null===e}function Fv(e,t,n,r){const o=vs(e.nativeNode);null!==o?Lv(o.lView[1].data[o.nodeIndex],o.lView,t,n,r,e.nativeNode):Uv(e.nativeNode,t,n,r)}function Lv(e,t,n,r,o,i){ngDevMode&&Ft(e,t);const s=function(e,t){const n=null===e?-1:e.index;if(-1!==n){ngDevMode&&Ft(e,t);const r=bn(t[n]);return ngDevMode&&null!==r&&!mn(t[11])&&Ne(r),r}return null}(e,t);if(11&e.type){if(Bv(s,n,r,o,i),Rt(e)){const s=Dn(e.index,t);s&&s[1].firstChild&&Lv(s[1].firstChild,s,n,r,o,i)}else e.child&&Lv(e.child,t,n,r,o,i),s&&Uv(s,n,r,o);const a=t[e.index];Pt(a)&&Hv(a,n,r,o,i)}else if(4&e.type){const s=t[e.index];Bv(s[7],n,r,o,i),Hv(s,n,r,o,i)}else if(16&e.type){const s=t[16],a=s[6].projection[e.projection];if(Array.isArray(a))for(let e of a)Bv(e,n,r,o,i);else if(a){const e=s[3];Lv(e[1].data[a.index],e,n,r,o,i)}}else e.child&&Lv(e.child,t,n,r,o,i);if(i!==s){const s=4&e.flags?e.projectionNext:e.next;s&&Lv(s,t,n,r,o,i)}}function Hv(e,t,n,r,o){for(let i=At;i<e.length;i++){const s=e[i],a=s[1].firstChild;a&&Lv(a,s,t,n,r,o)}}function Bv(e,t,n,r,o){if(o!==e){const o=qv(e);if(!o)return;(r&&o instanceof Vv&&t(o)&&-1===n.indexOf(o)||!r&&t(o)&&-1===n.indexOf(o))&&n.push(o)}}function Uv(e,t,n,r){const o=e.childNodes,i=o.length;for(let e=0;e<i;e++){const i=o[e],s=qv(i);s&&((r&&s instanceof Vv&&t(s)&&-1===n.indexOf(s)||!r&&t(s)&&-1===n.indexOf(s))&&n.push(s),Uv(i,t,n,r))}}new Map;function qv(e){return e instanceof Node?(e.hasOwnProperty("__ng_debug__")||(e.__ng_debug__=e.nodeType==Node.ELEMENT_NODE?new Vv(e):new Rv(e)),e.__ng_debug__):null}function zv(e){return null}class Wv{constructor(){}supports(e){return Ou(e)}create(e){return new Zv(e)}}const Qv=(e,t)=>t;class Zv{constructor(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||Qv}forEachItem(e){let t;for(t=this._itHead;null!==t;t=t._next)e(t)}forEachOperation(e){let t=this._itHead,n=this._removalsHead,r=0,o=null;for(;t||n;){const i=!n||t&&t.currentIndex<Yv(n,r,o)?t:n,s=Yv(i,r,o),a=i.currentIndex;if(i===n)r--,n=n._nextRemoved;else if(t=t._next,null==i.previousIndex)r++;else{o||(o=[]);const e=s-r,t=a-r;if(e!=t){for(let n=0;n<e;n++){const r=n<o.length?o[n]:o[n]=0,i=r+n;t<=i&&i<e&&(o[n]=r+1)}o[i.previousIndex]=t-e}}s!==a&&e(i,s,a)}}forEachPreviousItem(e){let t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachMovedItem(e){let t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}forEachIdentityChange(e){let t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)}diff(e){if(null==e&&(e=[]),!Ou(e)){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${ae(e)}'. Only arrays and iterables are allowed`:"";throw new pe(900,t)}return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t,n,r,o=this._itHead,i=!1;if(Array.isArray(e)){this.length=e.length;for(let t=0;t<this.length;t++)n=e[t],r=this._trackByFn(t,n),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,n,r,t)),Object.is(o.item,n)||this._addIdentityChange(o,n)):(o=this._mismatch(o,n,r,t),i=!0),o=o._next}else t=0,function(e,t){if(Array.isArray(e))for(let n=0;n<e.length;n++)t(e[n]);else{const n=e[Eu()]();let r;for(;!(r=n.next()).done;)t(r.value)}}(e,(e=>{r=this._trackByFn(t,e),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,e,r,t)),Object.is(o.item,e)||this._addIdentityChange(o,e)):(o=this._mismatch(o,e,r,t),i=!0),o=o._next,t++})),this.length=t;return this._truncate(o),this.collection=e,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let e;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=e._nextMoved)e.previousIndex=e.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(e,t,n,r){let o;return null===e?o=this._itTail:(o=e._prev,this._remove(e)),null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,o,r)):null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(n,r))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,o,r)):e=this._addAfter(new Kv(t,n),o,r),e}_verifyReinsertion(e,t,n,r){let o=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==o?e=this._reinsertAfter(o,e._prev,r):e.currentIndex!=r&&(e.currentIndex=r,this._addToMoves(e,r)),e}_truncate(e){for(;null!==e;){const t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(e,t,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);const r=e._prevRemoved,o=e._nextRemoved;return null===r?this._removalsHead=o:r._nextRemoved=o,null===o?this._removalsTail=r:o._prevRemoved=r,this._insertAfter(e,t,n),this._addToMoves(e,n),e}_moveAfter(e,t,n){return this._unlink(e),this._insertAfter(e,t,n),this._addToMoves(e,n),e}_addAfter(e,t,n){return this._insertAfter(e,t,n),null===this._additionsTail?this._additionsTail=this._additionsHead=e:this._additionsTail=this._additionsTail._nextAdded=e,e}_insertAfter(e,t,n){const r=null===t?this._itHead:t._next;return e._next=r,e._prev=t,null===r?this._itTail=e:r._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new Jv),this._linkedRecords.put(e),e.currentIndex=n,e}_remove(e){return this._addToRemovals(this._unlink(e))}_unlink(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);const t=e._prev,n=e._next;return null===t?this._itHead=n:t._next=n,null===n?this._itTail=t:n._prev=t,e}_addToMoves(e,t){return e.previousIndex===t||(null===this._movesTail?this._movesTail=this._movesHead=e:this._movesTail=this._movesTail._nextMoved=e),e}_addToRemovals(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new Jv),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}_addIdentityChange(e,t){return e.item=t,null===this._identityChangesTail?this._identityChangesTail=this._identityChangesHead=e:this._identityChangesTail=this._identityChangesTail._nextIdentityChange=e,e}}class Kv{constructor(e,t){this.item=e,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class Gv{constructor(){this._head=null,this._tail=null}add(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}get(e,t){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===t||t<=n.currentIndex)&&Object.is(n.trackById,e))return n;return null}remove(e){const t=e._prevDup,n=e._nextDup;return null===t?this._head=n:t._nextDup=n,null===n?this._tail=t:n._prevDup=t,null===this._head}}class Jv{constructor(){this.map=new Map}put(e){const t=e.trackById;let n=this.map.get(t);n||(n=new Gv,this.map.set(t,n)),n.add(e)}get(e,t){const n=e,r=this.map.get(n);return r?r.get(e,t):null}remove(e){const t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function Yv(e,t,n){const r=e.previousIndex;if(null===r)return r;let o=0;return n&&r<n.length&&(o=n[r]),r+t+o}class Xv{constructor(){}supports(e){return e instanceof Map||Su(e)}create(){return new eb}}class eb{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(e){let t;for(t=this._mapHead;null!==t;t=t._next)e(t)}forEachPreviousItem(e){let t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)}forEachChangedItem(e){let t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}diff(e){if(e){if(!(e instanceof Map||Su(e))){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${ae(e)}'. Only maps and objects are allowed`:"";throw new pe(900,t)}}else e=new Map;return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t=this._mapHead;if(this._appendAfter=null,this._forEach(e,((e,n)=>{if(t&&t.key===n)this._maybeAddToChanges(t,e),this._appendAfter=t,t=t._next;else{const r=this._getOrCreateRecordForKey(n,e);t=this._insertBeforeOrAppend(t,r)}})),t){t._prev&&(t._prev._next=null),this._removalsHead=t;for(let e=t;null!==e;e=e._nextRemoved)e===this._mapHead&&(this._mapHead=null),this._records.delete(e.key),e._nextRemoved=e._next,e.previousValue=e.currentValue,e.currentValue=null,e._prev=null,e._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(e,t){if(e){const n=e._prev;return t._next=e,t._prev=n,e._prev=t,n&&(n._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}_getOrCreateRecordForKey(e,t){if(this._records.has(e)){const n=this._records.get(e);this._maybeAddToChanges(n,t);const r=n._prev,o=n._next;return r&&(r._next=o),o&&(o._prev=r),n._next=null,n._prev=null,n}const n=new tb(e);return this._records.set(e,n),n.currentValue=t,this._addToAdditions(n),n}_reset(){if(this.isDirty){let e;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(e,t){Object.is(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))}_addToAdditions(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)}_addToChanges(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)}_forEach(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach((n=>t(e[n],n)))}}class tb{constructor(e){this.key=e,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}function nb(){return new rb([new Wv])}class rb{constructor(e){this.factories=e}static create(e,t){if(null!=t){const n=t.factories.slice();e=e.concat(n)}return new rb(e)}static extend(e){return{provide:rb,useFactory:t=>rb.create(e,t||nb()),deps:[[rb,new Xo,new Jo]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(null!=t)return t;{const t="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}' of type '${n=e,n.name||typeof n}'`:"";throw new pe(901,t)}var n}}function ob(){return new ib([new Xv])}rb.ɵprov=Re({token:rb,providedIn:"root",factory:nb});class ib{constructor(e){this.factories=e}static create(e,t){if(t){const n=t.factories.slice();e=e.concat(n)}return new ib(e)}static extend(e){return{provide:ib,useFactory:t=>ib.create(e,t||ob()),deps:[[ib,new Xo,new Jo]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(t)return t;const n="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}'`:"";throw new pe(901,n)}}ib.ɵprov=Re({token:ib,providedIn:"root",factory:ob});const sb=[new Xv],ab=[new Wv],lb=new rb(ab),cb=new ib(sb),ub=hv(null,"core",[{provide:Rm,useValue:"unknown"},{provide:vv,deps:[Kc]},{provide:iv,deps:[]},{provide:Fm,deps:[]}]);class db{constructor(e){}}db.ɵfac=function(e){return new(e||db)(zo(wv))},db.ɵmod=_t({type:db}),db.ɵinj=$e({}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(db,[{type:Em}],(function(){return[{type:wv}]}),null);const fb=!0;function pb(e){return wo({usage:1,kind:"directive",type:e.type}).compileDirectiveDeclaration(jy,`ng:///${e.type.name}/ɵfac.js`,e)}function hb(e){xg(e.type,e.decorators,e.ctorParameters??null,e.propDecorators??null)}function gb(e){return wo({usage:1,kind:"component",type:e.type}).compileComponentDeclaration(jy,`ng:///${e.type.name}/ɵcmp.js`,e)}function yb(e){return wo({usage:1,kind:mb(e.target),type:e.type}).compileFactoryDeclaration(jy,`ng:///${e.type.name}/ɵfac.js`,e)}function mb(e){switch(e){case vo.Directive:return"directive";case vo.Component:return"component";case vo.Injectable:return"injectable";case vo.Pipe:return"pipe";case vo.NgModule:return"NgModule"}}function vb(e){return wo({usage:1,kind:"injectable",type:e.type}).compileInjectableDeclaration(jy,`ng:///${e.type.name}/ɵprov.js`,e)}function bb(e){return wo({usage:1,kind:"NgModule",type:e.type}).compileInjectorDeclaration(jy,`ng:///${e.type.name}/ɵinj.js`,e)}function wb(e){return wo({usage:1,kind:"NgModule",type:e.type}).compileNgModuleDeclaration(jy,`ng:///${e.type.name}/ɵmod.js`,e)}function _b(e){return wo({usage:1,kind:"pipe",type:e.type}).compilePipeDeclaration(jy,`ng:///${e.type.name}/ɵpipe.js`,e)}"undefined"!=typeof ngDevMode&&ngDevMode&&(it.$localize=it.$localize||function(){throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)")})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{"use strict";var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.IProofmeDataStorage=e.IProofmeDataPurpose=e.ProofmeUtils=e.ProofmeUtilsProvider=e.WebRtcProvider=e.SignalingServer=void 0;var t=n(515);Object.defineProperty(e,"SignalingServer",{enumerable:!0,get:function(){return t.SignalingServer}});var o=n(299);Object.defineProperty(e,"WebRtcProvider",{enumerable:!0,get:function(){return o.WebRtcProvider}});var i=n(611);Object.defineProperty(e,"ProofmeUtilsProvider",{enumerable:!0,get:function(){return i.ProofmeUtilsProvider}});var s=n(810);Object.defineProperty(e,"ProofmeUtils",{enumerable:!0,get:function(){return s.ProofmeUtils}});var a=n(945);Object.defineProperty(e,"IProofmeDataPurpose",{enumerable:!0,get:function(){return a.IProofmeDataPurpose}});var l=n(491);Object.defineProperty(e,"IProofmeDataStorage",{enumerable:!0,get:function(){return l.IProofmeDataStorage}})})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,