/*! For license information please see proofmeid-webrtc-web.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ProofmeId=t():e.ProofmeId=t()}(self,(function(){return(()=>{var e={869:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EClaimType=void 0,(n=t.EClaimType||(t.EClaimType={}))[n.SIGNED_CONTENT=1e3]="SIGNED_CONTENT",n[n.COMPANY_INFO=2e3]="COMPANY_INFO",n[n.VALIDATORS=2001]="VALIDATORS",n[n.USERS=2002]="USERS"},365:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EDIDAccessLevel=void 0,(n=t.EDIDAccessLevel||(t.EDIDAccessLevel={})).NONE="0",n.MANAGEMENT_KEY="1",n.ACTION_KEY="2",n.CLAIM_SIGNER_KEY="3",n.ENCRYPTION_KEY="4"},346:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EMimeType=void 0,(n=t.EMimeType||(t.EMimeType={})).AAC="audio/aac",n.ABW="application/x-abiword",n.ARC="application/x-freearc",n.AVI="video/x-msvideo",n.AZW="application/vnd.amazon.ebook",n.BIN="application/octet-stream",n.BMP="image/bmp",n.BZ="application/x-bzip",n.BZ2="application/x-bzip2",n.CSH="application/x-csh",n.CSS="text/css",n.CSV="text/csv",n.DOC="application/msword",n.DOCX="application/vnd.openxmlformats-officedocument.wordprocessingml.document",n.EOT="application/vnd.ms-fontobject",n.EPUB="application/epub+zip",n.GZ="application/gzip",n.GIF="image/gif",n.HTM="text/html",n.HTML="text/html",n.ICO="image/vnd.microsoft.icon",n.ICS="text/calendar",n.JAR="application/java-archive",n.JPEG=".jpg",n.JS="text/javascript",n.JSON="application/json",n.JSONLD="application/ld+json",n.MID=".midi",n.MJS="text/javascript",n.MP3="audio/mpeg",n.MPEG="video/mpeg",n.MPKG="application/vnd.apple.installer+xml",n.ODP="application/vnd.oasis.opendocument.presentation",n.ODS="application/vnd.oasis.opendocument.spreadsheet",n.ODT="application/vnd.oasis.opendocument.text",n.OGA="audio/ogg",n.OGV="video/ogg",n.OGX="application/ogg",n.OPUS="audio/opus",n.OTF="font/otf",n.PNG="image/png",n.PDF="application/pdf",n.PHP="application/php",n.PPT="application/vnd.ms-powerpoint",n.PPTX="application/vnd.openxmlformats-officedocument.presentationml.presentation",n.RAR="application/vnd.rar",n.RTF="application/rtf",n.SH="application/x-sh",n.SVG="image/svg+xml",n.SWF="application/x-shockwave-flash",n.TAR="application/x-tar",n.TIF="image/tiff",n.TIFF="image/tiff",n.TS="video/mp2t",n.TTF="font/ttf",n.TXT="text/plain",n.URI="text/x-uri",n.VSD="application/vnd.visio",n.WAV="audio/wav",n.WEBA="audio/webm",n.WEBM="video/webm",n.WEBP="image/webp",n.WOFF="font/woff",n.WOFF2="font/woff2",n.XHTML="application/xhtml+xml",n.XLS="application/vnd.ms-excel",n.XLSX="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",n.XML="XML",n.XUL="application/vnd.mozilla.xul+xml",n.ZIP="application/zip",n.GP3="video/3gpp",n.G23="video/3gpp2",n.Z7="application/x-7z-compressed"},945:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EProofmeDataPurpose=void 0,(n=t.EProofmeDataPurpose||(t.EProofmeDataPurpose={})).IDENTIFICATION="IDENTIFICATION",n.AGE_VERIFICATION="AGE_VERIFICATION",n.PROOFME_CONNECT="PROOFME_CONNECT",n.KYC_VERIFICATION="KYC_VERIFICATION",n.ACCESS_CONTROL="ACCESS_CONTROL"},491:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EProofmeDataStorage=void 0,(n=t.EProofmeDataStorage||(t.EProofmeDataStorage={})).DATABASE="DATABASE",n.CERTIFICATE="CERTIFICATE",n.NOT_STORED="NOT_STORED"},632:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ESignatureTypes=void 0,(n=t.ESignatureTypes||(t.ESignatureTypes={})).ECDSA="ECDSA",n.RSA="RSA",n.HMAC="HMAC"},390:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getRTCConnectionConfig=t.validChannelId=void 0;const r=o(n(235));t.validChannelId=function(e,t){return 1===t.filter((t=>t.uuid===e&&null===t.channel&&!0===t.host)).length},t.getRTCConnectionConfig=function(e,t,n,o){const i=`${Math.floor(Date.now()/1e3)+t}:${e}`;return{iceCandidatePoolSize:5,iceServers:[{urls:o,credential:r.default.createHmac("sha1",n).update(i.toString()).digest("base64"),username:i}]}}},611:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtilsProvider=void 0;const s=n(810),a=i(n(9));class c{proofmeUtils=new s.ProofmeUtils;async isValidCredentials(e,t,n,o,r,i){return this.proofmeUtils.isValidCredentials(e,t,n,o,r,i)}getSignature(e,t){return this.proofmeUtils.getSignature(e,t)}signCredentialObject(e,t){return this.proofmeUtils.signCredentialObject(e,t)}signRequestedCredentials(e,t,n){return this.proofmeUtils.signRequestedCredentials(e,t,n)}async isValidRequestedCredentials(e,t,n){return this.proofmeUtils.isValidRequestedCredentials(e,t,n)}async getLicenseClaim(e,t,n){return this.proofmeUtils.getLicenseClaim(e,t,n)}async isValidLicenseCredentials(e,t,n){return this.proofmeUtils.isValidLicenseCredentials(e,t,n)}generateChallenge(e,t,n,o){return this.proofmeUtils.generateChallenge(e,t,n,o)}async getClaim(e,t,n,o){return await this.proofmeUtils.getClaim(e,t,n,o)}getContractAddressFromDid(e){return this.proofmeUtils.getContractAddressFromDid(e)}static ɵfac=function(e){return new(e||c)};static ɵprov=a.ɵɵdefineInjectable({token:c,factory:c.ɵfac})}t.ProofmeUtilsProvider=c},810:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtils=void 0;const r=o(n(519)),i=n(869),s=n(365),a=n(632),c=n(621);t.ProofmeUtils=class{excludedCredentialProviders=["OWN","ADDITIONAL_INFO","SIGNATURE","ADDRESS"];async isValidCredentials(e,t,n,o,i,s){const a=new r.default(t),c=this.requestedCredentialsCorrect(e,n);if(!c.success)return c.credentials=e,c;const l=await this.checkCredentials(e,t,i,s);if(!l.valid)return l;for(const e of o)a.utils.isAddress(e)||(console.error(`Trusted party did ${e} is NOT a valid address and is removed.`),o=o.filter((t=>t!==e)));if(o.length>0){const t=[];let n=0,r=0;const i=[];for(const[s]of Object.entries(e.credentials))if(!this.excludedCredentialProviders.includes(s))for(const[c,l]of Object.entries(e.credentials[s].credentials)){r++;const e=l.issuer.id.split(":")[2];let s=!1,u=null,f=null,d=!0;for(const r of o){const o=t.find((t=>t.issuerDidContractAddress===e&&t.did===r));let p=null;if(o?p=o.claim:(p=await this.getClaims(e,r,a),t.push({issuerDidContractAddress:e,did:r,claim:p})),p)if(d=!1,new Date(p.expirationDate)>new Date){const e=p.keys;f=e;const t=`${l.provider}_${c}`;if(!e.includes(t)){u=t;break}if(!u){n++,s=!0;break}}else i.push({credential:l,valid:!1,code:14,message:"Claim expired."})}d?i.push({credential:l,valid:!1,code:13,message:`No claims found to check. Checked dids ${o}`}):!u||s||i.push({credential:l,valid:!1,code:12,message:`Tried to validate attribute ${u} but provider was not allowed to issue. Allowed attributes: ${f.join(", ")}`})}return n===r?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential",requestedCheckResult:c}:{valid:!1,code:1,message:"Invalid credentials",invalidCredentials:i}}return{valid:!1,code:10,message:"No trusted parties to check."}}async checkCredentials(e,t,n,o){"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e);const i=new r.default(t),s=[];let a=0,l=0;const u=[];for(const[r]of Object.entries(e.credentials)){if(this.excludedCredentialProviders.includes(r))continue;const f={credentials:{[r]:JSON.parse(JSON.stringify(e.credentials[r]))}};delete f.credentials[r].proof.signature;const d=i.eth.accounts.recover(JSON.stringify(f),e.credentials[r].proof.signature);if(this.userCredentialSignatureWrong(e.credentials[r].proof.holder,d))for(const[,f]of Object.entries(e.credentials[r].credentials)){if(l++,!f.version){u.push({credential:f,code:8,message:"Incorrect credential version. Renew your credentials"});continue}const d=new Date(f.expirationDate),p=new Date;if(p>d){u.push({credential:f,code:7,message:`Your credential expired on ${d}`});continue}const h=new Date(e.credentials[r].proof.nonce);if(this.calculateMinutesDifference(p,h)>5&&n)u.push({credential:f,code:2,message:"Nonce too old"});else if(this.issuerCredentialSignatureWrong(f,i)){const n=f.proof.holder,l=f.issuer.id.split(":")[2];if(await this.correctDidContractKey(i,t,c.claimHolderAbi,n,l,s)){const n=e.credentials[r].proof.holder,l=f.id.split(":")[2];await this.correctDidContractKey(i,t,c.claimHolderAbi,n,l,s)?o&&void 0!==f.verified&&!0!==f.verified?u.push({credential:f,code:15,message:"Liveness check required but credential not verified"}):a++:u.push({credential:f,code:6,message:"User did incorrect"})}else u.push({credential:f,code:5,message:"Issuer did incorrect"})}else u.push({credential:f,code:4,message:"Issuer signature incorrect"})}else u.push({credential:e.credentials[r],code:3,message:"User signature incorrect"})}return a===l?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential"}:{valid:!1,code:1,message:"Invalid credential",invalidCredentials:u}}userCredentialSignatureWrong(e,t){return e===t||(console.error(`User signature of credential ${e} does not match recoveredAddress ${t}`),!1)}issuerCredentialSignatureWrong(e,t){const n=e.proof.signature,o=e.proof.holder,r=JSON.parse(JSON.stringify(e));delete r.proof.signature;const i=t.eth.accounts.recover(JSON.stringify(r),n);return o===i||(console.error(`Issuer signature of credential ${o} does not match recoveredAddress ${i}`),!1)}async correctDidContractKey(e,t,n,o,i,s){const a=s.find((e=>e.did==i&&e.holderKey===o));if(a)return a.result;{const a=[];if(i===o)return s.push({did:i,holderKey:o,result:!0}),!0;{const c=this.getSha3Key(o,e),l=new(new r.default(t).eth.Contract)(n,i);if(!this.knownAddressesContains(a,c,i)){const e=parseInt(await this.getKeyPurpose(l,c),10);if(0===e||e>3)return s.push({did:i,holderKey:o,result:!1}),!1;a.push({sha3Key:c,didAddress:i})}return s.push({did:i,holderKey:o,result:!0}),!0}}}knownAddressesContains(e,t,n){for(const o of e)if(o.sha3Key===t&&o.didContractAddress===n)return!0}getSha3Key(e,t){return t.utils.keccak256(e)}async getKeyPurpose(e,t){return null===e.options.address?Promise.resolve(null):await e.methods.getKeyPurpose(t).call()}calculateMinutesDifference(e,t){let n=(e.getTime()-t.getTime())/1e3;return n/=60,Math.abs(Math.round(n))}reOrderCredentialObject(e){for(const t of Object.keys(e.credentials)){const n=[];for(const o of Object.keys(e.credentials[t].credentials))n.push(o);n.sort();const o={};for(const r of n){const n=this.reOrderCredential(e.credentials[t].credentials[r]);o[r]=n}e.credentials[t].proof=this.reOrderCredentialProof(e.credentials[t].proof),e.credentials[t]={credentials:o,proof:e.credentials[t].proof}}return e}reOrderCredential(e){return this.sortObjectAlphabetically(e)}sortObjectAlphabetically(e){const t={},n=Object.keys(e);n.sort(((e,t)=>(e=e.toLowerCase())<(t=t.toLowerCase())?-1:e>t?1:0));for(const o in n){const r=n[o];null===e[r]||"object"!=typeof e[r]||e[r]instanceof Array?t[r]=e[r]:t[r]=this.sortObjectAlphabetically(e[r])}return t}reOrderCredentialProof(e){return{holder:e.holder,nonce:e.nonce,signature:e.signature,type:e.type}}getSignature(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderObject(e),(new r.default).eth.accounts.sign(JSON.stringify(e),t).signature}reOrderObject(e){return this.sortObjectAlphabetically(e)}signCredentialObject(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e),(new r.default).eth.accounts.sign(JSON.stringify(e),t).signature}async getClaims(e,t,n){const o=new n.eth.Contract(c.claimHolderAbi,t),r=await o.methods.getClaimIdsByType(e).call();if(!(r.length>0))return Promise.resolve(null);try{const e=await o.methods.getClaim(r[r.length-1]).call(),t=JSON.parse(n.utils.toAscii(e.data));return Promise.resolve(t)}catch(e){return Promise.resolve(null)}}async getClaim(e,t,n,o){const i=new r.default(n),s=new i.eth.Contract(o,t),a=await s.methods.getClaimIdsByType(e).call();if(!(a.length>0))return Promise.resolve(null);try{const e=await s.methods.getClaim(a[a.length-1]).call(),t=i.utils.toAscii(e.data);if(t.length>1){const e=JSON.parse(t);return Promise.resolve(e)}return Promise.resolve(null)}catch(e){return console.log("Error: ",e),Promise.resolve(null)}}requestedCredentialsCorrect(e,t){const n={success:!0,missingKeys:[]};for(const o of t.credentials)if(o.required&&"ADDITIONAL_INFO"===o.provider){const t=Object.keys(e.credentials[o.provider].credentials);for(const r of t){const t=e.credentials[o.provider].credentials[r];t.required&&t.key.find((e=>!e.answer))&&(n.success=!1,n.missingKeys.push(t))}}else if(o.required){Array.isArray(o.provider)||(o.provider=[o.provider]);let t=!1;for(const n of o.provider)e.credentials[n]&&e.credentials[n].credentials&&e.credentials[n].credentials[o.key]&&(t=!0);t||(n.success=!1,n.missingKeys.push(o))}return n}recoverAddressFromSignature(e,t,n){const o=new r.default;return!0===n?(e=this.sortObjectAlphabetically(JSON.parse(e)),o.eth.accounts.recover(JSON.stringify(e),t)):o.eth.accounts.recover(e,t)}signRequestedCredentials(e,t,n){e.proof={holder:t,nonce:Date.now(),type:a.ESignatureTypes.ECDSA};const o=this.getSignature(e,n);return e.proof.signature=o,e}async isValidRequestedCredentials(e,t,n){if(e?.proof?.signature){const o=JSON.parse(JSON.stringify(e));delete o.proof.signature;const i=this.recoverAddressFromSignature(JSON.stringify(o),e.proof.signature,!0),a=new r.default(t),c=e.id;if(i!==e.proof.holder)return console.error(`Recovered address ${i} does not match holder address ${e.proof.holder}`),!1;const l=new a.eth.Contract(n,this.getContractAddressFromDid(c)),u=this.getSha3Key(i,a),f=await this.getKeyPurpose(l,u);return f===s.EDIDAccessLevel.MANAGEMENT_KEY||f===s.EDIDAccessLevel.ACTION_KEY}return console.error("Requested Credentials doesn't have a signature in the proof. Not checking"),!1}async getLicenseClaim(e,t,n){const o=e.id;return await this.getClaim(i.EClaimType.COMPANY_INFO,this.getContractAddressFromDid(o),t,n)}async isValidLicenseCredentials(e,t,n){if(e?.proof?.signature){const o=JSON.parse(JSON.stringify(e));delete o.proof.signature;const i=this.recoverAddressFromSignature(JSON.stringify(o),e.proof.signature,!0),a=new r.default(t);if(i!==o.proof.holder)return console.error(`Recovered address ${i} does not match holder address ${o.proof.holder}`),!1;const c=o.issuer.id.replace(/(did:didux|:)/g,""),l=new a.eth.Contract(n,c),u=this.getSha3Key(i,a),f=await this.getKeyPurpose(l,u);return f!==s.EDIDAccessLevel.MANAGEMENT_KEY&&f!==s.EDIDAccessLevel.ACTION_KEY?(console.error(`Keypurpose ${f} not MANAGEMENT_KEY or ACTION_KEY`),!1):new Date>new Date(e.expirationDate)?(console.error(`Claim expired on ${e.expirationDate}. Please re-new`),!1):e.credentialSubject.credential.value.status}return console.error("Requested Credentials doesn't have a signature in the proof. Not checking. Probably this license has not been approved yet? Unapproved licences don't have a proof, only claim info"),!1}privateKeyToPublicKey(e){return(new r.default).eth.accounts.privateKeyToAccount(e).address}generateChallenge(e,t,n,o){const i=new r.default,s=Math.floor(Date.now()/1e3).toString(),a=`${e}-${t}-${n}-${s}`;return{did:t,publicKey:e,endpoint:n,timestamp:s,challenge:a,signature:i.eth.accounts.sign(a,o).signature}}getContractAddressFromDid(e){let t=e;const n=e.split(":");if(2===n.length)return console.error("Unsupported did:",e),null;if(3===n.length){if("did"!==n[0])return console.error("Unsupported did:",e),null;if("didux"!==n[1])return console.error("Unsupported chain:",n[1]),null;t=n[2]}return t}}},930:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SignalServerV2=void 0;const o=n(964),r=n(828),i=n(367),s=n(390),a=n(914);t.SignalServerV2=class{wsServer;wsRequest$=new o.Subject;startSignal(e){this.wsServer=new i.server({httpServer:e,autoAcceptConnections:!1}),this.wsServer.on("request",(async e=>{this.wsRequest$.next(e)}))}sendTo(e,t){e?e.sendUTF(JSON.stringify(t)):console.error("Tried to send this over undefined connection:",t)}rejectConnection(e,t){t.reject(),console.error((new Date).toISOString()+" "+e),console.error((new Date).toISOString()+" Connection from remoteAddress "+t.remoteAddresses+" rejected.")}async setupP2PConnection(e,t,n,o,i,c,l,u,f,d,p,h){const g=e.accept(null,e.origin);if(console.log(`Library - Accepted ${e.origin} valid signed ${t}`),g.uuid=(0,r.v4)(),g.did=t?e?.resourceURL?.query?.did?.toString():null,g.publicKey=t?e?.resourceURL?.query?.publickey?.toString():null,g.authenticated=t,g.channel=n,this.setupWebsocketListeners(g),"validator"===h&&t&&null===n||o&&null===n){g.host=!0,g.origin=h;const e=(0,s.getRTCConnectionConfig)("host",i,l,c);console.log("Library - Host waiting for connection"),this.sendTo(g,{type:"host",success:!0,message:`Host initialised ${g.uuid}`,channelId:g.uuid,signalServer:u,..."validator"===h&&{webRtcConnectionConfig:e}}),"validator"!==h&&(g.webRtcClient=new a.WebRTCClientV2(e,f,g,d,p),await g.webRtcClient.setupPeerconnection(g.uuid))}else if(null!==n){const e=this.wsServer.connections.find((e=>e.uuid===n&&null===e.channel&&!0===e.host));if(e){e.channel=g.uuid,g.channel=e.uuid,console.log(`Library - Client connecting to ${n}`);const t=(0,s.getRTCConnectionConfig)("client",i,l,c);this.sendTo(g,{type:"client",success:!0,message:`Client initialised ${g.uuid}`,channelId:n,webRtcConnectionConfig:t}),"validator"!==e.origin&&(e.webRtcClient.clientChannel=g,e.webRtcClient.data={...e.webRtcClient.data,clientData:p})}else g.close()}else console.error("Library - Not a client or host"),g.close();return g}setupWebsocketListeners(e){e.on("message",(async t=>{let n;try{"utf8Data"in t&&(n=JSON.parse(t.utf8Data))}catch(e){console.error("Library - Websocket connection invalid JSON",e),n={type:null}}const{type:o,offer:r,answer:i,candidate:s}=n;switch(o){case"offer":if(!e.host&&e.channel){const t=this.wsServer.connections.find((t=>t.channel===e.uuid&&!0===t.host));t?"validator"===t.origin?this.sendTo(t,{type:"offer",success:!0,message:"Client shared an offer",offer:r}):(await t.webRtcClient.setRemoteDescription(r),await t.webRtcClient.sendAnswer()):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close();break;case"answer":if(e.host&&e.channel&&"validator"===e.origin){const t=this.wsServer.connections.find((t=>t.channel===e.uuid));t?this.sendTo(t,{type:"answer",success:!0,message:"Client shared an answer",answer:i}):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close();break;case"candidate":if(e.channel){const t=this.wsServer.connections.find((t=>t.channel===e.uuid));t?"validator"===t.origin||"validator"===e.origin?this.sendTo(t,{type:"candidate",success:!0,message:"Candidate shared",candidate:s}):t.webRtcClient.addCandidate(s):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close()}})),e.on("close",((t,n)=>{console.log(`Library - ${(new Date).toISOString()} - Peer ${e.remoteAddress} disconnected, Reason ${t}, description ${n}`)}))}}},515:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.SignalingServer=void 0;const s=i(n(352)),a=n(828),c=i(n(85));t.SignalingServer=class{wsServer;rtcConnectionConfig;setRTCConnectionConfig(e){this.rtcConnectionConfig=e}getRTCConnectionConfig(e){if(this.rtcConnectionConfig.turnEnabled){const t=`${Math.floor(Date.now()/1e3)+this.rtcConnectionConfig.turnExpiration}:${e}`,n=c.createHmac("sha1",this.rtcConnectionConfig.turnSecret).update(t.toString()).digest("base64");return{iceCandidatePoolSize:5,iceServers:[{urls:this.rtcConnectionConfig.turnUrl,credential:n,username:t}]}}if(this.rtcConnectionConfig.stunEnabled)return{iceServers:[{urls:this.rtcConnectionConfig.stunUrl}]}}startSignal(e){this.wsServer=new s.Server({server:e});const t=(e,t)=>{e.send(JSON.stringify(t))};this.wsServer.on("connection",(e=>{e.uuid=(0,a.v4)(),e.did=null,e.host=!1,e.authenticated=!1,e.connected=null,e.on("error",(e=>{})),e.on("message",(n=>{let o;try{o=JSON.parse(n)}catch(e){o={}}const{type:r,token:i,host:s,offer:c,answer:l,candidate:u}=o;switch(r){case"auth":i?(e.authenticated=!0,t(e,{type:"AUTH",success:!0,message:"Authentication successful"})):t(e,{type:"auth",success:!1,message:"Could not validate token"});break;case"host":e.host=!0,t(e,{type:"host",success:!0,message:"Host initialised "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")});break;case"ping":t(e,{type:"pong"});break;case"connect":{const n=[...this.wsServer.clients].filter((e=>e.uuid===s&&null===e.connected&&!0===e.host));1===n.length?(t(n[0],{type:"connected",success:!0,message:"Client connected "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")}),t(e,{type:"connected",success:!0,message:"Connected to "+s,webRtcConnectionConfig:this.getRTCConnectionConfig("client")}),e.connected=n[0].uuid,n[0].connected=e.uuid):t(e,{type:"connected",success:!1,message:"Could not connect to "+s});break}case"offer":if(null!=e.connected&&this.wsServer.clients.size>0){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"offer",success:!0,offer:c}),t(e,{type:"offer",success:!0,offer:c})):t(e,{type:"offer",success:!1,offer:c,message:"Connection not found."})}else t(e,{type:"offer",success:!1,offer:c,message:"Too soon..."});break;case"answer":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"answer",success:!0,answer:l}),t(e,{type:"answer",success:!0,answer:l})):t(e,{type:"answer",success:!1,answer:l,message:"Connection not found."})}else t(e,{type:"answer",success:!1,answer:l,message:"Too soon..."});break;case"candidate":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?t(n[0],{type:"candidate",success:!0,candidate:u}):t(e,{type:"candidate",success:!1,candidate:u,message:"Connection not found."})}else t(e,{type:"candidate",success:!1,candidate:u,message:"Too soon..."});break;case"leave":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));e.uuid=(0,a.v4)(),1===n.length?(t(n[0],{type:"leave",success:!0,message:"Connection left on receive leave"}),n[0].connected=null,t(e,{type:"leave",success:!0,message:"Connection left.",uuid:e.uuid})):t(e,{type:"leave",success:!1,message:"Connection not found.",uuid:e.uuid}),e.connected=null}else e.uuid=(0,a.v4)(),t(e,{type:"leave",success:!1,message:"Not connected to host/client.",uuid:e.uuid});break;default:t(e,{type:"error",message:"Command not found: "+r})}})),e.on("close",((e,n,o)=>{if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length&&(t(n[0],{type:"leave",success:!0,message:"Connection left on websocket close"}),n[0].connected=null),e.connected=null}})),e.send(JSON.stringify({type:"connect",message:"Well hello there, I am the Signaling Server",success:!0}))}))}}},621:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.claimHolderAbi=void 0,t.claimHolderAbi=[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}]},906:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Identity=void 0,t.Identity={abi:[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_str",type:"bytes"},{name:"_offset",type:"uint256"},{name:"_length",type:"uint256"}],name:"getBytes",outputs:[{name:"",type:"bytes"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_str",type:"string"},{name:"_offset",type:"uint256"},{name:"_length",type:"uint256"}],name:"getString",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[{name:"_claimType",type:"uint256[]"},{name:"_scheme",type:"uint256[]"},{name:"_issuer",type:"address[]"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"},{name:"_sigSizes",type:"uint256[]"},{name:"dataSizes",type:"uint256[]"},{name:"uriSizes",type:"uint256[]"}],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}],data:"60806040523480156200001157600080fd5b50604051620033333803806200333383398101806040528101908080518201929190602001805182019291906020018051820192919060200180518201929190602001805182019291906020018051820192919060200180518201929190602001805182019291906020018051820192919050505060008060008060008033604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209050806001600083600019166000191681526020019081526020016000206002018160001916905550600180600083600019166000191681526020019081526020016000206000018190555060018060008360001916600019168152602001908152602001600020600101819055506002600060018152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600180600083600019166000191681526020019081526020016000206000015482600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a450600093506000925060009150600090505b8d51811015620007ba578b818151811015156200020f57fe5b906020019060200201518e828151811015156200022857fe5b90602001906020020151604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001925050506040518091039020945060c0604051908101604052808f83815181101515620002a657fe5b9060200190602002015181526020018e83815181101515620002c457fe5b9060200190602002015181526020018d83815181101515620002e257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1681526020016200033b8d878c868151811015156200031c57fe5b90602001906020020151620007ce640100000000026401000000009004565b8152602001620003748c858b868151811015156200035557fe5b90602001906020020151620007ce640100000000026401000000009004565b8152602001620003ad8b868a868151811015156200038e57fe5b90602001906020020151620008da640100000000026401000000009004565b815250600460008760001916600019168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019062000444929190620009ec565b50608082015181600401908051906020019062000463929190620009ec565b5060a08201518160050190805190602001906200048292919062000a73565b5090505087818151811015156200049557fe5b90602001906020020151840193508581815181101515620004b257fe5b90602001906020020151830192508681815181101515620004cf57fe5b906020019060200201518201915060046000866000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166004600087600019166000191681526020019081526020016000206000015486600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5600460008a6000191660001916815260200190815260200160002060010154600460008b60001916600019168152602001908152602001600020600301600460008c60001916600019168152602001908152602001600020600401600460008d60001916600019168152602001908152602001600020600501604051808581526020018060200180602001806020018481038452878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200068b5780601f106200065f576101008083540402835291602001916200068b565b820191906000526020600020905b8154815290600101906020018083116200066d57829003601f168201915b5050848103835286818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620007125780601f10620006e65761010080835404028352916020019162000712565b820191906000526020600020905b815481529060010190602001808311620006f457829003601f168201915b5050848103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620007995780601f106200076d5761010080835404028352916020019162000799565b820191906000526020600020905b8154815290600101906020018083116200077b57829003601f168201915b505097505050505050505060405180910390a48080600101915050620001f6565b505050505050505050505050505062000b22565b606080600080846040519080825280601f01601f191660200182016040528015620008085781602001602082028038833980820191505090505b509250600091508590505b848601811015620008cd5786818151811015156200082d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156200088757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505062000813565b8293505050509392505050565b6060806060600080879350856040519080825280601f01601f191660200182016040528015620009195781602001602082028038833980820191505090505b509250600091508690505b858701811015620009de5783818151811015156200093e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156200099857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505062000924565b829450505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a2f57805160ff191683800117855562000a60565b8280016001018555821562000a60579182015b8281111562000a5f57825182559160200191906001019062000a42565b5b50905062000a6f919062000afa565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000ab657805160ff191683800117855562000ae7565b8280016001018555821562000ae7579182015b8281111562000ae657825182559160200191906001019062000ac9565b5b50905062000af6919062000afa565b5090565b62000b1f91905b8082111562000b1b57600081600090555060010162000b01565b5090565b90565b6128018062000b326000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063032c1a8a146100d557806312aaac701461011a5780631d38124014610175578063262b54f5146101d25780634eee424a146102545780635d2cfd611461029d578063747442d314610393578063862642f5146103e45780639010f7261461042d578063b1a34e0d146104af578063b61d27f6146105f4578063c9100bcb1461069b578063d202158d1461085e578063df9319be146108b1575b600080fd5b3480156100e157600080fd5b5061010460048036038101908080356000191690602001909291905050506109a7565b6040518082815260200191505060405180910390f35b34801561012657600080fd5b5061014960048036038101908080356000191690602001909291905050506109cf565b604051808481526020018381526020018260001916600019168152602001935050505060405180910390f35b34801561018157600080fd5b506101b860048036038101908080356000191690602001909291908035906020019092919080359060200190929190505050610a3e565b604051808215151515815260200191505060405180910390f35b3480156101de57600080fd5b506101fd60048036038101908080359060200190929190505050610cf7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610240578082015181840152602081019050610225565b505050509050019250505060405180910390f35b34801561026057600080fd5b506102836004803603810190808035600019169060200190929190505050610d66565b604051808215151515815260200191505060405180910390f35b3480156102a957600080fd5b50610318600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001909291905050506111e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035857808201518184015260208101905061033d565b50505050905090810190601f1680156103855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039f57600080fd5b506103ca600480360381019080803590602001909291908035151590602001909291905050506112eb565b604051808215151515815260200191505060405180910390f35b3480156103f057600080fd5b5061041360048036038101908080356000191690602001909291905050506117ff565b604051808215151515815260200191505060405180910390f35b34801561043957600080fd5b506104586004803603810190808035906020019092919050505061196a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561049b578082015181840152602081019050610480565b505050509050019250505060405180910390f35b3480156104bb57600080fd5b506105d66004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506119d9565b60405180826000191660001916815260200191505060405180910390f35b34801561060057600080fd5b50610685600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611efe565b6040518082815260200191505060405180910390f35b3480156106a757600080fd5b506106ca60048036038101908080356000191690602001909291905050506121e0565b604051808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610750578082015181840152602081019050610735565b50505050905090810190601f16801561077d5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156107b657808201518184015260208101905061079b565b50505050905090810190601f1680156107e35780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561081c578082015181840152602081019050610801565b50505050905090810190601f1680156108495780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561086a57600080fd5b506108976004803603810190808035600019169060200190929190803590602001909291905050506124aa565b604051808215151515815260200191505060405180910390f35b3480156108bd57600080fd5b5061092c600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050612513565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096c578082015181840152602081019050610951565b50505050905090810190601f1680156109995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000600160008360001916600019168152602001908152602001600020600001549050919050565b60008060006001600085600019166000191681526020019081526020016000206000015460016000866000191660001916815260200190815260200160002060010154600160008760001916600019168152602001908152602001600020600201549250925092509193909250565b60008360001916600160008660001916600019168152602001908152602001600020600201546000191614151515610ade576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b657920616c726561647920657869737473000000000000000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0957610b6e33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b1515610c08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742081526020017f6b6579000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8360016000866000191660001916815260200190815260200160002060020181600019169055508260016000866000191660001916815260200190815260200160002060000181905550816001600086600019166000191681526020019081526020016000206001018190555060026000848152602001908152602001600020849080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550818385600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a4600190509392505050565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610d5a57602002820191906000526020600020905b81546000191681526020019060010190808311610d42575b50505050509050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e9357610df833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b1515610e92576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742081526020017f6b6579000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b60046000836000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166004600084600019166000191681526020019081526020016000206000015483600019167f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a60046000876000191660001916815260200190815260200160002060010154600460008860001916600019168152602001908152602001600020600301600460008960001916600019168152602001908152602001600020600401600460008a600019166000191681526020019081526020016000206005016040518085815260200180602001806020018060200184810384528781815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561103d5780601f106110125761010080835404028352916020019161103d565b820191906000526020600020905b81548152906001019060200180831161102057829003601f168201915b50508481038352868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156110c05780601f10611095576101008083540402835291602001916110c0565b820191906000526020600020905b8154815290600101906020018083116110a357829003601f168201915b50508481038252858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156111435780601f1061111857610100808354040283529160200191611143565b820191906000526020600020905b81548152906001019060200180831161112657829003601f168201915b505097505050505050505060405180910390a460046000836000191660001916815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006111b99190612620565b6004820160006111c99190612620565b6005820160006111d99190612668565b505060019050919050565b606080600080846040519080825280601f01601f19166020018201604052801561121d5781602001602082028038833980820191505090505b509250600091508590505b8486018110156112de57868181518110151561124057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838381518110151561129957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250508080600101915050611228565b8293505050509392505050565b600061134833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060026124aa565b15156113bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f53656e64657220646f6573206e6f74206861766520616374696f6e206b65790081525060200191505060405180910390fd5b827fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d883604051808215151515815260200191505060405180910390a26001151582151514156117c55760016003600085815260200190815260200160002060030160006101000a81548160ff0219169083151502179055506003600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660036000858152602001908152602001600020600201600060405180838054600181600116156101000203166002900480156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b50508260ff168152602001925050506000604051808303816000865af19150509050801561168d5760016003600085815260200190815260200160002060030160016101000a81548160ff02191690831515021790555060036000848152602001908152602001600020600101546003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b860036000888152602001908152602001600020600201604051808060200182810382528381815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561167a5780601f1061164f5761010080835404028352916020019161167a565b820191906000526020600020905b81548152906001019060200180831161165d57829003601f168201915b50509250505060405180910390a46117f9565b60036000848152602001908152602001600020600101546003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a686003600088815260200190815260200160002060020160405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156117b25780601f10611787576101008083540402835291602001916117b2565b820191906000526020600020905b81548152906001019060200180831161179557829003601f168201915b50509250505060405180910390a46117f9565b60006003600085815260200190815260200160002060030160006101000a81548160ff021916908315150217905550600190505b92915050565b60008160001916600160008460001916600019168152602001908152602001600020600201546000191614151561189e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f2073756368206b657900000000000000000000000000000000000000000081525060200191505060405180910390fd5b600160008360001916600019168152602001908152602001600020600101546001600084600019166000191681526020019081526020016000206000015460016000856000191660001916815260200190815260200160002060020154600019167f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339760405160405180910390a460016000836000191660001916815260200190815260200160002060008082016000905560018201600090556002820160009055505060019050919050565b6060600260008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119cd57602002820191906000526020600020905b815460001916815260200190600101908083116119b5575b50505050509050919050565b6000808588604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200192505050604051809103902090503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b6257611ac733604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060036124aa565b1515611b61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f53656e64657220646f6573206e6f74206861766520636c61696d207369676e6581526020017f72206b657900000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8573ffffffffffffffffffffffffffffffffffffffff1660046000836000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611c1957600560008981526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505b876004600083600019166000191681526020019081526020016000206000018190555086600460008360001916600019168152602001908152602001600020600101819055508560046000836000191660001916815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846004600083600019166000191681526020019081526020016000206003019080519060200190611cee9291906126b0565b50836004600083600019166000191681526020019081526020016000206004019080519060200190611d219291906126b0565b50826004600083600019166000191681526020019081526020016000206005019080519060200190611d54929190612730565b508573ffffffffffffffffffffffffffffffffffffffff168882600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c58a89898960405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015611de5578082015181840152602081019050611dca565b50505050905090810190601f168015611e125780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611e4b578082015181840152602081019050611e30565b50505050905090810190601f168015611e785780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015611eb1578082015181840152602081019050611e96565b50505050905090810190601f168015611ede5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a4809150509695505050505050565b6000600360008054815260200190815260200160002060030160019054906101000a900460ff16151515611f9a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f416c72656164792065786563757465640000000000000000000000000000000081525060200191505060405180910390fd5b83600360008054815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260036000805481526020019081526020016000206001018190555081600360008054815260200190815260200160002060020190805190602001906120379291906126b0565b50828473ffffffffffffffffffffffffffffffffffffffff166000547f8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8856040518080602001828103825283818151815260200191508051906020019080838360005b838110156120b557808201518184015260208101905061209a565b50505050905090810190601f1680156120e25780820380516001836020036101000a031916815260200191505b509250505060405180910390a461214a33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b806121ac57506121ab33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060026124aa565b5b156121c0576121be60005460016112eb565b505b600080815480929190600101919050555060016000540390509392505050565b600080600060608060606004600088600019166000191681526020019081526020016000206000015460046000896000191660001916815260200190815260200160002060010154600460008a6000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008b60001916600019168152602001908152602001600020600301600460008c60001916600019168152602001908152602001600020600401600460008d60001916600019168152602001908152602001600020600501828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123565780601f1061232b57610100808354040283529160200191612356565b820191906000526020600020905b81548152906001019060200180831161233957829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123f25780601f106123c7576101008083540402835291602001916123f2565b820191906000526020600020905b8154815290600101906020018083116123d557829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561248e5780601f106124635761010080835404028352916020019161248e565b820191906000526020600020905b81548152906001019060200180831161247157829003601f168201915b5050505050905095509550955095509550955091939550919395565b6000806000600102600160008660001916600019168152602001908152602001600020600201546000191614156124e4576000915061250c565b8260016000866000191660001916815260200190815260200160002060000154111590508091505b5092915050565b6060806060600080879350856040519080825280601f01601f1916602001820160405280156125515781602001602082028038833980820191505090505b509250600091508690505b85870181101561261257838181518110151561257457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156125cd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505061255c565b829450505050509392505050565b50805460018160011615610100020316600290046000825580601f106126465750612665565b601f01602090049060005260206000209081019061266491906127b0565b5b50565b50805460018160011615610100020316600290046000825580601f1061268e57506126ad565b601f0160209004906000526020600020908101906126ac91906127b0565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126f157805160ff191683800117855561271f565b8280016001018555821561271f579182015b8281111561271e578251825591602001919060010190612703565b5b50905061272c91906127b0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061277157805160ff191683800117855561279f565b8280016001018555821561279f579182015b8281111561279e578251825591602001919060010190612783565b5b5090506127ac91906127b0565b5090565b6127d291905b808211156127ce5760008160009055506001016127b6565b5090565b905600a165627a7a723058200017634e62c856198c9c8d204756bd9ed5e12ca97b230682c6cc941e813b81330029"}},733:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSubDomain=void 0,t.getSubDomain=function(e){return e?.replace("http://","").replace("https://","").split(":")[0]}},918:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.checkKeyForDid=void 0;const r=n(906),i=o(n(519));t.checkKeyForDid=async function(e,t,n,o){try{const s=new i.default(e),a=new s.eth.Contract(r.Identity.abi,t),c=s.utils.sha3(n);return await a.methods.keyHasPurpose(c,o).call()}catch(e){return console.log("Library - Something went wrong: "+e),!1}}},299:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.WebRtcProvider=void 0;const s=n(964),a=n(553),c=n(367),l=i(n(9));class u{webRtcConfig;hostUuid;peerConnection=null;dataChannel=null;wsClient=null;receivedActions$=new s.BehaviorSubject(null);uuid$=new s.BehaviorSubject(null);websocketMessage$=new s.BehaviorSubject(null);websocketConnectionClosed$=new s.BehaviorSubject(null);websocketConnectionOpen$=new s.BehaviorSubject(null);websocketConnectionError$=new s.BehaviorSubject(null);webRtcConnectionConfig;connectionTimeout=null;pongCheckInterval=null;pingTimeout=null;WEBSOCKET_PING_ANSWER_DELAY=1e3;WEBSOCKET_PING_PONG_ALLOWED_TIME=3e3;getConfig(){return this.webRtcConfig}setHostUuid(e){this.hostUuid=e}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?(console.log(`Library - Sending action '${e}'`),this.dataChannel.send(JSON.stringify({action:e,...t}))):console.error(`Websocket - Attempted to send data with action ${e} but data channel is not open`)}sendWebsocketData(e,t){return this.wsClient&&this.wsClient.readyState===this.wsClient.OPEN?(this.wsClient.send(JSON.stringify({action:e,...t})),!0):(console.error(`Websocket - Attempted to send data with action ${e} but websocket channel is not open`),!1)}getWebsocket(){return this.wsClient}setUuid(e){this.uuid$.next(e)}disconnect(){clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),this.peerConnection&&this.peerConnection.close(),this.dataChannel&&this.dataChannel.close(),this.wsClient&&(this.wsClient.close(),this.wsClient.onclose=null),this.peerConnection=null,this.dataChannel=null,this.wsClient=null,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)}remoteDisconnect(){this.dataChannel&&"open"===this.dataChannel.readyState&&this.dataChannel.send(JSON.stringify({action:"disconnect"})),setTimeout((()=>{this.disconnect()}),1e3)}async sendOffer(e,t){const n=await e.createOffer();await e.setLocalDescription(n),t.send(JSON.stringify({type:"offer",offer:n}))}async launchWebsocketClient(e,t){this.webRtcConfig=e;let n=null;this.receivedActions$=new s.BehaviorSubject(null),this.connectionTimeout&&clearTimeout(this.connectionTimeout),this.uuid$=new s.BehaviorSubject(null),this.websocketMessage$=new s.BehaviorSubject(null),this.websocketConnectionClosed$=new s.BehaviorSubject(null),this.websocketConnectionOpen$=new s.BehaviorSubject(null),this.websocketConnectionError$=new s.BehaviorSubject(null);let o=this.webRtcConfig.signalingUrl;o||(console.log("Launch websocket - URL undefined, falling back to default"),o="wss://auth.proofme.id"),console.log("Launch websocket - Client URL:",o),console.log("Launch websocket - Channel:",e.channel),console.log("Launch websocket - Headers:",t);let r=null;r=o.includes("?")?`${o}&channel=${e.channel}`:`${o}?channel=${e.channel}`,e.data&&(r=`${r}&data=${e.data}`),e.keepalive&&(r=`${r}&keepalive=${e.keepalive}`),this.wsClient=new c.w3cwebsocket(r,null,null,t),this.connectionTimeout=setTimeout((()=>{!0!==n&&(this.websocketConnectionError$.next(!0),this.wsClient&&this.wsClient.close())}),1e4),this.wsClient.onerror=e=>{console.log("Websocket - Error: "+e.toString()),n=!1,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1),this.websocketConnectionError$.next(!0)},this.wsClient.onclose=()=>{console.log("Websocket - Connection closed"),this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)},this.wsClient.onopen=()=>{console.log("Websocket - Connection open"),n=!0,this.websocketConnectionClosed$.next(!1),this.websocketConnectionOpen$.next(!0)},this.wsClient.onmessage=async e=>{if(console.log("Websocket - Message:",e),this.websocketMessage$.next(e),e.data){let t;try{t=JSON.parse(e.data)}catch(e){console.error("Websocket - Message was not JSON"),t={}}const{type:n,message:o,success:r,channelId:i,offer:s,answer:c,candidate:l,webRtcConnectionConfig:u}=t;switch(n){case"error":console.log("Websocket - Error message:",o),"Command not found: ping"==o&&(clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{console.log(`Websocket - Ping pong took more than ${this.WEBSOCKET_PING_PONG_ALLOWED_TIME}ms. Disconnecting`),this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing());break;case"connect":if(r)if(this.webRtcConfig.isHost){const e=500;let t=0;const n=setInterval((()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"host"}))),t>=e&&clearInterval(n),t++}),50)}else{const e=500;let t=0;const n=setInterval((async()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"connect",host:this.hostUuid}))),t>=e&&clearInterval(n),t++}),50)}break;case"connected":clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),u&&(this.webRtcConnectionConfig=u,this.webRtcConfig.isHost||await this.setupPeerconnection(this.hostUuid)),i&&this.webRtcConfig.isHost&&await this.sendOffer(this.peerConnection,this.wsClient);break;case"pong":clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing();break;case"offer":if(s){await this.peerConnection.setRemoteDescription(new a.RTCSessionDescription(s));const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.wsClient.send(JSON.stringify({type:"answer",answer:e}))}break;case"host":i&&this.webRtcConfig.isHost&&(this.setUuid(i),u&&(this.webRtcConnectionConfig=u),await this.setupPeerconnection(i),this.sendPing());break;case"leave":this.setUuid(null),this.disconnect();break;case"answer":c&&await this.peerConnection.setRemoteDescription(new a.RTCSessionDescription(c));break;case"candidate":if(l){const e=new a.RTCIceCandidate(l);await this.peerConnection.addIceCandidate(e)}break;case"client":u&&(this.webRtcConnectionConfig=u,this.webRtcConfig.isHost||(await this.setupPeerconnection(this.hostUuid),await this.sendOffer(this.peerConnection,this.wsClient)))}}}}sendPing(){this.pingTimeout=setTimeout((()=>{1===this.wsClient.readyState&&this.wsClient.send(JSON.stringify({type:"ping"}))}),this.WEBSOCKET_PING_ANSWER_DELAY)}async setupPeerconnection(e){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){console.log("P2P - Message invalid JSON:",e)}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.sendP2PData("clientconnected",{success:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new a.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}async setupClientPeerconnection(){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){console.log("P2P - Message invalid JSON:",e)}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.sendP2PData("clientconnected",{success:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new a.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}static ɵfac=function(e){return new(e||u)};static ɵprov=l.ɵɵdefineInjectable({token:u,factory:u.ɵfac})}t.WebRtcProvider=u},914:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebRTCClientV2=void 0;const o=n(964),r=n(553);t.WebRTCClientV2=class{peerConnection=null;dataChannel=null;clientChannel;webRtcConnectionConfig;requestedCredentials;hostWsConnection;actionType;dataChannelOpen$=new o.Subject;dataChannelMessage$=new o.Subject;data;constructor(e,t,n,o,r){this.webRtcConnectionConfig=e,this.requestedCredentials=t,this.hostWsConnection=n,this.actionType=o,this.data=r}async setupPeerconnection(e){this.peerConnection=new r.RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new r.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.clientChannel.sendUTF(JSON.stringify({type:"candidate",candidate:e.candidate}))}})),this.peerConnection.addEventListener("iceconnectionstatechange",(()=>{"disconnected"===this.peerConnection.iceConnectionState&&this.peerConnection.close()})),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{try{const t=JSON.parse(e.data);this.dataChannelMessage$.next(t)}catch(e){console.error("Could not parse message:",e)}},e.channel.onopen=async()=>{console.log("Library - Datachannel connected"),this.hostWsConnection.sendUTF(JSON.stringify({type:"clientconnected",success:!0})),this.dataChannelOpen$.next()},e.channel.onclose=e=>{console.log("Library - Datachannel onclose:",e),this.hostWsConnection.sendUTF(JSON.stringify({type:"disconnect"}))}}))}async sendOffer(){const e=await this.peerConnection.createOffer();await this.peerConnection.setLocalDescription(e),this.clientChannel.sendUTF(JSON.stringify({type:"offer",offer:e}))}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?(console.log(`Library - Sending action '${e}'`),this.dataChannel.send(JSON.stringify({action:e,...t}))):console.error(`Library - Attempted to send data with action ${e} but data channel is not open`)}async setRemoteDescription(e){await this.peerConnection.setRemoteDescription(new r.RTCSessionDescription(e))}async addCandidate(e){try{const t=new r.RTCIceCandidate(e);await this.peerConnection.addIceCandidate(t)}catch(e){console.error(e)}}async sendAnswer(){const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.clientChannel.sendUTF(JSON.stringify({type:"answer",answer:e}))}}},553:e=>{"use strict";e.exports=require("@koush/wrtc")},964:e=>{"use strict";e.exports=require("rxjs")},828:e=>{"use strict";e.exports=require("uuid")},519:e=>{"use strict";e.exports=require("web3")},367:e=>{"use strict";e.exports=require("websocket")},352:e=>{"use strict";e.exports=require("ws")},235:()=>{},85:()=>{},9:(e,t,n)=>{"use strict";n.r(t),n.d(t,{ANALYZE_FOR_ENTRY_COMPONENTS:()=>Lr,APP_BOOTSTRAP_LISTENER:()=>_v,APP_ID:()=>gv,APP_INITIALIZER:()=>pv,ApplicationInitStatus:()=>hv,ApplicationModule:()=>Zb,ApplicationRef:()=>rb,Attribute:()=>Vr,COMPILER_OPTIONS:()=>Av,CUSTOM_ELEMENTS_SCHEMA:()=>la,ChangeDetectionStrategy:()=>Ge,ChangeDetectorRef:()=>hb,Compiler:()=>Ov,CompilerFactory:()=>Nv,Component:()=>iv,ComponentFactory:()=>Wg,ComponentFactoryResolver:()=>zg,ComponentRef:()=>Bg,ContentChild:()=>Br,ContentChildren:()=>Ur,DEFAULT_CURRENCY_CODE:()=>xv,DebugElement:()=>_b,DebugEventListener:()=>vb,DebugNode:()=>wb,DefaultIterableDiffer:()=>kb,Directive:()=>rv,ElementRef:()=>Jg,EmbeddedViewRef:()=>mb,ErrorHandler:()=>ca,EventEmitter:()=>By,Host:()=>Oi,HostBinding:()=>lv,HostListener:()=>uv,INJECTOR:()=>gu,Inject:()=>Ii,InjectFlags:()=>We,Injectable:()=>zf,InjectionToken:()=>$r,Injector:()=>Ou,Input:()=>av,IterableDiffers:()=>Ub,KeyValueDiffers:()=>Wb,LOCALE_ID:()=>Mv,MissingTranslationStrategy:()=>Tv,ModuleWithComponentFactories:()=>Sv,NO_ERRORS_SCHEMA:()=>ua,NgModule:()=>fv,NgModuleFactory:()=>fy,NgModuleRef:()=>uy,NgProbeToken:()=>Zv,NgZone:()=>Rv,Optional:()=>Ei,Output:()=>cv,PACKAGE_ROOT_URL:()=>Cv,PLATFORM_ID:()=>wv,PLATFORM_INITIALIZER:()=>bv,Pipe:()=>sv,PlatformRef:()=>nb,Query:()=>Hr,QueryList:()=>qy,ReflectiveInjector:()=>dd,ReflectiveKey:()=>Qf,Renderer2:()=>Qg,RendererFactory2:()=>Zg,RendererStyleFlags2:()=>Ma,ResolvedReflectiveFactory:()=>od,Sanitizer:()=>Yg,SecurityContext:()=>$s,Self:()=>Ti,SimpleChange:()=>Mn,SkipSelf:()=>Si,TRANSLATIONS:()=>Iv,TRANSLATIONS_FORMAT:()=>Ev,TemplateRef:()=>zy,Testability:()=>Uv,TestabilityRegistry:()=>Bv,Type:()=>Gr,VERSION:()=>ey,Version:()=>Xg,ViewChild:()=>qr,ViewChildren:()=>Wr,ViewContainerRef:()=>Zy,ViewEncapsulation:()=>Qe,ViewRef:()=>yb,asNativeElements:()=>bb,assertPlatform:()=>Xv,createNgModuleRef:()=>gy,createPlatform:()=>Qv,createPlatformFactory:()=>Yv,defineInjectable:()=>Re,destroyPlatform:()=>eb,enableProdMode:()=>ub,forwardRef:()=>ae,getDebugNode:()=>Sb,getModuleFactory:()=>fb,getNgModuleById:()=>db,getPlatform:()=>tb,inject:()=>Di,isDevMode:()=>lb,platformCore:()=>Gb,resolveForwardRef:()=>ce,setTestabilityGetter:()=>Wv,ɵALLOW_MULTIPLE_PLATFORMS:()=>Gv,ɵAPP_ID_RANDOM_PROVIDER:()=>mv,ɵChangeDetectorStatus:()=>Ze,ɵComponentFactory:()=>Wg,ɵConsole:()=>Dv,ɵDEFAULT_LOCALE_ID:()=>bh,ɵINJECTOR_SCOPE:()=>mu,ɵLifecycleHooksFeature:()=>Qu,ɵLocaleDataIndex:()=>mh,ɵNG_COMP_DEF:()=>at,ɵNG_DIR_DEF:()=>ct,ɵNG_ELEMENT_ID:()=>dt,ɵNG_INJ_DEF:()=>He,ɵNG_MOD_DEF:()=>ut,ɵNG_PIPE_DEF:()=>lt,ɵNG_PROV_DEF:()=>Fe,ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR:()=>ty,ɵNO_CHANGE:()=>wc,ɵNgModuleFactory:()=>my,ɵNoopNgZone:()=>Hv,ɵReflectionCapabilities:()=>li,ɵRender3ComponentFactory:()=>ay,ɵRender3ComponentRef:()=>cy,ɵRender3NgModuleRef:()=>yy,ɵRuntimeError:()=>fe,ɵViewRef:()=>oy,ɵ_sanitizeHtml:()=>js,ɵ_sanitizeUrl:()=>hs,ɵallowSanitizationBypassAndThrow:()=>ns,ɵbypassSanitizationTrustHtml:()=>rs,ɵbypassSanitizationTrustResourceUrl:()=>cs,ɵbypassSanitizationTrustScript:()=>ss,ɵbypassSanitizationTrustStyle:()=>is,ɵbypassSanitizationTrustUrl:()=>as,ɵclearResolutionOfComponentResourcesQueue:()=>Li,ɵcompileComponent:()=>Hm,ɵcompileDirective:()=>Um,ɵcompileNgModule:()=>Im,ɵcompileNgModuleDefs:()=>Em,ɵcompileNgModuleFactory:()=>Kv,ɵcompilePipe:()=>nv,ɵcreateInjector:()=>Cu,ɵdefaultIterableDiffers:()=>Kb,ɵdefaultKeyValueDiffers:()=>Jb,ɵdetectChanges:()=>pu,ɵdevModeEqual:()=>ff,ɵfindLocaleData:()=>dh,ɵflushModuleScopingQueueAsMuchAsPossible:()=>Mm,ɵgetDebugNode:()=>Sb,ɵgetDebugNodeR2:()=>Ob,ɵgetDirectives:()=>ju,ɵgetHostElement:()=>$u,ɵgetInjectableDef:()=>Ve,ɵgetLContext:()=>Js,ɵgetLocaleCurrencyCode:()=>ph,ɵgetLocalePluralCase:()=>hh,ɵgetSanitizationBypassType:()=>os,ɵglobal:()=>ot,ɵinjectChangeDetectorRef:()=>gb,ɵisBoundToModule:()=>Jv,ɵisDefaultChangeDetectionStrategy:()=>Ye,ɵisListLikeIterable:()=>df,ɵisObservable:()=>Ed,ɵisPromise:()=>xd,ɵisSubscribable:()=>Id,ɵivyEnabled:()=>Qb,ɵmakeDecorator:()=>kr,ɵmarkDirty:()=>hu,ɵnoSideEffects:()=>Je,ɵpatchComponentDefWithScope:()=>jm,ɵpublishDefaultGlobalUtils:()=>qu,ɵpublishGlobalUtil:()=>zu,ɵregisterLocaleData:()=>fh,ɵregisterNgModuleType:()=>py,ɵrenderComponent:()=>Ku,ɵresetCompiledComponents:()=>km,ɵresetJitOptions:()=>_m,ɵresolveComponentResources:()=>Ri,ɵsetClassMetadata:()=>ly,ɵsetCurrentInjector:()=>bi,ɵsetDocument:()=>Ln,ɵsetLocaleId:()=>Mh,ɵstore:()=>Ff,ɵstringify:()=>re,ɵtransitiveScopesFor:()=>Vm,ɵunregisterLocaleData:()=>yh,ɵunwrapSafeValue:()=>ts,ɵwhenRendered:()=>Yu,ɵɵCopyDefinitionFeature:()=>cf,ɵɵFactoryTarget:()=>zr,ɵɵInheritDefinitionFeature:()=>ef,ɵɵNgOnChangesFeature:()=>xn,ɵɵProvidersFeature:()=>Ug,ɵɵadvance:()=>_c,ɵɵattribute:()=>wf,ɵɵattributeInterpolate1:()=>Of,ɵɵattributeInterpolate2:()=>Af,ɵɵattributeInterpolate3:()=>Nf,ɵɵattributeInterpolate4:()=>kf,ɵɵattributeInterpolate5:()=>Pf,ɵɵattributeInterpolate6:()=>Rf,ɵɵattributeInterpolate7:()=>jf,ɵɵattributeInterpolate8:()=>Vf,ɵɵattributeInterpolateV:()=>$f,ɵɵclassMap:()=>lp,ɵɵclassMapInterpolate1:()=>kp,ɵɵclassMapInterpolate2:()=>Pp,ɵɵclassMapInterpolate3:()=>Rp,ɵɵclassMapInterpolate4:()=>jp,ɵɵclassMapInterpolate5:()=>Vp,ɵɵclassMapInterpolate6:()=>$p,ɵɵclassMapInterpolate7:()=>Lp,ɵɵclassMapInterpolate8:()=>Fp,ɵɵclassMapInterpolateV:()=>Hp,ɵɵclassProp:()=>sp,ɵɵcontentQuery:()=>pm,ɵɵdefineComponent:()=>ht,ɵɵdefineDirective:()=>Ct,ɵɵdefineInjectable:()=>Pe,ɵɵdefineInjector:()=>je,ɵɵdefineNgModule:()=>bt,ɵɵdefinePipe:()=>Dt,ɵɵdirectiveInject:()=>hd,ɵɵdisableBindings:()=>ro,ɵɵelement:()=>wd,ɵɵelementContainer:()=>Dd,ɵɵelementContainerEnd:()=>Cd,ɵɵelementContainerStart:()=>_d,ɵɵelementEnd:()=>bd,ɵɵelementStart:()=>vd,ɵɵenableBindings:()=>oo,ɵɵgetCurrentView:()=>Md,ɵɵgetInheritedFactory:()=>Er,ɵɵhostProperty:()=>sh,ɵɵi18n:()=>Og,ɵɵi18nApply:()=>kg,ɵɵi18nAttributes:()=>Ag,ɵɵi18nEnd:()=>Sg,ɵɵi18nExp:()=>Ng,ɵɵi18nPostprocess:()=>Pg,ɵɵi18nStart:()=>Tg,ɵɵinject:()=>_i,ɵɵinjectAttribute:()=>Sr,ɵɵinvalidFactory:()=>gd,ɵɵinvalidFactoryDep:()=>Ci,ɵɵlistener:()=>Td,ɵɵloadQuery:()=>hm,ɵɵnamespaceHTML:()=>Ho,ɵɵnamespaceMathML:()=>Fo,ɵɵnamespaceSVG:()=>Lo,ɵɵnextContext:()=>kd,ɵɵngDeclareClassMetadata:()=>Xb,ɵɵngDeclareComponent:()=>ew,ɵɵngDeclareDirective:()=>Yb,ɵɵngDeclareFactory:()=>tw,ɵɵngDeclareInjectable:()=>ow,ɵɵngDeclareInjector:()=>rw,ɵɵngDeclareNgModule:()=>iw,ɵɵngDeclarePipe:()=>sw,ɵɵpipe:()=>Py,ɵɵpipeBind1:()=>Ry,ɵɵpipeBind2:()=>jy,ɵɵpipeBind3:()=>Vy,ɵɵpipeBind4:()=>$y,ɵɵpipeBindV:()=>Ly,ɵɵprojection:()=>jd,ɵɵprojectionDef:()=>Rd,ɵɵproperty:()=>yd,ɵɵpropertyInterpolate:()=>Vd,ɵɵpropertyInterpolate1:()=>$d,ɵɵpropertyInterpolate2:()=>Ld,ɵɵpropertyInterpolate3:()=>Fd,ɵɵpropertyInterpolate4:()=>Hd,ɵɵpropertyInterpolate5:()=>Ud,ɵɵpropertyInterpolate6:()=>Bd,ɵɵpropertyInterpolate7:()=>Wd,ɵɵpropertyInterpolate8:()=>qd,ɵɵpropertyInterpolateV:()=>zd,ɵɵpureFunction0:()=>vy,ɵɵpureFunction1:()=>by,ɵɵpureFunction2:()=>wy,ɵɵpureFunction3:()=>_y,ɵɵpureFunction4:()=>Cy,ɵɵpureFunction5:()=>Dy,ɵɵpureFunction6:()=>My,ɵɵpureFunction7:()=>xy,ɵɵpureFunction8:()=>Iy,ɵɵpureFunctionV:()=>Ey,ɵɵqueryRefresh:()=>fm,ɵɵreference:()=>Hf,ɵɵresolveBody:()=>ba,ɵɵresolveDocument:()=>va,ɵɵresolveWindow:()=>ma,ɵɵrestoreView:()=>ao,ɵɵsanitizeHtml:()=>Ls,ɵɵsanitizeResourceUrl:()=>Us,ɵɵsanitizeScript:()=>Bs,ɵɵsanitizeStyle:()=>Fs,ɵɵsanitizeUrl:()=>Hs,ɵɵsanitizeUrlOrResourceUrl:()=>zs,ɵɵsetComponentScope:()=>gt,ɵɵsetNgModuleScope:()=>wt,ɵɵstyleMap:()=>ap,ɵɵstyleMapInterpolate1:()=>Up,ɵɵstyleMapInterpolate2:()=>Bp,ɵɵstyleMapInterpolate3:()=>Wp,ɵɵstyleMapInterpolate4:()=>qp,ɵɵstyleMapInterpolate5:()=>zp,ɵɵstyleMapInterpolate6:()=>Kp,ɵɵstyleMapInterpolate7:()=>Jp,ɵɵstyleMapInterpolate8:()=>Gp,ɵɵstyleMapInterpolateV:()=>Zp,ɵɵstyleProp:()=>ip,ɵɵstylePropInterpolate1:()=>Qp,ɵɵstylePropInterpolate2:()=>Yp,ɵɵstylePropInterpolate3:()=>Xp,ɵɵstylePropInterpolate4:()=>eh,ɵɵstylePropInterpolate5:()=>th,ɵɵstylePropInterpolate6:()=>nh,ɵɵstylePropInterpolate7:()=>oh,ɵɵstylePropInterpolate8:()=>rh,ɵɵstylePropInterpolateV:()=>ih,ɵɵsyntheticHostListener:()=>Sd,ɵɵsyntheticHostProperty:()=>ah,ɵɵtemplate:()=>Lf,ɵɵtemplateRefExtractor:()=>vm,ɵɵtext:()=>Cp,ɵɵtextInterpolate:()=>Dp,ɵɵtextInterpolate1:()=>Mp,ɵɵtextInterpolate2:()=>xp,ɵɵtextInterpolate3:()=>Ip,ɵɵtextInterpolate4:()=>Ep,ɵɵtextInterpolate5:()=>Tp,ɵɵtextInterpolate6:()=>Sp,ɵɵtextInterpolate7:()=>Op,ɵɵtextInterpolate8:()=>Ap,ɵɵtextInterpolateV:()=>Np,ɵɵtrustConstantHtml:()=>Ws,ɵɵtrustConstantResourceUrl:()=>qs,ɵɵviewQuery:()=>dm});var o=n(964);const r=require("tslib");var i=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function s(e){return"function"==typeof e}function a(e){return s(null==e?void 0:e.then)}function c(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var l=c((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function u(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}return e.prototype.unsubscribe=function(){var e,t,n,o,i;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var c=(0,r.__values)(a),u=c.next();!u.done;u=c.next())u.value.remove(this)}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}else a.remove(this);var f=this.initialTeardown;if(s(f))try{f()}catch(e){i=e instanceof l?e.errors:[e]}var d=this._teardowns;if(d){this._teardowns=null;try{for(var p=(0,r.__values)(d),g=p.next();!g.done;g=p.next()){var y=g.value;try{h(y)}catch(e){i=null!=i?i:[],e instanceof l?i=(0,r.__spreadArray)((0,r.__spreadArray)([],(0,r.__read)(i)),(0,r.__read)(e.errors)):i.push(e)}}}catch(e){n={error:e}}finally{try{g&&!g.done&&(o=p.return)&&o.call(p)}finally{if(n)throw n.error}}}if(i)throw new l(i)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)h(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&u(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&u(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}(),d=f.EMPTY;function p(e){return e instanceof f||e&&"closed"in e&&s(e.remove)&&s(e.add)&&s(e.unsubscribe)}function h(e){s(e)?e():e.unsubscribe()}var g=null,y=null,m=void 0,v=!1,b=!1,w={setTimeout:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=w.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,(0,r.__spreadArray)([],(0,r.__read)(e)))},clearTimeout:function(e){var t=w.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function _(e){w.setTimeout((function(){if(!g)throw e;g(e)}))}function C(){}var D=M("C",void 0,void 0);function M(e,t,n){return{kind:e,value:t,error:n}}var x=null;function I(e){if(v){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,o=n.errorThrown,r=n.error;if(x=null,o)throw r}}else e()}var E=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,p(t)&&t.add(n)):n.destination=P,n}return(0,r.__extends)(t,e),t.create=function(e,t,n){return new A(e,t,n)},t.prototype.next=function(e){this.isStopped?k(function(e){return M("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?k(M("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?k(D,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(f),T=Function.prototype.bind;function S(e,t){return T.call(e,t)}var O=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){N(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){N(e)}else N(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){N(e)}},e}(),A=function(e){function t(t,n,o){var r,i,a=e.call(this)||this;return s(t)||!t?r={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=o?o:void 0}:a&&b?((i=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},r={next:t.next&&S(t.next,i),error:t.error&&S(t.error,i),complete:t.complete&&S(t.complete,i)}):r=t,a.destination=new O(r),a}return(0,r.__extends)(t,e),t}(E);function N(e){var t;v?(t=e,v&&x&&(x.errorThrown=!0,x.error=t)):_(e)}function k(e,t){var n=y;n&&w.setTimeout((function(){return n(e,t)}))}var P={closed:!0,next:C,error:function(e){throw e},complete:C},R="function"==typeof Symbol&&Symbol.observable||"@@observable";function j(e){return e}var V=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var o,r=this,i=(o=e)&&o instanceof E||function(e){return e&&s(e.next)&&s(e.error)&&s(e.complete)}(o)&&p(o)?e:new A(e,t,n);return I((function(){var e=r,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?r._subscribe(i):r._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=$(t))((function(t,o){var r=new A({next:function(t){try{e(t)}catch(e){o(e),r.unsubscribe()}},error:o,complete:t});n.subscribe(r)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[R]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?j:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=$(e))((function(e,n){var o;t.subscribe((function(e){return o=e}),(function(e){return n(e)}),(function(){return e(o)}))}))},e.create=function(t){return new e(t)},e}();function $(e){var t;return null!==(t=null!=e?e:m)&&void 0!==t?t:Promise}function L(e){return s(e[R])}function F(e){return Symbol.asyncIterator&&s(null==e?void 0:e[Symbol.asyncIterator])}function H(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var U="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function B(e){return s(null==e?void 0:e[U])}function W(e){return(0,r.__asyncGenerator)(this,arguments,(function(){var t,n,o;return(0,r.__generator)(this,(function(i){switch(i.label){case 0:t=e.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,(0,r.__await)(t.read())];case 3:return n=i.sent(),o=n.value,n.done?[4,(0,r.__await)(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,(0,r.__await)(o)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function q(e){return s(null==e?void 0:e.getReader)}function z(e){if(e instanceof V)return e;if(null!=e){if(L(e))return o=e,new V((function(e){var t=o[R]();if(s(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(i(e))return n=e,new V((function(e){for(var t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()}));if(a(e))return function(e){return new V((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,_)}))}(e);if(F(e))return K(e);if(B(e))return t=e,new V((function(e){var n,o;try{for(var i=(0,r.__values)(t),s=i.next();!s.done;s=i.next()){var a=s.value;if(e.next(a),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(q(e))return K(W(e))}var t,n,o;throw H(e)}function K(e){return new V((function(t){(function(e,t){var n,o,i,s;return(0,r.__awaiter)(this,void 0,void 0,(function(){var a,c;return(0,r.__generator)(this,(function(l){switch(l.label){case 0:l.trys.push([0,5,6,11]),n=(0,r.__asyncValues)(e),l.label=1;case 1:return[4,n.next()];case 2:if((o=l.sent()).done)return[3,4];if(a=o.value,t.next(a),t.closed)return[2];l.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=l.sent(),i={error:c},[3,11];case 6:return l.trys.push([6,,9,10]),o&&!o.done&&(s=n.return)?[4,s.call(n)]:[3,8];case 7:l.sent(),l.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function J(e){return function(t){if(function(e){return s(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function G(e,t,n,o,r){return new Z(e,t,n,o,r)}var Z=function(e){function t(t,n,o,r,i,s){var a=e.call(this,t)||this;return a.onFinalize=i,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=r?function(e){try{r(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=o?function(){try{o()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return(0,r.__extends)(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(E);new V((function(e){return e.complete()}));var Q=c((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Y=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return(0,r.__extends)(t,e),t.prototype.lift=function(e){var t=new X(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new Q},t.prototype.next=function(e){var t=this;I((function(){var n,o;if(t._throwIfClosed(),!t.isStopped){var i=t.observers.slice();try{for(var s=(0,r.__values)(i),a=s.next();!a.done;a=s.next())a.value.next(e)}catch(e){n={error:e}}finally{try{a&&!a.done&&(o=s.return)&&o.call(s)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;I((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;I((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=t.hasError,o=t.isStopped,r=t.observers;return n||o?d:(r.push(e),new f((function(){return u(r,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,o=t.thrownError,r=t.isStopped;n?e.error(o):r&&e.complete()},t.prototype.asObservable=function(){var e=new V;return e.source=this,e},t.create=function(e,t){return new X(e,t)},t}(V),X=function(e){function t(t,n){var o=e.call(this)||this;return o.destination=t,o.source=n,o}return(0,r.__extends)(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:d},t}(Y);function ee(e){void 0===e&&(e={});var t=e.connector,n=void 0===t?function(){return new Y}:t,o=e.resetOnError,r=void 0===o||o,i=e.resetOnComplete,s=void 0===i||i,a=e.resetOnRefCountZero,c=void 0===a||a;return function(e){var t=null,o=null,i=null,a=0,l=!1,u=!1,f=function(){null==o||o.unsubscribe(),o=null},d=function(){f(),t=i=null,l=u=!1},p=function(){var e=t;d(),null==e||e.unsubscribe()};return J((function(e,h){a++,u||l||f();var g,y=i=null!=i?i:n();h.add((function(){0!=--a||u||l||(o=te(p,c))})),y.subscribe(h),t||(t=new A({next:function(e){return y.next(e)},error:function(e){u=!0,f(),o=te(d,r,e),y.error(e)},complete:function(){l=!0,f(),o=te(d,s),y.complete()}}),(g=e,z(g)).subscribe(t))}))(e)}}function te(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];return!0===t?(e(),null):!1===t?null:t.apply(void 0,(0,r.__spreadArray)([],(0,r.__read)(n))).pipe(J((function(e,t){var n=0;e.subscribe(G(t,(function(e){++n<=1&&(t.next(e),1<=n&&t.complete())})))}))).subscribe((function(){return e()}))}function ne(e){for(let t in e)if(e[t]===ne)return t;throw Error("Could not find renamed property on target object.")}function oe(e,t){for(const n in t)t.hasOwnProperty(n)&&!e.hasOwnProperty(n)&&(e[n]=t[n])}function re(e){if("string"==typeof e)return e;if(Array.isArray(e))return"["+e.map(re).join(", ")+"]";if(null==e)return""+e;if(e.overriddenName)return`${e.overriddenName}`;if(e.name)return`${e.name}`;const t=e.toString();if(null==t)return""+t;const n=t.indexOf("\n");return-1===n?t:t.substring(0,n)}function ie(e,t){return null==e||""===e?null===t?"":t:null==t||""===t?e:e+" "+t}const se=ne({__forward_ref__:ne});function ae(e){return e.__forward_ref__=ae,e.toString=function(){return re(this())},e}function ce(e){return le(e)?e():e}function le(e){return"function"==typeof e&&e.hasOwnProperty(se)&&e.__forward_ref__===ae}const ue="https://angular.io/errors";class fe extends Error{constructor(e,t){super(de(e,t)),this.code=e}}function de(e,t){const n=`NG0${Math.abs(e)}`;let o=`${n}${t?": "+t:""}`;return ngDevMode&&e<0&&(o=`${o}. Find more at ${ue}/${n}`),o}function pe(e){return"string"==typeof e?e:null==e?"":String(e)}function he(e){return"function"==typeof e?e.name||e.toString():"object"==typeof e&&null!=e&&"function"==typeof e.type?e.type.name||e.type.toString():pe(e)}function ge(e,t){const n=t?`. Dependency path: ${t.join(" > ")} > ${e}`:"";throw new fe(-200,`Circular dependency in DI detected for ${e}${n}`)}function ye(){throw new Error("Cannot mix multi providers and regular providers")}function me(e,t){const n=t?` in ${t}`:"";throw new fe(-201,`No provider for ${he(e)} found${n}`)}function ve(e,t){"number"!=typeof e&&Oe(t,typeof e,"number","===")}function be(e,t,n){ve(e,"Expected a number"),Ie(e,n,"Expected number to be less than or equal to"),Te(e,t,"Expected number to be greater than or equal to")}function we(e,t){"string"!=typeof e&&Oe(t,null===e?"null":typeof e,"string","===")}function _e(e,t,n){e!=t&&Oe(n,e,t,"==")}function Ce(e,t,n){e==t&&Oe(n,e,t,"!=")}function De(e,t,n){e!==t&&Oe(n,e,t,"===")}function Me(e,t,n){e===t&&Oe(n,e,t,"!==")}function xe(e,t,n){e<t||Oe(n,e,t,"<")}function Ie(e,t,n){e<=t||Oe(n,e,t,"<=")}function Ee(e,t,n){e>t||Oe(n,e,t,">")}function Te(e,t,n){e>=t||Oe(n,e,t,">=")}function Se(e,t){null==e&&Oe(t,e,null,"!=")}function Oe(e,t,n,o){throw new Error(`ASSERTION ERROR: ${e}`+(null==o?"":` [Expected=> ${n} ${o} ${t} <=Actual]`))}function Ae(e){"undefined"!=typeof Node&&e instanceof Node||"object"==typeof e&&null!=e&&"WebWorkerRenderNode"===e.constructor.name||Oe(`The provided value must be an instance of a DOM Node but got ${re(e)}`)}function Ne(e,t){Se(e,"Array must be defined.");const n=e.length;(t<0||t>=n)&&Oe(`Index expected to be less than ${n} but got ${t}`)}function ke(e,...t){if(-1!==t.indexOf(e))return!0;Oe(`Expected value to be one of ${JSON.stringify(t)} but was ${JSON.stringify(e)}.`)}function Pe(e){return{token:e.token,providedIn:e.providedIn||null,factory:e.factory,value:void 0}}const Re=Pe;function je(e){return{providers:e.providers||[],imports:e.imports||[]}}function Ve(e){return $e(e,Fe)||$e(e,Ue)}function $e(e,t){return e.hasOwnProperty(t)?e[t]:null}function Le(e){return e&&(e.hasOwnProperty(He)||e.hasOwnProperty(Be))?e[He]:null}const Fe=ne({ɵprov:ne}),He=ne({ɵinj:ne}),Ue=ne({ngInjectableDef:ne}),Be=ne({ngInjectorDef:ne});var We;let qe;function ze(e){const t=qe;return qe=e,t}function Ke(e,t,n){const o=Ve(e);return o&&"root"==o.providedIn?void 0===o.value?o.value=o.factory():o.value:n&We.Optional?null:void 0!==t?t:void me(re(e),"Injector")}function Je(e){return{toString:e}.toString()}var Ge,Ze,Qe;function Ye(e){return null==e||e===Ge.Default}!function(e){e[e.Default=0]="Default",e[e.Host=1]="Host",e[e.Self=2]="Self",e[e.SkipSelf=4]="SkipSelf",e[e.Optional=8]="Optional"}(We||(We={})),function(e){e[e.OnPush=0]="OnPush",e[e.Default=1]="Default"}(Ge||(Ge={})),function(e){e[e.CheckOnce=0]="CheckOnce",e[e.Checked=1]="Checked",e[e.CheckAlways=2]="CheckAlways",e[e.Detached=3]="Detached",e[e.Errored=4]="Errored",e[e.Destroyed=5]="Destroyed"}(Ze||(Ze={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(Qe||(Qe={}));const Xe="undefined"!=typeof globalThis&&globalThis,et="undefined"!=typeof window&&window,tt="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,nt="undefined"!=typeof global&&global,ot=Xe||nt||et||tt;function rt(){return!("undefined"!=typeof ngDevMode&&!ngDevMode||("object"!=typeof ngDevMode&&function(){const e="undefined"!=typeof location?location.toString():"",t={namedConstructors:-1!=e.indexOf("ngDevMode=namedConstructors"),firstCreatePass:0,tNode:0,tView:0,rendererCreateTextNode:0,rendererSetText:0,rendererCreateElement:0,rendererAddEventListener:0,rendererSetAttribute:0,rendererRemoveAttribute:0,rendererSetProperty:0,rendererSetClassName:0,rendererAddClass:0,rendererRemoveClass:0,rendererSetStyle:0,rendererRemoveStyle:0,rendererDestroy:0,rendererDestroyNode:0,rendererMoveNode:0,rendererRemoveNode:0,rendererAppendChild:0,rendererInsertBefore:0,rendererCreateComment:0},n=-1===e.indexOf("ngDevMode=false");ot.ngDevMode=n&&t}(),"undefined"==typeof ngDevMode||!ngDevMode))}const it={},st=[];("undefined"==typeof ngDevMode||ngDevMode)&&rt()&&(Object.freeze(it),Object.freeze(st));const at=ne({ɵcmp:ne}),ct=ne({ɵdir:ne}),lt=ne({ɵpipe:ne}),ut=ne({ɵmod:ne}),ft=ne({ɵfac:ne}),dt=ne({__NG_ELEMENT_ID__:ne});let pt=0;function ht(e){return Je((()=>{("undefined"==typeof ngDevMode||ngDevMode)&&rt();const t={},n={type:e.type,providersResolver:null,decls:e.decls,vars:e.vars,factory:null,template:e.template||null,consts:e.consts||null,ngContentSelectors:e.ngContentSelectors,hostBindings:e.hostBindings||null,hostVars:e.hostVars||0,hostAttrs:e.hostAttrs||null,contentQueries:e.contentQueries||null,declaredInputs:t,inputs:null,outputs:null,exportAs:e.exportAs||null,onPush:e.changeDetection===Ge.OnPush,directiveDefs:null,pipeDefs:null,selectors:e.selectors||st,viewQuery:e.viewQuery||null,features:e.features||null,data:e.data||{},encapsulation:e.encapsulation||Qe.Emulated,id:"c",styles:e.styles||st,_:null,setInput:null,schemas:e.schemas||null,tView:null},o=e.directives,r=e.features,i=e.pipes;return n.id+=pt++,n.inputs=_t(e.inputs,t),n.outputs=_t(e.outputs),r&&r.forEach((e=>e(n))),n.directiveDefs=o?()=>("function"==typeof o?o():o).map(yt):null,n.pipeDefs=i?()=>("function"==typeof i?i():i).map(mt):null,n}))}function gt(e,t,n){const o=e.ɵcmp;o.directiveDefs=()=>t.map(yt),o.pipeDefs=()=>n.map(mt)}function yt(e){const t=Mt(e)||xt(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is neither 'ComponentType' or 'DirectiveType'.`);return t}function mt(e){const t=It(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is not a 'PipeType'.`);return t}const vt={};function bt(e){return Je((()=>{const t={type:e.type,bootstrap:e.bootstrap||st,declarations:e.declarations||st,imports:e.imports||st,exports:e.exports||st,transitiveCompileScopes:null,schemas:e.schemas||null,id:e.id||null};return null!=e.id&&(vt[e.id]=e.type),t}))}function wt(e,t){return Je((()=>{const n=Et(e,!0);n.declarations=t.declarations||st,n.imports=t.imports||st,n.exports=t.exports||st}))}function _t(e,t){if(null==e)return it;const n={};for(const o in e)if(e.hasOwnProperty(o)){let r=e[o],i=r;Array.isArray(r)&&(i=r[1],r=r[0]),n[r]=o,t&&(t[r]=i)}return n}const Ct=ht;function Dt(e){return{type:e.type,name:e.name,factory:null,pure:!1!==e.pure,onDestroy:e.type.prototype.ngOnDestroy||null}}function Mt(e){return e[at]||null}function xt(e){return e[ct]||null}function It(e){return e[lt]||null}function Et(e,t){const n=e[ut]||null;if(!n&&!0===t)throw new Error(`Type ${re(e)} does not have 'ɵmod' property.`);return n}const Tt=0,St=1,Ot=2,At=3,Nt=4,kt=5,Pt=6,Rt=7,jt=8,Vt=9,$t=10,Lt=11,Ft=12,Ht=13,Ut=14,Bt=15,Wt=16,qt=17,zt=18,Kt=19,Jt=20,Gt=["Root","Component","Embedded"],Zt=1,Qt=2,Yt=7,Xt=9,en=10;function tn(e){return Array.isArray(e)&&"object"==typeof e[Zt]}function nn(e){return Array.isArray(e)&&!0===e[Zt]}function on(e){return!!(8&e.flags)}function rn(e){return!(2&~e.flags)}function sn(e){return!(1&~e.flags)}function an(e){return null!==e.template}function cn(e,t){ln(e,t[St])}function ln(e,t){un(e),e.hasOwnProperty("tView_")&&_e(e.tView_,t,"This TNode does not belong to this TView.")}function un(e){Se(e,"TNode must be defined"),e&&"object"==typeof e&&e.hasOwnProperty("directiveStylingLast")||Oe("Not of type TNode, got: "+e)}function fn(e){Se(e,"Expected TIcu to be defined"),"number"!=typeof e.currentCaseLViewIndex&&Oe("Object is not of TIcu type.")}function dn(e,t="Type passed in is not ComponentType, it does not have 'ɵcmp' property."){Mt(e)||Oe(t)}function pn(e){Se(e,"currentTNode should exist!"),Se(e.parent,"currentTNode should have a parent")}function hn(e){Se(e,"LContainer must be defined"),_e(nn(e),!0,"Expecting LContainer")}function gn(e){e&&_e(tn(e),!0,"Expecting LView or undefined or null")}function yn(e){Se(e,"LView must be defined"),_e(tn(e),!0,"Expecting LView")}function mn(e,t){_e(e.firstCreatePass,!0,t||"Should only be called in first create pass.")}function vn(e,t){_e(e.firstUpdatePass,!0,t||"Should only be called in first update pass.")}function bn(e,t){wn(e[1].expandoStartIndex,e.length,t)}function wn(e,t,n){e<=n&&n<t||Oe(`Index out of range (expecting ${e} <= ${n} < ${t})`)}function _n(e,t){Se(e,t||"Component views should always have a parent view (component's host view)")}function Cn(e,t){bn(e,t),bn(e,t+8),ve(e[t+0],"injectorIndex should point to a bloom filter"),ve(e[t+1],"injectorIndex should point to a bloom filter"),ve(e[t+2],"injectorIndex should point to a bloom filter"),ve(e[t+3],"injectorIndex should point to a bloom filter"),ve(e[t+4],"injectorIndex should point to a bloom filter"),ve(e[t+5],"injectorIndex should point to a bloom filter"),ve(e[t+6],"injectorIndex should point to a bloom filter"),ve(e[t+7],"injectorIndex should point to a bloom filter"),ve(e[t+8],"injectorIndex should point to parent injector")}function Dn(e,t){const n=e.hasOwnProperty(ft);if(!n&&!0===t&&ngDevMode)throw new Error(`Type ${re(e)} does not have 'ɵfac' property.`);return n?e[ft]:null}class Mn{constructor(e,t,n){this.previousValue=e,this.currentValue=t,this.firstChange=n}isFirstChange(){return this.firstChange}}function xn(){return In}function In(e){return e.type.prototype.ngOnChanges&&(e.setInput=Tn),En}function En(){const e=On(this),t=e?.current;if(t){const n=e.previous;if(n===it)e.previous=t;else for(let e in t)n[e]=t[e];e.current=null,this.ngOnChanges(t)}}function Tn(e,t,n,o){const r=On(e)||function(e,t){return e[Sn]=t}(e,{previous:it,current:null}),i=r.current||(r.current={}),s=r.previous,a=this.declaredInputs[n],c=s[a];i[a]=new Mn(c&&c.currentValue,t,s===it),e[o]=t}xn.ngInherit=!0;const Sn="__ngSimpleChanges__";function On(e){return e[Sn]||null}let An=null;const Nn=e=>{An=e},kn=function(e,t,n){null!=An&&An(e,t,n)},Pn="svg",Rn="http://www.w3.org/2000/svg",jn="math",Vn="http://www.w3.org/1998/MathML/";let $n;function Ln(e){$n=e}function Fn(){return void 0!==$n?$n:"undefined"!=typeof document?document:void 0}var Hn;function Un(e){return!!e.listen}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(Hn||(Hn={}));const Bn={createRenderer:(e,t)=>Fn()};function Wn(e){for(;Array.isArray(e);)e=e[Tt];return e}function qn(e,t){return ngDevMode&&Ne(t,e),ngDevMode&&Te(e,Jt,"Expected to be past HEADER_OFFSET"),Wn(t[e])}function zn(e,t){ngDevMode&&cn(e,t),ngDevMode&&Ne(t,e.index);const n=Wn(t[e.index]);return ngDevMode&&!Un(t[Lt])&&Ae(n),n}function Kn(e,t){ngDevMode&&Ee(t,-1,"wrong index for TNode"),ngDevMode&&xe(t,e.data.length,"wrong index for TNode");const n=e.data[t];return ngDevMode&&null!==n&&un(n),n}function Jn(e,t){return ngDevMode&&Ne(e,t),e[t]}function Gn(e,t){ngDevMode&&Ne(t,e);const n=t[e];return tn(n)?n:n[Tt]}function Zn(e){return!(4&~e[Ot])}function Qn(e){return!(128&~e[Ot])}function Yn(e,t){return null==t?null:(ngDevMode&&Ne(e,t),e[t])}function Xn(e){e[zt]=0}function eo(e,t){e[kt]+=t;let n=e,o=e[At];for(;null!==o&&(1===t&&1===n[kt]||-1===t&&0===n[kt]);)o[kt]+=t,n=o,o=o[At]}const to={lFrame:No(null),bindingsEnabled:!0,isInCheckNoChangesMode:!1};function no(){return to.bindingsEnabled}function oo(){to.bindingsEnabled=!0}function ro(){to.bindingsEnabled=!1}function io(){return to.lFrame.lView}function so(){return to.lFrame.tView}function ao(e){return to.lFrame.contextLView=e,e[jt]}function co(){let e=lo();for(;null!==e&&64===e.type;)e=e.parent;return e}function lo(){return to.lFrame.currentTNode}function uo(){const e=to.lFrame,t=e.currentTNode;return e.isParent?t:t.parent}function fo(e,t){ngDevMode&&e&&ln(e,to.lFrame.tView);const n=to.lFrame;n.currentTNode=e,n.isParent=t}function po(){return to.lFrame.isParent}function ho(){to.lFrame.isParent=!1}function go(){return to.isInCheckNoChangesMode}function yo(e){to.isInCheckNoChangesMode=e}function mo(){const e=to.lFrame;let t=e.bindingRootIndex;return-1===t&&(t=e.bindingRootIndex=e.tView.bindingStartIndex),t}function vo(){return to.lFrame.bindingIndex}function bo(e){return to.lFrame.bindingIndex=e}function wo(){return to.lFrame.bindingIndex++}function _o(e){const t=to.lFrame,n=t.bindingIndex;return t.bindingIndex=t.bindingIndex+e,n}function Co(e){to.lFrame.inI18n=e}function Do(e,t){const n=to.lFrame;n.bindingIndex=n.bindingRootIndex=e,Mo(t)}function Mo(e){to.lFrame.currentDirectiveIndex=e}function xo(e){const t=to.lFrame.currentDirectiveIndex;return-1===t?null:e[t]}function Io(){return to.lFrame.currentQueryIndex}function Eo(e){to.lFrame.currentQueryIndex=e}function To(e){const t=e[St];return 2===t.type?(ngDevMode&&Se(t.declTNode,"Embedded TNodes should have declaration parents."),t.declTNode):1===t.type?e[Pt]:null}function So(e,t,n){if(ngDevMode&&gn(e),n&We.SkipSelf){ngDevMode&&ln(t,e[St]);let o=t,r=e;for(;ngDevMode&&Se(o,"Parent TNode should be defined"),o=o.parent,!(null!==o||n&We.Host||(o=To(r),null===o)||(ngDevMode&&Se(r,"Parent LView should be defined"),r=r[Bt],10&o.type)););if(null===o)return!1;t=o,e=r}ngDevMode&&cn(t,e);const o=to.lFrame=Ao();return o.currentTNode=t,o.lView=e,!0}function Oo(e){ngDevMode&&Ce(e[0],e[1],"????"),ngDevMode&&gn(e);const t=Ao();ngDevMode&&(_e(t.isParent,!0,"Expected clean LFrame"),_e(t.lView,null,"Expected clean LFrame"),_e(t.tView,null,"Expected clean LFrame"),_e(t.selectedIndex,-1,"Expected clean LFrame"),_e(t.elementDepthCount,0,"Expected clean LFrame"),_e(t.currentDirectiveIndex,-1,"Expected clean LFrame"),_e(t.currentNamespace,null,"Expected clean LFrame"),_e(t.bindingRootIndex,-1,"Expected clean LFrame"),_e(t.currentQueryIndex,0,"Expected clean LFrame"));const n=e[St];to.lFrame=t,ngDevMode&&n.firstChild&&ln(n.firstChild,n),t.currentTNode=n.firstChild,t.lView=e,t.tView=n,t.contextLView=e,t.bindingIndex=n.bindingStartIndex,t.inI18n=!1}function Ao(){const e=to.lFrame,t=null===e?null:e.child;return null===t?No(e):t}function No(e){const t={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:e,child:null,inI18n:!1};return null!==e&&(e.child=t),t}function ko(){const e=to.lFrame;return to.lFrame=e.parent,e.currentTNode=null,e.lView=null,e}const Po=ko;function Ro(){const e=ko();e.isParent=!0,e.tView=null,e.selectedIndex=-1,e.contextLView=null,e.elementDepthCount=0,e.currentDirectiveIndex=-1,e.currentNamespace=null,e.bindingRootIndex=-1,e.bindingIndex=-1,e.currentQueryIndex=0}function jo(){return to.lFrame.selectedIndex}function Vo(e){ngDevMode&&-1!==e&&Te(e,Jt,"Index must be past HEADER_OFFSET (or -1)."),ngDevMode&&xe(e,to.lFrame.lView.length,"Can't set index passed end of LView"),to.lFrame.selectedIndex=e}function $o(){const e=to.lFrame;return Kn(e.tView,e.selectedIndex)}function Lo(){to.lFrame.currentNamespace=Pn}function Fo(){to.lFrame.currentNamespace=jn}function Ho(){to.lFrame.currentNamespace=null}function Uo(e,t){ngDevMode&&mn(e);for(let n=t.directiveStart,o=t.directiveEnd;n<o;n++){const t=e.data[n];ngDevMode&&Se(t,"Expecting DirectiveDef");const o=t.type.prototype,{ngAfterContentInit:r,ngAfterContentChecked:i,ngAfterViewInit:s,ngAfterViewChecked:a,ngOnDestroy:c}=o;r&&(e.contentHooks||(e.contentHooks=[])).push(-n,r),i&&((e.contentHooks||(e.contentHooks=[])).push(n,i),(e.contentCheckHooks||(e.contentCheckHooks=[])).push(n,i)),s&&(e.viewHooks||(e.viewHooks=[])).push(-n,s),a&&((e.viewHooks||(e.viewHooks=[])).push(n,a),(e.viewCheckHooks||(e.viewCheckHooks=[])).push(n,a)),null!=c&&(e.destroyHooks||(e.destroyHooks=[])).push(n,c)}}function Bo(e,t,n){zo(e,t,3,n)}function Wo(e,t,n,o){ngDevMode&&Ce(n,3,"Init pre-order hooks should not be called more than once"),(3&e[Ot])===n&&zo(e,t,n,o)}function qo(e,t){ngDevMode&&Ce(t,3,"Init hooks phase should not be incremented after all init hooks have been run.");let n=e[Ot];(3&n)===t&&(n&=2047,n+=1,e[Ot]=n)}function zo(e,t,n,o){ngDevMode&&_e(go(),!1,"Hooks should never be run when in check no changes mode.");const r=void 0!==o?65535&e[zt]:0,i=null!=o?o:-1,s=t.length-1;let a=0;for(let c=r;c<s;c++)if("number"==typeof t[c+1]){if(a=t[c],null!=o&&a>=o)break}else t[c]<0&&(e[zt]+=65536),(a<i||-1==i)&&(Ko(e,n,t,c),e[zt]=(4294901760&e[zt])+c+2),c++}function Ko(e,t,n,o){const r=n[o]<0,i=n[o+1],s=e[r?-n[o]:n[o]];if(r){if(e[Ot]>>11<e[zt]>>16&&(3&e[Ot])===t){e[Ot]+=2048,kn(4,s,i);try{i.call(s)}finally{kn(5,s,i)}}}else{kn(4,s,i);try{i.call(s)}finally{kn(5,s,i)}}}const Jo=-1;class Go{constructor(e,t,n){this.factory=e,this.resolving=!1,ngDevMode&&Se(e,"Factory not specified"),ngDevMode&&_e(typeof e,"function","Expected factory function."),this.canSeeViewProviders=t,this.injectImpl=n}}function Zo(e){let t="";return 1&e&&(t+="|Text"),2&e&&(t+="|Element"),4&e&&(t+="|Container"),8&e&&(t+="|ElementContainer"),16&e&&(t+="|Projection"),32&e&&(t+="|IcuContainer"),64&e&&(t+="|Placeholder"),t.length>0?t.substring(1):t}function Qo(e,t,n){Se(e,"should be called with a TNode"),e.type&t||Oe(n||`Expected [${Zo(t)}] but got ${Zo(e.type)}.`)}function Yo(e,t,n){const o=Un(e);let r=0;for(;r<n.length;){const i=n[r];if("number"==typeof i){if(0!==i)break;r++;const s=n[r++],a=n[r++],c=n[r++];ngDevMode&&ngDevMode.rendererSetAttribute++,o?e.setAttribute(t,a,c,s):t.setAttributeNS(s,a,c)}else{const s=i,a=n[++r];ngDevMode&&ngDevMode.rendererSetAttribute++,er(s)?o&&e.setProperty(t,s,a):o?e.setAttribute(t,s,a):t.setAttribute(s,a),r++}}return r}function Xo(e){return 3===e||4===e||6===e}function er(e){return 64===e.charCodeAt(0)}function tr(e,t){if(null===t||0===t.length);else if(null===e||0===e.length)e=t.slice();else{let n=-1;for(let o=0;o<t.length;o++){const r=t[o];"number"==typeof r?n=r:0===n||nr(e,n,r,null,-1===n||2===n?t[++o]:null)}}return e}function nr(e,t,n,o,r){let i=0,s=e.length;if(-1===t)s=-1;else for(;i<e.length;){const n=e[i++];if("number"==typeof n){if(n===t){s=-1;break}if(n>t){s=i-1;break}}}for(;i<e.length;){const t=e[i];if("number"==typeof t)break;if(t===n){if(null===o)return void(null!==r&&(e[i+1]=r));if(o===e[i+1])return void(e[i+2]=r)}i++,null!==o&&i++,null!==r&&i++}-1!==s&&(e.splice(s,0,t),i=s+1),e.splice(i++,0,n),null!==o&&e.splice(i++,0,o),null!==r&&e.splice(i++,0,r)}function or(e){return e!==Jo}function rr(e){return ngDevMode&&ve(e,"Number expected"),ngDevMode&&Ce(e,-1,"Not a valid state."),ngDevMode&&Ee(32767&e,Jt,"Parent injector must be pointing past HEADER_OFFSET."),32767&e}function ir(e,t){let n=e>>16,o=t;for(;n>0;)o=o[Bt],n--;return o}let sr=!0;function ar(e){const t=sr;return sr=e,t}const cr=255,lr=5;let ur=0;function fr(e,t){const n=pr(e,t);if(-1!==n)return n;const o=t[St];o.firstCreatePass&&(e.injectorIndex=t.length,dr(o.data,e),dr(t,null),dr(o.blueprint,null));const r=hr(e,t),i=e.injectorIndex;if(or(r)){const e=rr(r),n=ir(r,t),o=n[St].data;for(let r=0;r<8;r++)t[i+r]=n[e+r]|o[e+r]}return t[i+8]=r,i}function dr(e,t){e.push(0,0,0,0,0,0,0,0,t)}function pr(e,t){return-1===e.injectorIndex||e.parent&&e.parent.injectorIndex===e.injectorIndex||null===t[e.injectorIndex+8]?-1:(ngDevMode&&Ne(t,e.injectorIndex),e.injectorIndex)}function hr(e,t){if(e.parent&&-1!==e.parent.injectorIndex)return e.parent.injectorIndex;let n=0,o=null,r=t;for(;null!==r;){const e=r[St],t=e.type;if(2===t?(ngDevMode&&Se(e.declTNode,"Embedded TNodes should have declaration parents."),o=e.declTNode):1===t?o=r[Pt]:(ngDevMode&&_e(e.type,0,"Root type expected"),o=null),null===o)return Jo;if(ngDevMode&&o&&cn(o,r[Bt]),n++,r=r[Bt],-1!==o.injectorIndex)return o.injectorIndex|n<<16}return Jo}function gr(e,t,n){!function(e,t,n){let o;ngDevMode&&_e(t.firstCreatePass,!0,"expected firstCreatePass to be true"),"string"==typeof n?o=n.charCodeAt(0)||0:n.hasOwnProperty(dt)&&(o=n[dt]),null==o&&(o=n[dt]=ur++);const r=o&cr,i=1<<r;t.data[e+(r>>lr)]|=i}(e,t,n)}function yr(e,t,n){if(n&We.Optional)return e;me(t,"NodeInjector")}function mr(e,t,n,o){if(n&We.Optional&&void 0===o&&(o=null),!(n&(We.Self|We.Host))){const r=e[Vt],i=ze(void 0);try{return r?r.get(t,o,n&We.Optional):Ke(t,o,n&We.Optional)}finally{ze(i)}}return yr(o,t,n)}function vr(e,t,n,o=We.Default,r){if(null!==e){const i=function(e){if(ngDevMode&&Se(e,"token must be defined"),"string"==typeof e)return e.charCodeAt(0)||0;const t=e.hasOwnProperty(dt)?e[dt]:void 0;return"number"==typeof t?t>=0?t&cr:(ngDevMode&&_e(t,-1,"Expecting to get Special Injector Id"),wr):t}(n);if("function"==typeof i){if(!So(t,e,o))return o&We.Host?yr(r,n,o):mr(t,n,o,r);try{const e=i(o);if(null!=e||o&We.Optional)return e;me(n)}finally{Po()}}else if("number"==typeof i){let r=null,s=pr(e,t),a=Jo,c=o&We.Host?t[Wt][Pt]:null;for((-1===s||o&We.SkipSelf)&&(a=-1===s?hr(e,t):t[s+8],a!==Jo&&xr(o,!1)?(r=t[St],s=rr(a),t=ir(a,t)):s=-1);-1!==s;){ngDevMode&&Cn(t,s);const e=t[St];if(ngDevMode&&cn(e.data[s+8],t),Mr(i,s,e.data)){const e=_r(s,t,n,r,o,c);if(e!==br)return e}a=t[s+8],a!==Jo&&xr(o,t[St].data[s+8]===c)&&Mr(i,s,t)?(r=e,s=rr(a),t=ir(a,t)):s=-1}}}return mr(t,n,o,r)}const br={};function wr(){return new Ir(co(),io())}function _r(e,t,n,o,r,i){const s=t[St],a=s.data[e+8],c=Cr(a,s,n,null==o?rn(a)&&sr:o!=s&&!!(3&a.type),r&We.Host&&i===a);return null!==c?Dr(t,s,c,a):br}function Cr(e,t,n,o,r){const i=e.providerIndexes,s=t.data,a=1048575&i,c=e.directiveStart,l=e.directiveEnd,u=i>>20,f=r?a+u:l;for(let e=o?a:a+u;e<f;e++){const t=s[e];if(e<c&&n===t||e>=c&&t.type===n)return e}if(r){const e=s[c];if(e&&an(e)&&e.type===n)return c}return null}function Dr(e,t,n,o){let r=e[n];const i=t.data;if(r instanceof Go){const a=r;a.resolving&&ge(he(i[n]));const c=ar(a.canSeeViewProviders);a.resolving=!0;const l=a.injectImpl?ze(a.injectImpl):null,u=So(e,o,We.Default);ngDevMode&&_e(u,!0,"Because flags do not contain `SkipSelf' we expect this to always succeed.");try{r=e[n]=a.factory(void 0,i,e,o),t.firstCreatePass&&n>=o.directiveStart&&(ngDevMode&&(void 0!==(s=i[n]).type&&null!=s.selectors&&void 0!==s.inputs||Oe("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.")),function(e,t,n){ngDevMode&&mn(n);const{ngOnChanges:o,ngOnInit:r,ngDoCheck:i}=t.type.prototype;if(o){const o=In(t);(n.preOrderHooks||(n.preOrderHooks=[])).push(e,o),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,o)}r&&(n.preOrderHooks||(n.preOrderHooks=[])).push(0-e,r),i&&((n.preOrderHooks||(n.preOrderHooks=[])).push(e,i),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,i))}(n,i[n],t))}finally{null!==l&&ze(l),ar(c),a.resolving=!1,Po()}}var s;return r}function Mr(e,t,n){const o=1<<e;return!!(n[t+(e>>lr)]&o)}function xr(e,t){return!(e&We.Self||e&We.Host&&t)}class Ir{constructor(e,t){this._tNode=e,this._lView=t}get(e,t,n){return vr(this._tNode,this._lView,e,n,t)}}function Er(e){return Je((()=>{const t=e.prototype.constructor,n=t[ft]||Tr(t),o=Object.prototype;let r=Object.getPrototypeOf(e.prototype).constructor;for(;r&&r!==o;){const e=r[ft]||Tr(r);if(e&&e!==n)return e;r=Object.getPrototypeOf(r)}return e=>new e}))}function Tr(e){return le(e)?()=>{const t=Tr(ce(e));return t&&t()}:Dn(e)}function Sr(e){return function(e,t){if(ngDevMode&&Qo(e,15),ngDevMode&&Se(e,"expecting tNode"),"class"===t)return e.classes;if("style"===t)return e.styles;const n=e.attrs;if(n){const e=n.length;let o=0;for(;o<e;){const r=n[o];if(Xo(r))break;if(0===r)o+=2;else if("number"==typeof r)for(o++;o<e&&"string"==typeof n[o];)o++;else{if(r===t)return n[o+1];o+=2}}}return null}(co(),e)}const Or="__annotations__",Ar="__parameters__",Nr="__prop__metadata__";function kr(e,t,n,o,r){return Je((()=>{const i=Pr(t);function s(...e){if(this instanceof s)return i.call(this,...e),this;const t=new s(...e);return function(n){return r&&r(n,...e),(n.hasOwnProperty(Or)?n[Or]:Object.defineProperty(n,Or,{value:[]})[Or]).push(t),o&&o(n),n}}return n&&(s.prototype=Object.create(n.prototype)),s.prototype.ngMetadataName=e,s.annotationCls=s,s}))}function Pr(e){return function(...t){if(e){const n=e(...t);for(const e in n)this[e]=n[e]}}}function Rr(e,t,n){return Je((()=>{const o=Pr(t);function r(...e){if(this instanceof r)return o.apply(this,e),this;const t=new r(...e);return n.annotation=t,n;function n(e,n,o){const r=e.hasOwnProperty(Ar)?e[Ar]:Object.defineProperty(e,Ar,{value:[]})[Ar];for(;r.length<=o;)r.push(null);return(r[o]=r[o]||[]).push(t),e}}return n&&(r.prototype=Object.create(n.prototype)),r.prototype.ngMetadataName=e,r.annotationCls=r,r}))}function jr(e,t,n,o){return Je((()=>{const r=Pr(t);function i(...e){if(this instanceof i)return r.apply(this,e),this;const t=new i(...e);return function(n,r){const i=n.constructor,s=i.hasOwnProperty(Nr)?i[Nr]:Object.defineProperty(i,Nr,{value:{}})[Nr];s[r]=s.hasOwnProperty(r)&&s[r]||[],s[r].unshift(t),o&&o(n,r,...e)}}return n&&(i.prototype=Object.create(n.prototype)),i.prototype.ngMetadataName=e,i.annotationCls=i,i}))}const Vr=Rr("Attribute",(e=>({attributeName:e,__NG_ELEMENT_ID__:()=>Sr(e)})));class $r{constructor(e,t){this._desc=e,this.ngMetadataName="InjectionToken",this.ɵprov=void 0,"number"==typeof t?(("undefined"==typeof ngDevMode||ngDevMode)&&xe(t,0,"Only negative numbers are supported here"),this.__NG_ELEMENT_ID__=t):void 0!==t&&(this.ɵprov=Pe({token:this,providedIn:t.providedIn||"root",factory:t.factory}))}toString(){return`InjectionToken ${this._desc}`}}const Lr=new $r("AnalyzeForEntryComponents"),Fr=!0;class Hr{}const Ur=jr("ContentChildren",((e,t={})=>({selector:e,first:!1,isViewQuery:!1,descendants:!1,emitDistinctChangesOnly:Fr,...t})),Hr),Br=jr("ContentChild",((e,t={})=>({selector:e,first:!0,isViewQuery:!1,descendants:!0,...t})),Hr),Wr=jr("ViewChildren",((e,t={})=>({selector:e,first:!1,isViewQuery:!0,descendants:!0,emitDistinctChangesOnly:Fr,...t})),Hr),qr=jr("ViewChild",((e,t)=>({selector:e,first:!0,isViewQuery:!0,descendants:!0,...t})),Hr);var zr,Kr;function Jr(e){const t=ot.ng;if(t&&t.ɵcompilerFacade)return t.ɵcompilerFacade;if("undefined"==typeof ngDevMode||ngDevMode){console.error(`JIT compilation failed for ${e.kind}`,e.type);let t=`The ${e.kind} '${e.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n`;throw 1===e.usage?(t+=`The ${e.kind} is part of a library that has been partially compiled.\n`,t+="However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n",t+="\n",t+="Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n"):t+="JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n",t+="Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n",t+="or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.",new Error(t)}throw new Error("JIT compiler unavailable")}!function(e){e[e.Directive=0]="Directive",e[e.Component=1]="Component",e[e.Injectable=2]="Injectable",e[e.Pipe=3]="Pipe",e[e.NgModule=4]="NgModule"}(zr||(zr={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(Kr||(Kr={}));const Gr=Function;function Zr(e){return"function"==typeof e}function Qr(e,t){void 0===t&&(t=e);for(let n=0;n<e.length;n++){let o=e[n];Array.isArray(o)?(t===e&&(t=e.slice(0,n)),Qr(o,t)):t!==e&&t.push(o)}return t}function Yr(e,t){e.forEach((e=>Array.isArray(e)?Yr(e,t):t(e)))}function Xr(e,t,n){t>=e.length?e.push(n):e.splice(t,0,n)}function ei(e,t){return t>=e.length-1?e.pop():e.splice(t,1)[0]}function ti(e,t){const n=[];for(let o=0;o<e;o++)n.push(t);return n}function ni(e,t,n){let o=ri(e,t);return o>=0?e[1|o]=n:(o=~o,function(e,t,n,o){ngDevMode&&Ie(t,e.length,"Can't insert past array end.");let r=e.length;if(r==t)e.push(n,o);else if(1===r)e.push(o,e[0]),e[0]=n;else{for(r--,e.push(e[r-1],e[r]);r>t;){const t=r-2;e[r]=e[t],r--}e[t]=n,e[t+1]=o}}(e,o,t,n)),o}function oi(e,t){const n=ri(e,t);if(n>=0)return e[1|n]}function ri(e,t){return function(e,t,n){ngDevMode&&_e(Array.isArray(e),!0,"Expecting an array");let o=0,r=e.length>>n;for(;r!==o;){const i=o+(r-o>>1),s=e[i<<n];if(t===s)return i<<n;s>t?r=i:o=i+1}return~(r<<n)}(e,t,1)}const ii=/^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/,si=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/,ai=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/,ci=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;class li{constructor(e){this._reflect=e||ot.Reflect}isReflectionEnabled(){return!0}factory(e){return(...t)=>new e(...t)}_zipTypesAndAnnotations(e,t){let n;n=ti(void 0===e?t.length:e.length);for(let o=0;o<n.length;o++)void 0===e?n[o]=[]:e[o]&&e[o]!=Object?n[o]=[e[o]]:n[o]=[],t&&null!=t[o]&&(n[o]=n[o].concat(t[o]));return n}_ownParameters(e,t){if(n=e.toString(),ii.test(n)||ci.test(n)||si.test(n)&&!ai.test(n))return null;var n;if(e.parameters&&e.parameters!==t.parameters)return e.parameters;const o=e.ctorParameters;if(o&&o!==t.ctorParameters){const e="function"==typeof o?o():o,t=e.map((e=>e&&e.type)),n=e.map((e=>e&&ui(e.decorators)));return this._zipTypesAndAnnotations(t,n)}const r=e.hasOwnProperty(Ar)&&e[Ar],i=this._reflect&&this._reflect.getOwnMetadata&&this._reflect.getOwnMetadata("design:paramtypes",e);return i||r?this._zipTypesAndAnnotations(i,r):ti(e.length)}parameters(e){if(!Zr(e))return[];const t=fi(e);let n=this._ownParameters(e,t);return n||t===Object||(n=this.parameters(t)),n||[]}_ownAnnotations(e,t){if(e.annotations&&e.annotations!==t.annotations){let t=e.annotations;return"function"==typeof t&&t.annotations&&(t=t.annotations),t}return e.decorators&&e.decorators!==t.decorators?ui(e.decorators):e.hasOwnProperty(Or)?e[Or]:null}annotations(e){if(!Zr(e))return[];const t=fi(e),n=this._ownAnnotations(e,t)||[];return(t!==Object?this.annotations(t):[]).concat(n)}_ownPropMetadata(e,t){if(e.propMetadata&&e.propMetadata!==t.propMetadata){let t=e.propMetadata;return"function"==typeof t&&t.propMetadata&&(t=t.propMetadata),t}if(e.propDecorators&&e.propDecorators!==t.propDecorators){const t=e.propDecorators,n={};return Object.keys(t).forEach((e=>{n[e]=ui(t[e])})),n}return e.hasOwnProperty(Nr)?e[Nr]:null}propMetadata(e){if(!Zr(e))return{};const t=fi(e),n={};if(t!==Object){const e=this.propMetadata(t);Object.keys(e).forEach((t=>{n[t]=e[t]}))}const o=this._ownPropMetadata(e,t);return o&&Object.keys(o).forEach((e=>{const t=[];n.hasOwnProperty(e)&&t.push(...n[e]),t.push(...o[e]),n[e]=t})),n}ownPropMetadata(e){return Zr(e)&&this._ownPropMetadata(e,fi(e))||{}}hasLifecycleHook(e,t){return e instanceof Gr&&t in e.prototype}guards(e){return{}}getter(e){return new Function("o","return o."+e+";")}setter(e){return new Function("o","v","return o."+e+" = v;")}method(e){return new Function("o","args",`if (!o.${e}) throw new Error('"${e}" is undefined');\n        return o.${e}.apply(o, args);`)}importUri(e){return"object"==typeof e&&e.filePath?e.filePath:`./${re(e)}`}resourceUri(e){return`./${re(e)}`}resolveIdentifier(e,t,n,o){return o}resolveEnum(e,t){return e[t]}}function ui(e){return e?e.map((e=>new(0,e.type.annotationCls)(...e.args?e.args:[]))):[]}function fi(e){const t=e.prototype?Object.getPrototypeOf(e.prototype):null;return(t?t.constructor:null)||Object}const di={},pi="__NG_DI_FLAG__",hi="ngTempTokenPath",gi=/\n/gm,yi="__source",mi=ne({provide:String,useValue:ne});let vi;function bi(e){const t=vi;return vi=e,t}function wi(e,t=We.Default){if(void 0===vi){const e="undefined"==typeof ngDevMode||ngDevMode?"inject() must be called from an injection context":"";throw new fe(203,e)}return null===vi?Ke(e,void 0,t):vi.get(e,t&We.Optional?null:void 0,t)}function _i(e,t=We.Default){return(qe||wi)(ce(e),t)}function Ci(e){const t=ngDevMode?`This constructor is not compatible with Angular Dependency Injection because its dependency at index ${e} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${e} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`:"invalid";throw new Error(t)}const Di=_i;function Mi(e){const t=[];for(let n=0;n<e.length;n++){const o=ce(e[n]);if(Array.isArray(o)){if(0===o.length){const e="undefined"==typeof ngDevMode||ngDevMode?"Arguments array must have arguments.":"";throw new fe(900,e)}let e,n=We.Default;for(let t=0;t<o.length;t++){const r=o[t],i=r[pi];"number"==typeof i?-1===i?e=r.token:n|=i:e=r}t.push(_i(e,n))}else t.push(_i(o))}return t}function xi(e,t){return e[pi]=t,e.prototype[pi]=t,e}const Ii=xi(Rr("Inject",(e=>({token:e}))),-1),Ei=xi(Rr("Optional"),8),Ti=xi(Rr("Self"),2),Si=xi(Rr("SkipSelf"),4),Oi=xi(Rr("Host"),1);let Ai=null;function Ni(){return Ai=Ai||new li}function ki(e){return Pi(Ni().parameters(e))}function Pi(e){return e.map((e=>function(e){const t={token:null,attribute:null,host:!1,optional:!1,self:!1,skipSelf:!1};if(Array.isArray(e)&&e.length>0)for(let n=0;n<e.length;n++){const o=e[n];if(void 0===o)continue;const r=Object.getPrototypeOf(o);if(o instanceof Ei||"Optional"===r.ngMetadataName)t.optional=!0;else if(o instanceof Si||"SkipSelf"===r.ngMetadataName)t.skipSelf=!0;else if(o instanceof Ti||"Self"===r.ngMetadataName)t.self=!0;else if(o instanceof Oi||"Host"===r.ngMetadataName)t.host=!0;else if(o instanceof Ii)t.token=o.token;else if(o instanceof Vr){if(void 0===o.attributeName)throw new Error("Attribute name must be defined.");t.attribute=o.attributeName}else t.token=o}else void 0===e||Array.isArray(e)&&0===e.length?t.token=null:t.token=e;return t}(e)))}function Ri(e){const t=[],n=new Map;function o(t){let o=n.get(t);if(!o){const r=e(t);n.set(t,o=r.then(Fi))}return o}return ji.forEach(((e,n)=>{const r=[];e.templateUrl&&r.push(o(e.templateUrl).then((t=>{e.template=t})));const i=e.styleUrls,s=e.styles||(e.styles=[]),a=e.styles.length;i&&i.forEach(((t,n)=>{s.push(""),r.push(o(t).then((o=>{s[a+n]=o,i.splice(i.indexOf(t),1),0==i.length&&(e.styleUrls=void 0)})))}));const c=Promise.all(r).then((()=>function(e){Vi.delete(e)}(n)));t.push(c)})),Li(),Promise.all(t).then((()=>{}))}let ji=new Map;const Vi=new Set;function $i(e){return!!(e.templateUrl&&!e.hasOwnProperty("template")||e.styleUrls&&e.styleUrls.length)}function Li(){const e=ji;return ji=new Map,e}function Fi(e){return"string"==typeof e?e:e.text()}let Hi,Ui;function Bi(){if(void 0===Hi&&(Hi=null,ot.trustedTypes))try{Hi=ot.trustedTypes.createPolicy("angular",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch{}return Hi}function Wi(e){return Bi()?.createHTML(e)||e}function qi(){if(void 0===Ui&&(Ui=null,ot.trustedTypes))try{Ui=ot.trustedTypes.createPolicy("angular#unsafe-bypass",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch{}return Ui}function zi(e){return qi()?.createHTML(e)||e}function Ki(e){return qi()?.createScript(e)||e}function Ji(e){return qi()?.createScriptURL(e)||e}class Gi{constructor(e){this.changingThisBreaksApplicationSecurity=e}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see https://g.co/ng/security#xss)`}}class Zi extends Gi{getTypeName(){return"HTML"}}class Qi extends Gi{getTypeName(){return"Style"}}class Yi extends Gi{getTypeName(){return"Script"}}class Xi extends Gi{getTypeName(){return"URL"}}class es extends Gi{getTypeName(){return"ResourceURL"}}function ts(e){return e instanceof Gi?e.changingThisBreaksApplicationSecurity:e}function ns(e,t){const n=os(e);if(null!=n&&n!==t){if("ResourceURL"===n&&"URL"===t)return!0;throw new Error(`Required a safe ${t}, got a ${n} (see https://g.co/ng/security#xss)`)}return n===t}function os(e){return e instanceof Gi&&e.getTypeName()||null}function rs(e){return new Zi(e)}function is(e){return new Qi(e)}function ss(e){return new Yi(e)}function as(e){return new Xi(e)}function cs(e){return new es(e)}function ls(e){const t=new fs(e);return function(){try{return!!(new window.DOMParser).parseFromString(Wi(""),"text/html")}catch{return!1}}()?new us(t):t}class us{constructor(e){this.inertDocumentHelper=e}getInertBodyElement(e){e="<body><remove></remove>"+e;try{const t=(new window.DOMParser).parseFromString(Wi(e),"text/html").body;return null===t?this.inertDocumentHelper.getInertBodyElement(e):(t.removeChild(t.firstChild),t)}catch{return null}}}class fs{constructor(e){if(this.defaultDoc=e,this.inertDocument=this.defaultDoc.implementation.createHTMLDocument("sanitization-inert"),null==this.inertDocument.body){const e=this.inertDocument.createElement("html");this.inertDocument.appendChild(e);const t=this.inertDocument.createElement("body");e.appendChild(t)}}getInertBodyElement(e){const t=this.inertDocument.createElement("template");if("content"in t)return t.innerHTML=Wi(e),t;const n=this.inertDocument.createElement("body");return n.innerHTML=Wi(e),this.defaultDoc.documentMode&&this.stripCustomNsAttrs(n),n}stripCustomNsAttrs(e){const t=e.attributes;for(let n=t.length-1;0<n;n--){const o=t.item(n).name;"xmlns:ns1"!==o&&0!==o.indexOf("ns1:")||e.removeAttribute(o)}let n=e.firstChild;for(;n;)n.nodeType===Node.ELEMENT_NODE&&this.stripCustomNsAttrs(n),n=n.nextSibling}}const ds=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,ps=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function hs(e){return(e=String(e)).match(ds)||e.match(ps)?e:(("undefined"==typeof ngDevMode||ngDevMode)&&console.warn(`WARNING: sanitizing unsafe URL value ${e} (see https://g.co/ng/security#xss)`),"unsafe:"+e)}function gs(e){return(e=String(e)).split(",").map((e=>hs(e.trim()))).join(", ")}function ys(e){const t={};for(const n of e.split(","))t[n]=!0;return t}function ms(...e){const t={};for(const n of e)for(const e in n)n.hasOwnProperty(e)&&(t[e]=!0);return t}const vs=ys("area,br,col,hr,img,wbr"),bs=ys("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),ws=ys("rp,rt"),_s=ms(ws,bs),Cs=ms(bs,ys("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),Ds=ms(ws,ys("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),Ms=ms(vs,Cs,Ds,_s),xs=ys("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),Is=ys("srcset"),Es=ys("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),Ts=ys("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext"),Ss=ms(xs,Is,Es,Ts),Os=ys("script,style,template");class As{constructor(){this.sanitizedSomething=!1,this.buf=[]}sanitizeChildren(e){let t=e.firstChild,n=!0;for(;t;)if(t.nodeType===Node.ELEMENT_NODE?n=this.startElement(t):t.nodeType===Node.TEXT_NODE?this.chars(t.nodeValue):this.sanitizedSomething=!0,n&&t.firstChild)t=t.firstChild;else for(;t;){t.nodeType===Node.ELEMENT_NODE&&this.endElement(t);let e=this.checkClobberedElement(t,t.nextSibling);if(e){t=e;break}t=this.checkClobberedElement(t,t.parentNode)}return this.buf.join("")}startElement(e){const t=e.nodeName.toLowerCase();if(!Ms.hasOwnProperty(t))return this.sanitizedSomething=!0,!Os.hasOwnProperty(t);this.buf.push("<"),this.buf.push(t);const n=e.attributes;for(let e=0;e<n.length;e++){const t=n.item(e),o=t.name,r=o.toLowerCase();if(!Ss.hasOwnProperty(r)){this.sanitizedSomething=!0;continue}let i=t.value;xs[r]&&(i=hs(i)),Is[r]&&(i=gs(i)),this.buf.push(" ",o,'="',Ps(i),'"')}return this.buf.push(">"),!0}endElement(e){const t=e.nodeName.toLowerCase();Ms.hasOwnProperty(t)&&!vs.hasOwnProperty(t)&&(this.buf.push("</"),this.buf.push(t),this.buf.push(">"))}chars(e){this.buf.push(Ps(e))}checkClobberedElement(e,t){if(t&&(e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)===Node.DOCUMENT_POSITION_CONTAINED_BY)throw new Error(`Failed to sanitize html because the element is clobbered: ${e.outerHTML}`);return t}}const Ns=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,ks=/([^\#-~ |!])/g;function Ps(e){return e.replace(/&/g,"&amp;").replace(Ns,(function(e){return"&#"+(1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536)+";"})).replace(ks,(function(e){return"&#"+e.charCodeAt(0)+";"})).replace(/</g,"&lt;").replace(/>/g,"&gt;")}let Rs;function js(e,t){let n=null;try{Rs=Rs||ls(e);let o=t?String(t):"";n=Rs.getInertBodyElement(o);let r=5,i=o;do{if(0===r)throw new Error("Failed to sanitize html because the input is unstable");r--,o=i,i=n.innerHTML,n=Rs.getInertBodyElement(o)}while(o!==i);const s=new As,a=s.sanitizeChildren(Vs(n)||n);return("undefined"==typeof ngDevMode||ngDevMode)&&s.sanitizedSomething&&console.warn("WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss"),Wi(a)}finally{if(n){const e=Vs(n)||n;for(;e.firstChild;)e.removeChild(e.firstChild)}}}function Vs(e){return"content"in e&&function(e){return e.nodeType===Node.ELEMENT_NODE&&"TEMPLATE"===e.nodeName}(e)?e.content:null}var $s;function Ls(e){const t=Ks();return t?zi(t.sanitize($s.HTML,e)||""):ns(e,"HTML")?zi(ts(e)):js(Fn(),pe(e))}function Fs(e){const t=Ks();return t?t.sanitize($s.STYLE,e)||"":ns(e,"Style")?ts(e):pe(e)}function Hs(e){const t=Ks();return t?t.sanitize($s.URL,e)||"":ns(e,"URL")?ts(e):hs(pe(e))}function Us(e){const t=Ks();if(t)return Ji(t.sanitize($s.RESOURCE_URL,e)||"");if(ns(e,"ResourceURL"))return Ji(ts(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a resource URL context (see https://g.co/ng/security#xss)":"";throw new fe(904,n)}function Bs(e){const t=Ks();if(t)return Ki(t.sanitize($s.SCRIPT,e)||"");if(ns(e,"Script"))return Ki(ts(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a script context":"";throw new fe(905,n)}function Ws(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted HTML constant: ${e.join("?")}`);return Wi(e[0])}function qs(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted URL constant: ${e.join("?")}`);return function(e){return Bi()?.createScriptURL(e)||e}(e[0])}function zs(e,t,n){return function(e,t){return"src"===t&&("embed"===e||"frame"===e||"iframe"===e||"media"===e||"script"===e)||"href"===t&&("base"===e||"link"===e)?Us:Hs}(t,n)(e)}function Ks(){const e=io();return e&&e[Ft]}function Js(e){let t=Xs(e);if(t){if(Array.isArray(t)){const o=t;let r,i,s;if((n=e)&&n.constructor&&n.constructor.ɵcmp){if(r=oa(o,e),-1==r)throw new Error("The provided component was not found in the application");i=e}else if(function(e){return e&&e.constructor&&e.constructor.ɵdir}(e)){if(r=function(e,t){let n=e[St].firstChild;for(;n;){const o=n.directiveStart,r=n.directiveEnd;for(let i=o;i<r;i++)if(e[i]===t)return n.index;n=na(n)}return-1}(o,e),-1==r)throw new Error("The provided directive was not found in the application");s=ra(r,o,!1)}else if(r=ta(o,e),-1==r)return null;const a=Wn(o[r]),c=Xs(a),l=c&&!Array.isArray(c)?c:Gs(o,r,a);if(i&&void 0===l.component&&(l.component=i,Ys(l.component,l)),s&&void 0===l.directives){l.directives=s;for(let e=0;e<s.length;e++)Ys(s[e],l)}Ys(l.native,l),t=l}}else{const n=e;ngDevMode&&Ae(n);let o=n;for(;o=o.parentNode;){const e=Xs(o);if(e){let o;if(o=Array.isArray(e)?e:e.lView,!o)return null;const r=ta(o,n);if(r>=0){const e=Wn(o[r]),n=Gs(o,r,e);Ys(e,n),t=n;break}}}}var n;return t||null}function Gs(e,t,n){return{lView:e,nodeIndex:t,native:n,component:void 0,directives:void 0,localRefs:void 0}}function Zs(e){let t,n=Xs(e);if(Array.isArray(n)){const o=oa(n,e);t=Gn(o,n);const r=Gs(n,o,t[Tt]);r.component=e,Ys(e,r),Ys(r.native,r)}else{const e=n;t=Gn(e.nodeIndex,e.lView)}return t}!function(e){e[e.NONE=0]="NONE",e[e.HTML=1]="HTML",e[e.STYLE=2]="STYLE",e[e.SCRIPT=3]="SCRIPT",e[e.URL=4]="URL",e[e.RESOURCE_URL=5]="RESOURCE_URL"}($s||($s={}));const Qs="__ngContext__";function Ys(e,t){ngDevMode&&Se(e,"Target expected"),e[Qs]=t}function Xs(e){return ngDevMode&&Se(e,"Target expected"),e[Qs]||null}function ea(e){const t=Xs(e);return t?Array.isArray(t)?t:t.lView:null}function ta(e,t){const n=e[St];for(let o=Jt;o<n.bindingStartIndex;o++)if(Wn(e[o])===t)return o;return-1}function na(e){if(e.child)return e.child;if(e.next)return e.next;for(;e.parent&&!e.parent.next;)e=e.parent;return e.parent&&e.parent.next}function oa(e,t){const n=e[St].components;if(n)for(let o=0;o<n.length;o++){const r=n[o];if(Gn(r,e)[jt]===t)return r}else if(Gn(Jt,e)[jt]===t)return Jt;return-1}function ra(e,t,n){const o=t[St].data[e];let r=o.directiveStart;if(0==r)return st;const i=o.directiveEnd;return!n&&2&o.flags&&r++,t.slice(r,i)}const ia="ngOriginalError";function sa(e){return e[ia]}function aa(e,...t){e.error(...t)}class ca{constructor(){this._console=console}handleError(e){const t=this._findOriginalError(e),n=function(e){return e&&e.ngErrorLogger||aa}(e);n(this._console,"ERROR",e),t&&n(this._console,"ORIGINAL ERROR",t)}_findOriginalError(e){let t=e&&sa(e);for(;t&&sa(t);)t=sa(t);return t||null}}const la={name:"custom-elements"},ua={name:"no-errors-schema"},fa=/^>|^->|<!--|-->|--!>|<!-$/g,da=/(<|>)/,pa="​$1​";function ha(e){return e.replace(fa,(e=>e.replace(da,pa)))}const ga=/([A-Z])/g,ya=("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(ot);function ma(e){return e.ownerDocument.defaultView}function va(e){return e.ownerDocument}function ba(e){return e.ownerDocument.body}const wa="�";function _a(e){return e instanceof Function?e():e}function Ca(e){throw new fe(-300,`Multiple components match node with tagname ${e.value}`)}function Da(e,t,n,o,r){const[i,s,...a]=o.split(wa);let c=s,l=s;for(let o=0;o<a.length;o++){const i=t+o;c+=`${e[i]}${a[o]}`,l+=`${i===n?r:e[i]}${a[o]}`}return{propName:i,oldValue:c,newValue:l}}var Ma;let xa;function Ia(e,t){return xa(e,t)}function Ea(e){ngDevMode&&yn(e);const t=e[At];return nn(t)?t[At]:t}function Ta(e){const t=function(e){ngDevMode&&Se(e,"component");let t=tn(e)?e:ea(e);for(;t&&!(512&t[Ot]);)t=Ea(t);return ngDevMode&&yn(t),t}(e);return ngDevMode&&Se(t[jt],"RootView has no context. Perhaps it is disconnected?"),t[jt]}function Sa(e){return Aa(e[Ht])}function Oa(e){return Aa(e[Nt])}function Aa(e){for(;null!==e&&!nn(e);)e=e[Nt];return e}function Na(e,t,n,o,r){if(null!=o){let i,s=!1;nn(o)?i=o:tn(o)&&(s=!0,ngDevMode&&Se(o[Tt],"HOST must be defined for a component LView"),o=o[Tt]);const a=Wn(o);ngDevMode&&!Un(t)&&Ae(a),0===e&&null!==n?null==r?Wa(t,n,a):Ba(t,n,a,r||null,!0):1===e&&null!==n?Ba(t,n,a,r||null,!0):2===e?nc(t,a,s):3===e&&(ngDevMode&&ngDevMode.rendererDestroyNode++,t.destroyNode(a)),null!=i&&function(e,t,n,o,r){ngDevMode&&hn(n);const i=n[Yt];i!==Wn(n)&&Na(t,e,o,i,r);for(let r=en;r<n.length;r++){const s=n[r];rc(s[St],s,e,t,o,i)}}(t,e,i,n,r)}}function ka(e,t){return ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&ngDevMode.rendererSetText++,Un(e)?e.createText(t):e.createTextNode(t)}function Pa(e,t,n){ngDevMode&&ngDevMode.rendererSetText++,Un(e)?e.setValue(t,n):t.textContent=n}function Ra(e,t){return ngDevMode&&ngDevMode.rendererCreateComment++,e.createComment(ha(t))}function ja(e,t,n){if(ngDevMode&&ngDevMode.rendererCreateElement++,Un(e))return e.createElement(t,n);{const o=null!==n?function(e){const t=e.toLowerCase();return t===Pn?Rn:t===jn?Vn:null}(n):null;return null===o?e.createElement(t):e.createElementNS(o,t)}}function Va(e,t){ngDevMode&&hn(e),ngDevMode&&Se(e[Xt],"A projected view should belong to a non-empty projected views collection");const n=e[Xt],o=n.indexOf(t),r=t[At];ngDevMode&&hn(r),1024&t[Ot]&&(t[Ot]&=-1025,eo(r,-1)),n.splice(o,1)}function $a(e,t){if(e.length<=en)return;const n=en+t,o=e[n];if(o){const i=o[qt];null!==i&&i!==e&&Va(i,o),t>0&&(e[n-1][Nt]=o[Nt]);const s=ei(e,en+t);rc(o[St],r=o,r[Lt],2,null,null),r[Tt]=null,r[Pt]=null;const a=s[Kt];null!==a&&a.detachView(s[St]),o[At]=null,o[Nt]=null,o[Ot]&=-129}var r;return o}function La(e,t){if(!(256&t[Ot])){const n=t[Lt];Un(n)&&n.destroyNode&&rc(e,t,n,3,null,null),function(e){let t=e[Ht];if(!t)return Fa(e[St],e);for(;t;){let n=null;if(tn(t))n=t[Ht];else{ngDevMode&&hn(t);const e=t[en];e&&(n=e)}if(!n){for(;t&&!t[Nt]&&t!==e;)tn(t)&&Fa(t[St],t),t=t[At];null===t&&(t=e),tn(t)&&Fa(t[St],t),n=t&&t[Nt]}t=n}}(t)}}function Fa(e,t){if(!(256&t[Ot])){t[Ot]&=-129,t[Ot]|=256,function(e,t){let n;if(null!=e&&null!=(n=e.destroyHooks))for(let e=0;e<n.length;e+=2){const o=t[n[e]];if(!(o instanceof Go)){const t=n[e+1];if(Array.isArray(t))for(let e=0;e<t.length;e+=2){const n=o[t[e]],r=t[e+1];kn(4,n,r);try{r.call(n)}finally{kn(5,n,r)}}else{kn(4,o,t);try{t.call(o)}finally{kn(5,o,t)}}}}}(e,t),function(e,t){const n=e.cleanup,o=t[Rt];let r=-1;if(null!==n)for(let e=0;e<n.length-1;e+=2)if("string"==typeof n[e]){const i=n[e+1],s="function"==typeof i?i(t):Wn(t[i]),a=o[r=n[e+2]],c=n[e+3];"boolean"==typeof c?s.removeEventListener(n[e],a,c):c>=0?o[r=c]():o[r=-c].unsubscribe(),e+=2}else{const t=o[r=n[e+1]];n[e].call(t)}if(null!==o){for(let e=r+1;e<o.length;e++){const t=o[e];ngDevMode&&(s="Expecting instance cleanup function.","function"!=typeof(i=t)&&Oe(s,null===i?"null":typeof i,"function","===")),t()}t[Rt]=null}var i,s}(e,t),1===t[St].type&&Un(t[Lt])&&(ngDevMode&&ngDevMode.rendererDestroy++,t[Lt].destroy());const n=t[qt];if(null!==n&&nn(t[At])){n!==t[At]&&Va(n,t);const o=t[Kt];null!==o&&o.detachView(e)}}}function Ha(e,t,n){return Ua(e,t.parent,n)}function Ua(e,t,n){let o=t;for(;null!==o&&40&o.type;)o=(t=o).parent;if(null===o)return n[Tt];if(ngDevMode&&Qo(o,7),2&o.flags){ngDevMode&&cn(o,n);const t=e.data[o.directiveStart].encapsulation;if(t===Qe.None||t===Qe.Emulated)return null}return zn(o,n)}function Ba(e,t,n,o,r){ngDevMode&&ngDevMode.rendererInsertBefore++,Un(e)?e.insertBefore(t,n,o,r):t.insertBefore(n,o,r)}function Wa(e,t,n){ngDevMode&&ngDevMode.rendererAppendChild++,ngDevMode&&Se(t,"parent node must be defined"),Un(e)?e.appendChild(t,n):t.appendChild(n)}function qa(e,t,n,o,r){null!==o?Ba(e,t,n,o,r):Wa(e,t,n)}function za(e,t){return Un(e)?e.parentNode(t):t.parentNode}function Ka(e,t,n){return Za(e,t,n)}function Ja(e,t,n){return 40&e.type?zn(e,n):null}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(Ma||(Ma={}));let Ga,Za=Ja;function Qa(e,t){Za=e,Ga=t}function Ya(e,t,n,o){const r=Ha(e,o,t),i=t[Lt],s=Ka(o.parent||t[Pt],o,t);if(null!=r)if(Array.isArray(n))for(let e=0;e<n.length;e++)qa(i,r,n[e],s,!1);else qa(i,r,n,s,!1);void 0!==Ga&&Ga(i,o,t,n,r)}function Xa(e,t){if(null!==t){ngDevMode&&Qo(t,63);const n=t.type;if(3&n)return zn(t,e);if(4&n)return tc(-1,e[t.index]);if(8&n){const n=t.child;if(null!==n)return Xa(e,n);{const n=e[t.index];return nn(n)?tc(-1,n):Wn(n)}}if(32&n)return Ia(t,e)()||Wn(e[t.index]);{const n=ec(e,t);if(null!==n){if(Array.isArray(n))return n[0];const t=Ea(e[Wt]);return ngDevMode&&_n(t),Xa(t,n)}return Xa(e,t.next)}}return null}function ec(e,t){if(null!==t){const n=e[Wt][Pt],o=t.projection;return ngDevMode&&function(e){Se(e[Wt],"Component views should exist."),Se(e[Wt][Pt].projection,"Components with projection nodes (<ng-content>) must have projection slots defined.")}(e),n.projection[o]}return null}function tc(e,t){const n=en+e+1;if(n<t.length){const e=t[n],o=e[St].firstChild;if(null!==o)return Xa(e,o)}return t[Yt]}function nc(e,t,n){ngDevMode&&ngDevMode.rendererRemoveNode++;const o=za(e,t);o&&function(e,t,n,o){Un(e)?e.removeChild(t,n,o):t.removeChild(n)}(e,o,t,n)}function oc(e,t,n,o,r,i,s){for(;null!=n;){ngDevMode&&cn(n,o),ngDevMode&&Qo(n,63);const a=o[n.index],c=n.type;if(s&&0===t&&(a&&Ys(Wn(a),o),n.flags|=4),64&~n.flags)if(8&c)oc(e,t,n.child,o,r,i,!1),Na(t,e,r,a,i);else if(32&c){const s=Ia(n,o);let c;for(;c=s();)Na(t,e,r,c,i);Na(t,e,r,a,i)}else 16&c?ic(e,t,o,n,r,i):(ngDevMode&&Qo(n,7),Na(t,e,r,a,i));n=s?n.projectionNext:n.next}}function rc(e,t,n,o,r,i){oc(n,o,e.firstChild,t,r,i,!1)}function ic(e,t,n,o,r,i){const s=n[Wt],a=s[Pt];ngDevMode&&_e(typeof o.projection,"number","expecting projection index");const c=a.projection[o.projection];if(Array.isArray(c))for(let n=0;n<c.length;n++)Na(t,e,r,c[n],i);else oc(e,t,c,s[At],r,i,!0)}function sc(e,t,n){ngDevMode&&we(n,"'newValue' should be a string"),Un(e)?e.setAttribute(t,"style",n):t.style.cssText=n,ngDevMode&&ngDevMode.rendererSetStyle++}function ac(e,t,n){ngDevMode&&we(n,"'newValue' should be a string"),Un(e)?""===n?e.removeAttribute(t,"class"):e.setAttribute(t,"class",n):t.className=n,ngDevMode&&ngDevMode.rendererSetClassName++}function cc(e,t,n){ngDevMode&&Ce(t,"",'can not look for "" string.');let o=e.length;for(;;){const r=e.indexOf(t,n);if(-1===r)return r;if(0===r||e.charCodeAt(r-1)<=32){const n=t.length;if(r+n===o||e.charCodeAt(r+n)<=32)return r}n=r+1}}const lc="ng-template";function uc(e,t,n){ngDevMode&&_e(t,t.toLowerCase(),"Class name expected to be lowercase.");let o=0;for(;o<e.length;){let r=e[o++];if(n&&"class"===r){if(r=e[o],-1!==cc(r.toLowerCase(),t,0))return!0}else if(1===r){for(;o<e.length&&"string"==typeof(r=e[o++]);)if(r.toLowerCase()===t)return!0;return!1}}return!1}function fc(e){return 4===e.type&&e.value!==lc}function dc(e,t,n){return t===(4!==e.type||n?e.value:lc)}function pc(e,t,n){ngDevMode&&Se(t[0],"Selector should have a tag name");let o=4;const r=e.attrs||[],i=function(e){for(let t=0;t<e.length;t++)if(Xo(e[t]))return t;return e.length}(r);let s=!1;for(let a=0;a<t.length;a++){const c=t[a];if("number"!=typeof c){if(!s)if(4&o){if(o=2|1&o,""!==c&&!dc(e,c,n)||""===c&&1===t.length){if(hc(o))return!1;s=!0}}else{const l=8&o?c:t[++a];if(8&o&&null!==e.attrs){if(!uc(e.attrs,l,n)){if(hc(o))return!1;s=!0}continue}const u=gc(8&o?"class":c,r,fc(e),n);if(-1===u){if(hc(o))return!1;s=!0;continue}if(""!==l){let e;u>i?e="":(ngDevMode&&Ce(r[u],0,"We do not match directives on namespaced attributes"),e=r[u+1].toLowerCase());const t=8&o?e:null;if(t&&-1!==cc(t,l,0)||2&o&&l!==e){if(hc(o))return!1;s=!0}}}}else{if(!s&&!hc(o)&&!hc(c))return!1;if(s&&hc(c))continue;s=!1,o=c|1&o}}return hc(o)||s}function hc(e){return!(1&e)}function gc(e,t,n,o){if(null===t)return-1;let r=0;if(o||!n){let n=!1;for(;r<t.length;){const o=t[r];if(o===e)return r;if(3===o||6===o)n=!0;else{if(1===o||2===o){let e=t[++r];for(;"string"==typeof e;)e=t[++r];continue}if(4===o)break;if(0===o){r+=4;continue}}r+=n?1:2}return-1}return function(e,t){let n=e.indexOf(4);if(n>-1)for(n++;n<e.length;){const o=e[n];if("number"==typeof o)return-1;if(o===t)return n;n++}return-1}(t,e)}function yc(e,t,n=!1){for(let o=0;o<t.length;o++)if(pc(e,t[o],n))return!0;return!1}function mc(e,t){e:for(let n=0;n<t.length;n++){const o=t[n];if(e.length===o.length){for(let t=0;t<e.length;t++)if(e[t]!==o[t])continue e;return!0}}return!1}function vc(e,t){return e?":not("+t.trim()+")":t}function bc(e){let t=e[0],n=1,o=2,r="",i=!1;for(;n<e.length;){let s=e[n];if("string"==typeof s)if(2&o){const t=e[++n];r+="["+s+(t.length>0?'="'+t+'"':"")+"]"}else 8&o?r+="."+s:4&o&&(r+=" "+s);else""===r||hc(s)||(t+=vc(i,r),r=""),o=s,i=i||!hc(o);n++}return""!==r&&(t+=vc(i,r)),t}const wc="undefined"==typeof ngDevMode||ngDevMode?{__brand__:"NO_CHANGE"}:{};function _c(e){ngDevMode&&Ee(e,0,"Can only advance forward"),Cc(so(),io(),jo()+e,go())}function Cc(e,t,n,o){if(ngDevMode&&function(e,t){const n=e[1];wn(Jt,n.bindingStartIndex,t)}(t,n),!o)if(3&~t[Ot]){const o=e.preOrderHooks;null!==o&&Wo(t,o,0,n)}else{const o=e.preOrderCheckHooks;null!==o&&Bo(t,o,n)}Vo(n)}function Dc(e){if(!ngDevMode)throw new Error("Looks like we are in 'prod mode', but we are creating a named Array type, which is wrong! Check your code");try{return function(...e){if("undefined"==typeof ngDevMode)throw new Error("newTrustedFunctionForDev should never be called in production");if(!ot.trustedTypes)return new Function(...e);const t=`(function anonymous(${e.slice(0,-1).join(",")}\n) { ${e[e.length-1]}\n})`,n=ot.eval((o=t,Bi()?.createScript(o)||o));var o;return void 0===n.bind?new Function(...e):(n.toString=()=>t,n.bind(ot))}("Array",`return class ${e} extends Array{}`)(Array)}catch(e){return Array}}function Mc(e,t){return ngDevMode&&be(e,0,32767),ngDevMode&&be(t,0,32767),e<<17|t<<2}function xc(e){return ngDevMode&&ve(e,"expected number"),e>>17&32767}function Ic(e){return ngDevMode&&ve(e,"expected number"),!(2&~e)}function Ec(e){return ngDevMode&&ve(e,"expected number"),2|e}function Tc(e){return ngDevMode&&ve(e,"expected number"),(131068&e)>>2}function Sc(e,t){return ngDevMode&&ve(e,"expected number"),ngDevMode&&be(t,0,32767),-131069&e|t<<2}function Oc(e){return ngDevMode&&ve(e,"expected number"),!(1&~e)}function Ac(e){return ngDevMode&&ve(e,"expected number"),1|e}function Nc(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{value:t,enumerable:!1})}function kc(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{get:t,enumerable:!1})}let Pc,Rc,jc,Vc,$c;class Lc extends Array{}class Fc extends Array{}class Hc extends Array{}function Uc(e){if(null==e)return"";const t=e.lastIndexOf("_Template");return"_"+(-1===t?e:e.substr(0,t))}const Bc=class{constructor(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v,b,w,_,C,D,M,x,I,E,T,S,O,A){this.type=e,this.blueprint=t,this.template=n,this.queries=o,this.viewQuery=r,this.declTNode=i,this.data=s,this.bindingStartIndex=a,this.expandoStartIndex=c,this.hostBindingOpCodes=l,this.firstCreatePass=u,this.firstUpdatePass=f,this.staticViewQueries=d,this.staticContentQueries=p,this.preOrderHooks=h,this.preOrderCheckHooks=g,this.contentHooks=y,this.contentCheckHooks=m,this.viewHooks=v,this.viewCheckHooks=b,this.destroyHooks=w,this.cleanup=_,this.contentQueries=C,this.components=D,this.directiveRegistry=M,this.pipeRegistry=x,this.firstChild=I,this.schemas=E,this.consts=T,this.incompleteFirstPass=S,this._decls=O,this._vars=A}get template_(){const e=[];return zc(this.firstChild,e),e.join("")}get type_(){return Gt[this.type]||`TViewType.?${this.type}?`}},Wc=class{constructor(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v,b,w,_,C,D,M,x,I,E,T,S,O,A){this.tView_=e,this.type=t,this.index=n,this.insertBeforeIndex=o,this.injectorIndex=r,this.directiveStart=i,this.directiveEnd=s,this.directiveStylingLast=a,this.propertyBindings=c,this.flags=l,this.providerIndexes=u,this.value=f,this.attrs=d,this.mergedAttrs=p,this.localNames=h,this.initialInputs=g,this.inputs=y,this.outputs=m,this.tViews=v,this.next=b,this.projectionNext=w,this.child=_,this.parent=C,this.projection=D,this.styles=M,this.stylesWithoutHost=x,this.residualStyles=I,this.classes=E,this.classesWithoutHost=T,this.residualClasses=S,this.classBindings=O,this.styleBindings=A}debugNodeInjectorPath(e){const t=[];let n=pr(this,e);if(-1===n){const t=hr(this,e);t!==Jo&&(n=rr(t),e=ir(t,e))}for(;-1!==n;){ngDevMode&&Cn(e,n);const o=e[St].data[n+8];t.push(cl(o,e));const r=e[n+8];r===Jo?n=-1:(n=rr(r),e=ir(r,e))}return t}get type_(){return Zo(this.type)||`TNodeType.?${this.type}?`}get flags_(){const e=[];return 16&this.flags&&e.push("TNodeFlags.hasClassInput"),8&this.flags&&e.push("TNodeFlags.hasContentQuery"),32&this.flags&&e.push("TNodeFlags.hasStyleInput"),128&this.flags&&e.push("TNodeFlags.hasHostBindings"),2&this.flags&&e.push("TNodeFlags.isComponentHost"),1&this.flags&&e.push("TNodeFlags.isDirectiveHost"),64&this.flags&&e.push("TNodeFlags.isDetached"),4&this.flags&&e.push("TNodeFlags.isProjected"),e.join("|")}get template_(){if(1&this.type)return this.value;const e=[],t="string"==typeof this.value&&this.value||this.type_;if(e.push("<",t),this.flags&&e.push(" ",this.flags_),this.attrs)for(let t=0;t<this.attrs.length;){const n=this.attrs[t++];if("number"==typeof n)break;const o=this.attrs[t++];e.push(" ",n,'="',o,'"')}return e.push(">"),zc(this.child,e),e.push("</",t,">"),e.join("")}get styleBindings_(){return qc(this,!1)}get classBindings_(){return qc(this,!0)}get providerIndexStart_(){return 1048575&this.providerIndexes}get providerIndexEnd_(){return this.providerIndexStart_+(this.providerIndexes>>>20)}};function qc(e,t){const n=e.tView_.data,o=[],r=t?e.classBindings:e.styleBindings,i=xc(r),s=Tc(r);let a=0!==s,c=a?s:i;for(;0!==c;){const e=n[c],t=n[c+1];o.unshift({key:e,index:c,isTemplate:a,prevDuplicate:Ic(t),nextDuplicate:Oc(t),nextIndex:Tc(t),prevIndex:xc(t)}),c===i&&(a=!1),c=xc(t)}return o.push((t?e.residualClasses:e.residualStyles)||null),o}function zc(e,t){for(;e;)t.push(e.template_),e=e.next}class Kc extends Array{}let Jc;class Gc extends Array{}class Zc extends Array{}class Qc extends Array{}class Yc extends Array{}class Xc extends Array{}class el extends Array{}class tl extends Array{}function nl(e){if(e){const t=e.debug;return Se(t,"Object does not have a debug representation."),t}return e}function ol(e,t=!1){const n=Wn(e);if(n)switch(n.nodeType){case Node.TEXT_NODE:return n.textContent;case Node.COMMENT_NODE:return`\x3c!--${n.textContent}--\x3e`;case Node.ELEMENT_NODE:const e=n.outerHTML;if(t)return e;{const t=">"+n.innerHTML+"<";return e.split(t)[0]+">"}}return null}class rl{constructor(e){this._raw_lView=e}get flags(){const e=this._raw_lView[Ot];return{__raw__flags__:e,initPhaseState:3&e,creationMode:!!(4&e),firstViewPass:!!(8&e),checkAlways:!!(16&e),dirty:!!(64&e),attached:!!(128&e),destroyed:!!(256&e),isRoot:!!(512&e),indexWithinInitPhase:e>>11}}get parent(){return nl(this._raw_lView[At])}get hostHTML(){return ol(this._raw_lView[Tt],!0)}get html(){return(this.nodes||[]).map(il).join("")}get context(){return this._raw_lView[jt]}get nodes(){const e=this._raw_lView;return al(e[St].firstChild,e)}get template(){return this.tView.template_}get tView(){return this._raw_lView[St]}get cleanup(){return this._raw_lView[Rt]}get injector(){return this._raw_lView[Vt]}get rendererFactory(){return this._raw_lView[$t]}get renderer(){return this._raw_lView[Lt]}get sanitizer(){return this._raw_lView[Ft]}get childHead(){return nl(this._raw_lView[Ht])}get next(){return nl(this._raw_lView[Nt])}get childTail(){return nl(this._raw_lView[Ut])}get declarationView(){return nl(this._raw_lView[Bt])}get queries(){return this._raw_lView[Kt]}get tHost(){return this._raw_lView[Pt]}get decls(){return sl(this.tView,this._raw_lView,Jt,this.tView.bindingStartIndex)}get vars(){return sl(this.tView,this._raw_lView,this.tView.bindingStartIndex,this.tView.expandoStartIndex)}get expando(){return sl(this.tView,this._raw_lView,this.tView.expandoStartIndex,this._raw_lView.length)}get childViews(){const e=[];let t=this.childHead;for(;t;)e.push(t),t=t.next;return e}}function il(e){if("ElementContainer"===e.type)return(e.children||[]).map(il).join("");if("IcuContainer"===e.type)throw new Error("Not implemented");return ol(e.native,!0)||""}function sl(e,t,n,o){let r=[];for(let i=n;i<o;i++)r.push({index:i,t:e.data[i],l:t[i]});return{start:n,end:o,length:o-n,content:r}}function al(e,t){if(e){const n=[];let o=e;for(;o;)n.push(cl(o,t)),o=o.next;return n}return[]}function cl(e,t){const n=Wn(t[e.index]),o=[],r=[],i=t[St];for(let n=e.directiveStart;n<e.directiveEnd;n++){const e=i.data[n];o.push(e.type),r.push(t[n])}return{html:ol(n),type:Zo(e.type),tNode:e,native:n,children:al(e.child,t),factories:o,instances:r,injector:ll(e,i,t),get injectorResolutionPath(){return e.debugNodeInjectorPath(t)}}}function ll(e,t,n){const o=[];for(let n=e.providerIndexStart_;n<e.providerIndexEnd_;n++)o.push(t.data[n]);const r=[];for(let n=e.providerIndexEnd_;n<e.directiveEnd;n++)r.push(t.data[n]);return{bloom:fl(n,e.injectorIndex),cumulativeBloom:fl(t.data,e.injectorIndex),providers:r,viewProviders:o,parentInjectorIndex:n[e.providerIndexStart_-1]}}function ul(e,t){const n=e[t];if("number"!=typeof n)return"????????";const o="00000000"+n.toString(2);return o.substring(o.length-8)}function fl(e,t){return t<0?"NO_NODE_INJECTOR":`${ul(e,t+7)}_${ul(e,t+6)}_${ul(e,t+5)}_${ul(e,t+4)}_${ul(e,t+3)}_${ul(e,t+2)}_${ul(e,t+1)}_${ul(e,t+0)}`}class dl{constructor(e){this._raw_lContainer=e}get hasTransplantedViews(){return this._raw_lContainer[Qt]}get views(){return this._raw_lContainer.slice(en).map(nl)}get parent(){return nl(this._raw_lContainer[At])}get movedViews(){return this._raw_lContainer[Xt]}get host(){return this._raw_lContainer[Tt]}get native(){return this._raw_lContainer[Yt]}get next(){return nl(this._raw_lContainer[Nt])}}const pl=Promise.resolve(null);function hl(e,t){const n=e.contentQueries;if(null!==n)for(let o=0;o<n.length;o+=2){const r=n[o],i=n[o+1];if(-1!==i){const n=e.data[i];ngDevMode&&Se(n,"DirectiveDef not found."),ngDevMode&&Se(n.contentQueries,"contentQueries function should be defined"),Eo(r),n.contentQueries(2,t[i],i)}}}function gl(e,t,n,o,r,i,s,a,c,l){const u=ngDevMode?function(e){return function(e,t){switch(e){case 0:return void 0===jc&&(jc=new Lc),jc;case 1:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===Vc&&(Vc=new Fc),Vc;void 0===Pc&&(Pc=new Map);let e=Pc.get(t);return void 0===e&&(e=new(Dc("LComponentView"+Uc(t))),Pc.set(t,e)),e;case 2:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===$c&&($c=new Hc),$c;void 0===Rc&&(Rc=new Map);let n=Rc.get(t);return void 0===n&&(n=new(Dc("LEmbeddedView"+Uc(t))),Rc.set(t,n)),n}}(e.type,e.template&&e.template.name).concat(e.blueprint)}(t):t.blueprint.slice();return u[Tt]=r,u[Ot]=140|o,Xn(u),ngDevMode&&t.declTNode&&e&&cn(t.declTNode,e),u[At]=u[Bt]=e,u[jt]=n,u[$t]=s||e&&e[$t],ngDevMode&&Se(u[$t],"RendererFactory is required"),u[Lt]=a||e&&e[Lt],ngDevMode&&Se(u[Lt],"Renderer is required"),u[Ft]=c||e&&e[Ft]||null,u[Vt]=l||e&&e[Vt]||null,u[Pt]=i,ngDevMode&&_e(2!=t.type||null!==e,!0,"Embedded views must have parentLView"),u[Wt]=2==t.type?e[Wt]:u,ngDevMode&&function(e){Nc(e,new rl(e))}(u),u}function yl(e,t,n,o,r){ngDevMode&&0!==t&&Te(t,Jt,"TNodes can't be in the LView header."),ngDevMode&&function(e){2!==e&&1!==e&&4!==e&&8!==e&&32!==e&&16!==e&&64!==e&&Oe(`Expected TNodeType to have only a single type selected, but got ${Zo(e)}.`)}(n);let i=e.data[t];if(null===i)i=ml(e,t,n,o,r),to.lFrame.inI18n&&(i.flags|=64);else if(64&i.type){i.type=n,i.value=o,i.attrs=r;const s=uo();i.injectorIndex=null===s?-1:s.injectorIndex,ngDevMode&&ln(i,e),ngDevMode&&_e(t,i.index,"Expecting same index")}return fo(i,!0),i}function ml(e,t,n,o,r){const i=lo(),s=po(),a=s?i:i&&i.parent,c=e.data[t]=function(e,t,n,o,r,i){ngDevMode&&0!==o&&Te(o,Jt,"TNodes can't be in the LView header."),ngDevMode&&Me(i,void 0,"'undefined' is not valid value for 'attrs'"),ngDevMode&&ngDevMode.tNode++,ngDevMode&&t&&ln(t,e);let s=t?t.injectorIndex:-1;const a=ngDevMode?new Wc(e,n,o,null,s,-1,-1,-1,null,0,0,r,i,null,null,void 0,null,null,null,null,null,null,t,null,null,null,void 0,null,null,void 0,0,0):{type:n,index:o,insertBeforeIndex:null,injectorIndex:s,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,value:r,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:t,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0};return ngDevMode&&Object.seal(a),a}(e,a,n,t,o,r);return null===e.firstChild&&(e.firstChild=c),null!==i&&(s?null==i.child&&null!==c.parent&&(i.child=c):null===i.next&&(i.next=c)),c}function vl(e,t,n,o){if(0===n)return-1;ngDevMode&&(mn(e),De(e,t[St],"`LView` must be associated with `TView`!"),_e(e.data.length,t.length,"Expecting LView to be same size as TView"),_e(e.data.length,e.blueprint.length,"Expecting Blueprint to be same size as TView"),vn(e));const r=t.length;for(let r=0;r<n;r++)t.push(o),e.blueprint.push(o),e.data.push(null);return r}function bl(e,t,n){ngDevMode&&_e(Zn(t),!0,"Should be run in creation mode"),Oo(t);try{const o=e.viewQuery;null!==o&&ou(1,o,n);const r=e.template;null!==r&&Cl(e,t,r,1,n),e.firstCreatePass&&(e.firstCreatePass=!1),e.staticContentQueries&&hl(e,t),e.staticViewQueries&&ou(2,e.viewQuery,n);const i=e.components;null!==i&&function(e,t){for(let n=0;n<t.length;n++)Ql(e,t[n])}(t,i)}catch(t){throw e.firstCreatePass&&(e.incompleteFirstPass=!0,e.firstCreatePass=!1),t}finally{t[Ot]&=-5,Ro()}}function wl(e,t,n,o){ngDevMode&&_e(Zn(t),!1,"Should be run in update mode");const r=t[Ot];if(!(256&~r))return;Oo(t);const i=go();try{Xn(t),bo(e.bindingStartIndex),null!==n&&Cl(e,t,n,2,o);const s=!(3&~r);if(!i)if(s){const n=e.preOrderCheckHooks;null!==n&&Bo(t,n,null)}else{const n=e.preOrderHooks;null!==n&&Wo(t,n,0,null),qo(t,0)}if(function(e){for(let t=Sa(e);null!==t;t=Oa(t)){if(!t[Qt])continue;const e=t[Xt];ngDevMode&&Se(e,"Transplanted View flags set but missing MOVED_VIEWS");for(let t=0;t<e.length;t++){const n=e[t],o=n[At];ngDevMode&&hn(o),1024&n[Ot]||eo(o,1),n[Ot]|=1024}}}(t),function(e){for(let t=Sa(e);null!==t;t=Oa(t))for(let e=en;e<t.length;e++){const n=t[e],o=n[St];ngDevMode&&Se(o,"TView must be allocated"),Qn(n)&&wl(o,n,o.template,n[jt])}}(t),null!==e.contentQueries&&hl(e,t),!i)if(s){const n=e.contentCheckHooks;null!==n&&Bo(t,n)}else{const n=e.contentHooks;null!==n&&Wo(t,n,1),qo(t,1)}!function(e,t){const n=e.hostBindingOpCodes;if(null!==n)try{for(let e=0;e<n.length;e++){const o=n[e];if(o<0)Vo(~o);else{const r=o,i=n[++e],s=n[++e];Do(i,r),s(2,t[r])}}}finally{Vo(-1)}}(e,t);const a=e.components;null!==a&&function(e,t){for(let n=0;n<t.length;n++)Gl(e,t[n])}(t,a);const c=e.viewQuery;if(null!==c&&ou(2,c,o),!i)if(s){const n=e.viewCheckHooks;null!==n&&Bo(t,n)}else{const n=e.viewHooks;null!==n&&Wo(t,n,2),qo(t,2)}!0===e.firstUpdatePass&&(e.firstUpdatePass=!1),i||(t[Ot]&=-73),1024&t[Ot]&&(t[Ot]&=-1025,eo(t[At],-1))}finally{Ro()}}function _l(e,t,n,o){const r=t[$t],i=!go(),s=Zn(t);try{i&&!s&&r.begin&&r.begin(),s&&bl(e,t,o),wl(e,t,n,o)}finally{i&&!s&&r.end&&r.end()}}function Cl(e,t,n,o,r){const i=jo(),s=2&o;try{Vo(-1),s&&t.length>Jt&&Cc(e,t,Jt,go()),kn(s?2:0,r),n(o,r)}finally{Vo(i),kn(s?3:1,r)}}function Dl(e,t,n){if(on(t)){const o=t.directiveStart,r=t.directiveEnd;for(let t=o;t<r;t++){const o=e.data[t];o.contentQueries&&o.contentQueries(1,n[t],t)}}}function Ml(e,t,n){no()&&(function(e,t,n,o){const r=n.directiveStart,i=n.directiveEnd;e.firstCreatePass||fr(n,t),Ys(o,t);const s=n.initialInputs;for(let o=r;o<i;o++){const i=e.data[o],a=an(i);a&&(ngDevMode&&Qo(n,3),Ul(t,n,i));const c=Dr(t,e,o,n);Ys(c,t),null!==s&&ql(t,o-r,c,i,n,s),a&&(Gn(n.index,t)[jt]=c)}}(e,t,n,zn(n,t)),128&~n.flags||function(e,t,n){const o=n.directiveStart,r=n.directiveEnd,i=(e.firstCreatePass,n.index),s=to.lFrame.currentDirectiveIndex;try{Vo(i);for(let n=o;n<r;n++){const o=e.data[n],r=t[n];Mo(n),null===o.hostBindings&&0===o.hostVars&&null===o.hostAttrs||Vl(o,r)}}finally{Vo(-1),Mo(s)}}(e,t,n))}function xl(e,t,n=zn){const o=t.localNames;if(null!==o){let r=t.index+1;for(let i=0;i<o.length;i+=2){const s=o[i+1],a=-1===s?n(t,e):e[s];e[r++]=a}}}function Il(e){const t=e.tView;if(null===t||t.incompleteFirstPass){const t=null;return e.tView=El(1,t,e.template,e.decls,e.vars,e.directiveDefs,e.pipeDefs,e.viewQuery,e.schemas,e.consts)}return t}function El(e,t,n,o,r,i,s,a,c,l){ngDevMode&&ngDevMode.tView++;const u=Jt+o,f=u+r,d=function(e,t){const n=ngDevMode?new Gc:[];for(let o=0;o<t;o++)n.push(o<e?null:wc);return n}(u,f),p="function"==typeof l?l():l,h=d[St]=ngDevMode?new Bc(e,d,n,null,a,t,(g=d,void 0===Jc&&(Jc=new Kc),Jc.concat(g)).fill(null,u),u,f,null,!0,!0,!1,!1,null,null,null,null,null,null,null,null,null,null,"function"==typeof i?i():i,"function"==typeof s?s():s,null,c,p,!1,o,r):{type:e,blueprint:d,template:n,queries:null,viewQuery:a,declTNode:t,data:d.slice().fill(null,u),bindingStartIndex:u,expandoStartIndex:f,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof i?i():i,pipeRegistry:"function"==typeof s?s():s,firstChild:null,schemas:c,consts:p,incompleteFirstPass:!1};var g;return ngDevMode&&Object.seal(h),h}function Tl(e,t,n){if(Un(e)){const o=n===Qe.ShadowDom;return e.selectRootElement(t,o)}let o="string"==typeof t?e.querySelector(t):t;return ngDevMode&&function(e,t){if(!e)throw new Error(`Renderer: ${"string"==typeof t?"Host node with selector not found:":"Host node is required:"} [${he(t)}]`)}(o,t),o.textContent="",o}function Sl(e,t,n,o){const r=su(t);null===n?(ngDevMode&&Object.freeze(au(e)),r.push(o)):(r.push(n),e.firstCreatePass&&au(e).push(o,r.length-1))}function Ol(e,t,n){for(let o in e)if(e.hasOwnProperty(o)){n=null===n?{}:n;const r=e[o];n.hasOwnProperty(o)?n[o].push(t,r):n[o]=[t,r]}return n}function Al(e,t,n,o,r,i,s,a){ngDevMode&&Me(r,wc,"Incoming value should never be NO_CHANGE.");const c=zn(t,n);let l,u=t.inputs;if(!a&&null!=u&&(l=u[o]))uu(e,n,l,o,r),rn(t)&&function(e,t){ngDevMode&&yn(e);const n=Gn(t,e);16&n[Ot]||(n[Ot]|=64)}(n,t.index),ngDevMode&&function(e,t,n,o,r){if(7&n)for(let i=0;i<o.length;i+=2)Nl(e,t,n,o[i+1],r)}(n,c,t.type,l,r);else if(3&t.type){if(o="class"===(f=o)?"className":"for"===f?"htmlFor":"formaction"===f?"formAction":"innerHtml"===f?"innerHTML":"readonly"===f?"readOnly":"tabindex"===f?"tabIndex":f,ngDevMode){if(function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event property '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...\nIf '${e}' is a directive input, make sure the directive is imported by the current module.`;throw new fe(306,t)}}(o),!function(e,t,n,o){return null===e.schemas||(!!(kl(e,o.value)||n in t||er(n))||("undefined"==typeof Node||null===Node||!(t instanceof Node)))}(e,c,o,t))return void Pl(o,t);ngDevMode.rendererSetProperty++}r=null!=s?s(r,t.value||"",o):r,Un(i)?i.setProperty(c,o,r):er(o)||(c.setProperty?c.setProperty(o,r):c[o]=r)}else 12&t.type&&ngDevMode&&!kl(e,t.value)&&Pl(o,t);var f}function Nl(e,t,n,o,r){const i=e[Lt];var s;s=o.replace(/[$@]/g,"_"),o=`ng-reflect-${s.replace(ga,((...e)=>"-"+e[1].toLowerCase()))}`;const a=function(e){try{return null!=e?e.toString().slice(0,30):e}catch(e){return"[ERROR] Exception while trying to serialize the value"}}(r);if(3&n)null==r?Un(i)?i.removeAttribute(t,o):t.removeAttribute(o):Un(i)?i.setAttribute(t,o,a):t.setAttribute(o,a);else{const e=ha(`bindings=${JSON.stringify({[o]:a},null,2)}`);Un(i)?i.setValue(t,e):t.textContent=e}}function kl(e,t){const n=e.schemas;if(null!==n)for(let e=0;e<n.length;e++){const o=n[e];if(o===ua||o===la&&t&&t.indexOf("-")>-1)return!0}return!1}function Pl(e,t){let n=`Can't bind to '${e}' since it isn't a known property of '${t.value}'.`;console.error(de(303,n))}function Rl(e,t,n,o){ngDevMode&&mn(e);let r=!1;if(no()){const i=function(e,t,n){ngDevMode&&mn(e),ngDevMode&&Qo(n,15);const o=e.directiveRegistry;let r=null;if(o)for(let i=0;i<o.length;i++){const s=o[i];yc(n,s.selectors,!1)&&(r||(r=ngDevMode?new Zc:[]),gr(fr(n,t),e,s.type),an(s)?(ngDevMode&&(Qo(n,2,`"${n.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${re(s.type)} component.`),2&n.flags&&Ca(n)),$l(e,n),r.unshift(s)):r.push(s))}return r}(e,t,n),s=null===o?null:{"":-1};if(null!==i){r=!0,Fl(n,e.data.length,i.length);for(let e=0;e<i.length;e++){const t=i[e];t.providersResolver&&t.providersResolver(t)}let o=!1,a=!1,c=vl(e,t,i.length,null);ngDevMode&&De(c,n.directiveStart,"TNode.directiveStart should point to just allocated space");for(let r=0;r<i.length;r++){const l=i[r];n.mergedAttrs=tr(n.mergedAttrs,l.hostAttrs),Hl(e,n,t,c,l),Ll(c,l,s),null!==l.contentQueries&&(n.flags|=8),null===l.hostBindings&&null===l.hostAttrs&&0===l.hostVars||(n.flags|=128);const u=l.type.prototype;!o&&(u.ngOnChanges||u.ngOnInit||u.ngDoCheck)&&((e.preOrderHooks||(e.preOrderHooks=[])).push(n.index),o=!0),a||!u.ngOnChanges&&!u.ngDoCheck||((e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(n.index),a=!0),c++}!function(e,t){ngDevMode&&mn(e);const n=t.directiveStart,o=t.directiveEnd,r=e.data,i=t.attrs,s=ngDevMode?new Xc:[];let a=null,c=null;for(let e=n;e<o;e++){const n=r[e],o=n.inputs,l=null===i||fc(t)?null:zl(o,i);s.push(l),a=Ol(o,e,a),c=Ol(n.outputs,e,c)}null!==a&&(a.hasOwnProperty("class")&&(t.flags|=16),a.hasOwnProperty("style")&&(t.flags|=32)),t.initialInputs=s,t.inputs=a,t.outputs=c}(e,n)}s&&function(e,t,n){if(t){const o=e.localNames=ngDevMode?new Yc:[];for(let e=0;e<t.length;e+=2){const r=n[t[e+1]];if(null==r)throw new fe(-301,ngDevMode&&`Export of name '${t[e+1]}' not found!`);o.push(t[e],r)}}}(n,o,s)}return n.mergedAttrs=tr(n.mergedAttrs,n.attrs),r}function jl(e,t,n,o,r,i){ngDevMode&&mn(e);const s=i.hostBindings;if(s){let n=e.hostBindingOpCodes;null===n&&(n=e.hostBindingOpCodes=[]);const i=~t.index;(function(e){let t=e.length;for(;t>0;){const n=e[--t];if("number"==typeof n&&n<0)return n}return 0})(n)!=i&&n.push(i),n.push(o,r,s)}}function Vl(e,t){null!==e.hostBindings&&e.hostBindings(1,t)}function $l(e,t){ngDevMode&&mn(e),t.flags|=2,(e.components||(e.components=ngDevMode?new Qc:[])).push(t.index)}function Ll(e,t,n){if(n){if(t.exportAs)for(let o=0;o<t.exportAs.length;o++)n[t.exportAs[o]]=e;an(t)&&(n[""]=e)}}function Fl(e,t,n){ngDevMode&&Ce(n,e.directiveEnd-e.directiveStart,"Reached the max number of directives"),e.flags|=1,e.directiveStart=t,e.directiveEnd=t+n,e.providerIndexes=t}function Hl(e,t,n,o,r){ngDevMode&&Te(o,Jt,"Must be in Expando section"),e.data[o]=r;const i=r.factory||(r.factory=Dn(r.type,!0)),s=new Go(i,an(r),null);e.blueprint[o]=s,n[o]=s,jl(e,t,0,o,vl(e,n,r.hostVars,wc),r)}function Ul(e,t,n){const o=zn(t,e),r=Il(n),i=e[$t],s=Yl(e,gl(e,r,null,n.onPush?64:16,o,t,i,i.createRenderer(o,n),null,null));e[t.index]=s}function Bl(e,t,n,o,r,i){ngDevMode&&(Me(o,wc,"Incoming value should never be NO_CHANGE."),function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event attribute '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...`;throw new fe(306,t)}}(n),Qo(e,2,`Attempted to set attribute \`${n}\` on a container node. Host bindings are not valid on ng-container or ng-template.`));const s=zn(e,t);Wl(t[Lt],s,i,e.value,n,o,r)}function Wl(e,t,n,o,r,i,s){if(null==i)ngDevMode&&ngDevMode.rendererRemoveAttribute++,Un(e)?e.removeAttribute(t,r,n):t.removeAttribute(r);else{ngDevMode&&ngDevMode.rendererSetAttribute++;const a=null==s?pe(i):s(i,o||"",r);Un(e)?e.setAttribute(t,r,a,n):n?t.setAttributeNS(n,r,a):t.setAttribute(r,a)}}function ql(e,t,n,o,r,i){const s=i[t];if(null!==s){const t=o.setInput;for(let i=0;i<s.length;){const a=s[i++],c=s[i++],l=s[i++];null!==t?o.setInput(n,l,a,c):n[c]=l,ngDevMode&&Nl(e,zn(r,e),r.type,c,l)}}}function zl(e,t){let n=null,o=0;for(;o<t.length;){const r=t[o];if(0!==r)if(5!==r){if("number"==typeof r)break;e.hasOwnProperty(r)&&(null===n&&(n=[]),n.push(r,e[r],t[o+1])),o+=2}else o+=2;else o+=4}return n}const Kl=class extends Array{};function Jl(e,t,n,o){ngDevMode&&yn(t),ngDevMode&&!Un(t[Lt])&&Ae(n);const r=new(ngDevMode?Kl:Array)(e,!0,!1,t,null,0,o,n,null,null);return ngDevMode&&_e(r.length,en,"Should allocate correct number of slots for LContainer header."),ngDevMode&&function(e){Nc(e,new dl(e))}(r),r}function Gl(e,t){ngDevMode&&_e(Zn(e),!1,"Should be run in update mode");const n=Gn(t,e);if(Qn(n)){const e=n[St];80&n[Ot]?wl(e,n,e.template,n[jt]):n[kt]>0&&Zl(n)}}function Zl(e){for(let t=Sa(e);null!==t;t=Oa(t))for(let e=en;e<t.length;e++){const n=t[e];if(1024&n[Ot]){const e=n[St];ngDevMode&&Se(e,"TView must be allocated"),wl(e,n,e.template,n[jt])}else n[kt]>0&&Zl(n)}const t=e[St].components;if(null!==t)for(let n=0;n<t.length;n++){const o=Gn(t[n],e);Qn(o)&&o[kt]>0&&Zl(o)}}function Ql(e,t){ngDevMode&&_e(Zn(e),!0,"Should be run in creation mode");const n=Gn(t,e),o=n[St];!function(e,t){for(let n=t.length;n<e.blueprint.length;n++)t.push(e.blueprint[n])}(o,n),bl(o,n,n[jt])}function Yl(e,t){return e[Ht]?e[Ut][Nt]=t:e[Ht]=t,e[Ut]=t,t}function Xl(e){for(;e;){e[Ot]|=64;const t=Ea(e);if(512&e[Ot]&&!t)return e;e=t}return null}function eu(e){for(let t=0;t<e.components.length;t++){const n=e.components[t],o=ea(n),r=o[St];_l(r,o,r.template,n)}}function tu(e,t,n){const o=t[$t];o.begin&&o.begin();try{wl(e,t,e.template,n)}catch(e){throw lu(t,e),e}finally{o.end&&o.end()}}function nu(e){eu(e[jt])}function ou(e,t,n){ngDevMode&&Se(t,"View queries function to execute must be defined."),Eo(0),t(e,n)}function ru(e,t,n,o,...r){if(null===e[o]&&(null==t.inputs||!t.inputs[n])){(t.propertyBindings||(t.propertyBindings=[])).push(o);let i=n;r.length>0&&(i+=wa+r.join(wa)),e[o]=i}}const iu=pl;function su(e){return e[Rt]||(e[Rt]=ngDevMode?new el:[])}function au(e){return e.cleanup||(e.cleanup=ngDevMode?new tl:[])}function cu(e,t,n){return(null===e||an(e))&&(n=function(e){for(;Array.isArray(e);){if("object"==typeof e[Zt])return e;e=e[Tt]}return null}(n[t.index])),n[Lt]}function lu(e,t){const n=e[Vt],o=n?n.get(ca,null):null;o&&o.handleError(t)}function uu(e,t,n,o,r){for(let i=0;i<n.length;){const s=n[i++],a=n[i++],c=t[s];ngDevMode&&Ne(t,s);const l=e.data[s];null!==l.setInput?l.setInput(c,r,o,a):c[a]=r}}function fu(e,t,n){ngDevMode&&we(n,"Value should be a string"),ngDevMode&&Me(n,wc,"value should not be NO_CHANGE"),ngDevMode&&Ne(e,t);const o=qn(t,e);ngDevMode&&Se(o,"native element should exist"),Pa(e[Lt],o,n)}function du(e,t,n){ngDevMode&&mn(so(),"Expecting to be called in first template pass only");let o=n?e.styles:null,r=n?e.classes:null,i=0;if(null!==t)for(let e=0;e<t.length;e++){const n=t[e];"number"==typeof n?i=n:1==i?r=ie(r,n):2==i&&(o=ie(o,n+": "+t[++e]+";"))}n?e.styles=o:e.stylesWithoutHost=o,n?e.classes=r:e.classesWithoutHost=r}function pu(e){const t=Zs(e);tu(t[St],t,e)}function hu(e){ngDevMode&&Se(e,"component");const t=Xl(Zs(e));ngDevMode&&Se(t[jt],"rootContext should be defined"),function(e){if(0===e.flags&&e.clean==pl){let t;e.flags|=1,e.clean=new Promise((e=>t=e)),e.scheduler((()=>{if(1&e.flags&&(e.flags&=-2,eu(e)),2&e.flags){e.flags&=-3;const t=e.playerHandler;t&&t.flushPlayers()}e.clean=pl,t(null)}))}}(t[jt])}const gu=new $r("INJECTOR",-1);class yu{get(e,t=di){if(t===di){const t=new Error(`NullInjectorError: No provider for ${re(e)}!`);throw t.name="NullInjectorError",t}return t}}const mu=new $r("Set Injector scope."),vu={},bu={};let wu;function _u(){return void 0===wu&&(wu=new yu),wu}function Cu(e,t=null,n=null,o){const r=Du(e,t,n,o);return r._resolveInjectorDefTypes(),r}function Du(e,t=null,n=null,o){return new Mu(e,n,t||_u(),o)}class Mu{constructor(e,t,n,o=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const r=[];t&&Yr(t,(n=>this.processProvider(n,e,t))),Yr([e],(e=>this.processInjectorType(e,[],r))),this.records.set(gu,Eu(void 0,this));const i=this.records.get(mu);this.scope=null!=i?i.value:null,this.source=o||("object"==typeof e?null:re(e))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach((e=>e.ngOnDestroy()))}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(e,t=di,n=We.Default){this.assertNotDestroyed();const o=bi(this),r=ze(void 0);try{if(!(n&We.SkipSelf)){let t=this.records.get(e);if(void 0===t){const n=("function"==typeof(i=e)||"object"==typeof i&&i instanceof $r)&&Ve(e);t=n&&this.injectableDefInScope(n)?Eu(xu(e),vu):null,this.records.set(e,t)}if(null!=t)return this.hydrate(e,t)}const o=n&We.Self?_u():this.parent;return t=n&We.Optional&&t===di?null:t,o.get(e,t)}catch(t){if("NullInjectorError"===t.name){if((t[hi]=t[hi]||[]).unshift(re(e)),o)throw t;return function(e,t,n,o){const r=e[hi];throw t[yi]&&r.unshift(t[yi]),e.message=function(e,t,n,o=null){e=e&&"\n"===e.charAt(0)&&"ɵ"==e.charAt(1)?e.substr(2):e;let r=re(t);if(Array.isArray(t))r=t.map(re).join(" -> ");else if("object"==typeof t){let e=[];for(let n in t)if(t.hasOwnProperty(n)){let o=t[n];e.push(n+":"+("string"==typeof o?JSON.stringify(o):re(o)))}r=`{${e.join(", ")}}`}return`${n}${o?"("+o+")":""}[${r}]: ${e.replace(gi,"\n  ")}`}("\n"+e.message,r,n,o),e.ngTokenPath=r,e[hi]=null,e}(t,e,"R3InjectorError",this.source)}throw t}finally{ze(r),bi(o)}var i}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach((e=>this.get(e)))}toString(){const e=[];return this.records.forEach(((t,n)=>e.push(re(n)))),`R3Injector[${e.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new fe(205,ngDevMode&&"Injector has already been destroyed.")}processInjectorType(e,t,n){if(!(e=ce(e)))return!1;let o=Le(e);const r=null==o&&e.ngModule||void 0,i=void 0===r?e:r;ngDevMode&&-1!==t.indexOf(i)&&ge(re(i),t.map(re));const s=-1!==n.indexOf(i);if(void 0!==r&&(o=Le(r)),null==o)return!1;if(null!=o.imports&&!s){let e;ngDevMode&&t.push(i),n.push(i);try{Yr(o.imports,(o=>{this.processInjectorType(o,t,n)&&(void 0===e&&(e=[]),e.push(o))}))}finally{ngDevMode&&t.pop()}if(void 0!==e)for(let t=0;t<e.length;t++){const{ngModule:n,providers:o}=e[t];Yr(o,(e=>this.processProvider(e,n,o||st)))}}this.injectorDefTypes.add(i);const a=Dn(i)||(()=>new i);this.records.set(i,Eu(a,vu));const c=o.providers;if(null!=c&&!s){const t=e;Yr(c,(e=>this.processProvider(e,t,c)))}return void 0!==r&&void 0!==e.providers}processProvider(e,t,n){let o=Su(e=ce(e))?e:ce(e&&e.provide);const r=function(e,t,n){return Tu(e)?Eu(void 0,e.useValue):Eu(Iu(e,t,n),vu)}(e,t,n);if(Su(e)||!0!==e.multi){const e=this.records.get(o);ngDevMode&&e&&void 0!==e.multi&&ye()}else{let t=this.records.get(o);t?ngDevMode&&void 0===t.multi&&ye():(t=Eu(void 0,vu,!0),t.factory=()=>Mi(t.multi),this.records.set(o,t)),o=e,t.multi.push(e)}this.records.set(o,r)}hydrate(e,t){var n;return ngDevMode&&t.value===bu?ge(re(e)):t.value===vu&&(t.value=bu,t.value=t.factory()),"object"==typeof t.value&&t.value&&null!==(n=t.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(t.value),t.value}injectableDefInScope(e){if(!e.providedIn)return!1;const t=ce(e.providedIn);return"string"==typeof t?"any"===t||t===this.scope:this.injectorDefTypes.has(t)}}function xu(e){const t=Ve(e),n=null!==t?t.factory:Dn(e);if(null!==n)return n;if(e instanceof $r)throw new fe(204,ngDevMode&&`Token ${re(e)} is missing a ɵprov definition.`);if(e instanceof Function)return function(e){const t=e.length;if(t>0){const n=ti(t,"?");throw new fe(204,ngDevMode&&`Can't resolve all parameters for ${re(e)}: (${n.join(", ")}).`)}const n=function(e){const t=e&&(e[Fe]||e[Ue]);if(t){const n=function(e){if(e.hasOwnProperty("name"))return e.name;const t=(""+e).match(/^function\s*([^\s(]+)/);return null===t?"":t[1]}(e);return console.warn(`DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${n}" class.`),t}return null}(e);return null!==n?()=>n.factory(e):()=>new e}(e);throw new fe(204,ngDevMode&&"unreachable")}function Iu(e,t,n){let o;if(Su(e)){const t=ce(e);return Dn(t)||xu(t)}if(Tu(e))o=()=>ce(e.useValue);else if((r=e)&&r.useFactory)o=()=>e.useFactory(...Mi(e.deps||[]));else if(function(e){return!(!e||!e.useExisting)}(e))o=()=>_i(ce(e.useExisting));else{const r=ce(e&&(e.useClass||e.provide));if(ngDevMode&&!r&&function(e,t,n){let o="";throw e&&t&&(o=` - only instances of Provider and Type are allowed, got: [${t.map((e=>e==n?"?"+n+"?":"...")).join(", ")}]`),new Error(`Invalid provider for the NgModule '${re(e)}'`+o)}(t,n,e),!function(e){return!!e.deps}(e))return Dn(r)||xu(r);o=()=>new r(...Mi(e.deps))}var r;return o}function Eu(e,t,n=!1){return{factory:e,value:t,multi:n?[]:void 0}}function Tu(e){return null!==e&&"object"==typeof e&&mi in e}function Su(e){return"function"==typeof e}class Ou{static create(e,t){if(Array.isArray(e))return Cu({name:""},t,e,"");{const t=e.name??"";return Cu({name:t},e.parent,e.providers,t)}}}function Au(e){Hu(e);const t=Js(e);return null===t?null:(void 0===t.component&&(t.component=function(e,t){const n=t[St].data[e];let o=n.directiveStart;return 2&n.flags?t[o]:null}(t.nodeIndex,t.lView)),t.component)}function Nu(e){Hu(e);const t=Js(e);return null===t?null:t.lView[jt]}function ku(e){const t=Js(e);if(null===t)return null;let n,o=t.lView;for(ngDevMode&&yn(o);2===o[St].type&&(n=Ea(o));)o=n;return 512&o[Ot]?null:o[jt]}function Pu(e){return[...Ta(e).components]}function Ru(e){const t=Js(e);if(null===t)return Ou.NULL;const n=t.lView[St].data[t.nodeIndex];return new Ir(n,t.lView)}function ju(e){if(e instanceof Text)return[];const t=Js(e);if(null===t)return[];const n=t.lView,o=n[St],r=t.nodeIndex;return o?.data[r]?(void 0===t.directives&&(t.directives=ra(r,n,!1)),null===t.directives?[]:[...t.directives]):[]}function Vu(e){const{constructor:t}=e;if(!t)throw new Error("Unable to find the instance constructor");const n=Mt(t);if(n)return{inputs:n.inputs,outputs:n.outputs,encapsulation:n.encapsulation,changeDetection:n.onPush?Ge.OnPush:Ge.Default};const o=xt(t);return o?{inputs:o.inputs,outputs:o.outputs}:null}function $u(e){return Js(e).native}function Lu(e){Hu(e);const t=Js(e);if(null===t)return[];const n=t.lView,o=n[St],r=n[Rt],i=o.cleanup,s=[];if(i&&r)for(let t=0;t<i.length;){const o=i[t++],a=i[t++];if("string"==typeof o){const c=o,l=Wn(n[a]),u=r[i[t++]],f=i[t++],d="boolean"==typeof f||f>=0?"dom":"output",p="boolean"==typeof f&&f;e==l&&s.push({element:e,name:c,callback:u,useCapture:p,type:d})}}return s.sort(Fu),s}function Fu(e,t){return e.name==t.name?0:e.name<t.name?-1:1}function Hu(e){if("undefined"!=typeof Element&&!(e instanceof Element))throw new Error("Expecting instance of DOM Element")}function Uu(e){hu(e),Pu(e).forEach((e=>pu(e)))}Ou.THROW_IF_NOT_FOUND=di,Ou.NULL=new yu,Ou.ɵprov=Pe({token:Ou,providedIn:"any",factory:()=>_i(gu)}),Ou.__NG_ELEMENT_ID__=-1;const Bu="ng";let Wu=!1;function qu(){Wu||(Wu=!0,zu("ɵsetProfiler",Nn),zu("getDirectiveMetadata",Vu),zu("getComponent",Au),zu("getContext",Nu),zu("getListeners",Lu),zu("getOwningComponent",ku),zu("getHostElement",$u),zu("getInjector",Ru),zu("getRootComponents",Pu),zu("getDirectives",ju),zu("applyChanges",Uu))}function zu(e,t){if("undefined"==typeof COMPILED||!COMPILED){const n=ot;if(ngDevMode&&Se(t,"function not defined"),n){let o=n[Bu];o||(o=n[Bu]={}),o[e]=t}}}function Ku(e,t={}){ngDevMode&&qu(),ngDevMode&&dn(e);const n=t.rendererFactory||Bn,o=t.sanitizer||null,r=Mt(e);r.type!=e&&(r.type=e);const i=r.selectors[0][0],s=Tl(n.createRenderer(null,null),t.host||i,r.encapsulation),a=r.onPush?576:528,c=Zu(t.scheduler,t.playerHandler),l=n.createRenderer(s,r),u=El(0,null,null,1,0,null,null,null,null,null),f=gl(null,u,c,a,null,null,n,l,null,t.injector||null);let d;Oo(f);try{n.begin&&n.begin(),d=Gu(Ju(s,r,f,n,l,o),r,f,c,t.hostFeatures||null),bl(u,f,null),wl(u,f,null,null)}finally{Ro(),n.end&&n.end()}return d}function Ju(e,t,n,o,r,i){const s=n[St],a=Jt;ngDevMode&&Ne(n,a),n[a]=e;const c=yl(s,a,2,"#host",null),l=c.mergedAttrs=t.hostAttrs;null!==l&&(du(c,l,!0),null!==e&&(Yo(r,e,l),null!==c.classes&&ac(r,e,c.classes),null!==c.styles&&sc(r,e,c.styles)));const u=o.createRenderer(e,t),f=gl(n,Il(t),null,t.onPush?64:16,n[a],c,o,u,i||null,null);return s.firstCreatePass&&(gr(fr(c,n),s,t.type),$l(s,c),Fl(c,n.length,1)),Yl(n,f),n[a]=f}function Gu(e,t,n,o,r){const i=n[St],s=function(e,t,n){const o=co();if(e.firstCreatePass){n.providersResolver&&n.providersResolver(n);const r=vl(e,t,1,null);ngDevMode&&_e(r,o.directiveStart,"Because this is a root component the allocated expando should match the TNode component."),Hl(e,o,t,r,n)}const r=Dr(t,e,o.directiveStart,o);Ys(r,t);const i=zn(o,t);return i&&Ys(i,t),r}(i,n,t);if(o.components.push(s),e[jt]=s,r&&r.forEach((e=>e(s,t))),t.contentQueries){const e=co();ngDevMode&&Se(e,"TNode expected"),t.contentQueries(1,s,e.directiveStart)}const a=co();return ngDevMode&&Se(a,"tNode should have been already created"),!i.firstCreatePass||null===t.hostBindings&&null===t.hostAttrs||(Vo(a.index),jl(n[St],a,0,a.directiveStart,a.directiveEnd,t),Vl(t,s)),s}function Zu(e,t){return{components:[],scheduler:e||ya,clean:iu,playerHandler:t||null,flags:0}}function Qu(e,t){const n=ea(e);ngDevMode&&Se(n,"LView is required");const o=n[St],r=co();ngDevMode&&Se(r,"TNode is required"),Uo(o,r)}function Yu(e){return Ta(e).clean}function Xu(e){return Object.getPrototypeOf(e.prototype).constructor}function ef(e){let t=Xu(e.type),n=!0;const o=[e];for(;t;){let r;if(an(e))r=t.ɵcmp||t.ɵdir;else{if(t.ɵcmp){const e="undefined"==typeof ngDevMode||ngDevMode?"Directives cannot inherit Components":"";throw new fe(903,e)}r=t.ɵdir}if(r){if(n){o.push(r);const t=e;t.inputs=tf(e.inputs),t.declaredInputs=tf(e.declaredInputs),t.outputs=tf(e.outputs);const n=r.hostBindings;n&&rf(e,n);const i=r.viewQuery,s=r.contentQueries;if(i&&nf(e,i),s&&of(e,s),oe(e.inputs,r.inputs),oe(e.declaredInputs,r.declaredInputs),oe(e.outputs,r.outputs),an(r)&&r.data.animation){const t=e.data;t.animation=(t.animation||[]).concat(r.data.animation)}}const t=r.features;if(t)for(let o=0;o<t.length;o++){const r=t[o];r&&r.ngInherit&&r(e),r===ef&&(n=!1)}}t=Object.getPrototypeOf(t)}!function(e){let t=0,n=null;for(let o=e.length-1;o>=0;o--){const r=e[o];r.hostVars=t+=r.hostVars,r.hostAttrs=tr(r.hostAttrs,n=tr(n,r.hostAttrs))}}(o)}function tf(e){return e===it?{}:e===st?[]:e}function nf(e,t){const n=e.viewQuery;e.viewQuery=n?(e,o)=>{t(e,o),n(e,o)}:t}function of(e,t){const n=e.contentQueries;e.contentQueries=n?(e,o,r)=>{t(e,o,r),n(e,o,r)}:t}function rf(e,t){const n=e.hostBindings;e.hostBindings=n?(e,o)=>{t(e,o),n(e,o)}:t}const sf=["providersResolver"],af=["template","decls","consts","vars","onPush","ngContentSelectors","styles","encapsulation","schemas"];function cf(e){let t,n=Xu(e.type);t=an(e)?n.ɵcmp:n.ɵdir;const o=e;for(const e of sf)o[e]=t[e];if(an(t))for(const e of af)o[e]=t[e]}let lf=null;function uf(){if(!lf){const e=ot.Symbol;if(e&&e.iterator)lf=e.iterator;else{const e=Object.getOwnPropertyNames(Map.prototype);for(let t=0;t<e.length;++t){const n=e[t];"entries"!==n&&"size"!==n&&Map.prototype[n]===Map.prototype.entries&&(lf=n)}}}return lf}function ff(e,t){const n=df(e),o=df(t);return n&&o?function(e,t,n){const o=e[uf()](),r=t[uf()]();for(;;){const e=o.next(),t=r.next();if(e.done&&t.done)return!0;if(e.done||t.done)return!1;if(!n(e.value,t.value))return!1}}(e,t,ff):!(n||!e||"object"!=typeof e&&"function"!=typeof e||o||!t||"object"!=typeof t&&"function"!=typeof t)||Object.is(e,t)}function df(e){return!!pf(e)&&(Array.isArray(e)||!(e instanceof Map)&&uf()in e)}function pf(e){return null!==e&&("function"==typeof e||"object"==typeof e)}function hf(e,t,n){return e[t]=n}function gf(e,t){return ngDevMode&&Ne(e,t),ngDevMode&&Me(e[t],wc,"Stored value should never be NO_CHANGE."),e[t]}function yf(e,t,n){ngDevMode&&Me(n,wc,"Incoming value should never be NO_CHANGE."),ngDevMode&&xe(t,e.length,"Slot should have been initialized to NO_CHANGE");const o=e[t];if(Object.is(o,n))return!1;if(ngDevMode&&go()){const r=o!==wc?o:void 0;if(!ff(r,n)){const i=function(e,t,n,o){const r=e[St].data,i=r[t];if("string"==typeof i)return i.indexOf(wa)>-1?Da(e,t,t,i,o):{propName:i,oldValue:n,newValue:o};if(null===i){let n=t-1;for(;"string"!=typeof r[n]&&null===r[n+1];)n--;const i=r[n];if("string"==typeof i){const r=i.match(new RegExp(wa,"g"));if(r&&r.length-1>t-n)return Da(e,n,t,i,o)}}return{propName:void 0,oldValue:n,newValue:o}}(e,t,r,n);!function(e,t,n,o){let r=`ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${o?` for '${o}'`:""}: '${t}'. Current value: '${n}'.`;throw e&&(r+=" It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?"),new fe(-100,r)}(o===wc,i.oldValue,i.newValue,i.propName)}return!1}return e[t]=n,!0}function mf(e,t,n,o){const r=yf(e,t,n);return yf(e,t+1,o)||r}function vf(e,t,n,o,r){const i=mf(e,t,n,o);return yf(e,t+2,r)||i}function bf(e,t,n,o,r,i){const s=mf(e,t,n,o);return mf(e,t+2,r,i)||s}function wf(e,t,n,o){const r=io(),i=wo();if(yf(r,i,t)){const s=so(),a=$o();Bl(a,r,e,t,n,o),ngDevMode&&ru(s.data,a,"attr."+e,i)}return wf}function _f(e,t){ngDevMode&&xe(2,t.length,"should have at least 3 values"),ngDevMode&&_e(t.length%2,1,"should have an odd number of values");let n=!1,o=vo();for(let r=1;r<t.length;r+=2)n=yf(e,o++,t[r])||n;if(bo(o),!n)return wc;let r=t[0];for(let e=1;e<t.length;e+=2)r+=pe(t[e])+t[e+1];return r}function Cf(e,t,n,o){return yf(e,wo(),n)?t+pe(n)+o:wc}function Df(e,t,n,o,r,i){const s=mf(e,vo(),n,r);return _o(2),s?t+pe(n)+o+pe(r)+i:wc}function Mf(e,t,n,o,r,i,s,a){const c=vf(e,vo(),n,r,s);return _o(3),c?t+pe(n)+o+pe(r)+i+pe(s)+a:wc}function xf(e,t,n,o,r,i,s,a,c,l){const u=bf(e,vo(),n,r,s,c);return _o(4),u?t+pe(n)+o+pe(r)+i+pe(s)+a+pe(c)+l:wc}function If(e,t,n,o,r,i,s,a,c,l,u,f){const d=vo();let p=bf(e,d,n,r,s,c);return p=yf(e,d+4,u)||p,_o(5),p?t+pe(n)+o+pe(r)+i+pe(s)+a+pe(c)+l+pe(u)+f:wc}function Ef(e,t,n,o,r,i,s,a,c,l,u,f,d,p){const h=vo();let g=bf(e,h,n,r,s,c);return g=mf(e,h+4,u,d)||g,_o(6),g?t+pe(n)+o+pe(r)+i+pe(s)+a+pe(c)+l+pe(u)+f+pe(d)+p:wc}function Tf(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g){const y=vo();let m=bf(e,y,n,r,s,c);return m=vf(e,y+4,u,d,h)||m,_o(7),m?t+pe(n)+o+pe(r)+i+pe(s)+a+pe(c)+l+pe(u)+f+pe(d)+p+pe(h)+g:wc}function Sf(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m){const v=vo();let b=bf(e,v,n,r,s,c);return b=bf(e,v+4,u,d,h,y)||b,_o(8),b?t+pe(n)+o+pe(r)+i+pe(s)+a+pe(c)+l+pe(u)+f+pe(d)+p+pe(h)+g+pe(y)+m:wc}function Of(e,t,n,o,r,i){const s=io(),a=Cf(s,t,n,o);if(a!==wc){const n=$o();Bl(n,s,e,a,r,i),ngDevMode&&ru(so().data,n,"attr."+e,vo()-1,t,o)}return Of}function Af(e,t,n,o,r,i,s,a){const c=io(),l=Df(c,t,n,o,r,i);if(l!==wc){const n=$o();Bl(n,c,e,l,s,a),ngDevMode&&ru(so().data,n,"attr."+e,vo()-2,t,o,i)}return Af}function Nf(e,t,n,o,r,i,s,a,c,l){const u=io(),f=Mf(u,t,n,o,r,i,s,a);if(f!==wc){const n=$o();Bl(n,u,e,f,c,l),ngDevMode&&ru(so().data,n,"attr."+e,vo()-3,t,o,i,a)}return Nf}function kf(e,t,n,o,r,i,s,a,c,l,u,f){const d=io(),p=xf(d,t,n,o,r,i,s,a,c,l);if(p!==wc){const n=$o();Bl(n,d,e,p,u,f),ngDevMode&&ru(so().data,n,"attr."+e,vo()-4,t,o,i,a,l)}return kf}function Pf(e,t,n,o,r,i,s,a,c,l,u,f,d,p){const h=io(),g=If(h,t,n,o,r,i,s,a,c,l,u,f);if(g!==wc){const n=$o();Bl(n,h,e,g,d,p),ngDevMode&&ru(so().data,n,"attr."+e,vo()-5,t,o,i,a,l,f)}return Pf}function Rf(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g){const y=io(),m=Ef(y,t,n,o,r,i,s,a,c,l,u,f,d,p);if(m!==wc){const n=$o();Bl(n,y,e,m,h,g),ngDevMode&&ru(so().data,n,"attr."+e,vo()-6,t,o,i,a,l,f,p)}return Rf}function jf(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m){const v=io(),b=Tf(v,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g);if(b!==wc){const n=$o();Bl(n,v,e,b,y,m),ngDevMode&&ru(so().data,n,"attr."+e,vo()-7,t,o,i,a,l,f,p,g)}return jf}function Vf(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v,b){const w=io(),_=Sf(w,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m);if(_!==wc){const n=$o();Bl(n,w,e,_,v,b),ngDevMode&&ru(so().data,n,"attr."+e,vo()-8,t,o,i,a,l,f,p,g,m)}return Vf}function $f(e,t,n,o){const r=io(),i=_f(r,t);if(i!==wc){const s=$o();if(Bl(s,r,e,i,n,o),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);ru(so().data,s,"attr."+e,vo()-n.length+1,...n)}}return $f}function Lf(e,t,n,o,r,i,s,a){const c=io(),l=so(),u=e+Jt,f=l.firstCreatePass?function(e,t,n,o,r,i,s,a,c){ngDevMode&&mn(t),ngDevMode&&ngDevMode.firstCreatePass++;const l=t.consts,u=yl(t,e,4,s||null,Yn(l,a));Rl(t,n,u,Yn(l,c)),Uo(t,u);const f=u.tViews=El(2,u,o,r,i,t.directiveRegistry,t.pipeRegistry,null,t.schemas,l);return null!==t.queries&&(t.queries.template(t,u),f.queries=t.queries.embeddedTView(u)),u}(u,l,c,t,n,o,r,i,s):l.data[u];fo(f,!1);const d=c[Lt].createComment(ngDevMode?"container":"");Ya(l,c,d,f),Ys(d,c),Yl(c,c[u]=Jl(d,c,d,f)),sn(f)&&Ml(l,c,f),null!=s&&xl(c,f,a)}function Ff(e,t,n,o){n>=e.data.length&&(e.data[n]=null,e.blueprint[n]=null),t[n]=o}function Hf(e){return Jn(to.lFrame.contextLView,Jt+e)}const Uf={ɵɵdefineInjectable:Pe,ɵɵdefineInjector:je,ɵɵinject:_i,ɵɵinvalidFactoryDep:Ci,resolveForwardRef:ce};const Bf=ne({provide:String,useValue:ne});function Wf(e){return void 0!==e.useClass}function qf(e){return void 0!==e.useFactory}const zf=kr("Injectable",void 0,void 0,void 0,((e,t)=>function(e,t){let n=null,o=null;e.hasOwnProperty(Fe)||Object.defineProperty(e,Fe,{get:()=>{if(null===n){const o=Jr({usage:0,kind:"injectable",type:e});n=o.compileInjectable(Uf,`ng:///${e.name}/ɵprov.js`,function(e,t){const n=t||{providedIn:null},o={name:e.name,type:e,typeArgumentCount:0,providedIn:n.providedIn};return(Wf(n)||qf(n))&&void 0!==n.deps&&(o.deps=Pi(n.deps)),Wf(n)?o.useClass=n.useClass:function(e){return Bf in e}(n)?o.useValue=n.useValue:qf(n)?o.useFactory=n.useFactory:function(e){return void 0!==e.useExisting}(n)&&(o.useExisting=n.useExisting),o}(e,t))}return n}}),e.hasOwnProperty(ft)||Object.defineProperty(e,ft,{get:()=>{if(null===o){const t=Jr({usage:0,kind:"injectable",type:e});o=t.compileFactory(Uf,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,typeArgumentCount:0,deps:ki(e),target:t.FactoryTarget.Injectable})}return o},configurable:!0})}(e,t)));function Kf(e){return e.length>1?" ("+function(e){const t=[];for(let n=0;n<e.length;++n){if(t.indexOf(e[n])>-1)return t.push(e[n]),t;t.push(e[n])}return t}(e.slice().reverse()).map((e=>re(e.token))).join(" -> ")+")":""}function Jf(e,t,n,o){const r=[t],i=n(r),s=o?function(e,t){const n=`${e} caused by: ${t instanceof Error?t.message:t}`,o=Error(n);return o[ia]=t,o}(i,o):Error(i);return s.addKey=Gf,s.keys=r,s.injectors=[e],s.constructResolvingMessage=n,s[ia]=o,s}function Gf(e,t){this.injectors.push(e),this.keys.push(t),this.message=this.constructResolvingMessage(this.keys)}function Zf(e,t){const n=[];for(let e=0,o=t.length;e<o;e++){const o=t[e];o&&0!=o.length?n.push(o.map(re).join(" ")):n.push("?")}return Error("Cannot resolve all parameters for '"+re(e)+"'("+n.join(", ")+"). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '"+re(e)+"' is decorated with Injectable.")}class Qf{constructor(e,t){if(this.token=e,this.id=t,!e)throw new Error("Token must be defined!");this.displayName=re(this.token)}static get(e){return Yf.get(ce(e))}static get numberOfKeys(){return Yf.numberOfKeys}}const Yf=new class{constructor(){this._allKeys=new Map}get(e){if(e instanceof Qf)return e;if(this._allKeys.has(e))return this._allKeys.get(e);const t=new Qf(e,Qf.numberOfKeys);return this._allKeys.set(e,t),t}get numberOfKeys(){return this._allKeys.size}},Xf=new class{constructor(e){this.reflectionCapabilities=e}updateCapabilities(e){this.reflectionCapabilities=e}factory(e){return this.reflectionCapabilities.factory(e)}parameters(e){return this.reflectionCapabilities.parameters(e)}annotations(e){return this.reflectionCapabilities.annotations(e)}propMetadata(e){return this.reflectionCapabilities.propMetadata(e)}hasLifecycleHook(e,t){return this.reflectionCapabilities.hasLifecycleHook(e,t)}getter(e){return this.reflectionCapabilities.getter(e)}setter(e){return this.reflectionCapabilities.setter(e)}method(e){return this.reflectionCapabilities.method(e)}importUri(e){return this.reflectionCapabilities.importUri(e)}resourceUri(e){return this.reflectionCapabilities.resourceUri(e)}resolveIdentifier(e,t,n,o){return this.reflectionCapabilities.resolveIdentifier(e,t,n,o)}resolveEnum(e,t){return this.reflectionCapabilities.resolveEnum(e,t)}}(new li);class ed{constructor(e,t,n){this.key=e,this.optional=t,this.visibility=n}static fromKey(e){return new ed(e,!1,null)}}const td=[];class nd{constructor(e,t,n){this.key=e,this.resolvedFactories=t,this.multiProvider=n,this.resolvedFactory=this.resolvedFactories[0]}}class od{constructor(e,t){this.factory=e,this.dependencies=t}}function rd(e){let t,n;if(e.useClass){const o=ce(e.useClass);t=Xf.factory(o),n=cd(o)}else e.useExisting?(t=e=>e,n=[ed.fromKey(Qf.get(e.useExisting))]):e.useFactory?(t=e.useFactory,n=function(e,t){if(t){const n=t.map((e=>[e]));return t.map((t=>ld(e,t,n)))}return cd(e)}(e.useFactory,e.deps)):(t=()=>e.useValue,n=td);return new od(t,n)}function id(e){return new nd(Qf.get(e.provide),[rd(e)],e.multi||!1)}function sd(e){const t=function(e,t){for(let n=0;n<e.length;n++){const o=e[n],r=t.get(o.key.id);if(r){if(o.multiProvider!==r.multiProvider)throw Error(`Cannot mix multi providers and regular providers, got: ${r} ${o}`);if(o.multiProvider)for(let e=0;e<o.resolvedFactories.length;e++)r.resolvedFactories.push(o.resolvedFactories[e]);else t.set(o.key.id,o)}else{let e;e=o.multiProvider?new nd(o.key,o.resolvedFactories.slice(),o.multiProvider):o,t.set(o.key.id,e)}}return t}(ad(e,[]).map(id),new Map);return Array.from(t.values())}function ad(e,t){return e.forEach((e=>{if(e instanceof Gr)t.push({provide:e,useClass:e});else if(e&&"object"==typeof e&&void 0!==e.provide)t.push(e);else{if(!Array.isArray(e))throw Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${e}`);ad(e,t)}})),t}function cd(e){const t=Xf.parameters(e);if(!t)return[];if(t.some((e=>null==e)))throw Zf(e,t);return t.map((n=>ld(e,n,t)))}function ld(e,t,n){let o=null,r=!1;if(!Array.isArray(t))return ud(t instanceof Ii?t.token:t,r,null);let i=null;for(let e=0;e<t.length;++e){const n=t[e];n instanceof Gr?o=n:n instanceof Ii?o=n.token:n instanceof Ei?r=!0:n instanceof Ti||n instanceof Si?i=n:n instanceof $r&&(o=n)}if(o=ce(o),null!=o)return ud(o,r,i);throw Zf(e,n)}function ud(e,t,n){return new ed(Qf.get(e),t,n)}const fd={};class dd{static resolve(e){return sd(e)}static resolveAndCreate(e,t){const n=dd.resolve(e);return dd.fromResolvedProviders(n,t)}static fromResolvedProviders(e,t){return new pd(e,t)}}class pd{constructor(e,t){this._constructionCounter=0,this._providers=e,this.parent=t||null;const n=e.length;this.keyIds=[],this.objs=[];for(let t=0;t<n;t++)this.keyIds[t]=e[t].key.id,this.objs[t]=fd}get(e,t=di){return this._getByKey(Qf.get(e),null,t)}resolveAndCreateChild(e){const t=dd.resolve(e);return this.createChildFromResolved(t)}createChildFromResolved(e){const t=new pd(e);return t.parent=this,t}resolveAndInstantiate(e){return this.instantiateResolved(dd.resolve([e])[0])}instantiateResolved(e){return this._instantiateProvider(e)}getProviderAtIndex(e){if(e<0||e>=this._providers.length)throw function(e){return Error(`Index ${e} is out-of-bounds.`)}(e);return this._providers[e]}_new(e){if(this._constructionCounter++>this._getMaxNumberOfObjects())throw Jf(this,e.key,(function(e){return`Cannot instantiate cyclic dependency!${Kf(e)}`}));return this._instantiateProvider(e)}_getMaxNumberOfObjects(){return this.objs.length}_instantiateProvider(e){if(e.multiProvider){const t=[];for(let n=0;n<e.resolvedFactories.length;++n)t[n]=this._instantiate(e,e.resolvedFactories[n]);return t}return this._instantiate(e,e.resolvedFactories[0])}_instantiate(e,t){const n=t.factory;let o,r;try{o=t.dependencies.map((e=>this._getByReflectiveDependency(e)))}catch(t){throw t.addKey&&t.addKey(this,e.key),t}try{r=n(...o)}catch(t){throw i=t,t.stack,Jf(this,e.key,(function(e){const t=re(e[0].token);return`${i.message}: Error during instantiation of ${t}!${Kf(e)}.`}),i)}var i;return r}_getByReflectiveDependency(e){return this._getByKey(e.key,e.visibility,e.optional?null:di)}_getByKey(e,t,n){return e===pd.INJECTOR_KEY?this:t instanceof Ti?this._getByKeySelf(e,n):this._getByKeyDefault(e,n,t)}_getObjByKeyId(e){for(let t=0;t<this.keyIds.length;t++)if(this.keyIds[t]===e)return this.objs[t]===fd&&(this.objs[t]=this._new(this._providers[t])),this.objs[t];return fd}_throwOrNull(e,t){if(t!==di)return t;throw function(e,t){return Jf(e,t,(function(e){return`No provider for ${re(e[0].token)}!${Kf(e)}`}))}(this,e)}_getByKeySelf(e,t){const n=this._getObjByKeyId(e.id);return n!==fd?n:this._throwOrNull(e,t)}_getByKeyDefault(e,t,n){let o;for(o=n instanceof Si?this.parent:this;o instanceof pd;){const t=o,n=t._getObjByKeyId(e.id);if(n!==fd)return n;o=t.parent}return null!==o?o.get(e.token,t):this._throwOrNull(e,t)}get displayName(){return`ReflectiveInjector(providers: [${function(e){const t=[];for(let n=0;n<e._providers.length;++n)t[n]=' "'+e.getProviderAtIndex(n).key.displayName+'" ';return t}(this).join(", ")}])`}toString(){return this.displayName}}function hd(e,t=We.Default){const n=io();return null===n?(ngDevMode&&(ngDevMode&&Ce(qe,hd,"Calling ɵɵinject would cause infinite recursion")),_i(e,t)):vr(co(),n,ce(e),t)}function gd(){const e=ngDevMode?"This constructor was not compatible with Dependency Injection.":"invalid";throw new Error(e)}function yd(e,t,n){const o=io(),r=wo();if(yf(o,r,t)){const i=so(),s=$o();Al(i,s,o,e,t,o[Lt],n,!1),ngDevMode&&ru(i.data,s,e,r)}return yd}function md(e,t,n,o,r){const i=r?"class":"style";uu(e,n,t.inputs[i],i,o)}function vd(e,t,n,o){const r=io(),i=so(),s=Jt+e;ngDevMode&&_e(vo(),i.bindingStartIndex,"elements should be created before any bindings"),ngDevMode&&Ne(r,s);const a=r[Lt],c=r[s]=ja(a,t,to.lFrame.currentNamespace),l=i.firstCreatePass?function(e,t,n,o,r,i,s){ngDevMode&&mn(t),ngDevMode&&ngDevMode.firstCreatePass++;const a=t.consts,c=yl(t,e,2,r,Yn(a,i)),l=Rl(t,n,c,Yn(a,s));return ngDevMode&&function(e,t,n,o){if(null===e.schemas)return;const r=n.value;if(!o&&null!==r&&("undefined"!=typeof HTMLUnknownElement&&HTMLUnknownElement&&t instanceof HTMLUnknownElement||"undefined"!=typeof customElements&&r.indexOf("-")>-1&&!customElements.get(r))&&!kl(e,r)){let e=`'${r}' is not a known element:\n`;e+=`1. If '${r}' is an Angular component, then verify that it is part of this module.\n`,r&&r.indexOf("-")>-1?e+=`2. If '${r}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`:e+="2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.",console.error(de(304,e))}}(t,o,c,l),null!==c.attrs&&du(c,c.attrs,!1),null!==c.mergedAttrs&&du(c,c.mergedAttrs,!0),null!==t.queries&&t.queries.elementStart(t,c),c}(s,i,r,c,t,n,o):i.data[s];fo(l,!0);const u=l.mergedAttrs;null!==u&&Yo(a,c,u);const f=l.classes;null!==f&&ac(a,c,f);const d=l.styles;return null!==d&&sc(a,c,d),64&~l.flags&&Ya(i,r,c,l),0===to.lFrame.elementDepthCount&&Ys(c,r),to.lFrame.elementDepthCount++,sn(l)&&(Ml(i,r,l),Dl(i,l,r)),null!==o&&xl(r,l),vd}function bd(){let e=co();ngDevMode&&Se(e,"No parent node to close."),po()?ho():(ngDevMode&&pn(co()),e=e.parent,fo(e,!1));const t=e;ngDevMode&&Qo(t,3),to.lFrame.elementDepthCount--;const n=so();return n.firstCreatePass&&(Uo(n,e),on(e)&&n.queries.elementEnd(e)),null!=t.classesWithoutHost&&function(e){return!!(16&e.flags)}(t)&&md(n,t,io(),t.classesWithoutHost,!0),null!=t.stylesWithoutHost&&function(e){return!!(32&e.flags)}(t)&&md(n,t,io(),t.stylesWithoutHost,!1),bd}function wd(e,t,n,o){return vd(e,t,n,o),bd(),wd}function _d(e,t,n){const o=io(),r=so(),i=e+Jt;ngDevMode&&Ne(o,i),ngDevMode&&_e(vo(),r.bindingStartIndex,"element containers should be created before any bindings");const s=r.firstCreatePass?function(e,t,n,o,r){ngDevMode&&ngDevMode.firstCreatePass++;const i=t.consts,s=Yn(i,o),a=yl(t,e,8,"ng-container",s);return null!==s&&du(a,s,!0),Rl(t,n,a,Yn(i,r)),null!==t.queries&&t.queries.elementStart(t,a),a}(i,r,o,t,n):r.data[i];fo(s,!0),ngDevMode&&ngDevMode.rendererCreateComment++;const a=o[i]=o[Lt].createComment(ngDevMode?"ng-container":"");return Ya(r,o,a,s),Ys(a,o),sn(s)&&(Ml(r,o,s),Dl(r,s,o)),null!=n&&xl(o,s),_d}function Cd(){let e=co();const t=so();return po()?ho():(ngDevMode&&pn(e),e=e.parent,fo(e,!1)),ngDevMode&&Qo(e,8),t.firstCreatePass&&(Uo(t,e),on(e)&&t.queries.elementEnd(e)),Cd}function Dd(e,t,n){return _d(e,t,n),Cd(),Dd}function Md(){return io()}function xd(e){return!!e&&"function"==typeof e.then}function Id(e){return!!e&&"function"==typeof e.subscribe}pd.INJECTOR_KEY=Qf.get(Ou);const Ed=Id;function Td(e,t,n,o){const r=io(),i=so(),s=co();return Od(i,r,r[Lt],s,e,t,!!n,o),Td}function Sd(e,t){const n=co(),o=io(),r=so();return Od(r,o,cu(xo(r.data),n,o),n,e,t,!1),Sd}function Od(e,t,n,o,r,i,s,a){const c=sn(o),l=e.firstCreatePass&&au(e),u=t[jt],f=su(t);ngDevMode&&Qo(o,15);let d=!0;if(3&o.type||a){const p=zn(o,t),h=a?a(p):p,g=f.length,y=a?e=>a(Wn(e[o.index])):o.index;if(Un(n)){let s=null;if(!a&&c&&(s=function(e,t,n,o){const r=e.cleanup;if(null!=r)for(let e=0;e<r.length-1;e+=2){const i=r[e];if(i===n&&r[e+1]===o){const n=t[Rt],o=r[e+2];return n.length>o?n[o]:null}"string"==typeof i&&(e+=2)}return null}(e,t,r,o.index)),null!==s)(s.__ngLastListenerFn__||s).__ngNextListenerFn__=i,s.__ngLastListenerFn__=i,d=!1;else{i=Nd(o,t,u,i,!1);const e=n.listen(h,r,i);ngDevMode&&ngDevMode.rendererAddEventListener++,f.push(i,e),l&&l.push(r,y,g,g+1)}}else i=Nd(o,t,u,i,!0),h.addEventListener(r,i,s),ngDevMode&&ngDevMode.rendererAddEventListener++,f.push(i),l&&l.push(r,y,g,s)}else i=Nd(o,t,u,i,!1);const p=o.outputs;let h;if(d&&null!==p&&(h=p[r])){const e=h.length;if(e)for(let n=0;n<e;n+=2){const e=h[n];ngDevMode&&Ne(t,e);const s=h[n+1],a=t[e],c=a[s];if(ngDevMode&&!Ed(c))throw new Error(`@Output ${s} not initialized in '${a.constructor.name}'.`);const u=c.subscribe(i),d=f.length;f.push(i,u),l&&l.push(r,o.index,d,-(d+1))}}}function Ad(e,t,n,o){try{return kn(6,t,n),!1!==n(o)}catch(t){return lu(e,t),!1}finally{kn(7,t,n)}}function Nd(e,t,n,o,r){return function i(s){if(s===Function)return o;const a=2&e.flags?Gn(e.index,t):t;32&t[Ot]||Xl(a);let c=Ad(t,n,o,s),l=i.__ngNextListenerFn__;for(;l;)c=Ad(t,n,l,s)&&c,l=l.__ngNextListenerFn__;return r&&!1===c&&(s.preventDefault(),s.returnValue=!1),c}}function kd(e=1){return function(e){return(to.lFrame.contextLView=function(e,t){for(;e>0;)ngDevMode&&Se(t[Bt],"Declaration view should be defined if nesting level is greater than 0."),t=t[Bt],e--;return t}(e,to.lFrame.contextLView))[jt]}(e)}function Pd(e,t){let n=null;const o=function(e){const t=e.attrs;if(null!=t){const e=t.indexOf(5);if(!(1&e))return t[e+1]}return null}(e);for(let r=0;r<t.length;r++){const i=t[r];if("*"!==i){if(null===o?yc(e,i,!0):mc(o,i))return r}else n=r}return n}function Rd(e){const t=io()[Wt][Pt];if(!t.projection){const n=e?e.length:1,o=t.projection=ti(n,null),r=o.slice();let i=t.child;for(;null!==i;){const t=e?Pd(i,e):0;null!==t&&(r[t]?r[t].projectionNext=i:o[t]=i,r[t]=i),i=i.next}}}function jd(e,t=0,n){const o=io(),r=so(),i=yl(r,Jt+e,16,null,n||null);null===i.projection&&(i.projection=t),ho(),64&~i.flags&&function(e,t,n){ic(t[Lt],0,t,n,Ha(e,n,t),Ka(n.parent||t[Pt],n,t))}(r,o,i)}function Vd(e,t,n){return $d(e,"",t,"",n),Vd}function $d(e,t,n,o,r){const i=io(),s=Cf(i,t,n,o);if(s!==wc){const n=so(),a=$o();Al(n,a,i,e,s,i[Lt],r,!1),ngDevMode&&ru(n.data,a,e,vo()-1,t,o)}return $d}function Ld(e,t,n,o,r,i,s){const a=io(),c=Df(a,t,n,o,r,i);if(c!==wc){const n=so(),r=$o();Al(n,r,a,e,c,a[Lt],s,!1),ngDevMode&&ru(n.data,r,e,vo()-2,t,o,i)}return Ld}function Fd(e,t,n,o,r,i,s,a,c){const l=io(),u=Mf(l,t,n,o,r,i,s,a);if(u!==wc){const n=so(),r=$o();Al(n,r,l,e,u,l[Lt],c,!1),ngDevMode&&ru(n.data,r,e,vo()-3,t,o,i,a)}return Fd}function Hd(e,t,n,o,r,i,s,a,c,l,u){const f=io(),d=xf(f,t,n,o,r,i,s,a,c,l);if(d!==wc){const n=so(),r=$o();Al(n,r,f,e,d,f[Lt],u,!1),ngDevMode&&ru(n.data,r,e,vo()-4,t,o,i,a,l)}return Hd}function Ud(e,t,n,o,r,i,s,a,c,l,u,f,d){const p=io(),h=If(p,t,n,o,r,i,s,a,c,l,u,f);if(h!==wc){const n=so(),r=$o();Al(n,r,p,e,h,p[Lt],d,!1),ngDevMode&&ru(n.data,r,e,vo()-5,t,o,i,a,l,f)}return Ud}function Bd(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){const g=io(),y=Ef(g,t,n,o,r,i,s,a,c,l,u,f,d,p);if(y!==wc){const n=so(),r=$o();Al(n,r,g,e,y,g[Lt],h,!1),ngDevMode&&ru(n.data,r,e,vo()-6,t,o,i,a,l,f,p)}return Bd}function Wd(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){const m=io(),v=Tf(m,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g);if(v!==wc){const n=so(),r=$o();Al(n,r,m,e,v,m[Lt],y,!1),ngDevMode&&ru(n.data,r,e,vo()-7,t,o,i,a,l,f,p,g)}return Wd}function qd(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v){const b=io(),w=Sf(b,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m);if(w!==wc){const n=so(),r=$o();Al(n,r,b,e,w,b[Lt],v,!1),ngDevMode&&ru(n.data,r,e,vo()-8,t,o,i,a,l,f,p,g,m)}return qd}function zd(e,t,n){const o=io(),r=_f(o,t);if(r!==wc){const i=so(),s=$o();if(Al(i,s,o,e,r,o[Lt],n,!1),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);ru(i.data,s,e,vo()-n.length+1,...n)}}return zd}function Kd(e,t,n,o,r){const i=e[n+1],s=null===t;let a=o?xc(i):Tc(i),c=!1;for(;0!==a&&(!1===c||s);){ngDevMode&&Ne(e,a);const n=e[a],r=e[a+1];Jd(n,t)&&(c=!0,e[a+1]=o?Ac(r):Ec(r)),a=o?xc(r):Tc(r)}c&&(e[n+1]=o?Ec(i):Ac(i))}function Jd(e,t){return ngDevMode&&Ce(Array.isArray(t),!0,"Expected that 'tStylingKey' has been unwrapped"),null===e||null==t||(Array.isArray(e)?e[1]:e)===t||!(!Array.isArray(e)||"string"!=typeof t)&&ri(e,t)>=0}const Gd={textEnd:0,key:0,keyEnd:0,value:0,valueEnd:0};function Zd(e){return e.substring(Gd.key,Gd.keyEnd)}function Qd(e){return e.substring(Gd.value,Gd.valueEnd)}function Yd(e,t){const n=Gd.textEnd;return n===t?-1:(t=Gd.keyEnd=function(e,t,n){for(;t<n&&e.charCodeAt(t)>32;)t++;return t}(e,Gd.key=t,n),tp(e,t,n))}function Xd(e,t){const n=Gd.textEnd;let o=Gd.key=tp(e,t,n);return n===o?-1:(o=Gd.keyEnd=function(e,t,n){let o;for(;t<n&&(45===(o=e.charCodeAt(t))||95===o||(-33&o)>=65&&(-33&o)<=90||o>=48&&o<=57);)t++;return t}(e,o,n),o=np(e,o,n,58),o=Gd.value=tp(e,o,n),o=Gd.valueEnd=function(e,t,n){let o=-1,r=-1,i=-1,s=t,a=s;for(;s<n;){const c=e.charCodeAt(s++);if(59===c)return a;34===c||39===c?a=s=op(e,c,s,n):t===s-4&&85===i&&82===r&&76===o&&40===c?a=s=op(e,41,s,n):c>32&&(a=s),i=r,r=o,o=-33&c}return a}(e,o,n),np(e,o,n,59))}function ep(e){Gd.key=0,Gd.keyEnd=0,Gd.value=0,Gd.valueEnd=0,Gd.textEnd=e.length}function tp(e,t,n){for(;t<n&&e.charCodeAt(t)<=32;)t++;return t}function np(e,t,n,o){return(t=tp(e,t,n))<n&&(ngDevMode&&e.charCodeAt(t)!==o&&rp(e,String.fromCharCode(o),t),t++),t}function op(e,t,n,o){let r=-1,i=n;for(;i<o;){const n=e.charCodeAt(i++);if(n==t&&92!==r)return i;r=92==n&&92===r?0:n}throw ngDevMode?rp(e,String.fromCharCode(t),o):new Error}function rp(e,t,n){throw ngDevMode&&_e("string"==typeof e,!0,"String expected here"),Oe(`Malformed style at location ${n} in string '`+e.substring(0,n)+"[>>"+e.substring(n,n+1)+"<<]"+e.substr(n+1)+`'. Expecting '${t}'.`)}function ip(e,t,n){return fp(e,t,n,!1),ip}function sp(e,t){return fp(e,t,null,!0),sp}function ap(e){dp(mp,cp,e,!1)}function cp(e,t){for(let n=function(e){return ep(e),Xd(e,tp(e,0,Gd.textEnd))}(t);n>=0;n=Xd(t,n))mp(e,Zd(t),Qd(t))}function lp(e){dp(ni,up,e,!0)}function up(e,t){for(let n=function(e){return ep(e),Yd(e,tp(e,0,Gd.textEnd))}(t);n>=0;n=Yd(t,n))ni(e,Zd(t),!0)}function fp(e,t,n,o){const r=io(),i=so(),s=_o(2);i.firstUpdatePass&&hp(i,e,s,o),t!==wc&&yf(r,s,t)&&vp(i,i.data[jo()],r,r[Lt],e,r[s+1]=function(e,t){return null==e||("string"==typeof t?e+=t:"object"==typeof e&&(e=re(ts(e)))),e}(t,n),o,s)}function dp(e,t,n,o){const r=so(),i=_o(2);r.firstUpdatePass&&hp(r,null,i,o);const s=io();if(n!==wc&&yf(s,i,n)){const a=r.data[jo()];if(_p(a,o)&&!pp(r,i)){if(ngDevMode){const e=r.data[i];_e(Array.isArray(e)?e[1]:e,!1,"Styling linked list shadow input should be marked as 'false'")}let e=o?a.classesWithoutHost:a.stylesWithoutHost;ngDevMode&&!1===o&&null!==e&&_e(e.endsWith(";"),!0,"Expecting static portion to end with ';'"),null!==e&&(n=ie(e,n||"")),md(r,a,s,n,o)}else!function(e,t,n,o,r,i,s,a){r===wc&&(r=st);let c=0,l=0,u=0<r.length?r[0]:null,f=0<i.length?i[0]:null;for(;null!==u||null!==f;){ngDevMode&&xe(c,999,"Are we stuck in infinite loop?"),ngDevMode&&xe(l,999,"Are we stuck in infinite loop?");const d=c<r.length?r[c+1]:void 0,p=l<i.length?i[l+1]:void 0;let h,g=null;u===f?(c+=2,l+=2,d!==p&&(g=f,h=p)):null===f||null!==u&&u<f?(c+=2,g=u):(ngDevMode&&Se(f,"Expecting to have a valid key"),l+=2,g=f,h=p),null!==g&&vp(e,t,n,o,g,h,s,a),u=c<r.length?r[c]:null,f=l<i.length?i[l]:null}}(r,a,s,s[Lt],s[i+1],s[i+1]=function(e,t,n){if(null==n||""===n)return st;const o=[],r=ts(n);if(Array.isArray(r))for(let t=0;t<r.length;t++)e(o,r[t],!0);else if("object"==typeof r)for(const t in r)r.hasOwnProperty(t)&&e(o,t,r[t]);else"string"==typeof r?t(o,r):ngDevMode&&Oe("Unsupported styling type "+typeof r+": "+r);return o}(e,t,n),o,i)}}function pp(e,t){return t>=e.expandoStartIndex}function hp(e,t,n,o){ngDevMode&&vn(e);const r=e.data;if(null===r[n+1]){const i=r[jo()];ngDevMode&&Se(i,"TNode expected");const s=pp(e,n);_p(i,o)&&null===t&&!s&&(t=!1),t=function(e,t,n,o){const r=xo(e);let i=o?t.residualClasses:t.residualStyles;if(null===r)0===(o?t.classBindings:t.styleBindings)&&(n=yp(n=gp(null,e,t,n,o),t.attrs,o),i=null);else{const s=t.directiveStylingLast;if(-1===s||e[s]!==r)if(n=gp(r,e,t,n,o),null===i){let n=function(e,t,n){const o=n?t.classBindings:t.styleBindings;if(0!==Tc(o))return e[xc(o)]}(e,t,o);void 0!==n&&Array.isArray(n)&&(n=gp(null,e,t,n[1],o),n=yp(n,t.attrs,o),function(e,t,n,o){const r=n?t.classBindings:t.styleBindings;ngDevMode&&Ce(Tc(r),0,"Expecting to have at least one template styling binding."),e[xc(r)]=o}(e,t,o,n))}else i=function(e,t,n){let o;const r=t.directiveEnd;ngDevMode&&Ce(t.directiveStylingLast,-1,"By the time this function gets called at least one hostBindings-node styling instruction must have executed.");for(let i=1+t.directiveStylingLast;i<r;i++)o=yp(o,e[i].hostAttrs,n);return yp(o,t.attrs,n)}(e,t,o)}return void 0!==i&&(o?t.residualClasses=i:t.residualStyles=i),n}(r,i,t,o),function(e,t,n,o,r,i){ngDevMode&&vn(so());let s=i?t.classBindings:t.styleBindings,a=xc(s),c=Tc(s);e[o]=n;let l,u=!1;if(Array.isArray(n)){const e=n;l=e[1],(null===l||ri(e,l)>0)&&(u=!0)}else l=n;if(r)if(0!==c){const t=xc(e[a+1]);e[o+1]=Mc(t,a),0!==t&&(e[t+1]=Sc(e[t+1],o)),e[a+1]=(f=e[a+1],d=o,ngDevMode&&ve(f,"expected number"),ngDevMode&&be(d,0,32767),131071&f|d<<17)}else e[o+1]=Mc(a,0),0!==a&&(e[a+1]=Sc(e[a+1],o)),a=o;else e[o+1]=Mc(c,0),ngDevMode&&_e(0!==a&&0===c,!1,"Adding template bindings after hostBindings is not allowed."),0===a?a=o:e[c+1]=Sc(e[c+1],o),c=o;var f,d;u&&(e[o+1]=Ec(e[o+1])),Kd(e,l,o,!0),Kd(e,l,o,!1),function(e,t,n,o,r){const i=r?e.residualClasses:e.residualStyles;null!=i&&"string"==typeof t&&ri(i,t)>=0&&(n[o+1]=Ac(n[o+1]))}(t,l,e,o,i),s=Mc(a,c),i?t.classBindings=s:t.styleBindings=s}(r,i,t,n,s,o)}}function gp(e,t,n,o,r){let i=null;const s=n.directiveEnd;let a=n.directiveStylingLast;for(-1===a?a=n.directiveStart:a++;a<s&&(i=t[a],ngDevMode&&Se(i,"expected to be defined"),o=yp(o,i.hostAttrs,r),i!==e);)a++;return null!==e&&(n.directiveStylingLast=a),o}function yp(e,t,n){const o=n?1:2;let r=-1;if(null!==t)for(let i=0;i<t.length;i++){const s=t[i];"number"==typeof s?r=s:r===o&&(Array.isArray(e)||(e=void 0===e?[]:["",e]),ni(e,s,!!n||t[++i]))}return void 0===e?null:e}function mp(e,t,n){ni(e,t,ts(n))}function vp(e,t,n,o,r,i,s,a){if(!(3&t.type))return;const c=e.data,l=c[a+1];wp(Oc(l)?bp(c,t,n,r,Tc(l),s):void 0)||(wp(i)||Ic(l)&&(i=bp(c,null,n,r,a,s)),function(e,t,n,o,r){const i=Un(e);if(t)r?(ngDevMode&&ngDevMode.rendererAddClass++,i?e.addClass(n,o):(ngDevMode&&Se(n.classList,"HTMLElement expected"),n.classList.add(o))):(ngDevMode&&ngDevMode.rendererRemoveClass++,i?e.removeClass(n,o):n.classList.remove(o));else{let t=-1===o.indexOf("-")?void 0:Ma.DashCase;if(null==r)ngDevMode&&ngDevMode.rendererRemoveStyle++,i?e.removeStyle(n,o,t):n.style.removeProperty(o);else{const s="string"==typeof r&&r.endsWith("!important");s&&(r=r.slice(0,-10),t|=Ma.Important),ngDevMode&&ngDevMode.rendererSetStyle++,i?e.setStyle(n,o,r,t):(ngDevMode&&Se(n.style,"HTMLElement expected"),n.style.setProperty(o,r,s?"important":""))}}}(o,s,qn(jo(),n),r,i))}function bp(e,t,n,o,r,i){const s=null===t;let a;for(;r>0;){const t=e[r],i=Array.isArray(t),c=i?t[1]:t,l=null===c;let u=n[r+1];u===wc&&(u=l?st:void 0);let f=l?oi(u,o):c===o?u:void 0;if(i&&!wp(f)&&(f=oi(t,o)),wp(f)&&(a=f,s))return a;const d=e[r+1];r=s?xc(d):Tc(d)}if(null!==t){let e=i?t.residualClasses:t.residualStyles;null!=e&&(a=oi(e,o))}return a}function wp(e){return void 0!==e}function _p(e,t){return!!(e.flags&(t?16:32))}function Cp(e,t=""){const n=io(),o=so(),r=e+Jt;ngDevMode&&_e(vo(),o.bindingStartIndex,"text nodes should be created before any bindings"),ngDevMode&&Ne(n,r);const i=o.firstCreatePass?yl(o,r,1,t,null):o.data[r],s=n[r]=ka(n[Lt],t);Ya(o,n,s,i),fo(i,!1)}function Dp(e){return Mp("",e,""),Dp}function Mp(e,t,n){const o=io(),r=Cf(o,e,t,n);return r!==wc&&fu(o,jo(),r),Mp}function xp(e,t,n,o,r){const i=io(),s=Df(i,e,t,n,o,r);return s!==wc&&fu(i,jo(),s),xp}function Ip(e,t,n,o,r,i,s){const a=io(),c=Mf(a,e,t,n,o,r,i,s);return c!==wc&&fu(a,jo(),c),Ip}function Ep(e,t,n,o,r,i,s,a,c){const l=io(),u=xf(l,e,t,n,o,r,i,s,a,c);return u!==wc&&fu(l,jo(),u),Ep}function Tp(e,t,n,o,r,i,s,a,c,l,u){const f=io(),d=If(f,e,t,n,o,r,i,s,a,c,l,u);return d!==wc&&fu(f,jo(),d),Tp}function Sp(e,t,n,o,r,i,s,a,c,l,u,f,d){const p=io(),h=Ef(p,e,t,n,o,r,i,s,a,c,l,u,f,d);return h!==wc&&fu(p,jo(),h),Sp}function Op(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){const g=io(),y=Tf(g,e,t,n,o,r,i,s,a,c,l,u,f,d,p,h);return y!==wc&&fu(g,jo(),y),Op}function Ap(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){const m=io(),v=Sf(m,e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y);return v!==wc&&fu(m,jo(),v),Ap}function Np(e){const t=io(),n=_f(t,e);return n!==wc&&fu(t,jo(),n),Np}function kp(e,t,n){dp(ni,up,Cf(io(),e,t,n),!0)}function Pp(e,t,n,o,r){dp(ni,up,Df(io(),e,t,n,o,r),!0)}function Rp(e,t,n,o,r,i,s){dp(ni,up,Mf(io(),e,t,n,o,r,i,s),!0)}function jp(e,t,n,o,r,i,s,a,c){dp(ni,up,xf(io(),e,t,n,o,r,i,s,a,c),!0)}function Vp(e,t,n,o,r,i,s,a,c,l,u){dp(ni,up,If(io(),e,t,n,o,r,i,s,a,c,l,u),!0)}function $p(e,t,n,o,r,i,s,a,c,l,u,f,d){dp(ni,up,Ef(io(),e,t,n,o,r,i,s,a,c,l,u,f,d),!0)}function Lp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){dp(ni,up,Tf(io(),e,t,n,o,r,i,s,a,c,l,u,f,d,p,h),!0)}function Fp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){dp(ni,up,Sf(io(),e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y),!0)}function Hp(e){dp(ni,up,_f(io(),e),!0)}function Up(e,t,n){ap(Cf(io(),e,t,n))}function Bp(e,t,n,o,r){ap(Df(io(),e,t,n,o,r))}function Wp(e,t,n,o,r,i,s){ap(Mf(io(),e,t,n,o,r,i,s))}function qp(e,t,n,o,r,i,s,a,c){ap(xf(io(),e,t,n,o,r,i,s,a,c))}function zp(e,t,n,o,r,i,s,a,c,l,u){ap(If(io(),e,t,n,o,r,i,s,a,c,l,u))}function Kp(e,t,n,o,r,i,s,a,c,l,u,f,d){ap(Ef(io(),e,t,n,o,r,i,s,a,c,l,u,f,d))}function Jp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){ap(Tf(io(),e,t,n,o,r,i,s,a,c,l,u,f,d,p,h))}function Gp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){ap(Sf(io(),e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y))}function Zp(e){ap(_f(io(),e))}function Qp(e,t,n,o,r){return fp(e,Cf(io(),t,n,o),r,!1),Qp}function Yp(e,t,n,o,r,i,s){return fp(e,Df(io(),t,n,o,r,i),s,!1),Yp}function Xp(e,t,n,o,r,i,s,a,c){return fp(e,Mf(io(),t,n,o,r,i,s,a),c,!1),Xp}function eh(e,t,n,o,r,i,s,a,c,l,u){return fp(e,xf(io(),t,n,o,r,i,s,a,c,l),u,!1),eh}function th(e,t,n,o,r,i,s,a,c,l,u,f,d){return fp(e,If(io(),t,n,o,r,i,s,a,c,l,u,f),d,!1),th}function nh(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){return fp(e,Ef(io(),t,n,o,r,i,s,a,c,l,u,f,d,p),h,!1),nh}function oh(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){return fp(e,Tf(io(),t,n,o,r,i,s,a,c,l,u,f,d,p,h,g),y,!1),oh}function rh(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v){return fp(e,Sf(io(),t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m),v,!1),rh}function ih(e,t,n){return fp(e,_f(io(),t),n,!1),ih}function sh(e,t,n){const o=io(),r=wo();if(yf(o,r,t)){const i=so(),s=$o();Al(i,s,o,e,t,o[Lt],n,!0),ngDevMode&&ru(i.data,s,e,r)}return sh}function ah(e,t,n){const o=io(),r=wo();if(yf(o,r,t)){const i=so(),s=$o();Al(i,s,o,e,t,cu(xo(i.data),s,o),n,!0),ngDevMode&&ru(i.data,s,e,r)}return ah}"undefined"==typeof ngI18nClosureMode&&(ot.ngI18nClosureMode="undefined"!=typeof goog&&"function"==typeof goog.getMsg);const ch=void 0;var lh=["en",[["a","p"],["AM","PM"],ch],[["AM","PM"],ch,ch],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],ch,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],ch,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",ch,"{1} 'at' {0}",ch],[".",",",";","%","+","-","E","×","‰","∞","NaN",":"],["#,##0.###","#,##0%","¤#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(e){const t=Math.floor(Math.abs(e)),n=e.toString().replace(/^[^.]*\.?/,"").length;return 1===t&&0===n?1:5}];let uh={};function fh(e,t,n){"string"!=typeof t&&(n=t,t=e[mh.LocaleId]),t=t.toLowerCase().replace(/_/g,"-"),uh[t]=e,n&&(uh[t][mh.ExtraData]=n)}function dh(e){const t=function(e){return e.toLowerCase().replace(/_/g,"-")}(e);let n=gh(t);if(n)return n;const o=t.split("-")[0];if(n=gh(o),n)return n;if("en"===o)return lh;throw new Error(`Missing locale data for the locale "${e}".`)}function ph(e){return dh(e)[mh.CurrencyCode]||null}function hh(e){return dh(e)[mh.PluralCase]}function gh(e){return e in uh||(uh[e]=ot.ng&&ot.ng.common&&ot.ng.common.locales&&ot.ng.common.locales[e]),uh[e]}function yh(){uh={}}var mh;!function(e){e[e.LocaleId=0]="LocaleId",e[e.DayPeriodsFormat=1]="DayPeriodsFormat",e[e.DayPeriodsStandalone=2]="DayPeriodsStandalone",e[e.DaysFormat=3]="DaysFormat",e[e.DaysStandalone=4]="DaysStandalone",e[e.MonthsFormat=5]="MonthsFormat",e[e.MonthsStandalone=6]="MonthsStandalone",e[e.Eras=7]="Eras",e[e.FirstDayOfWeek=8]="FirstDayOfWeek",e[e.WeekendRange=9]="WeekendRange",e[e.DateFormat=10]="DateFormat",e[e.TimeFormat=11]="TimeFormat",e[e.DateTimeFormat=12]="DateTimeFormat",e[e.NumberSymbols=13]="NumberSymbols",e[e.NumberFormats=14]="NumberFormats",e[e.CurrencyCode=15]="CurrencyCode",e[e.CurrencySymbol=16]="CurrencySymbol",e[e.CurrencyName=17]="CurrencyName",e[e.Currencies=18]="Currencies",e[e.Directionality=19]="Directionality",e[e.PluralCase=20]="PluralCase",e[e.ExtraData=21]="ExtraData"}(mh||(mh={}));const vh=["zero","one","two","few","many"],bh="en-US",wh={marker:"element"},_h={marker:"ICU"};var Ch;!function(e){e[e.SHIFT=2]="SHIFT",e[e.APPEND_EAGERLY=1]="APPEND_EAGERLY",e[e.COMMENT=2]="COMMENT"}(Ch||(Ch={}));let Dh=bh;function Mh(e){Se(e,"Expected localeId to be defined"),"string"==typeof e&&(Dh=e.toLowerCase().replace(/_/g,"-"))}function xh(e,t,n){const o=t.insertBeforeIndex,r=Array.isArray(o)?o[0]:o;return null===r?Ja(e,0,n):(ngDevMode&&Ne(n,r),Wn(n[r]))}function Ih(e,t,n,o,r){const i=t.insertBeforeIndex;if(Array.isArray(i)){ngDevMode&&Ae(o);let s=o,a=null;if(3&t.type||(a=s,s=r),null!==s&&!(2&t.flags))for(let t=1;t<i.length;t++)Ba(e,s,n[i[t]],a,!1)}}function Eh(e,t){if(ngDevMode&&_e(t.insertBeforeIndex,null,"We expect that insertBeforeIndex is not set"),e.push(t),e.length>1)for(let n=e.length-2;n>=0;n--){const o=e[n];Th(o)||Sh(o,t)&&null===Oh(o)&&Ah(o,t.index)}}function Th(e){return!(64&e.type)}function Sh(e,t){return Th(t)||e.index>t.index}function Oh(e){const t=e.insertBeforeIndex;return Array.isArray(t)?t[0]:t}function Ah(e,t){const n=e.insertBeforeIndex;Array.isArray(n)?n[0]=t:(Qa(xh,Ih),e.insertBeforeIndex=t)}function Nh(e,t){const n=e.data[t];if(null===n||"string"==typeof n)return null;!ngDevMode||n.hasOwnProperty("tViews")||n.hasOwnProperty("currentCaseLViewIndex")||Oe("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: "+n);const o=n.hasOwnProperty("currentCaseLViewIndex")?n:n.value;return ngDevMode&&fn(o),o}function kh(e,t,n){const o=ml(e,n,64,null,null);return Eh(t,o),o}function Ph(e,t){const n=t[e.currentCaseLViewIndex];return null===n?n:n<0?~n:n}function Rh(e){return e>>>17}function jh(e){return(131070&e)>>>1}function Vh(e){return 1&e}let $h=0,Lh=0;function Fh(e,t,n,o){ngDevMode&&Ae(o);const r=n[Lt];let i,s=null;for(let a=0;a<t.length;a++){const c=t[a];if("string"==typeof c){const e=t[++a];null===n[e]&&(ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&Ne(n,e),n[e]=ka(r,c))}else if("number"==typeof c)switch(1&c){case 0:const l=Rh(c);let u,f;if(null===s&&(s=l,i=za(r,o)),l===s?(u=o,f=i):(u=null,f=Wn(n[l])),null!==f){ngDevMode&&Ae(f);const t=jh(c);ngDevMode&&Ee(t,Jt,"Missing ref");const o=n[t];ngDevMode&&Ae(o),Ba(r,f,o,u,!1);const i=Nh(e,t);if(null!==i&&"object"==typeof i){ngDevMode&&fn(i);const t=Ph(i,n);null!==t&&Fh(e,i.create[t],n,n[i.anchorIdx])}}break;case 1:const d=c>>>1,p=t[++a],h=t[++a];Wl(r,qn(d,n),null,null,p,h,null);break;default:if(ngDevMode)throw new fe(700,`Unable to determine the type of mutate operation for "${c}"`)}else switch(c){case _h:const e=t[++a],o=t[++a];null===n[o]&&(ngDevMode&&_e(typeof e,"string",`Expected "${e}" to be a comment node value`),ngDevMode&&ngDevMode.rendererCreateComment++,ngDevMode&&bn(n,o),Ys(n[o]=Ra(r,e),n));break;case wh:const i=t[++a],s=t[++a];null===n[s]&&(ngDevMode&&_e(typeof i,"string",`Expected "${i}" to be an element node tag name`),ngDevMode&&ngDevMode.rendererCreateElement++,ngDevMode&&bn(n,s),Ys(n[s]=ja(r,i,null),n));break;default:ngDevMode&&Oe(`Unable to determine the type of mutate operation for "${c}"`)}}}function Hh(e,t,n,o,r){for(let i=0;i<n.length;i++){const s=n[i],a=n[++i];if(s&r){let r="";for(let s=i+1;s<=i+a;s++){const i=n[s];if("string"==typeof i)r+=i;else if("number"==typeof i)if(i<0)r+=pe(t[o-i]);else{const a=i>>>2;switch(3&i){case 1:const i=n[++s],c=n[++s],l=e.data[a];ngDevMode&&Se(l,"Experting TNode or string"),"string"==typeof l?Wl(t[Lt],t[a],null,l,i,r,c):Al(e,l,t,i,r,t[Lt],c,!1);break;case 0:const u=t[a];null!==u&&Pa(t[Lt],u,r);break;case 2:Bh(e,Nh(e,a),t,r);break;case 3:Uh(e,Nh(e,a),o,t)}}}}else{const r=n[i+1];if(r>0&&!(3&~r)){const n=Nh(e,r>>>2);t[n.currentCaseLViewIndex]<0&&Uh(e,n,o,t)}}i+=a}}function Uh(e,t,n,o){ngDevMode&&Ne(o,t.currentCaseLViewIndex);let r=o[t.currentCaseLViewIndex];if(null!==r){let i=$h;r<0&&(r=o[t.currentCaseLViewIndex]=~r,i=-1),Hh(e,o,t.update[r],n,i)}}function Bh(e,t,n,o){const r=function(e,t){let n=e.cases.indexOf(t);if(-1===n)switch(e.type){case 1:{const o=function(e,t){const n=hh(t)(parseInt(e,10)),o=vh[n];return void 0!==o?o:"other"}(t,Dh);n=e.cases.indexOf(o),-1===n&&"other"!==o&&(n=e.cases.indexOf("other"));break}case 0:n=e.cases.indexOf("other")}return-1===n?null:n}(t,o);if(Ph(t,n)!==r&&(Wh(e,t,n),n[t.currentCaseLViewIndex]=null===r?null:~r,null!==r)){const o=n[t.anchorIdx];o&&(ngDevMode&&Ae(o),Fh(e,t.create[r],n,o))}}function Wh(e,t,n){let o=Ph(t,n);if(null!==o){const r=t.remove[o];for(let t=0;t<r.length;t++){const o=r[t];if(o>0){const e=qn(o,n);null!==e&&nc(n[Lt],e)}else Wh(e,Nh(e,~o),n)}}}function qh(){const e=[];let t,n,o=-1;function r(e,t){o=0;const r=Ph(e,t);null!==r?(ngDevMode&&be(r,0,e.cases.length-1),n=e.remove[r]):n=st}function i(){if(o<n.length){const s=n[o++];if(ngDevMode&&ve(s,"Expecting OpCode number"),s>0){const e=t[s];return ngDevMode&&Ae(e),e}{e.push(o,n);const a=~s,c=t[St].data[a];return ngDevMode&&fn(c),r(c,t),i()}}return 0===e.length?null:(n=e.pop(),o=e.pop(),i())}return function(n,o){for(t=o;e.length;)e.pop();return ngDevMode&&cn(n,o),r(n.value,o),i}}function zh(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const o=t[e++],r=t[e],i=(o&Ch.COMMENT)===Ch.COMMENT,s=(o&Ch.APPEND_EAGERLY)===Ch.APPEND_EAGERLY,a=o>>>Ch.SHIFT;n.push(`lView[${a}] = document.${i?"createComment":"createText"}(${JSON.stringify(r)});`),s&&n.push(`parent.appendChild(lView[${a}]);`)}return n}function Kh(e){const t=new Zh(e||(Array.isArray(this)?this:[]));let n=[];function o(e){const n=e>>>2;switch(3&e){case 0:return`(lView[${n}] as Text).textContent = $$$`;case 1:const e=t.consumeString(),o=t.consumeFunction();return`(lView[${n}] as Element).setAttribute('${e}', ${o?`(${o})($$$)`:"$$$"})`;case 2:return`icuSwitchCase(${n}, $$$)`;case 3:return`icuUpdateCase(${n})`}throw new Error("unexpected OpCode")}for(;t.hasMore();){let e=t.consumeNumber(),r=t.consumeNumber();const i=t.i+r,s=[];let a="";for(;t.i<i;){let e=t.consumeNumberOrString();if("string"==typeof e)a+=e;else if(e<0)a+="${lView[i"+e+"]}";else{const t=o(e);s.push(t.replace("$$$","`"+a+"`")+";"),a=""}}n.push(`if (mask & 0b${e.toString(2)}) { ${s.join(" ")} }`)}return n}function Jh(e){const t=new Zh(e||(Array.isArray(this)?this:[]));let n=[];function o(e){const n=Rh(e),o=jh(e);switch(Vh(e)){case 0:return`(lView[${n}] as Element).appendChild(lView[${r}])`;case 1:return`(lView[${o}] as Element).setAttribute("${t.consumeString()}", "${t.consumeString()}")`}throw new Error("Unexpected OpCode: "+Vh(e))}let r=-1;for(;t.hasMore();){let e=t.consumeNumberStringOrMarker();if(e===_h){const e=t.consumeString();r=t.consumeNumber(),n.push(`lView[${r}] = document.createComment("${e}")`)}else if(e===wh){const e=t.consumeString();r=t.consumeNumber(),n.push(`lView[${r}] = document.createElement("${e}")`)}else if("string"==typeof e)r=t.consumeNumber(),n.push(`lView[${r}] = document.createTextNode("${e}")`);else{if("number"!=typeof e)throw new Error("Unexpected value");{const t=o(e);t&&n.push(t)}}}return n}function Gh(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const o=t[e];o>0?n.push(`remove(lView[${o}])`):n.push(`removeNestedICU(${~o})`)}return n}class Zh{constructor(e){this.i=0,this.codes=e}hasMore(){return this.i<this.codes.length}consumeNumber(){let e=this.codes[this.i++];return ve(e,"expecting number in OpCode"),e}consumeString(){let e=this.codes[this.i++];return we(e,"expecting string in OpCode"),e}consumeFunction(){let e=this.codes[this.i++];if(null===e||"function"==typeof e)return e;throw new Error("expecting function in OpCode")}consumeNumberOrString(){let e=this.codes[this.i++];return"string"==typeof e||ve(e,"expecting number or string in OpCode"),e}consumeNumberStringOrMarker(){let e=this.codes[this.i++];return"string"==typeof e||"number"==typeof e||e==_h||e==wh||ve(e,"expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode"),e}}const Qh=/�(\d+):?\d*�/gi,Yh=/({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi,Xh=/�(\d+)�/,eg=/^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/,tg="�",ng=/�\/?\*(\d+:\d+)�/gi,og=/�(\/?[#*]\d+):?\d*�/gi,rg=/\uE500/g;function ig(e,t,n,o,r,i,s){const a=vl(e,o,1,null);let c=a<<Ch.SHIFT,l=uo();t===l&&(l=null),null===l&&(c|=Ch.APPEND_EAGERLY),s&&(c|=Ch.COMMENT,void 0===xa&&(xa=qh())),r.push(c,null===i?"":i);const u=ml(e,a,s?32:1,null===i?ngDevMode?"{{?}}":"":i,null);Eh(n,u);const f=u.index;return fo(u,!1),null!==l&&t!==l&&function(e,t){ngDevMode&&un(e);let n=e.insertBeforeIndex;null===n?(Qa(xh,Ih),n=e.insertBeforeIndex=[null,t]):(_e(Array.isArray(n),!0,"Expecting array here"),n.push(t))}(l,f),u}function sg(e,t,n,o,r,i,s){const a=s.match(Qh),c=ig(e,t,n,i,o,a?null:s,!1);a&&ag(r,s,c.index,null,0,null)}function ag(e,t,n,o,r,i){ngDevMode&&Te(n,Jt,"Index must be in absolute LView offset");const s=e.length,a=s+1;e.push(null,null);const c=s+2;ngDevMode&&kc(e,Kh);const l=t.split(Qh);let u=0;for(let t=0;t<l.length;t++){const n=l[t];if(1&t){const t=r+parseInt(n,10);e.push(-1-t),u|=lg(t)}else""!==n&&e.push(n)}return e.push(n<<2|(o?1:0)),o&&e.push(o,i),e[s]=u,e[a]=e.length-c,u}function cg(e){let t=0;for(let n=0;n<e.length;n++){const o=e[n];"number"==typeof o&&o<0&&t++}return t}function lg(e){return 1<<Math.min(e,31)}function ug(e){let t,n,o="",r=0,i=!1;for(;null!==(t=ng.exec(e));)i?t[0]===`${tg}/*${n}${tg}`&&(r=t.index,i=!1):(o+=e.substring(r,t.index+t[0].length),n=t[1],i=!0);return ngDevMode&&_e(i,!1,`Tag mismatch: unable to find the end of the sub-template in the translation "${e}"`),o+=e.substr(r),o}function fg(e,t,n,o,r,i){ngDevMode&&Se(r,"ICU expression must be defined");let s=0;const a={type:r.type,currentCaseLViewIndex:vl(e,t,1,null),anchorIdx:i,cases:[],create:[],remove:[],update:[]};!function(e,t,n){e.push(lg(t.mainBinding),2,-1-t.mainBinding,n<<2|2)}(n,r,i),function(e,t,n){const o=e.data[t];ngDevMode&&_e(null===o||o.hasOwnProperty("tViews"),!0,"We expect to get 'null'|'TIcuContainer'"),null===o?e.data[t]=n:(ngDevMode&&Qo(o,32),o.value=n)}(e,i,a);const c=r.values;for(let i=0;i<c.length;i++){const l=c[i],u=[];for(let e=0;e<l.length;e++){const t=l[e];if("string"!=typeof t){const n=u.push(t)-1;l[e]=`\x3c!--�${n}�--\x3e`}}s=hg(e,a,t,n,o,r.cases[i],l.join(""),u)|s}s&&function(e,t,n){e.push(t,1,n<<2|3)}(n,s,i)}function dg(e){const t=[],n=[];let o=1,r=0;const i=pg(e=e.replace(eg,(function(e,t,n){return o="select"===n?0:1,r=parseInt(t.substr(1),10),""})));for(let e=0;e<i.length;){let r=i[e++].trim();1===o&&(r=r.replace(/\s*(?:=)?(\w+)\s*/,"$1")),r.length&&t.push(r);const s=pg(i[e++]);t.length>n.length&&n.push(s)}return{type:o,mainBinding:r,cases:t,values:n}}function pg(e){if(!e)return[];let t=0;const n=[],o=[],r=/[{}]/g;let i;for(r.lastIndex=0;i=r.exec(e);){const r=i.index;if("}"==i[0]){if(n.pop(),0==n.length){const n=e.substring(t,r);eg.test(n)?o.push(dg(n)):o.push(n),t=r+1}}else{if(0==n.length){const n=e.substring(t,r);o.push(n),t=r+1}n.push("{")}}const s=e.substring(t);return o.push(s),o}function hg(e,t,n,o,r,i,s,a){const c=[],l=[],u=[];ngDevMode&&(kc(c,Jh),kc(l,Gh),kc(u,Kh)),t.cases.push(i),t.create.push(c),t.remove.push(l),t.update.push(u);const f=ls(Fn()).getInertBodyElement(s);ngDevMode&&Se(f,"Unable to generate inert body element");const d=Vs(f)||f;return d?gg(e,t,n,o,c,l,u,d,r,a,0):0}function gg(e,t,n,o,r,i,s,a,c,l,u){let f=0,d=a.firstChild;for(;d;){const a=vl(e,n,1,null);switch(d.nodeType){case Node.ELEMENT_NODE:const p=d,h=p.tagName.toLowerCase();if(Ms.hasOwnProperty(h)){vg(r,wh,h,c,a),e.data[a]=h;const g=p.attributes;for(let e=0;e<g.length;e++){const t=g.item(e),n=t.name.toLowerCase();t.value.match(Qh)?Ss.hasOwnProperty(n)?xs[n]?ag(s,t.value,a,t.name,0,hs):Is[n]?ag(s,t.value,a,t.name,0,gs):ag(s,t.value,a,t.name,0,null):ngDevMode&&console.warn(`WARNING: ignoring unsafe attribute value ${n} on element ${h} (see https://g.co/ng/security#xss)`):bg(r,a,t)}f=gg(e,t,n,o,r,i,s,d,a,l,u+1)|f,yg(i,a,u)}break;case Node.TEXT_NODE:const g=d.textContent||"",y=g.match(Qh);vg(r,null,y?"":g,c,a),yg(i,a,u),y&&(f=ag(s,g,a,null,0,null)|f);break;case Node.COMMENT_NODE:const m=Xh.exec(d.textContent||"");if(m){const t=parseInt(m[1],10),s=l[t];vg(r,_h,ngDevMode?`nested ICU ${t}`:"",c,a),fg(e,n,o,c,s,a),mg(i,a,u)}}d=d.nextSibling}return f}function yg(e,t,n){0===n&&e.push(t)}function mg(e,t,n){0===n&&(e.push(~t),e.push(t))}function vg(e,t,n,o,r){var i,s;null!==t&&e.push(t),e.push(n,r,(i=o,s=r,ngDevMode&&Te(i,0,"Missing parent index"),ngDevMode&&Ee(s,0,"Missing ref index"),i<<17|s<<1))}function bg(e,t,n){e.push(t<<1|1,n.name,n.value)}const wg=0,_g=/\[(�.+?�?)\]/,Cg=/\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g,Dg=/({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g,Mg=/{([A-Z0-9_]+)}/g,xg=/�I18N_EXP_(ICU(_\d+)?)�/g,Ig=/\/\*/,Eg=/\d+\:(\d+)/;function Tg(e,t,n=-1){const o=so(),r=io(),i=Jt+e;ngDevMode&&Se(o,"tView should be defined");const s=Yn(o.consts,t),a=uo();o.firstCreatePass&&function(e,t,n,o,r,i){const s=uo(),a=[],c=[],l=[[]];ngDevMode&&(kc(a,zh),kc(c,Kh)),r=function(e,t){if(function(e){return-1===e}(t))return ug(e);{const n=e.indexOf(`:${t}${tg}`)+2+t.toString().length,o=e.search(new RegExp(`${tg}\\/\\*\\d+:${t}${tg}`));return ug(e.substring(n,o))}}(r,i);const u=(f=r,f.replace(rg," ")).split(og);var f;for(let i=0;i<u.length;i++){let f=u[i];if(1&i){const t=47===f.charCodeAt(0),n=f.charCodeAt(t?1:0);ngDevMode&&ke(n,42,35);const o=Jt+Number.parseInt(f.substring(t?2:1));if(t)l.shift(),fo(uo(),!1);else{const t=kh(e,l[0],o);l.unshift([]),fo(t,!0)}}else{const i=pg(f);for(let u=0;u<i.length;u++){let f=i[u];if(1&u){const i=f;if("object"!=typeof i)throw new Error(`Unable to parse ICU expression in "${r}" message.`);const u=ig(e,s,l[0],n,a,ngDevMode?`ICU ${o}:${i.mainBinding}`:"",!0).index;ngDevMode&&Te(u,Jt,"Index must be in absolute LView offset"),fg(e,n,c,t,i,u)}else{const t=f;ngDevMode&&we(t,"Parsed ICU part should be string"),""!==t&&sg(e,s,l[0],a,c,n,t)}}}}e.data[o]={create:a,update:c}}(o,null===a?0:a.index,r,i,s,n);const c=o.data[i],l=Ua(o,a===r[Pt]?null:a,r),u=a&&8&a.type?r[a.index]:null;!function(e,t,n,o){const r=e[Lt];for(let i=0;i<t.length;i++){const s=t[i++],a=t[i],c=(s&Ch.COMMENT)===Ch.COMMENT,l=(s&Ch.APPEND_EAGERLY)===Ch.APPEND_EAGERLY,u=s>>>Ch.SHIFT;let f=e[u];null===f&&(f=e[u]=c?r.createComment(a):ka(r,a)),l&&null!==n&&Ba(r,n,f,o,!1)}}(r,c.create,l,u),Co(!0)}function Sg(){Co(!1)}function Og(e,t,n){Tg(e,t,n),Sg()}function Ag(e,t){const n=so();ngDevMode&&Se(n,"tView should be defined");const o=Yn(n.consts,t);!function(e,t,n){const o=co().index,r=[];if(ngDevMode&&kc(r,Kh),e.firstCreatePass&&null===e.data[t]){for(let e=0;e<n.length;e+=2){const t=n[e],i=n[e+1];if(""!==i){if(Yh.test(i))throw new Error(`ICU expressions are not supported in attributes. Message: "${i}".`);ag(r,i,o,t,cg(r),null)}}e.data[t]=r}}(n,e+Jt,o)}function Ng(e){return yf(io(),wo(),e)&&($h|=1<<Math.min(Lh,31)),Lh++,Ng}function kg(e){!function(e,t,n){if(Lh>0){ngDevMode&&Se(e,"tView should be defined");const o=e.data[n];Hh(e,t,Array.isArray(o)?o:o.update,vo()-Lh-1,$h)}$h=0,Lh=0}(so(),io(),e+Jt)}function Pg(e,t={}){return function(e,t={}){let n=e;if(_g.test(e)){const e={},t=[wg];n=n.replace(Cg,((n,o,r)=>{const i=o||r,s=e[i]||[];if(s.length||(i.split("|").forEach((e=>{const t=e.match(Eg),n=t?parseInt(t[1],10):wg,o=Ig.test(e);s.push([n,o,e])})),e[i]=s),!s.length)throw new Error(`i18n postprocess: unmatched placeholder - ${i}`);const a=t[t.length-1];let c=0;for(let e=0;e<s.length;e++)if(s[e][0]===a){c=e;break}const[l,u,f]=s[c];return u?t.pop():a!==l&&t.push(l),s.splice(c,1),f}))}return Object.keys(t).length?(n=n.replace(Dg,((e,n,o,r,i,s)=>t.hasOwnProperty(o)?`${n}${t[o]}${s}`:e)),n=n.replace(Mg,((e,n)=>t.hasOwnProperty(n)?t[n]:e)),n=n.replace(xg,((e,n)=>{if(t.hasOwnProperty(n)){const o=t[n];if(!o.length)throw new Error(`i18n postprocess: unmatched ICU - ${e} with key: ${n}`);return o.shift()}return e})),n):n}(e,t)}function Rg(e,t,n,o,r){if(e=ce(e),Array.isArray(e))for(let i=0;i<e.length;i++)Rg(e[i],t,n,o,r);else{const i=so(),s=io();let a=Su(e)?e:ce(e.provide),c=Iu(e);const l=co(),u=1048575&l.providerIndexes,f=l.directiveStart,d=l.providerIndexes>>20;if(Su(e)||!e.multi){const o=new Go(c,r,hd),p=$g(a,t,r?u:u+d,f);-1===p?(gr(fr(l,s),i,a),jg(i,e,t.length),t.push(a),l.directiveStart++,l.directiveEnd++,r&&(l.providerIndexes+=1048576),n.push(o),s.push(o)):(n[p]=o,s[p]=o)}else{const p=$g(a,t,u+d,f),h=$g(a,t,u,u+d),g=p>=0&&n[p],y=h>=0&&n[h];if(r&&!y||!r&&!g){gr(fr(l,s),i,a);const u=function(e,t,n,o,r){const i=new Go(e,n,hd);return i.multi=[],i.index=t,i.componentProviders=0,Vg(i,r,o&&!n),i}(r?Fg:Lg,n.length,r,o,c);!r&&y&&(n[h].providerFactory=u),jg(i,e,t.length,0),t.push(a),l.directiveStart++,l.directiveEnd++,r&&(l.providerIndexes+=1048576),n.push(u),s.push(u)}else jg(i,e,p>-1?p:h,Vg(n[r?h:p],c,!r&&o));!r&&o&&y&&n[h].componentProviders++}}}function jg(e,t,n,o){const r=Su(t),i=!!t.useClass;if(r||i){const s=(i?ce(t.useClass):t).prototype.ngOnDestroy;if(s){const i=e.destroyHooks||(e.destroyHooks=[]);if(!r&&t.multi){ngDevMode&&Se(o,"indexInFactory when registering multi factory destroy hook");const e=i.indexOf(n);-1===e?i.push(n,[o,s]):i[e+1].push(o,s)}else i.push(n,s)}}}function Vg(e,t,n){return n&&e.componentProviders++,e.multi.push(t)-1}function $g(e,t,n,o){for(let r=n;r<o;r++)if(t[r]===e)return r;return-1}function Lg(e,t,n,o){return Hg(this.multi,[])}function Fg(e,t,n,o){const r=this.multi;let i;if(this.providerFactory){const e=this.providerFactory.componentProviders,t=Dr(n,n[St],this.providerFactory.index,o);i=t.slice(0,e),Hg(r,i);for(let n=e;n<t.length;n++)i.push(t[n])}else i=[],Hg(r,i);return i}function Hg(e,t){for(let n=0;n<e.length;n++){const o=e[n];t.push(o())}return t}function Ug(e,t=[]){return n=>{n.providersResolver=(n,o)=>function(e,t,n){const o=so();if(o.firstCreatePass){const r=an(e);Rg(n,o.data,o.blueprint,r,!0),Rg(t,o.data,o.blueprint,r,!1)}}(n,o?o(e):e,t)}}class Bg{}class Wg{}class qg{resolveComponentFactory(e){throw function(e){const t=Error(`No component factory found for ${re(e)}. Did you add it to @NgModule.entryComponents?`);return t.ngComponent=e,t}(e)}}class zg{}function Kg(e,t){return new Jg(zn(e,t))}zg.NULL=new qg;class Jg{constructor(e){this.nativeElement=e}}function Gg(e){return e instanceof Jg?e.nativeElement:e}Jg.__NG_ELEMENT_ID__=function(){return Kg(co(),io())},new $r("Renderer2Interceptor");class Zg{}class Qg{}Qg.__NG_ELEMENT_ID__=()=>function(){const e=io(),t=Gn(co().index,e);return function(e){const t=e[Lt];if(ngDevMode&&!Un(t))throw new Error("Cannot inject Renderer2 when the application uses Renderer3!");return t}(tn(t)?t:e)}();class Yg{}Yg.ɵprov=Pe({token:Yg,providedIn:"root",factory:()=>null});class Xg{constructor(e){this.full=e,this.major=e.split(".")[0],this.minor=e.split(".")[1],this.patch=e.split(".").slice(2).join(".")}}const ey=new Xg("13.2.6"),ty={};function ny(e,t,n,o,r=!1){for(;null!==n;){ngDevMode&&Qo(n,63);const i=t[n.index];if(null!==i&&o.push(Wn(i)),nn(i))for(let e=en;e<i.length;e++){const t=i[e],n=t[St].firstChild;null!==n&&ny(t[St],t,n,o)}const s=n.type;if(8&s)ny(e,t,n.child,o);else if(32&s){const e=Ia(n,t);let r;for(;r=e();)o.push(r)}else if(16&s){const e=ec(t,n);if(Array.isArray(e))o.push(...e);else{const n=Ea(t[Wt]);ngDevMode&&_n(n),ny(n[St],n,e,o,!0)}}n=r?n.projectionNext:n.next}return o}class oy{constructor(e,t){this._lView=e,this._cdRefInjectingView=t,this._appRef=null,this._attachedToViewContainer=!1}get rootNodes(){const e=this._lView,t=e[St];return ny(t,e,t.firstChild,[])}get context(){return this._lView[jt]}set context(e){this._lView[jt]=e}get destroyed(){return!(256&~this._lView[Ot])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._attachedToViewContainer){const e=this._lView[At];if(nn(e)){const t=e[8],n=t?t.indexOf(this):-1;n>-1&&(ngDevMode&&_e(n,e.indexOf(this._lView)-en,"An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array."),$a(e,n),ei(t,n))}this._attachedToViewContainer=!1}La(this._lView[St],this._lView)}onDestroy(e){Sl(this._lView[St],this._lView,null,e)}markForCheck(){Xl(this._cdRefInjectingView||this._lView)}detach(){this._lView[Ot]&=-129}reattach(){this._lView[Ot]|=128}detectChanges(){tu(this._lView[St],this._lView,this.context)}checkNoChanges(){!function(e,t,n){yo(!0);try{tu(e,t,n)}finally{yo(!1)}}(this._lView[St],this._lView,this.context)}attachToViewContainerRef(){if(this._appRef){const e=ngDevMode?"This view is already attached directly to the ApplicationRef!":"";throw new fe(902,e)}this._attachedToViewContainer=!0}detachFromAppRef(){var e;this._appRef=null,rc(this._lView[St],e=this._lView,e[Lt],2,null,null)}attachToAppRef(e){if(this._attachedToViewContainer){const e=ngDevMode?"This view is already attached to a ViewContainer!":"";throw new fe(902,e)}this._appRef=e}}class ry extends oy{constructor(e){super(e),this._view=e}detectChanges(){nu(this._view)}checkNoChanges(){!function(e){yo(!0);try{nu(e)}finally{yo(!1)}}(this._view)}get context(){return null}}class iy extends zg{constructor(e){super(),this.ngModule=e}resolveComponentFactory(e){ngDevMode&&dn(e);const t=Mt(e);return new ay(t,this.ngModule)}}function sy(e){const t=[];for(let n in e)if(e.hasOwnProperty(n)){const o=e[n];t.push({propName:o,templateName:n})}return t}class ay extends Wg{constructor(e,t){super(),this.componentDef=e,this.ngModule=t,this.componentType=e.type,this.selector=e.selectors.map(bc).join(","),this.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],this.isBoundToModule=!!t}get inputs(){return sy(this.componentDef.inputs)}get outputs(){return sy(this.componentDef.outputs)}create(e,t,n,o){const r=(o=o||this.ngModule)?function(e,t){return{get:(n,o,r)=>{const i=e.get(n,ty,r);return i!==ty||o===ty?i:t.get(n,o,r)}}}(e,o.injector):e,i=r.get(Zg,Bn),s=r.get(Yg,null),a=i.createRenderer(null,this.componentDef),c=this.componentDef.selectors[0][0]||"div",l=n?Tl(a,n,this.componentDef.encapsulation):ja(i.createRenderer(null,this.componentDef),c,function(e){const t=e.toLowerCase();return"svg"===t?Pn:"math"===t?jn:null}(c)),u=this.componentDef.onPush?576:528,f=Zu(),d=El(0,null,null,1,0,null,null,null,null,null),p=gl(null,d,f,u,null,null,i,a,s,r);let h,g;Oo(p);try{const e=Ju(l,this.componentDef,p,i,a);if(l)if(n)Yo(a,l,["ng-version",ey.full]);else{const{attrs:e,classes:t}=function(e){const t=[],n=[];let o=1,r=2;for(;o<e.length;){let i=e[o];if("string"==typeof i)2===r?""!==i&&t.push(i,e[++o]):8===r&&n.push(i);else{if(!hc(r))break;r=i}o++}return{attrs:t,classes:n}}(this.componentDef.selectors[0]);e&&Yo(a,l,e),t&&t.length>0&&ac(a,l,t.join(" "))}if(g=Kn(d,Jt),void 0!==t){const e=g.projection=[];for(let n=0;n<this.ngContentSelectors.length;n++){const o=t[n];e.push(null!=o?Array.from(o):null)}}h=Gu(e,this.componentDef,p,f,[Qu]),bl(d,p,null)}finally{Ro()}return new cy(this.componentType,h,Kg(g,p),p,g)}}new iy;class cy extends Bg{constructor(e,t,n,o,r){super(),this.location=n,this._rootLView=o,this._tNode=r,this.instance=t,this.hostView=this.changeDetectorRef=new ry(o),this.componentType=e}get injector(){return new Ir(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(e){this.hostView.onDestroy(e)}}function ly(e,t,n,o){return Je((()=>{const r=e;null!==t&&(r.hasOwnProperty("decorators")&&void 0!==r.decorators?r.decorators.push(...t):r.decorators=t),null!==n&&(r.ctorParameters=n),null!==o&&(r.hasOwnProperty("propDecorators")&&void 0!==r.propDecorators?r.propDecorators={...r.propDecorators,...o}:r.propDecorators=o)}))}class uy{}class fy{}const dy=new Map;function py(e){const t=new Set;!function e(n){const o=Et(n,!0),r=o.id;null!==r&&(function(e,t,n){if(t&&t!==n)throw new Error(`Duplicate module registered for ${e} - ${re(t)} vs ${re(t.name)}`)}(r,dy.get(r),n),dy.set(r,n));const i=_a(o.imports);for(const n of i)t.has(n)||(t.add(n),e(n))}(e)}function hy(e){return dy.get(e)||vt[e]}function gy(e,t){return new yy(e,t??null)}class yy extends uy{constructor(e,t){super(),this._parent=t,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new iy(this);const n=Et(e);ngDevMode&&Se(n,`NgModule '${re(e)}' is not a subtype of 'NgModuleType'.`),this._bootstrapComponents=_a(n.bootstrap),this._r3Injector=Du(e,t,[{provide:uy,useValue:this},{provide:zg,useValue:this.componentFactoryResolver}],re(e)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(e)}get(e,t=Ou.THROW_IF_NOT_FOUND,n=We.Default){return e===Ou||e===uy||e===gu?this:this._r3Injector.get(e,t,n)}destroy(){ngDevMode&&Se(this.destroyCbs,"NgModule already destroyed");const e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach((e=>e())),this.destroyCbs=null}onDestroy(e){ngDevMode&&Se(this.destroyCbs,"NgModule already destroyed"),this.destroyCbs.push(e)}}class my extends fy{constructor(e){super(),this.moduleType=e,null!==Et(e)&&py(e)}create(e){return new yy(this.moduleType,e)}}function vy(e,t,n){const o=mo()+e,r=io();return r[o]===wc?hf(r,o,n?t.call(n):t()):gf(r,o)}function by(e,t,n,o){return Sy(io(),mo(),e,t,n,o)}function wy(e,t,n,o,r){return Oy(io(),mo(),e,t,n,o,r)}function _y(e,t,n,o,r,i){return Ay(io(),mo(),e,t,n,o,r,i)}function Cy(e,t,n,o,r,i,s){return Ny(io(),mo(),e,t,n,o,r,i,s)}function Dy(e,t,n,o,r,i,s,a){const c=mo()+e,l=io(),u=bf(l,c,n,o,r,i);return yf(l,c+4,s)||u?hf(l,c+5,a?t.call(a,n,o,r,i,s):t(n,o,r,i,s)):gf(l,c+5)}function My(e,t,n,o,r,i,s,a,c){const l=mo()+e,u=io(),f=bf(u,l,n,o,r,i);return mf(u,l+4,s,a)||f?hf(u,l+6,c?t.call(c,n,o,r,i,s,a):t(n,o,r,i,s,a)):gf(u,l+6)}function xy(e,t,n,o,r,i,s,a,c,l){const u=mo()+e,f=io();let d=bf(f,u,n,o,r,i);return vf(f,u+4,s,a,c)||d?hf(f,u+7,l?t.call(l,n,o,r,i,s,a,c):t(n,o,r,i,s,a,c)):gf(f,u+7)}function Iy(e,t,n,o,r,i,s,a,c,l,u){const f=mo()+e,d=io(),p=bf(d,f,n,o,r,i);return bf(d,f+4,s,a,c,l)||p?hf(d,f+8,u?t.call(u,n,o,r,i,s,a,c,l):t(n,o,r,i,s,a,c,l)):gf(d,f+8)}function Ey(e,t,n,o){return ky(io(),mo(),e,t,n,o)}function Ty(e,t){ngDevMode&&Ne(e,t);const n=e[t];return n===wc?void 0:n}function Sy(e,t,n,o,r,i){const s=t+n;return yf(e,s,r)?hf(e,s+1,i?o.call(i,r):o(r)):Ty(e,s+1)}function Oy(e,t,n,o,r,i,s){const a=t+n;return mf(e,a,r,i)?hf(e,a+2,s?o.call(s,r,i):o(r,i)):Ty(e,a+2)}function Ay(e,t,n,o,r,i,s,a){const c=t+n;return vf(e,c,r,i,s)?hf(e,c+3,a?o.call(a,r,i,s):o(r,i,s)):Ty(e,c+3)}function Ny(e,t,n,o,r,i,s,a,c){const l=t+n;return bf(e,l,r,i,s,a)?hf(e,l+4,c?o.call(c,r,i,s,a):o(r,i,s,a)):Ty(e,l+4)}function ky(e,t,n,o,r,i){let s=t+n,a=!1;for(let t=0;t<r.length;t++)yf(e,s++,r[t])&&(a=!0);return a?hf(e,s,o.apply(i,r)):Ty(e,s)}function Py(e,t){const n=so();let o;const r=e+Jt;n.firstCreatePass?(o=function(e,t){if(t)for(let n=t.length-1;n>=0;n--){const o=t[n];if(e===o.name)return o}if(ngDevMode){const t=io()[Wt][jt],n=t?` in the '${t.constructor.name}' component`:"";throw new fe(-302,`The pipe '${e}' could not be found${n}!`)}}(t,n.pipeRegistry),n.data[r]=o,o.onDestroy&&(n.destroyHooks||(n.destroyHooks=[])).push(r,o.onDestroy)):o=n.data[r];const i=o.factory||(o.factory=Dn(o.type,!0)),s=ze(hd);try{const e=ar(!1),t=i();return ar(e),Ff(n,io(),r,t),t}finally{ze(s)}}function Ry(e,t,n){const o=e+Jt,r=io(),i=Jn(r,o);return Fy(r,o)?Sy(r,mo(),t,i.transform,n,i):i.transform(n)}function jy(e,t,n,o){const r=e+Jt,i=io(),s=Jn(i,r);return Fy(i,r)?Oy(i,mo(),t,s.transform,n,o,s):s.transform(n,o)}function Vy(e,t,n,o,r){const i=e+Jt,s=io(),a=Jn(s,i);return Fy(s,i)?Ay(s,mo(),t,a.transform,n,o,r,a):a.transform(n,o,r)}function $y(e,t,n,o,r,i){const s=e+Jt,a=io(),c=Jn(a,s);return Fy(a,s)?Ny(a,mo(),t,c.transform,n,o,r,i,c):c.transform(n,o,r,i)}function Ly(e,t,n){const o=e+Jt,r=io(),i=Jn(r,o);return Fy(r,o)?ky(r,mo(),t,i.transform,n,i):i.transform.apply(i,n)}function Fy(e,t){return e[St].data[t].pure}class Hy extends o.Subject{constructor(e=!1){super(),this.__isAsync=e}emit(e){super.next(e)}subscribe(e,t,n){let r=e,i=t||(()=>null),s=n;if(e&&"object"==typeof e){const t=e;r=t.next?.bind(t),i=t.error?.bind(t),s=t.complete?.bind(t)}this.__isAsync&&(i=Uy(i),r&&(r=Uy(r)),s&&(s=Uy(s)));const a=super.subscribe({next:r,error:i,complete:s});return e instanceof o.Subscription&&e.add(a),a}}function Uy(e){return t=>{setTimeout(e,void 0,t)}}const By=Hy;function Wy(){return this._results[uf()]()}class qy{constructor(e=!1){this._emitDistinctChangesOnly=e,this.dirty=!0,this._results=[],this._changesDetected=!1,this._changes=null,this.length=0,this.first=void 0,this.last=void 0;const t=uf(),n=qy.prototype;n[t]||(n[t]=Wy)}get changes(){return this._changes||(this._changes=new By)}get(e){return this._results[e]}map(e){return this._results.map(e)}filter(e){return this._results.filter(e)}find(e){return this._results.find(e)}reduce(e,t){return this._results.reduce(e,t)}forEach(e){this._results.forEach(e)}some(e){return this._results.some(e)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(e,t){const n=this;n.dirty=!1;const o=Qr(e);(this._changesDetected=!function(e,t,n){if(e.length!==t.length)return!1;for(let o=0;o<e.length;o++){let r=e[o],i=t[o];if(n&&(r=n(r),i=n(i)),i!==r)return!1}return!0}(n._results,o,t))&&(n._results=o,n.length=o.length,n.last=o[this.length-1],n.first=o[0])}notifyOnChanges(){!this._changes||!this._changesDetected&&this._emitDistinctChangesOnly||this._changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}Symbol.iterator;class zy{}zy.__NG_ELEMENT_ID__=function(){return Gy(co(),io())};const Ky=zy,Jy=class extends Ky{constructor(e,t,n){super(),this._declarationLView=e,this._declarationTContainer=t,this.elementRef=n}createEmbeddedView(e){const t=this._declarationTContainer.tViews,n=gl(this._declarationLView,t,e,16,null,t.declTNode,null,null,null,null),o=this._declarationLView[this._declarationTContainer.index];ngDevMode&&hn(o),n[qt]=o;const r=this._declarationLView[Kt];return null!==r&&(n[Kt]=r.createEmbeddedView(t)),bl(t,n,e),new oy(n)}};function Gy(e,t){return 4&e.type?(ngDevMode&&Se(e.tViews,"TView must be allocated"),new Jy(t,e,Kg(e,t))):null}class Zy{}Zy.__NG_ELEMENT_ID__=function(){return tm(co(),io())};const Qy=Zy,Yy=class extends Qy{constructor(e,t,n){super(),this._lContainer=e,this._hostTNode=t,this._hostLView=n}get element(){return Kg(this._hostTNode,this._hostLView)}get injector(){return new Ir(this._hostTNode,this._hostLView)}get parentInjector(){const e=hr(this._hostTNode,this._hostLView);if(or(e)){const t=ir(e,this._hostLView),n=rr(e);ngDevMode&&Cn(t,n);const o=t[St].data[n+8];return new Ir(o,t)}return new Ir(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(e){const t=Xy(this._lContainer);return null!==t&&t[e]||null}get length(){return this._lContainer.length-en}createEmbeddedView(e,t,n){const o=e.createEmbeddedView(t||{});return this.insert(o,n),o}createComponent(e,t,n,o,r){const i=e&&!Zr(e);let s;if(i)ngDevMode&&_e("object"!=typeof t,!0,"It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)"),s=t;else{ngDevMode&&(Se(Mt(e),"Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator."),_e("number"!=typeof t,!0,"It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead."));const i=t||{};s=i.index,n=i.injector,o=i.projectableNodes,r=i.ngModuleRef}const a=i?e:new ay(Mt(e)),c=n||this.parentInjector;if(!r&&null==a.ngModule){const e=(i?c:this.parentInjector).get(uy,null);e&&(r=e)}const l=a.create(c,o,void 0,r);return this.insert(l.hostView,s),l}insert(e,t){const n=e._lView,o=n[St];if(ngDevMode&&e.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(nn(n[At])){const t=this.indexOf(e);if(-1!==t)this.detach(t);else{const t=n[At];ngDevMode&&_e(nn(t),!0,"An attached view should have its PARENT point to a container.");const o=new Yy(t,t[Pt],t[At]);o.detach(o.indexOf(e))}}const r=this._adjustIndex(t),i=this._lContainer;!function(e,t,n,o){ngDevMode&&yn(t),ngDevMode&&hn(n);const r=en+o,i=n.length;o>0&&(n[r-1][Nt]=t),o<i-en?(t[Nt]=n[r],Xr(n,en+o,t)):(n.push(t),t[Nt]=null),t[At]=n;const s=t[qt];null!==s&&n!==s&&function(e,t){ngDevMode&&Se(t,"LView required"),ngDevMode&&hn(e);const n=e[Xt],o=t[At];ngDevMode&&hn(o);const r=o[At][Wt];ngDevMode&&Se(r,"Missing insertedComponentLView");const i=t[Wt];ngDevMode&&Se(i,"Missing declaredComponentLView"),i!==r&&(e[Qt]=!0),null===n?e[Xt]=[t]:n.push(t)}(s,t);const a=t[Kt];null!==a&&a.insertView(e),t[Ot]|=128}(o,n,i,r);const s=tc(r,i),a=n[Lt],c=za(a,i[Yt]);return null!==c&&function(e,t,n,o,r,i){o[Tt]=r,o[Pt]=t,rc(e,o,n,1,r,i)}(o,i[Pt],a,n,c,s),e.attachToViewContainerRef(),Xr(em(i),r,e),e}move(e,t){if(ngDevMode&&e.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(e,t)}indexOf(e){const t=Xy(this._lContainer);return null!==t?t.indexOf(e):-1}remove(e){const t=this._adjustIndex(e,-1),n=$a(this._lContainer,t);n&&(ei(em(this._lContainer),t),La(n[St],n))}detach(e){const t=this._adjustIndex(e,-1),n=$a(this._lContainer,t);return n&&null!=ei(em(this._lContainer),t)?new oy(n):null}_adjustIndex(e,t=0){return null==e?this.length+t:(ngDevMode&&(Ee(e,-1,`ViewRef index must be positive, got ${e}`),xe(e,this.length+1+t,"index")),e)}};function Xy(e){return e[8]}function em(e){return e[8]||(e[8]=[])}function tm(e,t){let n;ngDevMode&&Qo(e,15);const o=t[e.index];if(nn(o))n=o;else{let r;if(8&e.type)r=Wn(o);else{const n=t[Lt];ngDevMode&&ngDevMode.rendererCreateComment++,r=n.createComment(ngDevMode?"container":"");const o=zn(e,t);Ba(n,za(n,o),r,function(e,t){return Un(e)?e.nextSibling(t):t.nextSibling}(n,o),!1)}t[e.index]=n=Jl(o,t,r,e),Yl(t,n)}return new Yy(n,e,t)}class nm{constructor(e){this.queryList=e,this.matches=null}clone(){return new nm(this.queryList)}setDirty(){this.queryList.setDirty()}}class om{constructor(e=[]){this.queries=e}createEmbeddedView(e){const t=e.queries;if(null!==t){const n=null!==e.contentQueries?e.contentQueries[0]:t.length,o=[];for(let e=0;e<n;e++){const n=t.getByIndex(e),r=this.queries[n.indexInDeclarationView];o.push(r.clone())}return new om(o)}return null}insertView(e){this.dirtyQueriesWithMatches(e)}detachView(e){this.dirtyQueriesWithMatches(e)}dirtyQueriesWithMatches(e){for(let t=0;t<this.queries.length;t++)null!==mm(e,t).matches&&this.queries[t].setDirty()}}class rm{constructor(e,t,n=null){this.predicate=e,this.flags=t,this.read=n}}class im{constructor(e=[]){this.queries=e}elementStart(e,t){ngDevMode&&mn(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].elementStart(e,t)}elementEnd(e){for(let t=0;t<this.queries.length;t++)this.queries[t].elementEnd(e)}embeddedTView(e){let t=null;for(let n=0;n<this.length;n++){const o=null!==t?t.length:0,r=this.getByIndex(n).embeddedTView(e,o);r&&(r.indexInDeclarationView=n,null!==t?t.push(r):t=[r])}return null!==t?new im(t):null}template(e,t){ngDevMode&&mn(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].template(e,t)}getByIndex(e){return ngDevMode&&Ne(this.queries,e),this.queries[e]}get length(){return this.queries.length}track(e){this.queries.push(e)}}class sm{constructor(e,t=-1){this.metadata=e,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=t}elementStart(e,t){this.isApplyingToNode(t)&&this.matchTNode(e,t)}elementEnd(e){this._declarationNodeIndex===e.index&&(this._appliesToNextNode=!1)}template(e,t){this.elementStart(e,t)}embeddedTView(e,t){return this.isApplyingToNode(e)?(this.crossesNgTemplate=!0,this.addMatch(-e.index,t),new sm(this.metadata)):null}isApplyingToNode(e){if(this._appliesToNextNode&&1&~this.metadata.flags){const t=this._declarationNodeIndex;let n=e.parent;for(;null!==n&&8&n.type&&n.index!==t;)n=n.parent;return t===(null!==n?n.index:-1)}return this._appliesToNextNode}matchTNode(e,t){const n=this.metadata.predicate;if(Array.isArray(n))for(let o=0;o<n.length;o++){const r=n[o];this.matchTNodeWithReadOption(e,t,am(t,r)),this.matchTNodeWithReadOption(e,t,Cr(t,e,r,!1,!1))}else n===zy?4&t.type&&this.matchTNodeWithReadOption(e,t,-1):this.matchTNodeWithReadOption(e,t,Cr(t,e,n,!1,!1))}matchTNodeWithReadOption(e,t,n){if(null!==n){const o=this.metadata.read;if(null!==o)if(o===Jg||o===Zy||o===zy&&4&t.type)this.addMatch(t.index,-2);else{const n=Cr(t,e,o,!1,!1);null!==n&&this.addMatch(t.index,n)}else this.addMatch(t.index,n)}}addMatch(e,t){null===this.matches?this.matches=[e,t]:this.matches.push(e,t)}}function am(e,t){const n=e.localNames;if(null!==n)for(let e=0;e<n.length;e+=2)if(n[e]===t)return n[e+1];return null}function cm(e,t,n,o){return-1===n?function(e,t){return 11&e.type?Kg(e,t):4&e.type?Gy(e,t):null}(t,e):-2===n?function(e,t,n){return n===Jg?Kg(t,e):n===zy?Gy(t,e):n===Zy?(ngDevMode&&Qo(t,15),tm(t,e)):void(ngDevMode&&Oe(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${re(n)}.`))}(e,t,o):Dr(e,e[St],n,t)}function lm(e,t,n,o){const r=t[Kt].queries[o];if(null===r.matches){const o=e.data,i=n.matches,s=[];for(let e=0;e<i.length;e+=2){const r=i[e];if(r<0)s.push(null);else{ngDevMode&&Ne(o,r);const a=o[r];s.push(cm(t,a,i[e+1],n.metadata.read))}}r.matches=s}return r.matches}function um(e,t,n,o){const r=e.queries.getByIndex(n),i=r.matches;if(null!==i){const s=lm(e,t,r,n);for(let e=0;e<i.length;e+=2){const n=i[e];if(n>0)o.push(s[e/2]);else{const r=i[e+1],s=t[-n];ngDevMode&&hn(s);for(let e=en;e<s.length;e++){const t=s[e];t[qt]===t[At]&&um(t[St],t,r,o)}if(null!==s[Xt]){const e=s[Xt];for(let t=0;t<e.length;t++){const n=e[t];um(n[St],n,r,o)}}}}}return o}function fm(e){const t=io(),n=so(),o=Io();Eo(o+1);const r=mm(n,o);if(e.dirty&&Zn(t)===!(2&~r.metadata.flags)){if(null===r.matches)e.reset([]);else{const i=r.crossesNgTemplate?um(n,t,o,[]):lm(n,t,r,o);e.reset(i,Gg),e.notifyOnChanges()}return!0}return!1}function dm(e,t,n){ngDevMode&&ve(t,"Expecting flags");const o=so();o.firstCreatePass&&(ym(o,new rm(e,t,n),-1),2&~t||(o.staticViewQueries=!0)),gm(o,io(),t)}function pm(e,t,n,o){ngDevMode&&ve(n,"Expecting flags");const r=so();if(r.firstCreatePass){const i=co();ym(r,new rm(t,n,o),i.index),function(e,t){const n=e.contentQueries||(e.contentQueries=[]);t!==(n.length?n[n.length-1]:-1)&&n.push(e.queries.length-1,t)}(r,e),2&~n||(r.staticContentQueries=!0)}gm(r,io(),n)}function hm(){return e=io(),t=Io(),ngDevMode&&Se(e[Kt],"LQueries should be defined when trying to load a query"),ngDevMode&&Ne(e[Kt].queries,t),e[Kt].queries[t].queryList;var e,t}function gm(e,t,n){const o=new qy(!(4&~n));Sl(e,t,o,o.destroy),null===t[Kt]&&(t[Kt]=new om),t[Kt].queries.push(new nm(o))}function ym(e,t,n){null===e.queries&&(e.queries=new im),e.queries.track(new sm(t,n))}function mm(e,t){return ngDevMode&&Se(e.queries,"TQueries must be defined to retrieve a TQuery"),e.queries.getByIndex(t)}function vm(e,t){return Gy(e,t)}const bm={ɵɵattribute:wf,ɵɵattributeInterpolate1:Of,ɵɵattributeInterpolate2:Af,ɵɵattributeInterpolate3:Nf,ɵɵattributeInterpolate4:kf,ɵɵattributeInterpolate5:Pf,ɵɵattributeInterpolate6:Rf,ɵɵattributeInterpolate7:jf,ɵɵattributeInterpolate8:Vf,ɵɵattributeInterpolateV:$f,ɵɵdefineComponent:ht,ɵɵdefineDirective:Ct,ɵɵdefineInjectable:Pe,ɵɵdefineInjector:je,ɵɵdefineNgModule:bt,ɵɵdefinePipe:Dt,ɵɵdirectiveInject:hd,ɵɵgetInheritedFactory:Er,ɵɵinject:_i,ɵɵinjectAttribute:Sr,ɵɵinvalidFactory:gd,ɵɵinvalidFactoryDep:Ci,ɵɵtemplateRefExtractor:vm,ɵɵNgOnChangesFeature:xn,ɵɵProvidersFeature:Ug,ɵɵCopyDefinitionFeature:cf,ɵɵInheritDefinitionFeature:ef,ɵɵnextContext:kd,ɵɵnamespaceHTML:Ho,ɵɵnamespaceMathML:Fo,ɵɵnamespaceSVG:Lo,ɵɵenableBindings:oo,ɵɵdisableBindings:ro,ɵɵelementStart:vd,ɵɵelementEnd:bd,ɵɵelement:wd,ɵɵelementContainerStart:_d,ɵɵelementContainerEnd:Cd,ɵɵelementContainer:Dd,ɵɵpureFunction0:vy,ɵɵpureFunction1:by,ɵɵpureFunction2:wy,ɵɵpureFunction3:_y,ɵɵpureFunction4:Cy,ɵɵpureFunction5:Dy,ɵɵpureFunction6:My,ɵɵpureFunction7:xy,ɵɵpureFunction8:Iy,ɵɵpureFunctionV:Ey,ɵɵgetCurrentView:Md,ɵɵrestoreView:ao,ɵɵlistener:Td,ɵɵprojection:jd,ɵɵsyntheticHostProperty:ah,ɵɵsyntheticHostListener:Sd,ɵɵpipeBind1:Ry,ɵɵpipeBind2:jy,ɵɵpipeBind3:Vy,ɵɵpipeBind4:$y,ɵɵpipeBindV:Ly,ɵɵprojectionDef:Rd,ɵɵhostProperty:sh,ɵɵproperty:yd,ɵɵpropertyInterpolate:Vd,ɵɵpropertyInterpolate1:$d,ɵɵpropertyInterpolate2:Ld,ɵɵpropertyInterpolate3:Fd,ɵɵpropertyInterpolate4:Hd,ɵɵpropertyInterpolate5:Ud,ɵɵpropertyInterpolate6:Bd,ɵɵpropertyInterpolate7:Wd,ɵɵpropertyInterpolate8:qd,ɵɵpropertyInterpolateV:zd,ɵɵpipe:Py,ɵɵqueryRefresh:fm,ɵɵviewQuery:dm,ɵɵloadQuery:hm,ɵɵcontentQuery:pm,ɵɵreference:Hf,ɵɵclassMap:lp,ɵɵclassMapInterpolate1:kp,ɵɵclassMapInterpolate2:Pp,ɵɵclassMapInterpolate3:Rp,ɵɵclassMapInterpolate4:jp,ɵɵclassMapInterpolate5:Vp,ɵɵclassMapInterpolate6:$p,ɵɵclassMapInterpolate7:Lp,ɵɵclassMapInterpolate8:Fp,ɵɵclassMapInterpolateV:Hp,ɵɵstyleMap:ap,ɵɵstyleMapInterpolate1:Up,ɵɵstyleMapInterpolate2:Bp,ɵɵstyleMapInterpolate3:Wp,ɵɵstyleMapInterpolate4:qp,ɵɵstyleMapInterpolate5:zp,ɵɵstyleMapInterpolate6:Kp,ɵɵstyleMapInterpolate7:Jp,ɵɵstyleMapInterpolate8:Gp,ɵɵstyleMapInterpolateV:Zp,ɵɵstyleProp:ip,ɵɵstylePropInterpolate1:Qp,ɵɵstylePropInterpolate2:Yp,ɵɵstylePropInterpolate3:Xp,ɵɵstylePropInterpolate4:eh,ɵɵstylePropInterpolate5:th,ɵɵstylePropInterpolate6:nh,ɵɵstylePropInterpolate7:oh,ɵɵstylePropInterpolate8:rh,ɵɵstylePropInterpolateV:ih,ɵɵclassProp:sp,ɵɵadvance:_c,ɵɵtemplate:Lf,ɵɵtext:Cp,ɵɵtextInterpolate:Dp,ɵɵtextInterpolate1:Mp,ɵɵtextInterpolate2:xp,ɵɵtextInterpolate3:Ip,ɵɵtextInterpolate4:Ep,ɵɵtextInterpolate5:Tp,ɵɵtextInterpolate6:Sp,ɵɵtextInterpolate7:Op,ɵɵtextInterpolate8:Ap,ɵɵtextInterpolateV:Np,ɵɵi18n:Og,ɵɵi18nAttributes:Ag,ɵɵi18nExp:Ng,ɵɵi18nStart:Tg,ɵɵi18nEnd:Sg,ɵɵi18nApply:kg,ɵɵi18nPostprocess:Pg,ɵɵresolveWindow:ma,ɵɵresolveDocument:va,ɵɵresolveBody:ba,ɵɵsetComponentScope:gt,ɵɵsetNgModuleScope:wt,ɵɵsanitizeHtml:Ls,ɵɵsanitizeStyle:Fs,ɵɵsanitizeResourceUrl:Us,ɵɵsanitizeScript:Bs,ɵɵsanitizeUrl:Hs,ɵɵsanitizeUrlOrResourceUrl:zs,ɵɵtrustConstantHtml:Ws,ɵɵtrustConstantResourceUrl:qs,forwardRef:ae,resolveForwardRef:ce};let wm=null;function _m(){wm=null}const Cm=[];let Dm=!1;function Mm(){if(!Dm){Dm=!0;try{for(let e=Cm.length-1;e>=0;e--){const{moduleType:t,ngModule:n}=Cm[e];n.declarations&&n.declarations.every(xm)&&(Cm.splice(e,1),Rm(t,n))}}finally{Dm=!1}}}function xm(e){return Array.isArray(e)?e.every(xm):!!ce(e)}function Im(e,t={}){Em(e,t),function(e,t){Cm.push({moduleType:e,ngModule:t})}(e,t)}function Em(e,t,n=!1){ngDevMode&&Se(e,"Required value moduleType"),ngDevMode&&Se(t,"Required value ngModule");const o=Qr(t.declarations||st);let r=null;Object.defineProperty(e,ut,{configurable:!0,get:()=>{if(null===r){if(ngDevMode&&t.imports&&t.imports.indexOf(e)>-1)throw new Error(`'${he(e)}' module can't import itself`);const n=Jr({usage:0,kind:"NgModule",type:e});r=n.compileNgModule(bm,`ng:///${e.name}/ɵmod.js`,{type:e,bootstrap:Qr(t.bootstrap||st).map(ce),declarations:o.map(ce),imports:Qr(t.imports||st).map(ce).map($m),exports:Qr(t.exports||st).map(ce).map($m),schemas:t.schemas?Qr(t.schemas):null,id:t.id||null}),r.schemas||(r.schemas=[])}return r}});let i=null;Object.defineProperty(e,ft,{get:()=>{if(null===i){const t=Jr({usage:0,kind:"NgModule",type:e});i=t.compileFactory(bm,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,deps:ki(e),target:t.FactoryTarget.NgModule,typeArgumentCount:0})}return i},configurable:!!ngDevMode});let s=null;Object.defineProperty(e,He,{get:()=>{if(null===s){ngDevMode&&Tm(e,n);const o={name:e.name,type:e,providers:t.providers||st,imports:[(t.imports||st).map(ce),(t.exports||st).map(ce)]},r=Jr({usage:0,kind:"NgModule",type:e});s=r.compileInjector(bm,`ng:///${e.name}/ɵinj.js`,o)}return s},configurable:!!ngDevMode})}function Tm(e,t,n){if(Nm.get(e))return;let o;if(Nm.set(e,!0),e=ce(e),n){if(o=Et(e),!o)throw new Error(`Unexpected value '${e.name}' imported by the module '${n.name}'. Please add an @NgModule annotation.`)}else o=Et(e,!0);const r=[],i=_a(o.declarations),s=_a(o.imports);Qr(s).map(Sm).forEach((t=>{f(t,e),Tm(t,!1,e)}));const a=_a(o.exports);i.forEach((function(t){Mt(t=ce(t))||xt(t)||It(t)||r.push(`Unexpected value '${he(t)}' declared by the module '${he(e)}'. Please add a @Pipe/@Directive/@Component annotation.`)})),i.forEach((function(e){const t=xt(e=ce(e));!Mt(e)&&t&&0==t.selectors.length&&r.push(`Directive ${he(e)} has no selector, please add it!`)}));const c=[...i.map(ce),...Qr(s.map(Pm)).map(ce)];a.forEach((function(t){const n=(Mt(t=ce(t))?"component":xt(t)&&"directive")||It(t)&&"pipe";n&&-1===c.lastIndexOf(t)&&r.push(`Can't export ${n} ${he(t)} from ${he(e)} as it was neither declared nor imported!`)})),i.forEach((n=>function(t,n){t=ce(t);const o=Am.get(t);if(o&&o!==e){if(!n){const n=[o,e].map(he).sort();r.push(`Type ${he(t)} is part of the declarations of 2 modules: ${n[0]} and ${n[1]}! Please consider moving ${he(t)} to a higher module that imports ${n[0]} and ${n[1]}. You can also create a new NgModule that exports and includes ${he(t)} then import that NgModule in ${n[0]} and ${n[1]}.`)}}else Am.set(t,e)}(n,t))),i.forEach((function(e){if(Mt(e=ce(e))){const t=Om(e,"Component");t&&t.entryComponents&&Yr(t.entryComponents,u)}}));const l=Om(e,"NgModule");if(l&&(l.imports&&Qr(l.imports).map(Sm).forEach((t=>{f(t,e),Tm(t,!1,e)})),l.bootstrap&&Yr(l.bootstrap,(function(e){Mt(e=ce(e))||r.push(`${he(e)} cannot be used as an entry component.`)})),l.bootstrap&&Yr(l.bootstrap,u),l.entryComponents&&Yr(l.entryComponents,u)),r.length)throw new Error(r.join("\n"));function u(e){e=ce(e),Am.get(e)||r.push(`Component ${he(e)} is not part of any NgModule or the module has not been imported into your module.`)}function f(e,t){if(Mt(e=ce(e))||xt(e))throw new Error(`Unexpected directive '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`);if(It(e))throw new Error(`Unexpected pipe '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`)}}function Sm(e){return(e=ce(e)).ngModule||e}function Om(e,t){let n=null;return o(e.__annotations__),o(e.decorators),n;function o(e){e&&e.forEach(r)}function r(e){n||(Object.getPrototypeOf(e).ngMetadataName==t?n=e:e.type&&Object.getPrototypeOf(e.type).ngMetadataName==t&&(n=e.args[0]))}}let Am=new WeakMap,Nm=new WeakMap;function km(){Am=new WeakMap,Nm=new WeakMap,Cm.length=0}function Pm(e){return[...Qr(_a(Et(e=ce(e),!0).exports).map((e=>Et(e)?(Tm(e,!1),Pm(e)):e)))]}function Rm(e,t){const n=Qr(t.declarations||st),o=Vm(e);n.forEach((t=>{t.hasOwnProperty(at)?jm(Mt(t),o):t.hasOwnProperty(ct)||t.hasOwnProperty(lt)||(t.ngSelectorScope=e)}))}function jm(e,t){e.directiveDefs=()=>Array.from(t.compilation.directives).map((e=>e.hasOwnProperty(at)?Mt(e):xt(e))).filter((e=>!!e)),e.pipeDefs=()=>Array.from(t.compilation.pipes).map((e=>It(e))),e.schemas=t.schemas,e.tView=null}function Vm(e){if(!Lm(e))throw new Error(`${e.name} does not have a module def (ɵmod property)`);const t=Et(e);if(null!==t.transitiveCompileScopes)return t.transitiveCompileScopes;const n={schemas:t.schemas||null,compilation:{directives:new Set,pipes:new Set},exported:{directives:new Set,pipes:new Set}};return _a(t.imports).forEach((e=>{const t=e;if(!Lm(t))throw new Error(`Importing ${t.name} which does not have a ɵmod property`);const o=Vm(t);o.exported.directives.forEach((e=>n.compilation.directives.add(e))),o.exported.pipes.forEach((e=>n.compilation.pipes.add(e)))})),_a(t.declarations).forEach((e=>{It(e)?n.compilation.pipes.add(e):n.compilation.directives.add(e)})),_a(t.exports).forEach((e=>{const t=e;if(Lm(t)){const e=Vm(t);e.exported.directives.forEach((e=>{n.compilation.directives.add(e),n.exported.directives.add(e)})),e.exported.pipes.forEach((e=>{n.compilation.pipes.add(e),n.exported.pipes.add(e)}))}else It(t)?n.exported.pipes.add(t):n.exported.directives.add(t)})),t.transitiveCompileScopes=n,n}function $m(e){return function(e){return void 0!==e.ngModule}(e)?e.ngModule:e}function Lm(e){return!!Et(e)}let Fm=0;function Hm(e,t){("undefined"==typeof ngDevMode||ngDevMode)&&rt();let n=null;!function(e,t){$i(t)&&(ji.set(e,t),Vi.add(e))}(e,t),Wm(e,t),Object.defineProperty(e,at,{get:()=>{if(null===n){const o=Jr({usage:0,kind:"component",type:e});if($i(t)){const n=[`Component '${e.name}' is not resolved:`];throw t.templateUrl&&n.push(` - templateUrl: ${t.templateUrl}`),t.styleUrls&&t.styleUrls.length&&n.push(` - styleUrls: ${JSON.stringify(t.styleUrls)}`),n.push("Did you run and wait for 'resolveComponentResources()'?"),new Error(n.join("\n"))}const r=wm;let i=t.preserveWhitespaces;void 0===i&&(i=null!==r&&void 0!==r.preserveWhitespaces&&r.preserveWhitespaces);let s=t.encapsulation;void 0===s&&(s=null!==r&&void 0!==r.defaultEncapsulation?r.defaultEncapsulation:Qe.Emulated);const a=t.templateUrl||`ng:///${e.name}/template.html`,c={...zm(e,t),typeSourceSpan:o.createParseSourceSpan("Component",e.name,a),template:t.template||"",preserveWhitespaces:i,styles:t.styles||st,animations:t.animations,directives:[],changeDetection:t.changeDetection,pipes:new Map,encapsulation:s,interpolation:t.interpolation,viewProviders:t.viewProviders||null};Fm++;try{c.usesInheritance&&Km(e),n=o.compileComponent(bm,a,c)}finally{Fm--}if(0===Fm&&Mm(),void 0!==e.ngSelectorScope){const t=Vm(e.ngSelectorScope);jm(n,t)}}return n},configurable:!!ngDevMode})}function Um(e,t){let n=null;Wm(e,t||{}),Object.defineProperty(e,ct,{get:()=>{if(null===n){const o=Bm(e,t||{}),r=Jr({usage:0,kind:"directive",type:e});n=r.compileDirective(bm,o.sourceMapUrl,o.metadata)}return n},configurable:!!ngDevMode})}function Bm(e,t){const n=e&&e.name,o=`ng:///${n}/ɵdir.js`,r=Jr({usage:0,kind:"directive",type:e}),i=zm(e,t);return i.typeSourceSpan=r.createParseSourceSpan("Directive",n,o),i.usesInheritance&&Km(e),{metadata:i,sourceMapUrl:o}}function Wm(e,t){let n=null;Object.defineProperty(e,ft,{get:()=>{if(null===n){const o=Bm(e,t),r=Jr({usage:0,kind:"directive",type:e});n=r.compileFactory(bm,`ng:///${e.name}/ɵfac.js`,{name:o.metadata.name,type:o.metadata.type,typeArgumentCount:0,deps:ki(e),target:r.FactoryTarget.Directive})}return n},configurable:!!ngDevMode})}function qm(e){return Object.getPrototypeOf(e.prototype)===Object.prototype}function zm(e,t){const n=Ni(),o=n.ownPropMetadata(e);return{name:e.name,type:e,selector:void 0!==t.selector?t.selector:null,host:t.host||it,propMetadata:o,inputs:t.inputs||st,outputs:t.outputs||st,queries:Gm(e,o,Zm),lifecycle:{usesOnChanges:n.hasLifecycleHook(e,"ngOnChanges")},typeSourceSpan:null,usesInheritance:!qm(e),exportAs:(r=t.exportAs,void 0===r?null:Xm(r)),providers:t.providers||null,viewQueries:Gm(e,o,Qm)};var r}function Km(e){const t=Object.prototype;let n=Object.getPrototypeOf(e.prototype).constructor;for(;n&&n!==t;)xt(n)||Mt(n)||!tv(n)||Um(n,null),n=Object.getPrototypeOf(n)}function Jm(e,t){return{propertyName:e,predicate:(n=t.selector,"string"==typeof n?Xm(n):ce(n)),descendants:t.descendants,first:t.first,read:t.read?t.read:null,static:!!t.static,emitDistinctChangesOnly:!!t.emitDistinctChangesOnly};var n}function Gm(e,t,n){const o=[];for(const r in t)if(t.hasOwnProperty(r)){const i=t[r];i.forEach((t=>{if(n(t)){if(!t.selector)throw new Error(`Can't construct a query for the property "${r}" of "${he(e)}" since the query selector wasn't defined.`);if(i.some(Ym))throw new Error("Cannot combine @Input decorators with query decorators");o.push(Jm(r,t))}}))}return o}function Zm(e){const t=e.ngMetadataName;return"ContentChild"===t||"ContentChildren"===t}function Qm(e){const t=e.ngMetadataName;return"ViewChild"===t||"ViewChildren"===t}function Ym(e){return"Input"===e.ngMetadataName}function Xm(e){return e.split(",").map((e=>e.trim()))}const ev=["ngOnChanges","ngOnInit","ngOnDestroy","ngDoCheck","ngAfterViewInit","ngAfterViewChecked","ngAfterContentInit","ngAfterContentChecked"];function tv(e){const t=Ni();if(ev.some((n=>t.hasLifecycleHook(e,n))))return!0;const n=t.propMetadata(e);for(const e in n){const t=n[e];for(let e=0;e<t.length;e++){const n=t[e],o=n.ngMetadataName;if(Ym(n)||Zm(n)||Qm(n)||"Output"===o||"HostBinding"===o||"HostListener"===o)return!0}}return!1}function nv(e,t){let n=null,o=null;Object.defineProperty(e,ft,{get:()=>{if(null===o){const n=ov(e,t),r=Jr({usage:0,kind:"pipe",type:n.type});o=r.compileFactory(bm,`ng:///${n.name}/ɵfac.js`,{name:n.name,type:n.type,typeArgumentCount:0,deps:ki(e),target:r.FactoryTarget.Pipe})}return o},configurable:!!ngDevMode}),Object.defineProperty(e,lt,{get:()=>{if(null===n){const o=ov(e,t),r=Jr({usage:0,kind:"pipe",type:o.type});n=r.compilePipe(bm,`ng:///${o.name}/ɵpipe.js`,o)}return n},configurable:!!ngDevMode})}function ov(e,t){return{type:e,name:e.name,pipeName:t.name,pure:void 0===t.pure||t.pure}}const rv=kr("Directive",((e={})=>e),void 0,void 0,((e,t)=>Um(e,t))),iv=kr("Component",((e={})=>({changeDetection:Ge.Default,...e})),rv,void 0,((e,t)=>Hm(e,t))),sv=kr("Pipe",(e=>({pure:!0,...e})),void 0,void 0,((e,t)=>nv(e,t))),av=jr("Input",(e=>({bindingPropertyName:e}))),cv=jr("Output",(e=>({bindingPropertyName:e}))),lv=jr("HostBinding",(e=>({hostPropertyName:e}))),uv=jr("HostListener",((e,t)=>({eventName:e,args:t}))),fv=kr("NgModule",(e=>e),void 0,void 0,((e,t)=>Im(e,t)));function dv(...e){}const pv=new $r("Application Initializer");class hv{constructor(e){this.appInits=e,this.resolve=dv,this.reject=dv,this.initialized=!1,this.done=!1,this.donePromise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}runInitializers(){if(this.initialized)return;const e=[],t=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let t=0;t<this.appInits.length;t++){const n=this.appInits[t]();if(xd(n))e.push(n);else if(Ed(n)){const t=new Promise(((e,t)=>{n.subscribe({complete:e,error:t})}));e.push(t)}}Promise.all(e).then((()=>{t()})).catch((e=>{this.reject(e)})),0===e.length&&t(),this.initialized=!0}}hv.ɵfac=function(e){return new(e||hv)(_i(pv,8))},hv.ɵprov=Pe({token:hv,factory:hv.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&ly(hv,[{type:zf,args:[{providedIn:"root"}]}],(function(){return[{type:void 0,decorators:[{type:Ii,args:[pv]},{type:Ei}]}]}),null);const gv=new $r("AppId",{providedIn:"root",factory:yv});function yv(){return`${vv()}${vv()}${vv()}`}const mv={provide:gv,useFactory:yv,deps:[]};function vv(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const bv=new $r("Platform Initializer"),wv=new $r("Platform ID"),_v=new $r("appBootstrapListener"),Cv=new $r("Application Packages Root URL");class Dv{log(e){console.log(e)}warn(e){console.warn(e)}}Dv.ɵfac=function(e){return new(e||Dv)},Dv.ɵprov=Pe({token:Dv,factory:Dv.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&ly(Dv,[{type:zf}],null,null);const Mv=new $r("LocaleId",{providedIn:"root",factory:()=>Di(Mv,We.Optional|We.SkipSelf)||("undefined"!=typeof ngI18nClosureMode&&ngI18nClosureMode&&"undefined"!=typeof goog&&"en"!==goog.getLocale()?goog.getLocale():"undefined"!=typeof $localize&&$localize.locale||bh)}),xv=new $r("DefaultCurrencyCode",{providedIn:"root",factory:()=>"USD"}),Iv=new $r("Translations"),Ev=new $r("TranslationsFormat");var Tv;!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Ignore=2]="Ignore"}(Tv||(Tv={}));class Sv{constructor(e,t){this.ngModuleFactory=e,this.componentFactories=t}}class Ov{compileModuleSync(e){return new my(e)}compileModuleAsync(e){return Promise.resolve(this.compileModuleSync(e))}compileModuleAndAllComponentsSync(e){const t=this.compileModuleSync(e),n=_a(Et(e).declarations).reduce(((e,t)=>{const n=Mt(t);return n&&e.push(new ay(n)),e}),[]);return new Sv(t,n)}compileModuleAndAllComponentsAsync(e){return Promise.resolve(this.compileModuleAndAllComponentsSync(e))}clearCache(){}clearCacheFor(e){}getModuleId(e){}}Ov.ɵfac=function(e){return new(e||Ov)},Ov.ɵprov=Pe({token:Ov,factory:Ov.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&ly(Ov,[{type:zf,args:[{providedIn:"root"}]}],null,null);const Av=new $r("compilerOptions");class Nv{}const kv=Promise.resolve(0);function Pv(e){"undefined"==typeof Zone?kv.then((()=>{e&&e.apply(null,null)})):Zone.current.scheduleMicroTask("scheduleMicrotask",e)}class Rv{constructor({enableLongStackTrace:e=!1,shouldCoalesceEventChangeDetection:t=!1,shouldCoalesceRunChangeDetection:n=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new By(!1),this.onMicrotaskEmpty=new By(!1),this.onStable=new By(!1),this.onError=new By(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched();const o=this;o._nesting=0,o._outer=o._inner=Zone.current,Zone.TaskTrackingZoneSpec&&(o._inner=o._inner.fork(new Zone.TaskTrackingZoneSpec)),e&&Zone.longStackTraceZoneSpec&&(o._inner=o._inner.fork(Zone.longStackTraceZoneSpec)),o.shouldCoalesceEventChangeDetection=!n&&t,o.shouldCoalesceRunChangeDetection=n,o.lastRequestAnimationFrameId=-1,o.nativeRequestAnimationFrame=function(){let e=ot.requestAnimationFrame,t=ot.cancelAnimationFrame;if("undefined"!=typeof Zone&&e&&t){const n=e[Zone.__symbol__("OriginalDelegate")];n&&(e=n);const o=t[Zone.__symbol__("OriginalDelegate")];o&&(t=o)}return{nativeRequestAnimationFrame:e,nativeCancelAnimationFrame:t}}().nativeRequestAnimationFrame,function(e){const t=()=>{!function(e){e.isCheckStableRunning||-1!==e.lastRequestAnimationFrameId||(e.lastRequestAnimationFrameId=e.nativeRequestAnimationFrame.call(ot,(()=>{e.fakeTopEventTask||(e.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",(()=>{e.lastRequestAnimationFrameId=-1,$v(e),e.isCheckStableRunning=!0,Vv(e),e.isCheckStableRunning=!1}),void 0,(()=>{}),(()=>{}))),e.fakeTopEventTask.invoke()})),$v(e))}(e)};e._inner=e._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:(n,o,r,i,s,a)=>{try{return Lv(e),n.invokeTask(r,i,s,a)}finally{(e.shouldCoalesceEventChangeDetection&&"eventTask"===i.type||e.shouldCoalesceRunChangeDetection)&&t(),Fv(e)}},onInvoke:(n,o,r,i,s,a,c)=>{try{return Lv(e),n.invoke(r,i,s,a,c)}finally{e.shouldCoalesceRunChangeDetection&&t(),Fv(e)}},onHasTask:(t,n,o,r)=>{t.hasTask(o,r),n===o&&("microTask"==r.change?(e._hasPendingMicrotasks=r.microTask,$v(e),Vv(e)):"macroTask"==r.change&&(e.hasPendingMacrotasks=r.macroTask))},onHandleError:(t,n,o,r)=>(t.handleError(o,r),e.runOutsideAngular((()=>e.onError.emit(r))),!1)})}(o)}static isInAngularZone(){return"undefined"!=typeof Zone&&!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!Rv.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(Rv.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(e,t,n){return this._inner.run(e,t,n)}runTask(e,t,n,o){const r=this._inner,i=r.scheduleEventTask("NgZoneEvent: "+o,e,jv,dv,dv);try{return r.runTask(i,t,n)}finally{r.cancelTask(i)}}runGuarded(e,t,n){return this._inner.runGuarded(e,t,n)}runOutsideAngular(e){return this._outer.run(e)}}const jv={};function Vv(e){if(0==e._nesting&&!e.hasPendingMicrotasks&&!e.isStable)try{e._nesting++,e.onMicrotaskEmpty.emit(null)}finally{if(e._nesting--,!e.hasPendingMicrotasks)try{e.runOutsideAngular((()=>e.onStable.emit(null)))}finally{e.isStable=!0}}}function $v(e){e._hasPendingMicrotasks||(e.shouldCoalesceEventChangeDetection||e.shouldCoalesceRunChangeDetection)&&-1!==e.lastRequestAnimationFrameId?e.hasPendingMicrotasks=!0:e.hasPendingMicrotasks=!1}function Lv(e){e._nesting++,e.isStable&&(e.isStable=!1,e.onUnstable.emit(null))}function Fv(e){e._nesting--,Vv(e)}class Hv{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new By,this.onMicrotaskEmpty=new By,this.onStable=new By,this.onError=new By}run(e,t,n){return e.apply(t,n)}runGuarded(e,t,n){return e.apply(t,n)}runOutsideAngular(e){return e()}runTask(e,t,n,o){return e.apply(t,n)}}class Uv{constructor(e){this._ngZone=e,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),e.run((()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")}))}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular((()=>{this._ngZone.onStable.subscribe({next:()=>{Rv.assertNotInAngularZone(),Pv((()=>{this._isZoneStable=!0,this._runCallbacksIfReady()}))}})}))}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())Pv((()=>{for(;0!==this._callbacks.length;){let e=this._callbacks.pop();clearTimeout(e.timeoutId),e.doneCb(this._didWork)}this._didWork=!1}));else{let e=this.getPendingTasks();this._callbacks=this._callbacks.filter((t=>!t.updateCb||!t.updateCb(e)||(clearTimeout(t.timeoutId),!1))),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map((e=>({source:e.source,creationLocation:e.creationLocation,data:e.data}))):[]}addCallback(e,t,n){let o=-1;t&&t>0&&(o=setTimeout((()=>{this._callbacks=this._callbacks.filter((e=>e.timeoutId!==o)),e(this._didWork,this.getPendingTasks())}),t)),this._callbacks.push({doneCb:e,timeoutId:o,updateCb:n})}whenStable(e,t,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');this.addCallback(e,t,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(e,t,n){return[]}}Uv.ɵfac=function(e){return new(e||Uv)(_i(Rv))},Uv.ɵprov=Pe({token:Uv,factory:Uv.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&ly(Uv,[{type:zf}],(function(){return[{type:Rv}]}),null);class Bv{constructor(){this._applications=new Map,zv.addToWindow(this)}registerApplication(e,t){this._applications.set(e,t)}unregisterApplication(e){this._applications.delete(e)}unregisterAllApplications(){this._applications.clear()}getTestability(e){return this._applications.get(e)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(e,t=!0){return zv.findTestabilityInTree(this,e,t)}}function Wv(e){zv=e}Bv.ɵfac=function(e){return new(e||Bv)},Bv.ɵprov=Pe({token:Bv,factory:Bv.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&ly(Bv,[{type:zf}],(function(){return[]}),null);let qv,zv=new class{addToWindow(e){}findTestabilityInTree(e,t,n){return null}};function Kv(e,t,n){ngDevMode&&function(e,t="Type passed in is not NgModuleType, it does not have 'ɵmod' property."){Et(e)||Oe(t)}(n);const o=new my(n);if("undefined"!=typeof ngJitMode&&!ngJitMode)return Promise.resolve(o);const r=e.get(Av,[]).concat(t);if(function(e){if(null!==wm){if(e.defaultEncapsulation!==wm.defaultEncapsulation)return void(ngDevMode&&console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set."));if(e.preserveWhitespaces!==wm.preserveWhitespaces)return void(ngDevMode&&console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set."))}wm=e}({defaultEncapsulation:sb(r.map((e=>e.defaultEncapsulation))),preserveWhitespaces:sb(r.map((e=>e.preserveWhitespaces)))}),0===ji.size)return Promise.resolve(o);const i=function(e){const t=[];return e.forEach((e=>e&&t.push(...e))),t}(r.map((e=>e.providers)));if(0===i.length)return Promise.resolve(o);const s=Jr({usage:0,kind:"NgModule",type:n}),a=Ou.create({providers:i}).get(s.ResourceLoader);return Ri((e=>Promise.resolve(a.get(e)))).then((()=>o))}function Jv(e){return e.isBoundToModule}const Gv=new $r("AllowMultipleToken");class Zv{constructor(e,t){this.name=e,this.token=t}}function Qv(e){if(qv&&!qv.destroyed&&!qv.injector.get(Gv,!1)){const e="undefined"==typeof ngDevMode||ngDevMode?"There can be only one platform. Destroy the previous one to create a new one.":"";throw new fe(400,e)}ngDevMode&&qu(),qv=e.get(nb);const t=e.get(bv,null);return t&&t.forEach((e=>e())),qv}function Yv(e,t,n=[]){const o=`Platform: ${t}`,r=new $r(o);return(t=[])=>{let i=tb();if(!i||i.injector.get(Gv,!1))if(e)e(n.concat(t).concat({provide:r,useValue:!0}));else{const e=n.concat(t).concat({provide:r,useValue:!0},{provide:mu,useValue:"platform"});Qv(Ou.create({providers:e,name:o}))}return Xv(r)}}function Xv(e){const t=tb();if(!t){const e="undefined"==typeof ngDevMode||ngDevMode?"No platform exists!":"";throw new fe(401,e)}if(("undefined"==typeof ngDevMode||ngDevMode)&&!t.injector.get(e,null))throw new fe(400,"A platform with a different configuration has been created. Please destroy it first.");return t}function eb(){qv&&!qv.destroyed&&qv.destroy()}function tb(){return qv&&!qv.destroyed?qv:null}class nb{constructor(e){this._injector=e,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(e,t){const n=function(e,t){let n;return n="noop"===e?new Hv:("zone.js"===e?void 0:e)||new Rv({enableLongStackTrace:"undefined"!=typeof ngDevMode&&!!ngDevMode,shouldCoalesceEventChangeDetection:!!t?.ngZoneEventCoalescing,shouldCoalesceRunChangeDetection:!!t?.ngZoneRunCoalescing}),n}(t?t.ngZone:void 0,{ngZoneEventCoalescing:t&&t.ngZoneEventCoalescing||!1,ngZoneRunCoalescing:t&&t.ngZoneRunCoalescing||!1}),o=[{provide:Rv,useValue:n}];return n.run((()=>{const t=Ou.create({providers:o,parent:this.injector,name:e.moduleType.name}),r=e.create(t),i=r.injector.get(ca,null);if(!i){const e="undefined"==typeof ngDevMode||ngDevMode?"No ErrorHandler. Is platform module (BrowserModule) included?":"";throw new fe(402,e)}return n.runOutsideAngular((()=>{const e=n.onError.subscribe({next:e=>{i.handleError(e)}});r.onDestroy((()=>{ib(this._modules,r),e.unsubscribe()}))})),function(e,t,n){try{const o=n();return xd(o)?o.catch((n=>{throw t.runOutsideAngular((()=>e.handleError(n))),n})):o}catch(n){throw t.runOutsideAngular((()=>e.handleError(n))),n}}(i,n,(()=>{const e=r.injector.get(hv);return e.runInitializers(),e.donePromise.then((()=>(Mh(r.injector.get(Mv,bh)||bh),this._moduleDoBootstrap(r),r)))}))}))}bootstrapModule(e,t=[]){const n=ob({},t);return Kv(this.injector,n,e).then((e=>this.bootstrapModuleFactory(e,n)))}_moduleDoBootstrap(e){const t=e.injector.get(rb);if(e._bootstrapComponents.length>0)e._bootstrapComponents.forEach((e=>t.bootstrap(e)));else{if(!e.instance.ngDoBootstrap){const t="undefined"==typeof ngDevMode||ngDevMode?`The module ${re(e.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`:"";throw new fe(403,t)}e.instance.ngDoBootstrap(t)}this._modules.push(e)}onDestroy(e){this._destroyListeners.push(e)}get injector(){return this._injector}destroy(){if(this._destroyed){const e="undefined"==typeof ngDevMode||ngDevMode?"The platform has already been destroyed!":"";throw new fe(404,e)}this._modules.slice().forEach((e=>e.destroy())),this._destroyListeners.forEach((e=>e())),this._destroyed=!0}get destroyed(){return this._destroyed}}function ob(e,t){return Array.isArray(t)?t.reduce(ob,e):{...e,...t}}nb.ɵfac=function(e){return new(e||nb)(_i(Ou))},nb.ɵprov=Pe({token:nb,factory:nb.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&ly(nb,[{type:zf}],(function(){return[{type:Ou}]}),null);class rb{constructor(e,t,n,r,i){this._zone=e,this._injector=t,this._exceptionHandler=n,this._componentFactoryResolver=r,this._initStatus=i,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._onMicrotaskEmptySubscription=this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run((()=>{this.tick()}))}});const s=new o.Observable((e=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular((()=>{e.next(this._stable),e.complete()}))})),a=new o.Observable((e=>{let t;this._zone.runOutsideAngular((()=>{t=this._zone.onStable.subscribe((()=>{Rv.assertNotInAngularZone(),Pv((()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,e.next(!0))}))}))}));const n=this._zone.onUnstable.subscribe((()=>{Rv.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular((()=>{e.next(!1)})))}));return()=>{t.unsubscribe(),n.unsubscribe()}}));this.isStable=(0,o.merge)(s,a.pipe(ee()))}bootstrap(e,t){if(!this._initStatus.done){const e="undefined"==typeof ngDevMode||ngDevMode?"Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.":"";throw new fe(405,e)}let n;n=e instanceof Wg?e:this._componentFactoryResolver.resolveComponentFactory(e),this.componentTypes.push(n.componentType);const o=Jv(n)?void 0:this._injector.get(uy),r=t||n.selector,i=n.create(Ou.NULL,[],r,o),s=i.location.nativeElement,a=i.injector.get(Uv,null),c=a&&i.injector.get(Bv);return a&&c&&c.registerApplication(s,a),i.onDestroy((()=>{this.detachView(i.hostView),ib(this.components,i),c&&c.unregisterApplication(s)})),this._loadComponent(i),("undefined"==typeof ngDevMode||ngDevMode)&&this._injector.get(Dv).log("Angular is running in development mode. Call enableProdMode() to enable production mode."),i}tick(){if(this._runningTick){const e="undefined"==typeof ngDevMode||ngDevMode?"ApplicationRef.tick is called recursively":"";throw new fe(101,e)}try{this._runningTick=!0;for(let e of this._views)e.detectChanges();if("undefined"==typeof ngDevMode||ngDevMode)for(let e of this._views)e.checkNoChanges()}catch(e){this._zone.runOutsideAngular((()=>this._exceptionHandler.handleError(e)))}finally{this._runningTick=!1}}attachView(e){const t=e;this._views.push(t),t.attachToAppRef(this)}detachView(e){const t=e;ib(this._views,t),t.detachFromAppRef()}_loadComponent(e){this.attachView(e.hostView),this.tick(),this.components.push(e),this._injector.get(_v,[]).concat(this._bootstrapListeners).forEach((t=>t(e)))}ngOnDestroy(){this._views.slice().forEach((e=>e.destroy())),this._onMicrotaskEmptySubscription.unsubscribe()}get viewCount(){return this._views.length}}function ib(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}function sb(e){for(let t=e.length-1;t>=0;t--)if(void 0!==e[t])return e[t]}rb.ɵfac=function(e){return new(e||rb)(_i(Rv),_i(Ou),_i(ca),_i(zg),_i(hv))},rb.ɵprov=Pe({token:rb,factory:rb.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&ly(rb,[{type:zf,args:[{providedIn:"root"}]}],(function(){return[{type:Rv},{type:Ou},{type:ca},{type:zg},{type:hv}]}),null);let ab=!0,cb=!1;function lb(){return cb=!0,ab}function ub(){if(cb)throw new Error("Cannot enable prod mode after platform setup.");(void 0===typeof ngDevMode||ngDevMode)&&(ot.ngDevMode=!1),ab=!1}function fb(e){const t=hy(e);if(!t)throw pb(e);return new my(t)}function db(e){const t=hy(e);if(!t)throw pb(e);return t}function pb(e){return new Error(`No module with ID ${e} loaded`)}class hb{}function gb(e){return function(e,t,n){if(rn(e)&&!n){const n=Gn(e.index,t);return new oy(n,n)}if(47&e.type){const e=t[Wt];return new oy(e,t)}return null}(co(),io(),!(16&~e))}hb.__NG_ELEMENT_ID__=gb;class yb extends hb{}class mb extends yb{}class vb{constructor(e,t){this.name=e,this.callback=t}}function bb(e){return e.map((e=>e.nativeElement))}class wb{constructor(e){this.nativeNode=e}get parent(){const e=this.nativeNode.parentNode;return e?new _b(e):null}get injector(){return Ru(this.nativeNode)}get componentInstance(){const e=this.nativeNode;return e&&(Au(e)||ku(e))}get context(){return Au(this.nativeNode)||Nu(this.nativeNode)}get listeners(){return Lu(this.nativeNode).filter((e=>"dom"===e.type))}get references(){return function(e){const t=Js(e);return null===t?{}:(void 0===t.localRefs&&(t.localRefs=function(e,t){const n=e[St].data[t];if(n&&n.localNames){const t={};let o=n.index+1;for(let r=0;r<n.localNames.length;r+=2)t[n.localNames[r]]=e[o],o++;return t}return null}(t.lView,t.nodeIndex)),t.localRefs||{})}(this.nativeNode)}get providerTokens(){return function(e){const t=Js(e);if(null===t)return[];const n=t.lView[St],o=n.data[t.nodeIndex],r=[],i=1048575&o.providerIndexes,s=o.directiveEnd;for(let e=i;e<s;e++){let t=n.data[e];void 0!==(a=t).type&&void 0!==a.template&&void 0!==a.declaredInputs&&(t=t.type),r.push(t)}var a;return r}(this.nativeNode)}}class _b extends wb{constructor(e){ngDevMode&&Ae(e),super(e)}get nativeElement(){return this.nativeNode.nodeType==Node.ELEMENT_NODE?this.nativeNode:null}get name(){const e=Js(this.nativeNode);return null!==e?e.lView[St].data[e.nodeIndex].value:this.nativeNode.nodeName}get properties(){const e=Js(this.nativeNode);if(null===e)return{};const t=e.lView,n=t[St].data,o=n[e.nodeIndex],r={};return function(e,t){if(e){let n=Object.getPrototypeOf(e);const o=Node.prototype;for(;null!==n&&n!==o;){const o=Object.getOwnPropertyDescriptors(n);for(let n in o)if(!n.startsWith("__")&&!n.startsWith("on")){const o=e[n];Cb(o)&&(t[n]=o)}n=Object.getPrototypeOf(n)}}}(this.nativeElement,r),function(e,t,n,o){let r=t.propertyBindings;if(null!==r)for(let t=0;t<r.length;t++){const i=r[t],s=o[i].split(wa),a=s[0];if(s.length>1){let t=s[1];for(let e=1;e<s.length-1;e++)t+=pe(n[i+e-1])+s[e+1];e[a]=t}else e[a]=n[i]}}(r,o,t,n),r}get attributes(){const e={},t=this.nativeElement;if(!t)return e;const n=Js(t);if(null===n)return{};const o=n.lView[St].data[n.nodeIndex].attrs,r=[];if(o){let t=0;for(;t<o.length;){const n=o[t];if("string"!=typeof n)break;const i=o[t+1];e[n]=i,r.push(n.toLowerCase()),t+=2}}const i=t.attributes;for(let t=0;t<i.length;t++){const n=i[t],o=n.name.toLowerCase();-1===r.indexOf(o)&&(e[o]=n.value)}return e}get styles(){return this.nativeElement&&this.nativeElement.style?this.nativeElement.style:{}}get classes(){const e={},t=this.nativeElement.className;return("string"!=typeof t?t.baseVal.split(" "):t.split(" ")).forEach((t=>e[t]=!0)),e}get childNodes(){const e=this.nativeNode.childNodes,t=[];for(let n=0;n<e.length;n++){const o=e[n];t.push(Sb(o))}return t}get children(){const e=this.nativeElement;if(!e)return[];const t=e.children,n=[];for(let e=0;e<t.length;e++){const o=t[e];n.push(Sb(o))}return n}query(e){return this.queryAll(e)[0]||null}queryAll(e){const t=[];return Db(this,e,t,!0),t}queryAllNodes(e){const t=[];return Db(this,e,t,!1),t}triggerEventHandler(e,t){const n=this.nativeNode,o=[];this.listeners.forEach((r=>{if(r.name===e){const e=r.callback;e.call(n,t),o.push(e)}})),"function"==typeof n.eventListeners&&n.eventListeners(e).forEach((e=>{if(-1!==e.toString().indexOf("__ngUnwrap__")){const r=e("__ngUnwrap__");return-1===o.indexOf(r)&&r.call(n,t)}}))}}function Cb(e){return"string"==typeof e||"boolean"==typeof e||"number"==typeof e||null===e}function Db(e,t,n,o){const r=Js(e.nativeNode);null!==r?Mb(r.lView[St].data[r.nodeIndex],r.lView,t,n,o,e.nativeNode):Eb(e.nativeNode,t,n,o)}function Mb(e,t,n,o,r,i){ngDevMode&&cn(e,t);const s=function(e,t){const n=null===e?-1:e.index;if(-1!==n){ngDevMode&&cn(e,t);const o=Wn(t[n]);return ngDevMode&&null!==o&&!Un(t[Lt])&&Ae(o),o}return null}(e,t);if(11&e.type){if(Ib(s,n,o,r,i),rn(e)){const s=Gn(e.index,t);s&&s[St].firstChild&&Mb(s[St].firstChild,s,n,o,r,i)}else e.child&&Mb(e.child,t,n,o,r,i),s&&Eb(s,n,o,r);const a=t[e.index];nn(a)&&xb(a,n,o,r,i)}else if(4&e.type){const s=t[e.index];Ib(s[Yt],n,o,r,i),xb(s,n,o,r,i)}else if(16&e.type){const s=t[Wt],a=s[Pt].projection[e.projection];if(Array.isArray(a))for(let e of a)Ib(e,n,o,r,i);else if(a){const e=s[At];Mb(e[St].data[a.index],e,n,o,r,i)}}else e.child&&Mb(e.child,t,n,o,r,i);if(i!==s){const s=4&e.flags?e.projectionNext:e.next;s&&Mb(s,t,n,o,r,i)}}function xb(e,t,n,o,r){for(let i=en;i<e.length;i++){const s=e[i],a=s[St].firstChild;a&&Mb(a,s,t,n,o,r)}}function Ib(e,t,n,o,r){if(r!==e){const r=Sb(e);if(!r)return;(o&&r instanceof _b&&t(r)&&-1===n.indexOf(r)||!o&&t(r)&&-1===n.indexOf(r))&&n.push(r)}}function Eb(e,t,n,o){const r=e.childNodes,i=r.length;for(let e=0;e<i;e++){const i=r[e],s=Sb(i);s&&((o&&s instanceof _b&&t(s)&&-1===n.indexOf(s)||!o&&t(s)&&-1===n.indexOf(s))&&n.push(s),Eb(i,t,n,o))}}new Map;const Tb="__ng_debug__";function Sb(e){return e instanceof Node?(e.hasOwnProperty(Tb)||(e[Tb]=e.nodeType==Node.ELEMENT_NODE?new _b(e):new wb(e)),e[Tb]):null}function Ob(e){return null}class Ab{constructor(){}supports(e){return df(e)}create(e){return new kb(e)}}const Nb=(e,t)=>t;class kb{constructor(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||Nb}forEachItem(e){let t;for(t=this._itHead;null!==t;t=t._next)e(t)}forEachOperation(e){let t=this._itHead,n=this._removalsHead,o=0,r=null;for(;t||n;){const i=!n||t&&t.currentIndex<Vb(n,o,r)?t:n,s=Vb(i,o,r),a=i.currentIndex;if(i===n)o--,n=n._nextRemoved;else if(t=t._next,null==i.previousIndex)o++;else{r||(r=[]);const e=s-o,t=a-o;if(e!=t){for(let n=0;n<e;n++){const o=n<r.length?r[n]:r[n]=0,i=o+n;t<=i&&i<e&&(r[n]=o+1)}r[i.previousIndex]=t-e}}s!==a&&e(i,s,a)}}forEachPreviousItem(e){let t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachMovedItem(e){let t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}forEachIdentityChange(e){let t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)}diff(e){if(null==e&&(e=[]),!df(e)){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${re(e)}'. Only arrays and iterables are allowed`:"";throw new fe(900,t)}return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t,n,o,r=this._itHead,i=!1;if(Array.isArray(e)){this.length=e.length;for(let t=0;t<this.length;t++)n=e[t],o=this._trackByFn(t,n),null!==r&&Object.is(r.trackById,o)?(i&&(r=this._verifyReinsertion(r,n,o,t)),Object.is(r.item,n)||this._addIdentityChange(r,n)):(r=this._mismatch(r,n,o,t),i=!0),r=r._next}else t=0,function(e,t){if(Array.isArray(e))for(let n=0;n<e.length;n++)t(e[n]);else{const n=e[uf()]();let o;for(;!(o=n.next()).done;)t(o.value)}}(e,(e=>{o=this._trackByFn(t,e),null!==r&&Object.is(r.trackById,o)?(i&&(r=this._verifyReinsertion(r,e,o,t)),Object.is(r.item,e)||this._addIdentityChange(r,e)):(r=this._mismatch(r,e,o,t),i=!0),r=r._next,t++})),this.length=t;return this._truncate(r),this.collection=e,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let e;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=e._nextMoved)e.previousIndex=e.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(e,t,n,o){let r;return null===e?r=this._itTail:(r=e._prev,this._remove(e)),null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,r,o)):null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(n,o))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,r,o)):e=this._addAfter(new Pb(t,n),r,o),e}_verifyReinsertion(e,t,n,o){let r=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==r?e=this._reinsertAfter(r,e._prev,o):e.currentIndex!=o&&(e.currentIndex=o,this._addToMoves(e,o)),e}_truncate(e){for(;null!==e;){const t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(e,t,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);const o=e._prevRemoved,r=e._nextRemoved;return null===o?this._removalsHead=r:o._nextRemoved=r,null===r?this._removalsTail=o:r._prevRemoved=o,this._insertAfter(e,t,n),this._addToMoves(e,n),e}_moveAfter(e,t,n){return this._unlink(e),this._insertAfter(e,t,n),this._addToMoves(e,n),e}_addAfter(e,t,n){return this._insertAfter(e,t,n),null===this._additionsTail?this._additionsTail=this._additionsHead=e:this._additionsTail=this._additionsTail._nextAdded=e,e}_insertAfter(e,t,n){const o=null===t?this._itHead:t._next;return e._next=o,e._prev=t,null===o?this._itTail=e:o._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new jb),this._linkedRecords.put(e),e.currentIndex=n,e}_remove(e){return this._addToRemovals(this._unlink(e))}_unlink(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);const t=e._prev,n=e._next;return null===t?this._itHead=n:t._next=n,null===n?this._itTail=t:n._prev=t,e}_addToMoves(e,t){return e.previousIndex===t||(null===this._movesTail?this._movesTail=this._movesHead=e:this._movesTail=this._movesTail._nextMoved=e),e}_addToRemovals(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new jb),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}_addIdentityChange(e,t){return e.item=t,null===this._identityChangesTail?this._identityChangesTail=this._identityChangesHead=e:this._identityChangesTail=this._identityChangesTail._nextIdentityChange=e,e}}class Pb{constructor(e,t){this.item=e,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class Rb{constructor(){this._head=null,this._tail=null}add(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}get(e,t){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===t||t<=n.currentIndex)&&Object.is(n.trackById,e))return n;return null}remove(e){const t=e._prevDup,n=e._nextDup;return null===t?this._head=n:t._nextDup=n,null===n?this._tail=t:n._prevDup=t,null===this._head}}class jb{constructor(){this.map=new Map}put(e){const t=e.trackById;let n=this.map.get(t);n||(n=new Rb,this.map.set(t,n)),n.add(e)}get(e,t){const n=e,o=this.map.get(n);return o?o.get(e,t):null}remove(e){const t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function Vb(e,t,n){const o=e.previousIndex;if(null===o)return o;let r=0;return n&&o<n.length&&(r=n[o]),o+t+r}class $b{constructor(){}supports(e){return e instanceof Map||pf(e)}create(){return new Lb}}class Lb{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(e){let t;for(t=this._mapHead;null!==t;t=t._next)e(t)}forEachPreviousItem(e){let t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)}forEachChangedItem(e){let t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}diff(e){if(e){if(!(e instanceof Map||pf(e))){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${re(e)}'. Only maps and objects are allowed`:"";throw new fe(900,t)}}else e=new Map;return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t=this._mapHead;if(this._appendAfter=null,this._forEach(e,((e,n)=>{if(t&&t.key===n)this._maybeAddToChanges(t,e),this._appendAfter=t,t=t._next;else{const o=this._getOrCreateRecordForKey(n,e);t=this._insertBeforeOrAppend(t,o)}})),t){t._prev&&(t._prev._next=null),this._removalsHead=t;for(let e=t;null!==e;e=e._nextRemoved)e===this._mapHead&&(this._mapHead=null),this._records.delete(e.key),e._nextRemoved=e._next,e.previousValue=e.currentValue,e.currentValue=null,e._prev=null,e._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(e,t){if(e){const n=e._prev;return t._next=e,t._prev=n,e._prev=t,n&&(n._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}_getOrCreateRecordForKey(e,t){if(this._records.has(e)){const n=this._records.get(e);this._maybeAddToChanges(n,t);const o=n._prev,r=n._next;return o&&(o._next=r),r&&(r._prev=o),n._next=null,n._prev=null,n}const n=new Fb(e);return this._records.set(e,n),n.currentValue=t,this._addToAdditions(n),n}_reset(){if(this.isDirty){let e;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(e,t){Object.is(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))}_addToAdditions(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)}_addToChanges(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)}_forEach(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach((n=>t(e[n],n)))}}class Fb{constructor(e){this.key=e,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}function Hb(){return new Ub([new Ab])}class Ub{constructor(e){this.factories=e}static create(e,t){if(null!=t){const n=t.factories.slice();e=e.concat(n)}return new Ub(e)}static extend(e){return{provide:Ub,useFactory:t=>Ub.create(e,t||Hb()),deps:[[Ub,new Si,new Ei]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(null!=t)return t;{const t="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}' of type '${n=e,n.name||typeof n}'`:"";throw new fe(901,t)}var n}}function Bb(){return new Wb([new $b])}Ub.ɵprov=Pe({token:Ub,providedIn:"root",factory:Hb});class Wb{constructor(e){this.factories=e}static create(e,t){if(t){const n=t.factories.slice();e=e.concat(n)}return new Wb(e)}static extend(e){return{provide:Wb,useFactory:t=>Wb.create(e,t||Bb()),deps:[[Wb,new Si,new Ei]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(t)return t;const n="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}'`:"";throw new fe(901,n)}}Wb.ɵprov=Pe({token:Wb,providedIn:"root",factory:Bb});const qb=[new $b],zb=[new Ab],Kb=new Ub(zb),Jb=new Wb(qb),Gb=Yv(null,"core",[{provide:wv,useValue:"unknown"},{provide:nb,deps:[Ou]},{provide:Bv,deps:[]},{provide:Dv,deps:[]}]);class Zb{constructor(e){}}Zb.ɵfac=function(e){return new(e||Zb)(_i(rb))},Zb.ɵmod=bt({type:Zb}),Zb.ɵinj=je({}),("undefined"==typeof ngDevMode||ngDevMode)&&ly(Zb,[{type:fv}],(function(){return[{type:rb}]}),null);const Qb=!0;function Yb(e){return Jr({usage:1,kind:"directive",type:e.type}).compileDirectiveDeclaration(bm,`ng:///${e.type.name}/ɵfac.js`,e)}function Xb(e){ly(e.type,e.decorators,e.ctorParameters??null,e.propDecorators??null)}function ew(e){return Jr({usage:1,kind:"component",type:e.type}).compileComponentDeclaration(bm,`ng:///${e.type.name}/ɵcmp.js`,e)}function tw(e){return Jr({usage:1,kind:nw(e.target),type:e.type}).compileFactoryDeclaration(bm,`ng:///${e.type.name}/ɵfac.js`,e)}function nw(e){switch(e){case zr.Directive:return"directive";case zr.Component:return"component";case zr.Injectable:return"injectable";case zr.Pipe:return"pipe";case zr.NgModule:return"NgModule"}}function ow(e){return Jr({usage:1,kind:"injectable",type:e.type}).compileInjectableDeclaration(bm,`ng:///${e.type.name}/ɵprov.js`,e)}function rw(e){return Jr({usage:1,kind:"NgModule",type:e.type}).compileInjectorDeclaration(bm,`ng:///${e.type.name}/ɵinj.js`,e)}function iw(e){return Jr({usage:1,kind:"NgModule",type:e.type}).compileNgModuleDeclaration(bm,`ng:///${e.type.name}/ɵmod.js`,e)}function sw(e){return Jr({usage:1,kind:"pipe",type:e.type}).compilePipeDeclaration(bm,`ng:///${e.type.name}/ɵpipe.js`,e)}"undefined"!=typeof ngDevMode&&ngDevMode&&(ot.$localize=ot.$localize||function(){throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)")})}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{"use strict";var e=o;Object.defineProperty(e,"__esModule",{value:!0}),e.checkKeyForDid=e.EProofmeDataStorage=e.EProofmeDataPurpose=e.EClaimType=e.ESignatureTypes=e.EMimeType=e.getSubDomain=e.SignalServerV2=e.ProofmeUtils=e.ProofmeUtilsProvider=e.WebRtcProvider=e.SignalingServer=void 0;var t=n(515);Object.defineProperty(e,"SignalingServer",{enumerable:!0,get:function(){return t.SignalingServer}});var r=n(299);Object.defineProperty(e,"WebRtcProvider",{enumerable:!0,get:function(){return r.WebRtcProvider}});var i=n(611);Object.defineProperty(e,"ProofmeUtilsProvider",{enumerable:!0,get:function(){return i.ProofmeUtilsProvider}});var s=n(810);Object.defineProperty(e,"ProofmeUtils",{enumerable:!0,get:function(){return s.ProofmeUtils}});var a=n(930);Object.defineProperty(e,"SignalServerV2",{enumerable:!0,get:function(){return a.SignalServerV2}});var c=n(733);Object.defineProperty(e,"getSubDomain",{enumerable:!0,get:function(){return c.getSubDomain}});var l=n(346);Object.defineProperty(e,"EMimeType",{enumerable:!0,get:function(){return l.EMimeType}});var u=n(632);Object.defineProperty(e,"ESignatureTypes",{enumerable:!0,get:function(){return u.ESignatureTypes}});var f=n(869);Object.defineProperty(e,"EClaimType",{enumerable:!0,get:function(){return f.EClaimType}});var d=n(945);Object.defineProperty(e,"EProofmeDataPurpose",{enumerable:!0,get:function(){return d.EProofmeDataPurpose}});var p=n(491);Object.defineProperty(e,"EProofmeDataStorage",{enumerable:!0,get:function(){return p.EProofmeDataStorage}});var h=n(918);Object.defineProperty(e,"checkKeyForDid",{enumerable:!0,get:function(){return h.checkKeyForDid}})})(),o})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,