/*! For license information please see proofmeid-webrtc-web.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ProofmeId=t():e.ProofmeId=t()}(self,(function(){return(()=>{var e={869:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EClaimType=void 0,(n=t.EClaimType||(t.EClaimType={}))[n.SIGNED_CONTENT=1e3]="SIGNED_CONTENT",n[n.COMPANY_INFO=2e3]="COMPANY_INFO",n[n.VALIDATORS=2001]="VALIDATORS",n[n.USERS=2002]="USERS"},365:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EDIDAccessLevel=void 0,(n=t.EDIDAccessLevel||(t.EDIDAccessLevel={})).NONE="0",n.MANAGEMENT_KEY="1",n.ACTION_KEY="2",n.CLAIM_SIGNER_KEY="3",n.ENCRYPTION_KEY="4"},346:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EMimeType=void 0,(n=t.EMimeType||(t.EMimeType={})).AAC="audio/aac",n.ABW="application/x-abiword",n.ARC="application/x-freearc",n.AVI="video/x-msvideo",n.AZW="application/vnd.amazon.ebook",n.BIN="application/octet-stream",n.BMP="image/bmp",n.BZ="application/x-bzip",n.BZ2="application/x-bzip2",n.CSH="application/x-csh",n.CSS="text/css",n.CSV="text/csv",n.DOC="application/msword",n.DOCX="application/vnd.openxmlformats-officedocument.wordprocessingml.document",n.EOT="application/vnd.ms-fontobject",n.EPUB="application/epub+zip",n.GZ="application/gzip",n.GIF="image/gif",n.HTM="text/html",n.HTML="text/html",n.ICO="image/vnd.microsoft.icon",n.ICS="text/calendar",n.JAR="application/java-archive",n.JPEG=".jpg",n.JS="text/javascript",n.JSON="application/json",n.JSONLD="application/ld+json",n.MID=".midi",n.MJS="text/javascript",n.MP3="audio/mpeg",n.MPEG="video/mpeg",n.MPKG="application/vnd.apple.installer+xml",n.ODP="application/vnd.oasis.opendocument.presentation",n.ODS="application/vnd.oasis.opendocument.spreadsheet",n.ODT="application/vnd.oasis.opendocument.text",n.OGA="audio/ogg",n.OGV="video/ogg",n.OGX="application/ogg",n.OPUS="audio/opus",n.OTF="font/otf",n.PNG="image/png",n.PDF="application/pdf",n.PHP="application/php",n.PPT="application/vnd.ms-powerpoint",n.PPTX="application/vnd.openxmlformats-officedocument.presentationml.presentation",n.RAR="application/vnd.rar",n.RTF="application/rtf",n.SH="application/x-sh",n.SVG="image/svg+xml",n.SWF="application/x-shockwave-flash",n.TAR="application/x-tar",n.TIF="image/tiff",n.TIFF="image/tiff",n.TS="video/mp2t",n.TTF="font/ttf",n.TXT="text/plain",n.URI="text/x-uri",n.VSD="application/vnd.visio",n.WAV="audio/wav",n.WEBA="audio/webm",n.WEBM="video/webm",n.WEBP="image/webp",n.WOFF="font/woff",n.WOFF2="font/woff2",n.XHTML="application/xhtml+xml",n.XLS="application/vnd.ms-excel",n.XLSX="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",n.XML="XML",n.XUL="application/vnd.mozilla.xul+xml",n.ZIP="application/zip",n.GP3="video/3gpp",n.G23="video/3gpp2",n.Z7="application/x-7z-compressed"},945:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EProofmeDataPurpose=void 0,(n=t.EProofmeDataPurpose||(t.EProofmeDataPurpose={})).AGE_VERIFICATION="AGE_VERIFICATION",n.KYC_VERIFICATION="KYC_VERIFICATION",n.ACCESS_CONTROL="ACCESS_CONTROL",n.ONLINE_VERIFICATION="ONLINE_VERIFICATION",n.IDENTIFICATION="IDENTIFICATION"},491:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EProofmeDataStorage=void 0,(n=t.EProofmeDataStorage||(t.EProofmeDataStorage={})).DATABASE="DATABASE",n.CERTIFICATE="CERTIFICATE",n.NOT_STORED="NOT_STORED"},632:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ESignatureTypes=void 0,(n=t.ESignatureTypes||(t.ESignatureTypes={})).ECDSA="ECDSA",n.RSA="RSA",n.HMAC="HMAC"},390:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getRTCConnectionConfig=t.validChannelId=void 0;const r=o(n(235));t.validChannelId=function(e,t){return 1===t.filter((t=>t.uuid===e&&null===t.channel&&!0===t.host)).length},t.getRTCConnectionConfig=function(e,t,n,o){const i=`${Math.floor(Date.now()/1e3)+t}:${e}`;return{iceCandidatePoolSize:5,iceServers:[{urls:o,credential:r.default.createHmac("sha1",n).update(i.toString()).digest("base64"),username:i}]}}},611:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtilsProvider=void 0;const s=n(810),a=i(n(9));class c{proofmeUtils=new s.ProofmeUtils;async isValidCredentials(e,t,n,o,r,i){return this.proofmeUtils.isValidCredentials(e,t,n,o,r,i)}getSignature(e,t){return this.proofmeUtils.getSignature(e,t)}signCredentialObject(e,t){return this.proofmeUtils.signCredentialObject(e,t)}signRequestedCredentials(e,t,n){return this.proofmeUtils.signRequestedCredentials(e,t,n)}async isValidRequestedCredentials(e,t,n){return this.proofmeUtils.isValidRequestedCredentials(e,t,n)}async isValidLicense(e,t,n){return this.proofmeUtils.isValidLicense(e,t,n)}generateChallenge(e,t,n,o){return this.proofmeUtils.generateChallenge(e,t,n,o)}async getClaim(e,t,n,o){return await this.proofmeUtils.getClaim(e,t,n,o)}getContractAddressFromDid(e){return this.proofmeUtils.getContractAddressFromDid(e)}static ɵfac=function(e){return new(e||c)};static ɵprov=a.ɵɵdefineInjectable({token:c,factory:c.ɵfac})}t.ProofmeUtilsProvider=c},810:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtils=void 0;const r=o(n(519)),i=n(869),s=n(365),a=n(632),c=n(621);t.ProofmeUtils=class{excludedCredentialProviders=["OWN","ADDITIONAL_INFO","SIGNATURE"];async isValidCredentials(e,t,n,o,i,s){const a=new r.default(t),c=this.requestedCredentialsCorrect(e,n);if(!c.success)return c.credentials=e,c;const l=await this.checkCredentials(e,t,i,s);if(!l.valid)return l;for(const e of o)a.utils.isAddress(e)||(console.error(`Trusted party did ${e} is NOT a valid address and is removed.`),o=o.filter((t=>t!==e)));if(o.length>0){const t=[];let n=0,r=0;const i=[];for(const[s]of Object.entries(e.credentials))if(!this.excludedCredentialProviders.includes(s))for(const[c,l]of Object.entries(e.credentials[s].credentials)){r++;const e=l.issuer.id.split(":")[2];let s=!1,u=null,f=null,d=!0;for(const r of o){const o=t.find((t=>t.issuerDidContractAddress===e&&t.did===r));let p=null;if(o?p=o.claim:(p=await this.getClaims(e,r,a),t.push({issuerDidContractAddress:e,did:r,claim:p})),p)if(d=!1,new Date(p.expirationDate)>new Date){const e=p.keys;f=e;const t=`${l.provider}_${c}`;if(!e.includes(t)){u=t;break}if(!u){n++,s=!0;break}}else i.push({credential:l,valid:!1,code:14,message:"Claim expired."})}d?i.push({credential:l,valid:!1,code:13,message:`No claims found to check. Checked dids ${o}`}):!u||s||i.push({credential:l,valid:!1,code:12,message:`Tried to validate attribute ${u} but provider was not allowed to issue. Allowed attributes: ${f.join(", ")}`})}return n===r?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential",requestedCheckResult:c}:{valid:!1,code:1,message:"Invalid credentials",invalidCredentials:i}}return{valid:!1,code:10,message:"No trusted parties to check."}}async checkCredentials(e,t,n,o){"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e);const i=new r.default(t),s=[];let a=0,l=0;const u=[];for(const[r]of Object.entries(e.credentials)){if(this.excludedCredentialProviders.includes(r))continue;const f={credentials:{[r]:JSON.parse(JSON.stringify(e.credentials[r]))}};delete f.credentials[r].proof.signature;const d=i.eth.accounts.recover(JSON.stringify(f),e.credentials[r].proof.signature);if(this.userCredentialSignatureWrong(e.credentials[r].proof.holder,d))for(const[,f]of Object.entries(e.credentials[r].credentials)){if(l++,!f.version){u.push({credential:f,code:8,message:"Incorrect credential version. Renew your credentials"});continue}const d=new Date(f.expirationDate),p=new Date;if(p>d){u.push({credential:f,code:7,message:`Your credential expired on ${d}`});continue}const h=new Date(e.credentials[r].proof.nonce);if(this.calculateMinutesDifference(p,h)>5&&n)u.push({credential:f,code:2,message:"Nonce too old"});else if(this.issuerCredentialSignatureWrong(f,i)){const n=f.proof.holder,l=f.issuer.id.split(":")[2];if(await this.correctDidContractKey(i,t,c.claimHolderAbi,n,l,s)){const n=e.credentials[r].proof.holder,l=f.id.split(":")[2];await this.correctDidContractKey(i,t,c.claimHolderAbi,n,l,s)?o&&void 0!==f.verified&&!0!==f.verified?u.push({credential:f,code:15,message:"Liveness check required but credential not verified"}):a++:u.push({credential:f,code:6,message:"User did incorrect"})}else u.push({credential:f,code:5,message:"Issuer did incorrect"})}else u.push({credential:f,code:4,message:"Issuer signature incorrect"})}else u.push({credential:e.credentials[r],code:3,message:"User signature incorrect"})}return a===l?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential"}:{valid:!1,code:1,message:"Invalid credential",invalidCredentials:u}}userCredentialSignatureWrong(e,t){return e===t||(console.error(`User signature of credential ${e} does not match recoveredAddress ${t}`),!1)}issuerCredentialSignatureWrong(e,t){const n=e.proof.signature,o=e.proof.holder,r=JSON.parse(JSON.stringify(e));delete r.proof.signature;const i=t.eth.accounts.recover(JSON.stringify(r),n);return o===i||(console.error(`Issuer signature of credential ${o} does not match recoveredAddress ${i}`),!1)}async correctDidContractKey(e,t,n,o,i,s){const a=s.find((e=>e.did==i&&e.holderKey===o));if(a)return a.result;{const a=[];if(i===o)return s.push({did:i,holderKey:o,result:!0}),!0;{const c=this.getSha3Key(o,e),l=new(new r.default(t).eth.Contract)(n,i);if(!this.knownAddressesContains(a,c,i)){const e=parseInt(await this.getKeyPurpose(l,c),10);if(0===e||e>3)return s.push({did:i,holderKey:o,result:!1}),!1;a.push({sha3Key:c,didAddress:i})}return s.push({did:i,holderKey:o,result:!0}),!0}}}knownAddressesContains(e,t,n){for(const o of e)if(o.sha3Key===t&&o.didContractAddress===n)return!0}getSha3Key(e,t){return t.utils.keccak256(e)}async getKeyPurpose(e,t){return null===e.options.address?Promise.resolve(null):await e.methods.getKeyPurpose(t).call()}calculateMinutesDifference(e,t){let n=(e.getTime()-t.getTime())/1e3;return n/=60,Math.abs(Math.round(n))}reOrderCredentialObject(e){for(const t of Object.keys(e.credentials)){const n=[];for(const o of Object.keys(e.credentials[t].credentials))n.push(o);n.sort();const o={};for(const r of n){const n=this.reOrderCredential(e.credentials[t].credentials[r]);o[r]=n}e.credentials[t].proof=this.reOrderCredentialProof(e.credentials[t].proof),e.credentials[t]={credentials:o,proof:e.credentials[t].proof}}return e}reOrderCredential(e){return this.sortObjectAlphabetically(e)}sortObjectAlphabetically(e){const t={},n=Object.keys(e);n.sort(((e,t)=>(e=e.toLowerCase())<(t=t.toLowerCase())?-1:e>t?1:0));for(const o in n){const r=n[o];null===e[r]||"object"!=typeof e[r]||e[r]instanceof Array?t[r]=e[r]:t[r]=this.sortObjectAlphabetically(e[r])}return t}reOrderCredentialProof(e){return{holder:e.holder,nonce:e.nonce,signature:e.signature,type:e.type}}getSignature(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderObject(e),(new r.default).eth.accounts.sign(JSON.stringify(e),t).signature}reOrderObject(e){return this.sortObjectAlphabetically(e)}signCredentialObject(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e),(new r.default).eth.accounts.sign(JSON.stringify(e),t).signature}async getClaims(e,t,n){const o=new n.eth.Contract(c.claimHolderAbi,t),r=await o.methods.getClaimIdsByType(e).call();if(!(r.length>0))return Promise.resolve(null);try{const e=await o.methods.getClaim(r[r.length-1]).call(),t=JSON.parse(n.utils.toAscii(e.data));return Promise.resolve(t)}catch(e){return Promise.resolve(null)}}async getClaim(e,t,n,o){const i=new r.default(n),s=new i.eth.Contract(o,t),a=await s.methods.getClaimIdsByType(e).call();if(!(a.length>0))return Promise.resolve(null);try{const e=await s.methods.getClaim(a[a.length-1]).call(),t=i.utils.toAscii(e.data);if(t.length>1){const e=JSON.parse(t);return Promise.resolve(e)}return Promise.resolve(null)}catch(e){return console.log("Error: ",e),Promise.resolve(null)}}requestedCredentialsCorrect(e,t){const n={success:!0,missingKeys:[]};for(const o of t.credentials)if(o.required&&"ADDITIONAL_INFO"===o.provider){const t=Object.keys(e.credentials[o.provider].credentials);for(const r of t){const t=e.credentials[o.provider].credentials[r];t.required&&t.key.find((e=>!e.answer))&&(n.success=!1,n.missingKeys.push(t))}}else if(o.required){Array.isArray(o.provider)||(o.provider=[o.provider]);let t=!1;for(const n of o.provider)e.credentials[n]&&e.credentials[n].credentials&&e.credentials[n].credentials[o.key]&&(t=!0);t||(n.success=!1,n.missingKeys.push(o))}return n}recoverAddressFromSignature(e,t,n){const o=new r.default;return!0===n?(e=this.sortObjectAlphabetically(JSON.parse(e)),o.eth.accounts.recover(JSON.stringify(e),t)):o.eth.accounts.recover(e,t)}signRequestedCredentials(e,t,n){e.proof={holder:t,nonce:Date.now(),type:a.ESignatureTypes.ECDSA};const o=this.getSignature(e,n);return e.proof.signature=o,e}async isValidRequestedCredentials(e,t,n){if(e?.proof?.signature){const o=JSON.parse(JSON.stringify(e));delete o.proof.signature;const i=this.recoverAddressFromSignature(JSON.stringify(o),e.proof.signature,!0),a=new r.default(t),c=e.id;if(i!==e.proof.holder)return console.error(`Recovered address ${i} does not match holder address ${e.proof.holder}`),!1;const l=new a.eth.Contract(n,this.getContractAddressFromDid(c)),u=this.getSha3Key(i,a),f=await this.getKeyPurpose(l,u);return f===s.EDIDAccessLevel.MANAGEMENT_KEY||f===s.EDIDAccessLevel.ACTION_KEY}return console.error("Requested Credentials doesn't have a signature in the proof. Not checking"),!1}async isValidLicense(e,t,n){const o=e.id,r=(await this.getClaim(i.EClaimType.COMPANY_INFO,this.getContractAddressFromDid(o),t,n))?.credentialSubject?.credential?.value?.status;return!!r&&!0===r}privateKeyToPublicKey(e){return(new r.default).eth.accounts.privateKeyToAccount(e).address}generateChallenge(e,t,n,o){const i=new r.default,s=Math.floor(Date.now()/1e3).toString(),a=`${e}-${t}-${n}-${s}`;return{did:t,publicKey:e,endpoint:n,timestamp:s,challenge:a,signature:i.eth.accounts.sign(a,o).signature}}getContractAddressFromDid(e){let t=e;const n=e.split(":");if(2===n.length)return console.error("Unsupported did:",e),null;if(3===n.length){if("did"!==n[0])return console.error("Unsupported did:",e),null;if("didux"!==n[1])return console.error("Unsupported chain:",n[1]),null;t=n[2]}return t}}},930:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SignalServerV2=void 0;const o=n(964),r=n(828),i=n(367),s=n(390),a=n(914);t.SignalServerV2=class{wsServer;wsRequest$=new o.Subject;startSignal(e){this.wsServer=new i.server({httpServer:e,autoAcceptConnections:!1}),this.wsServer.on("request",(async e=>{this.wsRequest$.next(e)}))}sendTo(e,t){e?e.sendUTF(JSON.stringify(t)):console.error("Tried to send this over undefined connection:",t)}rejectConnection(e,t){t.reject(),console.error((new Date).toISOString()+" "+e),console.error((new Date).toISOString()+" Connection from remoteAddress "+t.remoteAddresses+" rejected.")}async setupP2PConnection(e,t,n,o,i,c,l,u,f,d,p,h){const g=e.accept(null,e.origin);if(console.log(`Library - Accepted ${e.origin} valid signed ${t}`),g.uuid=(0,r.v4)(),g.did=t?e?.resourceURL?.query?.did?.toString():null,g.publicKey=t?e?.resourceURL?.query?.publickey?.toString():null,g.authenticated=t,g.channel=n,this.setupWebsocketListeners(g),"validator"===h&&t&&null===n||o&&null===n){g.host=!0,g.origin=h;const e=(0,s.getRTCConnectionConfig)("host",i,l,c);console.log("Library - Host waiting for connection"),this.sendTo(g,{type:"host",success:!0,message:`Host initialised ${g.uuid}`,channelId:g.uuid,signalServer:u,..."validator"===h&&{webRtcConnectionConfig:e}}),"validator"!==h&&(g.webRtcClient=new a.WebRTCClientV2(e,f,g,d,p),await g.webRtcClient.setupPeerconnection(g.uuid))}else if(null!==n){const e=this.wsServer.connections.find((e=>e.uuid===n&&null===e.channel&&!0===e.host));if(e){e.channel=g.uuid,g.channel=e.uuid,console.log(`Library - Client connecting to ${n}`);const t=(0,s.getRTCConnectionConfig)("client",i,l,c);this.sendTo(g,{type:"client",success:!0,message:`Client initialised ${g.uuid}`,channelId:n,webRtcConnectionConfig:t}),"validator"!==e.origin&&(e.webRtcClient.clientChannel=g,e.webRtcClient.data={...e.webRtcClient.data,clientData:p})}else g.close()}else console.error("Library - Not a client or host"),g.close();return g}setupWebsocketListeners(e){e.on("message",(async t=>{let n;try{"utf8Data"in t&&(n=JSON.parse(t.utf8Data))}catch(e){console.error("Library - Websocket connection invalid JSON",e),n={type:null}}const{type:o,offer:r,answer:i,candidate:s}=n;switch(o){case"offer":if(!e.host&&e.channel){const t=this.wsServer.connections.find((t=>t.channel===e.uuid&&!0===t.host));t?"validator"===t.origin?this.sendTo(t,{type:"offer",success:!0,message:"Client shared an offer",offer:r}):(await t.webRtcClient.setRemoteDescription(r),await t.webRtcClient.sendAnswer()):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close();break;case"answer":if(e.host&&e.channel&&"validator"===e.origin){const t=this.wsServer.connections.find((t=>t.channel===e.uuid));t?this.sendTo(t,{type:"answer",success:!0,message:"Client shared an answer",answer:i}):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close();break;case"candidate":if(e.channel){const t=this.wsServer.connections.find((t=>t.channel===e.uuid));t?"validator"===t.origin||"validator"===e.origin?this.sendTo(t,{type:"candidate",success:!0,message:"Candidate shared",candidate:s}):t.webRtcClient.addCandidate(s):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close()}})),e.on("close",((t,n)=>{console.log(`Library - ${(new Date).toISOString()} - Peer ${e.remoteAddress} disconnected, Reason ${t}, description ${n}`)}))}}},515:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.SignalingServer=void 0;const s=i(n(352)),a=n(828),c=i(n(85));t.SignalingServer=class{wsServer;rtcConnectionConfig;setRTCConnectionConfig(e){this.rtcConnectionConfig=e}getRTCConnectionConfig(e){if(this.rtcConnectionConfig.turnEnabled){const t=`${Math.floor(Date.now()/1e3)+this.rtcConnectionConfig.turnExpiration}:${e}`,n=c.createHmac("sha1",this.rtcConnectionConfig.turnSecret).update(t.toString()).digest("base64");return{iceCandidatePoolSize:5,iceServers:[{urls:this.rtcConnectionConfig.turnUrl,credential:n,username:t}]}}if(this.rtcConnectionConfig.stunEnabled)return{iceServers:[{urls:this.rtcConnectionConfig.stunUrl}]}}startSignal(e){this.wsServer=new s.Server({server:e});const t=(e,t)=>{e.send(JSON.stringify(t))};this.wsServer.on("connection",(e=>{e.uuid=(0,a.v4)(),e.did=null,e.host=!1,e.authenticated=!1,e.connected=null,e.on("error",(e=>{})),e.on("message",(n=>{let o;try{o=JSON.parse(n)}catch(e){o={}}const{type:r,token:i,host:s,offer:c,answer:l,candidate:u}=o;switch(r){case"auth":i?(e.authenticated=!0,t(e,{type:"AUTH",success:!0,message:"Authentication successful"})):t(e,{type:"auth",success:!1,message:"Could not validate token"});break;case"host":e.host=!0,t(e,{type:"host",success:!0,message:"Host initialised "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")});break;case"ping":t(e,{type:"pong"});break;case"connect":{const n=[...this.wsServer.clients].filter((e=>e.uuid===s&&null===e.connected&&!0===e.host));1===n.length?(t(n[0],{type:"connected",success:!0,message:"Client connected "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")}),t(e,{type:"connected",success:!0,message:"Connected to "+s,webRtcConnectionConfig:this.getRTCConnectionConfig("client")}),e.connected=n[0].uuid,n[0].connected=e.uuid):t(e,{type:"connected",success:!1,message:"Could not connect to "+s});break}case"offer":if(null!=e.connected&&this.wsServer.clients.size>0){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"offer",success:!0,offer:c}),t(e,{type:"offer",success:!0,offer:c})):t(e,{type:"offer",success:!1,offer:c,message:"Connection not found."})}else t(e,{type:"offer",success:!1,offer:c,message:"Too soon..."});break;case"answer":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"answer",success:!0,answer:l}),t(e,{type:"answer",success:!0,answer:l})):t(e,{type:"answer",success:!1,answer:l,message:"Connection not found."})}else t(e,{type:"answer",success:!1,answer:l,message:"Too soon..."});break;case"candidate":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?t(n[0],{type:"candidate",success:!0,candidate:u}):t(e,{type:"candidate",success:!1,candidate:u,message:"Connection not found."})}else t(e,{type:"candidate",success:!1,candidate:u,message:"Too soon..."});break;case"leave":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));e.uuid=(0,a.v4)(),1===n.length?(t(n[0],{type:"leave",success:!0,message:"Connection left on receive leave"}),n[0].connected=null,t(e,{type:"leave",success:!0,message:"Connection left.",uuid:e.uuid})):t(e,{type:"leave",success:!1,message:"Connection not found.",uuid:e.uuid}),e.connected=null}else e.uuid=(0,a.v4)(),t(e,{type:"leave",success:!1,message:"Not connected to host/client.",uuid:e.uuid});break;default:t(e,{type:"error",message:"Command not found: "+r})}})),e.on("close",((e,n,o)=>{if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length&&(t(n[0],{type:"leave",success:!0,message:"Connection left on websocket close"}),n[0].connected=null),e.connected=null}})),e.send(JSON.stringify({type:"connect",message:"Well hello there, I am the Signaling Server",success:!0}))}))}}},621:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.claimHolderAbi=void 0,t.claimHolderAbi=[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}]},906:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Identity=void 0,t.Identity={abi:[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_str",type:"bytes"},{name:"_offset",type:"uint256"},{name:"_length",type:"uint256"}],name:"getBytes",outputs:[{name:"",type:"bytes"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_str",type:"string"},{name:"_offset",type:"uint256"},{name:"_length",type:"uint256"}],name:"getString",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[{name:"_claimType",type:"uint256[]"},{name:"_scheme",type:"uint256[]"},{name:"_issuer",type:"address[]"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"},{name:"_sigSizes",type:"uint256[]"},{name:"dataSizes",type:"uint256[]"},{name:"uriSizes",type:"uint256[]"}],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}],data:"60806040523480156200001157600080fd5b50604051620033333803806200333383398101806040528101908080518201929190602001805182019291906020018051820192919060200180518201929190602001805182019291906020018051820192919060200180518201929190602001805182019291906020018051820192919050505060008060008060008033604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209050806001600083600019166000191681526020019081526020016000206002018160001916905550600180600083600019166000191681526020019081526020016000206000018190555060018060008360001916600019168152602001908152602001600020600101819055506002600060018152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600180600083600019166000191681526020019081526020016000206000015482600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a450600093506000925060009150600090505b8d51811015620007ba578b818151811015156200020f57fe5b906020019060200201518e828151811015156200022857fe5b90602001906020020151604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001925050506040518091039020945060c0604051908101604052808f83815181101515620002a657fe5b9060200190602002015181526020018e83815181101515620002c457fe5b9060200190602002015181526020018d83815181101515620002e257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1681526020016200033b8d878c868151811015156200031c57fe5b90602001906020020151620007ce640100000000026401000000009004565b8152602001620003748c858b868151811015156200035557fe5b90602001906020020151620007ce640100000000026401000000009004565b8152602001620003ad8b868a868151811015156200038e57fe5b90602001906020020151620008da640100000000026401000000009004565b815250600460008760001916600019168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019062000444929190620009ec565b50608082015181600401908051906020019062000463929190620009ec565b5060a08201518160050190805190602001906200048292919062000a73565b5090505087818151811015156200049557fe5b90602001906020020151840193508581815181101515620004b257fe5b90602001906020020151830192508681815181101515620004cf57fe5b906020019060200201518201915060046000866000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166004600087600019166000191681526020019081526020016000206000015486600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5600460008a6000191660001916815260200190815260200160002060010154600460008b60001916600019168152602001908152602001600020600301600460008c60001916600019168152602001908152602001600020600401600460008d60001916600019168152602001908152602001600020600501604051808581526020018060200180602001806020018481038452878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200068b5780601f106200065f576101008083540402835291602001916200068b565b820191906000526020600020905b8154815290600101906020018083116200066d57829003601f168201915b5050848103835286818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620007125780601f10620006e65761010080835404028352916020019162000712565b820191906000526020600020905b815481529060010190602001808311620006f457829003601f168201915b5050848103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620007995780601f106200076d5761010080835404028352916020019162000799565b820191906000526020600020905b8154815290600101906020018083116200077b57829003601f168201915b505097505050505050505060405180910390a48080600101915050620001f6565b505050505050505050505050505062000b22565b606080600080846040519080825280601f01601f191660200182016040528015620008085781602001602082028038833980820191505090505b509250600091508590505b848601811015620008cd5786818151811015156200082d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156200088757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505062000813565b8293505050509392505050565b6060806060600080879350856040519080825280601f01601f191660200182016040528015620009195781602001602082028038833980820191505090505b509250600091508690505b858701811015620009de5783818151811015156200093e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156200099857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505062000924565b829450505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a2f57805160ff191683800117855562000a60565b8280016001018555821562000a60579182015b8281111562000a5f57825182559160200191906001019062000a42565b5b50905062000a6f919062000afa565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000ab657805160ff191683800117855562000ae7565b8280016001018555821562000ae7579182015b8281111562000ae657825182559160200191906001019062000ac9565b5b50905062000af6919062000afa565b5090565b62000b1f91905b8082111562000b1b57600081600090555060010162000b01565b5090565b90565b6128018062000b326000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063032c1a8a146100d557806312aaac701461011a5780631d38124014610175578063262b54f5146101d25780634eee424a146102545780635d2cfd611461029d578063747442d314610393578063862642f5146103e45780639010f7261461042d578063b1a34e0d146104af578063b61d27f6146105f4578063c9100bcb1461069b578063d202158d1461085e578063df9319be146108b1575b600080fd5b3480156100e157600080fd5b5061010460048036038101908080356000191690602001909291905050506109a7565b6040518082815260200191505060405180910390f35b34801561012657600080fd5b5061014960048036038101908080356000191690602001909291905050506109cf565b604051808481526020018381526020018260001916600019168152602001935050505060405180910390f35b34801561018157600080fd5b506101b860048036038101908080356000191690602001909291908035906020019092919080359060200190929190505050610a3e565b604051808215151515815260200191505060405180910390f35b3480156101de57600080fd5b506101fd60048036038101908080359060200190929190505050610cf7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610240578082015181840152602081019050610225565b505050509050019250505060405180910390f35b34801561026057600080fd5b506102836004803603810190808035600019169060200190929190505050610d66565b604051808215151515815260200191505060405180910390f35b3480156102a957600080fd5b50610318600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001909291905050506111e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035857808201518184015260208101905061033d565b50505050905090810190601f1680156103855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039f57600080fd5b506103ca600480360381019080803590602001909291908035151590602001909291905050506112eb565b604051808215151515815260200191505060405180910390f35b3480156103f057600080fd5b5061041360048036038101908080356000191690602001909291905050506117ff565b604051808215151515815260200191505060405180910390f35b34801561043957600080fd5b506104586004803603810190808035906020019092919050505061196a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561049b578082015181840152602081019050610480565b505050509050019250505060405180910390f35b3480156104bb57600080fd5b506105d66004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506119d9565b60405180826000191660001916815260200191505060405180910390f35b34801561060057600080fd5b50610685600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611efe565b6040518082815260200191505060405180910390f35b3480156106a757600080fd5b506106ca60048036038101908080356000191690602001909291905050506121e0565b604051808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610750578082015181840152602081019050610735565b50505050905090810190601f16801561077d5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156107b657808201518184015260208101905061079b565b50505050905090810190601f1680156107e35780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561081c578082015181840152602081019050610801565b50505050905090810190601f1680156108495780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561086a57600080fd5b506108976004803603810190808035600019169060200190929190803590602001909291905050506124aa565b604051808215151515815260200191505060405180910390f35b3480156108bd57600080fd5b5061092c600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050612513565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096c578082015181840152602081019050610951565b50505050905090810190601f1680156109995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000600160008360001916600019168152602001908152602001600020600001549050919050565b60008060006001600085600019166000191681526020019081526020016000206000015460016000866000191660001916815260200190815260200160002060010154600160008760001916600019168152602001908152602001600020600201549250925092509193909250565b60008360001916600160008660001916600019168152602001908152602001600020600201546000191614151515610ade576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b657920616c726561647920657869737473000000000000000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0957610b6e33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b1515610c08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742081526020017f6b6579000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8360016000866000191660001916815260200190815260200160002060020181600019169055508260016000866000191660001916815260200190815260200160002060000181905550816001600086600019166000191681526020019081526020016000206001018190555060026000848152602001908152602001600020849080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550818385600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a4600190509392505050565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610d5a57602002820191906000526020600020905b81546000191681526020019060010190808311610d42575b50505050509050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e9357610df833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b1515610e92576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742081526020017f6b6579000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b60046000836000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166004600084600019166000191681526020019081526020016000206000015483600019167f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a60046000876000191660001916815260200190815260200160002060010154600460008860001916600019168152602001908152602001600020600301600460008960001916600019168152602001908152602001600020600401600460008a600019166000191681526020019081526020016000206005016040518085815260200180602001806020018060200184810384528781815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561103d5780601f106110125761010080835404028352916020019161103d565b820191906000526020600020905b81548152906001019060200180831161102057829003601f168201915b50508481038352868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156110c05780601f10611095576101008083540402835291602001916110c0565b820191906000526020600020905b8154815290600101906020018083116110a357829003601f168201915b50508481038252858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156111435780601f1061111857610100808354040283529160200191611143565b820191906000526020600020905b81548152906001019060200180831161112657829003601f168201915b505097505050505050505060405180910390a460046000836000191660001916815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006111b99190612620565b6004820160006111c99190612620565b6005820160006111d99190612668565b505060019050919050565b606080600080846040519080825280601f01601f19166020018201604052801561121d5781602001602082028038833980820191505090505b509250600091508590505b8486018110156112de57868181518110151561124057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838381518110151561129957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250508080600101915050611228565b8293505050509392505050565b600061134833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060026124aa565b15156113bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f53656e64657220646f6573206e6f74206861766520616374696f6e206b65790081525060200191505060405180910390fd5b827fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d883604051808215151515815260200191505060405180910390a26001151582151514156117c55760016003600085815260200190815260200160002060030160006101000a81548160ff0219169083151502179055506003600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660036000858152602001908152602001600020600201600060405180838054600181600116156101000203166002900480156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b50508260ff168152602001925050506000604051808303816000865af19150509050801561168d5760016003600085815260200190815260200160002060030160016101000a81548160ff02191690831515021790555060036000848152602001908152602001600020600101546003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b860036000888152602001908152602001600020600201604051808060200182810382528381815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561167a5780601f1061164f5761010080835404028352916020019161167a565b820191906000526020600020905b81548152906001019060200180831161165d57829003601f168201915b50509250505060405180910390a46117f9565b60036000848152602001908152602001600020600101546003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a686003600088815260200190815260200160002060020160405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156117b25780601f10611787576101008083540402835291602001916117b2565b820191906000526020600020905b81548152906001019060200180831161179557829003601f168201915b50509250505060405180910390a46117f9565b60006003600085815260200190815260200160002060030160006101000a81548160ff021916908315150217905550600190505b92915050565b60008160001916600160008460001916600019168152602001908152602001600020600201546000191614151561189e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f2073756368206b657900000000000000000000000000000000000000000081525060200191505060405180910390fd5b600160008360001916600019168152602001908152602001600020600101546001600084600019166000191681526020019081526020016000206000015460016000856000191660001916815260200190815260200160002060020154600019167f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339760405160405180910390a460016000836000191660001916815260200190815260200160002060008082016000905560018201600090556002820160009055505060019050919050565b6060600260008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119cd57602002820191906000526020600020905b815460001916815260200190600101908083116119b5575b50505050509050919050565b6000808588604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200192505050604051809103902090503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b6257611ac733604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060036124aa565b1515611b61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f53656e64657220646f6573206e6f74206861766520636c61696d207369676e6581526020017f72206b657900000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8573ffffffffffffffffffffffffffffffffffffffff1660046000836000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611c1957600560008981526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505b876004600083600019166000191681526020019081526020016000206000018190555086600460008360001916600019168152602001908152602001600020600101819055508560046000836000191660001916815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846004600083600019166000191681526020019081526020016000206003019080519060200190611cee9291906126b0565b50836004600083600019166000191681526020019081526020016000206004019080519060200190611d219291906126b0565b50826004600083600019166000191681526020019081526020016000206005019080519060200190611d54929190612730565b508573ffffffffffffffffffffffffffffffffffffffff168882600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c58a89898960405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015611de5578082015181840152602081019050611dca565b50505050905090810190601f168015611e125780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611e4b578082015181840152602081019050611e30565b50505050905090810190601f168015611e785780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015611eb1578082015181840152602081019050611e96565b50505050905090810190601f168015611ede5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a4809150509695505050505050565b6000600360008054815260200190815260200160002060030160019054906101000a900460ff16151515611f9a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f416c72656164792065786563757465640000000000000000000000000000000081525060200191505060405180910390fd5b83600360008054815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260036000805481526020019081526020016000206001018190555081600360008054815260200190815260200160002060020190805190602001906120379291906126b0565b50828473ffffffffffffffffffffffffffffffffffffffff166000547f8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8856040518080602001828103825283818151815260200191508051906020019080838360005b838110156120b557808201518184015260208101905061209a565b50505050905090810190601f1680156120e25780820380516001836020036101000a031916815260200191505b509250505060405180910390a461214a33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b806121ac57506121ab33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060026124aa565b5b156121c0576121be60005460016112eb565b505b600080815480929190600101919050555060016000540390509392505050565b600080600060608060606004600088600019166000191681526020019081526020016000206000015460046000896000191660001916815260200190815260200160002060010154600460008a6000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008b60001916600019168152602001908152602001600020600301600460008c60001916600019168152602001908152602001600020600401600460008d60001916600019168152602001908152602001600020600501828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123565780601f1061232b57610100808354040283529160200191612356565b820191906000526020600020905b81548152906001019060200180831161233957829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123f25780601f106123c7576101008083540402835291602001916123f2565b820191906000526020600020905b8154815290600101906020018083116123d557829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561248e5780601f106124635761010080835404028352916020019161248e565b820191906000526020600020905b81548152906001019060200180831161247157829003601f168201915b5050505050905095509550955095509550955091939550919395565b6000806000600102600160008660001916600019168152602001908152602001600020600201546000191614156124e4576000915061250c565b8260016000866000191660001916815260200190815260200160002060000154111590508091505b5092915050565b6060806060600080879350856040519080825280601f01601f1916602001820160405280156125515781602001602082028038833980820191505090505b509250600091508690505b85870181101561261257838181518110151561257457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156125cd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505061255c565b829450505050509392505050565b50805460018160011615610100020316600290046000825580601f106126465750612665565b601f01602090049060005260206000209081019061266491906127b0565b5b50565b50805460018160011615610100020316600290046000825580601f1061268e57506126ad565b601f0160209004906000526020600020908101906126ac91906127b0565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126f157805160ff191683800117855561271f565b8280016001018555821561271f579182015b8281111561271e578251825591602001919060010190612703565b5b50905061272c91906127b0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061277157805160ff191683800117855561279f565b8280016001018555821561279f579182015b8281111561279e578251825591602001919060010190612783565b5b5090506127ac91906127b0565b5090565b6127d291905b808211156127ce5760008160009055506001016127b6565b5090565b905600a165627a7a723058200017634e62c856198c9c8d204756bd9ed5e12ca97b230682c6cc941e813b81330029"}},733:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSubDomain=void 0,t.getSubDomain=function(e){return e?.replace("http://","").replace("https://","").split(":")[0]}},918:function(e,t,n){"use strict";var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.checkKeyForDid=void 0;const r=n(906),i=o(n(519));t.checkKeyForDid=async function(e,t,n,o){try{const s=new i.default(e),a=new s.eth.Contract(r.Identity.abi,t),c=s.utils.sha3(n);return await a.methods.keyHasPurpose(c,o).call()}catch(e){return console.log("Library - Something went wrong: "+e),!1}}},299:function(e,t,n){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,n,o){void 0===o&&(o=n),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,o){void 0===o&&(o=n),e[o]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&o(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.WebRtcProvider=void 0;const s=n(964),a=n(904),c=n(367),l=i(n(9));class u{webRtcConfig;hostUuid;peerConnection=null;dataChannel=null;wsClient=null;receivedActions$=new s.BehaviorSubject(null);uuid$=new s.BehaviorSubject(null);websocketMessage$=new s.BehaviorSubject(null);websocketConnectionClosed$=new s.BehaviorSubject(null);websocketConnectionOpen$=new s.BehaviorSubject(null);websocketConnectionError$=new s.BehaviorSubject(null);webRtcConnectionConfig;connectionTimeout=null;pongCheckInterval=null;pingTimeout=null;WEBSOCKET_PING_ANSWER_DELAY=1e3;WEBSOCKET_PING_PONG_ALLOWED_TIME=3e3;getConfig(){return this.webRtcConfig}setHostUuid(e){this.hostUuid=e}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?(console.log(`Library - Sending action '${e}'`),this.dataChannel.send(JSON.stringify({action:e,...t}))):console.error(`Websocket - Attempted to send data with action ${e} but data channel is not open`)}sendWebsocketData(e,t){return this.wsClient&&this.wsClient.readyState===this.wsClient.OPEN?(this.wsClient.send(JSON.stringify({action:e,...t})),!0):(console.error(`Websocket - Attempted to send data with action ${e} but websocket channel is not open`),!1)}getWebsocket(){return this.wsClient}setUuid(e){this.uuid$.next(e)}disconnect(){clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),this.peerConnection&&this.peerConnection.close(),this.dataChannel&&this.dataChannel.close(),this.wsClient&&(this.wsClient.close(),this.wsClient.onclose=null),this.peerConnection=null,this.dataChannel=null,this.wsClient=null,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)}remoteDisconnect(){this.dataChannel&&"open"===this.dataChannel.readyState&&this.dataChannel.send(JSON.stringify({action:"disconnect"})),setTimeout((()=>{this.disconnect()}),1e3)}async sendOffer(e,t){const n=await e.createOffer();await e.setLocalDescription(n),t.send(JSON.stringify({type:"offer",offer:n}))}async launchWebsocketClient(e,t){this.webRtcConfig=e;let n=null;this.receivedActions$=new s.BehaviorSubject(null),this.connectionTimeout&&clearTimeout(this.connectionTimeout),this.uuid$=new s.BehaviorSubject(null),this.websocketMessage$=new s.BehaviorSubject(null),this.websocketConnectionClosed$=new s.BehaviorSubject(null),this.websocketConnectionOpen$=new s.BehaviorSubject(null),this.websocketConnectionError$=new s.BehaviorSubject(null);let o=this.webRtcConfig.signalingUrl;o||(console.log("Launch websocket - URL undefined, falling back to default"),o="wss://auth.proofme.id"),console.log("Launch websocket - Client URL:",o),console.log("Launch websocket - Channel:",e.channel),console.log("Launch websocket - Headers:",t);let r=null;r=o.includes("?")?`${o}&channel=${e.channel}`:`${o}?channel=${e.channel}`,e.data&&(r=`${r}&data=${e.data}`),e.keepalive&&(r=`${r}&keepalive=${e.keepalive}`),this.wsClient=new c.w3cwebsocket(r,null,null,t),this.connectionTimeout=setTimeout((()=>{!0!==n&&(this.websocketConnectionError$.next(!0),this.wsClient&&this.wsClient.close())}),1e4),this.wsClient.onerror=e=>{console.log("Websocket - Error: "+e.toString()),n=!1,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1),this.websocketConnectionError$.next(!0)},this.wsClient.onclose=()=>{console.log("Websocket - Connection closed"),this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)},this.wsClient.onopen=()=>{console.log("Websocket - Connection open"),n=!0,this.websocketConnectionClosed$.next(!1),this.websocketConnectionOpen$.next(!0)},this.wsClient.onmessage=async e=>{if(console.log("Websocket - Message:",e),this.websocketMessage$.next(e),e.data){let t;try{t=JSON.parse(e.data)}catch(e){console.error("Websocket - Message was not JSON"),t={}}const{type:n,message:o,success:r,channelId:i,offer:s,answer:c,candidate:l,webRtcConnectionConfig:u}=t;switch(n){case"error":console.log("Websocket - Error message:",o),"Command not found: ping"==o&&(clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{console.log(`Websocket - Ping pong took more than ${this.WEBSOCKET_PING_PONG_ALLOWED_TIME}ms. Disconnecting`),this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing());break;case"connect":if(r)if(this.webRtcConfig.isHost){const e=500;let t=0;const n=setInterval((()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"host"}))),t>=e&&clearInterval(n),t++}),50)}else{const e=500;let t=0;const n=setInterval((async()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"connect",host:this.hostUuid}))),t>=e&&clearInterval(n),t++}),50)}break;case"connected":clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),u&&(this.webRtcConnectionConfig=u,this.webRtcConfig.isHost||await this.setupPeerconnection(this.hostUuid)),i&&this.webRtcConfig.isHost&&await this.sendOffer(this.peerConnection,this.wsClient);break;case"pong":clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing();break;case"offer":if(s){await this.peerConnection.setRemoteDescription(new a.RTCSessionDescription(s));const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.wsClient.send(JSON.stringify({type:"answer",answer:e}))}break;case"host":i&&this.webRtcConfig.isHost&&(this.setUuid(i),u&&(this.webRtcConnectionConfig=u),await this.setupPeerconnection(i),this.sendPing());break;case"leave":this.setUuid(null),this.disconnect();break;case"answer":c&&await this.peerConnection.setRemoteDescription(new a.RTCSessionDescription(c));break;case"candidate":if(l){const e=new a.RTCIceCandidate(l);await this.peerConnection.addIceCandidate(e)}break;case"client":u&&(this.webRtcConnectionConfig=u,this.webRtcConfig.isHost||(await this.setupPeerconnection(this.hostUuid),await this.sendOffer(this.peerConnection,this.wsClient)))}}}}sendPing(){this.pingTimeout=setTimeout((()=>{1===this.wsClient.readyState&&this.wsClient.send(JSON.stringify({type:"ping"}))}),this.WEBSOCKET_PING_ANSWER_DELAY)}async setupPeerconnection(e){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){console.log("P2P - Message invalid JSON:",e)}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.sendP2PData("clientconnected",{success:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new a.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}async setupClientPeerconnection(){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){console.log("P2P - Message invalid JSON:",e)}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.sendP2PData("clientconnected",{success:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new a.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}static ɵfac=function(e){return new(e||u)};static ɵprov=l.ɵɵdefineInjectable({token:u,factory:u.ɵfac})}t.WebRtcProvider=u},914:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebRTCClientV2=void 0;const o=n(964),r=n(904);t.WebRTCClientV2=class{peerConnection=null;dataChannel=null;clientChannel;webRtcConnectionConfig;requestedCredentials;hostWsConnection;actionType;dataChannelOpen$=new o.Subject;dataChannelMessage$=new o.Subject;data;constructor(e,t,n,o,r){this.webRtcConnectionConfig=e,this.requestedCredentials=t,this.hostWsConnection=n,this.actionType=o,this.data=r}async setupPeerconnection(e){this.peerConnection=new r.RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new r.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.clientChannel.sendUTF(JSON.stringify({type:"candidate",candidate:e.candidate}))}})),this.peerConnection.addEventListener("iceconnectionstatechange",(()=>{"disconnected"===this.peerConnection.iceConnectionState&&this.peerConnection.close()})),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{try{const t=JSON.parse(e.data);this.dataChannelMessage$.next(t)}catch(e){console.error("Could not parse message:",e)}},e.channel.onopen=async()=>{console.log("Library - Datachannel connected"),this.hostWsConnection.sendUTF(JSON.stringify({type:"clientconnected",success:!0})),this.dataChannelOpen$.next()},e.channel.onclose=e=>{console.log("Library - Datachannel onclose:",e),this.hostWsConnection.sendUTF(JSON.stringify({type:"disconnect"}))}}))}async sendOffer(){const e=await this.peerConnection.createOffer();await this.peerConnection.setLocalDescription(e),this.clientChannel.sendUTF(JSON.stringify({type:"offer",offer:e}))}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?(console.log(`Library - Sending action '${e}'`),this.dataChannel.send(JSON.stringify({action:e,...t}))):console.error(`Library - Attempted to send data with action ${e} but data channel is not open`)}async setRemoteDescription(e){await this.peerConnection.setRemoteDescription(new r.RTCSessionDescription(e))}async addCandidate(e){try{const t=new r.RTCIceCandidate(e);await this.peerConnection.addIceCandidate(t)}catch(e){console.error(e)}}async sendAnswer(){const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.clientChannel.sendUTF(JSON.stringify({type:"answer",answer:e}))}}},964:e=>{"use strict";e.exports=require("rxjs")},828:e=>{"use strict";e.exports=require("uuid")},519:e=>{"use strict";e.exports=require("web3")},367:e=>{"use strict";e.exports=require("websocket")},904:e=>{"use strict";e.exports=require("wrtc")},352:e=>{"use strict";e.exports=require("ws")},235:()=>{},85:()=>{},9:(e,t,n)=>{"use strict";n.r(t),n.d(t,{ANALYZE_FOR_ENTRY_COMPONENTS:()=>dr,APP_BOOTSTRAP_LISTENER:()=>Vm,APP_ID:()=>Am,APP_INITIALIZER:()=>Sm,ApplicationInitStatus:()=>Om,ApplicationModule:()=>fb,ApplicationRef:()=>wv,Attribute:()=>ur,COMPILER_OPTIONS:()=>Km,CUSTOM_ELEMENTS_SCHEMA:()=>As,ChangeDetectionStrategy:()=>Qe,ChangeDetectorRef:()=>Ov,Compiler:()=>zm,CompilerFactory:()=>Jm,Component:()=>_m,ComponentFactory:()=>sg,ComponentFactoryResolver:()=>cg,ComponentRef:()=>ig,ContentChild:()=>gr,ContentChildren:()=>hr,DEFAULT_CURRENCY_CODE:()=>Hm,DebugElement:()=>Vv,DebugEventListener:()=>Pv,DebugNode:()=>jv,DefaultIterableDiffer:()=>Jv,Directive:()=>wm,ElementRef:()=>ug,EmbeddedViewRef:()=>Nv,ErrorHandler:()=>Os,EventEmitter:()=>iy,Host:()=>ei,HostBinding:()=>xm,HostListener:()=>Im,INJECTOR:()=>Pl,Inject:()=>Zr,InjectFlags:()=>ze,Injectable:()=>uf,InjectionToken:()=>fr,Injector:()=>Gl,Input:()=>Dm,IterableDiffers:()=>ob,KeyValueDiffers:()=>ib,LOCALE_ID:()=>Fm,MissingTranslationStrategy:()=>Wm,ModuleWithComponentFactories:()=>qm,NO_ERRORS_SCHEMA:()=>ks,NgModule:()=>Em,NgModuleFactory:()=>Eg,NgModuleRef:()=>Ig,NgProbeToken:()=>dv,NgZone:()=>Qm,Optional:()=>Qr,Output:()=>Mm,PACKAGE_ROOT_URL:()=>$m,PLATFORM_ID:()=>jm,PLATFORM_INITIALIZER:()=>Rm,Pipe:()=>Cm,PlatformRef:()=>vv,Query:()=>pr,QueryList:()=>ay,ReflectiveInjector:()=>Of,ReflectiveKey:()=>gf,Renderer2:()=>pg,RendererFactory2:()=>dg,RendererStyleFlags2:()=>qs,ResolvedReflectiveFactory:()=>_f,Sanitizer:()=>hg,SecurityContext:()=>cs,Self:()=>Yr,SimpleChange:()=>tn,SkipSelf:()=>Xr,TRANSLATIONS:()=>Um,TRANSLATIONS_FORMAT:()=>Bm,TemplateRef:()=>cy,Testability:()=>rv,TestabilityRegistry:()=>iv,Type:()=>_r,VERSION:()=>yg,Version:()=>gg,ViewChild:()=>mr,ViewChildren:()=>yr,ViewContainerRef:()=>dy,ViewEncapsulation:()=>Xe,ViewRef:()=>kv,asNativeElements:()=>Rv,assertPlatform:()=>gv,createNgModuleRef:()=>Ag,createPlatform:()=>pv,createPlatformFactory:()=>hv,defineInjectable:()=>Ve,destroyPlatform:()=>yv,enableProdMode:()=>Iv,forwardRef:()=>ue,getDebugNode:()=>Wv,getModuleFactory:()=>Ev,getNgModuleById:()=>Tv,getPlatform:()=>mv,inject:()=>Kr,isDevMode:()=>xv,platformCore:()=>ub,resolveForwardRef:()=>fe,setTestabilityGetter:()=>sv,ɵALLOW_MULTIPLE_PLATFORMS:()=>fv,ɵAPP_ID_RANDOM_PROVIDER:()=>Nm,ɵChangeDetectorStatus:()=>Ye,ɵComponentFactory:()=>sg,ɵConsole:()=>Lm,ɵDEFAULT_LOCALE_ID:()=>Vp,ɵINJECTOR_SCOPE:()=>jl,ɵLifecycleHooksFeature:()=>gu,ɵLocaleDataIndex:()=>Rp,ɵNG_COMP_DEF:()=>lt,ɵNG_DIR_DEF:()=>ut,ɵNG_ELEMENT_ID:()=>ht,ɵNG_INJ_DEF:()=>Be,ɵNG_MOD_DEF:()=>dt,ɵNG_PIPE_DEF:()=>ft,ɵNG_PROV_DEF:()=>Ue,ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR:()=>mg,ɵNO_CHANGE:()=>Ha,ɵNgModuleFactory:()=>Ng,ɵNoopNgZone:()=>ov,ɵReflectionCapabilities:()=>Rr,ɵRender3ComponentFactory:()=>Dg,ɵRender3ComponentRef:()=>Mg,ɵRender3NgModuleRef:()=>kg,ɵRuntimeError:()=>pe,ɵViewRef:()=>bg,ɵ_sanitizeHtml:()=>ss,ɵ_sanitizeUrl:()=>$i,ɵallowSanitizationBypassAndThrow:()=>Ii,ɵbypassSanitizationTrustHtml:()=>Ti,ɵbypassSanitizationTrustResourceUrl:()=>ki,ɵbypassSanitizationTrustScript:()=>Oi,ɵbypassSanitizationTrustStyle:()=>Si,ɵbypassSanitizationTrustUrl:()=>Ai,ɵclearResolutionOfComponentResourcesQueue:()=>li,ɵcompileComponent:()=>om,ɵcompileDirective:()=>rm,ɵcompileNgModule:()=>Uy,ɵcompileNgModuleDefs:()=>By,ɵcompileNgModuleFactory:()=>lv,ɵcompilePipe:()=>vm,ɵcreateInjector:()=>Hl,ɵdefaultIterableDiffers:()=>cb,ɵdefaultKeyValueDiffers:()=>lb,ɵdetectChanges:()=>kl,ɵdevModeEqual:()=>Tu,ɵfindLocaleData:()=>Op,ɵflushModuleScopingQueueAsMuchAsPossible:()=>Fy,ɵgetDebugNode:()=>Wv,ɵgetDebugNodeR2:()=>qv,ɵgetDirectives:()=>tu,ɵgetHostElement:()=>ou,ɵgetInjectableDef:()=>Le,ɵgetLContext:()=>vs,ɵgetLocaleCurrencyCode:()=>Ap,ɵgetLocalePluralCase:()=>kp,ɵgetSanitizationBypassType:()=>Ei,ɵglobal:()=>it,ɵinjectChangeDetectorRef:()=>Av,ɵisBoundToModule:()=>uv,ɵisDefaultChangeDetectionStrategy:()=>et,ɵisListLikeIterable:()=>Su,ɵisObservable:()=>qf,ɵisPromise:()=>Bf,ɵisSubscribable:()=>Wf,ɵivyEnabled:()=>db,ɵmakeDecorator:()=>sr,ɵmarkDirty:()=>Nl,ɵnoSideEffects:()=>Ze,ɵpatchComponentDefWithScope:()=>Yy,ɵpublishDefaultGlobalUtils:()=>lu,ɵpublishGlobalUtil:()=>uu,ɵregisterLocaleData:()=>Sp,ɵregisterNgModuleType:()=>Sg,ɵrenderComponent:()=>fu,ɵresetCompiledComponents:()=>Gy,ɵresetJitOptions:()=>Vy,ɵresolveComponentResources:()=>ii,ɵsetClassMetadata:()=>xg,ɵsetCurrentInjector:()=>Br,ɵsetDocument:()=>hn,ɵsetLocaleId:()=>Up,ɵstore:()=>of,ɵstringify:()=>ae,ɵtransitiveScopesFor:()=>Xy,ɵunregisterLocaleData:()=>Pp,ɵunwrapSafeValue:()=>xi,ɵwhenRendered:()=>yu,ɵɵCopyDefinitionFeature:()=>xu,ɵɵFactoryTarget:()=>vr,ɵɵInheritDefinitionFeature:()=>vu,ɵɵNgOnChangesFeature:()=>nn,ɵɵProvidersFeature:()=>rg,ɵɵadvance:()=>Ua,ɵɵattribute:()=>Vu,ɵɵattributeInterpolate1:()=>Ku,ɵɵattributeInterpolate2:()=>Ju,ɵɵattributeInterpolate3:()=>Gu,ɵɵattributeInterpolate4:()=>Zu,ɵɵattributeInterpolate5:()=>Qu,ɵɵattributeInterpolate6:()=>Yu,ɵɵattributeInterpolate7:()=>Xu,ɵɵattributeInterpolate8:()=>ef,ɵɵattributeInterpolateV:()=>tf,ɵɵclassMap:()=>Ed,ɵɵclassMapInterpolate1:()=>Qd,ɵɵclassMapInterpolate2:()=>Yd,ɵɵclassMapInterpolate3:()=>Xd,ɵɵclassMapInterpolate4:()=>ep,ɵɵclassMapInterpolate5:()=>tp,ɵɵclassMapInterpolate6:()=>np,ɵɵclassMapInterpolate7:()=>op,ɵɵclassMapInterpolate8:()=>rp,ɵɵclassMapInterpolateV:()=>ip,ɵɵclassProp:()=>Md,ɵɵcontentQuery:()=>Sy,ɵɵdefineComponent:()=>yt,ɵɵdefineDirective:()=>Mt,ɵɵdefineInjectable:()=>je,ɵɵdefineInjector:()=>$e,ɵɵdefineNgModule:()=>_t,ɵɵdefinePipe:()=>xt,ɵɵdirectiveInject:()=>kf,ɵɵdisableBindings:()=>Nn,ɵɵelement:()=>$f,ɵɵelementContainer:()=>Hf,ɵɵelementContainerEnd:()=>Ff,ɵɵelementContainerStart:()=>Lf,ɵɵelementEnd:()=>Vf,ɵɵelementStart:()=>jf,ɵɵenableBindings:()=>kn,ɵɵgetCurrentView:()=>Uf,ɵɵgetInheritedFactory:()=>er,ɵɵhostProperty:()=>Mp,ɵɵi18n:()=>zh,ɵɵi18nApply:()=>Gh,ɵɵi18nAttributes:()=>Kh,ɵɵi18nEnd:()=>qh,ɵɵi18nExp:()=>Jh,ɵɵi18nPostprocess:()=>Zh,ɵɵi18nStart:()=>Wh,ɵɵinject:()=>qr,ɵɵinjectAttribute:()=>nr,ɵɵinvalidFactory:()=>Nf,ɵɵinvalidFactoryDep:()=>zr,ɵɵlistener:()=>zf,ɵɵloadQuery:()=>Oy,ɵɵnamespaceHTML:()=>yo,ɵɵnamespaceMathML:()=>go,ɵɵnamespaceSVG:()=>ho,ɵɵnextContext:()=>Qf,ɵɵngDeclareClassMetadata:()=>hb,ɵɵngDeclareComponent:()=>gb,ɵɵngDeclareDirective:()=>pb,ɵɵngDeclareFactory:()=>yb,ɵɵngDeclareInjectable:()=>vb,ɵɵngDeclareInjector:()=>bb,ɵɵngDeclareNgModule:()=>wb,ɵɵngDeclarePipe:()=>_b,ɵɵpipe:()=>Zg,ɵɵpipeBind1:()=>Qg,ɵɵpipeBind2:()=>Yg,ɵɵpipeBind3:()=>Xg,ɵɵpipeBind4:()=>ey,ɵɵpipeBindV:()=>ty,ɵɵprojection:()=>ed,ɵɵprojectionDef:()=>Xf,ɵɵproperty:()=>Pf,ɵɵpropertyInterpolate:()=>td,ɵɵpropertyInterpolate1:()=>nd,ɵɵpropertyInterpolate2:()=>od,ɵɵpropertyInterpolate3:()=>rd,ɵɵpropertyInterpolate4:()=>id,ɵɵpropertyInterpolate5:()=>sd,ɵɵpropertyInterpolate6:()=>ad,ɵɵpropertyInterpolate7:()=>cd,ɵɵpropertyInterpolate8:()=>ld,ɵɵpropertyInterpolateV:()=>ud,ɵɵpureFunction0:()=>Pg,ɵɵpureFunction1:()=>Rg,ɵɵpureFunction2:()=>jg,ɵɵpureFunction3:()=>Vg,ɵɵpureFunction4:()=>$g,ɵɵpureFunction5:()=>Lg,ɵɵpureFunction6:()=>Fg,ɵɵpureFunction7:()=>Hg,ɵɵpureFunction8:()=>Ug,ɵɵpureFunctionV:()=>Bg,ɵɵqueryRefresh:()=>Ey,ɵɵreference:()=>rf,ɵɵresolveBody:()=>Fs,ɵɵresolveDocument:()=>Ls,ɵɵresolveWindow:()=>$s,ɵɵrestoreView:()=>jn,ɵɵsanitizeHtml:()=>ls,ɵɵsanitizeResourceUrl:()=>ds,ɵɵsanitizeScript:()=>ps,ɵɵsanitizeStyle:()=>us,ɵɵsanitizeUrl:()=>fs,ɵɵsanitizeUrlOrResourceUrl:()=>ys,ɵɵsetComponentScope:()=>mt,ɵɵsetNgModuleScope:()=>Ct,ɵɵstyleMap:()=>xd,ɵɵstyleMapInterpolate1:()=>sp,ɵɵstyleMapInterpolate2:()=>ap,ɵɵstyleMapInterpolate3:()=>cp,ɵɵstyleMapInterpolate4:()=>lp,ɵɵstyleMapInterpolate5:()=>up,ɵɵstyleMapInterpolate6:()=>fp,ɵɵstyleMapInterpolate7:()=>dp,ɵɵstyleMapInterpolate8:()=>pp,ɵɵstyleMapInterpolateV:()=>hp,ɵɵstyleProp:()=>Dd,ɵɵstylePropInterpolate1:()=>gp,ɵɵstylePropInterpolate2:()=>yp,ɵɵstylePropInterpolate3:()=>mp,ɵɵstylePropInterpolate4:()=>vp,ɵɵstylePropInterpolate5:()=>bp,ɵɵstylePropInterpolate6:()=>wp,ɵɵstylePropInterpolate7:()=>_p,ɵɵstylePropInterpolate8:()=>Cp,ɵɵstylePropInterpolateV:()=>Dp,ɵɵsyntheticHostListener:()=>Kf,ɵɵsyntheticHostProperty:()=>xp,ɵɵtemplate:()=>nf,ɵɵtemplateRefExtractor:()=>Py,ɵɵtext:()=>Fd,ɵɵtextInterpolate:()=>Hd,ɵɵtextInterpolate1:()=>Ud,ɵɵtextInterpolate2:()=>Bd,ɵɵtextInterpolate3:()=>Wd,ɵɵtextInterpolate4:()=>qd,ɵɵtextInterpolate5:()=>zd,ɵɵtextInterpolate6:()=>Kd,ɵɵtextInterpolate7:()=>Jd,ɵɵtextInterpolate8:()=>Gd,ɵɵtextInterpolateV:()=>Zd,ɵɵtrustConstantHtml:()=>hs,ɵɵtrustConstantResourceUrl:()=>gs,ɵɵviewQuery:()=>Ty});var o=n(964);const r=require("tslib");var i=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function s(e){return"function"==typeof e}function a(e){return s(null==e?void 0:e.then)}function c(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var l=c((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function u(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var f=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}return e.prototype.unsubscribe=function(){var e,t,n,o,i;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var c=(0,r.__values)(a),u=c.next();!u.done;u=c.next())u.value.remove(this)}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}else a.remove(this);var f=this.initialTeardown;if(s(f))try{f()}catch(e){i=e instanceof l?e.errors:[e]}var d=this._teardowns;if(d){this._teardowns=null;try{for(var p=(0,r.__values)(d),g=p.next();!g.done;g=p.next()){var y=g.value;try{h(y)}catch(e){i=null!=i?i:[],e instanceof l?i=(0,r.__spreadArray)((0,r.__spreadArray)([],(0,r.__read)(i)),(0,r.__read)(e.errors)):i.push(e)}}}catch(e){n={error:e}}finally{try{g&&!g.done&&(o=p.return)&&o.call(p)}finally{if(n)throw n.error}}}if(i)throw new l(i)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)h(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&u(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&u(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}(),d=f.EMPTY;function p(e){return e instanceof f||e&&"closed"in e&&s(e.remove)&&s(e.add)&&s(e.unsubscribe)}function h(e){s(e)?e():e.unsubscribe()}var g=null,y=null,m=void 0,v=!1,b=!1,w={setTimeout:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=w.delegate;return((null==n?void 0:n.setTimeout)||setTimeout).apply(void 0,(0,r.__spreadArray)([],(0,r.__read)(e)))},clearTimeout:function(e){var t=w.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function _(e){w.setTimeout((function(){if(!g)throw e;g(e)}))}function C(){}var D=M("C",void 0,void 0);function M(e,t,n){return{kind:e,value:t,error:n}}var x=null;function I(e){if(v){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,o=n.errorThrown,r=n.error;if(x=null,o)throw r}}else e()}var E=function(e){function t(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,p(t)&&t.add(n)):n.destination=P,n}return(0,r.__extends)(t,e),t.create=function(e,t,n){return new A(e,t,n)},t.prototype.next=function(e){this.isStopped?N(function(e){return M("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?N(M("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?N(D,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(f),T=Function.prototype.bind;function S(e,t){return T.call(e,t)}var O=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){k(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){k(e)}else k(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){k(e)}},e}(),A=function(e){function t(t,n,o){var r,i,a=e.call(this)||this;return s(t)||!t?r={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=o?o:void 0}:a&&b?((i=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},r={next:t.next&&S(t.next,i),error:t.error&&S(t.error,i),complete:t.complete&&S(t.complete,i)}):r=t,a.destination=new O(r),a}return(0,r.__extends)(t,e),t}(E);function k(e){var t;v?(t=e,v&&x&&(x.errorThrown=!0,x.error=t)):_(e)}function N(e,t){var n=y;n&&w.setTimeout((function(){return n(e,t)}))}var P={closed:!0,next:C,error:function(e){throw e},complete:C},R="function"==typeof Symbol&&Symbol.observable||"@@observable";function j(e){return e}function V(e){return 0===e.length?j:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}var $=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var o,r=this,i=(o=e)&&o instanceof E||function(e){return e&&s(e.next)&&s(e.error)&&s(e.complete)}(o)&&p(o)?e:new A(e,t,n);return I((function(){var e=r,t=e.operator,n=e.source;i.add(t?t.call(i,n):n?r._subscribe(i):r._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=L(t))((function(t,o){var r=new A({next:function(t){try{e(t)}catch(e){o(e),r.unsubscribe()}},error:o,complete:t});n.subscribe(r)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[R]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return V(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=L(e))((function(e,n){var o;t.subscribe((function(e){return o=e}),(function(e){return n(e)}),(function(){return e(o)}))}))},e.create=function(t){return new e(t)},e}();function L(e){var t;return null!==(t=null!=e?e:m)&&void 0!==t?t:Promise}function F(e){return s(e[R])}function H(e){return Symbol.asyncIterator&&s(null==e?void 0:e[Symbol.asyncIterator])}function U(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var B="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function W(e){return s(null==e?void 0:e[B])}function q(e){return(0,r.__asyncGenerator)(this,arguments,(function(){var t,n,o;return(0,r.__generator)(this,(function(i){switch(i.label){case 0:t=e.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,(0,r.__await)(t.read())];case 3:return n=i.sent(),o=n.value,n.done?[4,(0,r.__await)(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,(0,r.__await)(o)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function z(e){return s(null==e?void 0:e.getReader)}function K(e){if(e instanceof $)return e;if(null!=e){if(F(e))return o=e,new $((function(e){var t=o[R]();if(s(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(i(e))return n=e,new $((function(e){for(var t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()}));if(a(e))return function(e){return new $((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,_)}))}(e);if(H(e))return J(e);if(W(e))return t=e,new $((function(e){var n,o;try{for(var i=(0,r.__values)(t),s=i.next();!s.done;s=i.next()){var a=s.value;if(e.next(a),e.closed)return}}catch(e){n={error:e}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}e.complete()}));if(z(e))return J(q(e))}var t,n,o;throw U(e)}function J(e){return new $((function(t){(function(e,t){var n,o,i,s;return(0,r.__awaiter)(this,void 0,void 0,(function(){var a,c;return(0,r.__generator)(this,(function(l){switch(l.label){case 0:l.trys.push([0,5,6,11]),n=(0,r.__asyncValues)(e),l.label=1;case 1:return[4,n.next()];case 2:if((o=l.sent()).done)return[3,4];if(a=o.value,t.next(a),t.closed)return[2];l.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=l.sent(),i={error:c},[3,11];case 6:return l.trys.push([6,,9,10]),o&&!o.done&&(s=n.return)?[4,s.call(n)]:[3,8];case 7:l.sent(),l.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function G(e){return function(t){if(function(e){return s(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Z(e,t,n,o,r){return new Q(e,t,n,o,r)}var Q=function(e){function t(t,n,o,r,i,s){var a=e.call(this,t)||this;return a.onFinalize=i,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=r?function(e){try{r(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=o?function(){try{o()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return(0,r.__extends)(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(E);var Y=new $((function(e){return e.complete()}));function X(e){return e<=0?function(){return Y}:G((function(t,n){var o=0;t.subscribe(Z(n,(function(t){++o<=e&&(n.next(t),e<=o&&n.complete())})))}))}var ee=c((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),te=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return(0,r.__extends)(t,e),t.prototype.lift=function(e){var t=new ne(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new ee},t.prototype.next=function(e){var t=this;I((function(){var n,o;if(t._throwIfClosed(),!t.isStopped){var i=t.observers.slice();try{for(var s=(0,r.__values)(i),a=s.next();!a.done;a=s.next())a.value.next(e)}catch(e){n={error:e}}finally{try{a&&!a.done&&(o=s.return)&&o.call(s)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;I((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;I((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=t.hasError,o=t.isStopped,r=t.observers;return n||o?d:(r.push(e),new f((function(){return u(r,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,o=t.thrownError,r=t.isStopped;n?e.error(o):r&&e.complete()},t.prototype.asObservable=function(){var e=new $;return e.source=this,e},t.create=function(e,t){return new ne(e,t)},t}($),ne=function(e){function t(t,n){var o=e.call(this)||this;return o.destination=t,o.source=n,o}return(0,r.__extends)(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:d},t}(te);function oe(e){void 0===e&&(e={});var t=e.connector,n=void 0===t?function(){return new te}:t,o=e.resetOnError,r=void 0===o||o,i=e.resetOnComplete,s=void 0===i||i,a=e.resetOnRefCountZero,c=void 0===a||a;return function(e){var t=null,o=null,i=null,a=0,l=!1,u=!1,f=function(){null==o||o.unsubscribe(),o=null},d=function(){f(),t=i=null,l=u=!1},p=function(){var e=t;d(),null==e||e.unsubscribe()};return G((function(e,h){a++,u||l||f();var g,y=i=null!=i?i:n();h.add((function(){0!=--a||u||l||(o=re(p,c))})),y.subscribe(h),t||(t=new A({next:function(e){return y.next(e)},error:function(e){u=!0,f(),o=re(d,r,e),y.error(e)},complete:function(){l=!0,f(),o=re(d,s),y.complete()}}),(g=e,K(g)).subscribe(t))}))(e)}}function re(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];return!0===t?(e(),null):!1===t?null:t.apply(void 0,(0,r.__spreadArray)([],(0,r.__read)(n))).pipe(X(1)).subscribe((function(){return e()}))}function ie(e){for(let t in e)if(e[t]===ie)return t;throw Error("Could not find renamed property on target object.")}function se(e,t){for(const n in t)t.hasOwnProperty(n)&&!e.hasOwnProperty(n)&&(e[n]=t[n])}function ae(e){if("string"==typeof e)return e;if(Array.isArray(e))return"["+e.map(ae).join(", ")+"]";if(null==e)return""+e;if(e.overriddenName)return`${e.overriddenName}`;if(e.name)return`${e.name}`;const t=e.toString();if(null==t)return""+t;const n=t.indexOf("\n");return-1===n?t:t.substring(0,n)}function ce(e,t){return null==e||""===e?null===t?"":t:null==t||""===t?e:e+" "+t}const le=ie({__forward_ref__:ie});function ue(e){return e.__forward_ref__=ue,e.toString=function(){return ae(this())},e}function fe(e){return de(e)?e():e}function de(e){return"function"==typeof e&&e.hasOwnProperty(le)&&e.__forward_ref__===ue}class pe extends Error{constructor(e,t){super(he(e,t)),this.code=e}}function he(e,t){const n=`NG0${Math.abs(e)}`;let o=`${n}${t?": "+t:""}`;return ngDevMode&&e<0&&(o=`${o}. Find more at https://angular.io/errors/${n}`),o}function ge(e){return"string"==typeof e?e:null==e?"":String(e)}function ye(e){return"function"==typeof e?e.name||e.toString():"object"==typeof e&&null!=e&&"function"==typeof e.type?e.type.name||e.type.toString():ge(e)}function me(e,t){const n=t?`. Dependency path: ${t.join(" > ")} > ${e}`:"";throw new pe(-200,`Circular dependency in DI detected for ${e}${n}`)}function ve(){throw new Error("Cannot mix multi providers and regular providers")}function be(e,t){const n=t?` in ${t}`:"";throw new pe(-201,`No provider for ${ye(e)} found${n}`)}function we(e,t){"number"!=typeof e&&ke(t,typeof e,"number","===")}function _e(e,t,n){we(e,"Expected a number"),Te(e,n,"Expected number to be less than or equal to"),Oe(e,t,"Expected number to be greater than or equal to")}function Ce(e,t){"string"!=typeof e&&ke(t,null===e?"null":typeof e,"string","===")}function De(e,t,n){e!=t&&ke(n,e,t,"==")}function Me(e,t,n){e==t&&ke(n,e,t,"!=")}function xe(e,t,n){e!==t&&ke(n,e,t,"===")}function Ie(e,t,n){e===t&&ke(n,e,t,"!==")}function Ee(e,t,n){e<t||ke(n,e,t,"<")}function Te(e,t,n){e<=t||ke(n,e,t,"<=")}function Se(e,t,n){e>t||ke(n,e,t,">")}function Oe(e,t,n){e>=t||ke(n,e,t,">=")}function Ae(e,t){null==e&&ke(t,e,null,"!=")}function ke(e,t,n,o){throw new Error(`ASSERTION ERROR: ${e}`+(null==o?"":` [Expected=> ${n} ${o} ${t} <=Actual]`))}function Ne(e){"undefined"!=typeof Node&&e instanceof Node||"object"==typeof e&&null!=e&&"WebWorkerRenderNode"===e.constructor.name||ke(`The provided value must be an instance of a DOM Node but got ${ae(e)}`)}function Pe(e,t){Ae(e,"Array must be defined.");const n=e.length;(t<0||t>=n)&&ke(`Index expected to be less than ${n} but got ${t}`)}function Re(e,...t){if(-1!==t.indexOf(e))return!0;ke(`Expected value to be one of ${JSON.stringify(t)} but was ${JSON.stringify(e)}.`)}function je(e){return{token:e.token,providedIn:e.providedIn||null,factory:e.factory,value:void 0}}const Ve=je;function $e(e){return{providers:e.providers||[],imports:e.imports||[]}}function Le(e){return Fe(e,Ue)||Fe(e,We)}function Fe(e,t){return e.hasOwnProperty(t)?e[t]:null}function He(e){return e&&(e.hasOwnProperty(Be)||e.hasOwnProperty(qe))?e[Be]:null}const Ue=ie({ɵprov:ie}),Be=ie({ɵinj:ie}),We=ie({ngInjectableDef:ie}),qe=ie({ngInjectorDef:ie});var ze;let Ke;function Je(e){const t=Ke;return Ke=e,t}function Ge(e,t,n){const o=Le(e);return o&&"root"==o.providedIn?void 0===o.value?o.value=o.factory():o.value:n&ze.Optional?null:void 0!==t?t:void be(ae(e),"Injector")}function Ze(e){return{toString:e}.toString()}var Qe,Ye,Xe;function et(e){return null==e||e===Qe.Default}!function(e){e[e.Default=0]="Default",e[e.Host=1]="Host",e[e.Self=2]="Self",e[e.SkipSelf=4]="SkipSelf",e[e.Optional=8]="Optional"}(ze||(ze={})),function(e){e[e.OnPush=0]="OnPush",e[e.Default=1]="Default"}(Qe||(Qe={})),function(e){e[e.CheckOnce=0]="CheckOnce",e[e.Checked=1]="Checked",e[e.CheckAlways=2]="CheckAlways",e[e.Detached=3]="Detached",e[e.Errored=4]="Errored",e[e.Destroyed=5]="Destroyed"}(Ye||(Ye={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(Xe||(Xe={}));const tt="undefined"!=typeof globalThis&&globalThis,nt="undefined"!=typeof window&&window,ot="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,rt="undefined"!=typeof global&&global,it=tt||rt||nt||ot;function st(){return!("undefined"!=typeof ngDevMode&&!ngDevMode||("object"!=typeof ngDevMode&&function(){const e="undefined"!=typeof location?location.toString():"",t={namedConstructors:-1!=e.indexOf("ngDevMode=namedConstructors"),firstCreatePass:0,tNode:0,tView:0,rendererCreateTextNode:0,rendererSetText:0,rendererCreateElement:0,rendererAddEventListener:0,rendererSetAttribute:0,rendererRemoveAttribute:0,rendererSetProperty:0,rendererSetClassName:0,rendererAddClass:0,rendererRemoveClass:0,rendererSetStyle:0,rendererRemoveStyle:0,rendererDestroy:0,rendererDestroyNode:0,rendererMoveNode:0,rendererRemoveNode:0,rendererAppendChild:0,rendererInsertBefore:0,rendererCreateComment:0},n=-1===e.indexOf("ngDevMode=false");it.ngDevMode=n&&t}(),"undefined"==typeof ngDevMode||!ngDevMode))}const at={},ct=[];("undefined"==typeof ngDevMode||ngDevMode)&&st()&&(Object.freeze(at),Object.freeze(ct));const lt=ie({ɵcmp:ie}),ut=ie({ɵdir:ie}),ft=ie({ɵpipe:ie}),dt=ie({ɵmod:ie}),pt=ie({ɵfac:ie}),ht=ie({__NG_ELEMENT_ID__:ie});let gt=0;function yt(e){return Ze((()=>{("undefined"==typeof ngDevMode||ngDevMode)&&st();const t={},n={type:e.type,providersResolver:null,decls:e.decls,vars:e.vars,factory:null,template:e.template||null,consts:e.consts||null,ngContentSelectors:e.ngContentSelectors,hostBindings:e.hostBindings||null,hostVars:e.hostVars||0,hostAttrs:e.hostAttrs||null,contentQueries:e.contentQueries||null,declaredInputs:t,inputs:null,outputs:null,exportAs:e.exportAs||null,onPush:e.changeDetection===Qe.OnPush,directiveDefs:null,pipeDefs:null,selectors:e.selectors||ct,viewQuery:e.viewQuery||null,features:e.features||null,data:e.data||{},encapsulation:e.encapsulation||Xe.Emulated,id:"c",styles:e.styles||ct,_:null,setInput:null,schemas:e.schemas||null,tView:null},o=e.directives,r=e.features,i=e.pipes;return n.id+=gt++,n.inputs=Dt(e.inputs,t),n.outputs=Dt(e.outputs),r&&r.forEach((e=>e(n))),n.directiveDefs=o?()=>("function"==typeof o?o():o).map(vt):null,n.pipeDefs=i?()=>("function"==typeof i?i():i).map(bt):null,n}))}function mt(e,t,n){const o=e.ɵcmp;o.directiveDefs=()=>t.map(vt),o.pipeDefs=()=>n.map(bt)}function vt(e){const t=It(e)||Et(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is neither 'ComponentType' or 'DirectiveType'.`);return t}function bt(e){const t=Tt(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is not a 'PipeType'.`);return t}const wt={};function _t(e){return Ze((()=>{const t={type:e.type,bootstrap:e.bootstrap||ct,declarations:e.declarations||ct,imports:e.imports||ct,exports:e.exports||ct,transitiveCompileScopes:null,schemas:e.schemas||null,id:e.id||null};return null!=e.id&&(wt[e.id]=e.type),t}))}function Ct(e,t){return Ze((()=>{const n=St(e,!0);n.declarations=t.declarations||ct,n.imports=t.imports||ct,n.exports=t.exports||ct}))}function Dt(e,t){if(null==e)return at;const n={};for(const o in e)if(e.hasOwnProperty(o)){let r=e[o],i=r;Array.isArray(r)&&(i=r[1],r=r[0]),n[r]=o,t&&(t[r]=i)}return n}const Mt=yt;function xt(e){return{type:e.type,name:e.name,factory:null,pure:!1!==e.pure,onDestroy:e.type.prototype.ngOnDestroy||null}}function It(e){return e[lt]||null}function Et(e){return e[ut]||null}function Tt(e){return e[ft]||null}function St(e,t){const n=e[dt]||null;if(!n&&!0===t)throw new Error(`Type ${ae(e)} does not have 'ɵmod' property.`);return n}const Ot=20,At=["Root","Component","Embedded"],kt=10;function Nt(e){return Array.isArray(e)&&"object"==typeof e[1]}function Pt(e){return Array.isArray(e)&&!0===e[1]}function Rt(e){return 0!=(8&e.flags)}function jt(e){return 2==(2&e.flags)}function Vt(e){return 1==(1&e.flags)}function $t(e){return null!==e.template}function Lt(e,t){Ft(e,t[1])}function Ft(e,t){Ht(e),e.hasOwnProperty("tView_")&&De(e.tView_,t,"This TNode does not belong to this TView.")}function Ht(e){Ae(e,"TNode must be defined"),e&&"object"==typeof e&&e.hasOwnProperty("directiveStylingLast")||ke("Not of type TNode, got: "+e)}function Ut(e){Ae(e,"Expected TIcu to be defined"),"number"!=typeof e.currentCaseLViewIndex&&ke("Object is not of TIcu type.")}function Bt(e,t="Type passed in is not ComponentType, it does not have 'ɵcmp' property."){It(e)||ke(t)}function Wt(e){Ae(e,"currentTNode should exist!"),Ae(e.parent,"currentTNode should have a parent")}function qt(e){Ae(e,"LContainer must be defined"),De(Pt(e),!0,"Expecting LContainer")}function zt(e){e&&De(Nt(e),!0,"Expecting LView or undefined or null")}function Kt(e){Ae(e,"LView must be defined"),De(Nt(e),!0,"Expecting LView")}function Jt(e,t){De(e.firstCreatePass,!0,t||"Should only be called in first create pass.")}function Gt(e,t){De(e.firstUpdatePass,!0,t||"Should only be called in first update pass.")}function Zt(e,t){Qt(e[1].expandoStartIndex,e.length,t)}function Qt(e,t,n){e<=n&&n<t||ke(`Index out of range (expecting ${e} <= ${n} < ${t})`)}function Yt(e,t){Ae(e,t||"Component views should always have a parent view (component's host view)")}function Xt(e,t){Zt(e,t),Zt(e,t+8),we(e[t+0],"injectorIndex should point to a bloom filter"),we(e[t+1],"injectorIndex should point to a bloom filter"),we(e[t+2],"injectorIndex should point to a bloom filter"),we(e[t+3],"injectorIndex should point to a bloom filter"),we(e[t+4],"injectorIndex should point to a bloom filter"),we(e[t+5],"injectorIndex should point to a bloom filter"),we(e[t+6],"injectorIndex should point to a bloom filter"),we(e[t+7],"injectorIndex should point to a bloom filter"),we(e[t+8],"injectorIndex should point to parent injector")}function en(e,t){const n=e.hasOwnProperty(pt);if(!n&&!0===t&&ngDevMode)throw new Error(`Type ${ae(e)} does not have 'ɵfac' property.`);return n?e[pt]:null}class tn{constructor(e,t,n){this.previousValue=e,this.currentValue=t,this.firstChange=n}isFirstChange(){return this.firstChange}}function nn(){return on}function on(e){return e.type.prototype.ngOnChanges&&(e.setInput=sn),rn}function rn(){const e=an(this),t=e?.current;if(t){const n=e.previous;if(n===at)e.previous=t;else for(let e in t)n[e]=t[e];e.current=null,this.ngOnChanges(t)}}function sn(e,t,n,o){const r=an(e)||function(e,t){return e.__ngSimpleChanges__=t}(e,{previous:at,current:null}),i=r.current||(r.current={}),s=r.previous,a=this.declaredInputs[n],c=s[a];i[a]=new tn(c&&c.currentValue,t,s===at),e[o]=t}function an(e){return e.__ngSimpleChanges__||null}nn.ngInherit=!0;let cn=null;const ln=e=>{cn=e},un=function(e,t,n){null!=cn&&cn(e,t,n)},fn="svg",dn="math";let pn;function hn(e){pn=e}function gn(){return void 0!==pn?pn:"undefined"!=typeof document?document:void 0}var yn;function mn(e){return!!e.listen}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(yn||(yn={}));const vn={createRenderer:(e,t)=>gn()};function bn(e){for(;Array.isArray(e);)e=e[0];return e}function wn(e,t){return ngDevMode&&Pe(t,e),ngDevMode&&Oe(e,Ot,"Expected to be past HEADER_OFFSET"),bn(t[e])}function _n(e,t){ngDevMode&&Lt(e,t),ngDevMode&&Pe(t,e.index);const n=bn(t[e.index]);return ngDevMode&&!mn(t[11])&&Ne(n),n}function Cn(e,t){ngDevMode&&Se(t,-1,"wrong index for TNode"),ngDevMode&&Ee(t,e.data.length,"wrong index for TNode");const n=e.data[t];return ngDevMode&&null!==n&&Ht(n),n}function Dn(e,t){return ngDevMode&&Pe(e,t),e[t]}function Mn(e,t){ngDevMode&&Pe(t,e);const n=t[e];return Nt(n)?n:n[0]}function xn(e){return 4==(4&e[2])}function In(e){return 128==(128&e[2])}function En(e,t){return null==t?null:(ngDevMode&&Pe(e,t),e[t])}function Tn(e){e[18]=0}function Sn(e,t){e[5]+=t;let n=e,o=e[3];for(;null!==o&&(1===t&&1===n[5]||-1===t&&0===n[5]);)o[5]+=t,n=o,o=o[3]}const On={lFrame:so(null),bindingsEnabled:!0,isInCheckNoChangesMode:!1};function An(){return On.bindingsEnabled}function kn(){On.bindingsEnabled=!0}function Nn(){On.bindingsEnabled=!1}function Pn(){return On.lFrame.lView}function Rn(){return On.lFrame.tView}function jn(e){return On.lFrame.contextLView=e,e[8]}function Vn(){let e=$n();for(;null!==e&&64===e.type;)e=e.parent;return e}function $n(){return On.lFrame.currentTNode}function Ln(){const e=On.lFrame,t=e.currentTNode;return e.isParent?t:t.parent}function Fn(e,t){ngDevMode&&e&&Ft(e,On.lFrame.tView);const n=On.lFrame;n.currentTNode=e,n.isParent=t}function Hn(){return On.lFrame.isParent}function Un(){On.lFrame.isParent=!1}function Bn(){return On.isInCheckNoChangesMode}function Wn(e){On.isInCheckNoChangesMode=e}function qn(){const e=On.lFrame;let t=e.bindingRootIndex;return-1===t&&(t=e.bindingRootIndex=e.tView.bindingStartIndex),t}function zn(){return On.lFrame.bindingIndex}function Kn(e){return On.lFrame.bindingIndex=e}function Jn(){return On.lFrame.bindingIndex++}function Gn(e){const t=On.lFrame,n=t.bindingIndex;return t.bindingIndex=t.bindingIndex+e,n}function Zn(e){On.lFrame.inI18n=e}function Qn(e,t){const n=On.lFrame;n.bindingIndex=n.bindingRootIndex=e,Yn(t)}function Yn(e){On.lFrame.currentDirectiveIndex=e}function Xn(e){const t=On.lFrame.currentDirectiveIndex;return-1===t?null:e[t]}function eo(){return On.lFrame.currentQueryIndex}function to(e){On.lFrame.currentQueryIndex=e}function no(e){const t=e[1];return 2===t.type?(ngDevMode&&Ae(t.declTNode,"Embedded TNodes should have declaration parents."),t.declTNode):1===t.type?e[6]:null}function oo(e,t,n){if(ngDevMode&&zt(e),n&ze.SkipSelf){ngDevMode&&Ft(t,e[1]);let o=t,r=e;for(;ngDevMode&&Ae(o,"Parent TNode should be defined"),o=o.parent,!(null!==o||n&ze.Host||(o=no(r),null===o)||(ngDevMode&&Ae(r,"Parent LView should be defined"),r=r[15],10&o.type)););if(null===o)return!1;t=o,e=r}ngDevMode&&Lt(t,e);const o=On.lFrame=io();return o.currentTNode=t,o.lView=e,!0}function ro(e){ngDevMode&&Me(e[0],e[1],"????"),ngDevMode&&zt(e);const t=io();ngDevMode&&(De(t.isParent,!0,"Expected clean LFrame"),De(t.lView,null,"Expected clean LFrame"),De(t.tView,null,"Expected clean LFrame"),De(t.selectedIndex,-1,"Expected clean LFrame"),De(t.elementDepthCount,0,"Expected clean LFrame"),De(t.currentDirectiveIndex,-1,"Expected clean LFrame"),De(t.currentNamespace,null,"Expected clean LFrame"),De(t.bindingRootIndex,-1,"Expected clean LFrame"),De(t.currentQueryIndex,0,"Expected clean LFrame"));const n=e[1];On.lFrame=t,ngDevMode&&n.firstChild&&Ft(n.firstChild,n),t.currentTNode=n.firstChild,t.lView=e,t.tView=n,t.contextLView=e,t.bindingIndex=n.bindingStartIndex,t.inI18n=!1}function io(){const e=On.lFrame,t=null===e?null:e.child;return null===t?so(e):t}function so(e){const t={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:e,child:null,inI18n:!1};return null!==e&&(e.child=t),t}function ao(){const e=On.lFrame;return On.lFrame=e.parent,e.currentTNode=null,e.lView=null,e}const co=ao;function lo(){const e=ao();e.isParent=!0,e.tView=null,e.selectedIndex=-1,e.contextLView=null,e.elementDepthCount=0,e.currentDirectiveIndex=-1,e.currentNamespace=null,e.bindingRootIndex=-1,e.bindingIndex=-1,e.currentQueryIndex=0}function uo(){return On.lFrame.selectedIndex}function fo(e){ngDevMode&&-1!==e&&Oe(e,Ot,"Index must be past HEADER_OFFSET (or -1)."),ngDevMode&&Ee(e,On.lFrame.lView.length,"Can't set index passed end of LView"),On.lFrame.selectedIndex=e}function po(){const e=On.lFrame;return Cn(e.tView,e.selectedIndex)}function ho(){On.lFrame.currentNamespace=fn}function go(){On.lFrame.currentNamespace=dn}function yo(){On.lFrame.currentNamespace=null}function mo(e,t){ngDevMode&&Jt(e);for(let n=t.directiveStart,o=t.directiveEnd;n<o;n++){const t=e.data[n];ngDevMode&&Ae(t,"Expecting DirectiveDef");const o=t.type.prototype,{ngAfterContentInit:r,ngAfterContentChecked:i,ngAfterViewInit:s,ngAfterViewChecked:a,ngOnDestroy:c}=o;r&&(e.contentHooks||(e.contentHooks=[])).push(-n,r),i&&((e.contentHooks||(e.contentHooks=[])).push(n,i),(e.contentCheckHooks||(e.contentCheckHooks=[])).push(n,i)),s&&(e.viewHooks||(e.viewHooks=[])).push(-n,s),a&&((e.viewHooks||(e.viewHooks=[])).push(n,a),(e.viewCheckHooks||(e.viewCheckHooks=[])).push(n,a)),null!=c&&(e.destroyHooks||(e.destroyHooks=[])).push(n,c)}}function vo(e,t,n){_o(e,t,3,n)}function bo(e,t,n,o){ngDevMode&&Me(n,3,"Init pre-order hooks should not be called more than once"),(3&e[2])===n&&_o(e,t,n,o)}function wo(e,t){ngDevMode&&Me(t,3,"Init hooks phase should not be incremented after all init hooks have been run.");let n=e[2];(3&n)===t&&(n&=2047,n+=1,e[2]=n)}function _o(e,t,n,o){ngDevMode&&De(Bn(),!1,"Hooks should never be run when in check no changes mode.");const r=void 0!==o?65535&e[18]:0,i=null!=o?o:-1,s=t.length-1;let a=0;for(let c=r;c<s;c++)if("number"==typeof t[c+1]){if(a=t[c],null!=o&&a>=o)break}else t[c]<0&&(e[18]+=65536),(a<i||-1==i)&&(Co(e,n,t,c),e[18]=(4294901760&e[18])+c+2),c++}function Co(e,t,n,o){const r=n[o]<0,i=n[o+1],s=e[r?-n[o]:n[o]];if(r){if(e[2]>>11<e[18]>>16&&(3&e[2])===t){e[2]+=2048,un(4,s,i);try{i.call(s)}finally{un(5,s,i)}}}else{un(4,s,i);try{i.call(s)}finally{un(5,s,i)}}}const Do=-1;class Mo{constructor(e,t,n){this.factory=e,this.resolving=!1,ngDevMode&&Ae(e,"Factory not specified"),ngDevMode&&De(typeof e,"function","Expected factory function."),this.canSeeViewProviders=t,this.injectImpl=n}}function xo(e){let t="";return 1&e&&(t+="|Text"),2&e&&(t+="|Element"),4&e&&(t+="|Container"),8&e&&(t+="|ElementContainer"),16&e&&(t+="|Projection"),32&e&&(t+="|IcuContainer"),64&e&&(t+="|Placeholder"),t.length>0?t.substring(1):t}function Io(e,t,n){Ae(e,"should be called with a TNode"),0==(e.type&t)&&ke(n||`Expected [${xo(t)}] but got ${xo(e.type)}.`)}function Eo(e,t,n){const o=mn(e);let r=0;for(;r<n.length;){const i=n[r];if("number"==typeof i){if(0!==i)break;r++;const s=n[r++],a=n[r++],c=n[r++];ngDevMode&&ngDevMode.rendererSetAttribute++,o?e.setAttribute(t,a,c,s):t.setAttributeNS(s,a,c)}else{const s=i,a=n[++r];ngDevMode&&ngDevMode.rendererSetAttribute++,So(s)?o&&e.setProperty(t,s,a):o?e.setAttribute(t,s,a):t.setAttribute(s,a),r++}}return r}function To(e){return 3===e||4===e||6===e}function So(e){return 64===e.charCodeAt(0)}function Oo(e,t){if(null===t||0===t.length);else if(null===e||0===e.length)e=t.slice();else{let n=-1;for(let o=0;o<t.length;o++){const r=t[o];"number"==typeof r?n=r:0===n||Ao(e,n,r,null,-1===n||2===n?t[++o]:null)}}return e}function Ao(e,t,n,o,r){let i=0,s=e.length;if(-1===t)s=-1;else for(;i<e.length;){const n=e[i++];if("number"==typeof n){if(n===t){s=-1;break}if(n>t){s=i-1;break}}}for(;i<e.length;){const t=e[i];if("number"==typeof t)break;if(t===n){if(null===o)return void(null!==r&&(e[i+1]=r));if(o===e[i+1])return void(e[i+2]=r)}i++,null!==o&&i++,null!==r&&i++}-1!==s&&(e.splice(s,0,t),i=s+1),e.splice(i++,0,n),null!==o&&e.splice(i++,0,o),null!==r&&e.splice(i++,0,r)}function ko(e){return e!==Do}function No(e){return ngDevMode&&we(e,"Number expected"),ngDevMode&&Me(e,-1,"Not a valid state."),ngDevMode&&Se(32767&e,Ot,"Parent injector must be pointing past HEADER_OFFSET."),32767&e}function Po(e,t){let n=e>>16,o=t;for(;n>0;)o=o[15],n--;return o}let Ro=!0;function jo(e){const t=Ro;return Ro=e,t}let Vo=0;function $o(e,t){const n=Fo(e,t);if(-1!==n)return n;const o=t[1];o.firstCreatePass&&(e.injectorIndex=t.length,Lo(o.data,e),Lo(t,null),Lo(o.blueprint,null));const r=Ho(e,t),i=e.injectorIndex;if(ko(r)){const e=No(r),n=Po(r,t),o=n[1].data;for(let r=0;r<8;r++)t[i+r]=n[e+r]|o[e+r]}return t[i+8]=r,i}function Lo(e,t){e.push(0,0,0,0,0,0,0,0,t)}function Fo(e,t){return-1===e.injectorIndex||e.parent&&e.parent.injectorIndex===e.injectorIndex||null===t[e.injectorIndex+8]?-1:(ngDevMode&&Pe(t,e.injectorIndex),e.injectorIndex)}function Ho(e,t){if(e.parent&&-1!==e.parent.injectorIndex)return e.parent.injectorIndex;let n=0,o=null,r=t;for(;null!==r;){const e=r[1],t=e.type;if(2===t?(ngDevMode&&Ae(e.declTNode,"Embedded TNodes should have declaration parents."),o=e.declTNode):1===t?o=r[6]:(ngDevMode&&De(e.type,0,"Root type expected"),o=null),null===o)return Do;if(ngDevMode&&o&&Lt(o,r[15]),n++,r=r[15],-1!==o.injectorIndex)return o.injectorIndex|n<<16}return Do}function Uo(e,t,n){!function(e,t,n){let o;ngDevMode&&De(t.firstCreatePass,!0,"expected firstCreatePass to be true"),"string"==typeof n?o=n.charCodeAt(0)||0:n.hasOwnProperty(ht)&&(o=n[ht]),null==o&&(o=n[ht]=Vo++);const r=255&o,i=1<<r;t.data[e+(r>>5)]|=i}(e,t,n)}function Bo(e,t,n){if(n&ze.Optional)return e;be(t,"NodeInjector")}function Wo(e,t,n,o){if(n&ze.Optional&&void 0===o&&(o=null),0==(n&(ze.Self|ze.Host))){const r=e[9],i=Je(void 0);try{return r?r.get(t,o,n&ze.Optional):Ge(t,o,n&ze.Optional)}finally{Je(i)}}return Bo(o,t,n)}function qo(e,t,n,o=ze.Default,r){if(null!==e){const i=function(e){if(ngDevMode&&Ae(e,"token must be defined"),"string"==typeof e)return e.charCodeAt(0)||0;const t=e.hasOwnProperty(ht)?e[ht]:void 0;return"number"==typeof t?t>=0?255&t:(ngDevMode&&De(t,-1,"Expecting to get Special Injector Id"),Ko):t}(n);if("function"==typeof i){if(!oo(t,e,o))return o&ze.Host?Bo(r,n,o):Wo(t,n,o,r);try{const e=i(o);if(null!=e||o&ze.Optional)return e;be(n)}finally{co()}}else if("number"==typeof i){let r=null,s=Fo(e,t),a=Do,c=o&ze.Host?t[16][6]:null;for((-1===s||o&ze.SkipSelf)&&(a=-1===s?Ho(e,t):t[s+8],a!==Do&&Yo(o,!1)?(r=t[1],s=No(a),t=Po(a,t)):s=-1);-1!==s;){ngDevMode&&Xt(t,s);const e=t[1];if(ngDevMode&&Lt(e.data[s+8],t),Qo(i,s,e.data)){const e=Jo(s,t,n,r,o,c);if(e!==zo)return e}a=t[s+8],a!==Do&&Yo(o,t[1].data[s+8]===c)&&Qo(i,s,t)?(r=e,s=No(a),t=Po(a,t)):s=-1}}}return Wo(t,n,o,r)}const zo={};function Ko(){return new Xo(Vn(),Pn())}function Jo(e,t,n,o,r,i){const s=t[1],a=s.data[e+8],c=Go(a,s,n,null==o?jt(a)&&Ro:o!=s&&0!=(3&a.type),r&ze.Host&&i===a);return null!==c?Zo(t,s,c,a):zo}function Go(e,t,n,o,r){const i=e.providerIndexes,s=t.data,a=1048575&i,c=e.directiveStart,l=e.directiveEnd,u=i>>20,f=r?a+u:l;for(let e=o?a:a+u;e<f;e++){const t=s[e];if(e<c&&n===t||e>=c&&t.type===n)return e}if(r){const e=s[c];if(e&&$t(e)&&e.type===n)return c}return null}function Zo(e,t,n,o){let r=e[n];const i=t.data;if(r instanceof Mo){const a=r;a.resolving&&me(ye(i[n]));const c=jo(a.canSeeViewProviders);a.resolving=!0;const l=a.injectImpl?Je(a.injectImpl):null,u=oo(e,o,ze.Default);ngDevMode&&De(u,!0,"Because flags do not contain `SkipSelf' we expect this to always succeed.");try{r=e[n]=a.factory(void 0,i,e,o),t.firstCreatePass&&n>=o.directiveStart&&(ngDevMode&&(void 0!==(s=i[n]).type&&null!=s.selectors&&void 0!==s.inputs||ke("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.")),function(e,t,n){ngDevMode&&Jt(n);const{ngOnChanges:o,ngOnInit:r,ngDoCheck:i}=t.type.prototype;if(o){const o=on(t);(n.preOrderHooks||(n.preOrderHooks=[])).push(e,o),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,o)}r&&(n.preOrderHooks||(n.preOrderHooks=[])).push(0-e,r),i&&((n.preOrderHooks||(n.preOrderHooks=[])).push(e,i),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,i))}(n,i[n],t))}finally{null!==l&&Je(l),jo(c),a.resolving=!1,co()}}var s;return r}function Qo(e,t,n){const o=1<<e;return!!(n[t+(e>>5)]&o)}function Yo(e,t){return!(e&ze.Self||e&ze.Host&&t)}class Xo{constructor(e,t){this._tNode=e,this._lView=t}get(e,t,n){return qo(this._tNode,this._lView,e,n,t)}}function er(e){return Ze((()=>{const t=e.prototype.constructor,n=t[pt]||tr(t),o=Object.prototype;let r=Object.getPrototypeOf(e.prototype).constructor;for(;r&&r!==o;){const e=r[pt]||tr(r);if(e&&e!==n)return e;r=Object.getPrototypeOf(r)}return e=>new e}))}function tr(e){return de(e)?()=>{const t=tr(fe(e));return t&&t()}:en(e)}function nr(e){return function(e,t){if(ngDevMode&&Io(e,15),ngDevMode&&Ae(e,"expecting tNode"),"class"===t)return e.classes;if("style"===t)return e.styles;const n=e.attrs;if(n){const e=n.length;let o=0;for(;o<e;){const r=n[o];if(To(r))break;if(0===r)o+=2;else if("number"==typeof r)for(o++;o<e&&"string"==typeof n[o];)o++;else{if(r===t)return n[o+1];o+=2}}}return null}(Vn(),e)}const or="__annotations__",rr="__parameters__",ir="__prop__metadata__";function sr(e,t,n,o,r){return Ze((()=>{const i=ar(t);function s(...e){if(this instanceof s)return i.call(this,...e),this;const t=new s(...e);return function(n){return r&&r(n,...e),(n.hasOwnProperty(or)?n[or]:Object.defineProperty(n,or,{value:[]})[or]).push(t),o&&o(n),n}}return n&&(s.prototype=Object.create(n.prototype)),s.prototype.ngMetadataName=e,s.annotationCls=s,s}))}function ar(e){return function(...t){if(e){const n=e(...t);for(const e in n)this[e]=n[e]}}}function cr(e,t,n){return Ze((()=>{const o=ar(t);function r(...e){if(this instanceof r)return o.apply(this,e),this;const t=new r(...e);return n.annotation=t,n;function n(e,n,o){const r=e.hasOwnProperty(rr)?e[rr]:Object.defineProperty(e,rr,{value:[]})[rr];for(;r.length<=o;)r.push(null);return(r[o]=r[o]||[]).push(t),e}}return n&&(r.prototype=Object.create(n.prototype)),r.prototype.ngMetadataName=e,r.annotationCls=r,r}))}function lr(e,t,n,o){return Ze((()=>{const r=ar(t);function i(...e){if(this instanceof i)return r.apply(this,e),this;const t=new i(...e);return function(n,r){const i=n.constructor,s=i.hasOwnProperty(ir)?i[ir]:Object.defineProperty(i,ir,{value:{}})[ir];s[r]=s.hasOwnProperty(r)&&s[r]||[],s[r].unshift(t),o&&o(n,r,...e)}}return n&&(i.prototype=Object.create(n.prototype)),i.prototype.ngMetadataName=e,i.annotationCls=i,i}))}const ur=cr("Attribute",(e=>({attributeName:e,__NG_ELEMENT_ID__:()=>nr(e)})));class fr{constructor(e,t){this._desc=e,this.ngMetadataName="InjectionToken",this.ɵprov=void 0,"number"==typeof t?(("undefined"==typeof ngDevMode||ngDevMode)&&Ee(t,0,"Only negative numbers are supported here"),this.__NG_ELEMENT_ID__=t):void 0!==t&&(this.ɵprov=je({token:this,providedIn:t.providedIn||"root",factory:t.factory}))}toString(){return`InjectionToken ${this._desc}`}}const dr=new fr("AnalyzeForEntryComponents");class pr{}const hr=lr("ContentChildren",((e,t={})=>({selector:e,first:!1,isViewQuery:!1,descendants:!1,emitDistinctChangesOnly:!0,...t})),pr),gr=lr("ContentChild",((e,t={})=>({selector:e,first:!0,isViewQuery:!1,descendants:!0,...t})),pr),yr=lr("ViewChildren",((e,t={})=>({selector:e,first:!1,isViewQuery:!0,descendants:!0,emitDistinctChangesOnly:!0,...t})),pr),mr=lr("ViewChild",((e,t)=>({selector:e,first:!0,isViewQuery:!0,descendants:!0,...t})),pr);var vr,br;function wr(e){const t=it.ng;if(t&&t.ɵcompilerFacade)return t.ɵcompilerFacade;if("undefined"==typeof ngDevMode||ngDevMode){console.error(`JIT compilation failed for ${e.kind}`,e.type);let t=`The ${e.kind} '${e.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n`;throw 1===e.usage?(t+=`The ${e.kind} is part of a library that has been partially compiled.\n`,t+="However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n",t+="\n",t+="Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n"):t+="JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n",t+="Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n",t+="or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.",new Error(t)}throw new Error("JIT compiler unavailable")}!function(e){e[e.Directive=0]="Directive",e[e.Component=1]="Component",e[e.Injectable=2]="Injectable",e[e.Pipe=3]="Pipe",e[e.NgModule=4]="NgModule"}(vr||(vr={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(br||(br={}));const _r=Function;function Cr(e){return"function"==typeof e}function Dr(e,t){void 0===t&&(t=e);for(let n=0;n<e.length;n++){let o=e[n];Array.isArray(o)?(t===e&&(t=e.slice(0,n)),Dr(o,t)):t!==e&&t.push(o)}return t}function Mr(e,t){e.forEach((e=>Array.isArray(e)?Mr(e,t):t(e)))}function xr(e,t,n){t>=e.length?e.push(n):e.splice(t,0,n)}function Ir(e,t){return t>=e.length-1?e.pop():e.splice(t,1)[0]}function Er(e,t){const n=[];for(let o=0;o<e;o++)n.push(t);return n}function Tr(e,t,n){let o=Or(e,t);return o>=0?e[1|o]=n:(o=~o,function(e,t,n,o){ngDevMode&&Te(t,e.length,"Can't insert past array end.");let r=e.length;if(r==t)e.push(n,o);else if(1===r)e.push(o,e[0]),e[0]=n;else{for(r--,e.push(e[r-1],e[r]);r>t;){const t=r-2;e[r]=e[t],r--}e[t]=n,e[t+1]=o}}(e,o,t,n)),o}function Sr(e,t){const n=Or(e,t);if(n>=0)return e[1|n]}function Or(e,t){return function(e,t,n){ngDevMode&&De(Array.isArray(e),!0,"Expecting an array");let o=0,r=e.length>>n;for(;r!==o;){const i=o+(r-o>>1),s=e[i<<n];if(t===s)return i<<n;s>t?r=i:o=i+1}return~(r<<n)}(e,t,1)}const Ar=/^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/,kr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/,Nr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/,Pr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;class Rr{constructor(e){this._reflect=e||it.Reflect}isReflectionEnabled(){return!0}factory(e){return(...t)=>new e(...t)}_zipTypesAndAnnotations(e,t){let n;n=Er(void 0===e?t.length:e.length);for(let o=0;o<n.length;o++)void 0===e?n[o]=[]:e[o]&&e[o]!=Object?n[o]=[e[o]]:n[o]=[],t&&null!=t[o]&&(n[o]=n[o].concat(t[o]));return n}_ownParameters(e,t){if(n=e.toString(),Ar.test(n)||Pr.test(n)||kr.test(n)&&!Nr.test(n))return null;var n;if(e.parameters&&e.parameters!==t.parameters)return e.parameters;const o=e.ctorParameters;if(o&&o!==t.ctorParameters){const e="function"==typeof o?o():o,t=e.map((e=>e&&e.type)),n=e.map((e=>e&&jr(e.decorators)));return this._zipTypesAndAnnotations(t,n)}const r=e.hasOwnProperty(rr)&&e[rr],i=this._reflect&&this._reflect.getOwnMetadata&&this._reflect.getOwnMetadata("design:paramtypes",e);return i||r?this._zipTypesAndAnnotations(i,r):Er(e.length)}parameters(e){if(!Cr(e))return[];const t=Vr(e);let n=this._ownParameters(e,t);return n||t===Object||(n=this.parameters(t)),n||[]}_ownAnnotations(e,t){if(e.annotations&&e.annotations!==t.annotations){let t=e.annotations;return"function"==typeof t&&t.annotations&&(t=t.annotations),t}return e.decorators&&e.decorators!==t.decorators?jr(e.decorators):e.hasOwnProperty(or)?e[or]:null}annotations(e){if(!Cr(e))return[];const t=Vr(e),n=this._ownAnnotations(e,t)||[];return(t!==Object?this.annotations(t):[]).concat(n)}_ownPropMetadata(e,t){if(e.propMetadata&&e.propMetadata!==t.propMetadata){let t=e.propMetadata;return"function"==typeof t&&t.propMetadata&&(t=t.propMetadata),t}if(e.propDecorators&&e.propDecorators!==t.propDecorators){const t=e.propDecorators,n={};return Object.keys(t).forEach((e=>{n[e]=jr(t[e])})),n}return e.hasOwnProperty(ir)?e[ir]:null}propMetadata(e){if(!Cr(e))return{};const t=Vr(e),n={};if(t!==Object){const e=this.propMetadata(t);Object.keys(e).forEach((t=>{n[t]=e[t]}))}const o=this._ownPropMetadata(e,t);return o&&Object.keys(o).forEach((e=>{const t=[];n.hasOwnProperty(e)&&t.push(...n[e]),t.push(...o[e]),n[e]=t})),n}ownPropMetadata(e){return Cr(e)&&this._ownPropMetadata(e,Vr(e))||{}}hasLifecycleHook(e,t){return e instanceof _r&&t in e.prototype}guards(e){return{}}getter(e){return new Function("o","return o."+e+";")}setter(e){return new Function("o","v","return o."+e+" = v;")}method(e){return new Function("o","args",`if (!o.${e}) throw new Error('"${e}" is undefined');\n        return o.${e}.apply(o, args);`)}importUri(e){return"object"==typeof e&&e.filePath?e.filePath:`./${ae(e)}`}resourceUri(e){return`./${ae(e)}`}resolveIdentifier(e,t,n,o){return o}resolveEnum(e,t){return e[t]}}function jr(e){return e?e.map((e=>new(0,e.type.annotationCls)(...e.args?e.args:[]))):[]}function Vr(e){const t=e.prototype?Object.getPrototypeOf(e.prototype):null;return(t?t.constructor:null)||Object}const $r={},Lr=/\n/gm,Fr="__source",Hr=ie({provide:String,useValue:ie});let Ur;function Br(e){const t=Ur;return Ur=e,t}function Wr(e,t=ze.Default){if(void 0===Ur){const e="undefined"==typeof ngDevMode||ngDevMode?"inject() must be called from an injection context":"";throw new pe(203,e)}return null===Ur?Ge(e,void 0,t):Ur.get(e,t&ze.Optional?null:void 0,t)}function qr(e,t=ze.Default){return(Ke||Wr)(fe(e),t)}function zr(e){const t=ngDevMode?`This constructor is not compatible with Angular Dependency Injection because its dependency at index ${e} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${e} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`:"invalid";throw new Error(t)}const Kr=qr;function Jr(e){const t=[];for(let n=0;n<e.length;n++){const o=fe(e[n]);if(Array.isArray(o)){if(0===o.length){const e="undefined"==typeof ngDevMode||ngDevMode?"Arguments array must have arguments.":"";throw new pe(900,e)}let e,n=ze.Default;for(let t=0;t<o.length;t++){const r=o[t],i=r.__NG_DI_FLAG__;"number"==typeof i?-1===i?e=r.token:n|=i:e=r}t.push(qr(e,n))}else t.push(qr(o))}return t}function Gr(e,t){return e.__NG_DI_FLAG__=t,e.prototype.__NG_DI_FLAG__=t,e}const Zr=Gr(cr("Inject",(e=>({token:e}))),-1),Qr=Gr(cr("Optional"),8),Yr=Gr(cr("Self"),2),Xr=Gr(cr("SkipSelf"),4),ei=Gr(cr("Host"),1);let ti=null;function ni(){return ti=ti||new Rr}function oi(e){return ri(ni().parameters(e))}function ri(e){return e.map((e=>function(e){const t={token:null,attribute:null,host:!1,optional:!1,self:!1,skipSelf:!1};if(Array.isArray(e)&&e.length>0)for(let n=0;n<e.length;n++){const o=e[n];if(void 0===o)continue;const r=Object.getPrototypeOf(o);if(o instanceof Qr||"Optional"===r.ngMetadataName)t.optional=!0;else if(o instanceof Xr||"SkipSelf"===r.ngMetadataName)t.skipSelf=!0;else if(o instanceof Yr||"Self"===r.ngMetadataName)t.self=!0;else if(o instanceof ei||"Host"===r.ngMetadataName)t.host=!0;else if(o instanceof Zr)t.token=o.token;else if(o instanceof ur){if(void 0===o.attributeName)throw new Error("Attribute name must be defined.");t.attribute=o.attributeName}else t.token=o}else void 0===e||Array.isArray(e)&&0===e.length?t.token=null:t.token=e;return t}(e)))}function ii(e){const t=[],n=new Map;function o(t){let o=n.get(t);if(!o){const r=e(t);n.set(t,o=r.then(ui))}return o}return si.forEach(((e,n)=>{const r=[];e.templateUrl&&r.push(o(e.templateUrl).then((t=>{e.template=t})));const i=e.styleUrls,s=e.styles||(e.styles=[]),a=e.styles.length;i&&i.forEach(((t,n)=>{s.push(""),r.push(o(t).then((o=>{s[a+n]=o,i.splice(i.indexOf(t),1),0==i.length&&(e.styleUrls=void 0)})))}));const c=Promise.all(r).then((()=>function(e){ai.delete(e)}(n)));t.push(c)})),li(),Promise.all(t).then((()=>{}))}let si=new Map;const ai=new Set;function ci(e){return!!(e.templateUrl&&!e.hasOwnProperty("template")||e.styleUrls&&e.styleUrls.length)}function li(){const e=si;return si=new Map,e}function ui(e){return"string"==typeof e?e:e.text()}let fi,di;function pi(){if(void 0===fi&&(fi=null,it.trustedTypes))try{fi=it.trustedTypes.createPolicy("angular",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch{}return fi}function hi(e){return pi()?.createHTML(e)||e}function gi(){if(void 0===di&&(di=null,it.trustedTypes))try{di=it.trustedTypes.createPolicy("angular#unsafe-bypass",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch{}return di}function yi(e){return gi()?.createHTML(e)||e}function mi(e){return gi()?.createScript(e)||e}function vi(e){return gi()?.createScriptURL(e)||e}class bi{constructor(e){this.changingThisBreaksApplicationSecurity=e}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see https://g.co/ng/security#xss)`}}class wi extends bi{getTypeName(){return"HTML"}}class _i extends bi{getTypeName(){return"Style"}}class Ci extends bi{getTypeName(){return"Script"}}class Di extends bi{getTypeName(){return"URL"}}class Mi extends bi{getTypeName(){return"ResourceURL"}}function xi(e){return e instanceof bi?e.changingThisBreaksApplicationSecurity:e}function Ii(e,t){const n=Ei(e);if(null!=n&&n!==t){if("ResourceURL"===n&&"URL"===t)return!0;throw new Error(`Required a safe ${t}, got a ${n} (see https://g.co/ng/security#xss)`)}return n===t}function Ei(e){return e instanceof bi&&e.getTypeName()||null}function Ti(e){return new wi(e)}function Si(e){return new _i(e)}function Oi(e){return new Ci(e)}function Ai(e){return new Di(e)}function ki(e){return new Mi(e)}function Ni(e){const t=new Ri(e);return function(){try{return!!(new window.DOMParser).parseFromString(hi(""),"text/html")}catch{return!1}}()?new Pi(t):t}class Pi{constructor(e){this.inertDocumentHelper=e}getInertBodyElement(e){e="<body><remove></remove>"+e;try{const t=(new window.DOMParser).parseFromString(hi(e),"text/html").body;return null===t?this.inertDocumentHelper.getInertBodyElement(e):(t.removeChild(t.firstChild),t)}catch{return null}}}class Ri{constructor(e){if(this.defaultDoc=e,this.inertDocument=this.defaultDoc.implementation.createHTMLDocument("sanitization-inert"),null==this.inertDocument.body){const e=this.inertDocument.createElement("html");this.inertDocument.appendChild(e);const t=this.inertDocument.createElement("body");e.appendChild(t)}}getInertBodyElement(e){const t=this.inertDocument.createElement("template");if("content"in t)return t.innerHTML=hi(e),t;const n=this.inertDocument.createElement("body");return n.innerHTML=hi(e),this.defaultDoc.documentMode&&this.stripCustomNsAttrs(n),n}stripCustomNsAttrs(e){const t=e.attributes;for(let n=t.length-1;0<n;n--){const o=t.item(n).name;"xmlns:ns1"!==o&&0!==o.indexOf("ns1:")||e.removeAttribute(o)}let n=e.firstChild;for(;n;)n.nodeType===Node.ELEMENT_NODE&&this.stripCustomNsAttrs(n),n=n.nextSibling}}const ji=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,Vi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function $i(e){return(e=String(e)).match(ji)||e.match(Vi)?e:(("undefined"==typeof ngDevMode||ngDevMode)&&console.warn(`WARNING: sanitizing unsafe URL value ${e} (see https://g.co/ng/security#xss)`),"unsafe:"+e)}function Li(e){return(e=String(e)).split(",").map((e=>$i(e.trim()))).join(", ")}function Fi(e){const t={};for(const n of e.split(","))t[n]=!0;return t}function Hi(...e){const t={};for(const n of e)for(const e in n)n.hasOwnProperty(e)&&(t[e]=!0);return t}const Ui=Fi("area,br,col,hr,img,wbr"),Bi=Fi("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),Wi=Fi("rp,rt"),qi=Hi(Wi,Bi),zi=Hi(Bi,Fi("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),Ki=Hi(Wi,Fi("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),Ji=Hi(Ui,zi,Ki,qi),Gi=Fi("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),Zi=Fi("srcset"),Qi=Fi("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),Yi=Fi("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext"),Xi=Hi(Gi,Zi,Qi,Yi),es=Fi("script,style,template");class ts{constructor(){this.sanitizedSomething=!1,this.buf=[]}sanitizeChildren(e){let t=e.firstChild,n=!0;for(;t;)if(t.nodeType===Node.ELEMENT_NODE?n=this.startElement(t):t.nodeType===Node.TEXT_NODE?this.chars(t.nodeValue):this.sanitizedSomething=!0,n&&t.firstChild)t=t.firstChild;else for(;t;){t.nodeType===Node.ELEMENT_NODE&&this.endElement(t);let e=this.checkClobberedElement(t,t.nextSibling);if(e){t=e;break}t=this.checkClobberedElement(t,t.parentNode)}return this.buf.join("")}startElement(e){const t=e.nodeName.toLowerCase();if(!Ji.hasOwnProperty(t))return this.sanitizedSomething=!0,!es.hasOwnProperty(t);this.buf.push("<"),this.buf.push(t);const n=e.attributes;for(let e=0;e<n.length;e++){const t=n.item(e),o=t.name,r=o.toLowerCase();if(!Xi.hasOwnProperty(r)){this.sanitizedSomething=!0;continue}let i=t.value;Gi[r]&&(i=$i(i)),Zi[r]&&(i=Li(i)),this.buf.push(" ",o,'="',rs(i),'"')}return this.buf.push(">"),!0}endElement(e){const t=e.nodeName.toLowerCase();Ji.hasOwnProperty(t)&&!Ui.hasOwnProperty(t)&&(this.buf.push("</"),this.buf.push(t),this.buf.push(">"))}chars(e){this.buf.push(rs(e))}checkClobberedElement(e,t){if(t&&(e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)===Node.DOCUMENT_POSITION_CONTAINED_BY)throw new Error(`Failed to sanitize html because the element is clobbered: ${e.outerHTML}`);return t}}const ns=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,os=/([^\#-~ |!])/g;function rs(e){return e.replace(/&/g,"&amp;").replace(ns,(function(e){return"&#"+(1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536)+";"})).replace(os,(function(e){return"&#"+e.charCodeAt(0)+";"})).replace(/</g,"&lt;").replace(/>/g,"&gt;")}let is;function ss(e,t){let n=null;try{is=is||Ni(e);let o=t?String(t):"";n=is.getInertBodyElement(o);let r=5,i=o;do{if(0===r)throw new Error("Failed to sanitize html because the input is unstable");r--,o=i,i=n.innerHTML,n=is.getInertBodyElement(o)}while(o!==i);const s=new ts,a=s.sanitizeChildren(as(n)||n);return("undefined"==typeof ngDevMode||ngDevMode)&&s.sanitizedSomething&&console.warn("WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss"),hi(a)}finally{if(n){const e=as(n)||n;for(;e.firstChild;)e.removeChild(e.firstChild)}}}function as(e){return"content"in e&&function(e){return e.nodeType===Node.ELEMENT_NODE&&"TEMPLATE"===e.nodeName}(e)?e.content:null}var cs;function ls(e){const t=ms();return t?yi(t.sanitize(cs.HTML,e)||""):Ii(e,"HTML")?yi(xi(e)):ss(gn(),ge(e))}function us(e){const t=ms();return t?t.sanitize(cs.STYLE,e)||"":Ii(e,"Style")?xi(e):ge(e)}function fs(e){const t=ms();return t?t.sanitize(cs.URL,e)||"":Ii(e,"URL")?xi(e):$i(ge(e))}function ds(e){const t=ms();if(t)return vi(t.sanitize(cs.RESOURCE_URL,e)||"");if(Ii(e,"ResourceURL"))return vi(xi(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a resource URL context (see https://g.co/ng/security#xss)":"";throw new pe(904,n)}function ps(e){const t=ms();if(t)return mi(t.sanitize(cs.SCRIPT,e)||"");if(Ii(e,"Script"))return mi(xi(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a script context":"";throw new pe(905,n)}function hs(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted HTML constant: ${e.join("?")}`);return hi(e[0])}function gs(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted URL constant: ${e.join("?")}`);return function(e){return pi()?.createScriptURL(e)||e}(e[0])}function ys(e,t,n){return function(e,t){return"src"===t&&("embed"===e||"frame"===e||"iframe"===e||"media"===e||"script"===e)||"href"===t&&("base"===e||"link"===e)?ds:fs}(t,n)(e)}function ms(){const e=Pn();return e&&e[12]}function vs(e){let t=Cs(e);if(t){if(Array.isArray(t)){const o=t;let r,i,s;if((n=e)&&n.constructor&&n.constructor.ɵcmp){if(r=Is(o,e),-1==r)throw new Error("The provided component was not found in the application");i=e}else if(function(e){return e&&e.constructor&&e.constructor.ɵdir}(e)){if(r=function(e,t){let n=e[1].firstChild;for(;n;){const o=n.directiveStart,r=n.directiveEnd;for(let i=o;i<r;i++)if(e[i]===t)return n.index;n=xs(n)}return-1}(o,e),-1==r)throw new Error("The provided directive was not found in the application");s=Es(r,o,!1)}else if(r=Ms(o,e),-1==r)return null;const a=bn(o[r]),c=Cs(a),l=c&&!Array.isArray(c)?c:bs(o,r,a);if(i&&void 0===l.component&&(l.component=i,_s(l.component,l)),s&&void 0===l.directives){l.directives=s;for(let e=0;e<s.length;e++)_s(s[e],l)}_s(l.native,l),t=l}}else{const n=e;ngDevMode&&Ne(n);let o=n;for(;o=o.parentNode;){const e=Cs(o);if(e){let o;if(o=Array.isArray(e)?e:e.lView,!o)return null;const r=Ms(o,n);if(r>=0){const e=bn(o[r]),n=bs(o,r,e);_s(e,n),t=n;break}}}}var n;return t||null}function bs(e,t,n){return{lView:e,nodeIndex:t,native:n,component:void 0,directives:void 0,localRefs:void 0}}function ws(e){let t,n=Cs(e);if(Array.isArray(n)){const o=Is(n,e);t=Mn(o,n);const r=bs(n,o,t[0]);r.component=e,_s(e,r),_s(r.native,r)}else{const e=n;t=Mn(e.nodeIndex,e.lView)}return t}function _s(e,t){ngDevMode&&Ae(e,"Target expected"),e.__ngContext__=t}function Cs(e){return ngDevMode&&Ae(e,"Target expected"),e.__ngContext__||null}function Ds(e){const t=Cs(e);return t?Array.isArray(t)?t:t.lView:null}function Ms(e,t){const n=e[1];for(let o=Ot;o<n.bindingStartIndex;o++)if(bn(e[o])===t)return o;return-1}function xs(e){if(e.child)return e.child;if(e.next)return e.next;for(;e.parent&&!e.parent.next;)e=e.parent;return e.parent&&e.parent.next}function Is(e,t){const n=e[1].components;if(n)for(let o=0;o<n.length;o++){const r=n[o];if(Mn(r,e)[8]===t)return r}else if(Mn(Ot,e)[8]===t)return Ot;return-1}function Es(e,t,n){const o=t[1].data[e];let r=o.directiveStart;if(0==r)return ct;const i=o.directiveEnd;return!n&&2&o.flags&&r++,t.slice(r,i)}function Ts(e){return e.ngOriginalError}function Ss(e,...t){e.error(...t)}!function(e){e[e.NONE=0]="NONE",e[e.HTML=1]="HTML",e[e.STYLE=2]="STYLE",e[e.SCRIPT=3]="SCRIPT",e[e.URL=4]="URL",e[e.RESOURCE_URL=5]="RESOURCE_URL"}(cs||(cs={}));class Os{constructor(){this._console=console}handleError(e){const t=this._findOriginalError(e),n=function(e){return e&&e.ngErrorLogger||Ss}(e);n(this._console,"ERROR",e),t&&n(this._console,"ORIGINAL ERROR",t)}_findOriginalError(e){let t=e&&Ts(e);for(;t&&Ts(t);)t=Ts(t);return t||null}}const As={name:"custom-elements"},ks={name:"no-errors-schema"},Ns=/^>|^->|<!--|-->|--!>|<!-$/g,Ps=/(<|>)/;function Rs(e){return e.replace(Ns,(e=>e.replace(Ps,"​$1​")))}const js=/([A-Z])/g,Vs=("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(it);function $s(e){return e.ownerDocument.defaultView}function Ls(e){return e.ownerDocument}function Fs(e){return e.ownerDocument.body}const Hs="�";function Us(e){return e instanceof Function?e():e}function Bs(e){throw new pe(-300,`Multiple components match node with tagname ${e.value}`)}function Ws(e,t,n,o,r){const[i,s,...a]=o.split(Hs);let c=s,l=s;for(let o=0;o<a.length;o++){const i=t+o;c+=`${e[i]}${a[o]}`,l+=`${i===n?r:e[i]}${a[o]}`}return{propName:i,oldValue:c,newValue:l}}var qs;let zs;function Ks(e,t){return zs(e,t)}function Js(e){ngDevMode&&Kt(e);const t=e[3];return Pt(t)?t[3]:t}function Gs(e){const t=function(e){ngDevMode&&Ae(e,"component");let t=Nt(e)?e:Ds(e);for(;t&&!(512&t[2]);)t=Js(t);return ngDevMode&&Kt(t),t}(e);return ngDevMode&&Ae(t[8],"RootView has no context. Perhaps it is disconnected?"),t[8]}function Zs(e){return Ys(e[13])}function Qs(e){return Ys(e[4])}function Ys(e){for(;null!==e&&!Pt(e);)e=e[4];return e}function Xs(e,t,n,o,r){if(null!=o){let i,s=!1;Pt(o)?i=o:Nt(o)&&(s=!0,ngDevMode&&Ae(o[0],"HOST must be defined for a component LView"),o=o[0]);const a=bn(o);ngDevMode&&!mn(t)&&Ne(a),0===e&&null!==n?null==r?fa(t,n,a):ua(t,n,a,r||null,!0):1===e&&null!==n?ua(t,n,a,r||null,!0):2===e?Da(t,a,s):3===e&&(ngDevMode&&ngDevMode.rendererDestroyNode++,t.destroyNode(a)),null!=i&&function(e,t,n,o,r){ngDevMode&&qt(n);const i=n[7];i!==bn(n)&&Xs(t,e,o,i,r);for(let r=kt;r<n.length;r++){const s=n[r];xa(s[1],s,e,t,o,i)}}(t,e,i,n,r)}}function ea(e,t){return ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&ngDevMode.rendererSetText++,mn(e)?e.createText(t):e.createTextNode(t)}function ta(e,t,n){ngDevMode&&ngDevMode.rendererSetText++,mn(e)?e.setValue(t,n):t.textContent=n}function na(e,t){return ngDevMode&&ngDevMode.rendererCreateComment++,e.createComment(Rs(t))}function oa(e,t,n){if(ngDevMode&&ngDevMode.rendererCreateElement++,mn(e))return e.createElement(t,n);{const o=null!==n?function(e){const t=e.toLowerCase();return t===fn?"http://www.w3.org/2000/svg":t===dn?"http://www.w3.org/1998/MathML/":null}(n):null;return null===o?e.createElement(t):e.createElementNS(o,t)}}function ra(e,t){ngDevMode&&qt(e),ngDevMode&&Ae(e[9],"A projected view should belong to a non-empty projected views collection");const n=e[9],o=n.indexOf(t),r=t[3];ngDevMode&&qt(r),1024&t[2]&&(t[2]&=-1025,Sn(r,-1)),n.splice(o,1)}function ia(e,t){if(e.length<=kt)return;const n=kt+t,o=e[n];if(o){const i=o[17];null!==i&&i!==e&&ra(i,o),t>0&&(e[n-1][4]=o[4]);const s=Ir(e,kt+t);xa(o[1],r=o,r[11],2,null,null),r[0]=null,r[6]=null;const a=s[19];null!==a&&a.detachView(s[1]),o[3]=null,o[4]=null,o[2]&=-129}var r;return o}function sa(e,t){if(!(256&t[2])){const n=t[11];mn(n)&&n.destroyNode&&xa(e,t,n,3,null,null),function(e){let t=e[13];if(!t)return aa(e[1],e);for(;t;){let n=null;if(Nt(t))n=t[13];else{ngDevMode&&qt(t);const e=t[10];e&&(n=e)}if(!n){for(;t&&!t[4]&&t!==e;)Nt(t)&&aa(t[1],t),t=t[3];null===t&&(t=e),Nt(t)&&aa(t[1],t),n=t&&t[4]}t=n}}(t)}}function aa(e,t){if(!(256&t[2])){t[2]&=-129,t[2]|=256,function(e,t){let n;if(null!=e&&null!=(n=e.destroyHooks))for(let e=0;e<n.length;e+=2){const o=t[n[e]];if(!(o instanceof Mo)){const t=n[e+1];if(Array.isArray(t))for(let e=0;e<t.length;e+=2){const n=o[t[e]],r=t[e+1];un(4,n,r);try{r.call(n)}finally{un(5,n,r)}}else{un(4,o,t);try{t.call(o)}finally{un(5,o,t)}}}}}(e,t),function(e,t){const n=e.cleanup,o=t[7];let r=-1;if(null!==n)for(let e=0;e<n.length-1;e+=2)if("string"==typeof n[e]){const i=n[e+1],s="function"==typeof i?i(t):bn(t[i]),a=o[r=n[e+2]],c=n[e+3];"boolean"==typeof c?s.removeEventListener(n[e],a,c):c>=0?o[r=c]():o[r=-c].unsubscribe(),e+=2}else{const t=o[r=n[e+1]];n[e].call(t)}if(null!==o){for(let e=r+1;e<o.length;e++){const t=o[e];ngDevMode&&(s="Expecting instance cleanup function.","function"!=typeof(i=t)&&ke(s,null===i?"null":typeof i,"function","===")),t()}t[7]=null}var i,s}(e,t),1===t[1].type&&mn(t[11])&&(ngDevMode&&ngDevMode.rendererDestroy++,t[11].destroy());const n=t[17];if(null!==n&&Pt(t[3])){n!==t[3]&&ra(n,t);const o=t[19];null!==o&&o.detachView(e)}}}function ca(e,t,n){return la(e,t.parent,n)}function la(e,t,n){let o=t;for(;null!==o&&40&o.type;)o=(t=o).parent;if(null===o)return n[0];if(ngDevMode&&Io(o,7),2&o.flags){ngDevMode&&Lt(o,n);const t=e.data[o.directiveStart].encapsulation;if(t===Xe.None||t===Xe.Emulated)return null}return _n(o,n)}function ua(e,t,n,o,r){ngDevMode&&ngDevMode.rendererInsertBefore++,mn(e)?e.insertBefore(t,n,o,r):t.insertBefore(n,o,r)}function fa(e,t,n){ngDevMode&&ngDevMode.rendererAppendChild++,ngDevMode&&Ae(t,"parent node must be defined"),mn(e)?e.appendChild(t,n):t.appendChild(n)}function da(e,t,n,o,r){null!==o?ua(e,t,n,o,r):fa(e,t,n)}function pa(e,t){return mn(e)?e.parentNode(t):t.parentNode}function ha(e,t,n){return ma(e,t,n)}function ga(e,t,n){return 40&e.type?_n(e,n):null}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(qs||(qs={}));let ya,ma=ga;function va(e,t){ma=e,ya=t}function ba(e,t,n,o){const r=ca(e,o,t),i=t[11],s=ha(o.parent||t[6],o,t);if(null!=r)if(Array.isArray(n))for(let e=0;e<n.length;e++)da(i,r,n[e],s,!1);else da(i,r,n,s,!1);void 0!==ya&&ya(i,o,t,n,r)}function wa(e,t){if(null!==t){ngDevMode&&Io(t,63);const n=t.type;if(3&n)return _n(t,e);if(4&n)return Ca(-1,e[t.index]);if(8&n){const n=t.child;if(null!==n)return wa(e,n);{const n=e[t.index];return Pt(n)?Ca(-1,n):bn(n)}}if(32&n)return Ks(t,e)()||bn(e[t.index]);{const n=_a(e,t);if(null!==n){if(Array.isArray(n))return n[0];const t=Js(e[16]);return ngDevMode&&Yt(t),wa(t,n)}return wa(e,t.next)}}return null}function _a(e,t){if(null!==t){const n=e[16][6],o=t.projection;return ngDevMode&&function(e,t){Ae(e[16],"Component views should exist."),Ae(e[16][6].projection,"Components with projection nodes (<ng-content>) must have projection slots defined.")}(e),n.projection[o]}return null}function Ca(e,t){const n=kt+e+1;if(n<t.length){const e=t[n],o=e[1].firstChild;if(null!==o)return wa(e,o)}return t[7]}function Da(e,t,n){ngDevMode&&ngDevMode.rendererRemoveNode++;const o=pa(e,t);o&&function(e,t,n,o){mn(e)?e.removeChild(t,n,o):t.removeChild(n)}(e,o,t,n)}function Ma(e,t,n,o,r,i,s){for(;null!=n;){ngDevMode&&Lt(n,o),ngDevMode&&Io(n,63);const a=o[n.index],c=n.type;if(s&&0===t&&(a&&_s(bn(a),o),n.flags|=4),64!=(64&n.flags))if(8&c)Ma(e,t,n.child,o,r,i,!1),Xs(t,e,r,a,i);else if(32&c){const s=Ks(n,o);let c;for(;c=s();)Xs(t,e,r,c,i);Xs(t,e,r,a,i)}else 16&c?Ia(e,t,o,n,r,i):(ngDevMode&&Io(n,7),Xs(t,e,r,a,i));n=s?n.projectionNext:n.next}}function xa(e,t,n,o,r,i){Ma(n,o,e.firstChild,t,r,i,!1)}function Ia(e,t,n,o,r,i){const s=n[16],a=s[6];ngDevMode&&De(typeof o.projection,"number","expecting projection index");const c=a.projection[o.projection];if(Array.isArray(c))for(let n=0;n<c.length;n++)Xs(t,e,r,c[n],i);else Ma(e,t,c,s[3],r,i,!0)}function Ea(e,t,n){ngDevMode&&Ce(n,"'newValue' should be a string"),mn(e)?e.setAttribute(t,"style",n):t.style.cssText=n,ngDevMode&&ngDevMode.rendererSetStyle++}function Ta(e,t,n){ngDevMode&&Ce(n,"'newValue' should be a string"),mn(e)?""===n?e.removeAttribute(t,"class"):e.setAttribute(t,"class",n):t.className=n,ngDevMode&&ngDevMode.rendererSetClassName++}function Sa(e,t,n){ngDevMode&&Me(t,"",'can not look for "" string.');let o=e.length;for(;;){const r=e.indexOf(t,n);if(-1===r)return r;if(0===r||e.charCodeAt(r-1)<=32){const n=t.length;if(r+n===o||e.charCodeAt(r+n)<=32)return r}n=r+1}}const Oa="ng-template";function Aa(e,t,n){ngDevMode&&De(t,t.toLowerCase(),"Class name expected to be lowercase.");let o=0;for(;o<e.length;){let r=e[o++];if(n&&"class"===r){if(r=e[o],-1!==Sa(r.toLowerCase(),t,0))return!0}else if(1===r){for(;o<e.length&&"string"==typeof(r=e[o++]);)if(r.toLowerCase()===t)return!0;return!1}}return!1}function ka(e){return 4===e.type&&e.value!==Oa}function Na(e,t,n){return t===(4!==e.type||n?e.value:Oa)}function Pa(e,t,n){ngDevMode&&Ae(t[0],"Selector should have a tag name");let o=4;const r=e.attrs||[],i=function(e){for(let t=0;t<e.length;t++)if(To(e[t]))return t;return e.length}(r);let s=!1;for(let a=0;a<t.length;a++){const c=t[a];if("number"!=typeof c){if(!s)if(4&o){if(o=2|1&o,""!==c&&!Na(e,c,n)||""===c&&1===t.length){if(Ra(o))return!1;s=!0}}else{const l=8&o?c:t[++a];if(8&o&&null!==e.attrs){if(!Aa(e.attrs,l,n)){if(Ra(o))return!1;s=!0}continue}const u=ja(8&o?"class":c,r,ka(e),n);if(-1===u){if(Ra(o))return!1;s=!0;continue}if(""!==l){let e;u>i?e="":(ngDevMode&&Me(r[u],0,"We do not match directives on namespaced attributes"),e=r[u+1].toLowerCase());const t=8&o?e:null;if(t&&-1!==Sa(t,l,0)||2&o&&l!==e){if(Ra(o))return!1;s=!0}}}}else{if(!s&&!Ra(o)&&!Ra(c))return!1;if(s&&Ra(c))continue;s=!1,o=c|1&o}}return Ra(o)||s}function Ra(e){return 0==(1&e)}function ja(e,t,n,o){if(null===t)return-1;let r=0;if(o||!n){let n=!1;for(;r<t.length;){const o=t[r];if(o===e)return r;if(3===o||6===o)n=!0;else{if(1===o||2===o){let e=t[++r];for(;"string"==typeof e;)e=t[++r];continue}if(4===o)break;if(0===o){r+=4;continue}}r+=n?1:2}return-1}return function(e,t){let n=e.indexOf(4);if(n>-1)for(n++;n<e.length;){const o=e[n];if("number"==typeof o)return-1;if(o===t)return n;n++}return-1}(t,e)}function Va(e,t,n=!1){for(let o=0;o<t.length;o++)if(Pa(e,t[o],n))return!0;return!1}function $a(e,t){e:for(let n=0;n<t.length;n++){const o=t[n];if(e.length===o.length){for(let t=0;t<e.length;t++)if(e[t]!==o[t])continue e;return!0}}return!1}function La(e,t){return e?":not("+t.trim()+")":t}function Fa(e){let t=e[0],n=1,o=2,r="",i=!1;for(;n<e.length;){let s=e[n];if("string"==typeof s)if(2&o){const t=e[++n];r+="["+s+(t.length>0?'="'+t+'"':"")+"]"}else 8&o?r+="."+s:4&o&&(r+=" "+s);else""===r||Ra(s)||(t+=La(i,r),r=""),o=s,i=i||!Ra(o);n++}return""!==r&&(t+=La(i,r)),t}const Ha="undefined"==typeof ngDevMode||ngDevMode?{__brand__:"NO_CHANGE"}:{};function Ua(e){ngDevMode&&Se(e,0,"Can only advance forward"),Ba(Rn(),Pn(),uo()+e,Bn())}function Ba(e,t,n,o){if(ngDevMode&&function(e,t){const n=e[1];Qt(Ot,n.bindingStartIndex,t)}(t,n),!o)if(3==(3&t[2])){const o=e.preOrderCheckHooks;null!==o&&vo(t,o,n)}else{const o=e.preOrderHooks;null!==o&&bo(t,o,0,n)}fo(n)}function Wa(e){if(!ngDevMode)throw new Error("Looks like we are in 'prod mode', but we are creating a named Array type, which is wrong! Check your code");try{return function(...e){if("undefined"==typeof ngDevMode)throw new Error("newTrustedFunctionForDev should never be called in production");if(!it.trustedTypes)return new Function(...e);const t=`(function anonymous(${e.slice(0,-1).join(",")}\n) { ${e[e.length-1]}\n})`,n=it.eval((o=t,pi()?.createScript(o)||o));var o;return void 0===n.bind?new Function(...e):(n.toString=()=>t,n.bind(it))}("Array",`return class ${e} extends Array{}`)(Array)}catch(e){return Array}}function qa(e,t){return ngDevMode&&_e(e,0,32767),ngDevMode&&_e(t,0,32767),e<<17|t<<2}function za(e){return ngDevMode&&we(e,"expected number"),e>>17&32767}function Ka(e){return ngDevMode&&we(e,"expected number"),2==(2&e)}function Ja(e){return ngDevMode&&we(e,"expected number"),2|e}function Ga(e){return ngDevMode&&we(e,"expected number"),(131068&e)>>2}function Za(e,t){return ngDevMode&&we(e,"expected number"),ngDevMode&&_e(t,0,32767),-131069&e|t<<2}function Qa(e){return ngDevMode&&we(e,"expected number"),1==(1&e)}function Ya(e){return ngDevMode&&we(e,"expected number"),1|e}function Xa(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{value:t,enumerable:!1})}function ec(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{get:t,enumerable:!1})}let tc,nc,oc,rc,ic;class sc extends Array{}class ac extends Array{}class cc extends Array{}function lc(e){if(null==e)return"";const t=e.lastIndexOf("_Template");return"_"+(-1===t?e:e.substr(0,t))}function uc(e,t){const n=e.tView_.data,o=[],r=t?e.classBindings:e.styleBindings,i=za(r),s=Ga(r);let a=0!==s,c=a?s:i;for(;0!==c;){const e=n[c],t=n[c+1];o.unshift({key:e,index:c,isTemplate:a,prevDuplicate:Ka(t),nextDuplicate:Qa(t),nextIndex:Ga(t),prevIndex:za(t)}),c===i&&(a=!1),c=za(t)}return o.push((t?e.residualClasses:e.residualStyles)||null),o}function fc(e,t){for(;e;)t.push(e.template_),e=e.next}class dc extends Array{}let pc;class hc extends Array{}class gc extends Array{}class yc extends Array{}class mc extends Array{}class vc extends Array{}class bc extends Array{}class wc extends Array{}function _c(e){if(e){const t=e.debug;return Ae(t,"Object does not have a debug representation."),t}return e}function Cc(e,t=!1){const n=bn(e);if(n)switch(n.nodeType){case Node.TEXT_NODE:return n.textContent;case Node.COMMENT_NODE:return`\x3c!--${n.textContent}--\x3e`;case Node.ELEMENT_NODE:const e=n.outerHTML;if(t)return e;{const t=">"+n.innerHTML+"<";return e.split(t)[0]+">"}}return null}class Dc{constructor(e){this._raw_lView=e}get flags(){const e=this._raw_lView[2];return{__raw__flags__:e,initPhaseState:3&e,creationMode:!!(4&e),firstViewPass:!!(8&e),checkAlways:!!(16&e),dirty:!!(64&e),attached:!!(128&e),destroyed:!!(256&e),isRoot:!!(512&e),indexWithinInitPhase:e>>11}}get parent(){return _c(this._raw_lView[3])}get hostHTML(){return Cc(this._raw_lView[0],!0)}get html(){return(this.nodes||[]).map(Mc).join("")}get context(){return this._raw_lView[8]}get nodes(){const e=this._raw_lView;return Ic(e[1].firstChild,e)}get template(){return this.tView.template_}get tView(){return this._raw_lView[1]}get cleanup(){return this._raw_lView[7]}get injector(){return this._raw_lView[9]}get rendererFactory(){return this._raw_lView[10]}get renderer(){return this._raw_lView[11]}get sanitizer(){return this._raw_lView[12]}get childHead(){return _c(this._raw_lView[13])}get next(){return _c(this._raw_lView[4])}get childTail(){return _c(this._raw_lView[14])}get declarationView(){return _c(this._raw_lView[15])}get queries(){return this._raw_lView[19]}get tHost(){return this._raw_lView[6]}get decls(){return xc(this.tView,this._raw_lView,Ot,this.tView.bindingStartIndex)}get vars(){return xc(this.tView,this._raw_lView,this.tView.bindingStartIndex,this.tView.expandoStartIndex)}get expando(){return xc(this.tView,this._raw_lView,this.tView.expandoStartIndex,this._raw_lView.length)}get childViews(){const e=[];let t=this.childHead;for(;t;)e.push(t),t=t.next;return e}}function Mc(e){if("ElementContainer"===e.type)return(e.children||[]).map(Mc).join("");if("IcuContainer"===e.type)throw new Error("Not implemented");return Cc(e.native,!0)||""}function xc(e,t,n,o){let r=[];for(let i=n;i<o;i++)r.push({index:i,t:e.data[i],l:t[i]});return{start:n,end:o,length:o-n,content:r}}function Ic(e,t){if(e){const n=[];let o=e;for(;o;)n.push(Ec(o,t)),o=o.next;return n}return[]}function Ec(e,t){const n=bn(t[e.index]),o=[],r=[],i=t[1];for(let n=e.directiveStart;n<e.directiveEnd;n++){const e=i.data[n];o.push(e.type),r.push(t[n])}return{html:Cc(n),type:xo(e.type),tNode:e,native:n,children:Ic(e.child,t),factories:o,instances:r,injector:Tc(e,i,t),get injectorResolutionPath(){return e.debugNodeInjectorPath(t)}}}function Tc(e,t,n){const o=[];for(let n=e.providerIndexStart_;n<e.providerIndexEnd_;n++)o.push(t.data[n]);const r=[];for(let n=e.providerIndexEnd_;n<e.directiveEnd;n++)r.push(t.data[n]);return{bloom:Oc(n,e.injectorIndex),cumulativeBloom:Oc(t.data,e.injectorIndex),providers:r,viewProviders:o,parentInjectorIndex:n[e.providerIndexStart_-1]}}function Sc(e,t){const n=e[t];if("number"!=typeof n)return"????????";const o="00000000"+n.toString(2);return o.substring(o.length-8)}function Oc(e,t){return t<0?"NO_NODE_INJECTOR":`${Sc(e,t+7)}_${Sc(e,t+6)}_${Sc(e,t+5)}_${Sc(e,t+4)}_${Sc(e,t+3)}_${Sc(e,t+2)}_${Sc(e,t+1)}_${Sc(e,t+0)}`}class Ac{constructor(e){this._raw_lContainer=e}get hasTransplantedViews(){return this._raw_lContainer[2]}get views(){return this._raw_lContainer.slice(kt).map(_c)}get parent(){return _c(this._raw_lContainer[3])}get movedViews(){return this._raw_lContainer[9]}get host(){return this._raw_lContainer[0]}get native(){return this._raw_lContainer[7]}get next(){return _c(this._raw_lContainer[4])}}const kc=Promise.resolve(null);function Nc(e,t){const n=e.contentQueries;if(null!==n)for(let o=0;o<n.length;o+=2){const r=n[o],i=n[o+1];if(-1!==i){const n=e.data[i];ngDevMode&&Ae(n,"DirectiveDef not found."),ngDevMode&&Ae(n.contentQueries,"contentQueries function should be defined"),to(r),n.contentQueries(2,t[i],i)}}}function Pc(e,t,n,o,r,i,s,a,c,l){const u=ngDevMode?function(e){return function(e,t){switch(e){case 0:return void 0===oc&&(oc=new sc),oc;case 1:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===rc&&(rc=new ac),rc;void 0===tc&&(tc=new Map);let e=tc.get(t);return void 0===e&&(e=new(Wa("LComponentView"+lc(t))),tc.set(t,e)),e;case 2:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===ic&&(ic=new cc),ic;void 0===nc&&(nc=new Map);let n=nc.get(t);return void 0===n&&(n=new(Wa("LEmbeddedView"+lc(t))),nc.set(t,n)),n}}(e.type,e.template&&e.template.name).concat(e.blueprint)}(t):t.blueprint.slice();return u[0]=r,u[2]=140|o,Tn(u),ngDevMode&&t.declTNode&&e&&Lt(t.declTNode,e),u[3]=u[15]=e,u[8]=n,u[10]=s||e&&e[10],ngDevMode&&Ae(u[10],"RendererFactory is required"),u[11]=a||e&&e[11],ngDevMode&&Ae(u[11],"Renderer is required"),u[12]=c||e&&e[12]||null,u[9]=l||e&&e[9]||null,u[6]=i,ngDevMode&&De(2!=t.type||null!==e,!0,"Embedded views must have parentLView"),u[16]=2==t.type?e[16]:u,ngDevMode&&function(e){Xa(e,new Dc(e))}(u),u}function Rc(e,t,n,o,r){ngDevMode&&0!==t&&Oe(t,Ot,"TNodes can't be in the LView header."),ngDevMode&&function(e){2!==e&&1!==e&&4!==e&&8!==e&&32!==e&&16!==e&&64!==e&&ke(`Expected TNodeType to have only a single type selected, but got ${xo(e)}.`)}(n);let i=e.data[t];if(null===i)i=jc(e,t,n,o,r),On.lFrame.inI18n&&(i.flags|=64);else if(64&i.type){i.type=n,i.value=o,i.attrs=r;const s=Ln();i.injectorIndex=null===s?-1:s.injectorIndex,ngDevMode&&Ft(i,e),ngDevMode&&De(t,i.index,"Expecting same index")}return Fn(i,!0),i}function jc(e,t,n,o,r){const i=$n(),s=Hn(),a=s?i:i&&i.parent,c=e.data[t]=function(e,t,n,o,r,i){ngDevMode&&0!==o&&Oe(o,Ot,"TNodes can't be in the LView header."),ngDevMode&&Ie(i,void 0,"'undefined' is not valid value for 'attrs'"),ngDevMode&&ngDevMode.tNode++,ngDevMode&&t&&Ft(t,e);let s=t?t.injectorIndex:-1;const a=ngDevMode?new class{constructor(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v,b,w,_,C,D,M,x,I,E,T,S,O,A){this.tView_=e,this.type=t,this.index=n,this.insertBeforeIndex=o,this.injectorIndex=r,this.directiveStart=i,this.directiveEnd=s,this.directiveStylingLast=a,this.propertyBindings=c,this.flags=l,this.providerIndexes=u,this.value=f,this.attrs=d,this.mergedAttrs=p,this.localNames=h,this.initialInputs=g,this.inputs=y,this.outputs=m,this.tViews=v,this.next=b,this.projectionNext=w,this.child=_,this.parent=C,this.projection=D,this.styles=M,this.stylesWithoutHost=x,this.residualStyles=I,this.classes=E,this.classesWithoutHost=T,this.residualClasses=S,this.classBindings=O,this.styleBindings=A}debugNodeInjectorPath(e){const t=[];let n=Fo(this,e);if(-1===n){const t=Ho(this,e);t!==Do&&(n=No(t),e=Po(t,e))}for(;-1!==n;){ngDevMode&&Xt(e,n);const o=e[1].data[n+8];t.push(Ec(o,e));const r=e[n+8];r===Do?n=-1:(n=No(r),e=Po(r,e))}return t}get type_(){return xo(this.type)||`TNodeType.?${this.type}?`}get flags_(){const e=[];return 16&this.flags&&e.push("TNodeFlags.hasClassInput"),8&this.flags&&e.push("TNodeFlags.hasContentQuery"),32&this.flags&&e.push("TNodeFlags.hasStyleInput"),128&this.flags&&e.push("TNodeFlags.hasHostBindings"),2&this.flags&&e.push("TNodeFlags.isComponentHost"),1&this.flags&&e.push("TNodeFlags.isDirectiveHost"),64&this.flags&&e.push("TNodeFlags.isDetached"),4&this.flags&&e.push("TNodeFlags.isProjected"),e.join("|")}get template_(){if(1&this.type)return this.value;const e=[],t="string"==typeof this.value&&this.value||this.type_;if(e.push("<",t),this.flags&&e.push(" ",this.flags_),this.attrs)for(let t=0;t<this.attrs.length;){const n=this.attrs[t++];if("number"==typeof n)break;const o=this.attrs[t++];e.push(" ",n,'="',o,'"')}return e.push(">"),fc(this.child,e),e.push("</",t,">"),e.join("")}get styleBindings_(){return uc(this,!1)}get classBindings_(){return uc(this,!0)}get providerIndexStart_(){return 1048575&this.providerIndexes}get providerIndexEnd_(){return this.providerIndexStart_+(this.providerIndexes>>>20)}}(e,n,o,null,s,-1,-1,-1,null,0,0,r,i,null,null,void 0,null,null,null,null,null,null,t,null,null,null,void 0,null,null,void 0,0,0):{type:n,index:o,insertBeforeIndex:null,injectorIndex:s,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,value:r,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:t,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0};return ngDevMode&&Object.seal(a),a}(e,a,n,t,o,r);return null===e.firstChild&&(e.firstChild=c),null!==i&&(s?null==i.child&&null!==c.parent&&(i.child=c):null===i.next&&(i.next=c)),c}function Vc(e,t,n,o){if(0===n)return-1;ngDevMode&&(Jt(e),xe(e,t[1],"`LView` must be associated with `TView`!"),De(e.data.length,t.length,"Expecting LView to be same size as TView"),De(e.data.length,e.blueprint.length,"Expecting Blueprint to be same size as TView"),Gt(e));const r=t.length;for(let r=0;r<n;r++)t.push(o),e.blueprint.push(o),e.data.push(null);return r}function $c(e,t,n){ngDevMode&&De(xn(t),!0,"Should be run in creation mode"),ro(t);try{const o=e.viewQuery;null!==o&&Cl(1,o,n);const r=e.template;null!==r&&Hc(e,t,r,1,n),e.firstCreatePass&&(e.firstCreatePass=!1),e.staticContentQueries&&Nc(e,t),e.staticViewQueries&&Cl(2,e.viewQuery,n);const i=e.components;null!==i&&function(e,t){for(let n=0;n<t.length;n++)yl(e,t[n])}(t,i)}catch(t){throw e.firstCreatePass&&(e.incompleteFirstPass=!0,e.firstCreatePass=!1),t}finally{t[2]&=-5,lo()}}function Lc(e,t,n,o){ngDevMode&&De(xn(t),!1,"Should be run in update mode");const r=t[2];if(256==(256&r))return;ro(t);const i=Bn();try{Tn(t),Kn(e.bindingStartIndex),null!==n&&Hc(e,t,n,2,o);const s=3==(3&r);if(!i)if(s){const n=e.preOrderCheckHooks;null!==n&&vo(t,n,null)}else{const n=e.preOrderHooks;null!==n&&bo(t,n,0,null),wo(t,0)}if(function(e){for(let t=Zs(e);null!==t;t=Qs(t)){if(!t[2])continue;const e=t[9];ngDevMode&&Ae(e,"Transplanted View flags set but missing MOVED_VIEWS");for(let t=0;t<e.length;t++){const n=e[t],o=n[3];ngDevMode&&qt(o),0==(1024&n[2])&&Sn(o,1),n[2]|=1024}}}(t),function(e){for(let t=Zs(e);null!==t;t=Qs(t))for(let e=kt;e<t.length;e++){const n=t[e],o=n[1];ngDevMode&&Ae(o,"TView must be allocated"),In(n)&&Lc(o,n,o.template,n[8])}}(t),null!==e.contentQueries&&Nc(e,t),!i)if(s){const n=e.contentCheckHooks;null!==n&&vo(t,n)}else{const n=e.contentHooks;null!==n&&bo(t,n,1),wo(t,1)}!function(e,t){const n=e.hostBindingOpCodes;if(null!==n)try{for(let e=0;e<n.length;e++){const o=n[e];if(o<0)fo(~o);else{const r=o,i=n[++e],s=n[++e];Qn(i,r),s(2,t[r])}}}finally{fo(-1)}}(e,t);const a=e.components;null!==a&&function(e,t){for(let n=0;n<t.length;n++)hl(e,t[n])}(t,a);const c=e.viewQuery;if(null!==c&&Cl(2,c,o),!i)if(s){const n=e.viewCheckHooks;null!==n&&vo(t,n)}else{const n=e.viewHooks;null!==n&&bo(t,n,2),wo(t,2)}!0===e.firstUpdatePass&&(e.firstUpdatePass=!1),i||(t[2]&=-73),1024&t[2]&&(t[2]&=-1025,Sn(t[3],-1))}finally{lo()}}function Fc(e,t,n,o){const r=t[10],i=!Bn(),s=xn(t);try{i&&!s&&r.begin&&r.begin(),s&&$c(e,t,o),Lc(e,t,n,o)}finally{i&&!s&&r.end&&r.end()}}function Hc(e,t,n,o,r){const i=uo(),s=2&o;try{fo(-1),s&&t.length>Ot&&Ba(e,t,Ot,Bn()),un(s?2:0,r),n(o,r)}finally{fo(i),un(s?3:1,r)}}function Uc(e,t,n){if(Rt(t)){const o=t.directiveStart,r=t.directiveEnd;for(let t=o;t<r;t++){const o=e.data[t];o.contentQueries&&o.contentQueries(1,n[t],t)}}}function Bc(e,t,n){An()&&(function(e,t,n,o){const r=n.directiveStart,i=n.directiveEnd;e.firstCreatePass||$o(n,t),_s(o,t);const s=n.initialInputs;for(let o=r;o<i;o++){const i=e.data[o],a=$t(i);a&&(ngDevMode&&Io(n,3),al(t,n,i));const c=Zo(t,e,o,n);_s(c,t),null!==s&&ul(t,o-r,c,i,n,s),a&&(Mn(n.index,t)[8]=c)}}(e,t,n,_n(n,t)),128==(128&n.flags)&&function(e,t,n){const o=n.directiveStart,r=n.directiveEnd,i=(e.firstCreatePass,n.index),s=On.lFrame.currentDirectiveIndex;try{fo(i);for(let n=o;n<r;n++){const o=e.data[n],r=t[n];Yn(n),null===o.hostBindings&&0===o.hostVars&&null===o.hostAttrs||nl(o,r)}}finally{fo(-1),Yn(s)}}(e,t,n))}function Wc(e,t,n=_n){const o=t.localNames;if(null!==o){let r=t.index+1;for(let i=0;i<o.length;i+=2){const s=o[i+1],a=-1===s?n(t,e):e[s];e[r++]=a}}}function qc(e){const t=e.tView;if(null===t||t.incompleteFirstPass){const t=null;return e.tView=zc(1,t,e.template,e.decls,e.vars,e.directiveDefs,e.pipeDefs,e.viewQuery,e.schemas,e.consts)}return t}function zc(e,t,n,o,r,i,s,a,c,l){ngDevMode&&ngDevMode.tView++;const u=Ot+o,f=u+r,d=function(e,t){const n=ngDevMode?new hc:[];for(let o=0;o<t;o++)n.push(o<e?null:Ha);return n}(u,f),p="function"==typeof l?l():l,h=d[1]=ngDevMode?new class{constructor(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v,b,w,_,C,D,M,x,I,E,T,S,O,A){this.type=e,this.blueprint=t,this.template=n,this.queries=o,this.viewQuery=r,this.declTNode=i,this.data=s,this.bindingStartIndex=a,this.expandoStartIndex=c,this.hostBindingOpCodes=l,this.firstCreatePass=u,this.firstUpdatePass=f,this.staticViewQueries=d,this.staticContentQueries=p,this.preOrderHooks=h,this.preOrderCheckHooks=g,this.contentHooks=y,this.contentCheckHooks=m,this.viewHooks=v,this.viewCheckHooks=b,this.destroyHooks=w,this.cleanup=_,this.contentQueries=C,this.components=D,this.directiveRegistry=M,this.pipeRegistry=x,this.firstChild=I,this.schemas=E,this.consts=T,this.incompleteFirstPass=S,this._decls=O,this._vars=A}get template_(){const e=[];return fc(this.firstChild,e),e.join("")}get type_(){return At[this.type]||`TViewType.?${this.type}?`}}(e,d,n,null,a,t,(g=d,void 0===pc&&(pc=new dc),pc.concat(g)).fill(null,u),u,f,null,!0,!0,!1,!1,null,null,null,null,null,null,null,null,null,null,"function"==typeof i?i():i,"function"==typeof s?s():s,null,c,p,!1,o,r):{type:e,blueprint:d,template:n,queries:null,viewQuery:a,declTNode:t,data:d.slice().fill(null,u),bindingStartIndex:u,expandoStartIndex:f,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof i?i():i,pipeRegistry:"function"==typeof s?s():s,firstChild:null,schemas:c,consts:p,incompleteFirstPass:!1};var g;return ngDevMode&&Object.seal(h),h}function Kc(e,t,n){if(mn(e)){const o=n===Xe.ShadowDom;return e.selectRootElement(t,o)}let o="string"==typeof t?e.querySelector(t):t;return ngDevMode&&function(e,t){if(!e)throw new Error(`Renderer: ${"string"==typeof t?"Host node with selector not found:":"Host node is required:"} [${ye(t)}]`)}(o,t),o.textContent="",o}function Jc(e,t,n,o){const r=xl(t);null===n?(ngDevMode&&Object.freeze(Il(e)),r.push(o)):(r.push(n),e.firstCreatePass&&Il(e).push(o,r.length-1))}function Gc(e,t,n){for(let o in e)if(e.hasOwnProperty(o)){n=null===n?{}:n;const r=e[o];n.hasOwnProperty(o)?n[o].push(t,r):n[o]=[t,r]}return n}function Zc(e,t,n,o,r,i,s,a){ngDevMode&&Ie(r,Ha,"Incoming value should never be NO_CHANGE.");const c=_n(t,n);let l,u=t.inputs;if(!a&&null!=u&&(l=u[o]))Sl(e,n,l,o,r),jt(t)&&function(e,t){ngDevMode&&Kt(e);const n=Mn(t,e);16&n[2]||(n[2]|=64)}(n,t.index),ngDevMode&&function(e,t,n,o,r){if(7&n)for(let i=0;i<o.length;i+=2)Qc(e,t,n,o[i+1],r)}(n,c,t.type,l,r);else if(3&t.type){if(o="class"===(f=o)?"className":"for"===f?"htmlFor":"formaction"===f?"formAction":"innerHtml"===f?"innerHTML":"readonly"===f?"readOnly":"tabindex"===f?"tabIndex":f,ngDevMode){if(function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event property '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...\nIf '${e}' is a directive input, make sure the directive is imported by the current module.`;throw new pe(306,t)}}(o),!function(e,t,n,o){return null===e.schemas||(!!(Yc(e,o.value)||n in t||So(n))||("undefined"==typeof Node||null===Node||!(t instanceof Node)))}(e,c,o,t))return void Xc(o,t);ngDevMode.rendererSetProperty++}r=null!=s?s(r,t.value||"",o):r,mn(i)?i.setProperty(c,o,r):So(o)||(c.setProperty?c.setProperty(o,r):c[o]=r)}else 12&t.type&&ngDevMode&&!Yc(e,t.value)&&Xc(o,t);var f}function Qc(e,t,n,o,r){const i=e[11];var s;s=o.replace(/[$@]/g,"_"),o=`ng-reflect-${s.replace(js,((...e)=>"-"+e[1].toLowerCase()))}`;const a=function(e){try{return null!=e?e.toString().slice(0,30):e}catch(e){return"[ERROR] Exception while trying to serialize the value"}}(r);if(3&n)null==r?mn(i)?i.removeAttribute(t,o):t.removeAttribute(o):mn(i)?i.setAttribute(t,o,a):t.setAttribute(o,a);else{const e=Rs(`bindings=${JSON.stringify({[o]:a},null,2)}`);mn(i)?i.setValue(t,e):t.textContent=e}}function Yc(e,t){const n=e.schemas;if(null!==n)for(let e=0;e<n.length;e++){const o=n[e];if(o===ks||o===As&&t&&t.indexOf("-")>-1)return!0}return!1}function Xc(e,t){let n=`Can't bind to '${e}' since it isn't a known property of '${t.value}'.`;console.error(he(303,n))}function el(e,t,n,o){ngDevMode&&Jt(e);let r=!1;if(An()){const i=function(e,t,n){ngDevMode&&Jt(e),ngDevMode&&Io(n,15);const o=e.directiveRegistry;let r=null;if(o)for(let i=0;i<o.length;i++){const s=o[i];Va(n,s.selectors,!1)&&(r||(r=ngDevMode?new gc:[]),Uo($o(n,t),e,s.type),$t(s)?(ngDevMode&&(Io(n,2,`"${n.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${ae(s.type)} component.`),2&n.flags&&Bs(n)),ol(e,n),r.unshift(s)):r.push(s))}return r}(e,t,n),s=null===o?null:{"":-1};if(null!==i){r=!0,il(n,e.data.length,i.length);for(let e=0;e<i.length;e++){const t=i[e];t.providersResolver&&t.providersResolver(t)}let o=!1,a=!1,c=Vc(e,t,i.length,null);ngDevMode&&xe(c,n.directiveStart,"TNode.directiveStart should point to just allocated space");for(let r=0;r<i.length;r++){const l=i[r];n.mergedAttrs=Oo(n.mergedAttrs,l.hostAttrs),sl(e,n,t,c,l),rl(c,l,s),null!==l.contentQueries&&(n.flags|=8),null===l.hostBindings&&null===l.hostAttrs&&0===l.hostVars||(n.flags|=128);const u=l.type.prototype;!o&&(u.ngOnChanges||u.ngOnInit||u.ngDoCheck)&&((e.preOrderHooks||(e.preOrderHooks=[])).push(n.index),o=!0),a||!u.ngOnChanges&&!u.ngDoCheck||((e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(n.index),a=!0),c++}!function(e,t){ngDevMode&&Jt(e);const n=t.directiveStart,o=t.directiveEnd,r=e.data,i=t.attrs,s=ngDevMode?new vc:[];let a=null,c=null;for(let e=n;e<o;e++){const n=r[e],o=n.inputs,l=null===i||ka(t)?null:fl(o,i);s.push(l),a=Gc(o,e,a),c=Gc(n.outputs,e,c)}null!==a&&(a.hasOwnProperty("class")&&(t.flags|=16),a.hasOwnProperty("style")&&(t.flags|=32)),t.initialInputs=s,t.inputs=a,t.outputs=c}(e,n)}s&&function(e,t,n){if(t){const o=e.localNames=ngDevMode?new mc:[];for(let e=0;e<t.length;e+=2){const r=n[t[e+1]];if(null==r)throw new pe(-301,ngDevMode&&`Export of name '${t[e+1]}' not found!`);o.push(t[e],r)}}}(n,o,s)}return n.mergedAttrs=Oo(n.mergedAttrs,n.attrs),r}function tl(e,t,n,o,r,i){ngDevMode&&Jt(e);const s=i.hostBindings;if(s){let n=e.hostBindingOpCodes;null===n&&(n=e.hostBindingOpCodes=[]);const i=~t.index;(function(e){let t=e.length;for(;t>0;){const n=e[--t];if("number"==typeof n&&n<0)return n}return 0})(n)!=i&&n.push(i),n.push(o,r,s)}}function nl(e,t){null!==e.hostBindings&&e.hostBindings(1,t)}function ol(e,t){ngDevMode&&Jt(e),t.flags|=2,(e.components||(e.components=ngDevMode?new yc:[])).push(t.index)}function rl(e,t,n){if(n){if(t.exportAs)for(let o=0;o<t.exportAs.length;o++)n[t.exportAs[o]]=e;$t(t)&&(n[""]=e)}}function il(e,t,n){ngDevMode&&Me(n,e.directiveEnd-e.directiveStart,"Reached the max number of directives"),e.flags|=1,e.directiveStart=t,e.directiveEnd=t+n,e.providerIndexes=t}function sl(e,t,n,o,r){ngDevMode&&Oe(o,Ot,"Must be in Expando section"),e.data[o]=r;const i=r.factory||(r.factory=en(r.type,!0)),s=new Mo(i,$t(r),null);e.blueprint[o]=s,n[o]=s,tl(e,t,0,o,Vc(e,n,r.hostVars,Ha),r)}function al(e,t,n){const o=_n(t,e),r=qc(n),i=e[10],s=ml(e,Pc(e,r,null,n.onPush?64:16,o,t,i,i.createRenderer(o,n),null,null));e[t.index]=s}function cl(e,t,n,o,r,i){ngDevMode&&(Ie(o,Ha,"Incoming value should never be NO_CHANGE."),function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event attribute '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...`;throw new pe(306,t)}}(n),Io(e,2,`Attempted to set attribute \`${n}\` on a container node. Host bindings are not valid on ng-container or ng-template.`));const s=_n(e,t);ll(t[11],s,i,e.value,n,o,r)}function ll(e,t,n,o,r,i,s){if(null==i)ngDevMode&&ngDevMode.rendererRemoveAttribute++,mn(e)?e.removeAttribute(t,r,n):t.removeAttribute(r);else{ngDevMode&&ngDevMode.rendererSetAttribute++;const a=null==s?ge(i):s(i,o||"",r);mn(e)?e.setAttribute(t,r,a,n):n?t.setAttributeNS(n,r,a):t.setAttribute(r,a)}}function ul(e,t,n,o,r,i){const s=i[t];if(null!==s){const t=o.setInput;for(let i=0;i<s.length;){const a=s[i++],c=s[i++],l=s[i++];null!==t?o.setInput(n,l,a,c):n[c]=l,ngDevMode&&Qc(e,_n(r,e),r.type,c,l)}}}function fl(e,t){let n=null,o=0;for(;o<t.length;){const r=t[o];if(0!==r)if(5!==r){if("number"==typeof r)break;e.hasOwnProperty(r)&&(null===n&&(n=[]),n.push(r,e[r],t[o+1])),o+=2}else o+=2;else o+=4}return n}const dl=class extends Array{};function pl(e,t,n,o){ngDevMode&&Kt(t),ngDevMode&&!mn(t[11])&&Ne(n);const r=new(ngDevMode?dl:Array)(e,!0,!1,t,null,0,o,n,null,null);return ngDevMode&&De(r.length,kt,"Should allocate correct number of slots for LContainer header."),ngDevMode&&function(e){Xa(e,new Ac(e))}(r),r}function hl(e,t){ngDevMode&&De(xn(e),!1,"Should be run in update mode");const n=Mn(t,e);if(In(n)){const e=n[1];80&n[2]?Lc(e,n,e.template,n[8]):n[5]>0&&gl(n)}}function gl(e){for(let t=Zs(e);null!==t;t=Qs(t))for(let e=kt;e<t.length;e++){const n=t[e];if(1024&n[2]){const e=n[1];ngDevMode&&Ae(e,"TView must be allocated"),Lc(e,n,e.template,n[8])}else n[5]>0&&gl(n)}const t=e[1].components;if(null!==t)for(let n=0;n<t.length;n++){const o=Mn(t[n],e);In(o)&&o[5]>0&&gl(o)}}function yl(e,t){ngDevMode&&De(xn(e),!0,"Should be run in creation mode");const n=Mn(t,e),o=n[1];!function(e,t){for(let n=t.length;n<e.blueprint.length;n++)t.push(e.blueprint[n])}(o,n),$c(o,n,n[8])}function ml(e,t){return e[13]?e[14][4]=t:e[13]=t,e[14]=t,t}function vl(e){for(;e;){e[2]|=64;const t=Js(e);if(0!=(512&e[2])&&!t)return e;e=t}return null}function bl(e){for(let t=0;t<e.components.length;t++){const n=e.components[t],o=Ds(n),r=o[1];Fc(r,o,r.template,n)}}function wl(e,t,n){const o=t[10];o.begin&&o.begin();try{Lc(e,t,e.template,n)}catch(e){throw Tl(t,e),e}finally{o.end&&o.end()}}function _l(e){bl(e[8])}function Cl(e,t,n){ngDevMode&&Ae(t,"View queries function to execute must be defined."),to(0),t(e,n)}function Dl(e,t,n,o,...r){if(null===e[o]&&(null==t.inputs||!t.inputs[n])){(t.propertyBindings||(t.propertyBindings=[])).push(o);let i=n;r.length>0&&(i+=Hs+r.join(Hs)),e[o]=i}}const Ml=kc;function xl(e){return e[7]||(e[7]=ngDevMode?new bc:[])}function Il(e){return e.cleanup||(e.cleanup=ngDevMode?new wc:[])}function El(e,t,n){return(null===e||$t(e))&&(n=function(e){for(;Array.isArray(e);){if("object"==typeof e[1])return e;e=e[0]}return null}(n[t.index])),n[11]}function Tl(e,t){const n=e[9],o=n?n.get(Os,null):null;o&&o.handleError(t)}function Sl(e,t,n,o,r){for(let i=0;i<n.length;){const s=n[i++],a=n[i++],c=t[s];ngDevMode&&Pe(t,s);const l=e.data[s];null!==l.setInput?l.setInput(c,r,o,a):c[a]=r}}function Ol(e,t,n){ngDevMode&&Ce(n,"Value should be a string"),ngDevMode&&Ie(n,Ha,"value should not be NO_CHANGE"),ngDevMode&&Pe(e,t);const o=wn(t,e);ngDevMode&&Ae(o,"native element should exist"),ta(e[11],o,n)}function Al(e,t,n){ngDevMode&&Jt(Rn(),"Expecting to be called in first template pass only");let o=n?e.styles:null,r=n?e.classes:null,i=0;if(null!==t)for(let e=0;e<t.length;e++){const n=t[e];"number"==typeof n?i=n:1==i?r=ce(r,n):2==i&&(o=ce(o,n+": "+t[++e]+";"))}n?e.styles=o:e.stylesWithoutHost=o,n?e.classes=r:e.classesWithoutHost=r}function kl(e){const t=ws(e);wl(t[1],t,e)}function Nl(e){ngDevMode&&Ae(e,"component");const t=vl(ws(e));ngDevMode&&Ae(t[8],"rootContext should be defined"),function(e,t){if(0===e.flags&&e.clean==kc){let t;e.flags|=1,e.clean=new Promise((e=>t=e)),e.scheduler((()=>{if(1&e.flags&&(e.flags&=-2,bl(e)),2&e.flags){e.flags&=-3;const t=e.playerHandler;t&&t.flushPlayers()}e.clean=kc,t(null)}))}}(t[8])}const Pl=new fr("INJECTOR",-1);class Rl{get(e,t=$r){if(t===$r){const t=new Error(`NullInjectorError: No provider for ${ae(e)}!`);throw t.name="NullInjectorError",t}return t}}const jl=new fr("Set Injector scope."),Vl={},$l={};let Ll;function Fl(){return void 0===Ll&&(Ll=new Rl),Ll}function Hl(e,t=null,n=null,o){const r=Ul(e,t,n,o);return r._resolveInjectorDefTypes(),r}function Ul(e,t=null,n=null,o){return new Bl(e,n,t||Fl(),o)}class Bl{constructor(e,t,n,o=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const r=[];t&&Mr(t,(n=>this.processProvider(n,e,t))),Mr([e],(e=>this.processInjectorType(e,[],r))),this.records.set(Pl,zl(void 0,this));const i=this.records.get(jl);this.scope=null!=i?i.value:null,this.source=o||("object"==typeof e?null:ae(e))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach((e=>e.ngOnDestroy()))}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(e,t=$r,n=ze.Default){this.assertNotDestroyed();const o=Br(this),r=Je(void 0);try{if(!(n&ze.SkipSelf)){let t=this.records.get(e);if(void 0===t){const n=("function"==typeof(i=e)||"object"==typeof i&&i instanceof fr)&&Le(e);t=n&&this.injectableDefInScope(n)?zl(Wl(e),Vl):null,this.records.set(e,t)}if(null!=t)return this.hydrate(e,t)}const s=n&ze.Self?Fl():this.parent;return t=n&ze.Optional&&t===$r?null:t,s.get(e,t)}catch(t){if("NullInjectorError"===t.name){if((t.ngTempTokenPath=t.ngTempTokenPath||[]).unshift(ae(e)),o)throw t;return function(e,t,n,o){const r=e.ngTempTokenPath;throw t[Fr]&&r.unshift(t[Fr]),e.message=function(e,t,n,o=null){e=e&&"\n"===e.charAt(0)&&"ɵ"==e.charAt(1)?e.substr(2):e;let r=ae(t);if(Array.isArray(t))r=t.map(ae).join(" -> ");else if("object"==typeof t){let e=[];for(let n in t)if(t.hasOwnProperty(n)){let o=t[n];e.push(n+":"+("string"==typeof o?JSON.stringify(o):ae(o)))}r=`{${e.join(", ")}}`}return`${n}${o?"("+o+")":""}[${r}]: ${e.replace(Lr,"\n  ")}`}("\n"+e.message,r,n,o),e.ngTokenPath=r,e.ngTempTokenPath=null,e}(t,e,"R3InjectorError",this.source)}throw t}finally{Je(r),Br(o)}var i}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach((e=>this.get(e)))}toString(){const e=[];return this.records.forEach(((t,n)=>e.push(ae(n)))),`R3Injector[${e.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new pe(205,ngDevMode&&"Injector has already been destroyed.")}processInjectorType(e,t,n){if(!(e=fe(e)))return!1;let o=He(e);const r=null==o&&e.ngModule||void 0,i=void 0===r?e:r;ngDevMode&&-1!==t.indexOf(i)&&me(ae(i),t.map(ae));const s=-1!==n.indexOf(i);if(void 0!==r&&(o=He(r)),null==o)return!1;if(null!=o.imports&&!s){let e;ngDevMode&&t.push(i),n.push(i);try{Mr(o.imports,(o=>{this.processInjectorType(o,t,n)&&(void 0===e&&(e=[]),e.push(o))}))}finally{ngDevMode&&t.pop()}if(void 0!==e)for(let t=0;t<e.length;t++){const{ngModule:n,providers:o}=e[t];Mr(o,(e=>this.processProvider(e,n,o||ct)))}}this.injectorDefTypes.add(i);const a=en(i)||(()=>new i);this.records.set(i,zl(a,Vl));const c=o.providers;if(null!=c&&!s){const t=e;Mr(c,(e=>this.processProvider(e,t,c)))}return void 0!==r&&void 0!==e.providers}processProvider(e,t,n){let o=Jl(e=fe(e))?e:fe(e&&e.provide);const r=function(e,t,n){return Kl(e)?zl(void 0,e.useValue):zl(ql(e,t,n),Vl)}(e,t,n);if(Jl(e)||!0!==e.multi){const e=this.records.get(o);ngDevMode&&e&&void 0!==e.multi&&ve()}else{let t=this.records.get(o);t?ngDevMode&&void 0===t.multi&&ve():(t=zl(void 0,Vl,!0),t.factory=()=>Jr(t.multi),this.records.set(o,t)),o=e,t.multi.push(e)}this.records.set(o,r)}hydrate(e,t){var n;return ngDevMode&&t.value===$l?me(ae(e)):t.value===Vl&&(t.value=$l,t.value=t.factory()),"object"==typeof t.value&&t.value&&null!==(n=t.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(t.value),t.value}injectableDefInScope(e){if(!e.providedIn)return!1;const t=fe(e.providedIn);return"string"==typeof t?"any"===t||t===this.scope:this.injectorDefTypes.has(t)}}function Wl(e){const t=Le(e),n=null!==t?t.factory:en(e);if(null!==n)return n;if(e instanceof fr)throw new pe(204,ngDevMode&&`Token ${ae(e)} is missing a ɵprov definition.`);if(e instanceof Function)return function(e){const t=e.length;if(t>0){const n=Er(t,"?");throw new pe(204,ngDevMode&&`Can't resolve all parameters for ${ae(e)}: (${n.join(", ")}).`)}const n=function(e){const t=e&&(e[Ue]||e[We]);if(t){const n=function(e){if(e.hasOwnProperty("name"))return e.name;const t=(""+e).match(/^function\s*([^\s(]+)/);return null===t?"":t[1]}(e);return console.warn(`DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${n}" class.`),t}return null}(e);return null!==n?()=>n.factory(e):()=>new e}(e);throw new pe(204,ngDevMode&&"unreachable")}function ql(e,t,n){let o;if(Jl(e)){const t=fe(e);return en(t)||Wl(t)}if(Kl(e))o=()=>fe(e.useValue);else if((r=e)&&r.useFactory)o=()=>e.useFactory(...Jr(e.deps||[]));else if(function(e){return!(!e||!e.useExisting)}(e))o=()=>qr(fe(e.useExisting));else{const r=fe(e&&(e.useClass||e.provide));if(ngDevMode&&!r&&function(e,t,n){let o="";throw e&&t&&(o=` - only instances of Provider and Type are allowed, got: [${t.map((e=>e==n?"?"+n+"?":"...")).join(", ")}]`),new Error(`Invalid provider for the NgModule '${ae(e)}'`+o)}(t,n,e),!function(e){return!!e.deps}(e))return en(r)||Wl(r);o=()=>new r(...Jr(e.deps))}var r;return o}function zl(e,t,n=!1){return{factory:e,value:t,multi:n?[]:void 0}}function Kl(e){return null!==e&&"object"==typeof e&&Hr in e}function Jl(e){return"function"==typeof e}class Gl{static create(e,t){if(Array.isArray(e))return Hl({name:""},t,e,"");{const t=e.name??"";return Hl({name:t},e.parent,e.providers,t)}}}function Zl(e){su(e);const t=vs(e);return null===t?null:(void 0===t.component&&(t.component=function(e,t){const n=t[1].data[e];let o=n.directiveStart;return 2&n.flags?t[o]:null}(t.nodeIndex,t.lView)),t.component)}function Ql(e){su(e);const t=vs(e);return null===t?null:t.lView[8]}function Yl(e){const t=vs(e);if(null===t)return null;let n,o=t.lView;for(ngDevMode&&Kt(o);2===o[1].type&&(n=Js(o));)o=n;return 512&o[2]?null:o[8]}function Xl(e){return[...Gs(e).components]}function eu(e){const t=vs(e);if(null===t)return Gl.NULL;const n=t.lView[1].data[t.nodeIndex];return new Xo(n,t.lView)}function tu(e){if(e instanceof Text)return[];const t=vs(e);if(null===t)return[];const n=t.lView,o=n[1],r=t.nodeIndex;return o?.data[r]?(void 0===t.directives&&(t.directives=Es(r,n,!1)),null===t.directives?[]:[...t.directives]):[]}function nu(e){const{constructor:t}=e;if(!t)throw new Error("Unable to find the instance constructor");const n=It(t);if(n)return{inputs:n.inputs,outputs:n.outputs,encapsulation:n.encapsulation,changeDetection:n.onPush?Qe.OnPush:Qe.Default};const o=Et(t);return o?{inputs:o.inputs,outputs:o.outputs}:null}function ou(e){return vs(e).native}function ru(e){su(e);const t=vs(e);if(null===t)return[];const n=t.lView,o=n[1],r=n[7],i=o.cleanup,s=[];if(i&&r)for(let t=0;t<i.length;){const o=i[t++],a=i[t++];if("string"==typeof o){const c=o,l=bn(n[a]),u=r[i[t++]],f=i[t++],d="boolean"==typeof f||f>=0?"dom":"output",p="boolean"==typeof f&&f;e==l&&s.push({element:e,name:c,callback:u,useCapture:p,type:d})}}return s.sort(iu),s}function iu(e,t){return e.name==t.name?0:e.name<t.name?-1:1}function su(e){if("undefined"!=typeof Element&&!(e instanceof Element))throw new Error("Expecting instance of DOM Element")}function au(e){Nl(e),Xl(e).forEach((e=>kl(e)))}Gl.THROW_IF_NOT_FOUND=$r,Gl.NULL=new Rl,Gl.ɵprov=je({token:Gl,providedIn:"any",factory:()=>qr(Pl)}),Gl.__NG_ELEMENT_ID__=-1;let cu=!1;function lu(){cu||(cu=!0,uu("ɵsetProfiler",ln),uu("getDirectiveMetadata",nu),uu("getComponent",Zl),uu("getContext",Ql),uu("getListeners",ru),uu("getOwningComponent",Yl),uu("getHostElement",ou),uu("getInjector",eu),uu("getRootComponents",Xl),uu("getDirectives",tu),uu("applyChanges",au))}function uu(e,t){if("undefined"==typeof COMPILED||!COMPILED){const n=it;if(ngDevMode&&Ae(t,"function not defined"),n){let o=n.ng;o||(o=n.ng={}),o[e]=t}}}function fu(e,t={}){ngDevMode&&lu(),ngDevMode&&Bt(e);const n=t.rendererFactory||vn,o=t.sanitizer||null,r=It(e);r.type!=e&&(r.type=e);const i=r.selectors[0][0],s=Kc(n.createRenderer(null,null),t.host||i,r.encapsulation),a=r.onPush?576:528,c=hu(t.scheduler,t.playerHandler),l=n.createRenderer(s,r),u=zc(0,null,null,1,0,null,null,null,null,null),f=Pc(null,u,c,a,null,null,n,l,null,t.injector||null);let d;ro(f);try{n.begin&&n.begin(),d=pu(du(s,r,f,n,l,o),r,f,c,t.hostFeatures||null),$c(u,f,null),Lc(u,f,null,null)}finally{lo(),n.end&&n.end()}return d}function du(e,t,n,o,r,i){const s=n[1];ngDevMode&&Pe(n,20),n[20]=e;const a=Rc(s,20,2,"#host",null),c=a.mergedAttrs=t.hostAttrs;null!==c&&(Al(a,c,!0),null!==e&&(Eo(r,e,c),null!==a.classes&&Ta(r,e,a.classes),null!==a.styles&&Ea(r,e,a.styles)));const l=o.createRenderer(e,t),u=Pc(n,qc(t),null,t.onPush?64:16,n[20],a,o,l,i||null,null);return s.firstCreatePass&&(Uo($o(a,n),s,t.type),ol(s,a),il(a,n.length,1)),ml(n,u),n[20]=u}function pu(e,t,n,o,r){const i=n[1],s=function(e,t,n){const o=Vn();if(e.firstCreatePass){n.providersResolver&&n.providersResolver(n);const r=Vc(e,t,1,null);ngDevMode&&De(r,o.directiveStart,"Because this is a root component the allocated expando should match the TNode component."),sl(e,o,t,r,n)}const r=Zo(t,e,o.directiveStart,o);_s(r,t);const i=_n(o,t);return i&&_s(i,t),r}(i,n,t);if(o.components.push(s),e[8]=s,r&&r.forEach((e=>e(s,t))),t.contentQueries){const e=Vn();ngDevMode&&Ae(e,"TNode expected"),t.contentQueries(1,s,e.directiveStart)}const a=Vn();return ngDevMode&&Ae(a,"tNode should have been already created"),!i.firstCreatePass||null===t.hostBindings&&null===t.hostAttrs||(fo(a.index),tl(n[1],a,0,a.directiveStart,a.directiveEnd,t),nl(t,s)),s}function hu(e,t){return{components:[],scheduler:e||Vs,clean:Ml,playerHandler:t||null,flags:0}}function gu(e,t){const n=Ds(e);ngDevMode&&Ae(n,"LView is required");const o=n[1],r=Vn();ngDevMode&&Ae(r,"TNode is required"),mo(o,r)}function yu(e){return Gs(e).clean}function mu(e){return Object.getPrototypeOf(e.prototype).constructor}function vu(e){let t=mu(e.type),n=!0;const o=[e];for(;t;){let r;if($t(e))r=t.ɵcmp||t.ɵdir;else{if(t.ɵcmp){const e="undefined"==typeof ngDevMode||ngDevMode?"Directives cannot inherit Components":"";throw new pe(903,e)}r=t.ɵdir}if(r){if(n){o.push(r);const t=e;t.inputs=bu(e.inputs),t.declaredInputs=bu(e.declaredInputs),t.outputs=bu(e.outputs);const n=r.hostBindings;n&&Cu(e,n);const i=r.viewQuery,s=r.contentQueries;if(i&&wu(e,i),s&&_u(e,s),se(e.inputs,r.inputs),se(e.declaredInputs,r.declaredInputs),se(e.outputs,r.outputs),$t(r)&&r.data.animation){const t=e.data;t.animation=(t.animation||[]).concat(r.data.animation)}}const t=r.features;if(t)for(let o=0;o<t.length;o++){const r=t[o];r&&r.ngInherit&&r(e),r===vu&&(n=!1)}}t=Object.getPrototypeOf(t)}!function(e){let t=0,n=null;for(let o=e.length-1;o>=0;o--){const r=e[o];r.hostVars=t+=r.hostVars,r.hostAttrs=Oo(r.hostAttrs,n=Oo(n,r.hostAttrs))}}(o)}function bu(e){return e===at?{}:e===ct?[]:e}function wu(e,t){const n=e.viewQuery;e.viewQuery=n?(e,o)=>{t(e,o),n(e,o)}:t}function _u(e,t){const n=e.contentQueries;e.contentQueries=n?(e,o,r)=>{t(e,o,r),n(e,o,r)}:t}function Cu(e,t){const n=e.hostBindings;e.hostBindings=n?(e,o)=>{t(e,o),n(e,o)}:t}const Du=["providersResolver"],Mu=["template","decls","consts","vars","onPush","ngContentSelectors","styles","encapsulation","schemas"];function xu(e){let t,n=mu(e.type);t=$t(e)?n.ɵcmp:n.ɵdir;const o=e;for(const e of Du)o[e]=t[e];if($t(t))for(const e of Mu)o[e]=t[e]}let Iu=null;function Eu(){if(!Iu){const e=it.Symbol;if(e&&e.iterator)Iu=e.iterator;else{const e=Object.getOwnPropertyNames(Map.prototype);for(let t=0;t<e.length;++t){const n=e[t];"entries"!==n&&"size"!==n&&Map.prototype[n]===Map.prototype.entries&&(Iu=n)}}}return Iu}function Tu(e,t){const n=Su(e),o=Su(t);if(n&&o)return function(e,t,n){const o=e[Eu()](),r=t[Eu()]();for(;;){const e=o.next(),t=r.next();if(e.done&&t.done)return!0;if(e.done||t.done)return!1;if(!n(e.value,t.value))return!1}}(e,t,Tu);{const r=e&&("object"==typeof e||"function"==typeof e),i=t&&("object"==typeof t||"function"==typeof t);return!(n||!r||o||!i)||Object.is(e,t)}}function Su(e){return!!Ou(e)&&(Array.isArray(e)||!(e instanceof Map)&&Eu()in e)}function Ou(e){return null!==e&&("function"==typeof e||"object"==typeof e)}function Au(e,t,n){return e[t]=n}function ku(e,t){return ngDevMode&&Pe(e,t),ngDevMode&&Ie(e[t],Ha,"Stored value should never be NO_CHANGE."),e[t]}function Nu(e,t,n){ngDevMode&&Ie(n,Ha,"Incoming value should never be NO_CHANGE."),ngDevMode&&Ee(t,e.length,"Slot should have been initialized to NO_CHANGE");const o=e[t];if(Object.is(o,n))return!1;if(ngDevMode&&Bn()){const r=o!==Ha?o:void 0;if(!Tu(r,n)){const i=function(e,t,n,o){const r=e[1].data,i=r[t];if("string"==typeof i)return i.indexOf(Hs)>-1?Ws(e,t,t,i,o):{propName:i,oldValue:n,newValue:o};if(null===i){let n=t-1;for(;"string"!=typeof r[n]&&null===r[n+1];)n--;const i=r[n];if("string"==typeof i){const r=i.match(new RegExp(Hs,"g"));if(r&&r.length-1>t-n)return Ws(e,n,t,i,o)}}return{propName:void 0,oldValue:n,newValue:o}}(e,t,r,n);!function(e,t,n,o){let r=`ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${o?` for '${o}'`:""}: '${t}'. Current value: '${n}'.`;throw e&&(r+=" It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?"),new pe(-100,r)}(o===Ha,i.oldValue,i.newValue,i.propName)}return!1}return e[t]=n,!0}function Pu(e,t,n,o){const r=Nu(e,t,n);return Nu(e,t+1,o)||r}function Ru(e,t,n,o,r){const i=Pu(e,t,n,o);return Nu(e,t+2,r)||i}function ju(e,t,n,o,r,i){const s=Pu(e,t,n,o);return Pu(e,t+2,r,i)||s}function Vu(e,t,n,o){const r=Pn(),i=Jn();if(Nu(r,i,t)){const s=Rn(),a=po();cl(a,r,e,t,n,o),ngDevMode&&Dl(s.data,a,"attr."+e,i)}return Vu}function $u(e,t){ngDevMode&&Ee(2,t.length,"should have at least 3 values"),ngDevMode&&De(t.length%2,1,"should have an odd number of values");let n=!1,o=zn();for(let r=1;r<t.length;r+=2)n=Nu(e,o++,t[r])||n;if(Kn(o),!n)return Ha;let r=t[0];for(let e=1;e<t.length;e+=2)r+=ge(t[e])+t[e+1];return r}function Lu(e,t,n,o){return Nu(e,Jn(),n)?t+ge(n)+o:Ha}function Fu(e,t,n,o,r,i){const s=Pu(e,zn(),n,r);return Gn(2),s?t+ge(n)+o+ge(r)+i:Ha}function Hu(e,t,n,o,r,i,s,a){const c=Ru(e,zn(),n,r,s);return Gn(3),c?t+ge(n)+o+ge(r)+i+ge(s)+a:Ha}function Uu(e,t,n,o,r,i,s,a,c,l){const u=ju(e,zn(),n,r,s,c);return Gn(4),u?t+ge(n)+o+ge(r)+i+ge(s)+a+ge(c)+l:Ha}function Bu(e,t,n,o,r,i,s,a,c,l,u,f){const d=zn();let p=ju(e,d,n,r,s,c);return p=Nu(e,d+4,u)||p,Gn(5),p?t+ge(n)+o+ge(r)+i+ge(s)+a+ge(c)+l+ge(u)+f:Ha}function Wu(e,t,n,o,r,i,s,a,c,l,u,f,d,p){const h=zn();let g=ju(e,h,n,r,s,c);return g=Pu(e,h+4,u,d)||g,Gn(6),g?t+ge(n)+o+ge(r)+i+ge(s)+a+ge(c)+l+ge(u)+f+ge(d)+p:Ha}function qu(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g){const y=zn();let m=ju(e,y,n,r,s,c);return m=Ru(e,y+4,u,d,h)||m,Gn(7),m?t+ge(n)+o+ge(r)+i+ge(s)+a+ge(c)+l+ge(u)+f+ge(d)+p+ge(h)+g:Ha}function zu(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m){const v=zn();let b=ju(e,v,n,r,s,c);return b=ju(e,v+4,u,d,h,y)||b,Gn(8),b?t+ge(n)+o+ge(r)+i+ge(s)+a+ge(c)+l+ge(u)+f+ge(d)+p+ge(h)+g+ge(y)+m:Ha}function Ku(e,t,n,o,r,i){const s=Pn(),a=Lu(s,t,n,o);if(a!==Ha){const n=po();cl(n,s,e,a,r,i),ngDevMode&&Dl(Rn().data,n,"attr."+e,zn()-1,t,o)}return Ku}function Ju(e,t,n,o,r,i,s,a){const c=Pn(),l=Fu(c,t,n,o,r,i);if(l!==Ha){const n=po();cl(n,c,e,l,s,a),ngDevMode&&Dl(Rn().data,n,"attr."+e,zn()-2,t,o,i)}return Ju}function Gu(e,t,n,o,r,i,s,a,c,l){const u=Pn(),f=Hu(u,t,n,o,r,i,s,a);if(f!==Ha){const n=po();cl(n,u,e,f,c,l),ngDevMode&&Dl(Rn().data,n,"attr."+e,zn()-3,t,o,i,a)}return Gu}function Zu(e,t,n,o,r,i,s,a,c,l,u,f){const d=Pn(),p=Uu(d,t,n,o,r,i,s,a,c,l);if(p!==Ha){const n=po();cl(n,d,e,p,u,f),ngDevMode&&Dl(Rn().data,n,"attr."+e,zn()-4,t,o,i,a,l)}return Zu}function Qu(e,t,n,o,r,i,s,a,c,l,u,f,d,p){const h=Pn(),g=Bu(h,t,n,o,r,i,s,a,c,l,u,f);if(g!==Ha){const n=po();cl(n,h,e,g,d,p),ngDevMode&&Dl(Rn().data,n,"attr."+e,zn()-5,t,o,i,a,l,f)}return Qu}function Yu(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g){const y=Pn(),m=Wu(y,t,n,o,r,i,s,a,c,l,u,f,d,p);if(m!==Ha){const n=po();cl(n,y,e,m,h,g),ngDevMode&&Dl(Rn().data,n,"attr."+e,zn()-6,t,o,i,a,l,f,p)}return Yu}function Xu(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m){const v=Pn(),b=qu(v,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g);if(b!==Ha){const n=po();cl(n,v,e,b,y,m),ngDevMode&&Dl(Rn().data,n,"attr."+e,zn()-7,t,o,i,a,l,f,p,g)}return Xu}function ef(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v,b){const w=Pn(),_=zu(w,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m);if(_!==Ha){const n=po();cl(n,w,e,_,v,b),ngDevMode&&Dl(Rn().data,n,"attr."+e,zn()-8,t,o,i,a,l,f,p,g,m)}return ef}function tf(e,t,n,o){const r=Pn(),i=$u(r,t);if(i!==Ha){const s=po();if(cl(s,r,e,i,n,o),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Dl(Rn().data,s,"attr."+e,zn()-n.length+1,...n)}}return tf}function nf(e,t,n,o,r,i,s,a){const c=Pn(),l=Rn(),u=e+Ot,f=l.firstCreatePass?function(e,t,n,o,r,i,s,a,c){ngDevMode&&Jt(t),ngDevMode&&ngDevMode.firstCreatePass++;const l=t.consts,u=Rc(t,e,4,s||null,En(l,a));el(t,n,u,En(l,c)),mo(t,u);const f=u.tViews=zc(2,u,o,r,i,t.directiveRegistry,t.pipeRegistry,null,t.schemas,l);return null!==t.queries&&(t.queries.template(t,u),f.queries=t.queries.embeddedTView(u)),u}(u,l,c,t,n,o,r,i,s):l.data[u];Fn(f,!1);const d=c[11].createComment(ngDevMode?"container":"");ba(l,c,d,f),_s(d,c),ml(c,c[u]=pl(d,c,d,f)),Vt(f)&&Bc(l,c,f),null!=s&&Wc(c,f,a)}function of(e,t,n,o){n>=e.data.length&&(e.data[n]=null,e.blueprint[n]=null),t[n]=o}function rf(e){return Dn(On.lFrame.contextLView,Ot+e)}const sf={ɵɵdefineInjectable:je,ɵɵdefineInjector:$e,ɵɵinject:qr,ɵɵinvalidFactoryDep:zr,resolveForwardRef:fe};const af=ie({provide:String,useValue:ie});function cf(e){return void 0!==e.useClass}function lf(e){return void 0!==e.useFactory}const uf=sr("Injectable",void 0,void 0,void 0,((e,t)=>function(e,t){let n=null,o=null;e.hasOwnProperty(Ue)||Object.defineProperty(e,Ue,{get:()=>{if(null===n){const o=wr({usage:0,kind:"injectable",type:e});n=o.compileInjectable(sf,`ng:///${e.name}/ɵprov.js`,function(e,t){const n=t||{providedIn:null},o={name:e.name,type:e,typeArgumentCount:0,providedIn:n.providedIn};return(cf(n)||lf(n))&&void 0!==n.deps&&(o.deps=ri(n.deps)),cf(n)?o.useClass=n.useClass:function(e){return af in e}(n)?o.useValue=n.useValue:lf(n)?o.useFactory=n.useFactory:function(e){return void 0!==e.useExisting}(n)&&(o.useExisting=n.useExisting),o}(e,t))}return n}}),e.hasOwnProperty(pt)||Object.defineProperty(e,pt,{get:()=>{if(null===o){const t=wr({usage:0,kind:"injectable",type:e});o=t.compileFactory(sf,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,typeArgumentCount:0,deps:oi(e),target:t.FactoryTarget.Injectable})}return o},configurable:!0})}(e,t)));function ff(e){return e.length>1?" ("+function(e){const t=[];for(let n=0;n<e.length;++n){if(t.indexOf(e[n])>-1)return t.push(e[n]),t;t.push(e[n])}return t}(e.slice().reverse()).map((e=>ae(e.token))).join(" -> ")+")":""}function df(e,t,n,o){const r=[t],i=n(r),s=o?function(e,t){const n=`${e} caused by: ${t instanceof Error?t.message:t}`,o=Error(n);return o.ngOriginalError=t,o}(i,o):Error(i);return s.addKey=pf,s.keys=r,s.injectors=[e],s.constructResolvingMessage=n,s.ngOriginalError=o,s}function pf(e,t){this.injectors.push(e),this.keys.push(t),this.message=this.constructResolvingMessage(this.keys)}function hf(e,t){const n=[];for(let e=0,o=t.length;e<o;e++){const o=t[e];o&&0!=o.length?n.push(o.map(ae).join(" ")):n.push("?")}return Error("Cannot resolve all parameters for '"+ae(e)+"'("+n.join(", ")+"). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '"+ae(e)+"' is decorated with Injectable.")}class gf{constructor(e,t){if(this.token=e,this.id=t,!e)throw new Error("Token must be defined!");this.displayName=ae(this.token)}static get(e){return yf.get(fe(e))}static get numberOfKeys(){return yf.numberOfKeys}}const yf=new class{constructor(){this._allKeys=new Map}get(e){if(e instanceof gf)return e;if(this._allKeys.has(e))return this._allKeys.get(e);const t=new gf(e,gf.numberOfKeys);return this._allKeys.set(e,t),t}get numberOfKeys(){return this._allKeys.size}},mf=new class{constructor(e){this.reflectionCapabilities=e}updateCapabilities(e){this.reflectionCapabilities=e}factory(e){return this.reflectionCapabilities.factory(e)}parameters(e){return this.reflectionCapabilities.parameters(e)}annotations(e){return this.reflectionCapabilities.annotations(e)}propMetadata(e){return this.reflectionCapabilities.propMetadata(e)}hasLifecycleHook(e,t){return this.reflectionCapabilities.hasLifecycleHook(e,t)}getter(e){return this.reflectionCapabilities.getter(e)}setter(e){return this.reflectionCapabilities.setter(e)}method(e){return this.reflectionCapabilities.method(e)}importUri(e){return this.reflectionCapabilities.importUri(e)}resourceUri(e){return this.reflectionCapabilities.resourceUri(e)}resolveIdentifier(e,t,n,o){return this.reflectionCapabilities.resolveIdentifier(e,t,n,o)}resolveEnum(e,t){return this.reflectionCapabilities.resolveEnum(e,t)}}(new Rr);class vf{constructor(e,t,n){this.key=e,this.optional=t,this.visibility=n}static fromKey(e){return new vf(e,!1,null)}}const bf=[];class wf{constructor(e,t,n){this.key=e,this.resolvedFactories=t,this.multiProvider=n,this.resolvedFactory=this.resolvedFactories[0]}}class _f{constructor(e,t){this.factory=e,this.dependencies=t}}function Cf(e){let t,n;if(e.useClass){const o=fe(e.useClass);t=mf.factory(o),n=If(o)}else e.useExisting?(t=e=>e,n=[vf.fromKey(gf.get(e.useExisting))]):e.useFactory?(t=e.useFactory,n=function(e,t){if(t){const n=t.map((e=>[e]));return t.map((t=>Ef(e,t,n)))}return If(e)}(e.useFactory,e.deps)):(t=()=>e.useValue,n=bf);return new _f(t,n)}function Df(e){return new wf(gf.get(e.provide),[Cf(e)],e.multi||!1)}function Mf(e){const t=function(e,t){for(let n=0;n<e.length;n++){const o=e[n],r=t.get(o.key.id);if(r){if(o.multiProvider!==r.multiProvider)throw Error(`Cannot mix multi providers and regular providers, got: ${r} ${o}`);if(o.multiProvider)for(let e=0;e<o.resolvedFactories.length;e++)r.resolvedFactories.push(o.resolvedFactories[e]);else t.set(o.key.id,o)}else{let e;e=o.multiProvider?new wf(o.key,o.resolvedFactories.slice(),o.multiProvider):o,t.set(o.key.id,e)}}return t}(xf(e,[]).map(Df),new Map);return Array.from(t.values())}function xf(e,t){return e.forEach((e=>{if(e instanceof _r)t.push({provide:e,useClass:e});else if(e&&"object"==typeof e&&void 0!==e.provide)t.push(e);else{if(!Array.isArray(e))throw Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${e}`);xf(e,t)}})),t}function If(e){const t=mf.parameters(e);if(!t)return[];if(t.some((e=>null==e)))throw hf(e,t);return t.map((n=>Ef(e,n,t)))}function Ef(e,t,n){let o=null,r=!1;if(!Array.isArray(t))return Tf(t instanceof Zr?t.token:t,r,null);let i=null;for(let e=0;e<t.length;++e){const n=t[e];n instanceof _r?o=n:n instanceof Zr?o=n.token:n instanceof Qr?r=!0:n instanceof Yr||n instanceof Xr?i=n:n instanceof fr&&(o=n)}if(o=fe(o),null!=o)return Tf(o,r,i);throw hf(e,n)}function Tf(e,t,n){return new vf(gf.get(e),t,n)}const Sf={};class Of{static resolve(e){return Mf(e)}static resolveAndCreate(e,t){const n=Of.resolve(e);return Of.fromResolvedProviders(n,t)}static fromResolvedProviders(e,t){return new Af(e,t)}}class Af{constructor(e,t){this._constructionCounter=0,this._providers=e,this.parent=t||null;const n=e.length;this.keyIds=[],this.objs=[];for(let t=0;t<n;t++)this.keyIds[t]=e[t].key.id,this.objs[t]=Sf}get(e,t=$r){return this._getByKey(gf.get(e),null,t)}resolveAndCreateChild(e){const t=Of.resolve(e);return this.createChildFromResolved(t)}createChildFromResolved(e){const t=new Af(e);return t.parent=this,t}resolveAndInstantiate(e){return this.instantiateResolved(Of.resolve([e])[0])}instantiateResolved(e){return this._instantiateProvider(e)}getProviderAtIndex(e){if(e<0||e>=this._providers.length)throw function(e){return Error(`Index ${e} is out-of-bounds.`)}(e);return this._providers[e]}_new(e){if(this._constructionCounter++>this._getMaxNumberOfObjects())throw this,df(this,e.key,(function(e){return`Cannot instantiate cyclic dependency!${ff(e)}`}));return this._instantiateProvider(e)}_getMaxNumberOfObjects(){return this.objs.length}_instantiateProvider(e){if(e.multiProvider){const t=[];for(let n=0;n<e.resolvedFactories.length;++n)t[n]=this._instantiate(e,e.resolvedFactories[n]);return t}return this._instantiate(e,e.resolvedFactories[0])}_instantiate(e,t){const n=t.factory;let o,r;try{o=t.dependencies.map((e=>this._getByReflectiveDependency(e)))}catch(t){throw t.addKey&&t.addKey(this,e.key),t}try{r=n(...o)}catch(t){throw this,i=t,t.stack,df(this,e.key,(function(e){const t=ae(e[0].token);return`${i.message}: Error during instantiation of ${t}!${ff(e)}.`}),i)}var i;return r}_getByReflectiveDependency(e){return this._getByKey(e.key,e.visibility,e.optional?null:$r)}_getByKey(e,t,n){return e===Af.INJECTOR_KEY?this:t instanceof Yr?this._getByKeySelf(e,n):this._getByKeyDefault(e,n,t)}_getObjByKeyId(e){for(let t=0;t<this.keyIds.length;t++)if(this.keyIds[t]===e)return this.objs[t]===Sf&&(this.objs[t]=this._new(this._providers[t])),this.objs[t];return Sf}_throwOrNull(e,t){if(t!==$r)return t;throw function(e,t){return df(e,t,(function(e){return`No provider for ${ae(e[0].token)}!${ff(e)}`}))}(this,e)}_getByKeySelf(e,t){const n=this._getObjByKeyId(e.id);return n!==Sf?n:this._throwOrNull(e,t)}_getByKeyDefault(e,t,n){let o;for(o=n instanceof Xr?this.parent:this;o instanceof Af;){const t=o,n=t._getObjByKeyId(e.id);if(n!==Sf)return n;o=t.parent}return null!==o?o.get(e.token,t):this._throwOrNull(e,t)}get displayName(){return`ReflectiveInjector(providers: [${function(e,t){const n=[];for(let t=0;t<e._providers.length;++t)n[t]=' "'+e.getProviderAtIndex(t).key.displayName+'" ';return n}(this).join(", ")}])`}toString(){return this.displayName}}function kf(e,t=ze.Default){const n=Pn();return null===n?(ngDevMode&&(ngDevMode&&Me(Ke,kf,"Calling ɵɵinject would cause infinite recursion")),qr(e,t)):qo(Vn(),n,fe(e),t)}function Nf(){const e=ngDevMode?"This constructor was not compatible with Dependency Injection.":"invalid";throw new Error(e)}function Pf(e,t,n){const o=Pn(),r=Jn();if(Nu(o,r,t)){const i=Rn(),s=po();Zc(i,s,o,e,t,o[11],n,!1),ngDevMode&&Dl(i.data,s,e,r)}return Pf}function Rf(e,t,n,o,r){const i=r?"class":"style";Sl(e,n,t.inputs[i],i,o)}function jf(e,t,n,o){const r=Pn(),i=Rn(),s=Ot+e;ngDevMode&&De(zn(),i.bindingStartIndex,"elements should be created before any bindings"),ngDevMode&&Pe(r,s);const a=r[11],c=r[s]=oa(a,t,On.lFrame.currentNamespace),l=i.firstCreatePass?function(e,t,n,o,r,i,s){ngDevMode&&Jt(t),ngDevMode&&ngDevMode.firstCreatePass++;const a=t.consts,c=Rc(t,e,2,r,En(a,i)),l=el(t,n,c,En(a,s));return ngDevMode&&function(e,t,n,o){if(null===e.schemas)return;const r=n.value;if(!o&&null!==r&&("undefined"!=typeof HTMLUnknownElement&&HTMLUnknownElement&&t instanceof HTMLUnknownElement||"undefined"!=typeof customElements&&r.indexOf("-")>-1&&!customElements.get(r))&&!Yc(e,r)){let e=`'${r}' is not a known element:\n`;e+=`1. If '${r}' is an Angular component, then verify that it is part of this module.\n`,r&&r.indexOf("-")>-1?e+=`2. If '${r}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`:e+="2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.",console.error(he(304,e))}}(t,o,c,l),null!==c.attrs&&Al(c,c.attrs,!1),null!==c.mergedAttrs&&Al(c,c.mergedAttrs,!0),null!==t.queries&&t.queries.elementStart(t,c),c}(s,i,r,c,t,n,o):i.data[s];Fn(l,!0);const u=l.mergedAttrs;null!==u&&Eo(a,c,u);const f=l.classes;null!==f&&Ta(a,c,f);const d=l.styles;return null!==d&&Ea(a,c,d),64!=(64&l.flags)&&ba(i,r,c,l),0===On.lFrame.elementDepthCount&&_s(c,r),On.lFrame.elementDepthCount++,Vt(l)&&(Bc(i,r,l),Uc(i,l,r)),null!==o&&Wc(r,l),jf}function Vf(){let e=Vn();ngDevMode&&Ae(e,"No parent node to close."),Hn()?Un():(ngDevMode&&Wt(Vn()),e=e.parent,Fn(e,!1));const t=e;ngDevMode&&Io(t,3),On.lFrame.elementDepthCount--;const n=Rn();return n.firstCreatePass&&(mo(n,e),Rt(e)&&n.queries.elementEnd(e)),null!=t.classesWithoutHost&&function(e){return 0!=(16&e.flags)}(t)&&Rf(n,t,Pn(),t.classesWithoutHost,!0),null!=t.stylesWithoutHost&&function(e){return 0!=(32&e.flags)}(t)&&Rf(n,t,Pn(),t.stylesWithoutHost,!1),Vf}function $f(e,t,n,o){return jf(e,t,n,o),Vf(),$f}function Lf(e,t,n){const o=Pn(),r=Rn(),i=e+Ot;ngDevMode&&Pe(o,i),ngDevMode&&De(zn(),r.bindingStartIndex,"element containers should be created before any bindings");const s=r.firstCreatePass?function(e,t,n,o,r){ngDevMode&&ngDevMode.firstCreatePass++;const i=t.consts,s=En(i,o),a=Rc(t,e,8,"ng-container",s);return null!==s&&Al(a,s,!0),el(t,n,a,En(i,r)),null!==t.queries&&t.queries.elementStart(t,a),a}(i,r,o,t,n):r.data[i];Fn(s,!0),ngDevMode&&ngDevMode.rendererCreateComment++;const a=o[i]=o[11].createComment(ngDevMode?"ng-container":"");return ba(r,o,a,s),_s(a,o),Vt(s)&&(Bc(r,o,s),Uc(r,s,o)),null!=n&&Wc(o,s),Lf}function Ff(){let e=Vn();const t=Rn();return Hn()?Un():(ngDevMode&&Wt(e),e=e.parent,Fn(e,!1)),ngDevMode&&Io(e,8),t.firstCreatePass&&(mo(t,e),Rt(e)&&t.queries.elementEnd(e)),Ff}function Hf(e,t,n){return Lf(e,t,n),Ff(),Hf}function Uf(){return Pn()}function Bf(e){return!!e&&"function"==typeof e.then}function Wf(e){return!!e&&"function"==typeof e.subscribe}Af.INJECTOR_KEY=gf.get(Gl);const qf=Wf;function zf(e,t,n,o){const r=Pn(),i=Rn(),s=Vn();return Jf(i,r,r[11],s,e,t,!!n,o),zf}function Kf(e,t){const n=Vn(),o=Pn(),r=Rn();return Jf(r,o,El(Xn(r.data),n,o),n,e,t,!1),Kf}function Jf(e,t,n,o,r,i,s,a){const c=Vt(o),l=e.firstCreatePass&&Il(e),u=t[8],f=xl(t);ngDevMode&&Io(o,15);let d=!0;if(3&o.type||a){const p=_n(o,t),h=a?a(p):p,g=f.length,y=a?e=>a(bn(e[o.index])):o.index;if(mn(n)){let s=null;if(!a&&c&&(s=function(e,t,n,o){const r=e.cleanup;if(null!=r)for(let e=0;e<r.length-1;e+=2){const i=r[e];if(i===n&&r[e+1]===o){const n=t[7],o=r[e+2];return n.length>o?n[o]:null}"string"==typeof i&&(e+=2)}return null}(e,t,r,o.index)),null!==s)(s.__ngLastListenerFn__||s).__ngNextListenerFn__=i,s.__ngLastListenerFn__=i,d=!1;else{i=Zf(o,t,u,i,!1);const e=n.listen(h,r,i);ngDevMode&&ngDevMode.rendererAddEventListener++,f.push(i,e),l&&l.push(r,y,g,g+1)}}else i=Zf(o,t,u,i,!0),h.addEventListener(r,i,s),ngDevMode&&ngDevMode.rendererAddEventListener++,f.push(i),l&&l.push(r,y,g,s)}else i=Zf(o,t,u,i,!1);const p=o.outputs;let h;if(d&&null!==p&&(h=p[r])){const e=h.length;if(e)for(let n=0;n<e;n+=2){const e=h[n];ngDevMode&&Pe(t,e);const s=h[n+1],a=t[e],c=a[s];if(ngDevMode&&!qf(c))throw new Error(`@Output ${s} not initialized in '${a.constructor.name}'.`);const u=c.subscribe(i),d=f.length;f.push(i,u),l&&l.push(r,o.index,d,-(d+1))}}}function Gf(e,t,n,o){try{return un(6,t,n),!1!==n(o)}catch(t){return Tl(e,t),!1}finally{un(7,t,n)}}function Zf(e,t,n,o,r){return function i(s){if(s===Function)return o;const a=2&e.flags?Mn(e.index,t):t;0==(32&t[2])&&vl(a);let c=Gf(t,n,o,s),l=i.__ngNextListenerFn__;for(;l;)c=Gf(t,n,l,s)&&c,l=l.__ngNextListenerFn__;return r&&!1===c&&(s.preventDefault(),s.returnValue=!1),c}}function Qf(e=1){return function(e){return(On.lFrame.contextLView=function(e,t){for(;e>0;)ngDevMode&&Ae(t[15],"Declaration view should be defined if nesting level is greater than 0."),t=t[15],e--;return t}(e,On.lFrame.contextLView))[8]}(e)}function Yf(e,t){let n=null;const o=function(e){const t=e.attrs;if(null!=t){const e=t.indexOf(5);if(0==(1&e))return t[e+1]}return null}(e);for(let r=0;r<t.length;r++){const i=t[r];if("*"!==i){if(null===o?Va(e,i,!0):$a(o,i))return r}else n=r}return n}function Xf(e){const t=Pn()[16][6];if(!t.projection){const n=e?e.length:1,o=t.projection=Er(n,null),r=o.slice();let i=t.child;for(;null!==i;){const t=e?Yf(i,e):0;null!==t&&(r[t]?r[t].projectionNext=i:o[t]=i,r[t]=i),i=i.next}}}function ed(e,t=0,n){const o=Pn(),r=Rn(),i=Rc(r,Ot+e,16,null,n||null);null===i.projection&&(i.projection=t),Un(),64!=(64&i.flags)&&function(e,t,n){Ia(t[11],0,t,n,ca(e,n,t),ha(n.parent||t[6],n,t))}(r,o,i)}function td(e,t,n){return nd(e,"",t,"",n),td}function nd(e,t,n,o,r){const i=Pn(),s=Lu(i,t,n,o);if(s!==Ha){const n=Rn(),a=po();Zc(n,a,i,e,s,i[11],r,!1),ngDevMode&&Dl(n.data,a,e,zn()-1,t,o)}return nd}function od(e,t,n,o,r,i,s){const a=Pn(),c=Fu(a,t,n,o,r,i);if(c!==Ha){const n=Rn(),r=po();Zc(n,r,a,e,c,a[11],s,!1),ngDevMode&&Dl(n.data,r,e,zn()-2,t,o,i)}return od}function rd(e,t,n,o,r,i,s,a,c){const l=Pn(),u=Hu(l,t,n,o,r,i,s,a);if(u!==Ha){const n=Rn(),r=po();Zc(n,r,l,e,u,l[11],c,!1),ngDevMode&&Dl(n.data,r,e,zn()-3,t,o,i,a)}return rd}function id(e,t,n,o,r,i,s,a,c,l,u){const f=Pn(),d=Uu(f,t,n,o,r,i,s,a,c,l);if(d!==Ha){const n=Rn(),r=po();Zc(n,r,f,e,d,f[11],u,!1),ngDevMode&&Dl(n.data,r,e,zn()-4,t,o,i,a,l)}return id}function sd(e,t,n,o,r,i,s,a,c,l,u,f,d){const p=Pn(),h=Bu(p,t,n,o,r,i,s,a,c,l,u,f);if(h!==Ha){const n=Rn(),r=po();Zc(n,r,p,e,h,p[11],d,!1),ngDevMode&&Dl(n.data,r,e,zn()-5,t,o,i,a,l,f)}return sd}function ad(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){const g=Pn(),y=Wu(g,t,n,o,r,i,s,a,c,l,u,f,d,p);if(y!==Ha){const n=Rn(),r=po();Zc(n,r,g,e,y,g[11],h,!1),ngDevMode&&Dl(n.data,r,e,zn()-6,t,o,i,a,l,f,p)}return ad}function cd(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){const m=Pn(),v=qu(m,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g);if(v!==Ha){const n=Rn(),r=po();Zc(n,r,m,e,v,m[11],y,!1),ngDevMode&&Dl(n.data,r,e,zn()-7,t,o,i,a,l,f,p,g)}return cd}function ld(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v){const b=Pn(),w=zu(b,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m);if(w!==Ha){const n=Rn(),r=po();Zc(n,r,b,e,w,b[11],v,!1),ngDevMode&&Dl(n.data,r,e,zn()-8,t,o,i,a,l,f,p,g,m)}return ld}function ud(e,t,n){const o=Pn(),r=$u(o,t);if(r!==Ha){const i=Rn(),s=po();if(Zc(i,s,o,e,r,o[11],n,!1),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Dl(i.data,s,e,zn()-n.length+1,...n)}}return ud}function fd(e,t,n,o,r){const i=e[n+1],s=null===t;let a=o?za(i):Ga(i),c=!1;for(;0!==a&&(!1===c||s);){ngDevMode&&Pe(e,a);const n=e[a],r=e[a+1];dd(n,t)&&(c=!0,e[a+1]=o?Ya(r):Ja(r)),a=o?za(r):Ga(r)}c&&(e[n+1]=o?Ja(i):Ya(i))}function dd(e,t){return ngDevMode&&Me(Array.isArray(t),!0,"Expected that 'tStylingKey' has been unwrapped"),null===e||null==t||(Array.isArray(e)?e[1]:e)===t||!(!Array.isArray(e)||"string"!=typeof t)&&Or(e,t)>=0}const pd={textEnd:0,key:0,keyEnd:0,value:0,valueEnd:0};function hd(e){return e.substring(pd.key,pd.keyEnd)}function gd(e){return e.substring(pd.value,pd.valueEnd)}function yd(e,t){const n=pd.textEnd;return n===t?-1:(t=pd.keyEnd=function(e,t,n){for(;t<n&&e.charCodeAt(t)>32;)t++;return t}(e,pd.key=t,n),bd(e,t,n))}function md(e,t){const n=pd.textEnd;let o=pd.key=bd(e,t,n);return n===o?-1:(o=pd.keyEnd=function(e,t,n){let o;for(;t<n&&(45===(o=e.charCodeAt(t))||95===o||(-33&o)>=65&&(-33&o)<=90||o>=48&&o<=57);)t++;return t}(e,o,n),o=wd(e,o,n,58),o=pd.value=bd(e,o,n),o=pd.valueEnd=function(e,t,n){let o=-1,r=-1,i=-1,s=t,a=s;for(;s<n;){const c=e.charCodeAt(s++);if(59===c)return a;34===c||39===c?a=s=_d(e,c,s,n):t===s-4&&85===i&&82===r&&76===o&&40===c?a=s=_d(e,41,s,n):c>32&&(a=s),i=r,r=o,o=-33&c}return a}(e,o,n),wd(e,o,n,59))}function vd(e){pd.key=0,pd.keyEnd=0,pd.value=0,pd.valueEnd=0,pd.textEnd=e.length}function bd(e,t,n){for(;t<n&&e.charCodeAt(t)<=32;)t++;return t}function wd(e,t,n,o){return(t=bd(e,t,n))<n&&(ngDevMode&&e.charCodeAt(t)!==o&&Cd(e,String.fromCharCode(o),t),t++),t}function _d(e,t,n,o){let r=-1,i=n;for(;i<o;){const n=e.charCodeAt(i++);if(n==t&&92!==r)return i;r=92==n&&92===r?0:n}throw ngDevMode?Cd(e,String.fromCharCode(t),o):new Error}function Cd(e,t,n){throw ngDevMode&&De("string"==typeof e,!0,"String expected here"),ke(`Malformed style at location ${n} in string '`+e.substring(0,n)+"[>>"+e.substring(n,n+1)+"<<]"+e.substr(n+1)+`'. Expecting '${t}'.`)}function Dd(e,t,n){return Sd(e,t,n,!1),Dd}function Md(e,t){return Sd(e,t,null,!0),Md}function xd(e){Od(Rd,Id,e,!1)}function Id(e,t){for(let n=function(e){return vd(e),md(e,bd(e,0,pd.textEnd))}(t);n>=0;n=md(t,n))Rd(e,hd(t),gd(t))}function Ed(e){Od(Tr,Td,e,!0)}function Td(e,t){for(let n=function(e){return vd(e),yd(e,bd(e,0,pd.textEnd))}(t);n>=0;n=yd(t,n))Tr(e,hd(t),!0)}function Sd(e,t,n,o){const r=Pn(),i=Rn(),s=Gn(2);i.firstUpdatePass&&kd(i,e,s,o),t!==Ha&&Nu(r,s,t)&&jd(i,i.data[uo()],r,r[11],e,r[s+1]=function(e,t){return null==e||("string"==typeof t?e+=t:"object"==typeof e&&(e=ae(xi(e)))),e}(t,n),o,s)}function Od(e,t,n,o){const r=Rn(),i=Gn(2);r.firstUpdatePass&&kd(r,null,i,o);const s=Pn();if(n!==Ha&&Nu(s,i,n)){const a=r.data[uo()];if(Ld(a,o)&&!Ad(r,i)){if(ngDevMode){const e=r.data[i];De(Array.isArray(e)?e[1]:e,!1,"Styling linked list shadow input should be marked as 'false'")}let e=o?a.classesWithoutHost:a.stylesWithoutHost;ngDevMode&&!1===o&&null!==e&&De(e.endsWith(";"),!0,"Expecting static portion to end with ';'"),null!==e&&(n=ce(e,n||"")),Rf(r,a,s,n,o)}else!function(e,t,n,o,r,i,s,a){r===Ha&&(r=ct);let c=0,l=0,u=0<r.length?r[0]:null,f=0<i.length?i[0]:null;for(;null!==u||null!==f;){ngDevMode&&Ee(c,999,"Are we stuck in infinite loop?"),ngDevMode&&Ee(l,999,"Are we stuck in infinite loop?");const d=c<r.length?r[c+1]:void 0,p=l<i.length?i[l+1]:void 0;let h,g=null;u===f?(c+=2,l+=2,d!==p&&(g=f,h=p)):null===f||null!==u&&u<f?(c+=2,g=u):(ngDevMode&&Ae(f,"Expecting to have a valid key"),l+=2,g=f,h=p),null!==g&&jd(e,t,n,o,g,h,s,a),u=c<r.length?r[c]:null,f=l<i.length?i[l]:null}}(r,a,s,s[11],s[i+1],s[i+1]=function(e,t,n){if(null==n||""===n)return ct;const o=[],r=xi(n);if(Array.isArray(r))for(let t=0;t<r.length;t++)e(o,r[t],!0);else if("object"==typeof r)for(const t in r)r.hasOwnProperty(t)&&e(o,t,r[t]);else"string"==typeof r?t(o,r):ngDevMode&&ke("Unsupported styling type "+typeof r+": "+r);return o}(e,t,n),o,i)}}function Ad(e,t){return t>=e.expandoStartIndex}function kd(e,t,n,o){ngDevMode&&Gt(e);const r=e.data;if(null===r[n+1]){const i=r[uo()];ngDevMode&&Ae(i,"TNode expected");const s=Ad(e,n);Ld(i,o)&&null===t&&!s&&(t=!1),t=function(e,t,n,o){const r=Xn(e);let i=o?t.residualClasses:t.residualStyles;if(null===r)0===(o?t.classBindings:t.styleBindings)&&(n=Pd(n=Nd(null,e,t,n,o),t.attrs,o),i=null);else{const s=t.directiveStylingLast;if(-1===s||e[s]!==r)if(n=Nd(r,e,t,n,o),null===i){let n=function(e,t,n){const o=n?t.classBindings:t.styleBindings;if(0!==Ga(o))return e[za(o)]}(e,t,o);void 0!==n&&Array.isArray(n)&&(n=Nd(null,e,t,n[1],o),n=Pd(n,t.attrs,o),function(e,t,n,o){const r=n?t.classBindings:t.styleBindings;ngDevMode&&Me(Ga(r),0,"Expecting to have at least one template styling binding."),e[za(r)]=o}(e,t,o,n))}else i=function(e,t,n){let o;const r=t.directiveEnd;ngDevMode&&Me(t.directiveStylingLast,-1,"By the time this function gets called at least one hostBindings-node styling instruction must have executed.");for(let i=1+t.directiveStylingLast;i<r;i++)o=Pd(o,e[i].hostAttrs,n);return Pd(o,t.attrs,n)}(e,t,o)}return void 0!==i&&(o?t.residualClasses=i:t.residualStyles=i),n}(r,i,t,o),function(e,t,n,o,r,i){ngDevMode&&Gt(Rn());let s=i?t.classBindings:t.styleBindings,a=za(s),c=Ga(s);e[o]=n;let l,u=!1;if(Array.isArray(n)){const e=n;l=e[1],(null===l||Or(e,l)>0)&&(u=!0)}else l=n;if(r)if(0!==c){const t=za(e[a+1]);e[o+1]=qa(t,a),0!==t&&(e[t+1]=Za(e[t+1],o)),e[a+1]=(f=e[a+1],d=o,ngDevMode&&we(f,"expected number"),ngDevMode&&_e(d,0,32767),131071&f|d<<17)}else e[o+1]=qa(a,0),0!==a&&(e[a+1]=Za(e[a+1],o)),a=o;else e[o+1]=qa(c,0),ngDevMode&&De(0!==a&&0===c,!1,"Adding template bindings after hostBindings is not allowed."),0===a?a=o:e[c+1]=Za(e[c+1],o),c=o;var f,d;u&&(e[o+1]=Ja(e[o+1])),fd(e,l,o,!0),fd(e,l,o,!1),function(e,t,n,o,r){const i=r?e.residualClasses:e.residualStyles;null!=i&&"string"==typeof t&&Or(i,t)>=0&&(n[o+1]=Ya(n[o+1]))}(t,l,e,o,i),s=qa(a,c),i?t.classBindings=s:t.styleBindings=s}(r,i,t,n,s,o)}}function Nd(e,t,n,o,r){let i=null;const s=n.directiveEnd;let a=n.directiveStylingLast;for(-1===a?a=n.directiveStart:a++;a<s&&(i=t[a],ngDevMode&&Ae(i,"expected to be defined"),o=Pd(o,i.hostAttrs,r),i!==e);)a++;return null!==e&&(n.directiveStylingLast=a),o}function Pd(e,t,n){const o=n?1:2;let r=-1;if(null!==t)for(let i=0;i<t.length;i++){const s=t[i];"number"==typeof s?r=s:r===o&&(Array.isArray(e)||(e=void 0===e?[]:["",e]),Tr(e,s,!!n||t[++i]))}return void 0===e?null:e}function Rd(e,t,n){Tr(e,t,xi(n))}function jd(e,t,n,o,r,i,s,a){if(!(3&t.type))return;const c=e.data,l=c[a+1];$d(Qa(l)?Vd(c,t,n,r,Ga(l),s):void 0)||($d(i)||Ka(l)&&(i=Vd(c,null,n,r,a,s)),function(e,t,n,o,r){const i=mn(e);if(t)r?(ngDevMode&&ngDevMode.rendererAddClass++,i?e.addClass(n,o):(ngDevMode&&Ae(n.classList,"HTMLElement expected"),n.classList.add(o))):(ngDevMode&&ngDevMode.rendererRemoveClass++,i?e.removeClass(n,o):n.classList.remove(o));else{let t=-1===o.indexOf("-")?void 0:qs.DashCase;if(null==r)ngDevMode&&ngDevMode.rendererRemoveStyle++,i?e.removeStyle(n,o,t):n.style.removeProperty(o);else{const s="string"==typeof r&&r.endsWith("!important");s&&(r=r.slice(0,-10),t|=qs.Important),ngDevMode&&ngDevMode.rendererSetStyle++,i?e.setStyle(n,o,r,t):(ngDevMode&&Ae(n.style,"HTMLElement expected"),n.style.setProperty(o,r,s?"important":""))}}}(o,s,wn(uo(),n),r,i))}function Vd(e,t,n,o,r,i){const s=null===t;let a;for(;r>0;){const t=e[r],i=Array.isArray(t),c=i?t[1]:t,l=null===c;let u=n[r+1];u===Ha&&(u=l?ct:void 0);let f=l?Sr(u,o):c===o?u:void 0;if(i&&!$d(f)&&(f=Sr(t,o)),$d(f)&&(a=f,s))return a;const d=e[r+1];r=s?za(d):Ga(d)}if(null!==t){let e=i?t.residualClasses:t.residualStyles;null!=e&&(a=Sr(e,o))}return a}function $d(e){return void 0!==e}function Ld(e,t){return 0!=(e.flags&(t?16:32))}function Fd(e,t=""){const n=Pn(),o=Rn(),r=e+Ot;ngDevMode&&De(zn(),o.bindingStartIndex,"text nodes should be created before any bindings"),ngDevMode&&Pe(n,r);const i=o.firstCreatePass?Rc(o,r,1,t,null):o.data[r],s=n[r]=ea(n[11],t);ba(o,n,s,i),Fn(i,!1)}function Hd(e){return Ud("",e,""),Hd}function Ud(e,t,n){const o=Pn(),r=Lu(o,e,t,n);return r!==Ha&&Ol(o,uo(),r),Ud}function Bd(e,t,n,o,r){const i=Pn(),s=Fu(i,e,t,n,o,r);return s!==Ha&&Ol(i,uo(),s),Bd}function Wd(e,t,n,o,r,i,s){const a=Pn(),c=Hu(a,e,t,n,o,r,i,s);return c!==Ha&&Ol(a,uo(),c),Wd}function qd(e,t,n,o,r,i,s,a,c){const l=Pn(),u=Uu(l,e,t,n,o,r,i,s,a,c);return u!==Ha&&Ol(l,uo(),u),qd}function zd(e,t,n,o,r,i,s,a,c,l,u){const f=Pn(),d=Bu(f,e,t,n,o,r,i,s,a,c,l,u);return d!==Ha&&Ol(f,uo(),d),zd}function Kd(e,t,n,o,r,i,s,a,c,l,u,f,d){const p=Pn(),h=Wu(p,e,t,n,o,r,i,s,a,c,l,u,f,d);return h!==Ha&&Ol(p,uo(),h),Kd}function Jd(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){const g=Pn(),y=qu(g,e,t,n,o,r,i,s,a,c,l,u,f,d,p,h);return y!==Ha&&Ol(g,uo(),y),Jd}function Gd(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){const m=Pn(),v=zu(m,e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y);return v!==Ha&&Ol(m,uo(),v),Gd}function Zd(e){const t=Pn(),n=$u(t,e);return n!==Ha&&Ol(t,uo(),n),Zd}function Qd(e,t,n){Od(Tr,Td,Lu(Pn(),e,t,n),!0)}function Yd(e,t,n,o,r){Od(Tr,Td,Fu(Pn(),e,t,n,o,r),!0)}function Xd(e,t,n,o,r,i,s){Od(Tr,Td,Hu(Pn(),e,t,n,o,r,i,s),!0)}function ep(e,t,n,o,r,i,s,a,c){Od(Tr,Td,Uu(Pn(),e,t,n,o,r,i,s,a,c),!0)}function tp(e,t,n,o,r,i,s,a,c,l,u){Od(Tr,Td,Bu(Pn(),e,t,n,o,r,i,s,a,c,l,u),!0)}function np(e,t,n,o,r,i,s,a,c,l,u,f,d){Od(Tr,Td,Wu(Pn(),e,t,n,o,r,i,s,a,c,l,u,f,d),!0)}function op(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){Od(Tr,Td,qu(Pn(),e,t,n,o,r,i,s,a,c,l,u,f,d,p,h),!0)}function rp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){Od(Tr,Td,zu(Pn(),e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y),!0)}function ip(e){Od(Tr,Td,$u(Pn(),e),!0)}function sp(e,t,n){xd(Lu(Pn(),e,t,n))}function ap(e,t,n,o,r){xd(Fu(Pn(),e,t,n,o,r))}function cp(e,t,n,o,r,i,s){xd(Hu(Pn(),e,t,n,o,r,i,s))}function lp(e,t,n,o,r,i,s,a,c){xd(Uu(Pn(),e,t,n,o,r,i,s,a,c))}function up(e,t,n,o,r,i,s,a,c,l,u){xd(Bu(Pn(),e,t,n,o,r,i,s,a,c,l,u))}function fp(e,t,n,o,r,i,s,a,c,l,u,f,d){xd(Wu(Pn(),e,t,n,o,r,i,s,a,c,l,u,f,d))}function dp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){xd(qu(Pn(),e,t,n,o,r,i,s,a,c,l,u,f,d,p,h))}function pp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){xd(zu(Pn(),e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y))}function hp(e){xd($u(Pn(),e))}function gp(e,t,n,o,r){return Sd(e,Lu(Pn(),t,n,o),r,!1),gp}function yp(e,t,n,o,r,i,s){return Sd(e,Fu(Pn(),t,n,o,r,i),s,!1),yp}function mp(e,t,n,o,r,i,s,a,c){return Sd(e,Hu(Pn(),t,n,o,r,i,s,a),c,!1),mp}function vp(e,t,n,o,r,i,s,a,c,l,u){return Sd(e,Uu(Pn(),t,n,o,r,i,s,a,c,l),u,!1),vp}function bp(e,t,n,o,r,i,s,a,c,l,u,f,d){return Sd(e,Bu(Pn(),t,n,o,r,i,s,a,c,l,u,f),d,!1),bp}function wp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h){return Sd(e,Wu(Pn(),t,n,o,r,i,s,a,c,l,u,f,d,p),h,!1),wp}function _p(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y){return Sd(e,qu(Pn(),t,n,o,r,i,s,a,c,l,u,f,d,p,h,g),y,!1),_p}function Cp(e,t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m,v){return Sd(e,zu(Pn(),t,n,o,r,i,s,a,c,l,u,f,d,p,h,g,y,m),v,!1),Cp}function Dp(e,t,n){return Sd(e,$u(Pn(),t),n,!1),Dp}function Mp(e,t,n){const o=Pn(),r=Jn();if(Nu(o,r,t)){const i=Rn(),s=po();Zc(i,s,o,e,t,o[11],n,!0),ngDevMode&&Dl(i.data,s,e,r)}return Mp}function xp(e,t,n){const o=Pn(),r=Jn();if(Nu(o,r,t)){const i=Rn(),s=po();Zc(i,s,o,e,t,El(Xn(i.data),s,o),n,!0),ngDevMode&&Dl(i.data,s,e,r)}return xp}"undefined"==typeof ngI18nClosureMode&&(it.ngI18nClosureMode="undefined"!=typeof goog&&"function"==typeof goog.getMsg);const Ip=void 0;var Ep=["en",[["a","p"],["AM","PM"],Ip],[["AM","PM"],Ip,Ip],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],Ip,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],Ip,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",Ip,"{1} 'at' {0}",Ip],[".",",",";","%","+","-","E","×","‰","∞","NaN",":"],["#,##0.###","#,##0%","¤#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(e){const t=Math.floor(Math.abs(e)),n=e.toString().replace(/^[^.]*\.?/,"").length;return 1===t&&0===n?1:5}];let Tp={};function Sp(e,t,n){"string"!=typeof t&&(n=t,t=e[Rp.LocaleId]),t=t.toLowerCase().replace(/_/g,"-"),Tp[t]=e,n&&(Tp[t][Rp.ExtraData]=n)}function Op(e){const t=function(e){return e.toLowerCase().replace(/_/g,"-")}(e);let n=Np(t);if(n)return n;const o=t.split("-")[0];if(n=Np(o),n)return n;if("en"===o)return Ep;throw new Error(`Missing locale data for the locale "${e}".`)}function Ap(e){return Op(e)[Rp.CurrencyCode]||null}function kp(e){return Op(e)[Rp.PluralCase]}function Np(e){return e in Tp||(Tp[e]=it.ng&&it.ng.common&&it.ng.common.locales&&it.ng.common.locales[e]),Tp[e]}function Pp(){Tp={}}var Rp;!function(e){e[e.LocaleId=0]="LocaleId",e[e.DayPeriodsFormat=1]="DayPeriodsFormat",e[e.DayPeriodsStandalone=2]="DayPeriodsStandalone",e[e.DaysFormat=3]="DaysFormat",e[e.DaysStandalone=4]="DaysStandalone",e[e.MonthsFormat=5]="MonthsFormat",e[e.MonthsStandalone=6]="MonthsStandalone",e[e.Eras=7]="Eras",e[e.FirstDayOfWeek=8]="FirstDayOfWeek",e[e.WeekendRange=9]="WeekendRange",e[e.DateFormat=10]="DateFormat",e[e.TimeFormat=11]="TimeFormat",e[e.DateTimeFormat=12]="DateTimeFormat",e[e.NumberSymbols=13]="NumberSymbols",e[e.NumberFormats=14]="NumberFormats",e[e.CurrencyCode=15]="CurrencyCode",e[e.CurrencySymbol=16]="CurrencySymbol",e[e.CurrencyName=17]="CurrencyName",e[e.Currencies=18]="Currencies",e[e.Directionality=19]="Directionality",e[e.PluralCase=20]="PluralCase",e[e.ExtraData=21]="ExtraData"}(Rp||(Rp={}));const jp=["zero","one","two","few","many"],Vp="en-US",$p={marker:"element"},Lp={marker:"ICU"};var Fp;!function(e){e[e.SHIFT=2]="SHIFT",e[e.APPEND_EAGERLY=1]="APPEND_EAGERLY",e[e.COMMENT=2]="COMMENT"}(Fp||(Fp={}));let Hp=Vp;function Up(e){Ae(e,"Expected localeId to be defined"),"string"==typeof e&&(Hp=e.toLowerCase().replace(/_/g,"-"))}function Bp(e,t,n){const o=t.insertBeforeIndex,r=Array.isArray(o)?o[0]:o;return null===r?ga(e,0,n):(ngDevMode&&Pe(n,r),bn(n[r]))}function Wp(e,t,n,o,r){const i=t.insertBeforeIndex;if(Array.isArray(i)){ngDevMode&&Ne(o);let s=o,a=null;if(3&t.type||(a=s,s=r),null!==s&&0==(2&t.flags))for(let t=1;t<i.length;t++)ua(e,s,n[i[t]],a,!1)}}function qp(e,t){if(ngDevMode&&De(t.insertBeforeIndex,null,"We expect that insertBeforeIndex is not set"),e.push(t),e.length>1)for(let n=e.length-2;n>=0;n--){const o=e[n];zp(o)||Kp(o,t)&&null===Jp(o)&&Gp(o,t.index)}}function zp(e){return!(64&e.type)}function Kp(e,t){return zp(t)||e.index>t.index}function Jp(e){const t=e.insertBeforeIndex;return Array.isArray(t)?t[0]:t}function Gp(e,t){const n=e.insertBeforeIndex;Array.isArray(n)?n[0]=t:(va(Bp,Wp),e.insertBeforeIndex=t)}function Zp(e,t){const n=e.data[t];if(null===n||"string"==typeof n)return null;!ngDevMode||n.hasOwnProperty("tViews")||n.hasOwnProperty("currentCaseLViewIndex")||ke("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: "+n);const o=n.hasOwnProperty("currentCaseLViewIndex")?n:n.value;return ngDevMode&&Ut(o),o}function Qp(e,t,n){const o=jc(e,n,64,null,null);return qp(t,o),o}function Yp(e,t){const n=t[e.currentCaseLViewIndex];return null===n?n:n<0?~n:n}function Xp(e){return e>>>17}function eh(e){return(131070&e)>>>1}function th(e){return 1&e}let nh=0,oh=0;function rh(e,t,n,o){ngDevMode&&Ne(o);const r=n[11];let i,s=null;for(let a=0;a<t.length;a++){const c=t[a];if("string"==typeof c){const e=t[++a];null===n[e]&&(ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&Pe(n,e),n[e]=ea(r,c))}else if("number"==typeof c)switch(1&c){case 0:const l=Xp(c);let u,f;if(null===s&&(s=l,i=pa(r,o)),l===s?(u=o,f=i):(u=null,f=bn(n[l])),null!==f){ngDevMode&&Ne(f);const t=eh(c);ngDevMode&&Se(t,Ot,"Missing ref");const o=n[t];ngDevMode&&Ne(o),ua(r,f,o,u,!1);const i=Zp(e,t);if(null!==i&&"object"==typeof i){ngDevMode&&Ut(i);const t=Yp(i,n);null!==t&&rh(e,i.create[t],n,n[i.anchorIdx])}}break;case 1:const d=c>>>1,p=t[++a],h=t[++a];ll(r,wn(d,n),null,null,p,h,null);break;default:if(ngDevMode)throw new pe(700,`Unable to determine the type of mutate operation for "${c}"`)}else switch(c){case Lp:const e=t[++a],o=t[++a];null===n[o]&&(ngDevMode&&De(typeof e,"string",`Expected "${e}" to be a comment node value`),ngDevMode&&ngDevMode.rendererCreateComment++,ngDevMode&&Zt(n,o),_s(n[o]=na(r,e),n));break;case $p:const i=t[++a],s=t[++a];null===n[s]&&(ngDevMode&&De(typeof i,"string",`Expected "${i}" to be an element node tag name`),ngDevMode&&ngDevMode.rendererCreateElement++,ngDevMode&&Zt(n,s),_s(n[s]=oa(r,i,null),n));break;default:ngDevMode&&ke(`Unable to determine the type of mutate operation for "${c}"`)}}}function ih(e,t,n,o,r){for(let i=0;i<n.length;i++){const s=n[i],a=n[++i];if(s&r){let r="";for(let s=i+1;s<=i+a;s++){const i=n[s];if("string"==typeof i)r+=i;else if("number"==typeof i)if(i<0)r+=ge(t[o-i]);else{const a=i>>>2;switch(3&i){case 1:const i=n[++s],c=n[++s],l=e.data[a];ngDevMode&&Ae(l,"Experting TNode or string"),"string"==typeof l?ll(t[11],t[a],null,l,i,r,c):Zc(e,l,t,i,r,t[11],c,!1);break;case 0:const u=t[a];null!==u&&ta(t[11],u,r);break;case 2:ah(e,Zp(e,a),t,r);break;case 3:sh(e,Zp(e,a),o,t)}}}}else{const r=n[i+1];if(r>0&&3==(3&r)){const n=Zp(e,r>>>2);t[n.currentCaseLViewIndex]<0&&sh(e,n,o,t)}}i+=a}}function sh(e,t,n,o){ngDevMode&&Pe(o,t.currentCaseLViewIndex);let r=o[t.currentCaseLViewIndex];if(null!==r){let i=nh;r<0&&(r=o[t.currentCaseLViewIndex]=~r,i=-1),ih(e,o,t.update[r],n,i)}}function ah(e,t,n,o){const r=function(e,t){let n=e.cases.indexOf(t);if(-1===n)switch(e.type){case 1:{const o=function(e,t){const n=kp(t)(parseInt(e,10)),o=jp[n];return void 0!==o?o:"other"}(t,Hp);n=e.cases.indexOf(o),-1===n&&"other"!==o&&(n=e.cases.indexOf("other"));break}case 0:n=e.cases.indexOf("other")}return-1===n?null:n}(t,o);if(Yp(t,n)!==r&&(ch(e,t,n),n[t.currentCaseLViewIndex]=null===r?null:~r,null!==r)){const o=n[t.anchorIdx];o&&(ngDevMode&&Ne(o),rh(e,t.create[r],n,o))}}function ch(e,t,n){let o=Yp(t,n);if(null!==o){const r=t.remove[o];for(let t=0;t<r.length;t++){const o=r[t];if(o>0){const e=wn(o,n);null!==e&&Da(n[11],e)}else ch(e,Zp(e,~o),n)}}}function lh(){const e=[];let t,n,o=-1;function r(e,t){o=0;const r=Yp(e,t);null!==r?(ngDevMode&&_e(r,0,e.cases.length-1),n=e.remove[r]):n=ct}function i(){if(o<n.length){const s=n[o++];if(ngDevMode&&we(s,"Expecting OpCode number"),s>0){const e=t[s];return ngDevMode&&Ne(e),e}{e.push(o,n);const a=~s,c=t[1].data[a];return ngDevMode&&Ut(c),r(c,t),i()}}return 0===e.length?null:(n=e.pop(),o=e.pop(),i())}return function(n,o){for(t=o;e.length;)e.pop();return ngDevMode&&Lt(n,o),r(n.value,o),i}}function uh(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const o=t[e++],r=t[e],i=(o&Fp.COMMENT)===Fp.COMMENT,s=(o&Fp.APPEND_EAGERLY)===Fp.APPEND_EAGERLY,a=o>>>Fp.SHIFT;n.push(`lView[${a}] = document.${i?"createComment":"createText"}(${JSON.stringify(r)});`),s&&n.push(`parent.appendChild(lView[${a}]);`)}return n}function fh(e){const t=new hh(e||(Array.isArray(this)?this:[]));let n=[];function o(e){const n=e>>>2;switch(3&e){case 0:return`(lView[${n}] as Text).textContent = $$$`;case 1:const e=t.consumeString(),o=t.consumeFunction();return`(lView[${n}] as Element).setAttribute('${e}', ${o?`(${o})($$$)`:"$$$"})`;case 2:return`icuSwitchCase(${n}, $$$)`;case 3:return`icuUpdateCase(${n})`}throw new Error("unexpected OpCode")}for(;t.hasMore();){let e=t.consumeNumber(),r=t.consumeNumber();const i=t.i+r,s=[];let a="";for(;t.i<i;){let e=t.consumeNumberOrString();if("string"==typeof e)a+=e;else if(e<0)a+="${lView[i"+e+"]}";else{const t=o(e);s.push(t.replace("$$$","`"+a+"`")+";"),a=""}}n.push(`if (mask & 0b${e.toString(2)}) { ${s.join(" ")} }`)}return n}function dh(e){const t=new hh(e||(Array.isArray(this)?this:[]));let n=[];function o(e){const n=Xp(e),o=eh(e);switch(th(e)){case 0:return`(lView[${n}] as Element).appendChild(lView[${r}])`;case 1:return`(lView[${o}] as Element).setAttribute("${t.consumeString()}", "${t.consumeString()}")`}throw new Error("Unexpected OpCode: "+th(e))}let r=-1;for(;t.hasMore();){let e=t.consumeNumberStringOrMarker();if(e===Lp){const e=t.consumeString();r=t.consumeNumber(),n.push(`lView[${r}] = document.createComment("${e}")`)}else if(e===$p){const e=t.consumeString();r=t.consumeNumber(),n.push(`lView[${r}] = document.createElement("${e}")`)}else if("string"==typeof e)r=t.consumeNumber(),n.push(`lView[${r}] = document.createTextNode("${e}")`);else{if("number"!=typeof e)throw new Error("Unexpected value");{const t=o(e);t&&n.push(t)}}}return n}function ph(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const o=t[e];o>0?n.push(`remove(lView[${o}])`):n.push(`removeNestedICU(${~o})`)}return n}class hh{constructor(e){this.i=0,this.codes=e}hasMore(){return this.i<this.codes.length}consumeNumber(){let e=this.codes[this.i++];return we(e,"expecting number in OpCode"),e}consumeString(){let e=this.codes[this.i++];return Ce(e,"expecting string in OpCode"),e}consumeFunction(){let e=this.codes[this.i++];if(null===e||"function"==typeof e)return e;throw new Error("expecting function in OpCode")}consumeNumberOrString(){let e=this.codes[this.i++];return"string"==typeof e||we(e,"expecting number or string in OpCode"),e}consumeNumberStringOrMarker(){let e=this.codes[this.i++];return"string"==typeof e||"number"==typeof e||e==Lp||e==$p||we(e,"expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode"),e}}const gh=/�(\d+):?\d*�/gi,yh=/({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi,mh=/�(\d+)�/,vh=/^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/,bh=/�\/?\*(\d+:\d+)�/gi,wh=/�(\/?[#*]\d+):?\d*�/gi,_h=/\uE500/g;function Ch(e,t,n,o,r,i,s){const a=Vc(e,o,1,null);let c=a<<Fp.SHIFT,l=Ln();t===l&&(l=null),null===l&&(c|=Fp.APPEND_EAGERLY),s&&(c|=Fp.COMMENT,void 0===zs&&(zs=lh())),r.push(c,null===i?"":i);const u=jc(e,a,s?32:1,null===i?ngDevMode?"{{?}}":"":i,null);qp(n,u);const f=u.index;return Fn(u,!1),null!==l&&t!==l&&function(e,t){ngDevMode&&Ht(e);let n=e.insertBeforeIndex;null===n?(va(Bp,Wp),n=e.insertBeforeIndex=[null,t]):(De(Array.isArray(n),!0,"Expecting array here"),n.push(t))}(l,f),u}function Dh(e,t,n,o,r,i,s){const a=s.match(gh),c=Ch(e,t,n,i,o,a?null:s,!1);a&&Mh(r,s,c.index,null,0,null)}function Mh(e,t,n,o,r,i){ngDevMode&&Oe(n,Ot,"Index must be in absolute LView offset");const s=e.length,a=s+1;e.push(null,null);const c=s+2;ngDevMode&&ec(e,fh);const l=t.split(gh);let u=0;for(let t=0;t<l.length;t++){const n=l[t];if(1&t){const t=r+parseInt(n,10);e.push(-1-t),u|=Ih(t)}else""!==n&&e.push(n)}return e.push(n<<2|(o?1:0)),o&&e.push(o,i),e[s]=u,e[a]=e.length-c,u}function xh(e){let t=0;for(let n=0;n<e.length;n++){const o=e[n];"number"==typeof o&&o<0&&t++}return t}function Ih(e){return 1<<Math.min(e,31)}function Eh(e){let t,n,o="",r=0,i=!1;for(;null!==(t=bh.exec(e));)i?t[0]===`�/*${n}�`&&(r=t.index,i=!1):(o+=e.substring(r,t.index+t[0].length),n=t[1],i=!0);return ngDevMode&&De(i,!1,`Tag mismatch: unable to find the end of the sub-template in the translation "${e}"`),o+=e.substr(r),o}function Th(e,t,n,o,r,i){ngDevMode&&Ae(r,"ICU expression must be defined");let s=0;const a={type:r.type,currentCaseLViewIndex:Vc(e,t,1,null),anchorIdx:i,cases:[],create:[],remove:[],update:[]};!function(e,t,n){e.push(Ih(t.mainBinding),2,-1-t.mainBinding,n<<2|2)}(n,r,i),function(e,t,n){const o=e.data[t];ngDevMode&&De(null===o||o.hasOwnProperty("tViews"),!0,"We expect to get 'null'|'TIcuContainer'"),null===o?e.data[t]=n:(ngDevMode&&Io(o,32),o.value=n)}(e,i,a);const c=r.values;for(let i=0;i<c.length;i++){const l=c[i],u=[];for(let e=0;e<l.length;e++){const t=l[e];if("string"!=typeof t){const n=u.push(t)-1;l[e]=`\x3c!--�${n}�--\x3e`}}s=Ah(e,a,t,n,o,r.cases[i],l.join(""),u)|s}s&&function(e,t,n){e.push(t,1,n<<2|3)}(n,s,i)}function Sh(e){const t=[],n=[];let o=1,r=0;const i=Oh(e=e.replace(vh,(function(e,t,n){return o="select"===n?0:1,r=parseInt(t.substr(1),10),""})));for(let e=0;e<i.length;){let r=i[e++].trim();1===o&&(r=r.replace(/\s*(?:=)?(\w+)\s*/,"$1")),r.length&&t.push(r);const s=Oh(i[e++]);t.length>n.length&&n.push(s)}return{type:o,mainBinding:r,cases:t,values:n}}function Oh(e){if(!e)return[];let t=0;const n=[],o=[],r=/[{}]/g;let i;for(r.lastIndex=0;i=r.exec(e);){const r=i.index;if("}"==i[0]){if(n.pop(),0==n.length){const n=e.substring(t,r);vh.test(n)?o.push(Sh(n)):o.push(n),t=r+1}}else{if(0==n.length){const n=e.substring(t,r);o.push(n),t=r+1}n.push("{")}}const s=e.substring(t);return o.push(s),o}function Ah(e,t,n,o,r,i,s,a){const c=[],l=[],u=[];ngDevMode&&(ec(c,dh),ec(l,ph),ec(u,fh)),t.cases.push(i),t.create.push(c),t.remove.push(l),t.update.push(u);const f=Ni(gn()).getInertBodyElement(s);ngDevMode&&Ae(f,"Unable to generate inert body element");const d=as(f)||f;return d?kh(e,t,n,o,c,l,u,d,r,a,0):0}function kh(e,t,n,o,r,i,s,a,c,l,u){let f=0,d=a.firstChild;for(;d;){const a=Vc(e,n,1,null);switch(d.nodeType){case Node.ELEMENT_NODE:const p=d,h=p.tagName.toLowerCase();if(Ji.hasOwnProperty(h)){Rh(r,$p,h,c,a),e.data[a]=h;const g=p.attributes;for(let e=0;e<g.length;e++){const t=g.item(e),n=t.name.toLowerCase();t.value.match(gh)?Xi.hasOwnProperty(n)?Gi[n]?Mh(s,t.value,a,t.name,0,$i):Zi[n]?Mh(s,t.value,a,t.name,0,Li):Mh(s,t.value,a,t.name,0,null):ngDevMode&&console.warn(`WARNING: ignoring unsafe attribute value ${n} on element ${h} (see https://g.co/ng/security#xss)`):jh(r,a,t)}f=kh(e,t,n,o,r,i,s,d,a,l,u+1)|f,Nh(i,a,u)}break;case Node.TEXT_NODE:const g=d.textContent||"",y=g.match(gh);Rh(r,null,y?"":g,c,a),Nh(i,a,u),y&&(f=Mh(s,g,a,null,0,null)|f);break;case Node.COMMENT_NODE:const m=mh.exec(d.textContent||"");if(m){const t=parseInt(m[1],10),s=l[t];Rh(r,Lp,ngDevMode?`nested ICU ${t}`:"",c,a),Th(e,n,o,c,s,a),Ph(i,a,u)}}d=d.nextSibling}return f}function Nh(e,t,n){0===n&&e.push(t)}function Ph(e,t,n){0===n&&(e.push(~t),e.push(t))}function Rh(e,t,n,o,r){var i,s;null!==t&&e.push(t),e.push(n,r,(0,i=o,s=r,ngDevMode&&Oe(i,0,"Missing parent index"),ngDevMode&&Se(s,0,"Missing ref index"),0|i<<17|s<<1))}function jh(e,t,n){e.push(t<<1|1,n.name,n.value)}const Vh=/\[(�.+?�?)\]/,$h=/\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g,Lh=/({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g,Fh=/{([A-Z0-9_]+)}/g,Hh=/�I18N_EXP_(ICU(_\d+)?)�/g,Uh=/\/\*/,Bh=/\d+\:(\d+)/;function Wh(e,t,n=-1){const o=Rn(),r=Pn(),i=Ot+e;ngDevMode&&Ae(o,"tView should be defined");const s=En(o.consts,t),a=Ln();o.firstCreatePass&&function(e,t,n,o,r,i){const s=Ln(),a=[],c=[],l=[[]];ngDevMode&&(ec(a,uh),ec(c,fh)),r=function(e,t){if(function(e){return-1===e}(t))return Eh(e);{const n=e.indexOf(`:${t}�`)+2+t.toString().length,o=e.search(new RegExp(`�\\/\\*\\d+:${t}�`));return Eh(e.substring(n,o))}}(r,i);const u=(f=r,f.replace(_h," ")).split(wh);var f;for(let i=0;i<u.length;i++){let f=u[i];if(0==(1&i)){const i=Oh(f);for(let u=0;u<i.length;u++){let f=i[u];if(0==(1&u)){const t=f;ngDevMode&&Ce(t,"Parsed ICU part should be string"),""!==t&&Dh(e,s,l[0],a,c,n,t)}else{const i=f;if("object"!=typeof i)throw new Error(`Unable to parse ICU expression in "${r}" message.`);const u=Ch(e,s,l[0],n,a,ngDevMode?`ICU ${o}:${i.mainBinding}`:"",!0).index;ngDevMode&&Oe(u,Ot,"Index must be in absolute LView offset"),Th(e,n,c,t,i,u)}}}else{const t=47===f.charCodeAt(0),n=f.charCodeAt(t?1:0);ngDevMode&&Re(n,42,35);const o=Ot+Number.parseInt(f.substring(t?2:1));if(t)l.shift(),Fn(Ln(),!1);else{const t=Qp(e,l[0],o);l.unshift([]),Fn(t,!0)}}}e.data[o]={create:a,update:c}}(o,null===a?0:a.index,r,i,s,n);const c=o.data[i],l=la(o,a===r[6]?null:a,r),u=a&&8&a.type?r[a.index]:null;!function(e,t,n,o){const r=e[11];for(let i=0;i<t.length;i++){const s=t[i++],a=t[i],c=(s&Fp.COMMENT)===Fp.COMMENT,l=(s&Fp.APPEND_EAGERLY)===Fp.APPEND_EAGERLY,u=s>>>Fp.SHIFT;let f=e[u];null===f&&(f=e[u]=c?r.createComment(a):ea(r,a)),l&&null!==n&&ua(r,n,f,o,!1)}}(r,c.create,l,u),Zn(!0)}function qh(){Zn(!1)}function zh(e,t,n){Wh(e,t,n),qh()}function Kh(e,t){const n=Rn();ngDevMode&&Ae(n,"tView should be defined");const o=En(n.consts,t);!function(e,t,n){const o=Vn().index,r=[];if(ngDevMode&&ec(r,fh),e.firstCreatePass&&null===e.data[t]){for(let e=0;e<n.length;e+=2){const t=n[e],i=n[e+1];if(""!==i){if(yh.test(i))throw new Error(`ICU expressions are not supported in attributes. Message: "${i}".`);Mh(r,i,o,t,xh(r),null)}}e.data[t]=r}}(n,e+Ot,o)}function Jh(e){return Nu(Pn(),Jn(),e)&&(nh|=1<<Math.min(oh,31)),oh++,Jh}function Gh(e){!function(e,t,n){if(oh>0){ngDevMode&&Ae(e,"tView should be defined");const o=e.data[n];ih(e,t,Array.isArray(o)?o:o.update,zn()-oh-1,nh)}nh=0,oh=0}(Rn(),Pn(),e+Ot)}function Zh(e,t={}){return function(e,t={}){let n=e;if(Vh.test(e)){const e={},t=[0];n=n.replace($h,((n,o,r)=>{const i=o||r,s=e[i]||[];if(s.length||(i.split("|").forEach((e=>{const t=e.match(Bh),n=t?parseInt(t[1],10):0,o=Uh.test(e);s.push([n,o,e])})),e[i]=s),!s.length)throw new Error(`i18n postprocess: unmatched placeholder - ${i}`);const a=t[t.length-1];let c=0;for(let e=0;e<s.length;e++)if(s[e][0]===a){c=e;break}const[l,u,f]=s[c];return u?t.pop():a!==l&&t.push(l),s.splice(c,1),f}))}return Object.keys(t).length?(n=n.replace(Lh,((e,n,o,r,i,s)=>t.hasOwnProperty(o)?`${n}${t[o]}${s}`:e)),n=n.replace(Fh,((e,n)=>t.hasOwnProperty(n)?t[n]:e)),n=n.replace(Hh,((e,n)=>{if(t.hasOwnProperty(n)){const o=t[n];if(!o.length)throw new Error(`i18n postprocess: unmatched ICU - ${e} with key: ${n}`);return o.shift()}return e})),n):n}(e,t)}function Qh(e,t,n,o,r){if(e=fe(e),Array.isArray(e))for(let i=0;i<e.length;i++)Qh(e[i],t,n,o,r);else{const i=Rn(),s=Pn();let a=Jl(e)?e:fe(e.provide),c=ql(e);const l=Vn(),u=1048575&l.providerIndexes,f=l.directiveStart,d=l.providerIndexes>>20;if(Jl(e)||!e.multi){const o=new Mo(c,r,kf),p=eg(a,t,r?u:u+d,f);-1===p?(Uo($o(l,s),i,a),Yh(i,e,t.length),t.push(a),l.directiveStart++,l.directiveEnd++,r&&(l.providerIndexes+=1048576),n.push(o),s.push(o)):(n[p]=o,s[p]=o)}else{const p=eg(a,t,u+d,f),h=eg(a,t,u,u+d),g=p>=0&&n[p],y=h>=0&&n[h];if(r&&!y||!r&&!g){Uo($o(l,s),i,a);const u=function(e,t,n,o,r){const i=new Mo(e,n,kf);return i.multi=[],i.index=t,i.componentProviders=0,Xh(i,r,o&&!n),i}(r?ng:tg,n.length,r,o,c);!r&&y&&(n[h].providerFactory=u),Yh(i,e,t.length,0),t.push(a),l.directiveStart++,l.directiveEnd++,r&&(l.providerIndexes+=1048576),n.push(u),s.push(u)}else Yh(i,e,p>-1?p:h,Xh(n[r?h:p],c,!r&&o));!r&&o&&y&&n[h].componentProviders++}}}function Yh(e,t,n,o){const r=Jl(t),i=!!t.useClass;if(r||i){const s=(i?fe(t.useClass):t).prototype.ngOnDestroy;if(s){const i=e.destroyHooks||(e.destroyHooks=[]);if(!r&&t.multi){ngDevMode&&Ae(o,"indexInFactory when registering multi factory destroy hook");const e=i.indexOf(n);-1===e?i.push(n,[o,s]):i[e+1].push(o,s)}else i.push(n,s)}}}function Xh(e,t,n){return n&&e.componentProviders++,e.multi.push(t)-1}function eg(e,t,n,o){for(let r=n;r<o;r++)if(t[r]===e)return r;return-1}function tg(e,t,n,o){return og(this.multi,[])}function ng(e,t,n,o){const r=this.multi;let i;if(this.providerFactory){const e=this.providerFactory.componentProviders,t=Zo(n,n[1],this.providerFactory.index,o);i=t.slice(0,e),og(r,i);for(let n=e;n<t.length;n++)i.push(t[n])}else i=[],og(r,i);return i}function og(e,t){for(let n=0;n<e.length;n++){const o=e[n];t.push(o())}return t}function rg(e,t=[]){return n=>{n.providersResolver=(n,o)=>function(e,t,n){const o=Rn();if(o.firstCreatePass){const r=$t(e);Qh(n,o.data,o.blueprint,r,!0),Qh(t,o.data,o.blueprint,r,!1)}}(n,o?o(e):e,t)}}class ig{}class sg{}class ag{resolveComponentFactory(e){throw function(e){const t=Error(`No component factory found for ${ae(e)}. Did you add it to @NgModule.entryComponents?`);return t.ngComponent=e,t}(e)}}class cg{}function lg(e,t){return new ug(_n(e,t))}cg.NULL=new ag;class ug{constructor(e){this.nativeElement=e}}function fg(e){return e instanceof ug?e.nativeElement:e}ug.__NG_ELEMENT_ID__=function(){return lg(Vn(),Pn())},new fr("Renderer2Interceptor");class dg{}class pg{}pg.__NG_ELEMENT_ID__=()=>function(){const e=Pn(),t=Mn(Vn().index,e);return function(e){const t=e[11];if(ngDevMode&&!mn(t))throw new Error("Cannot inject Renderer2 when the application uses Renderer3!");return t}(Nt(t)?t:e)}();class hg{}hg.ɵprov=je({token:hg,providedIn:"root",factory:()=>null});class gg{constructor(e){this.full=e,this.major=e.split(".")[0],this.minor=e.split(".")[1],this.patch=e.split(".").slice(2).join(".")}}const yg=new gg("13.2.6"),mg={};function vg(e,t,n,o,r=!1){for(;null!==n;){ngDevMode&&Io(n,63);const i=t[n.index];if(null!==i&&o.push(bn(i)),Pt(i))for(let e=kt;e<i.length;e++){const t=i[e],n=t[1].firstChild;null!==n&&vg(t[1],t,n,o)}const s=n.type;if(8&s)vg(e,t,n.child,o);else if(32&s){const e=Ks(n,t);let r;for(;r=e();)o.push(r)}else if(16&s){const e=_a(t,n);if(Array.isArray(e))o.push(...e);else{const n=Js(t[16]);ngDevMode&&Yt(n),vg(n[1],n,e,o,!0)}}n=r?n.projectionNext:n.next}return o}class bg{constructor(e,t){this._lView=e,this._cdRefInjectingView=t,this._appRef=null,this._attachedToViewContainer=!1}get rootNodes(){const e=this._lView,t=e[1];return vg(t,e,t.firstChild,[])}get context(){return this._lView[8]}set context(e){this._lView[8]=e}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._attachedToViewContainer){const e=this._lView[3];if(Pt(e)){const t=e[8],n=t?t.indexOf(this):-1;n>-1&&(ngDevMode&&De(n,e.indexOf(this._lView)-kt,"An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array."),ia(e,n),Ir(t,n))}this._attachedToViewContainer=!1}sa(this._lView[1],this._lView)}onDestroy(e){Jc(this._lView[1],this._lView,null,e)}markForCheck(){vl(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){wl(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(e,t,n){Wn(!0);try{wl(e,t,n)}finally{Wn(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(){if(this._appRef){const e=ngDevMode?"This view is already attached directly to the ApplicationRef!":"";throw new pe(902,e)}this._attachedToViewContainer=!0}detachFromAppRef(){var e;this._appRef=null,xa(this._lView[1],e=this._lView,e[11],2,null,null)}attachToAppRef(e){if(this._attachedToViewContainer){const e=ngDevMode?"This view is already attached to a ViewContainer!":"";throw new pe(902,e)}this._appRef=e}}class wg extends bg{constructor(e){super(e),this._view=e}detectChanges(){_l(this._view)}checkNoChanges(){!function(e){Wn(!0);try{_l(e)}finally{Wn(!1)}}(this._view)}get context(){return null}}class _g extends cg{constructor(e){super(),this.ngModule=e}resolveComponentFactory(e){ngDevMode&&Bt(e);const t=It(e);return new Dg(t,this.ngModule)}}function Cg(e){const t=[];for(let n in e)if(e.hasOwnProperty(n)){const o=e[n];t.push({propName:o,templateName:n})}return t}class Dg extends sg{constructor(e,t){super(),this.componentDef=e,this.ngModule=t,this.componentType=e.type,this.selector=e.selectors.map(Fa).join(","),this.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],this.isBoundToModule=!!t}get inputs(){return Cg(this.componentDef.inputs)}get outputs(){return Cg(this.componentDef.outputs)}create(e,t,n,o){const r=(o=o||this.ngModule)?function(e,t){return{get:(n,o,r)=>{const i=e.get(n,mg,r);return i!==mg||o===mg?i:t.get(n,o,r)}}}(e,o.injector):e,i=r.get(dg,vn),s=r.get(hg,null),a=i.createRenderer(null,this.componentDef),c=this.componentDef.selectors[0][0]||"div",l=n?Kc(a,n,this.componentDef.encapsulation):oa(i.createRenderer(null,this.componentDef),c,function(e){const t=e.toLowerCase();return"svg"===t?fn:"math"===t?dn:null}(c)),u=this.componentDef.onPush?576:528,f=hu(),d=zc(0,null,null,1,0,null,null,null,null,null),p=Pc(null,d,f,u,null,null,i,a,s,r);let h,g;ro(p);try{const e=du(l,this.componentDef,p,i,a);if(l)if(n)Eo(a,l,["ng-version",yg.full]);else{const{attrs:e,classes:t}=function(e){const t=[],n=[];let o=1,r=2;for(;o<e.length;){let i=e[o];if("string"==typeof i)2===r?""!==i&&t.push(i,e[++o]):8===r&&n.push(i);else{if(!Ra(r))break;r=i}o++}return{attrs:t,classes:n}}(this.componentDef.selectors[0]);e&&Eo(a,l,e),t&&t.length>0&&Ta(a,l,t.join(" "))}if(g=Cn(d,Ot),void 0!==t){const e=g.projection=[];for(let n=0;n<this.ngContentSelectors.length;n++){const o=t[n];e.push(null!=o?Array.from(o):null)}}h=pu(e,this.componentDef,p,f,[gu]),$c(d,p,null)}finally{lo()}return new Mg(this.componentType,h,lg(g,p),p,g)}}new _g;class Mg extends ig{constructor(e,t,n,o,r){super(),this.location=n,this._rootLView=o,this._tNode=r,this.instance=t,this.hostView=this.changeDetectorRef=new wg(o),this.componentType=e}get injector(){return new Xo(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(e){this.hostView.onDestroy(e)}}function xg(e,t,n,o){return Ze((()=>{const r=e;null!==t&&(r.hasOwnProperty("decorators")&&void 0!==r.decorators?r.decorators.push(...t):r.decorators=t),null!==n&&(r.ctorParameters=n),null!==o&&(r.hasOwnProperty("propDecorators")&&void 0!==r.propDecorators?r.propDecorators={...r.propDecorators,...o}:r.propDecorators=o)}))}class Ig{}class Eg{}const Tg=new Map;function Sg(e){const t=new Set;!function e(n){const o=St(n,!0),r=o.id;if(null!==r){(function(e,t,n){if(t&&t!==n)throw new Error(`Duplicate module registered for ${e} - ${ae(t)} vs ${ae(t.name)}`)})(r,Tg.get(r),n),Tg.set(r,n)}const i=Us(o.imports);for(const n of i)t.has(n)||(t.add(n),e(n))}(e)}function Og(e){return Tg.get(e)||wt[e]}function Ag(e,t){return new kg(e,t??null)}class kg extends Ig{constructor(e,t){super(),this._parent=t,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new _g(this);const n=St(e);ngDevMode&&Ae(n,`NgModule '${ae(e)}' is not a subtype of 'NgModuleType'.`),this._bootstrapComponents=Us(n.bootstrap),this._r3Injector=Ul(e,t,[{provide:Ig,useValue:this},{provide:cg,useValue:this.componentFactoryResolver}],ae(e)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(e)}get(e,t=Gl.THROW_IF_NOT_FOUND,n=ze.Default){return e===Gl||e===Ig||e===Pl?this:this._r3Injector.get(e,t,n)}destroy(){ngDevMode&&Ae(this.destroyCbs,"NgModule already destroyed");const e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach((e=>e())),this.destroyCbs=null}onDestroy(e){ngDevMode&&Ae(this.destroyCbs,"NgModule already destroyed"),this.destroyCbs.push(e)}}class Ng extends Eg{constructor(e){super(),this.moduleType=e,null!==St(e)&&Sg(e)}create(e){return new kg(this.moduleType,e)}}function Pg(e,t,n){const o=qn()+e,r=Pn();return r[o]===Ha?Au(r,o,n?t.call(n):t()):ku(r,o)}function Rg(e,t,n,o){return qg(Pn(),qn(),e,t,n,o)}function jg(e,t,n,o,r){return zg(Pn(),qn(),e,t,n,o,r)}function Vg(e,t,n,o,r,i){return Kg(Pn(),qn(),e,t,n,o,r,i)}function $g(e,t,n,o,r,i,s){return Jg(Pn(),qn(),e,t,n,o,r,i,s)}function Lg(e,t,n,o,r,i,s,a){const c=qn()+e,l=Pn(),u=ju(l,c,n,o,r,i);return Nu(l,c+4,s)||u?Au(l,c+5,a?t.call(a,n,o,r,i,s):t(n,o,r,i,s)):ku(l,c+5)}function Fg(e,t,n,o,r,i,s,a,c){const l=qn()+e,u=Pn(),f=ju(u,l,n,o,r,i);return Pu(u,l+4,s,a)||f?Au(u,l+6,c?t.call(c,n,o,r,i,s,a):t(n,o,r,i,s,a)):ku(u,l+6)}function Hg(e,t,n,o,r,i,s,a,c,l){const u=qn()+e,f=Pn();let d=ju(f,u,n,o,r,i);return Ru(f,u+4,s,a,c)||d?Au(f,u+7,l?t.call(l,n,o,r,i,s,a,c):t(n,o,r,i,s,a,c)):ku(f,u+7)}function Ug(e,t,n,o,r,i,s,a,c,l,u){const f=qn()+e,d=Pn(),p=ju(d,f,n,o,r,i);return ju(d,f+4,s,a,c,l)||p?Au(d,f+8,u?t.call(u,n,o,r,i,s,a,c,l):t(n,o,r,i,s,a,c,l)):ku(d,f+8)}function Bg(e,t,n,o){return Gg(Pn(),qn(),e,t,n,o)}function Wg(e,t){ngDevMode&&Pe(e,t);const n=e[t];return n===Ha?void 0:n}function qg(e,t,n,o,r,i){const s=t+n;return Nu(e,s,r)?Au(e,s+1,i?o.call(i,r):o(r)):Wg(e,s+1)}function zg(e,t,n,o,r,i,s){const a=t+n;return Pu(e,a,r,i)?Au(e,a+2,s?o.call(s,r,i):o(r,i)):Wg(e,a+2)}function Kg(e,t,n,o,r,i,s,a){const c=t+n;return Ru(e,c,r,i,s)?Au(e,c+3,a?o.call(a,r,i,s):o(r,i,s)):Wg(e,c+3)}function Jg(e,t,n,o,r,i,s,a,c){const l=t+n;return ju(e,l,r,i,s,a)?Au(e,l+4,c?o.call(c,r,i,s,a):o(r,i,s,a)):Wg(e,l+4)}function Gg(e,t,n,o,r,i){let s=t+n,a=!1;for(let t=0;t<r.length;t++)Nu(e,s++,r[t])&&(a=!0);return a?Au(e,s,o.apply(i,r)):Wg(e,s)}function Zg(e,t){const n=Rn();let o;const r=e+Ot;n.firstCreatePass?(o=function(e,t){if(t)for(let n=t.length-1;n>=0;n--){const o=t[n];if(e===o.name)return o}if(ngDevMode){const t=Pn()[16][8],n=t?` in the '${t.constructor.name}' component`:"";throw new pe(-302,`The pipe '${e}' could not be found${n}!`)}}(t,n.pipeRegistry),n.data[r]=o,o.onDestroy&&(n.destroyHooks||(n.destroyHooks=[])).push(r,o.onDestroy)):o=n.data[r];const i=o.factory||(o.factory=en(o.type,!0)),s=Je(kf);try{const e=jo(!1),t=i();return jo(e),of(n,Pn(),r,t),t}finally{Je(s)}}function Qg(e,t,n){const o=e+Ot,r=Pn(),i=Dn(r,o);return ny(r,o)?qg(r,qn(),t,i.transform,n,i):i.transform(n)}function Yg(e,t,n,o){const r=e+Ot,i=Pn(),s=Dn(i,r);return ny(i,r)?zg(i,qn(),t,s.transform,n,o,s):s.transform(n,o)}function Xg(e,t,n,o,r){const i=e+Ot,s=Pn(),a=Dn(s,i);return ny(s,i)?Kg(s,qn(),t,a.transform,n,o,r,a):a.transform(n,o,r)}function ey(e,t,n,o,r,i){const s=e+Ot,a=Pn(),c=Dn(a,s);return ny(a,s)?Jg(a,qn(),t,c.transform,n,o,r,i,c):c.transform(n,o,r,i)}function ty(e,t,n){const o=e+Ot,r=Pn(),i=Dn(r,o);return ny(r,o)?Gg(r,qn(),t,i.transform,n,i):i.transform.apply(i,n)}function ny(e,t){return e[1].data[t].pure}class oy extends o.Subject{constructor(e=!1){super(),this.__isAsync=e}emit(e){super.next(e)}subscribe(e,t,n){let r=e,i=t||(()=>null),s=n;if(e&&"object"==typeof e){const t=e;r=t.next?.bind(t),i=t.error?.bind(t),s=t.complete?.bind(t)}this.__isAsync&&(i=ry(i),r&&(r=ry(r)),s&&(s=ry(s)));const a=super.subscribe({next:r,error:i,complete:s});return e instanceof o.Subscription&&e.add(a),a}}function ry(e){return t=>{setTimeout(e,void 0,t)}}const iy=oy;function sy(){return this._results[Eu()]()}class ay{constructor(e=!1){this._emitDistinctChangesOnly=e,this.dirty=!0,this._results=[],this._changesDetected=!1,this._changes=null,this.length=0,this.first=void 0,this.last=void 0;const t=Eu(),n=ay.prototype;n[t]||(n[t]=sy)}get changes(){return this._changes||(this._changes=new iy)}get(e){return this._results[e]}map(e){return this._results.map(e)}filter(e){return this._results.filter(e)}find(e){return this._results.find(e)}reduce(e,t){return this._results.reduce(e,t)}forEach(e){this._results.forEach(e)}some(e){return this._results.some(e)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(e,t){const n=this;n.dirty=!1;const o=Dr(e);(this._changesDetected=!function(e,t,n){if(e.length!==t.length)return!1;for(let o=0;o<e.length;o++){let r=e[o],i=t[o];if(n&&(r=n(r),i=n(i)),i!==r)return!1}return!0}(n._results,o,t))&&(n._results=o,n.length=o.length,n.last=o[this.length-1],n.first=o[0])}notifyOnChanges(){!this._changes||!this._changesDetected&&this._emitDistinctChangesOnly||this._changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}Symbol.iterator;class cy{}cy.__NG_ELEMENT_ID__=function(){return fy(Vn(),Pn())};const ly=cy,uy=class extends ly{constructor(e,t,n){super(),this._declarationLView=e,this._declarationTContainer=t,this.elementRef=n}createEmbeddedView(e){const t=this._declarationTContainer.tViews,n=Pc(this._declarationLView,t,e,16,null,t.declTNode,null,null,null,null),o=this._declarationLView[this._declarationTContainer.index];ngDevMode&&qt(o),n[17]=o;const r=this._declarationLView[19];return null!==r&&(n[19]=r.createEmbeddedView(t)),$c(t,n,e),new bg(n)}};function fy(e,t){return 4&e.type?(ngDevMode&&Ae(e.tViews,"TView must be allocated"),new uy(t,e,lg(e,t))):null}class dy{}dy.__NG_ELEMENT_ID__=function(){return my(Vn(),Pn())};const py=dy,hy=class extends py{constructor(e,t,n){super(),this._lContainer=e,this._hostTNode=t,this._hostLView=n}get element(){return lg(this._hostTNode,this._hostLView)}get injector(){return new Xo(this._hostTNode,this._hostLView)}get parentInjector(){const e=Ho(this._hostTNode,this._hostLView);if(ko(e)){const t=Po(e,this._hostLView),n=No(e);ngDevMode&&Xt(t,n);const o=t[1].data[n+8];return new Xo(o,t)}return new Xo(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(e){const t=gy(this._lContainer);return null!==t&&t[e]||null}get length(){return this._lContainer.length-kt}createEmbeddedView(e,t,n){const o=e.createEmbeddedView(t||{});return this.insert(o,n),o}createComponent(e,t,n,o,r){const i=e&&!Cr(e);let s;if(i)ngDevMode&&De("object"!=typeof t,!0,"It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)"),s=t;else{ngDevMode&&(Ae(It(e),"Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator."),De("number"!=typeof t,!0,"It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead."));const i=t||{};s=i.index,n=i.injector,o=i.projectableNodes,r=i.ngModuleRef}const a=i?e:new Dg(It(e)),c=n||this.parentInjector;if(!r&&null==a.ngModule){const e=(i?c:this.parentInjector).get(Ig,null);e&&(r=e)}const l=a.create(c,o,void 0,r);return this.insert(l.hostView,s),l}insert(e,t){const n=e._lView,o=n[1];if(ngDevMode&&e.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(Pt(n[3])){const t=this.indexOf(e);if(-1!==t)this.detach(t);else{const t=n[3];ngDevMode&&De(Pt(t),!0,"An attached view should have its PARENT point to a container.");const o=new hy(t,t[6],t[3]);o.detach(o.indexOf(e))}}const r=this._adjustIndex(t),i=this._lContainer;!function(e,t,n,o){ngDevMode&&Kt(t),ngDevMode&&qt(n);const r=kt+o,i=n.length;o>0&&(n[r-1][4]=t),o<i-kt?(t[4]=n[r],xr(n,kt+o,t)):(n.push(t),t[4]=null),t[3]=n;const s=t[17];null!==s&&n!==s&&function(e,t){ngDevMode&&Ae(t,"LView required"),ngDevMode&&qt(e);const n=e[9],o=t[3];ngDevMode&&qt(o);const r=o[3][16];ngDevMode&&Ae(r,"Missing insertedComponentLView");const i=t[16];ngDevMode&&Ae(i,"Missing declaredComponentLView"),i!==r&&(e[2]=!0),null===n?e[9]=[t]:n.push(t)}(s,t);const a=t[19];null!==a&&a.insertView(e),t[2]|=128}(o,n,i,r);const s=Ca(r,i),a=n[11],c=pa(a,i[7]);return null!==c&&function(e,t,n,o,r,i){o[0]=r,o[6]=t,xa(e,o,n,1,r,i)}(o,i[6],a,n,c,s),e.attachToViewContainerRef(),xr(yy(i),r,e),e}move(e,t){if(ngDevMode&&e.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(e,t)}indexOf(e){const t=gy(this._lContainer);return null!==t?t.indexOf(e):-1}remove(e){const t=this._adjustIndex(e,-1),n=ia(this._lContainer,t);n&&(Ir(yy(this._lContainer),t),sa(n[1],n))}detach(e){const t=this._adjustIndex(e,-1),n=ia(this._lContainer,t);return n&&null!=Ir(yy(this._lContainer),t)?new bg(n):null}_adjustIndex(e,t=0){return null==e?this.length+t:(ngDevMode&&(Se(e,-1,`ViewRef index must be positive, got ${e}`),Ee(e,this.length+1+t,"index")),e)}};function gy(e){return e[8]}function yy(e){return e[8]||(e[8]=[])}function my(e,t){let n;ngDevMode&&Io(e,15);const o=t[e.index];if(Pt(o))n=o;else{let r;if(8&e.type)r=bn(o);else{const n=t[11];ngDevMode&&ngDevMode.rendererCreateComment++,r=n.createComment(ngDevMode?"container":"");const o=_n(e,t);ua(n,pa(n,o),r,function(e,t){return mn(e)?e.nextSibling(t):t.nextSibling}(n,o),!1)}t[e.index]=n=pl(o,t,r,e),ml(t,n)}return new hy(n,e,t)}class vy{constructor(e){this.queryList=e,this.matches=null}clone(){return new vy(this.queryList)}setDirty(){this.queryList.setDirty()}}class by{constructor(e=[]){this.queries=e}createEmbeddedView(e){const t=e.queries;if(null!==t){const n=null!==e.contentQueries?e.contentQueries[0]:t.length,o=[];for(let e=0;e<n;e++){const n=t.getByIndex(e),r=this.queries[n.indexInDeclarationView];o.push(r.clone())}return new by(o)}return null}insertView(e){this.dirtyQueriesWithMatches(e)}detachView(e){this.dirtyQueriesWithMatches(e)}dirtyQueriesWithMatches(e){for(let t=0;t<this.queries.length;t++)null!==Ny(e,t).matches&&this.queries[t].setDirty()}}class wy{constructor(e,t,n=null){this.predicate=e,this.flags=t,this.read=n}}class _y{constructor(e=[]){this.queries=e}elementStart(e,t){ngDevMode&&Jt(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].elementStart(e,t)}elementEnd(e){for(let t=0;t<this.queries.length;t++)this.queries[t].elementEnd(e)}embeddedTView(e){let t=null;for(let n=0;n<this.length;n++){const o=null!==t?t.length:0,r=this.getByIndex(n).embeddedTView(e,o);r&&(r.indexInDeclarationView=n,null!==t?t.push(r):t=[r])}return null!==t?new _y(t):null}template(e,t){ngDevMode&&Jt(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].template(e,t)}getByIndex(e){return ngDevMode&&Pe(this.queries,e),this.queries[e]}get length(){return this.queries.length}track(e){this.queries.push(e)}}class Cy{constructor(e,t=-1){this.metadata=e,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=t}elementStart(e,t){this.isApplyingToNode(t)&&this.matchTNode(e,t)}elementEnd(e){this._declarationNodeIndex===e.index&&(this._appliesToNextNode=!1)}template(e,t){this.elementStart(e,t)}embeddedTView(e,t){return this.isApplyingToNode(e)?(this.crossesNgTemplate=!0,this.addMatch(-e.index,t),new Cy(this.metadata)):null}isApplyingToNode(e){if(this._appliesToNextNode&&1!=(1&this.metadata.flags)){const t=this._declarationNodeIndex;let n=e.parent;for(;null!==n&&8&n.type&&n.index!==t;)n=n.parent;return t===(null!==n?n.index:-1)}return this._appliesToNextNode}matchTNode(e,t){const n=this.metadata.predicate;if(Array.isArray(n))for(let o=0;o<n.length;o++){const r=n[o];this.matchTNodeWithReadOption(e,t,Dy(t,r)),this.matchTNodeWithReadOption(e,t,Go(t,e,r,!1,!1))}else n===cy?4&t.type&&this.matchTNodeWithReadOption(e,t,-1):this.matchTNodeWithReadOption(e,t,Go(t,e,n,!1,!1))}matchTNodeWithReadOption(e,t,n){if(null!==n){const o=this.metadata.read;if(null!==o)if(o===ug||o===dy||o===cy&&4&t.type)this.addMatch(t.index,-2);else{const n=Go(t,e,o,!1,!1);null!==n&&this.addMatch(t.index,n)}else this.addMatch(t.index,n)}}addMatch(e,t){null===this.matches?this.matches=[e,t]:this.matches.push(e,t)}}function Dy(e,t){const n=e.localNames;if(null!==n)for(let e=0;e<n.length;e+=2)if(n[e]===t)return n[e+1];return null}function My(e,t,n,o){return-1===n?function(e,t){return 11&e.type?lg(e,t):4&e.type?fy(e,t):null}(t,e):-2===n?function(e,t,n){return n===ug?lg(t,e):n===cy?fy(t,e):n===dy?(ngDevMode&&Io(t,15),my(t,e)):void(ngDevMode&&ke(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${ae(n)}.`))}(e,t,o):Zo(e,e[1],n,t)}function xy(e,t,n,o){const r=t[19].queries[o];if(null===r.matches){const o=e.data,i=n.matches,s=[];for(let e=0;e<i.length;e+=2){const r=i[e];if(r<0)s.push(null);else{ngDevMode&&Pe(o,r);const a=o[r];s.push(My(t,a,i[e+1],n.metadata.read))}}r.matches=s}return r.matches}function Iy(e,t,n,o){const r=e.queries.getByIndex(n),i=r.matches;if(null!==i){const s=xy(e,t,r,n);for(let e=0;e<i.length;e+=2){const n=i[e];if(n>0)o.push(s[e/2]);else{const r=i[e+1],s=t[-n];ngDevMode&&qt(s);for(let e=kt;e<s.length;e++){const t=s[e];t[17]===t[3]&&Iy(t[1],t,r,o)}if(null!==s[9]){const e=s[9];for(let t=0;t<e.length;t++){const n=e[t];Iy(n[1],n,r,o)}}}}}return o}function Ey(e){const t=Pn(),n=Rn(),o=eo();to(o+1);const r=Ny(n,o);if(e.dirty&&xn(t)===(2==(2&r.metadata.flags))){if(null===r.matches)e.reset([]);else{const i=r.crossesNgTemplate?Iy(n,t,o,[]):xy(n,t,r,o);e.reset(i,fg),e.notifyOnChanges()}return!0}return!1}function Ty(e,t,n){ngDevMode&&we(t,"Expecting flags");const o=Rn();o.firstCreatePass&&(ky(o,new wy(e,t,n),-1),2==(2&t)&&(o.staticViewQueries=!0)),Ay(o,Pn(),t)}function Sy(e,t,n,o){ngDevMode&&we(n,"Expecting flags");const r=Rn();if(r.firstCreatePass){const i=Vn();ky(r,new wy(t,n,o),i.index),function(e,t){const n=e.contentQueries||(e.contentQueries=[]);t!==(n.length?n[n.length-1]:-1)&&n.push(e.queries.length-1,t)}(r,e),2==(2&n)&&(r.staticContentQueries=!0)}Ay(r,Pn(),n)}function Oy(){return e=Pn(),t=eo(),ngDevMode&&Ae(e[19],"LQueries should be defined when trying to load a query"),ngDevMode&&Pe(e[19].queries,t),e[19].queries[t].queryList;var e,t}function Ay(e,t,n){const o=new ay(4==(4&n));Jc(e,t,o,o.destroy),null===t[19]&&(t[19]=new by),t[19].queries.push(new vy(o))}function ky(e,t,n){null===e.queries&&(e.queries=new _y),e.queries.track(new Cy(t,n))}function Ny(e,t){return ngDevMode&&Ae(e.queries,"TQueries must be defined to retrieve a TQuery"),e.queries.getByIndex(t)}function Py(e,t){return fy(e,t)}const Ry={ɵɵattribute:Vu,ɵɵattributeInterpolate1:Ku,ɵɵattributeInterpolate2:Ju,ɵɵattributeInterpolate3:Gu,ɵɵattributeInterpolate4:Zu,ɵɵattributeInterpolate5:Qu,ɵɵattributeInterpolate6:Yu,ɵɵattributeInterpolate7:Xu,ɵɵattributeInterpolate8:ef,ɵɵattributeInterpolateV:tf,ɵɵdefineComponent:yt,ɵɵdefineDirective:Mt,ɵɵdefineInjectable:je,ɵɵdefineInjector:$e,ɵɵdefineNgModule:_t,ɵɵdefinePipe:xt,ɵɵdirectiveInject:kf,ɵɵgetInheritedFactory:er,ɵɵinject:qr,ɵɵinjectAttribute:nr,ɵɵinvalidFactory:Nf,ɵɵinvalidFactoryDep:zr,ɵɵtemplateRefExtractor:Py,ɵɵNgOnChangesFeature:nn,ɵɵProvidersFeature:rg,ɵɵCopyDefinitionFeature:xu,ɵɵInheritDefinitionFeature:vu,ɵɵnextContext:Qf,ɵɵnamespaceHTML:yo,ɵɵnamespaceMathML:go,ɵɵnamespaceSVG:ho,ɵɵenableBindings:kn,ɵɵdisableBindings:Nn,ɵɵelementStart:jf,ɵɵelementEnd:Vf,ɵɵelement:$f,ɵɵelementContainerStart:Lf,ɵɵelementContainerEnd:Ff,ɵɵelementContainer:Hf,ɵɵpureFunction0:Pg,ɵɵpureFunction1:Rg,ɵɵpureFunction2:jg,ɵɵpureFunction3:Vg,ɵɵpureFunction4:$g,ɵɵpureFunction5:Lg,ɵɵpureFunction6:Fg,ɵɵpureFunction7:Hg,ɵɵpureFunction8:Ug,ɵɵpureFunctionV:Bg,ɵɵgetCurrentView:Uf,ɵɵrestoreView:jn,ɵɵlistener:zf,ɵɵprojection:ed,ɵɵsyntheticHostProperty:xp,ɵɵsyntheticHostListener:Kf,ɵɵpipeBind1:Qg,ɵɵpipeBind2:Yg,ɵɵpipeBind3:Xg,ɵɵpipeBind4:ey,ɵɵpipeBindV:ty,ɵɵprojectionDef:Xf,ɵɵhostProperty:Mp,ɵɵproperty:Pf,ɵɵpropertyInterpolate:td,ɵɵpropertyInterpolate1:nd,ɵɵpropertyInterpolate2:od,ɵɵpropertyInterpolate3:rd,ɵɵpropertyInterpolate4:id,ɵɵpropertyInterpolate5:sd,ɵɵpropertyInterpolate6:ad,ɵɵpropertyInterpolate7:cd,ɵɵpropertyInterpolate8:ld,ɵɵpropertyInterpolateV:ud,ɵɵpipe:Zg,ɵɵqueryRefresh:Ey,ɵɵviewQuery:Ty,ɵɵloadQuery:Oy,ɵɵcontentQuery:Sy,ɵɵreference:rf,ɵɵclassMap:Ed,ɵɵclassMapInterpolate1:Qd,ɵɵclassMapInterpolate2:Yd,ɵɵclassMapInterpolate3:Xd,ɵɵclassMapInterpolate4:ep,ɵɵclassMapInterpolate5:tp,ɵɵclassMapInterpolate6:np,ɵɵclassMapInterpolate7:op,ɵɵclassMapInterpolate8:rp,ɵɵclassMapInterpolateV:ip,ɵɵstyleMap:xd,ɵɵstyleMapInterpolate1:sp,ɵɵstyleMapInterpolate2:ap,ɵɵstyleMapInterpolate3:cp,ɵɵstyleMapInterpolate4:lp,ɵɵstyleMapInterpolate5:up,ɵɵstyleMapInterpolate6:fp,ɵɵstyleMapInterpolate7:dp,ɵɵstyleMapInterpolate8:pp,ɵɵstyleMapInterpolateV:hp,ɵɵstyleProp:Dd,ɵɵstylePropInterpolate1:gp,ɵɵstylePropInterpolate2:yp,ɵɵstylePropInterpolate3:mp,ɵɵstylePropInterpolate4:vp,ɵɵstylePropInterpolate5:bp,ɵɵstylePropInterpolate6:wp,ɵɵstylePropInterpolate7:_p,ɵɵstylePropInterpolate8:Cp,ɵɵstylePropInterpolateV:Dp,ɵɵclassProp:Md,ɵɵadvance:Ua,ɵɵtemplate:nf,ɵɵtext:Fd,ɵɵtextInterpolate:Hd,ɵɵtextInterpolate1:Ud,ɵɵtextInterpolate2:Bd,ɵɵtextInterpolate3:Wd,ɵɵtextInterpolate4:qd,ɵɵtextInterpolate5:zd,ɵɵtextInterpolate6:Kd,ɵɵtextInterpolate7:Jd,ɵɵtextInterpolate8:Gd,ɵɵtextInterpolateV:Zd,ɵɵi18n:zh,ɵɵi18nAttributes:Kh,ɵɵi18nExp:Jh,ɵɵi18nStart:Wh,ɵɵi18nEnd:qh,ɵɵi18nApply:Gh,ɵɵi18nPostprocess:Zh,ɵɵresolveWindow:$s,ɵɵresolveDocument:Ls,ɵɵresolveBody:Fs,ɵɵsetComponentScope:mt,ɵɵsetNgModuleScope:Ct,ɵɵsanitizeHtml:ls,ɵɵsanitizeStyle:us,ɵɵsanitizeResourceUrl:ds,ɵɵsanitizeScript:ps,ɵɵsanitizeUrl:fs,ɵɵsanitizeUrlOrResourceUrl:ys,ɵɵtrustConstantHtml:hs,ɵɵtrustConstantResourceUrl:gs,forwardRef:ue,resolveForwardRef:fe};let jy=null;function Vy(){jy=null}const $y=[];let Ly=!1;function Fy(){if(!Ly){Ly=!0;try{for(let e=$y.length-1;e>=0;e--){const{moduleType:t,ngModule:n}=$y[e];n.declarations&&n.declarations.every(Hy)&&($y.splice(e,1),Qy(t,n))}}finally{Ly=!1}}}function Hy(e){return Array.isArray(e)?e.every(Hy):!!fe(e)}function Uy(e,t={}){By(e,t),function(e,t){$y.push({moduleType:e,ngModule:t})}(e,t)}function By(e,t,n=!1){ngDevMode&&Ae(e,"Required value moduleType"),ngDevMode&&Ae(t,"Required value ngModule");const o=Dr(t.declarations||ct);let r=null;Object.defineProperty(e,dt,{configurable:!0,get:()=>{if(null===r){if(ngDevMode&&t.imports&&t.imports.indexOf(e)>-1)throw new Error(`'${ye(e)}' module can't import itself`);const n=wr({usage:0,kind:"NgModule",type:e});r=n.compileNgModule(Ry,`ng:///${e.name}/ɵmod.js`,{type:e,bootstrap:Dr(t.bootstrap||ct).map(fe),declarations:o.map(fe),imports:Dr(t.imports||ct).map(fe).map(em),exports:Dr(t.exports||ct).map(fe).map(em),schemas:t.schemas?Dr(t.schemas):null,id:t.id||null}),r.schemas||(r.schemas=[])}return r}});let i=null;Object.defineProperty(e,pt,{get:()=>{if(null===i){const t=wr({usage:0,kind:"NgModule",type:e});i=t.compileFactory(Ry,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,deps:oi(e),target:t.FactoryTarget.NgModule,typeArgumentCount:0})}return i},configurable:!!ngDevMode});let s=null;Object.defineProperty(e,Be,{get:()=>{if(null===s){ngDevMode&&Wy(e,n);const o={name:e.name,type:e,providers:t.providers||ct,imports:[(t.imports||ct).map(fe),(t.exports||ct).map(fe)]},r=wr({usage:0,kind:"NgModule",type:e});s=r.compileInjector(Ry,`ng:///${e.name}/ɵinj.js`,o)}return s},configurable:!!ngDevMode})}function Wy(e,t,n){if(Jy.get(e))return;let o;if(Jy.set(e,!0),e=fe(e),n){if(o=St(e),!o)throw new Error(`Unexpected value '${e.name}' imported by the module '${n.name}'. Please add an @NgModule annotation.`)}else o=St(e,!0);const r=[],i=Us(o.declarations),s=Us(o.imports);Dr(s).map(qy).forEach((t=>{f(t,e),Wy(t,!1,e)}));const a=Us(o.exports);i.forEach((function(t){It(t=fe(t))||Et(t)||Tt(t)||r.push(`Unexpected value '${ye(t)}' declared by the module '${ye(e)}'. Please add a @Pipe/@Directive/@Component annotation.`)})),i.forEach((function(e){const t=Et(e=fe(e));!It(e)&&t&&0==t.selectors.length&&r.push(`Directive ${ye(e)} has no selector, please add it!`)}));const c=[...i.map(fe),...Dr(s.map(Zy)).map(fe)];a.forEach((function(t){const n=(It(t=fe(t))?"component":Et(t)&&"directive")||Tt(t)&&"pipe";n&&-1===c.lastIndexOf(t)&&r.push(`Can't export ${n} ${ye(t)} from ${ye(e)} as it was neither declared nor imported!`)})),i.forEach((n=>function(t,n){t=fe(t);const o=Ky.get(t);if(o&&o!==e){if(!n){const n=[o,e].map(ye).sort();r.push(`Type ${ye(t)} is part of the declarations of 2 modules: ${n[0]} and ${n[1]}! Please consider moving ${ye(t)} to a higher module that imports ${n[0]} and ${n[1]}. You can also create a new NgModule that exports and includes ${ye(t)} then import that NgModule in ${n[0]} and ${n[1]}.`)}}else Ky.set(t,e)}(n,t))),i.forEach((function(e){if(It(e=fe(e))){const t=zy(e,"Component");t&&t.entryComponents&&Mr(t.entryComponents,u)}}));const l=zy(e,"NgModule");if(l&&(l.imports&&Dr(l.imports).map(qy).forEach((t=>{f(t,e),Wy(t,!1,e)})),l.bootstrap&&Mr(l.bootstrap,(function(e){It(e=fe(e))||r.push(`${ye(e)} cannot be used as an entry component.`)})),l.bootstrap&&Mr(l.bootstrap,u),l.entryComponents&&Mr(l.entryComponents,u)),r.length)throw new Error(r.join("\n"));function u(e){e=fe(e),Ky.get(e)||r.push(`Component ${ye(e)} is not part of any NgModule or the module has not been imported into your module.`)}function f(e,t){if(It(e=fe(e))||Et(e))throw new Error(`Unexpected directive '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`);if(Tt(e))throw new Error(`Unexpected pipe '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`)}}function qy(e){return(e=fe(e)).ngModule||e}function zy(e,t){let n=null;return o(e.__annotations__),o(e.decorators),n;function o(e){e&&e.forEach(r)}function r(e){n||(Object.getPrototypeOf(e).ngMetadataName==t?n=e:e.type&&Object.getPrototypeOf(e.type).ngMetadataName==t&&(n=e.args[0]))}}let Ky=new WeakMap,Jy=new WeakMap;function Gy(){Ky=new WeakMap,Jy=new WeakMap,$y.length=0}function Zy(e){return[...Dr(Us(St(e=fe(e),!0).exports).map((e=>St(e)?(Wy(e,!1),Zy(e)):e)))]}function Qy(e,t){const n=Dr(t.declarations||ct),o=Xy(e);n.forEach((t=>{t.hasOwnProperty(lt)?Yy(It(t),o):t.hasOwnProperty(ut)||t.hasOwnProperty(ft)||(t.ngSelectorScope=e)}))}function Yy(e,t){e.directiveDefs=()=>Array.from(t.compilation.directives).map((e=>e.hasOwnProperty(lt)?It(e):Et(e))).filter((e=>!!e)),e.pipeDefs=()=>Array.from(t.compilation.pipes).map((e=>Tt(e))),e.schemas=t.schemas,e.tView=null}function Xy(e){if(!tm(e))throw new Error(`${e.name} does not have a module def (ɵmod property)`);const t=St(e);if(null!==t.transitiveCompileScopes)return t.transitiveCompileScopes;const n={schemas:t.schemas||null,compilation:{directives:new Set,pipes:new Set},exported:{directives:new Set,pipes:new Set}};return Us(t.imports).forEach((e=>{const t=e;if(!tm(t))throw new Error(`Importing ${t.name} which does not have a ɵmod property`);const o=Xy(t);o.exported.directives.forEach((e=>n.compilation.directives.add(e))),o.exported.pipes.forEach((e=>n.compilation.pipes.add(e)))})),Us(t.declarations).forEach((e=>{Tt(e)?n.compilation.pipes.add(e):n.compilation.directives.add(e)})),Us(t.exports).forEach((e=>{const t=e;if(tm(t)){const e=Xy(t);e.exported.directives.forEach((e=>{n.compilation.directives.add(e),n.exported.directives.add(e)})),e.exported.pipes.forEach((e=>{n.compilation.pipes.add(e),n.exported.pipes.add(e)}))}else Tt(t)?n.exported.pipes.add(t):n.exported.directives.add(t)})),t.transitiveCompileScopes=n,n}function em(e){return function(e){return void 0!==e.ngModule}(e)?e.ngModule:e}function tm(e){return!!St(e)}let nm=0;function om(e,t){("undefined"==typeof ngDevMode||ngDevMode)&&st();let n=null;!function(e,t){ci(t)&&(si.set(e,t),ai.add(e))}(e,t),sm(e,t),Object.defineProperty(e,lt,{get:()=>{if(null===n){const o=wr({usage:0,kind:"component",type:e});if(ci(t)){const n=[`Component '${e.name}' is not resolved:`];throw t.templateUrl&&n.push(` - templateUrl: ${t.templateUrl}`),t.styleUrls&&t.styleUrls.length&&n.push(` - styleUrls: ${JSON.stringify(t.styleUrls)}`),n.push("Did you run and wait for 'resolveComponentResources()'?"),new Error(n.join("\n"))}const r=jy;let i=t.preserveWhitespaces;void 0===i&&(i=null!==r&&void 0!==r.preserveWhitespaces&&r.preserveWhitespaces);let s=t.encapsulation;void 0===s&&(s=null!==r&&void 0!==r.defaultEncapsulation?r.defaultEncapsulation:Xe.Emulated);const a=t.templateUrl||`ng:///${e.name}/template.html`,c={...cm(e,t),typeSourceSpan:o.createParseSourceSpan("Component",e.name,a),template:t.template||"",preserveWhitespaces:i,styles:t.styles||ct,animations:t.animations,directives:[],changeDetection:t.changeDetection,pipes:new Map,encapsulation:s,interpolation:t.interpolation,viewProviders:t.viewProviders||null};nm++;try{c.usesInheritance&&lm(e),n=o.compileComponent(Ry,a,c)}finally{nm--}if(0===nm&&Fy(),void 0!==e.ngSelectorScope){const t=Xy(e.ngSelectorScope);Yy(n,t)}}return n},configurable:!!ngDevMode})}function rm(e,t){let n=null;sm(e,t||{}),Object.defineProperty(e,ut,{get:()=>{if(null===n){const o=im(e,t||{}),r=wr({usage:0,kind:"directive",type:e});n=r.compileDirective(Ry,o.sourceMapUrl,o.metadata)}return n},configurable:!!ngDevMode})}function im(e,t){const n=e&&e.name,o=`ng:///${n}/ɵdir.js`,r=wr({usage:0,kind:"directive",type:e}),i=cm(e,t);return i.typeSourceSpan=r.createParseSourceSpan("Directive",n,o),i.usesInheritance&&lm(e),{metadata:i,sourceMapUrl:o}}function sm(e,t){let n=null;Object.defineProperty(e,pt,{get:()=>{if(null===n){const o=im(e,t),r=wr({usage:0,kind:"directive",type:e});n=r.compileFactory(Ry,`ng:///${e.name}/ɵfac.js`,{name:o.metadata.name,type:o.metadata.type,typeArgumentCount:0,deps:oi(e),target:r.FactoryTarget.Directive})}return n},configurable:!!ngDevMode})}function am(e){return Object.getPrototypeOf(e.prototype)===Object.prototype}function cm(e,t){const n=ni(),o=n.ownPropMetadata(e);return{name:e.name,type:e,selector:void 0!==t.selector?t.selector:null,host:t.host||at,propMetadata:o,inputs:t.inputs||ct,outputs:t.outputs||ct,queries:fm(e,o,dm),lifecycle:{usesOnChanges:n.hasLifecycleHook(e,"ngOnChanges")},typeSourceSpan:null,usesInheritance:!am(e),exportAs:(r=t.exportAs,void 0===r?null:gm(r)),providers:t.providers||null,viewQueries:fm(e,o,pm)};var r}function lm(e){const t=Object.prototype;let n=Object.getPrototypeOf(e.prototype).constructor;for(;n&&n!==t;)Et(n)||It(n)||!mm(n)||rm(n,null),n=Object.getPrototypeOf(n)}function um(e,t){return{propertyName:e,predicate:(n=t.selector,"string"==typeof n?gm(n):fe(n)),descendants:t.descendants,first:t.first,read:t.read?t.read:null,static:!!t.static,emitDistinctChangesOnly:!!t.emitDistinctChangesOnly};var n}function fm(e,t,n){const o=[];for(const r in t)if(t.hasOwnProperty(r)){const i=t[r];i.forEach((t=>{if(n(t)){if(!t.selector)throw new Error(`Can't construct a query for the property "${r}" of "${ye(e)}" since the query selector wasn't defined.`);if(i.some(hm))throw new Error("Cannot combine @Input decorators with query decorators");o.push(um(r,t))}}))}return o}function dm(e){const t=e.ngMetadataName;return"ContentChild"===t||"ContentChildren"===t}function pm(e){const t=e.ngMetadataName;return"ViewChild"===t||"ViewChildren"===t}function hm(e){return"Input"===e.ngMetadataName}function gm(e){return e.split(",").map((e=>e.trim()))}const ym=["ngOnChanges","ngOnInit","ngOnDestroy","ngDoCheck","ngAfterViewInit","ngAfterViewChecked","ngAfterContentInit","ngAfterContentChecked"];function mm(e){const t=ni();if(ym.some((n=>t.hasLifecycleHook(e,n))))return!0;const n=t.propMetadata(e);for(const e in n){const t=n[e];for(let e=0;e<t.length;e++){const n=t[e],o=n.ngMetadataName;if(hm(n)||dm(n)||pm(n)||"Output"===o||"HostBinding"===o||"HostListener"===o)return!0}}return!1}function vm(e,t){let n=null,o=null;Object.defineProperty(e,pt,{get:()=>{if(null===o){const n=bm(e,t),r=wr({usage:0,kind:"pipe",type:n.type});o=r.compileFactory(Ry,`ng:///${n.name}/ɵfac.js`,{name:n.name,type:n.type,typeArgumentCount:0,deps:oi(e),target:r.FactoryTarget.Pipe})}return o},configurable:!!ngDevMode}),Object.defineProperty(e,ft,{get:()=>{if(null===n){const o=bm(e,t),r=wr({usage:0,kind:"pipe",type:o.type});n=r.compilePipe(Ry,`ng:///${o.name}/ɵpipe.js`,o)}return n},configurable:!!ngDevMode})}function bm(e,t){return{type:e,name:e.name,pipeName:t.name,pure:void 0===t.pure||t.pure}}const wm=sr("Directive",((e={})=>e),void 0,void 0,((e,t)=>rm(e,t))),_m=sr("Component",((e={})=>({changeDetection:Qe.Default,...e})),wm,void 0,((e,t)=>om(e,t))),Cm=sr("Pipe",(e=>({pure:!0,...e})),void 0,void 0,((e,t)=>vm(e,t))),Dm=lr("Input",(e=>({bindingPropertyName:e}))),Mm=lr("Output",(e=>({bindingPropertyName:e}))),xm=lr("HostBinding",(e=>({hostPropertyName:e}))),Im=lr("HostListener",((e,t)=>({eventName:e,args:t}))),Em=sr("NgModule",(e=>e),void 0,void 0,((e,t)=>Uy(e,t)));function Tm(...e){}const Sm=new fr("Application Initializer");class Om{constructor(e){this.appInits=e,this.resolve=Tm,this.reject=Tm,this.initialized=!1,this.done=!1,this.donePromise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}runInitializers(){if(this.initialized)return;const e=[],t=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let t=0;t<this.appInits.length;t++){const n=this.appInits[t]();if(Bf(n))e.push(n);else if(qf(n)){const t=new Promise(((e,t)=>{n.subscribe({complete:e,error:t})}));e.push(t)}}Promise.all(e).then((()=>{t()})).catch((e=>{this.reject(e)})),0===e.length&&t(),this.initialized=!0}}Om.ɵfac=function(e){return new(e||Om)(qr(Sm,8))},Om.ɵprov=je({token:Om,factory:Om.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(Om,[{type:uf,args:[{providedIn:"root"}]}],(function(){return[{type:void 0,decorators:[{type:Zr,args:[Sm]},{type:Qr}]}]}),null);const Am=new fr("AppId",{providedIn:"root",factory:km});function km(){return`${Pm()}${Pm()}${Pm()}`}const Nm={provide:Am,useFactory:km,deps:[]};function Pm(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const Rm=new fr("Platform Initializer"),jm=new fr("Platform ID"),Vm=new fr("appBootstrapListener"),$m=new fr("Application Packages Root URL");class Lm{log(e){console.log(e)}warn(e){console.warn(e)}}Lm.ɵfac=function(e){return new(e||Lm)},Lm.ɵprov=je({token:Lm,factory:Lm.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(Lm,[{type:uf}],null,null);const Fm=new fr("LocaleId",{providedIn:"root",factory:()=>Kr(Fm,ze.Optional|ze.SkipSelf)||("undefined"!=typeof ngI18nClosureMode&&ngI18nClosureMode&&"undefined"!=typeof goog&&"en"!==goog.getLocale()?goog.getLocale():"undefined"!=typeof $localize&&$localize.locale||Vp)}),Hm=new fr("DefaultCurrencyCode",{providedIn:"root",factory:()=>"USD"}),Um=new fr("Translations"),Bm=new fr("TranslationsFormat");var Wm;!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Ignore=2]="Ignore"}(Wm||(Wm={}));class qm{constructor(e,t){this.ngModuleFactory=e,this.componentFactories=t}}class zm{compileModuleSync(e){return new Ng(e)}compileModuleAsync(e){return Promise.resolve(this.compileModuleSync(e))}compileModuleAndAllComponentsSync(e){const t=this.compileModuleSync(e),n=Us(St(e).declarations).reduce(((e,t)=>{const n=It(t);return n&&e.push(new Dg(n)),e}),[]);return new qm(t,n)}compileModuleAndAllComponentsAsync(e){return Promise.resolve(this.compileModuleAndAllComponentsSync(e))}clearCache(){}clearCacheFor(e){}getModuleId(e){}}zm.ɵfac=function(e){return new(e||zm)},zm.ɵprov=je({token:zm,factory:zm.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(zm,[{type:uf,args:[{providedIn:"root"}]}],null,null);const Km=new fr("compilerOptions");class Jm{}const Gm=Promise.resolve(0);function Zm(e){"undefined"==typeof Zone?Gm.then((()=>{e&&e.apply(null,null)})):Zone.current.scheduleMicroTask("scheduleMicrotask",e)}class Qm{constructor({enableLongStackTrace:e=!1,shouldCoalesceEventChangeDetection:t=!1,shouldCoalesceRunChangeDetection:n=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new iy(!1),this.onMicrotaskEmpty=new iy(!1),this.onStable=new iy(!1),this.onError=new iy(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched();const o=this;o._nesting=0,o._outer=o._inner=Zone.current,Zone.TaskTrackingZoneSpec&&(o._inner=o._inner.fork(new Zone.TaskTrackingZoneSpec)),e&&Zone.longStackTraceZoneSpec&&(o._inner=o._inner.fork(Zone.longStackTraceZoneSpec)),o.shouldCoalesceEventChangeDetection=!n&&t,o.shouldCoalesceRunChangeDetection=n,o.lastRequestAnimationFrameId=-1,o.nativeRequestAnimationFrame=function(){let e=it.requestAnimationFrame,t=it.cancelAnimationFrame;if("undefined"!=typeof Zone&&e&&t){const n=e[Zone.__symbol__("OriginalDelegate")];n&&(e=n);const o=t[Zone.__symbol__("OriginalDelegate")];o&&(t=o)}return{nativeRequestAnimationFrame:e,nativeCancelAnimationFrame:t}}().nativeRequestAnimationFrame,function(e){const t=()=>{!function(e){e.isCheckStableRunning||-1!==e.lastRequestAnimationFrameId||(e.lastRequestAnimationFrameId=e.nativeRequestAnimationFrame.call(it,(()=>{e.fakeTopEventTask||(e.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",(()=>{e.lastRequestAnimationFrameId=-1,ev(e),e.isCheckStableRunning=!0,Xm(e),e.isCheckStableRunning=!1}),void 0,(()=>{}),(()=>{}))),e.fakeTopEventTask.invoke()})),ev(e))}(e)};e._inner=e._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:(n,o,r,i,s,a)=>{try{return tv(e),n.invokeTask(r,i,s,a)}finally{(e.shouldCoalesceEventChangeDetection&&"eventTask"===i.type||e.shouldCoalesceRunChangeDetection)&&t(),nv(e)}},onInvoke:(n,o,r,i,s,a,c)=>{try{return tv(e),n.invoke(r,i,s,a,c)}finally{e.shouldCoalesceRunChangeDetection&&t(),nv(e)}},onHasTask:(t,n,o,r)=>{t.hasTask(o,r),n===o&&("microTask"==r.change?(e._hasPendingMicrotasks=r.microTask,ev(e),Xm(e)):"macroTask"==r.change&&(e.hasPendingMacrotasks=r.macroTask))},onHandleError:(t,n,o,r)=>(t.handleError(o,r),e.runOutsideAngular((()=>e.onError.emit(r))),!1)})}(o)}static isInAngularZone(){return"undefined"!=typeof Zone&&!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!Qm.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(Qm.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(e,t,n){return this._inner.run(e,t,n)}runTask(e,t,n,o){const r=this._inner,i=r.scheduleEventTask("NgZoneEvent: "+o,e,Ym,Tm,Tm);try{return r.runTask(i,t,n)}finally{r.cancelTask(i)}}runGuarded(e,t,n){return this._inner.runGuarded(e,t,n)}runOutsideAngular(e){return this._outer.run(e)}}const Ym={};function Xm(e){if(0==e._nesting&&!e.hasPendingMicrotasks&&!e.isStable)try{e._nesting++,e.onMicrotaskEmpty.emit(null)}finally{if(e._nesting--,!e.hasPendingMicrotasks)try{e.runOutsideAngular((()=>e.onStable.emit(null)))}finally{e.isStable=!0}}}function ev(e){e._hasPendingMicrotasks||(e.shouldCoalesceEventChangeDetection||e.shouldCoalesceRunChangeDetection)&&-1!==e.lastRequestAnimationFrameId?e.hasPendingMicrotasks=!0:e.hasPendingMicrotasks=!1}function tv(e){e._nesting++,e.isStable&&(e.isStable=!1,e.onUnstable.emit(null))}function nv(e){e._nesting--,Xm(e)}class ov{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new iy,this.onMicrotaskEmpty=new iy,this.onStable=new iy,this.onError=new iy}run(e,t,n){return e.apply(t,n)}runGuarded(e,t,n){return e.apply(t,n)}runOutsideAngular(e){return e()}runTask(e,t,n,o){return e.apply(t,n)}}class rv{constructor(e){this._ngZone=e,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),e.run((()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")}))}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular((()=>{this._ngZone.onStable.subscribe({next:()=>{Qm.assertNotInAngularZone(),Zm((()=>{this._isZoneStable=!0,this._runCallbacksIfReady()}))}})}))}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())Zm((()=>{for(;0!==this._callbacks.length;){let e=this._callbacks.pop();clearTimeout(e.timeoutId),e.doneCb(this._didWork)}this._didWork=!1}));else{let e=this.getPendingTasks();this._callbacks=this._callbacks.filter((t=>!t.updateCb||!t.updateCb(e)||(clearTimeout(t.timeoutId),!1))),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map((e=>({source:e.source,creationLocation:e.creationLocation,data:e.data}))):[]}addCallback(e,t,n){let o=-1;t&&t>0&&(o=setTimeout((()=>{this._callbacks=this._callbacks.filter((e=>e.timeoutId!==o)),e(this._didWork,this.getPendingTasks())}),t)),this._callbacks.push({doneCb:e,timeoutId:o,updateCb:n})}whenStable(e,t,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');this.addCallback(e,t,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(e,t,n){return[]}}rv.ɵfac=function(e){return new(e||rv)(qr(Qm))},rv.ɵprov=je({token:rv,factory:rv.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(rv,[{type:uf}],(function(){return[{type:Qm}]}),null);class iv{constructor(){this._applications=new Map,cv.addToWindow(this)}registerApplication(e,t){this._applications.set(e,t)}unregisterApplication(e){this._applications.delete(e)}unregisterAllApplications(){this._applications.clear()}getTestability(e){return this._applications.get(e)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(e,t=!0){return cv.findTestabilityInTree(this,e,t)}}function sv(e){cv=e}iv.ɵfac=function(e){return new(e||iv)},iv.ɵprov=je({token:iv,factory:iv.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(iv,[{type:uf}],(function(){return[]}),null);let av,cv=new class{addToWindow(e){}findTestabilityInTree(e,t,n){return null}};function lv(e,t,n){ngDevMode&&function(e,t="Type passed in is not NgModuleType, it does not have 'ɵmod' property."){St(e)||ke(t)}(n);const o=new Ng(n);if("undefined"!=typeof ngJitMode&&!ngJitMode)return Promise.resolve(o);const r=e.get(Km,[]).concat(t);if(function(e){if(null!==jy){if(e.defaultEncapsulation!==jy.defaultEncapsulation)return void(ngDevMode&&console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set."));if(e.preserveWhitespaces!==jy.preserveWhitespaces)return void(ngDevMode&&console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set."))}jy=e}({defaultEncapsulation:Cv(r.map((e=>e.defaultEncapsulation))),preserveWhitespaces:Cv(r.map((e=>e.preserveWhitespaces)))}),0===si.size)return Promise.resolve(o);const i=function(e){const t=[];return e.forEach((e=>e&&t.push(...e))),t}(r.map((e=>e.providers)));if(0===i.length)return Promise.resolve(o);const s=wr({usage:0,kind:"NgModule",type:n}),a=Gl.create({providers:i}).get(s.ResourceLoader);return ii((e=>Promise.resolve(a.get(e)))).then((()=>o))}function uv(e){return e.isBoundToModule}const fv=new fr("AllowMultipleToken");class dv{constructor(e,t){this.name=e,this.token=t}}function pv(e){if(av&&!av.destroyed&&!av.injector.get(fv,!1)){const e="undefined"==typeof ngDevMode||ngDevMode?"There can be only one platform. Destroy the previous one to create a new one.":"";throw new pe(400,e)}ngDevMode&&lu(),av=e.get(vv);const t=e.get(Rm,null);return t&&t.forEach((e=>e())),av}function hv(e,t,n=[]){const o=`Platform: ${t}`,r=new fr(o);return(t=[])=>{let i=mv();if(!i||i.injector.get(fv,!1))if(e)e(n.concat(t).concat({provide:r,useValue:!0}));else{const e=n.concat(t).concat({provide:r,useValue:!0},{provide:jl,useValue:"platform"});pv(Gl.create({providers:e,name:o}))}return gv(r)}}function gv(e){const t=mv();if(!t){const e="undefined"==typeof ngDevMode||ngDevMode?"No platform exists!":"";throw new pe(401,e)}if(("undefined"==typeof ngDevMode||ngDevMode)&&!t.injector.get(e,null))throw new pe(400,"A platform with a different configuration has been created. Please destroy it first.");return t}function yv(){av&&!av.destroyed&&av.destroy()}function mv(){return av&&!av.destroyed?av:null}class vv{constructor(e){this._injector=e,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(e,t){const n=function(e,t){let n;return n="noop"===e?new ov:("zone.js"===e?void 0:e)||new Qm({enableLongStackTrace:"undefined"!=typeof ngDevMode&&!!ngDevMode,shouldCoalesceEventChangeDetection:!!t?.ngZoneEventCoalescing,shouldCoalesceRunChangeDetection:!!t?.ngZoneRunCoalescing}),n}(t?t.ngZone:void 0,{ngZoneEventCoalescing:t&&t.ngZoneEventCoalescing||!1,ngZoneRunCoalescing:t&&t.ngZoneRunCoalescing||!1}),o=[{provide:Qm,useValue:n}];return n.run((()=>{const t=Gl.create({providers:o,parent:this.injector,name:e.moduleType.name}),r=e.create(t),i=r.injector.get(Os,null);if(!i){const e="undefined"==typeof ngDevMode||ngDevMode?"No ErrorHandler. Is platform module (BrowserModule) included?":"";throw new pe(402,e)}return n.runOutsideAngular((()=>{const e=n.onError.subscribe({next:e=>{i.handleError(e)}});r.onDestroy((()=>{_v(this._modules,r),e.unsubscribe()}))})),function(e,t,n){try{const o=n();return Bf(o)?o.catch((n=>{throw t.runOutsideAngular((()=>e.handleError(n))),n})):o}catch(n){throw t.runOutsideAngular((()=>e.handleError(n))),n}}(i,n,(()=>{const e=r.injector.get(Om);return e.runInitializers(),e.donePromise.then((()=>(Up(r.injector.get(Fm,Vp)||Vp),this._moduleDoBootstrap(r),r)))}))}))}bootstrapModule(e,t=[]){const n=bv({},t);return lv(this.injector,n,e).then((e=>this.bootstrapModuleFactory(e,n)))}_moduleDoBootstrap(e){const t=e.injector.get(wv);if(e._bootstrapComponents.length>0)e._bootstrapComponents.forEach((e=>t.bootstrap(e)));else{if(!e.instance.ngDoBootstrap){const t="undefined"==typeof ngDevMode||ngDevMode?`The module ${ae(e.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`:"";throw new pe(403,t)}e.instance.ngDoBootstrap(t)}this._modules.push(e)}onDestroy(e){this._destroyListeners.push(e)}get injector(){return this._injector}destroy(){if(this._destroyed){const e="undefined"==typeof ngDevMode||ngDevMode?"The platform has already been destroyed!":"";throw new pe(404,e)}this._modules.slice().forEach((e=>e.destroy())),this._destroyListeners.forEach((e=>e())),this._destroyed=!0}get destroyed(){return this._destroyed}}function bv(e,t){return Array.isArray(t)?t.reduce(bv,e):{...e,...t}}vv.ɵfac=function(e){return new(e||vv)(qr(Gl))},vv.ɵprov=je({token:vv,factory:vv.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(vv,[{type:uf}],(function(){return[{type:Gl}]}),null);class wv{constructor(e,t,n,r,i){this._zone=e,this._injector=t,this._exceptionHandler=n,this._componentFactoryResolver=r,this._initStatus=i,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._onMicrotaskEmptySubscription=this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run((()=>{this.tick()}))}});const s=new o.Observable((e=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular((()=>{e.next(this._stable),e.complete()}))})),a=new o.Observable((e=>{let t;this._zone.runOutsideAngular((()=>{t=this._zone.onStable.subscribe((()=>{Qm.assertNotInAngularZone(),Zm((()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,e.next(!0))}))}))}));const n=this._zone.onUnstable.subscribe((()=>{Qm.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular((()=>{e.next(!1)})))}));return()=>{t.unsubscribe(),n.unsubscribe()}}));this.isStable=(0,o.merge)(s,a.pipe(oe()))}bootstrap(e,t){if(!this._initStatus.done){const e="undefined"==typeof ngDevMode||ngDevMode?"Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.":"";throw new pe(405,e)}let n;n=e instanceof sg?e:this._componentFactoryResolver.resolveComponentFactory(e),this.componentTypes.push(n.componentType);const o=uv(n)?void 0:this._injector.get(Ig),r=t||n.selector,i=n.create(Gl.NULL,[],r,o),s=i.location.nativeElement,a=i.injector.get(rv,null),c=a&&i.injector.get(iv);return a&&c&&c.registerApplication(s,a),i.onDestroy((()=>{this.detachView(i.hostView),_v(this.components,i),c&&c.unregisterApplication(s)})),this._loadComponent(i),("undefined"==typeof ngDevMode||ngDevMode)&&this._injector.get(Lm).log("Angular is running in development mode. Call enableProdMode() to enable production mode."),i}tick(){if(this._runningTick){const e="undefined"==typeof ngDevMode||ngDevMode?"ApplicationRef.tick is called recursively":"";throw new pe(101,e)}try{this._runningTick=!0;for(let e of this._views)e.detectChanges();if("undefined"==typeof ngDevMode||ngDevMode)for(let e of this._views)e.checkNoChanges()}catch(e){this._zone.runOutsideAngular((()=>this._exceptionHandler.handleError(e)))}finally{this._runningTick=!1}}attachView(e){const t=e;this._views.push(t),t.attachToAppRef(this)}detachView(e){const t=e;_v(this._views,t),t.detachFromAppRef()}_loadComponent(e){this.attachView(e.hostView),this.tick(),this.components.push(e),this._injector.get(Vm,[]).concat(this._bootstrapListeners).forEach((t=>t(e)))}ngOnDestroy(){this._views.slice().forEach((e=>e.destroy())),this._onMicrotaskEmptySubscription.unsubscribe()}get viewCount(){return this._views.length}}function _v(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}function Cv(e){for(let t=e.length-1;t>=0;t--)if(void 0!==e[t])return e[t]}wv.ɵfac=function(e){return new(e||wv)(qr(Qm),qr(Gl),qr(Os),qr(cg),qr(Om))},wv.ɵprov=je({token:wv,factory:wv.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(wv,[{type:uf,args:[{providedIn:"root"}]}],(function(){return[{type:Qm},{type:Gl},{type:Os},{type:cg},{type:Om}]}),null);let Dv=!0,Mv=!1;function xv(){return Mv=!0,Dv}function Iv(){if(Mv)throw new Error("Cannot enable prod mode after platform setup.");(void 0===typeof ngDevMode||ngDevMode)&&(it.ngDevMode=!1),Dv=!1}function Ev(e){const t=Og(e);if(!t)throw Sv(e);return new Ng(t)}function Tv(e){const t=Og(e);if(!t)throw Sv(e);return t}function Sv(e){return new Error(`No module with ID ${e} loaded`)}class Ov{}function Av(e){return function(e,t,n){if(jt(e)&&!n){const n=Mn(e.index,t);return new bg(n,n)}if(47&e.type){const e=t[16];return new bg(e,t)}return null}(Vn(),Pn(),16==(16&e))}Ov.__NG_ELEMENT_ID__=Av;class kv extends Ov{}class Nv extends kv{}class Pv{constructor(e,t){this.name=e,this.callback=t}}function Rv(e){return e.map((e=>e.nativeElement))}class jv{constructor(e){this.nativeNode=e}get parent(){const e=this.nativeNode.parentNode;return e?new Vv(e):null}get injector(){return eu(this.nativeNode)}get componentInstance(){const e=this.nativeNode;return e&&(Zl(e)||Yl(e))}get context(){return Zl(this.nativeNode)||Ql(this.nativeNode)}get listeners(){return ru(this.nativeNode).filter((e=>"dom"===e.type))}get references(){return function(e){const t=vs(e);return null===t?{}:(void 0===t.localRefs&&(t.localRefs=function(e,t){const n=e[1].data[t];if(n&&n.localNames){const t={};let o=n.index+1;for(let r=0;r<n.localNames.length;r+=2)t[n.localNames[r]]=e[o],o++;return t}return null}(t.lView,t.nodeIndex)),t.localRefs||{})}(this.nativeNode)}get providerTokens(){return function(e){const t=vs(e);if(null===t)return[];const n=t.lView[1],o=n.data[t.nodeIndex],r=[],i=1048575&o.providerIndexes,s=o.directiveEnd;for(let e=i;e<s;e++){let t=n.data[e];void 0!==(a=t).type&&void 0!==a.template&&void 0!==a.declaredInputs&&(t=t.type),r.push(t)}var a;return r}(this.nativeNode)}}class Vv extends jv{constructor(e){ngDevMode&&Ne(e),super(e)}get nativeElement(){return this.nativeNode.nodeType==Node.ELEMENT_NODE?this.nativeNode:null}get name(){const e=vs(this.nativeNode);return null!==e?e.lView[1].data[e.nodeIndex].value:this.nativeNode.nodeName}get properties(){const e=vs(this.nativeNode);if(null===e)return{};const t=e.lView,n=t[1].data,o=n[e.nodeIndex],r={};return function(e,t){if(e){let n=Object.getPrototypeOf(e);const o=Node.prototype;for(;null!==n&&n!==o;){const o=Object.getOwnPropertyDescriptors(n);for(let n in o)if(!n.startsWith("__")&&!n.startsWith("on")){const o=e[n];$v(o)&&(t[n]=o)}n=Object.getPrototypeOf(n)}}}(this.nativeElement,r),function(e,t,n,o){let r=t.propertyBindings;if(null!==r)for(let t=0;t<r.length;t++){const i=r[t],s=o[i].split(Hs),a=s[0];if(s.length>1){let t=s[1];for(let e=1;e<s.length-1;e++)t+=ge(n[i+e-1])+s[e+1];e[a]=t}else e[a]=n[i]}}(r,o,t,n),r}get attributes(){const e={},t=this.nativeElement;if(!t)return e;const n=vs(t);if(null===n)return{};const o=n.lView[1].data[n.nodeIndex].attrs,r=[];if(o){let t=0;for(;t<o.length;){const n=o[t];if("string"!=typeof n)break;const i=o[t+1];e[n]=i,r.push(n.toLowerCase()),t+=2}}const i=t.attributes;for(let t=0;t<i.length;t++){const n=i[t],o=n.name.toLowerCase();-1===r.indexOf(o)&&(e[o]=n.value)}return e}get styles(){return this.nativeElement&&this.nativeElement.style?this.nativeElement.style:{}}get classes(){const e={},t=this.nativeElement.className;return("string"!=typeof t?t.baseVal.split(" "):t.split(" ")).forEach((t=>e[t]=!0)),e}get childNodes(){const e=this.nativeNode.childNodes,t=[];for(let n=0;n<e.length;n++){const o=e[n];t.push(Wv(o))}return t}get children(){const e=this.nativeElement;if(!e)return[];const t=e.children,n=[];for(let e=0;e<t.length;e++){const o=t[e];n.push(Wv(o))}return n}query(e){return this.queryAll(e)[0]||null}queryAll(e){const t=[];return Lv(this,e,t,!0),t}queryAllNodes(e){const t=[];return Lv(this,e,t,!1),t}triggerEventHandler(e,t){const n=this.nativeNode,o=[];this.listeners.forEach((r=>{if(r.name===e){const e=r.callback;e.call(n,t),o.push(e)}})),"function"==typeof n.eventListeners&&n.eventListeners(e).forEach((e=>{if(-1!==e.toString().indexOf("__ngUnwrap__")){const r=e("__ngUnwrap__");return-1===o.indexOf(r)&&r.call(n,t)}}))}}function $v(e){return"string"==typeof e||"boolean"==typeof e||"number"==typeof e||null===e}function Lv(e,t,n,o){const r=vs(e.nativeNode);null!==r?Fv(r.lView[1].data[r.nodeIndex],r.lView,t,n,o,e.nativeNode):Bv(e.nativeNode,t,n,o)}function Fv(e,t,n,o,r,i){ngDevMode&&Lt(e,t);const s=function(e,t){const n=null===e?-1:e.index;if(-1!==n){ngDevMode&&Lt(e,t);const o=bn(t[n]);return ngDevMode&&null!==o&&!mn(t[11])&&Ne(o),o}return null}(e,t);if(11&e.type){if(Uv(s,n,o,r,i),jt(e)){const s=Mn(e.index,t);s&&s[1].firstChild&&Fv(s[1].firstChild,s,n,o,r,i)}else e.child&&Fv(e.child,t,n,o,r,i),s&&Bv(s,n,o,r);const a=t[e.index];Pt(a)&&Hv(a,n,o,r,i)}else if(4&e.type){const s=t[e.index];Uv(s[7],n,o,r,i),Hv(s,n,o,r,i)}else if(16&e.type){const s=t[16],a=s[6].projection[e.projection];if(Array.isArray(a))for(let e of a)Uv(e,n,o,r,i);else if(a){const e=s[3];Fv(e[1].data[a.index],e,n,o,r,i)}}else e.child&&Fv(e.child,t,n,o,r,i);if(i!==s){const s=4&e.flags?e.projectionNext:e.next;s&&Fv(s,t,n,o,r,i)}}function Hv(e,t,n,o,r){for(let i=kt;i<e.length;i++){const s=e[i],a=s[1].firstChild;a&&Fv(a,s,t,n,o,r)}}function Uv(e,t,n,o,r){if(r!==e){const r=Wv(e);if(!r)return;(o&&r instanceof Vv&&t(r)&&-1===n.indexOf(r)||!o&&t(r)&&-1===n.indexOf(r))&&n.push(r)}}function Bv(e,t,n,o){const r=e.childNodes,i=r.length;for(let e=0;e<i;e++){const i=r[e],s=Wv(i);s&&((o&&s instanceof Vv&&t(s)&&-1===n.indexOf(s)||!o&&t(s)&&-1===n.indexOf(s))&&n.push(s),Bv(i,t,n,o))}}new Map;function Wv(e){return e instanceof Node?(e.hasOwnProperty("__ng_debug__")||(e.__ng_debug__=e.nodeType==Node.ELEMENT_NODE?new Vv(e):new jv(e)),e.__ng_debug__):null}function qv(e){return null}class zv{constructor(){}supports(e){return Su(e)}create(e){return new Jv(e)}}const Kv=(e,t)=>t;class Jv{constructor(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||Kv}forEachItem(e){let t;for(t=this._itHead;null!==t;t=t._next)e(t)}forEachOperation(e){let t=this._itHead,n=this._removalsHead,o=0,r=null;for(;t||n;){const i=!n||t&&t.currentIndex<Yv(n,o,r)?t:n,s=Yv(i,o,r),a=i.currentIndex;if(i===n)o--,n=n._nextRemoved;else if(t=t._next,null==i.previousIndex)o++;else{r||(r=[]);const e=s-o,t=a-o;if(e!=t){for(let n=0;n<e;n++){const o=n<r.length?r[n]:r[n]=0,i=o+n;t<=i&&i<e&&(r[n]=o+1)}r[i.previousIndex]=t-e}}s!==a&&e(i,s,a)}}forEachPreviousItem(e){let t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachMovedItem(e){let t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}forEachIdentityChange(e){let t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)}diff(e){if(null==e&&(e=[]),!Su(e)){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${ae(e)}'. Only arrays and iterables are allowed`:"";throw new pe(900,t)}return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t,n,o,r=this._itHead,i=!1;if(Array.isArray(e)){this.length=e.length;for(let t=0;t<this.length;t++)n=e[t],o=this._trackByFn(t,n),null!==r&&Object.is(r.trackById,o)?(i&&(r=this._verifyReinsertion(r,n,o,t)),Object.is(r.item,n)||this._addIdentityChange(r,n)):(r=this._mismatch(r,n,o,t),i=!0),r=r._next}else t=0,function(e,t){if(Array.isArray(e))for(let n=0;n<e.length;n++)t(e[n]);else{const n=e[Eu()]();let o;for(;!(o=n.next()).done;)t(o.value)}}(e,(e=>{o=this._trackByFn(t,e),null!==r&&Object.is(r.trackById,o)?(i&&(r=this._verifyReinsertion(r,e,o,t)),Object.is(r.item,e)||this._addIdentityChange(r,e)):(r=this._mismatch(r,e,o,t),i=!0),r=r._next,t++})),this.length=t;return this._truncate(r),this.collection=e,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let e;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=e._nextMoved)e.previousIndex=e.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(e,t,n,o){let r;return null===e?r=this._itTail:(r=e._prev,this._remove(e)),null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,r,o)):null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(n,o))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,r,o)):e=this._addAfter(new Gv(t,n),r,o),e}_verifyReinsertion(e,t,n,o){let r=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==r?e=this._reinsertAfter(r,e._prev,o):e.currentIndex!=o&&(e.currentIndex=o,this._addToMoves(e,o)),e}_truncate(e){for(;null!==e;){const t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(e,t,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);const o=e._prevRemoved,r=e._nextRemoved;return null===o?this._removalsHead=r:o._nextRemoved=r,null===r?this._removalsTail=o:r._prevRemoved=o,this._insertAfter(e,t,n),this._addToMoves(e,n),e}_moveAfter(e,t,n){return this._unlink(e),this._insertAfter(e,t,n),this._addToMoves(e,n),e}_addAfter(e,t,n){return this._insertAfter(e,t,n),null===this._additionsTail?this._additionsTail=this._additionsHead=e:this._additionsTail=this._additionsTail._nextAdded=e,e}_insertAfter(e,t,n){const o=null===t?this._itHead:t._next;return e._next=o,e._prev=t,null===o?this._itTail=e:o._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new Qv),this._linkedRecords.put(e),e.currentIndex=n,e}_remove(e){return this._addToRemovals(this._unlink(e))}_unlink(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);const t=e._prev,n=e._next;return null===t?this._itHead=n:t._next=n,null===n?this._itTail=t:n._prev=t,e}_addToMoves(e,t){return e.previousIndex===t||(null===this._movesTail?this._movesTail=this._movesHead=e:this._movesTail=this._movesTail._nextMoved=e),e}_addToRemovals(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new Qv),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}_addIdentityChange(e,t){return e.item=t,null===this._identityChangesTail?this._identityChangesTail=this._identityChangesHead=e:this._identityChangesTail=this._identityChangesTail._nextIdentityChange=e,e}}class Gv{constructor(e,t){this.item=e,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class Zv{constructor(){this._head=null,this._tail=null}add(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}get(e,t){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===t||t<=n.currentIndex)&&Object.is(n.trackById,e))return n;return null}remove(e){const t=e._prevDup,n=e._nextDup;return null===t?this._head=n:t._nextDup=n,null===n?this._tail=t:n._prevDup=t,null===this._head}}class Qv{constructor(){this.map=new Map}put(e){const t=e.trackById;let n=this.map.get(t);n||(n=new Zv,this.map.set(t,n)),n.add(e)}get(e,t){const n=e,o=this.map.get(n);return o?o.get(e,t):null}remove(e){const t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function Yv(e,t,n){const o=e.previousIndex;if(null===o)return o;let r=0;return n&&o<n.length&&(r=n[o]),o+t+r}class Xv{constructor(){}supports(e){return e instanceof Map||Ou(e)}create(){return new eb}}class eb{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(e){let t;for(t=this._mapHead;null!==t;t=t._next)e(t)}forEachPreviousItem(e){let t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)}forEachChangedItem(e){let t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}diff(e){if(e){if(!(e instanceof Map||Ou(e))){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${ae(e)}'. Only maps and objects are allowed`:"";throw new pe(900,t)}}else e=new Map;return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t=this._mapHead;if(this._appendAfter=null,this._forEach(e,((e,n)=>{if(t&&t.key===n)this._maybeAddToChanges(t,e),this._appendAfter=t,t=t._next;else{const o=this._getOrCreateRecordForKey(n,e);t=this._insertBeforeOrAppend(t,o)}})),t){t._prev&&(t._prev._next=null),this._removalsHead=t;for(let e=t;null!==e;e=e._nextRemoved)e===this._mapHead&&(this._mapHead=null),this._records.delete(e.key),e._nextRemoved=e._next,e.previousValue=e.currentValue,e.currentValue=null,e._prev=null,e._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(e,t){if(e){const n=e._prev;return t._next=e,t._prev=n,e._prev=t,n&&(n._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}_getOrCreateRecordForKey(e,t){if(this._records.has(e)){const n=this._records.get(e);this._maybeAddToChanges(n,t);const o=n._prev,r=n._next;return o&&(o._next=r),r&&(r._prev=o),n._next=null,n._prev=null,n}const n=new tb(e);return this._records.set(e,n),n.currentValue=t,this._addToAdditions(n),n}_reset(){if(this.isDirty){let e;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(e,t){Object.is(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))}_addToAdditions(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)}_addToChanges(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)}_forEach(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach((n=>t(e[n],n)))}}class tb{constructor(e){this.key=e,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}function nb(){return new ob([new zv])}class ob{constructor(e){this.factories=e}static create(e,t){if(null!=t){const n=t.factories.slice();e=e.concat(n)}return new ob(e)}static extend(e){return{provide:ob,useFactory:t=>ob.create(e,t||nb()),deps:[[ob,new Xr,new Qr]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(null!=t)return t;{const t="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}' of type '${n=e,n.name||typeof n}'`:"";throw new pe(901,t)}var n}}function rb(){return new ib([new Xv])}ob.ɵprov=je({token:ob,providedIn:"root",factory:nb});class ib{constructor(e){this.factories=e}static create(e,t){if(t){const n=t.factories.slice();e=e.concat(n)}return new ib(e)}static extend(e){return{provide:ib,useFactory:t=>ib.create(e,t||rb()),deps:[[ib,new Xr,new Qr]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(t)return t;const n="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}'`:"";throw new pe(901,n)}}ib.ɵprov=je({token:ib,providedIn:"root",factory:rb});const sb=[new Xv],ab=[new zv],cb=new ob(ab),lb=new ib(sb),ub=hv(null,"core",[{provide:jm,useValue:"unknown"},{provide:vv,deps:[Gl]},{provide:iv,deps:[]},{provide:Lm,deps:[]}]);class fb{constructor(e){}}fb.ɵfac=function(e){return new(e||fb)(qr(wv))},fb.ɵmod=_t({type:fb}),fb.ɵinj=$e({}),("undefined"==typeof ngDevMode||ngDevMode)&&xg(fb,[{type:Em}],(function(){return[{type:wv}]}),null);const db=!0;function pb(e){return wr({usage:1,kind:"directive",type:e.type}).compileDirectiveDeclaration(Ry,`ng:///${e.type.name}/ɵfac.js`,e)}function hb(e){xg(e.type,e.decorators,e.ctorParameters??null,e.propDecorators??null)}function gb(e){return wr({usage:1,kind:"component",type:e.type}).compileComponentDeclaration(Ry,`ng:///${e.type.name}/ɵcmp.js`,e)}function yb(e){return wr({usage:1,kind:mb(e.target),type:e.type}).compileFactoryDeclaration(Ry,`ng:///${e.type.name}/ɵfac.js`,e)}function mb(e){switch(e){case vr.Directive:return"directive";case vr.Component:return"component";case vr.Injectable:return"injectable";case vr.Pipe:return"pipe";case vr.NgModule:return"NgModule"}}function vb(e){return wr({usage:1,kind:"injectable",type:e.type}).compileInjectableDeclaration(Ry,`ng:///${e.type.name}/ɵprov.js`,e)}function bb(e){return wr({usage:1,kind:"NgModule",type:e.type}).compileInjectorDeclaration(Ry,`ng:///${e.type.name}/ɵinj.js`,e)}function wb(e){return wr({usage:1,kind:"NgModule",type:e.type}).compileNgModuleDeclaration(Ry,`ng:///${e.type.name}/ɵmod.js`,e)}function _b(e){return wr({usage:1,kind:"pipe",type:e.type}).compilePipeDeclaration(Ry,`ng:///${e.type.name}/ɵpipe.js`,e)}"undefined"!=typeof ngDevMode&&ngDevMode&&(it.$localize=it.$localize||function(){throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)")})}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{"use strict";var e=o;Object.defineProperty(e,"__esModule",{value:!0}),e.checkKeyForDid=e.EProofmeDataStorage=e.EProofmeDataPurpose=e.EClaimType=e.ESignatureTypes=e.EMimeType=e.getSubDomain=e.SignalServerV2=e.ProofmeUtils=e.ProofmeUtilsProvider=e.WebRtcProvider=e.SignalingServer=void 0;var t=n(515);Object.defineProperty(e,"SignalingServer",{enumerable:!0,get:function(){return t.SignalingServer}});var r=n(299);Object.defineProperty(e,"WebRtcProvider",{enumerable:!0,get:function(){return r.WebRtcProvider}});var i=n(611);Object.defineProperty(e,"ProofmeUtilsProvider",{enumerable:!0,get:function(){return i.ProofmeUtilsProvider}});var s=n(810);Object.defineProperty(e,"ProofmeUtils",{enumerable:!0,get:function(){return s.ProofmeUtils}});var a=n(930);Object.defineProperty(e,"SignalServerV2",{enumerable:!0,get:function(){return a.SignalServerV2}});var c=n(733);Object.defineProperty(e,"getSubDomain",{enumerable:!0,get:function(){return c.getSubDomain}});var l=n(346);Object.defineProperty(e,"EMimeType",{enumerable:!0,get:function(){return l.EMimeType}});var u=n(632);Object.defineProperty(e,"ESignatureTypes",{enumerable:!0,get:function(){return u.ESignatureTypes}});var f=n(869);Object.defineProperty(e,"EClaimType",{enumerable:!0,get:function(){return f.EClaimType}});var d=n(945);Object.defineProperty(e,"EProofmeDataPurpose",{enumerable:!0,get:function(){return d.EProofmeDataPurpose}});var p=n(491);Object.defineProperty(e,"EProofmeDataStorage",{enumerable:!0,get:function(){return p.EProofmeDataStorage}});var h=n(918);Object.defineProperty(e,"checkKeyForDid",{enumerable:!0,get:function(){return h.checkKeyForDid}})})(),o})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,