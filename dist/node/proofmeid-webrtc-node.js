/*! For license information please see proofmeid-webrtc-node.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ProofmeId=t():e.ProofmeId=t()}(global,(function(){return(()=>{"use strict";var e={280:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncSubject=void 0;var i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._value=null,t._hasValue=!1,t._isComplete=!1,t}return o(t,e),t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t._hasValue,o=t._value,i=t.thrownError,s=t.isStopped,u=t._isComplete;n?e.error(i):(s||u)&&(r&&e.next(o),e.complete())},t.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},t.prototype.complete=function(){var t=this,n=t._hasValue,r=t._value;t._isComplete||(this._isComplete=!0,n&&e.prototype.next.call(this,r),e.prototype.complete.call(this))},t}(n(3032).Subject);t.AsyncSubject=i},5240:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.BehaviorSubject=void 0;var i=function(e){function t(t){var n=e.call(this)||this;return n._value=t,n}return o(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var n=e.prototype._subscribe.call(this,t);return!n.closed&&t.next(this._value),n},t.prototype.getValue=function(){var e=this,t=e.hasError,n=e.thrownError,r=e._value;if(t)throw n;return this._throwIfClosed(),r},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(n(3032).Subject);t.BehaviorSubject=i},3104:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeNotification=t.Notification=t.NotificationKind=void 0;var r,o=n(6332),i=n(5726),s=n(2098),u=n(3005);(r=t.NotificationKind||(t.NotificationKind={})).NEXT="N",r.ERROR="E",r.COMPLETE="C";var a=function(){function e(e,t,n){this.kind=e,this.value=t,this.error=n,this.hasValue="N"===e}return e.prototype.observe=function(e){return c(this,e)},e.prototype.do=function(e,t,n){var r=this,o=r.kind,i=r.value,s=r.error;return"N"===o?null==e?void 0:e(i):"E"===o?null==t?void 0:t(s):null==n?void 0:n()},e.prototype.accept=function(e,t,n){var r;return u.isFunction(null===(r=e)||void 0===r?void 0:r.next)?this.observe(e):this.do(e,t,n)},e.prototype.toObservable=function(){var e=this,t=e.kind,n=e.value,r=e.error,u="N"===t?i.of(n):"E"===t?s.throwError((function(){return r})):"C"===t?o.EMPTY:0;if(!u)throw new TypeError("Unexpected notification kind "+t);return u},e.createNext=function(t){return new e("N",t)},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function c(e,t){var n,r,o,i=e,s=i.kind,u=i.value,a=i.error;if("string"!=typeof s)throw new TypeError('Invalid notification, missing "kind"');"N"===s?null===(n=t.next)||void 0===n||n.call(t,u):"E"===s?null===(r=t.error)||void 0===r||r.call(t,a):null===(o=t.complete)||void 0===o||o.call(t)}t.Notification=a,t.observeNotification=c},7286:(e,t)=>{function n(e,t,n){return{kind:e,value:t,error:n}}Object.defineProperty(t,"__esModule",{value:!0}),t.createNotification=t.nextNotification=t.errorNotification=t.COMPLETE_NOTIFICATION=void 0,t.COMPLETE_NOTIFICATION=n("C",void 0,void 0),t.errorNotification=function(e){return n("E",void 0,e)},t.nextNotification=function(e){return n("N",e,void 0)},t.createNotification=n},2419:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var r=n(5125),o=n(3865),i=n(2801),s=n(2872),u=n(3280),a=n(3005),c=n(6110),l=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var i,s=this,u=(i=e)&&i instanceof r.Subscriber||function(e){return e&&a.isFunction(e.next)&&a.isFunction(e.error)&&a.isFunction(e.complete)}(i)&&o.isSubscription(i)?e:new r.SafeSubscriber(e,t,n);return c.errorContext((function(){var e=s,t=e.operator,n=e.source;u.add(t?t.call(u,n):n?s._subscribe(u):s._trySubscribe(u))})),u},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=d(t))((function(t,o){var i=new r.SafeSubscriber({next:function(t){try{e(t)}catch(e){o(e),i.unsubscribe()}},error:o,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=d(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function d(e){var t;return null!==(t=null!=e?e:u.config.Promise)&&void 0!==t?t:Promise}t.Observable=l},3274:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReplaySubject=void 0;var i=n(3032),s=n(7950),u=function(e){function t(t,n,r){void 0===t&&(t=1/0),void 0===n&&(n=1/0),void 0===r&&(r=s.dateTimestampProvider);var o=e.call(this)||this;return o._bufferSize=t,o._windowTime=n,o._timestampProvider=r,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=n===1/0,o._bufferSize=Math.max(1,t),o._windowTime=Math.max(1,n),o}return o(t,e),t.prototype.next=function(t){var n=this,r=n.isStopped,o=n._buffer,i=n._infiniteTimeWindow,s=n._timestampProvider,u=n._windowTime;r||(o.push(t),!i&&o.push(s.now()+u)),this._trimBuffer(),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var t=this._innerSubscribe(e),n=this._infiniteTimeWindow,r=this._buffer.slice(),o=0;o<r.length&&!e.closed;o+=n?1:2)e.next(r[o]);return this._checkFinalizedStatuses(e),t},t.prototype._trimBuffer=function(){var e=this,t=e._bufferSize,n=e._timestampProvider,r=e._buffer,o=e._infiniteTimeWindow,i=(o?1:2)*t;if(t<1/0&&i<r.length&&r.splice(0,r.length-i),!o){for(var s=n.now(),u=0,a=1;a<r.length&&r[a]<=s;a+=2)u=a;u&&r.splice(0,u+1)}},t}(i.Subject);t.ReplaySubject=u},218:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Scheduler=void 0;var r=n(7950),o=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=r.dateTimestampProvider.now,e}();t.Scheduler=o},3032:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.AnonymousSubject=t.Subject=void 0;var s=n(2419),u=n(3865),a=n(2642),c=n(6967),l=n(6110),d=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,e),t.prototype.lift=function(e){var t=new f(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new a.ObjectUnsubscribedError},t.prototype.next=function(e){var t=this;l.errorContext((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){var o=t.observers.slice();try{for(var s=i(o),u=s.next();!u.done;u=s.next())u.value.next(e)}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;l.errorContext((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;l.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=t.hasError,r=t.isStopped,o=t.observers;return n||r?u.EMPTY_SUBSCRIPTION:(o.push(e),new u.Subscription((function(){return c.arrRemove(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new s.Observable;return e.source=this,e},t.create=function(e,t){return new f(e,t)},t}(s.Observable);t.Subject=d;var f=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return o(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:u.EMPTY_SUBSCRIPTION},t}(d);t.AnonymousSubject=f},5125:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_OBSERVER=t.SafeSubscriber=t.Subscriber=void 0;var i=n(3005),s=n(3865),u=n(3280),a=n(7968),c=n(2576),l=n(7286),d=n(4590),f=n(6110),p=function(e){function n(n){var r=e.call(this)||this;return r.isStopped=!1,n?(r.destination=n,s.isSubscription(n)&&n.add(r)):r.destination=t.EMPTY_OBSERVER,r}return o(n,e),n.create=function(e,t,n){return new g(e,t,n)},n.prototype.next=function(e){this.isStopped?b(l.nextNotification(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?b(l.errorNotification(e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?b(l.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(s.Subscription);t.Subscriber=p;var h=Function.prototype.bind;function v(e,t){return h.call(e,t)}var y=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){m(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){m(e)}else m(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){m(e)}},e}(),g=function(e){function t(t,n,r){var o,s,a=e.call(this)||this;return i.isFunction(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:a&&u.config.useDeprecatedNextContext?((s=Object.create(t)).unsubscribe=function(){return a.unsubscribe()},o={next:t.next&&v(t.next,s),error:t.error&&v(t.error,s),complete:t.complete&&v(t.complete,s)}):o=t,a.destination=new y(o),a}return o(t,e),t}(p);function m(e){u.config.useDeprecatedSynchronousErrorHandling?f.captureError(e):a.reportUnhandledError(e)}function b(e,t){var n=u.config.onStoppedNotification;n&&d.timeoutProvider.setTimeout((function(){return n(e,t)}))}t.SafeSubscriber=g,t.EMPTY_OBSERVER={closed:!0,next:c.noop,error:function(e){throw e},complete:c.noop}},3865:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},i=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.isSubscription=t.EMPTY_SUBSCRIPTION=t.Subscription=void 0;var s=n(3005),u=n(4805),a=n(6967),c=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,a,c;if(!this.closed){this.closed=!0;var d=this._parentage;if(d)if(this._parentage=null,Array.isArray(d))try{for(var f=r(d),p=f.next();!p.done;p=f.next())p.value.remove(this)}catch(t){e={error:t}}finally{try{p&&!p.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}else d.remove(this);var h=this.initialTeardown;if(s.isFunction(h))try{h()}catch(e){c=e instanceof u.UnsubscriptionError?e.errors:[e]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var y=r(v),g=y.next();!g.done;g=y.next()){var m=g.value;try{l(m)}catch(e){c=null!=c?c:[],e instanceof u.UnsubscriptionError?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{g&&!g.done&&(a=y.return)&&a.call(y)}finally{if(n)throw n.error}}}if(c)throw new u.UnsubscriptionError(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)l(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&a.arrRemove(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&a.arrRemove(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function l(e){s.isFunction(e)?e():e.unsubscribe()}t.Subscription=c,t.EMPTY_SUBSCRIPTION=c.EMPTY,t.isSubscription=function(e){return e instanceof c||e&&"closed"in e&&s.isFunction(e.remove)&&s.isFunction(e.add)&&s.isFunction(e.unsubscribe)}},3280:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0,t.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},9518:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectableObservable=void 0;var i=n(2419),s=n(3865),u=n(8739),a=n(4990),c=n(4935),l=function(e){function t(t,n){var r=e.call(this)||this;return r.source=t,r.subjectFactory=n,r._subject=null,r._refCount=0,r._connection=null,c.hasLift(t)&&(r.lift=t.lift),r}return o(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},t.prototype.connect=function(){var e=this,t=this._connection;if(!t){t=this._connection=new s.Subscription;var n=this.getSubject();t.add(this.source.subscribe(a.createOperatorSubscriber(n,void 0,(function(){e._teardown(),n.complete()}),(function(t){e._teardown(),n.error(t)}),(function(){return e._teardown()})))),t.closed&&(this._connection=null,t=s.Subscription.EMPTY)}return t},t.prototype.refCount=function(){return u.refCount()(this)},t}(i.Observable);t.ConnectableObservable=l},9258:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestInit=t.combineLatest=void 0;var r=n(2419),o=n(1203),i=n(5432),s=n(4781),u=n(1914),a=n(2433),c=n(641),l=n(4990),d=n(7738);function f(e,t,n){return void 0===n&&(n=s.identity),function(r){p(t,(function(){for(var o=e.length,s=new Array(o),u=o,a=o,c=function(o){p(t,(function(){var c=i.from(e[o],t),d=!1;c.subscribe(l.createOperatorSubscriber(r,(function(e){s[o]=e,d||(d=!0,a--),a||r.next(n(s.slice()))}),(function(){--u||r.complete()})))}),r)},d=0;d<o;d++)c(d)}),r)}}function p(e,t,n){e?d.executeSchedule(n,e,t):t()}t.combineLatest=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=a.popScheduler(e),l=a.popResultSelector(e),d=o.argsArgArrayOrObject(e),p=d.args,h=d.keys;if(0===p.length)return i.from([],n);var v=new r.Observable(f(p,n,h?function(e){return c.createObject(h,e)}:s.identity));return l?v.pipe(u.mapOneOrManyArgs(l)):v},t.combineLatestInit=f},2239:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var r=n(4413),o=n(2433),i=n(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return r.concatAll()(i.from(e,o.popScheduler(e)))}},6332:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.empty=t.EMPTY=void 0;var r=n(2419);t.EMPTY=new r.Observable((function(e){return e.complete()})),t.empty=function(e){return e?function(e){return new r.Observable((function(t){return e.schedule((function(){return t.complete()}))}))}(e):t.EMPTY}},5432:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.from=void 0;var r=n(5207),o=n(7103);t.from=function(e,t){return t?r.scheduled(e,t):o.innerFrom(e)}},851:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromSubscribable=void 0;var r=n(2419);t.fromSubscribable=function(e){return new r.Observable((function(t){return e.subscribe(t)}))}},7103:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{a(r.next(e))}catch(e){i(e)}}function u(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,u)}a((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof s?s(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}},s=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fromReadableStreamLike=t.fromAsyncIterable=t.fromIterable=t.fromPromise=t.fromArrayLike=t.fromInteropObservable=t.innerFrom=void 0;var u=n(3909),a=n(6018),c=n(2419),l=n(9500),d=n(9595),f=n(9906),p=n(2743),h=n(7823),v=n(3005),y=n(7968),g=n(2801);function m(e){return new c.Observable((function(t){var n=e[g.observable]();if(v.isFunction(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function b(e){return new c.Observable((function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()}))}function _(e){return new c.Observable((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,y.reportUnhandledError)}))}function w(e){return new c.Observable((function(t){var n,r;try{for(var o=s(e),i=o.next();!i.done;i=o.next()){var u=i.value;if(t.next(u),t.closed)return}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}))}function M(e){return new c.Observable((function(t){(function(e,t){var n,s,u,a;return r(this,void 0,void 0,(function(){var r,c;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),n=i(e),o.label=1;case 1:return[4,n.next()];case 2:if((s=o.sent()).done)return[3,4];if(r=s.value,t.next(r),t.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=o.sent(),u={error:c},[3,11];case 6:return o.trys.push([6,,9,10]),s&&!s.done&&(a=n.return)?[4,a.call(n)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function C(e){return M(h.readableStreamLikeToAsyncGenerator(e))}t.innerFrom=function(e){if(e instanceof c.Observable)return e;if(null!=e){if(l.isInteropObservable(e))return m(e);if(u.isArrayLike(e))return b(e);if(a.isPromise(e))return _(e);if(d.isAsyncIterable(e))return M(e);if(p.isIterable(e))return w(e);if(h.isReadableStreamLike(e))return C(e)}throw f.createInvalidObservableTypeError(e)},t.fromInteropObservable=m,t.fromArrayLike=b,t.fromPromise=_,t.fromIterable=w,t.fromAsyncIterable=M,t.fromReadableStreamLike=C},8990:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.interval=void 0;var r=n(2445),o=n(7513);t.interval=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=r.asyncScheduler),e<0&&(e=0),o.timer(e,e,t)}},5726:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.of=void 0;var r=n(2433),o=n(5432);t.of=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=r.popScheduler(e);return o.from(e,n)}},5182:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.raceInit=t.race=void 0;var r=n(2419),o=n(7103),i=n(5498),s=n(4990);function u(e){return function(t){for(var n=[],r=function(r){n.push(o.innerFrom(e[r]).subscribe(s.createOperatorSubscriber(t,(function(e){if(n){for(var o=0;o<n.length;o++)o!==r&&n[o].unsubscribe();n=null}t.next(e)}))))},i=0;n&&!t.closed&&i<e.length;i++)r(i)}}t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 1===(e=i.argsOrArgArray(e)).length?o.innerFrom(e[0]):new r.Observable(u(e))},t.raceInit=u},2098:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwError=void 0;var r=n(2419),o=n(3005);t.throwError=function(e,t){var n=o.isFunction(e)?e:function(){return e},i=function(e){return e.error(n())};return new r.Observable(t?function(e){return t.schedule(i,0,e)}:i)}},7513:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timer=void 0;var r=n(2419),o=n(2445),i=n(9016),s=n(1677);t.timer=function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=o.async);var u=-1;return null!=t&&(i.isScheduler(t)?n=t:u=t),new r.Observable((function(t){var r=s.isValidDate(e)?+e-n.now():e;r<0&&(r=0);var o=0;return n.schedule((function(){t.closed||(t.next(o++),0<=u?this.schedule(void 0,u):t.complete())}),r)}))}},7654:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=n(2419),s=n(7103),u=n(5498),a=n(6332),c=n(4990),l=n(2433);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=l.popResultSelector(e),d=u.argsOrArgArray(e);return d.length?new i.Observable((function(e){var t=d.map((function(){return[]})),i=d.map((function(){return!1}));e.add((function(){t=i=null}));for(var u=function(u){s.innerFrom(d[u]).subscribe(c.createOperatorSubscriber(e,(function(s){if(t[u].push(s),t.every((function(e){return e.length}))){var a=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,o([],r(a))):a),t.some((function(e,t){return!e.length&&i[t]}))&&e.complete()}}),(function(){i[u]=!0,!t[u].length&&e.complete()})))},a=0;!e.closed&&a<d.length;a++)u(a);return function(){t=i=null}})):a.EMPTY}},4990:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorSubscriber=t.createOperatorSubscriber=void 0;var i=n(5125);t.createOperatorSubscriber=function(e,t,n,r,o){return new s(e,t,n,r,o)};var s=function(e){function t(t,n,r,o,i,s){var u=e.call(this,t)||this;return u.onFinalize=i,u.shouldUnsubscribe=s,u._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,u._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return o(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(i.Subscriber);t.OperatorSubscriber=s},6474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.audit=void 0;var r=n(4935),o=n(7103),i=n(4990);t.audit=function(e){return r.operate((function(t,n){var r=!1,s=null,u=null,a=!1,c=function(){if(null==u||u.unsubscribe(),u=null,r){r=!1;var e=s;s=null,n.next(e)}a&&n.complete()},l=function(){u=null,a&&n.complete()};t.subscribe(i.createOperatorSubscriber(n,(function(t){r=!0,s=t,u||o.innerFrom(e(t)).subscribe(u=i.createOperatorSubscriber(n,c,l))}),(function(){a=!0,(!r||!u||u.closed)&&n.complete()})))}))}},5382:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.auditTime=void 0;var r=n(2445),o=n(6474),i=n(7513);t.auditTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.audit((function(){return i.timer(e,t)}))}},9715:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buffer=void 0;var r=n(4935),o=n(2576),i=n(4990);t.buffer=function(e){return r.operate((function(t,n){var r=[];return t.subscribe(i.createOperatorSubscriber(n,(function(e){return r.push(e)}),(function(){n.next(r),n.complete()}))),e.subscribe(i.createOperatorSubscriber(n,(function(){var e=r;r=[],n.next(e)}),o.noop)),function(){r=null}}))}},3814:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferCount=void 0;var o=n(4935),i=n(4990),s=n(6967);t.bufferCount=function(e,t){return void 0===t&&(t=null),t=null!=t?t:e,o.operate((function(n,o){var u=[],a=0;n.subscribe(i.createOperatorSubscriber(o,(function(n){var i,c,l,d,f=null;a++%t==0&&u.push([]);try{for(var p=r(u),h=p.next();!h.done;h=p.next())(g=h.value).push(n),e<=g.length&&(f=null!=f?f:[]).push(g)}catch(e){i={error:e}}finally{try{h&&!h.done&&(c=p.return)&&c.call(p)}finally{if(i)throw i.error}}if(f)try{for(var v=r(f),y=v.next();!y.done;y=v.next()){var g=y.value;s.arrRemove(u,g),o.next(g)}}catch(e){l={error:e}}finally{try{y&&!y.done&&(d=v.return)&&d.call(v)}finally{if(l)throw l.error}}}),(function(){var e,t;try{for(var n=r(u),i=n.next();!i.done;i=n.next()){var s=i.value;o.next(s)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}o.complete()}),void 0,(function(){u=null})))}))}},7211:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferTime=void 0;var o=n(3865),i=n(4935),s=n(4990),u=n(6967),a=n(2445),c=n(2433),l=n(7738);t.bufferTime=function(e){for(var t,n,d=[],f=1;f<arguments.length;f++)d[f-1]=arguments[f];var p=null!==(t=c.popScheduler(d))&&void 0!==t?t:a.asyncScheduler,h=null!==(n=d[0])&&void 0!==n?n:null,v=d[1]||1/0;return i.operate((function(t,n){var i=[],a=!1,c=function(e){var t=e.buffer;e.subs.unsubscribe(),u.arrRemove(i,e),n.next(t),a&&d()},d=function(){if(i){var t=new o.Subscription;n.add(t);var r={buffer:[],subs:t};i.push(r),l.executeSchedule(t,p,(function(){return c(r)}),e)}};null!==h&&h>=0?l.executeSchedule(n,p,d,h,!0):a=!0,d();var f=s.createOperatorSubscriber(n,(function(e){var t,n,o=i.slice();try{for(var s=r(o),u=s.next();!u.done;u=s.next()){var a=u.value,l=a.buffer;l.push(e),v<=l.length&&c(a)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}}),(function(){for(;null==i?void 0:i.length;)n.next(i.shift().buffer);null==f||f.unsubscribe(),n.complete(),n.unsubscribe()}),void 0,(function(){return i=null}));t.subscribe(f)}))}},4943:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferToggle=void 0;var o=n(3865),i=n(4935),s=n(7103),u=n(4990),a=n(2576),c=n(6967);t.bufferToggle=function(e,t){return i.operate((function(n,i){var l=[];s.innerFrom(e).subscribe(u.createOperatorSubscriber(i,(function(e){var n=[];l.push(n);var r=new o.Subscription;r.add(s.innerFrom(t(e)).subscribe(u.createOperatorSubscriber(i,(function(){c.arrRemove(l,n),i.next(n),r.unsubscribe()}),a.noop)))}),a.noop)),n.subscribe(u.createOperatorSubscriber(i,(function(e){var t,n;try{for(var o=r(l),i=o.next();!i.done;i=o.next())i.value.push(e)}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}}),(function(){for(;l.length>0;)i.next(l.shift());i.complete()})))}))}},1240:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bufferWhen=void 0;var r=n(4935),o=n(2576),i=n(4990),s=n(7103);t.bufferWhen=function(e){return r.operate((function(t,n){var r=null,u=null,a=function(){null==u||u.unsubscribe();var t=r;r=[],t&&n.next(t),s.innerFrom(e()).subscribe(u=i.createOperatorSubscriber(n,a,o.noop))};a(),t.subscribe(i.createOperatorSubscriber(n,(function(e){return null==r?void 0:r.push(e)}),(function(){r&&n.next(r),n.complete()}),void 0,(function(){return r=u=null})))}))}},9548:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.catchError=void 0;var r=n(7103),o=n(4990),i=n(4935);t.catchError=function e(t){return i.operate((function(n,i){var s,u=null,a=!1;u=n.subscribe(o.createOperatorSubscriber(i,void 0,void 0,(function(o){s=r.innerFrom(t(o,e(t)(n))),u?(u.unsubscribe(),u=null,s.subscribe(i)):a=!0}))),a&&(u.unsubscribe(),u=null,s.subscribe(i))}))}},2128:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineAll=void 0;var r=n(3240);t.combineAll=r.combineLatestAll},6318:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatest=void 0;var i=n(9258),s=n(4935),u=n(5498),a=n(1914),c=n(2872),l=n(2433);t.combineLatest=function e(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var d=l.popResultSelector(t);return d?c.pipe(e.apply(void 0,o([],r(t))),a.mapOneOrManyArgs(d)):s.operate((function(e,n){i.combineLatestInit(o([e],r(u.argsOrArgArray(t))))(n)}))}},3240:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestAll=void 0;var r=n(9258),o=n(2069);t.combineLatestAll=function(e){return o.joinAllInternals(r.combineLatest,e)}},5024:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestWith=void 0;var i=n(6318);t.combineLatestWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.combineLatest.apply(void 0,o([],r(e)))}},4919:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var i=n(4935),s=n(4413),u=n(2433),a=n(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=u.popScheduler(e);return i.operate((function(t,i){s.concatAll()(a.from(o([t],r(e)),n)).subscribe(i)}))}},4413:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatAll=void 0;var r=n(3783);t.concatAll=function(){return r.mergeAll(1)}},7498:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMap=void 0;var r=n(9475),o=n(3005);t.concatMap=function(e,t){return o.isFunction(t)?r.mergeMap(e,t,1):r.mergeMap(e,1)}},6109:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMapTo=void 0;var r=n(7498),o=n(3005);t.concatMapTo=function(e,t){return o.isFunction(t)?r.concatMap((function(){return e}),t):r.concatMap((function(){return e}))}},9664:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concatWith=void 0;var i=n(4919);t.concatWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.concat.apply(void 0,o([],r(e)))}},1995:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0;var r=n(3032),o=n(5432),i=n(4935),s=n(851),u={connector:function(){return new r.Subject}};t.connect=function(e,t){void 0===t&&(t=u);var n=t.connector;return i.operate((function(t,r){var i=n();o.from(e(s.fromSubscribable(i))).subscribe(r),r.add(t.subscribe(i))}))}},993:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.count=void 0;var r=n(122);t.count=function(e){return r.reduce((function(t,n,r){return!e||e(n,r)?t+1:t}),0)}},496:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0;var r=n(4935),o=n(2576),i=n(4990),s=n(7103);t.debounce=function(e){return r.operate((function(t,n){var r=!1,u=null,a=null,c=function(){if(null==a||a.unsubscribe(),a=null,r){r=!1;var e=u;u=null,n.next(e)}};t.subscribe(i.createOperatorSubscriber(n,(function(t){null==a||a.unsubscribe(),r=!0,u=t,a=i.createOperatorSubscriber(n,c,o.noop),s.innerFrom(e(t)).subscribe(a)}),(function(){c(),n.complete()}),void 0,(function(){u=a=null})))}))}},1385:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounceTime=void 0;var r=n(2445),o=n(4935),i=n(4990);t.debounceTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.operate((function(n,r){var o=null,s=null,u=null,a=function(){if(o){o.unsubscribe(),o=null;var e=s;s=null,r.next(e)}};function c(){var n=u+e,i=t.now();if(i<n)return o=this.schedule(void 0,n-i),void r.add(o);a()}n.subscribe(i.createOperatorSubscriber(r,(function(n){s=n,u=t.now(),o||(o=t.schedule(c,e),r.add(o))}),(function(){a(),r.complete()}),void 0,(function(){s=o=null})))}))}},1658:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultIfEmpty=void 0;var r=n(4935),o=n(4990);t.defaultIfEmpty=function(e){return r.operate((function(t,n){var r=!1;t.subscribe(o.createOperatorSubscriber(n,(function(e){r=!0,n.next(e)}),(function(){r||n.next(e),n.complete()})))}))}},5841:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0;var r=n(2445),o=n(8798),i=n(7513);t.delay=function(e,t){void 0===t&&(t=r.asyncScheduler);var n=i.timer(e,t);return o.delayWhen((function(){return n}))}},8798:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayWhen=void 0;var r=n(2239),o=n(4783),i=n(9438),s=n(8313),u=n(9475);t.delayWhen=function e(t,n){return n?function(s){return r.concat(n.pipe(o.take(1),i.ignoreElements()),s.pipe(e(t)))}:u.mergeMap((function(e,n){return t(e,n).pipe(o.take(1),s.mapTo(e))}))}},1080:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dematerialize=void 0;var r=n(3104),o=n(4935),i=n(4990);t.dematerialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){return r.observeNotification(e,t)})))}))}},3054:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinct=void 0;var r=n(4935),o=n(4990),i=n(2576);t.distinct=function(e,t){return r.operate((function(n,r){var s=new Set;n.subscribe(o.createOperatorSubscriber(r,(function(t){var n=e?e(t):t;s.has(n)||(s.add(n),r.next(t))}))),null==t||t.subscribe(o.createOperatorSubscriber(r,(function(){return s.clear()}),i.noop))}))}},8737:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilChanged=void 0;var r=n(4781),o=n(4935),i=n(4990);function s(e,t){return e===t}t.distinctUntilChanged=function(e,t){return void 0===t&&(t=r.identity),e=null!=e?e:s,o.operate((function(n,r){var o,s=!0;n.subscribe(i.createOperatorSubscriber(r,(function(n){var i=t(n);!s&&e(o,i)||(s=!1,o=i,r.next(n))})))}))}},7957:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilKeyChanged=void 0;var r=n(8737);t.distinctUntilKeyChanged=function(e,t){return r.distinctUntilChanged((function(n,r){return t?t(n[e],r[e]):n[e]===r[e]}))}},8633:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.elementAt=void 0;var r=n(2351),o=n(9154),i=n(1779),s=n(1658),u=n(4783);t.elementAt=function(e,t){if(e<0)throw new r.ArgumentOutOfRangeError;var n=arguments.length>=2;return function(a){return a.pipe(o.filter((function(t,n){return n===e})),u.take(1),n?s.defaultIfEmpty(t):i.throwIfEmpty((function(){return new r.ArgumentOutOfRangeError})))}}},911:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.endWith=void 0;var i=n(2239),s=n(5726);t.endWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return i.concat(t,s.of.apply(void 0,o([],r(e))))}}},2096:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.every=void 0;var r=n(4935),o=n(4990);t.every=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(o){e.call(t,o,i++,n)||(r.next(!1),r.complete())}),(function(){r.next(!0),r.complete()})))}))}},67:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaust=void 0;var r=n(5337);t.exhaust=r.exhaustAll},5337:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustAll=void 0;var r=n(4935),o=n(7103),i=n(4990);t.exhaustAll=function(){return r.operate((function(e,t){var n=!1,r=null;e.subscribe(i.createOperatorSubscriber(t,(function(e){r||(r=o.innerFrom(e).subscribe(i.createOperatorSubscriber(t,void 0,(function(){r=null,n&&t.complete()}))))}),(function(){n=!0,!r&&t.complete()})))}))}},5635:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustMap=void 0;var r=n(7291),o=n(7103),i=n(4935),s=n(4990);t.exhaustMap=function e(t,n){return n?function(i){return i.pipe(e((function(e,i){return o.innerFrom(t(e,i)).pipe(r.map((function(t,r){return n(e,t,i,r)})))})))}:i.operate((function(e,n){var r=0,i=null,u=!1;e.subscribe(s.createOperatorSubscriber(n,(function(e){i||(i=s.createOperatorSubscriber(n,void 0,(function(){i=null,u&&n.complete()})),o.innerFrom(t(e,r++)).subscribe(i))}),(function(){u=!0,!i&&n.complete()})))}))}},9745:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.expand=void 0;var r=n(4935),o=n(7788);t.expand=function(e,t,n){return void 0===t&&(t=1/0),t=(t||0)<1?1/0:t,r.operate((function(r,i){return o.mergeInternals(r,i,e,t,void 0,!0,n)}))}},9154:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.filter=void 0;var r=n(4935),o=n(4990);t.filter=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){return e.call(t,n,i++)&&r.next(n)})))}))}},9283:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.finalize=void 0;var r=n(4935);t.finalize=function(e){return r.operate((function(t,n){try{t.subscribe(n)}finally{n.add(e)}}))}},7119:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createFind=t.find=void 0;var r=n(4935),o=n(4990);function i(e,t,n){var r="index"===n;return function(n,i){var s=0;n.subscribe(o.createOperatorSubscriber(i,(function(o){var u=s++;e.call(t,o,u,n)&&(i.next(r?u:o),i.complete())}),(function(){i.next(r?-1:void 0),i.complete()})))}}t.find=function(e,t){return r.operate(i(e,t,"value"))},t.createFind=i},4706:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.findIndex=void 0;var r=n(4935),o=n(7119);t.findIndex=function(e,t){return r.operate(o.createFind(e,t,"index"))}},9219:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var r=n(9474),o=n(9154),i=n(4783),s=n(1658),u=n(1779),a=n(4781);t.first=function(e,t){var n=arguments.length>=2;return function(c){return c.pipe(e?o.filter((function(t,n){return e(t,n,c)})):a.identity,i.take(1),n?s.defaultIfEmpty(t):u.throwIfEmpty((function(){return new r.EmptyError})))}}},1788:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.flatMap=void 0;var r=n(9475);t.flatMap=r.mergeMap},9749:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.groupBy=void 0;var r=n(2419),o=n(7103),i=n(3032),s=n(4935),u=n(4990);t.groupBy=function(e,t,n,a){return s.operate((function(s,c){var l;t&&"function"!=typeof t?(n=t.duration,l=t.element,a=t.connector):l=t;var d=new Map,f=function(e){d.forEach(e),e(c)},p=function(e){return f((function(t){return t.error(e)}))},h=0,v=!1,y=new u.OperatorSubscriber(c,(function(t){try{var s=e(t),f=d.get(s);if(!f){d.set(s,f=a?a():new i.Subject);var g=(b=s,_=f,(w=new r.Observable((function(e){h++;var t=_.subscribe(e);return function(){t.unsubscribe(),0==--h&&v&&y.unsubscribe()}}))).key=b,w);if(c.next(g),n){var m=u.createOperatorSubscriber(f,(function(){f.complete(),null==m||m.unsubscribe()}),void 0,void 0,(function(){return d.delete(s)}));y.add(o.innerFrom(n(g)).subscribe(m))}}f.next(l?l(t):t)}catch(e){p(e)}var b,_,w}),(function(){return f((function(e){return e.complete()}))}),p,(function(){return d.clear()}),(function(){return v=!0,0===h}));s.subscribe(y)}))}},9438:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ignoreElements=void 0;var r=n(4935),o=n(4990),i=n(2576);t.ignoreElements=function(){return r.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,i.noop))}))}},8515:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=void 0;var r=n(4935),o=n(4990);t.isEmpty=function(){return r.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,(function(){t.next(!1),t.complete()}),(function(){t.next(!0),t.complete()})))}))}},2069:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.joinAllInternals=void 0;var r=n(4781),o=n(1914),i=n(2872),s=n(9475),u=n(2);t.joinAllInternals=function(e,t){return i.pipe(u.toArray(),s.mergeMap((function(t){return e(t)})),t?o.mapOneOrManyArgs(t):r.identity)}},2435:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var r=n(9474),o=n(9154),i=n(1980),s=n(1779),u=n(1658),a=n(4781);t.last=function(e,t){var n=arguments.length>=2;return function(c){return c.pipe(e?o.filter((function(t,n){return e(t,n,c)})):a.identity,i.takeLast(1),n?u.defaultIfEmpty(t):s.throwIfEmpty((function(){return new r.EmptyError})))}}},7291:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.map=void 0;var r=n(4935),o=n(4990);t.map=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){r.next(e.call(t,n,i++))})))}))}},8313:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mapTo=void 0;var r=n(7291);t.mapTo=function(e){return r.map((function(){return e}))}},3209:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.materialize=void 0;var r=n(3104),o=n(4935),i=n(4990);t.materialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){t.next(r.Notification.createNext(e))}),(function(){t.next(r.Notification.createComplete()),t.complete()}),(function(e){t.next(r.Notification.createError(e)),t.complete()})))}))}},2620:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.max=void 0;var r=n(122),o=n(3005);t.max=function(e){return r.reduce(o.isFunction(e)?function(t,n){return e(t,n)>0?t:n}:function(e,t){return e>t?e:t})}},9821:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var i=n(4935),s=n(5498),u=n(3783),a=n(2433),c=n(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=a.popScheduler(e),l=a.popNumber(e,1/0);return e=s.argsOrArgArray(e),i.operate((function(t,i){u.mergeAll(l)(c.from(o([t],r(e)),n)).subscribe(i)}))}},3783:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeAll=void 0;var r=n(9475),o=n(4781);t.mergeAll=function(e){return void 0===e&&(e=1/0),r.mergeMap(o.identity,e)}},7788:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeInternals=void 0;var r=n(7103),o=n(7738),i=n(4990);t.mergeInternals=function(e,t,n,s,u,a,c,l){var d=[],f=0,p=0,h=!1,v=function(){!h||d.length||f||t.complete()},y=function(e){return f<s?g(e):d.push(e)},g=function(e){a&&t.next(e),f++;var l=!1;r.innerFrom(n(e,p++)).subscribe(i.createOperatorSubscriber(t,(function(e){null==u||u(e),a?y(e):t.next(e)}),(function(){l=!0}),void 0,(function(){if(l)try{f--;for(var e=function(){var e=d.shift();c?o.executeSchedule(t,c,(function(){return g(e)})):g(e)};d.length&&f<s;)e();v()}catch(e){t.error(e)}})))};return e.subscribe(i.createOperatorSubscriber(t,y,(function(){h=!0,v()}))),function(){null==l||l()}}},9475:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMap=void 0;var r=n(7291),o=n(7103),i=n(4935),s=n(7788),u=n(3005);t.mergeMap=function e(t,n,a){return void 0===a&&(a=1/0),u.isFunction(n)?e((function(e,i){return r.map((function(t,r){return n(e,t,i,r)}))(o.innerFrom(t(e,i)))}),a):("number"==typeof n&&(a=n),i.operate((function(e,n){return s.mergeInternals(e,n,t,a)})))}},1211:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMapTo=void 0;var r=n(9475),o=n(3005);t.mergeMapTo=function(e,t,n){return void 0===n&&(n=1/0),o.isFunction(t)?r.mergeMap((function(){return e}),t,n):("number"==typeof t&&(n=t),r.mergeMap((function(){return e}),n))}},7267:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeScan=void 0;var r=n(4935),o=n(7788);t.mergeScan=function(e,t,n){return void 0===n&&(n=1/0),r.operate((function(r,i){var s=t;return o.mergeInternals(r,i,(function(t,n){return e(s,t,n)}),n,(function(e){s=e}),!1,void 0,(function(){return s=null}))}))}},9303:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeWith=void 0;var i=n(9821);t.mergeWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.merge.apply(void 0,o([],r(e)))}},9714:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.min=void 0;var r=n(122),o=n(3005);t.min=function(e){return r.reduce(o.isFunction(e)?function(t,n){return e(t,n)<0?t:n}:function(e,t){return e<t?e:t})}},3848:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.multicast=void 0;var r=n(9518),o=n(3005),i=n(1995);t.multicast=function(e,t){var n=o.isFunction(e)?e:function(){return e};return o.isFunction(t)?i.connect(t,{connector:n}):function(e){return new r.ConnectableObservable(e,n)}}},1184:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeOn=void 0;var r=n(7738),o=n(4935),i=n(4990);t.observeOn=function(e,t){return void 0===t&&(t=0),o.operate((function(n,o){n.subscribe(i.createOperatorSubscriber(o,(function(n){return r.executeSchedule(o,e,(function(){return o.next(n)}),t)}),(function(){return r.executeSchedule(o,e,(function(){return o.complete()}),t)}),(function(n){return r.executeSchedule(o,e,(function(){return o.error(n)}),t)})))}))}},6223:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=void 0;var i=n(4935),s=n(7103),u=n(5498),a=n(4990),c=n(2576);t.onErrorResumeNext=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=u.argsOrArgArray(e);return i.operate((function(e,t){var i=o([e],r(n)),u=function(){if(!t.closed)if(i.length>0){var e=void 0;try{e=s.innerFrom(i.shift())}catch(e){return void u()}var n=a.createOperatorSubscriber(t,void 0,c.noop,c.noop);e.subscribe(n),n.add(u)}else t.complete()};u()}))}},2731:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairwise=void 0;var r=n(4935),o=n(4990);t.pairwise=function(){return r.operate((function(e,t){var n,r=!1;e.subscribe(o.createOperatorSubscriber(t,(function(e){var o=n;n=e,r&&t.next([o,e]),r=!0})))}))}},5649:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.partition=void 0;var r=n(8634),o=n(9154);t.partition=function(e,t){return function(n){return[o.filter(e,t)(n),o.filter(r.not(e,t))(n)]}}},4691:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pluck=void 0;var r=n(7291);t.pluck=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.length;if(0===n)throw new Error("list of properties cannot be empty.");return r.map((function(t){for(var r=t,o=0;o<n;o++){var i=null==r?void 0:r[e[o]];if(void 0===i)return;r=i}return r}))}},4474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publish=void 0;var r=n(3032),o=n(3848),i=n(1995);t.publish=function(e){return e?function(t){return i.connect(e)(t)}:function(e){return o.multicast(new r.Subject)(e)}}},52:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishBehavior=void 0;var r=n(5240),o=n(9518);t.publishBehavior=function(e){return function(t){var n=new r.BehaviorSubject(e);return new o.ConnectableObservable(t,(function(){return n}))}}},2110:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishLast=void 0;var r=n(280),o=n(9518);t.publishLast=function(){return function(e){var t=new r.AsyncSubject;return new o.ConnectableObservable(e,(function(){return t}))}}},9864:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishReplay=void 0;var r=n(3274),o=n(3848),i=n(3005);t.publishReplay=function(e,t,n,s){n&&!i.isFunction(n)&&(s=n);var u=i.isFunction(n)?n:void 0;return function(n){return o.multicast(new r.ReplaySubject(e,t,s),u)(n)}}},9764:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.race=void 0;var i=n(5498),s=n(179);t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.raceWith.apply(void 0,o([],r(i.argsOrArgArray(e))))}},179:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.raceWith=void 0;var i=n(5182),s=n(4935),u=n(4781);t.raceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?s.operate((function(t,n){i.raceInit(o([t],r(e)))(n)})):u.identity}},122:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reduce=void 0;var r=n(8345),o=n(4935);t.reduce=function(e,t){return o.operate(r.scanInternals(e,t,arguments.length>=2,!1,!0))}},8739:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.refCount=void 0;var r=n(4935),o=n(4990);t.refCount=function(){return r.operate((function(e,t){var n=null;e._refCount++;var r=o.createOperatorSubscriber(t,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)n=null;else{var r=e._connection,o=n;n=null,!r||o&&r!==o||r.unsubscribe(),t.unsubscribe()}}));e.subscribe(r),r.closed||(n=e.connect())}))}},5313:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=void 0;var r=n(6332),o=n(4935),i=n(4990),s=n(7103),u=n(7513);t.repeat=function(e){var t,n,a=1/0;return null!=e&&("object"==typeof e?(t=e.count,a=void 0===t?1/0:t,n=e.delay):a=e),a<=0?function(){return r.EMPTY}:o.operate((function(e,t){var r,o=0,c=function(){if(null==r||r.unsubscribe(),r=null,null!=n){var e="number"==typeof n?u.timer(n):s.innerFrom(n(o)),a=i.createOperatorSubscriber(t,(function(){a.unsubscribe(),l()}));e.subscribe(a)}else l()},l=function(){var n=!1;r=e.subscribe(i.createOperatorSubscriber(t,void 0,(function(){++o<a?r?c():n=!0:t.complete()}))),n&&c()};l()}))}},4068:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeatWhen=void 0;var r=n(3032),o=n(4935),i=n(4990);t.repeatWhen=function(e){return o.operate((function(t,n){var o,s,u=!1,a=!1,c=!1,l=function(){return c&&a&&(n.complete(),!0)},d=function(){c=!1,o=t.subscribe(i.createOperatorSubscriber(n,void 0,(function(){c=!0,!l()&&(s||(s=new r.Subject,e(s).subscribe(i.createOperatorSubscriber(n,(function(){o?d():u=!0}),(function(){a=!0,l()})))),s).next()}))),u&&(o.unsubscribe(),o=null,u=!1,d())};d()}))}},64:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retry=void 0;var r=n(4935),o=n(4990),i=n(4781),s=n(7513),u=n(7103);t.retry=function(e){var t;void 0===e&&(e=1/0);var n=(t=e&&"object"==typeof e?e:{count:e}).count,a=void 0===n?1/0:n,c=t.delay,l=t.resetOnSuccess,d=void 0!==l&&l;return a<=0?i.identity:r.operate((function(e,t){var n,r=0,i=function(){var l=!1;n=e.subscribe(o.createOperatorSubscriber(t,(function(e){d&&(r=0),t.next(e)}),void 0,(function(e){if(r++<a){var d=function(){n?(n.unsubscribe(),n=null,i()):l=!0};if(null!=c){var f="number"==typeof c?s.timer(c):u.innerFrom(c(e,r)),p=o.createOperatorSubscriber(t,(function(){p.unsubscribe(),d()}),(function(){t.complete()}));f.subscribe(p)}else d()}else t.error(e)}))),l&&(n.unsubscribe(),n=null,i())};i()}))}},1188:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retryWhen=void 0;var r=n(3032),o=n(4935),i=n(4990);t.retryWhen=function(e){return o.operate((function(t,n){var o,s,u=!1,a=function(){o=t.subscribe(i.createOperatorSubscriber(n,void 0,void 0,(function(t){s||(s=new r.Subject,e(s).subscribe(i.createOperatorSubscriber(n,(function(){return o?a():u=!0})))),s&&s.next(t)}))),u&&(o.unsubscribe(),o=null,u=!1,a())};a()}))}},4193:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sample=void 0;var r=n(4935),o=n(2576),i=n(4990);t.sample=function(e){return r.operate((function(t,n){var r=!1,s=null;t.subscribe(i.createOperatorSubscriber(n,(function(e){r=!0,s=e}))),e.subscribe(i.createOperatorSubscriber(n,(function(){if(r){r=!1;var e=s;s=null,n.next(e)}}),o.noop))}))}},6170:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sampleTime=void 0;var r=n(2445),o=n(4193),i=n(8990);t.sampleTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.sample(i.interval(e,t))}},5876:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scan=void 0;var r=n(4935),o=n(8345);t.scan=function(e,t){return r.operate(o.scanInternals(e,t,arguments.length>=2,!0))}},8345:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scanInternals=void 0;var r=n(4990);t.scanInternals=function(e,t,n,o,i){return function(s,u){var a=n,c=t,l=0;s.subscribe(r.createOperatorSubscriber(u,(function(t){var n=l++;c=a?e(c,t,n):(a=!0,t),o&&u.next(c)}),i&&function(){a&&u.next(c),u.complete()}))}}},1791:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sequenceEqual=void 0;var r=n(4935),o=n(4990);t.sequenceEqual=function(e,t){return void 0===t&&(t=function(e,t){return e===t}),r.operate((function(n,r){var i={buffer:[],complete:!1},s={buffer:[],complete:!1},u=function(e){r.next(e),r.complete()},a=function(e,n){var i=o.createOperatorSubscriber(r,(function(r){var o=n.buffer,i=n.complete;0===o.length?i?u(!1):e.buffer.push(r):!t(r,o.shift())&&u(!1)}),(function(){e.complete=!0;var t=n.complete,r=n.buffer;t&&u(0===r.length),null==i||i.unsubscribe()}));return i};n.subscribe(a(i,s)),e.subscribe(a(s,i))}))}},5137:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.share=void 0;var i=n(5432),s=n(4783),u=n(3032),a=n(5125),c=n(4935);function l(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];return!0===t?(e(),null):!1===t?null:t.apply(void 0,o([],r(n))).pipe(s.take(1)).subscribe((function(){return e()}))}t.share=function(e){void 0===e&&(e={});var t=e.connector,n=void 0===t?function(){return new u.Subject}:t,r=e.resetOnError,o=void 0===r||r,s=e.resetOnComplete,d=void 0===s||s,f=e.resetOnRefCountZero,p=void 0===f||f;return function(e){var t=null,r=null,s=null,u=0,f=!1,h=!1,v=function(){null==r||r.unsubscribe(),r=null},y=function(){v(),t=s=null,f=h=!1},g=function(){var e=t;y(),null==e||e.unsubscribe()};return c.operate((function(e,c){u++,h||f||v();var m=s=null!=s?s:n();c.add((function(){0!=--u||h||f||(r=l(g,p))})),m.subscribe(c),t||(t=new a.SafeSubscriber({next:function(e){return m.next(e)},error:function(e){h=!0,v(),r=l(y,o,e),m.error(e)},complete:function(){f=!0,v(),r=l(y,d),m.complete()}}),i.from(e).subscribe(t))}))(e)}}},1348:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.shareReplay=void 0;var r=n(3274),o=n(5137);t.shareReplay=function(e,t,n){var i,s,u,a=!1;return e&&"object"==typeof e?(u=null!==(i=e.bufferSize)&&void 0!==i?i:1/0,t=null!==(s=e.windowTime)&&void 0!==s?s:1/0,a=!!e.refCount,n=e.scheduler):u=null!=e?e:1/0,o.share({connector:function(){return new r.ReplaySubject(u,t,n)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:a})}},8242:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.single=void 0;var r=n(9474),o=n(6156),i=n(8598),s=n(4935),u=n(4990);t.single=function(e){return s.operate((function(t,n){var s,a=!1,c=!1,l=0;t.subscribe(u.createOperatorSubscriber(n,(function(r){c=!0,e&&!e(r,l++,t)||(a&&n.error(new o.SequenceError("Too many matching values")),a=!0,s=r)}),(function(){a?(n.next(s),n.complete()):n.error(c?new i.NotFoundError("No matching values"):new r.EmptyError)})))}))}},3169:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skip=void 0;var r=n(9154);t.skip=function(e){return r.filter((function(t,n){return e<=n}))}},2454:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipLast=void 0;var r=n(4781),o=n(4935),i=n(4990);t.skipLast=function(e){return e<=0?r.identity:o.operate((function(t,n){var r=new Array(e),o=0;return t.subscribe(i.createOperatorSubscriber(n,(function(t){var i=o++;if(i<e)r[i]=t;else{var s=i%e,u=r[s];r[s]=t,n.next(u)}}))),function(){r=null}}))}},6931:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipUntil=void 0;var r=n(4935),o=n(4990),i=n(7103),s=n(2576);t.skipUntil=function(e){return r.operate((function(t,n){var r=!1,u=o.createOperatorSubscriber(n,(function(){null==u||u.unsubscribe(),r=!0}),s.noop);i.innerFrom(e).subscribe(u),t.subscribe(o.createOperatorSubscriber(n,(function(e){return r&&n.next(e)})))}))}},7913:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipWhile=void 0;var r=n(4935),o=n(4990);t.skipWhile=function(e){return r.operate((function(t,n){var r=!1,i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){return(r||(r=!e(t,i++)))&&n.next(t)})))}))}},9234:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.startWith=void 0;var r=n(2239),o=n(2433),i=n(4935);t.startWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=o.popScheduler(e);return i.operate((function(t,o){(n?r.concat(e,t,n):r.concat(e,t)).subscribe(o)}))}},276:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subscribeOn=void 0;var r=n(4935);t.subscribeOn=function(e,t){return void 0===t&&(t=0),r.operate((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}},9253:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchAll=void 0;var r=n(8518),o=n(4781);t.switchAll=function(){return r.switchMap(o.identity)}},8518:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMap=void 0;var r=n(7103),o=n(4935),i=n(4990);t.switchMap=function(e,t){return o.operate((function(n,o){var s=null,u=0,a=!1,c=function(){return a&&!s&&o.complete()};n.subscribe(i.createOperatorSubscriber(o,(function(n){null==s||s.unsubscribe();var a=0,l=u++;r.innerFrom(e(n,l)).subscribe(s=i.createOperatorSubscriber(o,(function(e){return o.next(t?t(n,e,l,a++):e)}),(function(){s=null,c()})))}),(function(){a=!0,c()})))}))}},1173:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMapTo=void 0;var r=n(8518),o=n(3005);t.switchMapTo=function(e,t){return o.isFunction(t)?r.switchMap((function(){return e}),t):r.switchMap((function(){return e}))}},3855:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchScan=void 0;var r=n(8518),o=n(4935);t.switchScan=function(e,t){return o.operate((function(n,o){var i=t;return r.switchMap((function(t,n){return e(i,t,n)}),(function(e,t){return i=t,t}))(n).subscribe(o),function(){i=null}}))}},4783:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.take=void 0;var r=n(6332),o=n(4935),i=n(4990);t.take=function(e){return e<=0?function(){return r.EMPTY}:o.operate((function(t,n){var r=0;t.subscribe(i.createOperatorSubscriber(n,(function(t){++r<=e&&(n.next(t),e<=r&&n.complete())})))}))}},1980:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.takeLast=void 0;var o=n(6332),i=n(4935),s=n(4990);t.takeLast=function(e){return e<=0?function(){return o.EMPTY}:i.operate((function(t,n){var o=[];t.subscribe(s.createOperatorSubscriber(n,(function(t){o.push(t),e<o.length&&o.shift()}),(function(){var e,t;try{for(var i=r(o),s=i.next();!s.done;s=i.next()){var u=s.value;n.next(u)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}n.complete()}),void 0,(function(){o=null})))}))}},9845:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeUntil=void 0;var r=n(4935),o=n(4990),i=n(7103),s=n(2576);t.takeUntil=function(e){return r.operate((function(t,n){i.innerFrom(e).subscribe(o.createOperatorSubscriber(n,(function(){return n.complete()}),s.noop)),!n.closed&&t.subscribe(n)}))}},6060:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeWhile=void 0;var r=n(4935),o=n(4990);t.takeWhile=function(e,t){return void 0===t&&(t=!1),r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){var o=e(n,i++);(o||t)&&r.next(n),!o&&r.complete()})))}))}},1138:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tap=void 0;var r=n(3005),o=n(4935),i=n(4990),s=n(4781);t.tap=function(e,t,n){var u=r.isFunction(e)||t||n?{next:e,error:t,complete:n}:e;return u?o.operate((function(e,t){var n;null===(n=u.subscribe)||void 0===n||n.call(u);var r=!0;e.subscribe(i.createOperatorSubscriber(t,(function(e){var n;null===(n=u.next)||void 0===n||n.call(u,e),t.next(e)}),(function(){var e;r=!1,null===(e=u.complete)||void 0===e||e.call(u),t.complete()}),(function(e){var n;r=!1,null===(n=u.error)||void 0===n||n.call(u,e),t.error(e)}),(function(){var e,t;r&&(null===(e=u.unsubscribe)||void 0===e||e.call(u)),null===(t=u.finalize)||void 0===t||t.call(u)})))})):s.identity}},7306:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttle=t.defaultThrottleConfig=void 0;var r=n(4935),o=n(4990),i=n(7103);t.defaultThrottleConfig={leading:!0,trailing:!1},t.throttle=function(e,n){return void 0===n&&(n=t.defaultThrottleConfig),r.operate((function(t,r){var s=n.leading,u=n.trailing,a=!1,c=null,l=null,d=!1,f=function(){null==l||l.unsubscribe(),l=null,u&&(v(),d&&r.complete())},p=function(){l=null,d&&r.complete()},h=function(t){return l=i.innerFrom(e(t)).subscribe(o.createOperatorSubscriber(r,f,p))},v=function(){if(a){a=!1;var e=c;c=null,r.next(e),!d&&h(e)}};t.subscribe(o.createOperatorSubscriber(r,(function(e){a=!0,c=e,(!l||l.closed)&&(s?v():h(e))}),(function(){d=!0,(!(u&&a&&l)||l.closed)&&r.complete()})))}))}},8968:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttleTime=void 0;var r=n(2445),o=n(7306),i=n(7513);t.throttleTime=function(e,t,n){void 0===t&&(t=r.asyncScheduler),void 0===n&&(n=o.defaultThrottleConfig);var s=i.timer(e,t);return o.throttle((function(){return s}),n)}},1779:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfEmpty=void 0;var r=n(9474),o=n(4935),i=n(4990);function s(){return new r.EmptyError}t.throwIfEmpty=function(e){return void 0===e&&(e=s),o.operate((function(t,n){var r=!1;t.subscribe(i.createOperatorSubscriber(n,(function(e){r=!0,n.next(e)}),(function(){return r?n.complete():n.error(e())})))}))}},8005:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeInterval=t.timeInterval=void 0;var r=n(2445),o=n(4935),i=n(4990);t.timeInterval=function(e){return void 0===e&&(e=r.asyncScheduler),o.operate((function(t,n){var r=e.now();t.subscribe(i.createOperatorSubscriber(n,(function(t){var o=e.now(),i=o-r;r=o,n.next(new s(t,i))})))}))};var s=function(e,t){this.value=e,this.interval=t};t.TimeInterval=s},4173:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeout=t.TimeoutError=void 0;var r=n(2445),o=n(1677),i=n(4935),s=n(7103),u=n(7029),a=n(4990),c=n(7738);function l(e){throw new t.TimeoutError(e)}t.TimeoutError=u.createErrorClass((function(e){return function(t){void 0===t&&(t=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=t}})),t.timeout=function(e,t){var n=o.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,u=n.first,d=n.each,f=n.with,p=void 0===f?l:f,h=n.scheduler,v=void 0===h?null!=t?t:r.asyncScheduler:h,y=n.meta,g=void 0===y?null:y;if(null==u&&null==d)throw new TypeError("No timeout provided.");return i.operate((function(e,t){var n,r,o=null,i=0,l=function(e){r=c.executeSchedule(t,v,(function(){try{n.unsubscribe(),s.innerFrom(p({meta:g,lastValue:o,seen:i})).subscribe(t)}catch(e){t.error(e)}}),e)};n=e.subscribe(a.createOperatorSubscriber(t,(function(e){null==r||r.unsubscribe(),i++,t.next(o=e),d>0&&l(d)}),void 0,void 0,(function(){(null==r?void 0:r.closed)||null==r||r.unsubscribe(),o=null}))),l(null!=u?"number"==typeof u?u:+u-v.now():d)}))}},7223:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutWith=void 0;var r=n(2445),o=n(1677),i=n(4173);t.timeoutWith=function(e,t,n){var s,u,a;if(n=null!=n?n:r.async,o.isValidDate(e)?s=e:"number"==typeof e&&(u=e),!t)throw new TypeError("No observable provided to switch to");if(a=function(){return t},null==s&&null==u)throw new TypeError("No timeout provided.");return i.timeout({first:s,each:u,scheduler:n,with:a})}},8975:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timestamp=void 0;var r=n(7950),o=n(7291);t.timestamp=function(e){return void 0===e&&(e=r.dateTimestampProvider),o.map((function(t){return{value:t,timestamp:e.now()}}))}},2:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toArray=void 0;var r=n(122),o=n(4935),i=function(e,t){return e.push(t),e};t.toArray=function(){return o.operate((function(e,t){r.reduce(i,[])(e).subscribe(t)}))}},2826:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.window=void 0;var r=n(3032),o=n(4935),i=n(4990),s=n(2576);t.window=function(e){return o.operate((function(t,n){var o=new r.Subject;n.next(o.asObservable());var u=function(e){o.error(e),n.error(e)};return t.subscribe(i.createOperatorSubscriber(n,(function(e){return null==o?void 0:o.next(e)}),(function(){o.complete(),n.complete()}),u)),e.subscribe(i.createOperatorSubscriber(n,(function(){o.complete(),n.next(o=new r.Subject)}),s.noop,u)),function(){null==o||o.unsubscribe(),o=null}}))}},7526:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowCount=void 0;var o=n(3032),i=n(4935),s=n(4990);t.windowCount=function(e,t){void 0===t&&(t=0);var n=t>0?t:e;return i.operate((function(t,i){var u=[new o.Subject],a=0;i.next(u[0].asObservable()),t.subscribe(s.createOperatorSubscriber(i,(function(t){var s,c;try{for(var l=r(u),d=l.next();!d.done;d=l.next())d.value.next(t)}catch(e){s={error:e}}finally{try{d&&!d.done&&(c=l.return)&&c.call(l)}finally{if(s)throw s.error}}var f=a-e+1;if(f>=0&&f%n==0&&u.shift().complete(),++a%n==0){var p=new o.Subject;u.push(p),i.next(p.asObservable())}}),(function(){for(;u.length>0;)u.shift().complete();i.complete()}),(function(e){for(;u.length>0;)u.shift().error(e);i.error(e)}),(function(){u=null})))}))}},8294:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowTime=void 0;var r=n(3032),o=n(2445),i=n(3865),s=n(4935),u=n(4990),a=n(6967),c=n(2433),l=n(7738);t.windowTime=function(e){for(var t,n,d=[],f=1;f<arguments.length;f++)d[f-1]=arguments[f];var p=null!==(t=c.popScheduler(d))&&void 0!==t?t:o.asyncScheduler,h=null!==(n=d[0])&&void 0!==n?n:null,v=d[1]||1/0;return s.operate((function(t,n){var o=[],s=!1,c=function(e){var t=e.window,n=e.subs;t.complete(),n.unsubscribe(),a.arrRemove(o,e),s&&d()},d=function(){if(o){var t=new i.Subscription;n.add(t);var s=new r.Subject,u={window:s,subs:t,seen:0};o.push(u),n.next(s.asObservable()),l.executeSchedule(t,p,(function(){return c(u)}),e)}};null!==h&&h>=0?l.executeSchedule(n,p,d,h,!0):s=!0,d();var f=function(e){return o.slice().forEach(e)},y=function(e){f((function(t){var n=t.window;return e(n)})),e(n),n.unsubscribe()};return t.subscribe(u.createOperatorSubscriber(n,(function(e){f((function(t){t.window.next(e),v<=++t.seen&&c(t)}))}),(function(){return y((function(e){return e.complete()}))}),(function(e){return y((function(t){return t.error(e)}))}))),function(){o=null}}))}},1883:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowToggle=void 0;var o=n(3032),i=n(3865),s=n(4935),u=n(7103),a=n(4990),c=n(2576),l=n(6967);t.windowToggle=function(e,t){return s.operate((function(n,s){var d=[],f=function(e){for(;0<d.length;)d.shift().error(e);s.error(e)};u.innerFrom(e).subscribe(a.createOperatorSubscriber(s,(function(e){var n=new o.Subject;d.push(n);var r,p=new i.Subscription;try{r=u.innerFrom(t(e))}catch(e){return void f(e)}s.next(n.asObservable()),p.add(r.subscribe(a.createOperatorSubscriber(s,(function(){l.arrRemove(d,n),n.complete(),p.unsubscribe()}),c.noop,f)))}),c.noop)),n.subscribe(a.createOperatorSubscriber(s,(function(e){var t,n,o=d.slice();try{for(var i=r(o),s=i.next();!s.done;s=i.next())s.value.next(e)}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}}),(function(){for(;0<d.length;)d.shift().complete();s.complete()}),f,(function(){for(;0<d.length;)d.shift().unsubscribe()})))}))}},4309:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowWhen=void 0;var r=n(3032),o=n(4935),i=n(4990),s=n(7103);t.windowWhen=function(e){return o.operate((function(t,n){var o,u,a=function(e){o.error(e),n.error(e)},c=function(){var t;null==u||u.unsubscribe(),null==o||o.complete(),o=new r.Subject,n.next(o.asObservable());try{t=s.innerFrom(e())}catch(e){return void a(e)}t.subscribe(u=i.createOperatorSubscriber(n,c,c,a))};c(),t.subscribe(i.createOperatorSubscriber(n,(function(e){return o.next(e)}),(function(){o.complete(),n.complete()}),a,(function(){null==u||u.unsubscribe(),o=null})))}))}},3041:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.withLatestFrom=void 0;var i=n(4935),s=n(4990),u=n(7103),a=n(4781),c=n(2576),l=n(2433);t.withLatestFrom=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=l.popResultSelector(e);return i.operate((function(t,i){for(var l=e.length,d=new Array(l),f=e.map((function(){return!1})),p=!1,h=function(t){u.innerFrom(e[t]).subscribe(s.createOperatorSubscriber(i,(function(e){d[t]=e,p||f[t]||(f[t]=!0,(p=f.every(a.identity))&&(f=null))}),c.noop))},v=0;v<l;v++)h(v);t.subscribe(s.createOperatorSubscriber(i,(function(e){if(p){var t=o([e],r(d));i.next(n?n.apply(void 0,o([],r(t))):t)}})))}))}},4400:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=n(7654),s=n(4935);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.operate((function(t,n){i.zip.apply(void 0,o([t],r(e))).subscribe(n)}))}},8593:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.zipAll=void 0;var r=n(7654),o=n(2069);t.zipAll=function(e){return o.joinAllInternals(r.zip,e)}},8096:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zipWith=void 0;var i=n(4400);t.zipWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.zip.apply(void 0,o([],r(e)))}},7631:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleArray=void 0;var r=n(2419);t.scheduleArray=function(e,t){return new r.Observable((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}},8489:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleAsyncIterable=void 0;var r=n(2419),o=n(7738);t.scheduleAsyncIterable=function(e,t){if(!e)throw new Error("Iterable cannot be null");return new r.Observable((function(n){o.executeSchedule(n,t,(function(){var r=e[Symbol.asyncIterator]();o.executeSchedule(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}},1297:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleIterable=void 0;var r=n(2419),o=n(3725),i=n(3005),s=n(7738);t.scheduleIterable=function(e,t){return new r.Observable((function(n){var r;return s.executeSchedule(n,t,(function(){r=e[o.iterator](),s.executeSchedule(n,t,(function(){var e,t,o;try{t=(e=r.next()).value,o=e.done}catch(e){return void n.error(e)}o?n.complete():n.next(t)}),0,!0)})),function(){return i.isFunction(null==r?void 0:r.return)&&r.return()}}))}},4001:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleObservable=void 0;var r=n(7103),o=n(1184),i=n(276);t.scheduleObservable=function(e,t){return r.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},5143:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.schedulePromise=void 0;var r=n(7103),o=n(1184),i=n(276);t.schedulePromise=function(e,t){return r.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},3676:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleReadableStreamLike=void 0;var r=n(8489),o=n(7823);t.scheduleReadableStreamLike=function(e,t){return r.scheduleAsyncIterable(o.readableStreamLikeToAsyncGenerator(e),t)}},5207:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduled=void 0;var r=n(4001),o=n(5143),i=n(7631),s=n(1297),u=n(8489),a=n(9500),c=n(6018),l=n(3909),d=n(2743),f=n(9595),p=n(9906),h=n(7823),v=n(3676);t.scheduled=function(e,t){if(null!=e){if(a.isInteropObservable(e))return r.scheduleObservable(e,t);if(l.isArrayLike(e))return i.scheduleArray(e,t);if(c.isPromise(e))return o.schedulePromise(e,t);if(f.isAsyncIterable(e))return u.scheduleAsyncIterable(e,t);if(d.isIterable(e))return s.scheduleIterable(e,t);if(h.isReadableStreamLike(e))return v.scheduleReadableStreamLike(e,t)}throw p.createInvalidObservableTypeError(e)}},1986:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0;var i=function(e){function t(t,n){return e.call(this)||this}return o(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(n(3865).Subscription);t.Action=i},9702:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncAction=void 0;var i=n(1986),s=n(8203),u=n(6967),a=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return o(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),s.intervalProvider.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;s.intervalProvider.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,u.arrRemove(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(i.Action);t.AsyncAction=a},3643:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncScheduler=void 0;var i=n(218),s=function(e){function t(t,n){void 0===n&&(n=i.Scheduler.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return o(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(i.Scheduler);t.AsyncScheduler=s},2445:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.async=t.asyncScheduler=void 0;var r=n(9702),o=n(3643);t.asyncScheduler=new o.AsyncScheduler(r.AsyncAction),t.async=t.asyncScheduler},7950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dateTimestampProvider=void 0,t.dateTimestampProvider={now:function(){return(t.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8203:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},r=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.intervalProvider=void 0,t.intervalProvider={setInterval:function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];var i=t.intervalProvider.delegate;return((null==i?void 0:i.setInterval)||setInterval).apply(void 0,r([],n(e)))},clearInterval:function(e){var n=t.intervalProvider.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(e)},delegate:void 0}},4590:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},r=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutProvider=void 0,t.timeoutProvider={setTimeout:function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];var i=t.timeoutProvider.delegate;return((null==i?void 0:i.setTimeout)||setTimeout).apply(void 0,r([],n(e)))},clearTimeout:function(e){var n=t.timeoutProvider.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,t)=>{function n(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(t,"__esModule",{value:!0}),t.iterator=t.getSymbolIterator=void 0,t.getSymbolIterator=n,t.iterator=n()},2801:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observable=void 0,t.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},2351:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ArgumentOutOfRangeError=void 0;var r=n(7029);t.ArgumentOutOfRangeError=r.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyError=void 0;var r=n(7029);t.EmptyError=r.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},8598:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundError=void 0;var r=n(7029);t.NotFoundError=r.createErrorClass((function(e){return function(t){e(this),this.name="NotFoundError",this.message=t}}))},2642:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectUnsubscribedError=void 0;var r=n(7029);t.ObjectUnsubscribedError=r.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SequenceError=void 0;var r=n(7029);t.SequenceError=r.createErrorClass((function(e){return function(t){e(this),this.name="SequenceError",this.message=t}}))},4805:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnsubscriptionError=void 0;var r=n(7029);t.UnsubscriptionError=r.createErrorClass((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}))},2433:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.popNumber=t.popScheduler=t.popResultSelector=void 0;var r=n(3005),o=n(9016);function i(e){return e[e.length-1]}t.popResultSelector=function(e){return r.isFunction(i(e))?e.pop():void 0},t.popScheduler=function(e){return o.isScheduler(i(e))?e.pop():void 0},t.popNumber=function(e,t){return"number"==typeof i(e)?e.pop():t}},1203:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsArgArrayOrObject=void 0;var n=Array.isArray,r=Object.getPrototypeOf,o=Object.prototype,i=Object.keys;t.argsArgArrayOrObject=function(e){if(1===e.length){var t=e[0];if(n(t))return{args:t,keys:null};if((u=t)&&"object"==typeof u&&r(u)===o){var s=i(t);return{args:s.map((function(e){return t[e]})),keys:s}}}var u;return{args:e,keys:null}}},5498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsOrArgArray=void 0;var n=Array.isArray;t.argsOrArgArray=function(e){return 1===e.length&&n(e[0])?e[0]:e}},6967:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arrRemove=void 0,t.arrRemove=function(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}},7029:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createErrorClass=void 0,t.createErrorClass=function(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}},641:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createObject=void 0,t.createObject=function(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}},6110:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.captureError=t.errorContext=void 0;var r=n(3280),o=null;t.errorContext=function(e){if(r.config.useDeprecatedSynchronousErrorHandling){var t=!o;if(t&&(o={errorThrown:!1,error:null}),e(),t){var n=o,i=n.errorThrown,s=n.error;if(o=null,i)throw s}}else e()},t.captureError=function(e){r.config.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=e)}},7738:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.executeSchedule=void 0,t.executeSchedule=function(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}},4781:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.identity=void 0,t.identity=function(e){return e}},3909:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArrayLike=void 0,t.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isAsyncIterable=void 0;var r=n(3005);t.isAsyncIterable=function(e){return Symbol.asyncIterator&&r.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValidDate=void 0,t.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=void 0,t.isFunction=function(e){return"function"==typeof e}},9500:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isInteropObservable=void 0;var r=n(2801),o=n(3005);t.isInteropObservable=function(e){return o.isFunction(e[r.observable])}},2743:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isIterable=void 0;var r=n(3725),o=n(3005);t.isIterable=function(e){return o.isFunction(null==e?void 0:e[r.iterator])}},6018:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isPromise=void 0;var r=n(3005);t.isPromise=function(e){return r.isFunction(null==e?void 0:e.then)}},7823:function(e,t,n){var r=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},i=this&&this.__asyncGenerator||function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),s=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){s.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=i[e](t)).value instanceof o?Promise.resolve(n.value.v).then(c,l):d(s[0][2],n)}catch(e){d(s[0][3],e)}var n}function c(e){a("next",e)}function l(e){a("throw",e)}function d(e,t){e(t),s.shift(),s.length&&a(s[0][0],s[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.isReadableStreamLike=t.readableStreamLikeToAsyncGenerator=void 0;var s=n(3005);t.readableStreamLikeToAsyncGenerator=function(e){return i(this,arguments,(function(){var t,n,i;return r(this,(function(r){switch(r.label){case 0:t=e.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,o(t.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,o(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,o(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))},t.isReadableStreamLike=function(e){return s.isFunction(null==e?void 0:e.getReader)}},9016:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isScheduler=void 0;var r=n(3005);t.isScheduler=function(e){return e&&r.isFunction(e.schedule)}},4935:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.operate=t.hasLift=void 0;var r=n(3005);function o(e){return r.isFunction(null==e?void 0:e.lift)}t.hasLift=o,t.operate=function(e){return function(t){if(o(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mapOneOrManyArgs=void 0;var i=n(7291),s=Array.isArray;t.mapOneOrManyArgs=function(e){return i.map((function(t){return function(e,t){return s(t)?e.apply(void 0,o([],r(t))):e(t)}(e,t)}))}},2576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.noop=void 0,t.noop=function(){}},8634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0,t.not=function(e,t){return function(n,r){return!e.call(t,n,r)}}},2872:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pipeFromArray=t.pipe=void 0;var r=n(4781);function o(e){return 0===e.length?r.identity:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o(e)},t.pipeFromArray=o},7968:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reportUnhandledError=void 0;var r=n(3280),o=n(4590);t.reportUnhandledError=function(e){o.timeoutProvider.setTimeout((function(){var t=r.config.onUnhandledError;if(!t)throw e;t(e)}))}},9906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createInvalidObservableTypeError=void 0,t.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},4857:(e,t,n)=>{t.BN=void 0;n(6474),n(5382),n(9715),n(3814),n(7211),n(4943),n(1240),n(9548),n(2128),n(3240),n(6318),n(5024),n(4919),n(4413),n(7498),n(6109),n(9664),n(1995),n(993),n(496),n(1385),n(1658),n(5841),n(8798),n(1080),n(3054),n(8737),n(7957),n(8633),n(911),n(2096),n(67),n(5337),n(5635),n(9745),n(9154),n(9283),n(7119),n(4706),n(9219),n(9749),n(9438),n(8515),n(2435),n(7291),n(8313),n(3209),n(2620),n(9821),n(3783),n(1788),n(9475),n(1211),n(7267),n(9303),n(9714),n(3848),n(1184),n(6223),n(2731),n(5649),n(4691),n(4474),n(52),n(2110),n(9864),n(9764),n(179),n(122),n(5313),n(4068),n(64),n(1188),n(8739),n(4193),n(6170),n(5876),n(1791);var r=n(5137);Object.defineProperty(t,"BN",{enumerable:!0,get:function(){return r.share}});n(1348),n(8242),n(3169),n(2454),n(6931),n(7913),n(9234),n(276),n(9253),n(8518),n(1173),n(3855),n(4783),n(1980),n(9845),n(6060),n(1138),n(7306),n(8968),n(1779),n(8005),n(4173),n(7223),n(8975),n(2),n(2826),n(7526),n(8294),n(1883),n(4309),n(3041),n(4400),n(8593),n(8096)},6168:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.reOrderProofObject=t.signProofObject=t.getClaims=t.signCredentialObject=t.signCredential=t.reOrderCredentialProof=t.sortObjectAlphabetically=t.calculateMinutesDifference=t.getKeyPurpose=t.getSha3Key=t.knownAddressesContains=t.didContractKeyWrong=t.issuerCredentialSignatureWrong=t.userCredentialSignatureWrong=t.validCredentialsFunc=t.validCredentialsTrustedPartiesFunc=void 0;const o=r(n(8519)),i=n(1485);async function s(e,t,n,r){"string"==typeof e&&(e=JSON.parse(e)),console.log("before reOrderCredentialObject:",JSON.stringify(e)),e=h(e),console.log("after reOrderCredentialObject:",JSON.stringify(e));const s=new o.default(t),l=[];let d=0,f=0;const v=[];for(const[o]of Object.entries(e.credentials)){const h={credentials:{[o]:JSON.parse(JSON.stringify(e.credentials[o]))}};delete h.credentials[o].proof.signature,console.log("RECOVERING THIS OBJECT:",JSON.stringify(h));const y=s.eth.accounts.recover(JSON.stringify(h),e.credentials[o].proof.signature);if(u(e.credentials[o].proof.holder,y))for(const[,u]of Object.entries(e.credentials[o].credentials)){if(f++,!u.version){v.push({credential:u,code:8,message:"Incorrect credential version. Renew your credentials"});continue}const h=new Date(u.expirationDate),y=new Date;if(y>h)v.push({credential:u,code:7,message:`Your credential expired on ${h}`});else if(p(y,new Date(e.credentials[o].proof.nonce))>5&&n)v.push({credential:u,code:2,message:"Nonce too old"});else if(a(u,s)){const n=u.proof.holder,a=u.issuer.id.split(":")[2];if(await c(s,t,i.claimHolderAbi,n,a,l)){const n=e.credentials[o].proof.holder,a=u.id.split(":")[2];await c(s,t,i.claimHolderAbi,n,a,l)?r&&void 0!==u.verified&&!0!==u.verified?v.push({credential:u,code:15,message:"Liveness check required but credential not verified"}):d++:v.push({credential:u,code:6,message:"User did incorrect"})}else v.push({credential:u,code:5,message:"Issuer did incorrect"})}else v.push({credential:u,code:4,message:"Issuer signature incorrect"})}else v.push({credential:e.credentials[o],code:3,message:"User signature incorrect"})}return console.log("only cred validCredentialsAmount:",d),console.log("only cred credentialsAmount:",f),f>0&&d===f?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential"}:{valid:!1,code:1,message:"Invalid credential",invalidCredentials:v}}function u(e,t){return e===t||(console.error(`User signature of credential ${e} does not match recoveredAddress ${t}`),!1)}function a(e,t){const n=e.proof.signature,r=e.proof.holder,o=JSON.parse(JSON.stringify(e));delete o.proof.signature;const i=t.eth.accounts.recover(JSON.stringify(o),n);return r===i||(console.error(`Issuer signature of credential ${r} does not match recoveredAddress ${i}`),!1)}async function c(e,t,n,r,i,s){const u=s.find((e=>e.did==i&&e.holderKey===r));if(u)return u.result;{const u=[];if(i===r)return s.push({did:i,holderKey:r,result:!0}),!0;{const a=d(r,e),c=new(new o.default(t).eth.Contract)(n,i);if(!l(u,a,i)){const e=parseInt(await f(c,a),10);if(0===e||e>3)return s.push({did:i,holderKey:r,result:!1}),!1;u.push({sha3Key:a,didAddress:i})}return s.push({did:i,holderKey:r,result:!0}),!0}}}function l(e,t,n){for(const r of e)if(r.sha3Key===t&&r.didContractAddress===n)return!0}function d(e,t){return t.utils.keccak256(e)}async function f(e,t){return null===e.options.address?Promise.resolve("-1"):await e.methods.getKeyPurpose(t).call()}function p(e,t){let n=(e.getTime()-t.getTime())/1e3;return n/=60,Math.abs(Math.round(n))}function h(e){console.log("reOrderCredentialObject:",e),console.log("All providers:",Object.keys(e.credentials));for(const t of Object.keys(e.credentials)){console.log("reOrderCredentialObject provider:",t);const n=[];console.log("credentialObject.credentials:",e.credentials),console.log("credentialObject.credentials[provider]:",e.credentials[t]),console.log("credentialObject.credentials[provider].credentials:",e.credentials[t].credentials),console.log("Object.keys(credentialObject.credentials[provider].credentials):",Object.keys(e.credentials[t].credentials));for(const r of Object.keys(e.credentials[t].credentials))console.log("credentialKey:",r),n.push(r);console.log("before sort credentialKeys:",n),n.sort(),console.log("after sort credentialKeys:",n);const r={};for(const o of n){const n=v(e.credentials[t].credentials[o]);console.log("reOrderedCredential:",n),r[o]=n}console.log("reOrderedCredentials:",r),console.log("reOrderCredentialObject credential[provider].proof:",e.credentials[t].proof),e.credentials[t].proof=g(e.credentials[t].proof),e.credentials[t]={credentials:r,proof:e.credentials[t].proof}}return e}function v(e){return y(e)}function y(e){const t={},n=Object.keys(e);n.sort(((e,t)=>(e=e.toLowerCase())<(t=t.toLowerCase())?-1:e>t?1:0));for(const r in n){const o=n[r];"object"!=typeof e[o]||e[o]instanceof Array?t[o]=e[o]:t[o]=y(e[o])}return t}function g(e){return{holder:e.holder,nonce:e.nonce,signature:e.signature,type:e.type}}async function m(e,t,n){const r=new n.eth.Contract(i.claimHolderAbi,t),o=await r.methods.getClaimIdsByType(e).call();if(!(o.length>0))return Promise.resolve(null);try{const e=await r.methods.getClaim(o[o.length-1]).call(),t=JSON.parse(n.utils.toAscii(e.data));return Promise.resolve(t)}catch(e){return Promise.resolve(null)}}function b(e){return y(e)}t.validCredentialsTrustedPartiesFunc=async function(e,t,n,r,i,u){const a=new o.default(t),c=function(e,t){const n={success:!0,missingKeys:[]};for(const r of t.credentials){let o=!1;if(t.minimumRequired&&(o=!!t.minimumRequired.data.find((e=>e===r.key))),r.required&&!o){Array.isArray(r.provider)||(r.provider=[r.provider]);let t=!1;for(const n of r.provider)e.credentials[n]&&e.credentials[n].credentials&&e.credentials[n].credentials[r.key]&&(t=!0);t||(n.success=!1,n.missingKeys.push(r))}}if(t.minimumRequired){const r=Object.keys(e.credentials),o=t.minimumRequired.data;let i=0;for(const t of r)for(const n of o)e.credentials[t]&&e.credentials[t].credentials&&e.credentials[t].credentials[n]&&i++;i<t.minimumRequired.amount&&(n.success=!1,n.missingMessage=`Check the minimumRequired array. Found ${i} items and required amount ${t.minimumRequired.amount}`)}return n}(e,n);if(!c.success)return c.credentials=e,c;const l=await s(e,t,i,u);if(!l.valid)return l;for(const e of r)a.utils.isAddress(e)||(console.error(`Trusted party did ${e} is NOT a valid address and is removed.`),r=r.filter((t=>t!==e)));if(r.length>0){const t=[];let n=0,o=0;const i=[];for(const[s]of Object.entries(e.credentials))for(const[u,c]of Object.entries(e.credentials[s].credentials)){o++;const e=c.issuer.id.split(":")[2];let s=!1,l=null,d=null,f=!0;for(const o of r){const r=t.find((t=>t.issuerDidContractAddress===e&&t.did===o));let p=null;if(r?p=r.claim:(p=await m(e,o,a),t.push({issuerDidContractAddress:e,did:o,claim:p})),p)if(f=!1,new Date(p.expirationDate)>new Date){const e=p.keys;d=e;const t=`${c.provider}_${u}`;if(!e.includes(t)){l=t,console.log(`Provider ${o} was not allowed to issue key ${t}. Skipping this one`);break}if(!l){n++,s=!0;break}}else i.push({credential:c,valid:!1,code:14,message:"Claim expired."})}f?i.push({credential:c,valid:!1,code:13,message:`No claims found to check. Checked dids ${r}`}):!l||s||i.push({credential:c,valid:!1,code:12,message:`Tried to validate attribute ${l} but provider was not allowed to issue. Allowed attributes: ${d.join(", ")}`})}return console.log("trusted check validCredentialsAmount:",n),console.log("trusted check credentialsAmount:",o),n===o?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential",requestedCheckResult:c}:{valid:!1,code:1,message:"Invalid credentials",invalidCredentials:i}}return{valid:!1,code:10,message:"No trusted parties to check."}},t.validCredentialsFunc=s,t.userCredentialSignatureWrong=u,t.issuerCredentialSignatureWrong=a,t.didContractKeyWrong=c,t.knownAddressesContains=l,t.getSha3Key=d,t.getKeyPurpose=f,t.calculateMinutesDifference=p,t.sortObjectAlphabetically=y,t.reOrderCredentialProof=g,t.signCredential=function(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=v(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature},t.signCredentialObject=function(e,t){"string"==typeof e&&(e=JSON.parse(e)),console.log("before signCredentialObject:",JSON.stringify(e)),e=h(e),console.log("after signCredentialObject:",JSON.stringify(e));const n=new o.default;return console.log("SIGNING THIS OBJECT:",JSON.stringify(e)),n.eth.accounts.sign(JSON.stringify(e),t).signature},t.getClaims=m,t.signProofObject=function(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=b(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature},t.reOrderProofObject=b},1015:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtilsProvider=void 0;const o=n(2254),i=n(6168);let s=class{async validCredentials(e,t,n,r){return(0,i.validCredentialsFunc)(e,t,n,r)}async validCredentialsTrustedParties(e,t,n,r,o,s){return(0,i.validCredentialsTrustedPartiesFunc)(e,t,n,r,o,s)}signCredential(e,t){return(0,i.signCredential)(e,t)}signCredentialObject(e,t){return(0,i.signCredentialObject)(e,t)}signProofObject(e,t){return console.log("ProofmeUtilsProvider signProofObject"),(0,i.signProofObject)(e,t)}};s=r([(0,o.Injectable)()],s),t.ProofmeUtilsProvider=s},2582:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.SignalingServer=void 0;const s=i(n(5352)),u=n(5828),a=i(n(6113));t.SignalingServer=class{wsServer;rtcConnectionConfig;setRTCConnectionConfig(e){this.rtcConnectionConfig=e}getRTCConnectionConfig(e){if(console.log("getRTCConnectionConfig turnEnabled:",this.rtcConnectionConfig.turnEnabled),console.log("getRTCConnectionConfig stunEnabled:",this.rtcConnectionConfig.stunEnabled),this.rtcConnectionConfig.turnEnabled){console.log("USE TURN");const t=`${Math.floor(Date.now()/1e3)+this.rtcConnectionConfig.turnExpiration}:${e}`,n=a.createHmac("sha1",this.rtcConnectionConfig.turnSecret).update(t.toString()).digest("base64");return console.log("username:",t),console.log("credential:",n),{iceCandidatePoolSize:5,iceServers:[{urls:[this.rtcConnectionConfig.turnUrl],credential:n,username:t}]}}if(this.rtcConnectionConfig.stunEnabled)return console.log("USE STUN"),{iceServers:[{urls:[this.rtcConnectionConfig.stunUrl]}]}}startSignal(e){console.log("Starting Signaling server."),this.wsServer=new s.Server({server:e});const t=(e,t)=>{e.send(JSON.stringify(t))};this.wsServer.on("connection",(e=>{e.uuid=(0,u.v4)(),e.did=null,e.host=!1,e.authenticated=!1,e.connected=null,e.on("error",(e=>{})),e.on("message",(n=>{let r;try{r=JSON.parse(n)}catch(e){console.log("Invalid JSON"),r={}}const{type:o,token:i,host:s,offer:a,answer:c,candidate:l}=r;switch(o){case"auth":i?(e.authenticated=!0,t(e,{type:"AUTH",success:!0,message:"Authentication successful"})):t(e,{type:"auth",success:!1,message:"Could not validate token"});break;case"host":e.host=!0,t(e,{type:"host",success:!0,message:"Host initialised "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")});break;case"ping":t(e,{type:"pong"});break;case"connect":{const n=[...this.wsServer.clients].filter((e=>e.uuid===s&&null===e.connected&&!0===e.host));1===n.length?(t(n[0],{type:"connected",success:!0,message:"Client connected "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")}),t(e,{type:"connected",success:!0,message:"Connected to "+s,webRtcConnectionConfig:this.getRTCConnectionConfig("client")}),e.connected=n[0].uuid,n[0].connected=e.uuid):t(e,{type:"connected",success:!1,message:"Could not connect to "+s});break}case"offer":if(null!=e.connected&&this.wsServer.clients.size>0){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"offer",success:!0,offer:a}),t(e,{type:"offer",success:!0,offer:a})):t(e,{type:"offer",success:!1,offer:a,message:"Connection not found."})}else t(e,{type:"offer",success:!1,offer:a,message:"Too soon..."});break;case"answer":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"answer",success:!0,answer:c}),t(e,{type:"answer",success:!0,answer:c})):t(e,{type:"answer",success:!1,answer:c,message:"Connection not found."})}else t(e,{type:"answer",success:!1,answer:c,message:"Too soon..."});break;case"candidate":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?t(n[0],{type:"candidate",success:!0,candidate:l}):t(e,{type:"candidate",success:!1,candidate:l,message:"Connection not found."})}else t(e,{type:"candidate",success:!1,candidate:l,message:"Too soon..."});break;case"leave":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));e.uuid=(0,u.v4)(),1===n.length?(t(n[0],{type:"leave",success:!0,message:"Connection left on receive leave"}),n[0].connected=null,t(e,{type:"leave",success:!0,message:"Connection left.",uuid:e.uuid})):t(e,{type:"leave",success:!1,message:"Connection not found.",uuid:e.uuid}),e.connected=null}else e.uuid=(0,u.v4)(),t(e,{type:"leave",success:!1,message:"Not connected to host/client.",uuid:e.uuid});break;default:t(e,{type:"error",message:"Command not found: "+o})}})),e.on("close",((e,n,r)=>{if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length&&(t(n[0],{type:"leave",success:!0,message:"Connection left on websocket close"}),n[0].connected=null),e.connected=null}})),e.send(JSON.stringify({type:"connect",message:"Well hello there, I am the Signaling Server",success:!0})),console.log("Connection received from:",e.uuid)}))}}},1485:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.claimHolderAbi=void 0,t.claimHolderAbi=[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}]},2733:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var u=e.length-1;u>=0;u--)(o=e[u])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.WebRtcProvider=void 0;const o=n(2254),i=n(1964),s=n(1904),u=n(367);let a=class{webRtcConfig;hostUuid;peerConnection=null;dataChannel=null;wsClient=null;receivedActions$=new i.BehaviorSubject(null);uuid$=new i.BehaviorSubject(null);websocketConnectionClosed$=new i.BehaviorSubject(null);websocketConnectionOpen$=new i.BehaviorSubject(null);websocketConnectionError$=new i.BehaviorSubject(null);webRtcConnectionConfig;connectionTimeout=null;pongCheckInterval=null;pingTimeout=null;WEBSOCKET_PING_ANSWER_DELAY=1e3;WEBSOCKET_PING_PONG_ALLOWED_TIME=3e3;getConfig(){return this.webRtcConfig}setHostUuid(e){this.hostUuid=e}sendData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?this.dataChannel.send(JSON.stringify({action:e,...t})):console.log(`Attempted to send data with action ${e} but data channel is not open`)}setUuid(e){this.uuid$.next(e)}disconnect(){console.log("Disconnect"),this.peerConnection&&(console.log("Peerconnection closed"),this.peerConnection.close()),this.dataChannel&&(console.log("dataChannel closed"),this.dataChannel.close()),this.wsClient&&(console.log("Websocket closed"),this.wsClient.close(),this.wsClient.onclose=null),this.peerConnection=null,this.dataChannel=null,this.wsClient=null,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)}remoteDisconnect(){console.log("datachannel:",this.dataChannel),this.dataChannel&&"open"===this.dataChannel.readyState&&(console.log("Data channel sending disconnect"),this.dataChannel.send(JSON.stringify({action:"disconnect"}))),console.log("Waiting 1 second for client disconnect"),setTimeout((()=>{console.log("Client disconnect"),this.disconnect()}),1e3)}async sendOffer(e,t){const n=await e.createOffer();await e.setLocalDescription(n),t.send(JSON.stringify({type:"offer",offer:n}))}async launchWebsocketClient(e){this.webRtcConfig=e;let t=null;this.receivedActions$=new i.BehaviorSubject(null),this.connectionTimeout&&clearTimeout(this.connectionTimeout),this.uuid$=new i.BehaviorSubject(null),this.websocketConnectionClosed$=new i.BehaviorSubject(null),this.websocketConnectionOpen$=new i.BehaviorSubject(null),this.websocketConnectionError$=new i.BehaviorSubject(null);let n=this.webRtcConfig.signalingUrl;n||(console.log("signalingUrl undefined, falling back to default"),n="wss://auth.proofme.id"),console.log("Connecting to signaling server:",n),this.wsClient=new u.w3cwebsocket(n),this.connectionTimeout=setTimeout((()=>{!0!==t&&(this.websocketConnectionError$.next(!0),this.wsClient.close())}),1e4),this.wsClient.onerror=e=>{console.log("Websocket error: "+e.toString()),t=!1,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1),this.websocketConnectionError$.next(!0)},this.wsClient.onclose=()=>{console.log("Websocket connection closed"),this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)},this.wsClient.onopen=()=>{console.log("Websocket connection open"),t=!0,this.websocketConnectionClosed$.next(!1),this.websocketConnectionOpen$.next(!0)},this.wsClient.onmessage=async e=>{if(e.data){let t;try{t=JSON.parse(e.data)}catch(e){console.log("Websocket onmessage ERROR: Invalid JSON"),t={}}const{type:n,message:r,success:o,uuid:i,offer:u,answer:a,candidate:c,webRtcConnectionConfig:l}=t;switch(n){case"error":console.log("Websocket onmessage error: ",r),"Command not found: ping"==r&&(clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{console.log(`Ping pong took more than ${this.WEBSOCKET_PING_PONG_ALLOWED_TIME}ms. Disconnecting`),this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing());break;case"connect":if(console.log("Websocket connect success:",o),o)if(this.webRtcConfig.isHost){console.log("Websocket connect is host");const e=500;let t=0;const n=setInterval((()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"host"}))),t>=e&&clearInterval(n),t++}),50)}else{console.log("Websocket connect is not host");const e=500;let t=0;const n=setInterval((async()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"connect",host:this.hostUuid}))),t>=e&&clearInterval(n),t++}),50)}else console.log("Websocket onmessage connect failure");break;case"connected":console.log("Connected with webRtcConnectionConfig:",l),clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),l&&(this.webRtcConnectionConfig=l,this.webRtcConfig.isHost||await this.setupPeerconnection(this.hostUuid)),i&&this.webRtcConfig.isHost&&(console.log("Websocket onmessage connected success with client uuid:",i),await this.sendOffer(this.peerConnection,this.wsClient));break;case"pong":clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{console.log(`Ping pong took more than ${this.WEBSOCKET_PING_PONG_ALLOWED_TIME}ms. Disconnecting`),this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing();break;case"offer":if(console.log("Received offer:",u),console.log("this.peerConnection.connectionState:",this.peerConnection.connectionState),u&&!this.webRtcConfig.isHost){await this.peerConnection.setRemoteDescription(new s.RTCSessionDescription(u));const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.wsClient.send(JSON.stringify({type:"answer",answer:e}))}break;case"host":console.log("Received host"),i&&this.webRtcConfig.isHost&&(console.log("Acting as host, waiting for someone to connect to uuid "+i),this.setUuid(i),l&&(this.webRtcConnectionConfig=l),await this.setupPeerconnection(i),this.sendPing());break;case"leave":console.log("Websocket onmessage leave host"),this.setUuid(null),this.disconnect();break;case"answer":console.log("Received answer"),console.log("this.peerConnection.connectionState:",this.peerConnection.connectionState),a&&this.webRtcConfig.isHost&&await this.peerConnection.setRemoteDescription(new s.RTCSessionDescription(a));break;case"candidate":if(console.log("Received candidate from client!"),console.log("candidate:",c),c){const e=new s.RTCIceCandidate(c);await this.peerConnection.addIceCandidate(e)}break;default:console.error("Websocket onmessage default")}}}}sendPing(){this.pingTimeout=setTimeout((()=>{1===this.wsClient.readyState?this.wsClient.send(JSON.stringify({type:"ping"})):console.log("Websocket closed in the meantime... Not sending ping")}),this.WEBSOCKET_PING_ANSWER_DELAY)}async setupPeerconnection(e){console.log("setupPeerconnection with uuid:",e),console.log("this.webRtcConnectionConfig:",this.webRtcConnectionConfig),this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&(console.log("peerConnection disconnect"),this.disconnect()),this.receivedActions$.next(t)}catch(e){console.log("peerConnection ERROR: Invalid JSON"),t={}}},e.channel.onopen=()=>{console.log("Sending p2p connected!"),this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),console.log("p2p connected so close the websocket connection"),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{console.log("event:",e),console.log("this.peerConnection.iceConnectionState:",this.peerConnection.iceConnectionState),"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){console.log("**************** Received candidate over peer, sending to signaller"),console.log("Candidate",e.candidate);try{const t=new s.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){console.log("ooops",e)}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}};a=r([(0,o.Injectable)()],a),t.WebRtcProvider=a},1964:e=>{e.exports=require("rxjs")},5828:e=>{e.exports=require("uuid")},8519:e=>{e.exports=require("web3")},367:e=>{e.exports=require("websocket")},1904:e=>{e.exports=require("wrtc")},5352:e=>{e.exports=require("ws")},6113:e=>{e.exports=require("crypto")},2254:(e,t,n)=>{n.r(t),n.d(t,{ANALYZE_FOR_ENTRY_COMPONENTS:()=>dr,APP_BOOTSTRAP_LISTENER:()=>Fy,APP_ID:()=>Ty,APP_INITIALIZER:()=>Py,ApplicationInitStatus:()=>jy,ApplicationModule:()=>fm,ApplicationRef:()=>_g,Attribute:()=>cr,COMPILER_OPTIONS:()=>Ky,CUSTOM_ELEMENTS_SCHEMA:()=>ji,ChangeDetectionStrategy:()=>Q,ChangeDetectorRef:()=>Pg,Compiler:()=>qy,CompilerFactory:()=>Gy,Component:()=>My,ComponentFactory:()=>sh,ComponentFactoryResolver:()=>ah,ComponentRef:()=>ih,ContentChild:()=>hr,ContentChildren:()=>pr,DEFAULT_CURRENCY_CODE:()=>Hy,DebugElement:()=>Fg,DebugEventListener:()=>kg,DebugNode:()=>Rg,DefaultIterableDiffer:()=>Gg,Directive:()=>wy,ElementRef:()=>lh,EmbeddedViewRef:()=>Ag,ErrorHandler:()=>Pi,EventEmitter:()=>sv,Host:()=>Xr,HostBinding:()=>Dy,HostListener:()=>Sy,INJECTOR:()=>ka,Inject:()=>Jr,InjectFlags:()=>q,Injectable:()=>cl,InjectionToken:()=>lr,Injector:()=>Ja,Input:()=>Oy,IterableDiffers:()=>rm,KeyValueDiffers:()=>im,LOCALE_ID:()=>$y,MissingTranslationStrategy:()=>Wy,ModuleWithComponentFactories:()=>zy,NO_ERRORS_SCHEMA:()=>Ti,NgModule:()=>Ey,NgModuleFactory:()=>Eh,NgModuleRef:()=>Sh,NgProbeToken:()=>fg,NgZone:()=>Qy,Optional:()=>Zr,Output:()=>xy,PACKAGE_ROOT_URL:()=>Vy,PLATFORM_ID:()=>Ry,PLATFORM_INITIALIZER:()=>Ny,Pipe:()=>Cy,PlatformRef:()=>mg,Query:()=>fr,QueryList:()=>av,ReflectiveInjector:()=>Il,ReflectiveKey:()=>hl,Renderer2:()=>ph,RendererFactory2:()=>fh,RendererStyleFlags2:()=>zi,ResolvedReflectiveFactory:()=>_l,Sanitizer:()=>hh,SecurityContext:()=>ai,Self:()=>Qr,SimpleChange:()=>tt,SkipSelf:()=>Yr,TRANSLATIONS:()=>By,TRANSLATIONS_FORMAT:()=>Uy,TemplateRef:()=>cv,Testability:()=>og,TestabilityRegistry:()=>ig,Type:()=>_r,VERSION:()=>yh,Version:()=>vh,ViewChild:()=>yr,ViewChildren:()=>vr,ViewContainerRef:()=>pv,ViewEncapsulation:()=>X,ViewRef:()=>Tg,asNativeElements:()=>Ng,assertPlatform:()=>vg,createNgModuleRef:()=>Th,createPlatform:()=>pg,createPlatformFactory:()=>hg,defineInjectable:()=>F,destroyPlatform:()=>yg,enableProdMode:()=>Dg,forwardRef:()=>l,getDebugNode:()=>Wg,getModuleFactory:()=>Sg,getNgModuleById:()=>Eg,getPlatform:()=>gg,inject:()=>qr,isDevMode:()=>xg,platformCore:()=>lm,resolveForwardRef:()=>d,setTestabilityGetter:()=>sg,ɵALLOW_MULTIPLE_PLATFORMS:()=>dg,ɵAPP_ID_RANDOM_PROVIDER:()=>Ay,ɵChangeDetectorStatus:()=>Y,ɵComponentFactory:()=>sh,ɵConsole:()=>Ly,ɵDEFAULT_LOCALE_ID:()=>Ff,ɵINJECTOR_SCOPE:()=>Ra,ɵLifecycleHooksFeature:()=>vc,ɵLocaleDataIndex:()=>Nf,ɵNG_COMP_DEF:()=>ce,ɵNG_DIR_DEF:()=>le,ɵNG_ELEMENT_ID:()=>he,ɵNG_INJ_DEF:()=>U,ɵNG_MOD_DEF:()=>fe,ɵNG_PIPE_DEF:()=>de,ɵNG_PROV_DEF:()=>B,ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR:()=>gh,ɵNO_CHANGE:()=>Hs,ɵNgModuleFactory:()=>kh,ɵNoopNgZone:()=>rg,ɵReflectionCapabilities:()=>kr,ɵRender3ComponentFactory:()=>Oh,ɵRender3ComponentRef:()=>xh,ɵRender3NgModuleRef:()=>Ah,ɵRuntimeError:()=>p,ɵViewRef:()=>bh,ɵ_sanitizeHtml:()=>si,ɵ_sanitizeUrl:()=>Vo,ɵallowSanitizationBypassAndThrow:()=>Do,ɵbypassSanitizationTrustHtml:()=>Eo,ɵbypassSanitizationTrustResourceUrl:()=>To,ɵbypassSanitizationTrustScript:()=>Po,ɵbypassSanitizationTrustStyle:()=>Io,ɵbypassSanitizationTrustUrl:()=>jo,ɵclearResolutionOfComponentResourcesQueue:()=>ao,ɵcompileComponent:()=>oy,ɵcompileDirective:()=>iy,ɵcompileNgModule:()=>Uv,ɵcompileNgModuleDefs:()=>Wv,ɵcompileNgModuleFactory:()=>cg,ɵcompilePipe:()=>by,ɵcreateInjector:()=>Ha,ɵdefaultIterableDiffers:()=>am,ɵdefaultKeyValueDiffers:()=>cm,ɵdetectChanges:()=>Ta,ɵdevModeEqual:()=>Ec,ɵfindLocaleData:()=>Pf,ɵflushModuleScopingQueueAsMuchAsPossible:()=>Hv,ɵgetDebugNode:()=>Wg,ɵgetDebugNodeR2:()=>zg,ɵgetDirectives:()=>tc,ɵgetHostElement:()=>rc,ɵgetInjectableDef:()=>L,ɵgetLContext:()=>mi,ɵgetLocaleCurrencyCode:()=>jf,ɵgetLocalePluralCase:()=>Tf,ɵgetSanitizationBypassType:()=>So,ɵglobal:()=>ie,ɵinjectChangeDetectorRef:()=>jg,ɵisBoundToModule:()=>lg,ɵisDefaultChangeDetectionStrategy:()=>ee,ɵisListLikeIterable:()=>Ic,ɵisObservable:()=>Wl,ɵisPromise:()=>Bl,ɵisSubscribable:()=>Ul,ɵivyEnabled:()=>pm,ɵmakeDecorator:()=>ir,ɵmarkDirty:()=>Aa,ɵnoSideEffects:()=>Z,ɵpatchComponentDefWithScope:()=>Xv,ɵpublishDefaultGlobalUtils:()=>cc,ɵpublishGlobalUtil:()=>lc,ɵregisterLocaleData:()=>If,ɵregisterNgModuleType:()=>Ph,ɵrenderComponent:()=>dc,ɵresetCompiledComponents:()=>Zv,ɵresetJitOptions:()=>Vv,ɵresolveComponentResources:()=>oo,ɵsetClassMetadata:()=>Dh,ɵsetCurrentInjector:()=>Br,ɵsetDocument:()=>pt,ɵsetLocaleId:()=>Bf,ɵstore:()=>rl,ɵstringify:()=>u,ɵtransitiveScopesFor:()=>ey,ɵunregisterLocaleData:()=>kf,ɵunwrapSafeValue:()=>xo,ɵwhenRendered:()=>yc,ɵɵCopyDefinitionFeature:()=>xc,ɵɵFactoryTarget:()=>gr,ɵɵInheritDefinitionFeature:()=>mc,ɵɵNgOnChangesFeature:()=>nt,ɵɵProvidersFeature:()=>oh,ɵɵadvance:()=>Bs,ɵɵattribute:()=>Fc,ɵɵattributeInterpolate1:()=>Kc,ɵɵattributeInterpolate2:()=>Gc,ɵɵattributeInterpolate3:()=>Jc,ɵɵattributeInterpolate4:()=>Zc,ɵɵattributeInterpolate5:()=>Qc,ɵɵattributeInterpolate6:()=>Yc,ɵɵattributeInterpolate7:()=>Xc,ɵɵattributeInterpolate8:()=>el,ɵɵattributeInterpolateV:()=>tl,ɵɵclassMap:()=>Dd,ɵɵclassMapInterpolate1:()=>Zd,ɵɵclassMapInterpolate2:()=>Qd,ɵɵclassMapInterpolate3:()=>Yd,ɵɵclassMapInterpolate4:()=>Xd,ɵɵclassMapInterpolate5:()=>ef,ɵɵclassMapInterpolate6:()=>tf,ɵɵclassMapInterpolate7:()=>nf,ɵɵclassMapInterpolate8:()=>rf,ɵɵclassMapInterpolateV:()=>of,ɵɵclassProp:()=>Cd,ɵɵcontentQuery:()=>Pv,ɵɵdefineComponent:()=>ye,ɵɵdefineDirective:()=>Oe,ɵɵdefineInjectable:()=>R,ɵɵdefineInjector:()=>V,ɵɵdefineNgModule:()=>we,ɵɵdefinePipe:()=>xe,ɵɵdirectiveInject:()=>jl,ɵɵdisableBindings:()=>Tt,ɵɵelement:()=>Fl,ɵɵelementContainer:()=>$l,ɵɵelementContainerEnd:()=>Ll,ɵɵelementContainerStart:()=>Vl,ɵɵelementEnd:()=>Rl,ɵɵelementStart:()=>Nl,ɵɵenableBindings:()=>jt,ɵɵgetCurrentView:()=>Hl,ɵɵgetInheritedFactory:()=>Xn,ɵɵhostProperty:()=>Of,ɵɵi18n:()=>qp,ɵɵi18nApply:()=>Jp,ɵɵi18nAttributes:()=>Kp,ɵɵi18nEnd:()=>zp,ɵɵi18nExp:()=>Gp,ɵɵi18nPostprocess:()=>Zp,ɵɵi18nStart:()=>Wp,ɵɵinject:()=>Wr,ɵɵinjectAttribute:()=>tr,ɵɵinvalidFactory:()=>Tl,ɵɵinvalidFactoryDep:()=>zr,ɵɵlistener:()=>zl,ɵɵloadQuery:()=>jv,ɵɵnamespaceHTML:()=>vn,ɵɵnamespaceMathML:()=>hn,ɵɵnamespaceSVG:()=>pn,ɵɵnextContext:()=>Zl,ɵɵngDeclareClassMetadata:()=>vm,ɵɵngDeclareComponent:()=>ym,ɵɵngDeclareDirective:()=>hm,ɵɵngDeclareFactory:()=>gm,ɵɵngDeclareInjectable:()=>bm,ɵɵngDeclareInjector:()=>_m,ɵɵngDeclareNgModule:()=>wm,ɵɵngDeclarePipe:()=>Mm,ɵɵpipe:()=>Qh,ɵɵpipeBind1:()=>Yh,ɵɵpipeBind2:()=>Xh,ɵɵpipeBind3:()=>ev,ɵɵpipeBind4:()=>tv,ɵɵpipeBindV:()=>nv,ɵɵprojection:()=>Xl,ɵɵprojectionDef:()=>Yl,ɵɵproperty:()=>Al,ɵɵpropertyInterpolate:()=>ed,ɵɵpropertyInterpolate1:()=>td,ɵɵpropertyInterpolate2:()=>nd,ɵɵpropertyInterpolate3:()=>rd,ɵɵpropertyInterpolate4:()=>od,ɵɵpropertyInterpolate5:()=>id,ɵɵpropertyInterpolate6:()=>sd,ɵɵpropertyInterpolate7:()=>ud,ɵɵpropertyInterpolate8:()=>ad,ɵɵpropertyInterpolateV:()=>cd,ɵɵpureFunction0:()=>Nh,ɵɵpureFunction1:()=>Rh,ɵɵpureFunction2:()=>Fh,ɵɵpureFunction3:()=>Vh,ɵɵpureFunction4:()=>Lh,ɵɵpureFunction5:()=>$h,ɵɵpureFunction6:()=>Hh,ɵɵpureFunction7:()=>Bh,ɵɵpureFunction8:()=>Uh,ɵɵpureFunctionV:()=>Wh,ɵɵqueryRefresh:()=>Ev,ɵɵreference:()=>ol,ɵɵresolveBody:()=>$i,ɵɵresolveDocument:()=>Li,ɵɵresolveWindow:()=>Vi,ɵɵrestoreView:()=>Nt,ɵɵsanitizeHtml:()=>ci,ɵɵsanitizeResourceUrl:()=>fi,ɵɵsanitizeScript:()=>pi,ɵɵsanitizeStyle:()=>li,ɵɵsanitizeUrl:()=>di,ɵɵsanitizeUrlOrResourceUrl:()=>yi,ɵɵsetComponentScope:()=>ge,ɵɵsetNgModuleScope:()=>Me,ɵɵstyleMap:()=>Od,ɵɵstyleMapInterpolate1:()=>sf,ɵɵstyleMapInterpolate2:()=>uf,ɵɵstyleMapInterpolate3:()=>af,ɵɵstyleMapInterpolate4:()=>cf,ɵɵstyleMapInterpolate5:()=>lf,ɵɵstyleMapInterpolate6:()=>df,ɵɵstyleMapInterpolate7:()=>ff,ɵɵstyleMapInterpolate8:()=>pf,ɵɵstyleMapInterpolateV:()=>hf,ɵɵstyleProp:()=>Md,ɵɵstylePropInterpolate1:()=>vf,ɵɵstylePropInterpolate2:()=>yf,ɵɵstylePropInterpolate3:()=>gf,ɵɵstylePropInterpolate4:()=>mf,ɵɵstylePropInterpolate5:()=>bf,ɵɵstylePropInterpolate6:()=>_f,ɵɵstylePropInterpolate7:()=>wf,ɵɵstylePropInterpolate8:()=>Mf,ɵɵstylePropInterpolateV:()=>Cf,ɵɵsyntheticHostListener:()=>ql,ɵɵsyntheticHostProperty:()=>xf,ɵɵtemplate:()=>nl,ɵɵtemplateRefExtractor:()=>Nv,ɵɵtext:()=>Ld,ɵɵtextInterpolate:()=>$d,ɵɵtextInterpolate1:()=>Hd,ɵɵtextInterpolate2:()=>Bd,ɵɵtextInterpolate3:()=>Ud,ɵɵtextInterpolate4:()=>Wd,ɵɵtextInterpolate5:()=>zd,ɵɵtextInterpolate6:()=>qd,ɵɵtextInterpolate7:()=>Kd,ɵɵtextInterpolate8:()=>Gd,ɵɵtextInterpolateV:()=>Jd,ɵɵtrustConstantHtml:()=>hi,ɵɵtrustConstantResourceUrl:()=>vi,ɵɵviewQuery:()=>Iv});var r=n(1964),o=n(4857);function i(e){for(let t in e)if(e[t]===i)return t;throw Error("Could not find renamed property on target object.")}function s(e,t){for(const n in t)t.hasOwnProperty(n)&&!e.hasOwnProperty(n)&&(e[n]=t[n])}function u(e){if("string"==typeof e)return e;if(Array.isArray(e))return"["+e.map(u).join(", ")+"]";if(null==e)return""+e;if(e.overriddenName)return`${e.overriddenName}`;if(e.name)return`${e.name}`;const t=e.toString();if(null==t)return""+t;const n=t.indexOf("\n");return-1===n?t:t.substring(0,n)}function a(e,t){return null==e||""===e?null===t?"":t:null==t||""===t?e:e+" "+t}const c=i({__forward_ref__:i});function l(e){return e.__forward_ref__=l,e.toString=function(){return u(this())},e}function d(e){return f(e)?e():e}function f(e){return"function"==typeof e&&e.hasOwnProperty(c)&&e.__forward_ref__===l}class p extends Error{constructor(e,t){super(h(e,t)),this.code=e}}function h(e,t){const n=`NG0${Math.abs(e)}`;let r=`${n}${t?": "+t:""}`;return ngDevMode&&e<0&&(r=`${r}. Find more at https://angular.io/errors/${n}`),r}function v(e){return"string"==typeof e?e:null==e?"":String(e)}function y(e){return"function"==typeof e?e.name||e.toString():"object"==typeof e&&null!=e&&"function"==typeof e.type?e.type.name||e.type.toString():v(e)}function g(e,t){const n=t?`. Dependency path: ${t.join(" > ")} > ${e}`:"";throw new p(-200,`Circular dependency in DI detected for ${e}${n}`)}function m(){throw new Error("Cannot mix multi providers and regular providers")}function b(e,t){const n=t?` in ${t}`:"";throw new p(-201,`No provider for ${y(e)} found${n}`)}function _(e,t){"number"!=typeof e&&T(t,typeof e,"number","===")}function w(e,t,n){_(e,"Expected a number"),E(e,n,"Expected number to be less than or equal to"),P(e,t,"Expected number to be greater than or equal to")}function M(e,t){"string"!=typeof e&&T(t,null===e?"null":typeof e,"string","===")}function C(e,t,n){e!=t&&T(n,e,t,"==")}function O(e,t,n){e==t&&T(n,e,t,"!=")}function x(e,t,n){e!==t&&T(n,e,t,"===")}function D(e,t,n){e===t&&T(n,e,t,"!==")}function S(e,t,n){e<t||T(n,e,t,"<")}function E(e,t,n){e<=t||T(n,e,t,"<=")}function I(e,t,n){e>t||T(n,e,t,">")}function P(e,t,n){e>=t||T(n,e,t,">=")}function j(e,t){null==e&&T(t,e,null,"!=")}function T(e,t,n,r){throw new Error(`ASSERTION ERROR: ${e}`+(null==r?"":` [Expected=> ${n} ${r} ${t} <=Actual]`))}function A(e){"undefined"!=typeof Node&&e instanceof Node||"object"==typeof e&&null!=e&&"WebWorkerRenderNode"===e.constructor.name||T(`The provided value must be an instance of a DOM Node but got ${u(e)}`)}function k(e,t){j(e,"Array must be defined.");const n=e.length;(t<0||t>=n)&&T(`Index expected to be less than ${n} but got ${t}`)}function N(e,...t){if(-1!==t.indexOf(e))return!0;T(`Expected value to be one of ${JSON.stringify(t)} but was ${JSON.stringify(e)}.`)}function R(e){return{token:e.token,providedIn:e.providedIn||null,factory:e.factory,value:void 0}}const F=R;function V(e){return{providers:e.providers||[],imports:e.imports||[]}}function L(e){return $(e,B)||$(e,W)}function $(e,t){return e.hasOwnProperty(t)?e[t]:null}function H(e){return e&&(e.hasOwnProperty(U)||e.hasOwnProperty(z))?e[U]:null}const B=i({ɵprov:i}),U=i({ɵinj:i}),W=i({ngInjectableDef:i}),z=i({ngInjectorDef:i});var q;let K;function G(e){const t=K;return K=e,t}function J(e,t,n){const r=L(e);return r&&"root"==r.providedIn?void 0===r.value?r.value=r.factory():r.value:n&q.Optional?null:void 0!==t?t:void b(u(e),"Injector")}function Z(e){return{toString:e}.toString()}var Q,Y,X;function ee(e){return null==e||e===Q.Default}!function(e){e[e.Default=0]="Default",e[e.Host=1]="Host",e[e.Self=2]="Self",e[e.SkipSelf=4]="SkipSelf",e[e.Optional=8]="Optional"}(q||(q={})),function(e){e[e.OnPush=0]="OnPush",e[e.Default=1]="Default"}(Q||(Q={})),function(e){e[e.CheckOnce=0]="CheckOnce",e[e.Checked=1]="Checked",e[e.CheckAlways=2]="CheckAlways",e[e.Detached=3]="Detached",e[e.Errored=4]="Errored",e[e.Destroyed=5]="Destroyed"}(Y||(Y={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(X||(X={}));const te="undefined"!=typeof globalThis&&globalThis,ne="undefined"!=typeof window&&window,re="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,oe="undefined"!=typeof global&&global,ie=te||oe||ne||re;function se(){return!("undefined"!=typeof ngDevMode&&!ngDevMode||("object"!=typeof ngDevMode&&function(){const e="undefined"!=typeof location?location.toString():"",t={namedConstructors:-1!=e.indexOf("ngDevMode=namedConstructors"),firstCreatePass:0,tNode:0,tView:0,rendererCreateTextNode:0,rendererSetText:0,rendererCreateElement:0,rendererAddEventListener:0,rendererSetAttribute:0,rendererRemoveAttribute:0,rendererSetProperty:0,rendererSetClassName:0,rendererAddClass:0,rendererRemoveClass:0,rendererSetStyle:0,rendererRemoveStyle:0,rendererDestroy:0,rendererDestroyNode:0,rendererMoveNode:0,rendererRemoveNode:0,rendererAppendChild:0,rendererInsertBefore:0,rendererCreateComment:0},n=-1===e.indexOf("ngDevMode=false");ie.ngDevMode=n&&t}(),"undefined"==typeof ngDevMode||!ngDevMode))}const ue={},ae=[];("undefined"==typeof ngDevMode||ngDevMode)&&se()&&(Object.freeze(ue),Object.freeze(ae));const ce=i({ɵcmp:i}),le=i({ɵdir:i}),de=i({ɵpipe:i}),fe=i({ɵmod:i}),pe=i({ɵfac:i}),he=i({__NG_ELEMENT_ID__:i});let ve=0;function ye(e){return Z((()=>{("undefined"==typeof ngDevMode||ngDevMode)&&se();const t={},n={type:e.type,providersResolver:null,decls:e.decls,vars:e.vars,factory:null,template:e.template||null,consts:e.consts||null,ngContentSelectors:e.ngContentSelectors,hostBindings:e.hostBindings||null,hostVars:e.hostVars||0,hostAttrs:e.hostAttrs||null,contentQueries:e.contentQueries||null,declaredInputs:t,inputs:null,outputs:null,exportAs:e.exportAs||null,onPush:e.changeDetection===Q.OnPush,directiveDefs:null,pipeDefs:null,selectors:e.selectors||ae,viewQuery:e.viewQuery||null,features:e.features||null,data:e.data||{},encapsulation:e.encapsulation||X.Emulated,id:"c",styles:e.styles||ae,_:null,setInput:null,schemas:e.schemas||null,tView:null},r=e.directives,o=e.features,i=e.pipes;return n.id+=ve++,n.inputs=Ce(e.inputs,t),n.outputs=Ce(e.outputs),o&&o.forEach((e=>e(n))),n.directiveDefs=r?()=>("function"==typeof r?r():r).map(me):null,n.pipeDefs=i?()=>("function"==typeof i?i():i).map(be):null,n}))}function ge(e,t,n){const r=e.ɵcmp;r.directiveDefs=()=>t.map(me),r.pipeDefs=()=>n.map(be)}function me(e){const t=De(e)||Se(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is neither 'ComponentType' or 'DirectiveType'.`);return t}function be(e){const t=Ee(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is not a 'PipeType'.`);return t}const _e={};function we(e){return Z((()=>{const t={type:e.type,bootstrap:e.bootstrap||ae,declarations:e.declarations||ae,imports:e.imports||ae,exports:e.exports||ae,transitiveCompileScopes:null,schemas:e.schemas||null,id:e.id||null};return null!=e.id&&(_e[e.id]=e.type),t}))}function Me(e,t){return Z((()=>{const n=Ie(e,!0);n.declarations=t.declarations||ae,n.imports=t.imports||ae,n.exports=t.exports||ae}))}function Ce(e,t){if(null==e)return ue;const n={};for(const r in e)if(e.hasOwnProperty(r)){let o=e[r],i=o;Array.isArray(o)&&(i=o[1],o=o[0]),n[o]=r,t&&(t[o]=i)}return n}const Oe=ye;function xe(e){return{type:e.type,name:e.name,factory:null,pure:!1!==e.pure,onDestroy:e.type.prototype.ngOnDestroy||null}}function De(e){return e[ce]||null}function Se(e){return e[le]||null}function Ee(e){return e[de]||null}function Ie(e,t){const n=e[fe]||null;if(!n&&!0===t)throw new Error(`Type ${u(e)} does not have 'ɵmod' property.`);return n}const Pe=10,je=20,Te=["Root","Component","Embedded"];function Ae(e){return Array.isArray(e)&&"object"==typeof e[1]}function ke(e){return Array.isArray(e)&&!0===e[1]}function Ne(e){return 0!=(8&e.flags)}function Re(e){return 2==(2&e.flags)}function Fe(e){return 1==(1&e.flags)}function Ve(e){return null!==e.template}function Le(e,t){$e(e,t[1])}function $e(e,t){He(e),e.hasOwnProperty("tView_")&&C(e.tView_,t,"This TNode does not belong to this TView.")}function He(e){j(e,"TNode must be defined"),e&&"object"==typeof e&&e.hasOwnProperty("directiveStylingLast")||T("Not of type TNode, got: "+e)}function Be(e){j(e,"Expected TIcu to be defined"),"number"!=typeof e.currentCaseLViewIndex&&T("Object is not of TIcu type.")}function Ue(e,t="Type passed in is not ComponentType, it does not have 'ɵcmp' property."){De(e)||T(t)}function We(e){j(e,"currentTNode should exist!"),j(e.parent,"currentTNode should have a parent")}function ze(e){j(e,"LContainer must be defined"),C(ke(e),!0,"Expecting LContainer")}function qe(e){e&&C(Ae(e),!0,"Expecting LView or undefined or null")}function Ke(e){j(e,"LView must be defined"),C(Ae(e),!0,"Expecting LView")}function Ge(e,t){C(e.firstCreatePass,!0,t||"Should only be called in first create pass.")}function Je(e,t){C(e.firstUpdatePass,!0,t||"Should only be called in first update pass.")}function Ze(e,t){Qe(e[1].expandoStartIndex,e.length,t)}function Qe(e,t,n){e<=n&&n<t||T(`Index out of range (expecting ${e} <= ${n} < ${t})`)}function Ye(e,t){j(e,t||"Component views should always have a parent view (component's host view)")}function Xe(e,t){Ze(e,t),Ze(e,t+8),_(e[t+0],"injectorIndex should point to a bloom filter"),_(e[t+1],"injectorIndex should point to a bloom filter"),_(e[t+2],"injectorIndex should point to a bloom filter"),_(e[t+3],"injectorIndex should point to a bloom filter"),_(e[t+4],"injectorIndex should point to a bloom filter"),_(e[t+5],"injectorIndex should point to a bloom filter"),_(e[t+6],"injectorIndex should point to a bloom filter"),_(e[t+7],"injectorIndex should point to a bloom filter"),_(e[t+8],"injectorIndex should point to parent injector")}function et(e,t){const n=e.hasOwnProperty(pe);if(!n&&!0===t&&ngDevMode)throw new Error(`Type ${u(e)} does not have 'ɵfac' property.`);return n?e[pe]:null}class tt{constructor(e,t,n){this.previousValue=e,this.currentValue=t,this.firstChange=n}isFirstChange(){return this.firstChange}}function nt(){return rt}function rt(e){return e.type.prototype.ngOnChanges&&(e.setInput=it),ot}function ot(){const e=st(this),t=null==e?void 0:e.current;if(t){const n=e.previous;if(n===ue)e.previous=t;else for(let e in t)n[e]=t[e];e.current=null,this.ngOnChanges(t)}}function it(e,t,n,r){const o=st(e)||function(e,t){return e.__ngSimpleChanges__=t}(e,{previous:ue,current:null}),i=o.current||(o.current={}),s=o.previous,u=this.declaredInputs[n],a=s[u];i[u]=new tt(a&&a.currentValue,t,s===ue),e[r]=t}function st(e){return e.__ngSimpleChanges__||null}nt.ngInherit=!0;let ut=null;const at=e=>{ut=e},ct=function(e,t,n){null!=ut&&ut(e,t,n)},lt="svg",dt="math";let ft;function pt(e){ft=e}function ht(){return void 0!==ft?ft:"undefined"!=typeof document?document:void 0}var vt;function yt(e){return!!e.listen}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(vt||(vt={}));const gt={createRenderer:(e,t)=>ht()};function mt(e){for(;Array.isArray(e);)e=e[0];return e}function bt(e,t){return ngDevMode&&k(t,e),ngDevMode&&P(e,je,"Expected to be past HEADER_OFFSET"),mt(t[e])}function _t(e,t){ngDevMode&&Le(e,t),ngDevMode&&k(t,e.index);const n=mt(t[e.index]);return ngDevMode&&!yt(t[11])&&A(n),n}function wt(e,t){ngDevMode&&I(t,-1,"wrong index for TNode"),ngDevMode&&S(t,e.data.length,"wrong index for TNode");const n=e.data[t];return ngDevMode&&null!==n&&He(n),n}function Mt(e,t){return ngDevMode&&k(e,t),e[t]}function Ct(e,t){ngDevMode&&k(t,e);const n=t[e];return Ae(n)?n:n[0]}function Ot(e){return 4==(4&e[2])}function xt(e){return 128==(128&e[2])}function Dt(e,t){return null==t?null:(ngDevMode&&k(e,t),e[t])}function St(e){e[18]=0}function Et(e,t){e[5]+=t;let n=e,r=e[3];for(;null!==r&&(1===t&&1===n[5]||-1===t&&0===n[5]);)r[5]+=t,n=r,r=r[3]}const It={lFrame:sn(null),bindingsEnabled:!0,isInCheckNoChangesMode:!1};function Pt(){return It.bindingsEnabled}function jt(){It.bindingsEnabled=!0}function Tt(){It.bindingsEnabled=!1}function At(){return It.lFrame.lView}function kt(){return It.lFrame.tView}function Nt(e){return It.lFrame.contextLView=e,e[8]}function Rt(){let e=Ft();for(;null!==e&&64===e.type;)e=e.parent;return e}function Ft(){return It.lFrame.currentTNode}function Vt(){const e=It.lFrame,t=e.currentTNode;return e.isParent?t:t.parent}function Lt(e,t){ngDevMode&&e&&$e(e,It.lFrame.tView);const n=It.lFrame;n.currentTNode=e,n.isParent=t}function $t(){return It.lFrame.isParent}function Ht(){It.lFrame.isParent=!1}function Bt(){return It.isInCheckNoChangesMode}function Ut(e){It.isInCheckNoChangesMode=e}function Wt(){const e=It.lFrame;let t=e.bindingRootIndex;return-1===t&&(t=e.bindingRootIndex=e.tView.bindingStartIndex),t}function zt(){return It.lFrame.bindingIndex}function qt(e){return It.lFrame.bindingIndex=e}function Kt(){return It.lFrame.bindingIndex++}function Gt(e){const t=It.lFrame,n=t.bindingIndex;return t.bindingIndex=t.bindingIndex+e,n}function Jt(e){It.lFrame.inI18n=e}function Zt(e,t){const n=It.lFrame;n.bindingIndex=n.bindingRootIndex=e,Qt(t)}function Qt(e){It.lFrame.currentDirectiveIndex=e}function Yt(e){const t=It.lFrame.currentDirectiveIndex;return-1===t?null:e[t]}function Xt(){return It.lFrame.currentQueryIndex}function en(e){It.lFrame.currentQueryIndex=e}function tn(e){const t=e[1];return 2===t.type?(ngDevMode&&j(t.declTNode,"Embedded TNodes should have declaration parents."),t.declTNode):1===t.type?e[6]:null}function nn(e,t,n){if(ngDevMode&&qe(e),n&q.SkipSelf){ngDevMode&&$e(t,e[1]);let r=t,o=e;for(;ngDevMode&&j(r,"Parent TNode should be defined"),r=r.parent,!(null!==r||n&q.Host||(r=tn(o),null===r)||(ngDevMode&&j(o,"Parent LView should be defined"),o=o[15],10&r.type)););if(null===r)return!1;t=r,e=o}ngDevMode&&Le(t,e);const r=It.lFrame=on();return r.currentTNode=t,r.lView=e,!0}function rn(e){ngDevMode&&O(e[0],e[1],"????"),ngDevMode&&qe(e);const t=on();ngDevMode&&(C(t.isParent,!0,"Expected clean LFrame"),C(t.lView,null,"Expected clean LFrame"),C(t.tView,null,"Expected clean LFrame"),C(t.selectedIndex,-1,"Expected clean LFrame"),C(t.elementDepthCount,0,"Expected clean LFrame"),C(t.currentDirectiveIndex,-1,"Expected clean LFrame"),C(t.currentNamespace,null,"Expected clean LFrame"),C(t.bindingRootIndex,-1,"Expected clean LFrame"),C(t.currentQueryIndex,0,"Expected clean LFrame"));const n=e[1];It.lFrame=t,ngDevMode&&n.firstChild&&$e(n.firstChild,n),t.currentTNode=n.firstChild,t.lView=e,t.tView=n,t.contextLView=e,t.bindingIndex=n.bindingStartIndex,t.inI18n=!1}function on(){const e=It.lFrame,t=null===e?null:e.child;return null===t?sn(e):t}function sn(e){const t={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:e,child:null,inI18n:!1};return null!==e&&(e.child=t),t}function un(){const e=It.lFrame;return It.lFrame=e.parent,e.currentTNode=null,e.lView=null,e}const an=un;function cn(){const e=un();e.isParent=!0,e.tView=null,e.selectedIndex=-1,e.contextLView=null,e.elementDepthCount=0,e.currentDirectiveIndex=-1,e.currentNamespace=null,e.bindingRootIndex=-1,e.bindingIndex=-1,e.currentQueryIndex=0}function ln(){return It.lFrame.selectedIndex}function dn(e){ngDevMode&&-1!==e&&P(e,je,"Index must be past HEADER_OFFSET (or -1)."),ngDevMode&&S(e,It.lFrame.lView.length,"Can't set index passed end of LView"),It.lFrame.selectedIndex=e}function fn(){const e=It.lFrame;return wt(e.tView,e.selectedIndex)}function pn(){It.lFrame.currentNamespace=lt}function hn(){It.lFrame.currentNamespace=dt}function vn(){It.lFrame.currentNamespace=null}function yn(e,t){ngDevMode&&Ge(e);for(let n=t.directiveStart,r=t.directiveEnd;n<r;n++){const t=e.data[n];ngDevMode&&j(t,"Expecting DirectiveDef");const r=t.type.prototype,{ngAfterContentInit:o,ngAfterContentChecked:i,ngAfterViewInit:s,ngAfterViewChecked:u,ngOnDestroy:a}=r;o&&(e.contentHooks||(e.contentHooks=[])).push(-n,o),i&&((e.contentHooks||(e.contentHooks=[])).push(n,i),(e.contentCheckHooks||(e.contentCheckHooks=[])).push(n,i)),s&&(e.viewHooks||(e.viewHooks=[])).push(-n,s),u&&((e.viewHooks||(e.viewHooks=[])).push(n,u),(e.viewCheckHooks||(e.viewCheckHooks=[])).push(n,u)),null!=a&&(e.destroyHooks||(e.destroyHooks=[])).push(n,a)}}function gn(e,t,n){_n(e,t,3,n)}function mn(e,t,n,r){ngDevMode&&O(n,3,"Init pre-order hooks should not be called more than once"),(3&e[2])===n&&_n(e,t,n,r)}function bn(e,t){ngDevMode&&O(t,3,"Init hooks phase should not be incremented after all init hooks have been run.");let n=e[2];(3&n)===t&&(n&=2047,n+=1,e[2]=n)}function _n(e,t,n,r){ngDevMode&&C(Bt(),!1,"Hooks should never be run when in check no changes mode.");const o=void 0!==r?65535&e[18]:0,i=null!=r?r:-1,s=t.length-1;let u=0;for(let a=o;a<s;a++)if("number"==typeof t[a+1]){if(u=t[a],null!=r&&u>=r)break}else t[a]<0&&(e[18]+=65536),(u<i||-1==i)&&(wn(e,n,t,a),e[18]=(4294901760&e[18])+a+2),a++}function wn(e,t,n,r){const o=n[r]<0,i=n[r+1],s=e[o?-n[r]:n[r]];if(o){if(e[2]>>11<e[18]>>16&&(3&e[2])===t){e[2]+=2048,ct(4,s,i);try{i.call(s)}finally{ct(5,s,i)}}}else{ct(4,s,i);try{i.call(s)}finally{ct(5,s,i)}}}const Mn=-1;class Cn{constructor(e,t,n){this.factory=e,this.resolving=!1,ngDevMode&&j(e,"Factory not specified"),ngDevMode&&C(typeof e,"function","Expected factory function."),this.canSeeViewProviders=t,this.injectImpl=n}}function On(e){let t="";return 1&e&&(t+="|Text"),2&e&&(t+="|Element"),4&e&&(t+="|Container"),8&e&&(t+="|ElementContainer"),16&e&&(t+="|Projection"),32&e&&(t+="|IcuContainer"),64&e&&(t+="|Placeholder"),t.length>0?t.substring(1):t}function xn(e,t,n){j(e,"should be called with a TNode"),0==(e.type&t)&&T(n||`Expected [${On(t)}] but got ${On(e.type)}.`)}function Dn(e,t,n){const r=yt(e);let o=0;for(;o<n.length;){const i=n[o];if("number"==typeof i){if(0!==i)break;o++;const s=n[o++],u=n[o++],a=n[o++];ngDevMode&&ngDevMode.rendererSetAttribute++,r?e.setAttribute(t,u,a,s):t.setAttributeNS(s,u,a)}else{const s=i,u=n[++o];ngDevMode&&ngDevMode.rendererSetAttribute++,En(s)?r&&e.setProperty(t,s,u):r?e.setAttribute(t,s,u):t.setAttribute(s,u),o++}}return o}function Sn(e){return 3===e||4===e||6===e}function En(e){return 64===e.charCodeAt(0)}function In(e,t){if(null===t||0===t.length);else if(null===e||0===e.length)e=t.slice();else{let n=-1;for(let r=0;r<t.length;r++){const o=t[r];"number"==typeof o?n=o:0===n||Pn(e,n,o,null,-1===n||2===n?t[++r]:null)}}return e}function Pn(e,t,n,r,o){let i=0,s=e.length;if(-1===t)s=-1;else for(;i<e.length;){const n=e[i++];if("number"==typeof n){if(n===t){s=-1;break}if(n>t){s=i-1;break}}}for(;i<e.length;){const t=e[i];if("number"==typeof t)break;if(t===n){if(null===r)return void(null!==o&&(e[i+1]=o));if(r===e[i+1])return void(e[i+2]=o)}i++,null!==r&&i++,null!==o&&i++}-1!==s&&(e.splice(s,0,t),i=s+1),e.splice(i++,0,n),null!==r&&e.splice(i++,0,r),null!==o&&e.splice(i++,0,o)}function jn(e){return e!==Mn}function Tn(e){return ngDevMode&&_(e,"Number expected"),ngDevMode&&O(e,-1,"Not a valid state."),ngDevMode&&I(32767&e,je,"Parent injector must be pointing past HEADER_OFFSET."),32767&e}function An(e,t){let n=e>>16,r=t;for(;n>0;)r=r[15],n--;return r}let kn=!0;function Nn(e){const t=kn;return kn=e,t}let Rn=0;function Fn(e,t){const n=Ln(e,t);if(-1!==n)return n;const r=t[1];r.firstCreatePass&&(e.injectorIndex=t.length,Vn(r.data,e),Vn(t,null),Vn(r.blueprint,null));const o=$n(e,t),i=e.injectorIndex;if(jn(o)){const e=Tn(o),n=An(o,t),r=n[1].data;for(let o=0;o<8;o++)t[i+o]=n[e+o]|r[e+o]}return t[i+8]=o,i}function Vn(e,t){e.push(0,0,0,0,0,0,0,0,t)}function Ln(e,t){return-1===e.injectorIndex||e.parent&&e.parent.injectorIndex===e.injectorIndex||null===t[e.injectorIndex+8]?-1:(ngDevMode&&k(t,e.injectorIndex),e.injectorIndex)}function $n(e,t){if(e.parent&&-1!==e.parent.injectorIndex)return e.parent.injectorIndex;let n=0,r=null,o=t;for(;null!==o;){const e=o[1],t=e.type;if(2===t?(ngDevMode&&j(e.declTNode,"Embedded TNodes should have declaration parents."),r=e.declTNode):1===t?r=o[6]:(ngDevMode&&C(e.type,0,"Root type expected"),r=null),null===r)return Mn;if(ngDevMode&&r&&Le(r,o[15]),n++,o=o[15],-1!==r.injectorIndex)return r.injectorIndex|n<<16}return Mn}function Hn(e,t,n){!function(e,t,n){let r;ngDevMode&&C(t.firstCreatePass,!0,"expected firstCreatePass to be true"),"string"==typeof n?r=n.charCodeAt(0)||0:n.hasOwnProperty(he)&&(r=n[he]),null==r&&(r=n[he]=Rn++);const o=255&r,i=1<<o;t.data[e+(o>>5)]|=i}(e,t,n)}function Bn(e,t,n){if(n&q.Optional)return e;b(t,"NodeInjector")}function Un(e,t,n,r){if(n&q.Optional&&void 0===r&&(r=null),0==(n&(q.Self|q.Host))){const o=e[9],i=G(void 0);try{return o?o.get(t,r,n&q.Optional):J(t,r,n&q.Optional)}finally{G(i)}}return Bn(r,t,n)}function Wn(e,t,n,r=q.Default,o){if(null!==e){const i=function(e){if(ngDevMode&&j(e,"token must be defined"),"string"==typeof e)return e.charCodeAt(0)||0;const t=e.hasOwnProperty(he)?e[he]:void 0;return"number"==typeof t?t>=0?255&t:(ngDevMode&&C(t,-1,"Expecting to get Special Injector Id"),qn):t}(n);if("function"==typeof i){if(!nn(t,e,r))return r&q.Host?Bn(o,n,r):Un(t,n,r,o);try{const e=i(r);if(null!=e||r&q.Optional)return e;b(n)}finally{an()}}else if("number"==typeof i){let o=null,s=Ln(e,t),u=Mn,a=r&q.Host?t[16][6]:null;for((-1===s||r&q.SkipSelf)&&(u=-1===s?$n(e,t):t[s+8],u!==Mn&&Qn(r,!1)?(o=t[1],s=Tn(u),t=An(u,t)):s=-1);-1!==s;){ngDevMode&&Xe(t,s);const e=t[1];if(ngDevMode&&Le(e.data[s+8],t),Zn(i,s,e.data)){const e=Kn(s,t,n,o,r,a);if(e!==zn)return e}u=t[s+8],u!==Mn&&Qn(r,t[1].data[s+8]===a)&&Zn(i,s,t)?(o=e,s=Tn(u),t=An(u,t)):s=-1}}}return Un(t,n,r,o)}const zn={};function qn(){return new Yn(Rt(),At())}function Kn(e,t,n,r,o,i){const s=t[1],u=s.data[e+8],a=Gn(u,s,n,null==r?Re(u)&&kn:r!=s&&0!=(3&u.type),o&q.Host&&i===u);return null!==a?Jn(t,s,a,u):zn}function Gn(e,t,n,r,o){const i=e.providerIndexes,s=t.data,u=1048575&i,a=e.directiveStart,c=e.directiveEnd,l=i>>20,d=o?u+l:c;for(let e=r?u:u+l;e<d;e++){const t=s[e];if(e<a&&n===t||e>=a&&t.type===n)return e}if(o){const e=s[a];if(e&&Ve(e)&&e.type===n)return a}return null}function Jn(e,t,n,r){let o=e[n];const i=t.data;if(o instanceof Cn){const u=o;u.resolving&&g(y(i[n]));const a=Nn(u.canSeeViewProviders);u.resolving=!0;const c=u.injectImpl?G(u.injectImpl):null,l=nn(e,r,q.Default);ngDevMode&&C(l,!0,"Because flags do not contain `SkipSelf' we expect this to always succeed.");try{o=e[n]=u.factory(void 0,i,e,r),t.firstCreatePass&&n>=r.directiveStart&&(ngDevMode&&(void 0!==(s=i[n]).type&&null!=s.selectors&&void 0!==s.inputs||T("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.")),function(e,t,n){ngDevMode&&Ge(n);const{ngOnChanges:r,ngOnInit:o,ngDoCheck:i}=t.type.prototype;if(r){const r=rt(t);(n.preOrderHooks||(n.preOrderHooks=[])).push(e,r),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,r)}o&&(n.preOrderHooks||(n.preOrderHooks=[])).push(0-e,o),i&&((n.preOrderHooks||(n.preOrderHooks=[])).push(e,i),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,i))}(n,i[n],t))}finally{null!==c&&G(c),Nn(a),u.resolving=!1,an()}}var s;return o}function Zn(e,t,n){const r=1<<e;return!!(n[t+(e>>5)]&r)}function Qn(e,t){return!(e&q.Self||e&q.Host&&t)}class Yn{constructor(e,t){this._tNode=e,this._lView=t}get(e,t,n){return Wn(this._tNode,this._lView,e,n,t)}}function Xn(e){return Z((()=>{const t=e.prototype.constructor,n=t[pe]||er(t),r=Object.prototype;let o=Object.getPrototypeOf(e.prototype).constructor;for(;o&&o!==r;){const e=o[pe]||er(o);if(e&&e!==n)return e;o=Object.getPrototypeOf(o)}return e=>new e}))}function er(e){return f(e)?()=>{const t=er(d(e));return t&&t()}:et(e)}function tr(e){return function(e,t){if(ngDevMode&&xn(e,15),ngDevMode&&j(e,"expecting tNode"),"class"===t)return e.classes;if("style"===t)return e.styles;const n=e.attrs;if(n){const e=n.length;let r=0;for(;r<e;){const o=n[r];if(Sn(o))break;if(0===o)r+=2;else if("number"==typeof o)for(r++;r<e&&"string"==typeof n[r];)r++;else{if(o===t)return n[r+1];r+=2}}}return null}(Rt(),e)}const nr="__annotations__",rr="__parameters__",or="__prop__metadata__";function ir(e,t,n,r,o){return Z((()=>{const i=sr(t);function s(...e){if(this instanceof s)return i.call(this,...e),this;const t=new s(...e);return function(n){return o&&o(n,...e),(n.hasOwnProperty(nr)?n[nr]:Object.defineProperty(n,nr,{value:[]})[nr]).push(t),r&&r(n),n}}return n&&(s.prototype=Object.create(n.prototype)),s.prototype.ngMetadataName=e,s.annotationCls=s,s}))}function sr(e){return function(...t){if(e){const n=e(...t);for(const e in n)this[e]=n[e]}}}function ur(e,t,n){return Z((()=>{const r=sr(t);function o(...e){if(this instanceof o)return r.apply(this,e),this;const t=new o(...e);return n.annotation=t,n;function n(e,n,r){const o=e.hasOwnProperty(rr)?e[rr]:Object.defineProperty(e,rr,{value:[]})[rr];for(;o.length<=r;)o.push(null);return(o[r]=o[r]||[]).push(t),e}}return n&&(o.prototype=Object.create(n.prototype)),o.prototype.ngMetadataName=e,o.annotationCls=o,o}))}function ar(e,t,n,r){return Z((()=>{const o=sr(t);function i(...e){if(this instanceof i)return o.apply(this,e),this;const t=new i(...e);return function(n,o){const i=n.constructor,s=i.hasOwnProperty(or)?i[or]:Object.defineProperty(i,or,{value:{}})[or];s[o]=s.hasOwnProperty(o)&&s[o]||[],s[o].unshift(t),r&&r(n,o,...e)}}return n&&(i.prototype=Object.create(n.prototype)),i.prototype.ngMetadataName=e,i.annotationCls=i,i}))}const cr=ur("Attribute",(e=>({attributeName:e,__NG_ELEMENT_ID__:()=>tr(e)})));class lr{constructor(e,t){this._desc=e,this.ngMetadataName="InjectionToken",this.ɵprov=void 0,"number"==typeof t?(("undefined"==typeof ngDevMode||ngDevMode)&&S(t,0,"Only negative numbers are supported here"),this.__NG_ELEMENT_ID__=t):void 0!==t&&(this.ɵprov=R({token:this,providedIn:t.providedIn||"root",factory:t.factory}))}toString(){return`InjectionToken ${this._desc}`}}const dr=new lr("AnalyzeForEntryComponents");class fr{}const pr=ar("ContentChildren",((e,t={})=>Object.assign({selector:e,first:!1,isViewQuery:!1,descendants:!1,emitDistinctChangesOnly:!0},t)),fr),hr=ar("ContentChild",((e,t={})=>Object.assign({selector:e,first:!0,isViewQuery:!1,descendants:!0},t)),fr),vr=ar("ViewChildren",((e,t={})=>Object.assign({selector:e,first:!1,isViewQuery:!0,descendants:!0,emitDistinctChangesOnly:!0},t)),fr),yr=ar("ViewChild",((e,t)=>Object.assign({selector:e,first:!0,isViewQuery:!0,descendants:!0},t)),fr);var gr,mr;function br(e){const t=ie.ng;if(t&&t.ɵcompilerFacade)return t.ɵcompilerFacade;if("undefined"==typeof ngDevMode||ngDevMode){console.error(`JIT compilation failed for ${e.kind}`,e.type);let t=`The ${e.kind} '${e.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n`;throw 1===e.usage?(t+=`The ${e.kind} is part of a library that has been partially compiled.\n`,t+="However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n",t+="\n",t+="Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n"):t+="JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n",t+="Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n",t+="or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.",new Error(t)}throw new Error("JIT compiler unavailable")}!function(e){e[e.Directive=0]="Directive",e[e.Component=1]="Component",e[e.Injectable=2]="Injectable",e[e.Pipe=3]="Pipe",e[e.NgModule=4]="NgModule"}(gr||(gr={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(mr||(mr={}));const _r=Function;function wr(e){return"function"==typeof e}function Mr(e,t){void 0===t&&(t=e);for(let n=0;n<e.length;n++){let r=e[n];Array.isArray(r)?(t===e&&(t=e.slice(0,n)),Mr(r,t)):t!==e&&t.push(r)}return t}function Cr(e,t){e.forEach((e=>Array.isArray(e)?Cr(e,t):t(e)))}function Or(e,t,n){t>=e.length?e.push(n):e.splice(t,0,n)}function xr(e,t){return t>=e.length-1?e.pop():e.splice(t,1)[0]}function Dr(e,t){const n=[];for(let r=0;r<e;r++)n.push(t);return n}function Sr(e,t,n){let r=Ir(e,t);return r>=0?e[1|r]=n:(r=~r,function(e,t,n,r){ngDevMode&&E(t,e.length,"Can't insert past array end.");let o=e.length;if(o==t)e.push(n,r);else if(1===o)e.push(r,e[0]),e[0]=n;else{for(o--,e.push(e[o-1],e[o]);o>t;){const t=o-2;e[o]=e[t],o--}e[t]=n,e[t+1]=r}}(e,r,t,n)),r}function Er(e,t){const n=Ir(e,t);if(n>=0)return e[1|n]}function Ir(e,t){return function(e,t,n){ngDevMode&&C(Array.isArray(e),!0,"Expecting an array");let r=0,o=e.length>>n;for(;o!==r;){const i=r+(o-r>>1),s=e[i<<n];if(t===s)return i<<n;s>t?o=i:r=i+1}return~(o<<n)}(e,t,1)}const Pr=/^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/,jr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/,Tr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/,Ar=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;class kr{constructor(e){this._reflect=e||ie.Reflect}isReflectionEnabled(){return!0}factory(e){return(...t)=>new e(...t)}_zipTypesAndAnnotations(e,t){let n;n=Dr(void 0===e?t.length:e.length);for(let r=0;r<n.length;r++)void 0===e?n[r]=[]:e[r]&&e[r]!=Object?n[r]=[e[r]]:n[r]=[],t&&null!=t[r]&&(n[r]=n[r].concat(t[r]));return n}_ownParameters(e,t){if(n=e.toString(),Pr.test(n)||Ar.test(n)||jr.test(n)&&!Tr.test(n))return null;var n;if(e.parameters&&e.parameters!==t.parameters)return e.parameters;const r=e.ctorParameters;if(r&&r!==t.ctorParameters){const e="function"==typeof r?r():r,t=e.map((e=>e&&e.type)),n=e.map((e=>e&&Nr(e.decorators)));return this._zipTypesAndAnnotations(t,n)}const o=e.hasOwnProperty(rr)&&e[rr],i=this._reflect&&this._reflect.getOwnMetadata&&this._reflect.getOwnMetadata("design:paramtypes",e);return i||o?this._zipTypesAndAnnotations(i,o):Dr(e.length)}parameters(e){if(!wr(e))return[];const t=Rr(e);let n=this._ownParameters(e,t);return n||t===Object||(n=this.parameters(t)),n||[]}_ownAnnotations(e,t){if(e.annotations&&e.annotations!==t.annotations){let t=e.annotations;return"function"==typeof t&&t.annotations&&(t=t.annotations),t}return e.decorators&&e.decorators!==t.decorators?Nr(e.decorators):e.hasOwnProperty(nr)?e[nr]:null}annotations(e){if(!wr(e))return[];const t=Rr(e),n=this._ownAnnotations(e,t)||[];return(t!==Object?this.annotations(t):[]).concat(n)}_ownPropMetadata(e,t){if(e.propMetadata&&e.propMetadata!==t.propMetadata){let t=e.propMetadata;return"function"==typeof t&&t.propMetadata&&(t=t.propMetadata),t}if(e.propDecorators&&e.propDecorators!==t.propDecorators){const t=e.propDecorators,n={};return Object.keys(t).forEach((e=>{n[e]=Nr(t[e])})),n}return e.hasOwnProperty(or)?e[or]:null}propMetadata(e){if(!wr(e))return{};const t=Rr(e),n={};if(t!==Object){const e=this.propMetadata(t);Object.keys(e).forEach((t=>{n[t]=e[t]}))}const r=this._ownPropMetadata(e,t);return r&&Object.keys(r).forEach((e=>{const t=[];n.hasOwnProperty(e)&&t.push(...n[e]),t.push(...r[e]),n[e]=t})),n}ownPropMetadata(e){return wr(e)&&this._ownPropMetadata(e,Rr(e))||{}}hasLifecycleHook(e,t){return e instanceof _r&&t in e.prototype}guards(e){return{}}getter(e){return new Function("o","return o."+e+";")}setter(e){return new Function("o","v","return o."+e+" = v;")}method(e){return new Function("o","args",`if (!o.${e}) throw new Error('"${e}" is undefined');\n        return o.${e}.apply(o, args);`)}importUri(e){return"object"==typeof e&&e.filePath?e.filePath:`./${u(e)}`}resourceUri(e){return`./${u(e)}`}resolveIdentifier(e,t,n,r){return r}resolveEnum(e,t){return e[t]}}function Nr(e){return e?e.map((e=>new(0,e.type.annotationCls)(...e.args?e.args:[]))):[]}function Rr(e){const t=e.prototype?Object.getPrototypeOf(e.prototype):null;return(t?t.constructor:null)||Object}const Fr={},Vr=/\n/gm,Lr="__source",$r=i({provide:String,useValue:i});let Hr;function Br(e){const t=Hr;return Hr=e,t}function Ur(e,t=q.Default){if(void 0===Hr){const e="undefined"==typeof ngDevMode||ngDevMode?"inject() must be called from an injection context":"";throw new p(203,e)}return null===Hr?J(e,void 0,t):Hr.get(e,t&q.Optional?null:void 0,t)}function Wr(e,t=q.Default){return(K||Ur)(d(e),t)}function zr(e){const t=ngDevMode?`This constructor is not compatible with Angular Dependency Injection because its dependency at index ${e} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${e} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`:"invalid";throw new Error(t)}const qr=Wr;function Kr(e){const t=[];for(let n=0;n<e.length;n++){const r=d(e[n]);if(Array.isArray(r)){if(0===r.length){const e="undefined"==typeof ngDevMode||ngDevMode?"Arguments array must have arguments.":"";throw new p(900,e)}let e,n=q.Default;for(let t=0;t<r.length;t++){const o=r[t],i=o.__NG_DI_FLAG__;"number"==typeof i?-1===i?e=o.token:n|=i:e=o}t.push(Wr(e,n))}else t.push(Wr(r))}return t}function Gr(e,t){return e.__NG_DI_FLAG__=t,e.prototype.__NG_DI_FLAG__=t,e}const Jr=Gr(ur("Inject",(e=>({token:e}))),-1),Zr=Gr(ur("Optional"),8),Qr=Gr(ur("Self"),2),Yr=Gr(ur("SkipSelf"),4),Xr=Gr(ur("Host"),1);let eo=null;function to(){return eo=eo||new kr}function no(e){return ro(to().parameters(e))}function ro(e){return e.map((e=>function(e){const t={token:null,attribute:null,host:!1,optional:!1,self:!1,skipSelf:!1};if(Array.isArray(e)&&e.length>0)for(let n=0;n<e.length;n++){const r=e[n];if(void 0===r)continue;const o=Object.getPrototypeOf(r);if(r instanceof Zr||"Optional"===o.ngMetadataName)t.optional=!0;else if(r instanceof Yr||"SkipSelf"===o.ngMetadataName)t.skipSelf=!0;else if(r instanceof Qr||"Self"===o.ngMetadataName)t.self=!0;else if(r instanceof Xr||"Host"===o.ngMetadataName)t.host=!0;else if(r instanceof Jr)t.token=r.token;else if(r instanceof cr){if(void 0===r.attributeName)throw new Error("Attribute name must be defined.");t.attribute=r.attributeName}else t.token=r}else void 0===e||Array.isArray(e)&&0===e.length?t.token=null:t.token=e;return t}(e)))}function oo(e){const t=[],n=new Map;function r(t){let r=n.get(t);if(!r){const o=e(t);n.set(t,r=o.then(co))}return r}return io.forEach(((e,n)=>{const o=[];e.templateUrl&&o.push(r(e.templateUrl).then((t=>{e.template=t})));const i=e.styleUrls,s=e.styles||(e.styles=[]),u=e.styles.length;i&&i.forEach(((t,n)=>{s.push(""),o.push(r(t).then((r=>{s[u+n]=r,i.splice(i.indexOf(t),1),0==i.length&&(e.styleUrls=void 0)})))}));const a=Promise.all(o).then((()=>function(e){so.delete(e)}(n)));t.push(a)})),ao(),Promise.all(t).then((()=>{}))}let io=new Map;const so=new Set;function uo(e){return!!(e.templateUrl&&!e.hasOwnProperty("template")||e.styleUrls&&e.styleUrls.length)}function ao(){const e=io;return io=new Map,e}function co(e){return"string"==typeof e?e:e.text()}let lo,fo;function po(){if(void 0===lo&&(lo=null,ie.trustedTypes))try{lo=ie.trustedTypes.createPolicy("angular",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch(e){}return lo}function ho(e){var t;return(null===(t=po())||void 0===t?void 0:t.createHTML(e))||e}function vo(){if(void 0===fo&&(fo=null,ie.trustedTypes))try{fo=ie.trustedTypes.createPolicy("angular#unsafe-bypass",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch(e){}return fo}function yo(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createHTML(e))||e}function go(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createScript(e))||e}function mo(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createScriptURL(e))||e}class bo{constructor(e){this.changingThisBreaksApplicationSecurity=e}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see https://g.co/ng/security#xss)`}}class _o extends bo{getTypeName(){return"HTML"}}class wo extends bo{getTypeName(){return"Style"}}class Mo extends bo{getTypeName(){return"Script"}}class Co extends bo{getTypeName(){return"URL"}}class Oo extends bo{getTypeName(){return"ResourceURL"}}function xo(e){return e instanceof bo?e.changingThisBreaksApplicationSecurity:e}function Do(e,t){const n=So(e);if(null!=n&&n!==t){if("ResourceURL"===n&&"URL"===t)return!0;throw new Error(`Required a safe ${t}, got a ${n} (see https://g.co/ng/security#xss)`)}return n===t}function So(e){return e instanceof bo&&e.getTypeName()||null}function Eo(e){return new _o(e)}function Io(e){return new wo(e)}function Po(e){return new Mo(e)}function jo(e){return new Co(e)}function To(e){return new Oo(e)}function Ao(e){const t=new No(e);return function(){try{return!!(new window.DOMParser).parseFromString(ho(""),"text/html")}catch(e){return!1}}()?new ko(t):t}class ko{constructor(e){this.inertDocumentHelper=e}getInertBodyElement(e){e="<body><remove></remove>"+e;try{const t=(new window.DOMParser).parseFromString(ho(e),"text/html").body;return null===t?this.inertDocumentHelper.getInertBodyElement(e):(t.removeChild(t.firstChild),t)}catch(e){return null}}}class No{constructor(e){if(this.defaultDoc=e,this.inertDocument=this.defaultDoc.implementation.createHTMLDocument("sanitization-inert"),null==this.inertDocument.body){const e=this.inertDocument.createElement("html");this.inertDocument.appendChild(e);const t=this.inertDocument.createElement("body");e.appendChild(t)}}getInertBodyElement(e){const t=this.inertDocument.createElement("template");if("content"in t)return t.innerHTML=ho(e),t;const n=this.inertDocument.createElement("body");return n.innerHTML=ho(e),this.defaultDoc.documentMode&&this.stripCustomNsAttrs(n),n}stripCustomNsAttrs(e){const t=e.attributes;for(let n=t.length-1;0<n;n--){const r=t.item(n).name;"xmlns:ns1"!==r&&0!==r.indexOf("ns1:")||e.removeAttribute(r)}let n=e.firstChild;for(;n;)n.nodeType===Node.ELEMENT_NODE&&this.stripCustomNsAttrs(n),n=n.nextSibling}}const Ro=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,Fo=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function Vo(e){return(e=String(e)).match(Ro)||e.match(Fo)?e:(("undefined"==typeof ngDevMode||ngDevMode)&&console.warn(`WARNING: sanitizing unsafe URL value ${e} (see https://g.co/ng/security#xss)`),"unsafe:"+e)}function Lo(e){return(e=String(e)).split(",").map((e=>Vo(e.trim()))).join(", ")}function $o(e){const t={};for(const n of e.split(","))t[n]=!0;return t}function Ho(...e){const t={};for(const n of e)for(const e in n)n.hasOwnProperty(e)&&(t[e]=!0);return t}const Bo=$o("area,br,col,hr,img,wbr"),Uo=$o("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),Wo=$o("rp,rt"),zo=Ho(Wo,Uo),qo=Ho(Uo,$o("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),Ko=Ho(Wo,$o("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),Go=Ho(Bo,qo,Ko,zo),Jo=$o("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),Zo=$o("srcset"),Qo=$o("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),Yo=$o("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext"),Xo=Ho(Jo,Zo,Qo,Yo),ei=$o("script,style,template");class ti{constructor(){this.sanitizedSomething=!1,this.buf=[]}sanitizeChildren(e){let t=e.firstChild,n=!0;for(;t;)if(t.nodeType===Node.ELEMENT_NODE?n=this.startElement(t):t.nodeType===Node.TEXT_NODE?this.chars(t.nodeValue):this.sanitizedSomething=!0,n&&t.firstChild)t=t.firstChild;else for(;t;){t.nodeType===Node.ELEMENT_NODE&&this.endElement(t);let e=this.checkClobberedElement(t,t.nextSibling);if(e){t=e;break}t=this.checkClobberedElement(t,t.parentNode)}return this.buf.join("")}startElement(e){const t=e.nodeName.toLowerCase();if(!Go.hasOwnProperty(t))return this.sanitizedSomething=!0,!ei.hasOwnProperty(t);this.buf.push("<"),this.buf.push(t);const n=e.attributes;for(let e=0;e<n.length;e++){const t=n.item(e),r=t.name,o=r.toLowerCase();if(!Xo.hasOwnProperty(o)){this.sanitizedSomething=!0;continue}let i=t.value;Jo[o]&&(i=Vo(i)),Zo[o]&&(i=Lo(i)),this.buf.push(" ",r,'="',oi(i),'"')}return this.buf.push(">"),!0}endElement(e){const t=e.nodeName.toLowerCase();Go.hasOwnProperty(t)&&!Bo.hasOwnProperty(t)&&(this.buf.push("</"),this.buf.push(t),this.buf.push(">"))}chars(e){this.buf.push(oi(e))}checkClobberedElement(e,t){if(t&&(e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)===Node.DOCUMENT_POSITION_CONTAINED_BY)throw new Error(`Failed to sanitize html because the element is clobbered: ${e.outerHTML}`);return t}}const ni=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,ri=/([^\#-~ |!])/g;function oi(e){return e.replace(/&/g,"&amp;").replace(ni,(function(e){return"&#"+(1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536)+";"})).replace(ri,(function(e){return"&#"+e.charCodeAt(0)+";"})).replace(/</g,"&lt;").replace(/>/g,"&gt;")}let ii;function si(e,t){let n=null;try{ii=ii||Ao(e);let r=t?String(t):"";n=ii.getInertBodyElement(r);let o=5,i=r;do{if(0===o)throw new Error("Failed to sanitize html because the input is unstable");o--,r=i,i=n.innerHTML,n=ii.getInertBodyElement(r)}while(r!==i);const s=new ti,u=s.sanitizeChildren(ui(n)||n);return("undefined"==typeof ngDevMode||ngDevMode)&&s.sanitizedSomething&&console.warn("WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss"),ho(u)}finally{if(n){const e=ui(n)||n;for(;e.firstChild;)e.removeChild(e.firstChild)}}}function ui(e){return"content"in e&&function(e){return e.nodeType===Node.ELEMENT_NODE&&"TEMPLATE"===e.nodeName}(e)?e.content:null}var ai;function ci(e){const t=gi();return t?yo(t.sanitize(ai.HTML,e)||""):Do(e,"HTML")?yo(xo(e)):si(ht(),v(e))}function li(e){const t=gi();return t?t.sanitize(ai.STYLE,e)||"":Do(e,"Style")?xo(e):v(e)}function di(e){const t=gi();return t?t.sanitize(ai.URL,e)||"":Do(e,"URL")?xo(e):Vo(v(e))}function fi(e){const t=gi();if(t)return mo(t.sanitize(ai.RESOURCE_URL,e)||"");if(Do(e,"ResourceURL"))return mo(xo(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a resource URL context (see https://g.co/ng/security#xss)":"";throw new p(904,n)}function pi(e){const t=gi();if(t)return go(t.sanitize(ai.SCRIPT,e)||"");if(Do(e,"Script"))return go(xo(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a script context":"";throw new p(905,n)}function hi(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted HTML constant: ${e.join("?")}`);return ho(e[0])}function vi(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted URL constant: ${e.join("?")}`);return function(e){var t;return(null===(t=po())||void 0===t?void 0:t.createScriptURL(e))||e}(e[0])}function yi(e,t,n){return function(e,t){return"src"===t&&("embed"===e||"frame"===e||"iframe"===e||"media"===e||"script"===e)||"href"===t&&("base"===e||"link"===e)?fi:di}(t,n)(e)}function gi(){const e=At();return e&&e[12]}function mi(e){let t=Mi(e);if(t){if(Array.isArray(t)){const r=t;let o,i,s;if((n=e)&&n.constructor&&n.constructor.ɵcmp){if(o=Di(r,e),-1==o)throw new Error("The provided component was not found in the application");i=e}else if(function(e){return e&&e.constructor&&e.constructor.ɵdir}(e)){if(o=function(e,t){let n=e[1].firstChild;for(;n;){const r=n.directiveStart,o=n.directiveEnd;for(let i=r;i<o;i++)if(e[i]===t)return n.index;n=xi(n)}return-1}(r,e),-1==o)throw new Error("The provided directive was not found in the application");s=Si(o,r,!1)}else if(o=Oi(r,e),-1==o)return null;const u=mt(r[o]),a=Mi(u),c=a&&!Array.isArray(a)?a:bi(r,o,u);if(i&&void 0===c.component&&(c.component=i,wi(c.component,c)),s&&void 0===c.directives){c.directives=s;for(let e=0;e<s.length;e++)wi(s[e],c)}wi(c.native,c),t=c}}else{const n=e;ngDevMode&&A(n);let r=n;for(;r=r.parentNode;){const e=Mi(r);if(e){let r;if(r=Array.isArray(e)?e:e.lView,!r)return null;const o=Oi(r,n);if(o>=0){const e=mt(r[o]),n=bi(r,o,e);wi(e,n),t=n;break}}}}var n;return t||null}function bi(e,t,n){return{lView:e,nodeIndex:t,native:n,component:void 0,directives:void 0,localRefs:void 0}}function _i(e){let t,n=Mi(e);if(Array.isArray(n)){const r=Di(n,e);t=Ct(r,n);const o=bi(n,r,t[0]);o.component=e,wi(e,o),wi(o.native,o)}else{const e=n;t=Ct(e.nodeIndex,e.lView)}return t}function wi(e,t){ngDevMode&&j(e,"Target expected"),e.__ngContext__=t}function Mi(e){return ngDevMode&&j(e,"Target expected"),e.__ngContext__||null}function Ci(e){const t=Mi(e);return t?Array.isArray(t)?t:t.lView:null}function Oi(e,t){const n=e[1];for(let r=je;r<n.bindingStartIndex;r++)if(mt(e[r])===t)return r;return-1}function xi(e){if(e.child)return e.child;if(e.next)return e.next;for(;e.parent&&!e.parent.next;)e=e.parent;return e.parent&&e.parent.next}function Di(e,t){const n=e[1].components;if(n)for(let r=0;r<n.length;r++){const o=n[r];if(Ct(o,e)[8]===t)return o}else if(Ct(je,e)[8]===t)return je;return-1}function Si(e,t,n){const r=t[1].data[e];let o=r.directiveStart;if(0==o)return ae;const i=r.directiveEnd;return!n&&2&r.flags&&o++,t.slice(o,i)}function Ei(e){return e.ngOriginalError}function Ii(e,...t){e.error(...t)}!function(e){e[e.NONE=0]="NONE",e[e.HTML=1]="HTML",e[e.STYLE=2]="STYLE",e[e.SCRIPT=3]="SCRIPT",e[e.URL=4]="URL",e[e.RESOURCE_URL=5]="RESOURCE_URL"}(ai||(ai={}));class Pi{constructor(){this._console=console}handleError(e){const t=this._findOriginalError(e),n=function(e){return e&&e.ngErrorLogger||Ii}(e);n(this._console,"ERROR",e),t&&n(this._console,"ORIGINAL ERROR",t)}_findOriginalError(e){let t=e&&Ei(e);for(;t&&Ei(t);)t=Ei(t);return t||null}}const ji={name:"custom-elements"},Ti={name:"no-errors-schema"},Ai=/^>|^->|<!--|-->|--!>|<!-$/g,ki=/(<|>)/;function Ni(e){return e.replace(Ai,(e=>e.replace(ki,"​$1​")))}const Ri=/([A-Z])/g,Fi=("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(ie);function Vi(e){return e.ownerDocument.defaultView}function Li(e){return e.ownerDocument}function $i(e){return e.ownerDocument.body}const Hi="�";function Bi(e){return e instanceof Function?e():e}function Ui(e){throw new p(-300,`Multiple components match node with tagname ${e.value}`)}function Wi(e,t,n,r,o){const[i,s,...u]=r.split(Hi);let a=s,c=s;for(let r=0;r<u.length;r++){const i=t+r;a+=`${e[i]}${u[r]}`,c+=`${i===n?o:e[i]}${u[r]}`}return{propName:i,oldValue:a,newValue:c}}var zi;let qi;function Ki(e,t){return qi(e,t)}function Gi(e){ngDevMode&&Ke(e);const t=e[3];return ke(t)?t[3]:t}function Ji(e){const t=function(e){ngDevMode&&j(e,"component");let t=Ae(e)?e:Ci(e);for(;t&&!(512&t[2]);)t=Gi(t);return ngDevMode&&Ke(t),t}(e);return ngDevMode&&j(t[8],"RootView has no context. Perhaps it is disconnected?"),t[8]}function Zi(e){return Yi(e[13])}function Qi(e){return Yi(e[4])}function Yi(e){for(;null!==e&&!ke(e);)e=e[4];return e}function Xi(e,t,n,r,o){if(null!=r){let i,s=!1;ke(r)?i=r:Ae(r)&&(s=!0,ngDevMode&&j(r[0],"HOST must be defined for a component LView"),r=r[0]);const u=mt(r);ngDevMode&&!yt(t)&&A(u),0===e&&null!==n?null==o?ds(t,n,u):ls(t,n,u,o||null,!0):1===e&&null!==n?ls(t,n,u,o||null,!0):2===e?Cs(t,u,s):3===e&&(ngDevMode&&ngDevMode.rendererDestroyNode++,t.destroyNode(u)),null!=i&&function(e,t,n,r,o){ngDevMode&&ze(n);const i=n[7];i!==mt(n)&&Xi(t,e,r,i,o);for(let o=Pe;o<n.length;o++){const s=n[o];xs(s[1],s,e,t,r,i)}}(t,e,i,n,o)}}function es(e,t){return ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&ngDevMode.rendererSetText++,yt(e)?e.createText(t):e.createTextNode(t)}function ts(e,t,n){ngDevMode&&ngDevMode.rendererSetText++,yt(e)?e.setValue(t,n):t.textContent=n}function ns(e,t){return ngDevMode&&ngDevMode.rendererCreateComment++,e.createComment(Ni(t))}function rs(e,t,n){if(ngDevMode&&ngDevMode.rendererCreateElement++,yt(e))return e.createElement(t,n);{const r=null!==n?function(e){const t=e.toLowerCase();return t===lt?"http://www.w3.org/2000/svg":t===dt?"http://www.w3.org/1998/MathML/":null}(n):null;return null===r?e.createElement(t):e.createElementNS(r,t)}}function os(e,t){ngDevMode&&ze(e),ngDevMode&&j(e[9],"A projected view should belong to a non-empty projected views collection");const n=e[9],r=n.indexOf(t),o=t[3];ngDevMode&&ze(o),1024&t[2]&&(t[2]&=-1025,Et(o,-1)),n.splice(r,1)}function is(e,t){if(e.length<=Pe)return;const n=Pe+t,r=e[n];if(r){const i=r[17];null!==i&&i!==e&&os(i,r),t>0&&(e[n-1][4]=r[4]);const s=xr(e,Pe+t);xs(r[1],o=r,o[11],2,null,null),o[0]=null,o[6]=null;const u=s[19];null!==u&&u.detachView(s[1]),r[3]=null,r[4]=null,r[2]&=-129}var o;return r}function ss(e,t){if(!(256&t[2])){const n=t[11];yt(n)&&n.destroyNode&&xs(e,t,n,3,null,null),function(e){let t=e[13];if(!t)return us(e[1],e);for(;t;){let n=null;if(Ae(t))n=t[13];else{ngDevMode&&ze(t);const e=t[10];e&&(n=e)}if(!n){for(;t&&!t[4]&&t!==e;)Ae(t)&&us(t[1],t),t=t[3];null===t&&(t=e),Ae(t)&&us(t[1],t),n=t&&t[4]}t=n}}(t)}}function us(e,t){if(!(256&t[2])){t[2]&=-129,t[2]|=256,function(e,t){let n;if(null!=e&&null!=(n=e.destroyHooks))for(let e=0;e<n.length;e+=2){const r=t[n[e]];if(!(r instanceof Cn)){const t=n[e+1];if(Array.isArray(t))for(let e=0;e<t.length;e+=2){const n=r[t[e]],o=t[e+1];ct(4,n,o);try{o.call(n)}finally{ct(5,n,o)}}else{ct(4,r,t);try{t.call(r)}finally{ct(5,r,t)}}}}}(e,t),function(e,t){const n=e.cleanup,r=t[7];let o=-1;if(null!==n)for(let e=0;e<n.length-1;e+=2)if("string"==typeof n[e]){const i=n[e+1],s="function"==typeof i?i(t):mt(t[i]),u=r[o=n[e+2]],a=n[e+3];"boolean"==typeof a?s.removeEventListener(n[e],u,a):a>=0?r[o=a]():r[o=-a].unsubscribe(),e+=2}else{const t=r[o=n[e+1]];n[e].call(t)}if(null!==r){for(let e=o+1;e<r.length;e++){const t=r[e];ngDevMode&&(s="Expecting instance cleanup function.","function"!=typeof(i=t)&&T(s,null===i?"null":typeof i,"function","===")),t()}t[7]=null}var i,s}(e,t),1===t[1].type&&yt(t[11])&&(ngDevMode&&ngDevMode.rendererDestroy++,t[11].destroy());const n=t[17];if(null!==n&&ke(t[3])){n!==t[3]&&os(n,t);const r=t[19];null!==r&&r.detachView(e)}}}function as(e,t,n){return cs(e,t.parent,n)}function cs(e,t,n){let r=t;for(;null!==r&&40&r.type;)r=(t=r).parent;if(null===r)return n[0];if(ngDevMode&&xn(r,7),2&r.flags){ngDevMode&&Le(r,n);const t=e.data[r.directiveStart].encapsulation;if(t===X.None||t===X.Emulated)return null}return _t(r,n)}function ls(e,t,n,r,o){ngDevMode&&ngDevMode.rendererInsertBefore++,yt(e)?e.insertBefore(t,n,r,o):t.insertBefore(n,r,o)}function ds(e,t,n){ngDevMode&&ngDevMode.rendererAppendChild++,ngDevMode&&j(t,"parent node must be defined"),yt(e)?e.appendChild(t,n):t.appendChild(n)}function fs(e,t,n,r,o){null!==r?ls(e,t,n,r,o):ds(e,t,n)}function ps(e,t){return yt(e)?e.parentNode(t):t.parentNode}function hs(e,t,n){return gs(e,t,n)}function vs(e,t,n){return 40&e.type?_t(e,n):null}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(zi||(zi={}));let ys,gs=vs;function ms(e,t){gs=e,ys=t}function bs(e,t,n,r){const o=as(e,r,t),i=t[11],s=hs(r.parent||t[6],r,t);if(null!=o)if(Array.isArray(n))for(let e=0;e<n.length;e++)fs(i,o,n[e],s,!1);else fs(i,o,n,s,!1);void 0!==ys&&ys(i,r,t,n,o)}function _s(e,t){if(null!==t){ngDevMode&&xn(t,63);const n=t.type;if(3&n)return _t(t,e);if(4&n)return Ms(-1,e[t.index]);if(8&n){const n=t.child;if(null!==n)return _s(e,n);{const n=e[t.index];return ke(n)?Ms(-1,n):mt(n)}}if(32&n)return Ki(t,e)()||mt(e[t.index]);{const n=ws(e,t);if(null!==n){if(Array.isArray(n))return n[0];const t=Gi(e[16]);return ngDevMode&&Ye(t),_s(t,n)}return _s(e,t.next)}}return null}function ws(e,t){if(null!==t){const n=e[16][6],r=t.projection;return ngDevMode&&function(e,t){j(e[16],"Component views should exist."),j(e[16][6].projection,"Components with projection nodes (<ng-content>) must have projection slots defined.")}(e),n.projection[r]}return null}function Ms(e,t){const n=Pe+e+1;if(n<t.length){const e=t[n],r=e[1].firstChild;if(null!==r)return _s(e,r)}return t[7]}function Cs(e,t,n){ngDevMode&&ngDevMode.rendererRemoveNode++;const r=ps(e,t);r&&function(e,t,n,r){yt(e)?e.removeChild(t,n,r):t.removeChild(n)}(e,r,t,n)}function Os(e,t,n,r,o,i,s){for(;null!=n;){ngDevMode&&Le(n,r),ngDevMode&&xn(n,63);const u=r[n.index],a=n.type;if(s&&0===t&&(u&&wi(mt(u),r),n.flags|=4),64!=(64&n.flags))if(8&a)Os(e,t,n.child,r,o,i,!1),Xi(t,e,o,u,i);else if(32&a){const s=Ki(n,r);let a;for(;a=s();)Xi(t,e,o,a,i);Xi(t,e,o,u,i)}else 16&a?Ds(e,t,r,n,o,i):(ngDevMode&&xn(n,7),Xi(t,e,o,u,i));n=s?n.projectionNext:n.next}}function xs(e,t,n,r,o,i){Os(n,r,e.firstChild,t,o,i,!1)}function Ds(e,t,n,r,o,i){const s=n[16],u=s[6];ngDevMode&&C(typeof r.projection,"number","expecting projection index");const a=u.projection[r.projection];if(Array.isArray(a))for(let n=0;n<a.length;n++)Xi(t,e,o,a[n],i);else Os(e,t,a,s[3],o,i,!0)}function Ss(e,t,n){ngDevMode&&M(n,"'newValue' should be a string"),yt(e)?e.setAttribute(t,"style",n):t.style.cssText=n,ngDevMode&&ngDevMode.rendererSetStyle++}function Es(e,t,n){ngDevMode&&M(n,"'newValue' should be a string"),yt(e)?""===n?e.removeAttribute(t,"class"):e.setAttribute(t,"class",n):t.className=n,ngDevMode&&ngDevMode.rendererSetClassName++}function Is(e,t,n){ngDevMode&&O(t,"",'can not look for "" string.');let r=e.length;for(;;){const o=e.indexOf(t,n);if(-1===o)return o;if(0===o||e.charCodeAt(o-1)<=32){const n=t.length;if(o+n===r||e.charCodeAt(o+n)<=32)return o}n=o+1}}const Ps="ng-template";function js(e,t,n){ngDevMode&&C(t,t.toLowerCase(),"Class name expected to be lowercase.");let r=0;for(;r<e.length;){let o=e[r++];if(n&&"class"===o){if(o=e[r],-1!==Is(o.toLowerCase(),t,0))return!0}else if(1===o){for(;r<e.length&&"string"==typeof(o=e[r++]);)if(o.toLowerCase()===t)return!0;return!1}}return!1}function Ts(e){return 4===e.type&&e.value!==Ps}function As(e,t,n){return t===(4!==e.type||n?e.value:Ps)}function ks(e,t,n){ngDevMode&&j(t[0],"Selector should have a tag name");let r=4;const o=e.attrs||[],i=function(e){for(let t=0;t<e.length;t++)if(Sn(e[t]))return t;return e.length}(o);let s=!1;for(let u=0;u<t.length;u++){const a=t[u];if("number"!=typeof a){if(!s)if(4&r){if(r=2|1&r,""!==a&&!As(e,a,n)||""===a&&1===t.length){if(Ns(r))return!1;s=!0}}else{const c=8&r?a:t[++u];if(8&r&&null!==e.attrs){if(!js(e.attrs,c,n)){if(Ns(r))return!1;s=!0}continue}const l=Rs(8&r?"class":a,o,Ts(e),n);if(-1===l){if(Ns(r))return!1;s=!0;continue}if(""!==c){let e;l>i?e="":(ngDevMode&&O(o[l],0,"We do not match directives on namespaced attributes"),e=o[l+1].toLowerCase());const t=8&r?e:null;if(t&&-1!==Is(t,c,0)||2&r&&c!==e){if(Ns(r))return!1;s=!0}}}}else{if(!s&&!Ns(r)&&!Ns(a))return!1;if(s&&Ns(a))continue;s=!1,r=a|1&r}}return Ns(r)||s}function Ns(e){return 0==(1&e)}function Rs(e,t,n,r){if(null===t)return-1;let o=0;if(r||!n){let n=!1;for(;o<t.length;){const r=t[o];if(r===e)return o;if(3===r||6===r)n=!0;else{if(1===r||2===r){let e=t[++o];for(;"string"==typeof e;)e=t[++o];continue}if(4===r)break;if(0===r){o+=4;continue}}o+=n?1:2}return-1}return function(e,t){let n=e.indexOf(4);if(n>-1)for(n++;n<e.length;){const r=e[n];if("number"==typeof r)return-1;if(r===t)return n;n++}return-1}(t,e)}function Fs(e,t,n=!1){for(let r=0;r<t.length;r++)if(ks(e,t[r],n))return!0;return!1}function Vs(e,t){e:for(let n=0;n<t.length;n++){const r=t[n];if(e.length===r.length){for(let t=0;t<e.length;t++)if(e[t]!==r[t])continue e;return!0}}return!1}function Ls(e,t){return e?":not("+t.trim()+")":t}function $s(e){let t=e[0],n=1,r=2,o="",i=!1;for(;n<e.length;){let s=e[n];if("string"==typeof s)if(2&r){const t=e[++n];o+="["+s+(t.length>0?'="'+t+'"':"")+"]"}else 8&r?o+="."+s:4&r&&(o+=" "+s);else""===o||Ns(s)||(t+=Ls(i,o),o=""),r=s,i=i||!Ns(r);n++}return""!==o&&(t+=Ls(i,o)),t}const Hs="undefined"==typeof ngDevMode||ngDevMode?{__brand__:"NO_CHANGE"}:{};function Bs(e){ngDevMode&&I(e,0,"Can only advance forward"),Us(kt(),At(),ln()+e,Bt())}function Us(e,t,n,r){if(ngDevMode&&function(e,t){const n=e[1];Qe(je,n.bindingStartIndex,t)}(t,n),!r)if(3==(3&t[2])){const r=e.preOrderCheckHooks;null!==r&&gn(t,r,n)}else{const r=e.preOrderHooks;null!==r&&mn(t,r,0,n)}dn(n)}function Ws(e){if(!ngDevMode)throw new Error("Looks like we are in 'prod mode', but we are creating a named Array type, which is wrong! Check your code");try{return function(...e){if("undefined"==typeof ngDevMode)throw new Error("newTrustedFunctionForDev should never be called in production");if(!ie.trustedTypes)return new Function(...e);const t=`(function anonymous(${e.slice(0,-1).join(",")}\n) { ${e[e.length-1]}\n})`,n=ie.eval((r=t,(null===(o=po())||void 0===o?void 0:o.createScript(r))||r));var r,o;return void 0===n.bind?new Function(...e):(n.toString=()=>t,n.bind(ie))}("Array",`return class ${e} extends Array{}`)(Array)}catch(e){return Array}}function zs(e,t){return ngDevMode&&w(e,0,32767),ngDevMode&&w(t,0,32767),e<<17|t<<2}function qs(e){return ngDevMode&&_(e,"expected number"),e>>17&32767}function Ks(e){return ngDevMode&&_(e,"expected number"),2==(2&e)}function Gs(e){return ngDevMode&&_(e,"expected number"),2|e}function Js(e){return ngDevMode&&_(e,"expected number"),(131068&e)>>2}function Zs(e,t){return ngDevMode&&_(e,"expected number"),ngDevMode&&w(t,0,32767),-131069&e|t<<2}function Qs(e){return ngDevMode&&_(e,"expected number"),1==(1&e)}function Ys(e){return ngDevMode&&_(e,"expected number"),1|e}function Xs(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{value:t,enumerable:!1})}function eu(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{get:t,enumerable:!1})}let tu,nu,ru,ou,iu;class su extends Array{}class uu extends Array{}class au extends Array{}function cu(e){if(null==e)return"";const t=e.lastIndexOf("_Template");return"_"+(-1===t?e:e.substr(0,t))}function lu(e,t){const n=e.tView_.data,r=[],o=t?e.classBindings:e.styleBindings,i=qs(o),s=Js(o);let u=0!==s,a=u?s:i;for(;0!==a;){const e=n[a],t=n[a+1];r.unshift({key:e,index:a,isTemplate:u,prevDuplicate:Ks(t),nextDuplicate:Qs(t),nextIndex:Js(t),prevIndex:qs(t)}),a===i&&(u=!1),a=qs(t)}return r.push((t?e.residualClasses:e.residualStyles)||null),r}function du(e,t){for(;e;)t.push(e.template_),e=e.next}class fu extends Array{}let pu;class hu extends Array{}class vu extends Array{}class yu extends Array{}class gu extends Array{}class mu extends Array{}class bu extends Array{}class _u extends Array{}function wu(e){if(e){const t=e.debug;return j(t,"Object does not have a debug representation."),t}return e}function Mu(e,t=!1){const n=mt(e);if(n)switch(n.nodeType){case Node.TEXT_NODE:return n.textContent;case Node.COMMENT_NODE:return`\x3c!--${n.textContent}--\x3e`;case Node.ELEMENT_NODE:const e=n.outerHTML;if(t)return e;{const t=">"+n.innerHTML+"<";return e.split(t)[0]+">"}}return null}class Cu{constructor(e){this._raw_lView=e}get flags(){const e=this._raw_lView[2];return{__raw__flags__:e,initPhaseState:3&e,creationMode:!!(4&e),firstViewPass:!!(8&e),checkAlways:!!(16&e),dirty:!!(64&e),attached:!!(128&e),destroyed:!!(256&e),isRoot:!!(512&e),indexWithinInitPhase:e>>11}}get parent(){return wu(this._raw_lView[3])}get hostHTML(){return Mu(this._raw_lView[0],!0)}get html(){return(this.nodes||[]).map(Ou).join("")}get context(){return this._raw_lView[8]}get nodes(){const e=this._raw_lView;return Du(e[1].firstChild,e)}get template(){return this.tView.template_}get tView(){return this._raw_lView[1]}get cleanup(){return this._raw_lView[7]}get injector(){return this._raw_lView[9]}get rendererFactory(){return this._raw_lView[10]}get renderer(){return this._raw_lView[11]}get sanitizer(){return this._raw_lView[12]}get childHead(){return wu(this._raw_lView[13])}get next(){return wu(this._raw_lView[4])}get childTail(){return wu(this._raw_lView[14])}get declarationView(){return wu(this._raw_lView[15])}get queries(){return this._raw_lView[19]}get tHost(){return this._raw_lView[6]}get decls(){return xu(this.tView,this._raw_lView,je,this.tView.bindingStartIndex)}get vars(){return xu(this.tView,this._raw_lView,this.tView.bindingStartIndex,this.tView.expandoStartIndex)}get expando(){return xu(this.tView,this._raw_lView,this.tView.expandoStartIndex,this._raw_lView.length)}get childViews(){const e=[];let t=this.childHead;for(;t;)e.push(t),t=t.next;return e}}function Ou(e){if("ElementContainer"===e.type)return(e.children||[]).map(Ou).join("");if("IcuContainer"===e.type)throw new Error("Not implemented");return Mu(e.native,!0)||""}function xu(e,t,n,r){let o=[];for(let i=n;i<r;i++)o.push({index:i,t:e.data[i],l:t[i]});return{start:n,end:r,length:r-n,content:o}}function Du(e,t){if(e){const n=[];let r=e;for(;r;)n.push(Su(r,t)),r=r.next;return n}return[]}function Su(e,t){const n=mt(t[e.index]),r=[],o=[],i=t[1];for(let n=e.directiveStart;n<e.directiveEnd;n++){const e=i.data[n];r.push(e.type),o.push(t[n])}return{html:Mu(n),type:On(e.type),tNode:e,native:n,children:Du(e.child,t),factories:r,instances:o,injector:Eu(e,i,t),get injectorResolutionPath(){return e.debugNodeInjectorPath(t)}}}function Eu(e,t,n){const r=[];for(let n=e.providerIndexStart_;n<e.providerIndexEnd_;n++)r.push(t.data[n]);const o=[];for(let n=e.providerIndexEnd_;n<e.directiveEnd;n++)o.push(t.data[n]);return{bloom:Pu(n,e.injectorIndex),cumulativeBloom:Pu(t.data,e.injectorIndex),providers:o,viewProviders:r,parentInjectorIndex:n[e.providerIndexStart_-1]}}function Iu(e,t){const n=e[t];if("number"!=typeof n)return"????????";const r="00000000"+n.toString(2);return r.substring(r.length-8)}function Pu(e,t){return t<0?"NO_NODE_INJECTOR":`${Iu(e,t+7)}_${Iu(e,t+6)}_${Iu(e,t+5)}_${Iu(e,t+4)}_${Iu(e,t+3)}_${Iu(e,t+2)}_${Iu(e,t+1)}_${Iu(e,t+0)}`}class ju{constructor(e){this._raw_lContainer=e}get hasTransplantedViews(){return this._raw_lContainer[2]}get views(){return this._raw_lContainer.slice(Pe).map(wu)}get parent(){return wu(this._raw_lContainer[3])}get movedViews(){return this._raw_lContainer[9]}get host(){return this._raw_lContainer[0]}get native(){return this._raw_lContainer[7]}get next(){return wu(this._raw_lContainer[4])}}const Tu=Promise.resolve(null);function Au(e,t){const n=e.contentQueries;if(null!==n)for(let r=0;r<n.length;r+=2){const o=n[r],i=n[r+1];if(-1!==i){const n=e.data[i];ngDevMode&&j(n,"DirectiveDef not found."),ngDevMode&&j(n.contentQueries,"contentQueries function should be defined"),en(o),n.contentQueries(2,t[i],i)}}}function ku(e,t,n,r,o,i,s,u,a,c){const l=ngDevMode?function(e){return function(e,t){switch(e){case 0:return void 0===ru&&(ru=new su),ru;case 1:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===ou&&(ou=new uu),ou;void 0===tu&&(tu=new Map);let e=tu.get(t);return void 0===e&&(e=new(Ws("LComponentView"+cu(t))),tu.set(t,e)),e;case 2:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===iu&&(iu=new au),iu;void 0===nu&&(nu=new Map);let n=nu.get(t);return void 0===n&&(n=new(Ws("LEmbeddedView"+cu(t))),nu.set(t,n)),n}}(e.type,e.template&&e.template.name).concat(e.blueprint)}(t):t.blueprint.slice();return l[0]=o,l[2]=140|r,St(l),ngDevMode&&t.declTNode&&e&&Le(t.declTNode,e),l[3]=l[15]=e,l[8]=n,l[10]=s||e&&e[10],ngDevMode&&j(l[10],"RendererFactory is required"),l[11]=u||e&&e[11],ngDevMode&&j(l[11],"Renderer is required"),l[12]=a||e&&e[12]||null,l[9]=c||e&&e[9]||null,l[6]=i,ngDevMode&&C(2!=t.type||null!==e,!0,"Embedded views must have parentLView"),l[16]=2==t.type?e[16]:l,ngDevMode&&function(e){Xs(e,new Cu(e))}(l),l}function Nu(e,t,n,r,o){ngDevMode&&0!==t&&P(t,je,"TNodes can't be in the LView header."),ngDevMode&&function(e){2!==e&&1!==e&&4!==e&&8!==e&&32!==e&&16!==e&&64!==e&&T(`Expected TNodeType to have only a single type selected, but got ${On(e)}.`)}(n);let i=e.data[t];if(null===i)i=Ru(e,t,n,r,o),It.lFrame.inI18n&&(i.flags|=64);else if(64&i.type){i.type=n,i.value=r,i.attrs=o;const s=Vt();i.injectorIndex=null===s?-1:s.injectorIndex,ngDevMode&&$e(i,e),ngDevMode&&C(t,i.index,"Expecting same index")}return Lt(i,!0),i}function Ru(e,t,n,r,o){const i=Ft(),s=$t(),u=s?i:i&&i.parent,a=e.data[t]=function(e,t,n,r,o,i){ngDevMode&&0!==r&&P(r,je,"TNodes can't be in the LView header."),ngDevMode&&D(i,void 0,"'undefined' is not valid value for 'attrs'"),ngDevMode&&ngDevMode.tNode++,ngDevMode&&t&&$e(t,e);let s=t?t.injectorIndex:-1;const u=ngDevMode?new class{constructor(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g,m,b,_,w,M,C,O,x,D,S,E,I,P,j){this.tView_=e,this.type=t,this.index=n,this.insertBeforeIndex=r,this.injectorIndex=o,this.directiveStart=i,this.directiveEnd=s,this.directiveStylingLast=u,this.propertyBindings=a,this.flags=c,this.providerIndexes=l,this.value=d,this.attrs=f,this.mergedAttrs=p,this.localNames=h,this.initialInputs=v,this.inputs=y,this.outputs=g,this.tViews=m,this.next=b,this.projectionNext=_,this.child=w,this.parent=M,this.projection=C,this.styles=O,this.stylesWithoutHost=x,this.residualStyles=D,this.classes=S,this.classesWithoutHost=E,this.residualClasses=I,this.classBindings=P,this.styleBindings=j}debugNodeInjectorPath(e){const t=[];let n=Ln(this,e);if(-1===n){const t=$n(this,e);t!==Mn&&(n=Tn(t),e=An(t,e))}for(;-1!==n;){ngDevMode&&Xe(e,n);const r=e[1].data[n+8];t.push(Su(r,e));const o=e[n+8];o===Mn?n=-1:(n=Tn(o),e=An(o,e))}return t}get type_(){return On(this.type)||`TNodeType.?${this.type}?`}get flags_(){const e=[];return 16&this.flags&&e.push("TNodeFlags.hasClassInput"),8&this.flags&&e.push("TNodeFlags.hasContentQuery"),32&this.flags&&e.push("TNodeFlags.hasStyleInput"),128&this.flags&&e.push("TNodeFlags.hasHostBindings"),2&this.flags&&e.push("TNodeFlags.isComponentHost"),1&this.flags&&e.push("TNodeFlags.isDirectiveHost"),64&this.flags&&e.push("TNodeFlags.isDetached"),4&this.flags&&e.push("TNodeFlags.isProjected"),e.join("|")}get template_(){if(1&this.type)return this.value;const e=[],t="string"==typeof this.value&&this.value||this.type_;if(e.push("<",t),this.flags&&e.push(" ",this.flags_),this.attrs)for(let t=0;t<this.attrs.length;){const n=this.attrs[t++];if("number"==typeof n)break;const r=this.attrs[t++];e.push(" ",n,'="',r,'"')}return e.push(">"),du(this.child,e),e.push("</",t,">"),e.join("")}get styleBindings_(){return lu(this,!1)}get classBindings_(){return lu(this,!0)}get providerIndexStart_(){return 1048575&this.providerIndexes}get providerIndexEnd_(){return this.providerIndexStart_+(this.providerIndexes>>>20)}}(e,n,r,null,s,-1,-1,-1,null,0,0,o,i,null,null,void 0,null,null,null,null,null,null,t,null,null,null,void 0,null,null,void 0,0,0):{type:n,index:r,insertBeforeIndex:null,injectorIndex:s,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,value:o,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:t,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0};return ngDevMode&&Object.seal(u),u}(e,u,n,t,r,o);return null===e.firstChild&&(e.firstChild=a),null!==i&&(s?null==i.child&&null!==a.parent&&(i.child=a):null===i.next&&(i.next=a)),a}function Fu(e,t,n,r){if(0===n)return-1;ngDevMode&&(Ge(e),x(e,t[1],"`LView` must be associated with `TView`!"),C(e.data.length,t.length,"Expecting LView to be same size as TView"),C(e.data.length,e.blueprint.length,"Expecting Blueprint to be same size as TView"),Je(e));const o=t.length;for(let o=0;o<n;o++)t.push(r),e.blueprint.push(r),e.data.push(null);return o}function Vu(e,t,n){ngDevMode&&C(Ot(t),!0,"Should be run in creation mode"),rn(t);try{const r=e.viewQuery;null!==r&&Ma(1,r,n);const o=e.template;null!==o&&Hu(e,t,o,1,n),e.firstCreatePass&&(e.firstCreatePass=!1),e.staticContentQueries&&Au(e,t),e.staticViewQueries&&Ma(2,e.viewQuery,n);const i=e.components;null!==i&&function(e,t){for(let n=0;n<t.length;n++)ya(e,t[n])}(t,i)}catch(t){throw e.firstCreatePass&&(e.incompleteFirstPass=!0,e.firstCreatePass=!1),t}finally{t[2]&=-5,cn()}}function Lu(e,t,n,r){ngDevMode&&C(Ot(t),!1,"Should be run in update mode");const o=t[2];if(256==(256&o))return;rn(t);const i=Bt();try{St(t),qt(e.bindingStartIndex),null!==n&&Hu(e,t,n,2,r);const s=3==(3&o);if(!i)if(s){const n=e.preOrderCheckHooks;null!==n&&gn(t,n,null)}else{const n=e.preOrderHooks;null!==n&&mn(t,n,0,null),bn(t,0)}if(function(e){for(let t=Zi(e);null!==t;t=Qi(t)){if(!t[2])continue;const e=t[9];ngDevMode&&j(e,"Transplanted View flags set but missing MOVED_VIEWS");for(let t=0;t<e.length;t++){const n=e[t],r=n[3];ngDevMode&&ze(r),0==(1024&n[2])&&Et(r,1),n[2]|=1024}}}(t),function(e){for(let t=Zi(e);null!==t;t=Qi(t))for(let e=Pe;e<t.length;e++){const n=t[e],r=n[1];ngDevMode&&j(r,"TView must be allocated"),xt(n)&&Lu(r,n,r.template,n[8])}}(t),null!==e.contentQueries&&Au(e,t),!i)if(s){const n=e.contentCheckHooks;null!==n&&gn(t,n)}else{const n=e.contentHooks;null!==n&&mn(t,n,1),bn(t,1)}!function(e,t){const n=e.hostBindingOpCodes;if(null!==n)try{for(let e=0;e<n.length;e++){const r=n[e];if(r<0)dn(~r);else{const o=r,i=n[++e],s=n[++e];Zt(i,o),s(2,t[o])}}}finally{dn(-1)}}(e,t);const u=e.components;null!==u&&function(e,t){for(let n=0;n<t.length;n++)ha(e,t[n])}(t,u);const a=e.viewQuery;if(null!==a&&Ma(2,a,r),!i)if(s){const n=e.viewCheckHooks;null!==n&&gn(t,n)}else{const n=e.viewHooks;null!==n&&mn(t,n,2),bn(t,2)}!0===e.firstUpdatePass&&(e.firstUpdatePass=!1),i||(t[2]&=-73),1024&t[2]&&(t[2]&=-1025,Et(t[3],-1))}finally{cn()}}function $u(e,t,n,r){const o=t[10],i=!Bt(),s=Ot(t);try{i&&!s&&o.begin&&o.begin(),s&&Vu(e,t,r),Lu(e,t,n,r)}finally{i&&!s&&o.end&&o.end()}}function Hu(e,t,n,r,o){const i=ln(),s=2&r;try{dn(-1),s&&t.length>je&&Us(e,t,je,Bt()),ct(s?2:0,o),n(r,o)}finally{dn(i),ct(s?3:1,o)}}function Bu(e,t,n){if(Ne(t)){const r=t.directiveStart,o=t.directiveEnd;for(let t=r;t<o;t++){const r=e.data[t];r.contentQueries&&r.contentQueries(1,n[t],t)}}}function Uu(e,t,n){Pt()&&(function(e,t,n,r){const o=n.directiveStart,i=n.directiveEnd;e.firstCreatePass||Fn(n,t),wi(r,t);const s=n.initialInputs;for(let r=o;r<i;r++){const i=e.data[r],u=Ve(i);u&&(ngDevMode&&xn(n,3),ua(t,n,i));const a=Jn(t,e,r,n);wi(a,t),null!==s&&la(t,r-o,a,i,n,s),u&&(Ct(n.index,t)[8]=a)}}(e,t,n,_t(n,t)),128==(128&n.flags)&&function(e,t,n){const r=n.directiveStart,o=n.directiveEnd,i=(e.firstCreatePass,n.index),s=It.lFrame.currentDirectiveIndex;try{dn(i);for(let n=r;n<o;n++){const r=e.data[n],o=t[n];Qt(n),null===r.hostBindings&&0===r.hostVars&&null===r.hostAttrs||na(r,o)}}finally{dn(-1),Qt(s)}}(e,t,n))}function Wu(e,t,n=_t){const r=t.localNames;if(null!==r){let o=t.index+1;for(let i=0;i<r.length;i+=2){const s=r[i+1],u=-1===s?n(t,e):e[s];e[o++]=u}}}function zu(e){const t=e.tView;if(null===t||t.incompleteFirstPass){const t=null;return e.tView=qu(1,t,e.template,e.decls,e.vars,e.directiveDefs,e.pipeDefs,e.viewQuery,e.schemas,e.consts)}return t}function qu(e,t,n,r,o,i,s,u,a,c){ngDevMode&&ngDevMode.tView++;const l=je+r,d=l+o,f=function(e,t){const n=ngDevMode?new hu:[];for(let r=0;r<t;r++)n.push(r<e?null:Hs);return n}(l,d),p="function"==typeof c?c():c,h=f[1]=ngDevMode?new class{constructor(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g,m,b,_,w,M,C,O,x,D,S,E,I,P,j){this.type=e,this.blueprint=t,this.template=n,this.queries=r,this.viewQuery=o,this.declTNode=i,this.data=s,this.bindingStartIndex=u,this.expandoStartIndex=a,this.hostBindingOpCodes=c,this.firstCreatePass=l,this.firstUpdatePass=d,this.staticViewQueries=f,this.staticContentQueries=p,this.preOrderHooks=h,this.preOrderCheckHooks=v,this.contentHooks=y,this.contentCheckHooks=g,this.viewHooks=m,this.viewCheckHooks=b,this.destroyHooks=_,this.cleanup=w,this.contentQueries=M,this.components=C,this.directiveRegistry=O,this.pipeRegistry=x,this.firstChild=D,this.schemas=S,this.consts=E,this.incompleteFirstPass=I,this._decls=P,this._vars=j}get template_(){const e=[];return du(this.firstChild,e),e.join("")}get type_(){return Te[this.type]||`TViewType.?${this.type}?`}}(e,f,n,null,u,t,(v=f,void 0===pu&&(pu=new fu),pu.concat(v)).fill(null,l),l,d,null,!0,!0,!1,!1,null,null,null,null,null,null,null,null,null,null,"function"==typeof i?i():i,"function"==typeof s?s():s,null,a,p,!1,r,o):{type:e,blueprint:f,template:n,queries:null,viewQuery:u,declTNode:t,data:f.slice().fill(null,l),bindingStartIndex:l,expandoStartIndex:d,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof i?i():i,pipeRegistry:"function"==typeof s?s():s,firstChild:null,schemas:a,consts:p,incompleteFirstPass:!1};var v;return ngDevMode&&Object.seal(h),h}function Ku(e,t,n){if(yt(e)){const r=n===X.ShadowDom;return e.selectRootElement(t,r)}let r="string"==typeof t?e.querySelector(t):t;return ngDevMode&&function(e,t){if(!e)throw new Error(`Renderer: ${"string"==typeof t?"Host node with selector not found:":"Host node is required:"} [${y(t)}]`)}(r,t),r.textContent="",r}function Gu(e,t,n,r){const o=xa(t);null===n?(ngDevMode&&Object.freeze(Da(e)),o.push(r)):(o.push(n),e.firstCreatePass&&Da(e).push(r,o.length-1))}function Ju(e,t,n){for(let r in e)if(e.hasOwnProperty(r)){n=null===n?{}:n;const o=e[r];n.hasOwnProperty(r)?n[r].push(t,o):n[r]=[t,o]}return n}function Zu(e,t,n,r,o,i,s,u){ngDevMode&&D(o,Hs,"Incoming value should never be NO_CHANGE.");const a=_t(t,n);let c,l=t.inputs;if(!u&&null!=l&&(c=l[r]))Ia(e,n,c,r,o),Re(t)&&function(e,t){ngDevMode&&Ke(e);const n=Ct(t,e);16&n[2]||(n[2]|=64)}(n,t.index),ngDevMode&&function(e,t,n,r,o){if(7&n)for(let i=0;i<r.length;i+=2)Qu(e,t,n,r[i+1],o)}(n,a,t.type,c,o);else if(3&t.type){if(r="class"===(d=r)?"className":"for"===d?"htmlFor":"formaction"===d?"formAction":"innerHtml"===d?"innerHTML":"readonly"===d?"readOnly":"tabindex"===d?"tabIndex":d,ngDevMode){if(function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event property '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...\nIf '${e}' is a directive input, make sure the directive is imported by the current module.`;throw new p(306,t)}}(r),!function(e,t,n,r){return null===e.schemas||(!!(Yu(e,r.value)||n in t||En(n))||("undefined"==typeof Node||null===Node||!(t instanceof Node)))}(e,a,r,t))return void Xu(r,t);ngDevMode.rendererSetProperty++}o=null!=s?s(o,t.value||"",r):o,yt(i)?i.setProperty(a,r,o):En(r)||(a.setProperty?a.setProperty(r,o):a[r]=o)}else 12&t.type&&ngDevMode&&!Yu(e,t.value)&&Xu(r,t);var d}function Qu(e,t,n,r,o){const i=e[11];var s;s=r.replace(/[$@]/g,"_"),r=`ng-reflect-${s.replace(Ri,((...e)=>"-"+e[1].toLowerCase()))}`;const u=function(e){try{return null!=e?e.toString().slice(0,30):e}catch(e){return"[ERROR] Exception while trying to serialize the value"}}(o);if(3&n)null==o?yt(i)?i.removeAttribute(t,r):t.removeAttribute(r):yt(i)?i.setAttribute(t,r,u):t.setAttribute(r,u);else{const e=Ni(`bindings=${JSON.stringify({[r]:u},null,2)}`);yt(i)?i.setValue(t,e):t.textContent=e}}function Yu(e,t){const n=e.schemas;if(null!==n)for(let e=0;e<n.length;e++){const r=n[e];if(r===Ti||r===ji&&t&&t.indexOf("-")>-1)return!0}return!1}function Xu(e,t){let n=`Can't bind to '${e}' since it isn't a known property of '${t.value}'.`;console.error(h(303,n))}function ea(e,t,n,r){ngDevMode&&Ge(e);let o=!1;if(Pt()){const i=function(e,t,n){ngDevMode&&Ge(e),ngDevMode&&xn(n,15);const r=e.directiveRegistry;let o=null;if(r)for(let i=0;i<r.length;i++){const s=r[i];Fs(n,s.selectors,!1)&&(o||(o=ngDevMode?new vu:[]),Hn(Fn(n,t),e,s.type),Ve(s)?(ngDevMode&&(xn(n,2,`"${n.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${u(s.type)} component.`),2&n.flags&&Ui(n)),ra(e,n),o.unshift(s)):o.push(s))}return o}(e,t,n),s=null===r?null:{"":-1};if(null!==i){o=!0,ia(n,e.data.length,i.length);for(let e=0;e<i.length;e++){const t=i[e];t.providersResolver&&t.providersResolver(t)}let r=!1,u=!1,a=Fu(e,t,i.length,null);ngDevMode&&x(a,n.directiveStart,"TNode.directiveStart should point to just allocated space");for(let o=0;o<i.length;o++){const c=i[o];n.mergedAttrs=In(n.mergedAttrs,c.hostAttrs),sa(e,n,t,a,c),oa(a,c,s),null!==c.contentQueries&&(n.flags|=8),null===c.hostBindings&&null===c.hostAttrs&&0===c.hostVars||(n.flags|=128);const l=c.type.prototype;!r&&(l.ngOnChanges||l.ngOnInit||l.ngDoCheck)&&((e.preOrderHooks||(e.preOrderHooks=[])).push(n.index),r=!0),u||!l.ngOnChanges&&!l.ngDoCheck||((e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(n.index),u=!0),a++}!function(e,t){ngDevMode&&Ge(e);const n=t.directiveStart,r=t.directiveEnd,o=e.data,i=t.attrs,s=ngDevMode?new mu:[];let u=null,a=null;for(let e=n;e<r;e++){const n=o[e],r=n.inputs,c=null===i||Ts(t)?null:da(r,i);s.push(c),u=Ju(r,e,u),a=Ju(n.outputs,e,a)}null!==u&&(u.hasOwnProperty("class")&&(t.flags|=16),u.hasOwnProperty("style")&&(t.flags|=32)),t.initialInputs=s,t.inputs=u,t.outputs=a}(e,n)}s&&function(e,t,n){if(t){const r=e.localNames=ngDevMode?new gu:[];for(let e=0;e<t.length;e+=2){const o=n[t[e+1]];if(null==o)throw new p(-301,ngDevMode&&`Export of name '${t[e+1]}' not found!`);r.push(t[e],o)}}}(n,r,s)}return n.mergedAttrs=In(n.mergedAttrs,n.attrs),o}function ta(e,t,n,r,o,i){ngDevMode&&Ge(e);const s=i.hostBindings;if(s){let n=e.hostBindingOpCodes;null===n&&(n=e.hostBindingOpCodes=[]);const i=~t.index;(function(e){let t=e.length;for(;t>0;){const n=e[--t];if("number"==typeof n&&n<0)return n}return 0})(n)!=i&&n.push(i),n.push(r,o,s)}}function na(e,t){null!==e.hostBindings&&e.hostBindings(1,t)}function ra(e,t){ngDevMode&&Ge(e),t.flags|=2,(e.components||(e.components=ngDevMode?new yu:[])).push(t.index)}function oa(e,t,n){if(n){if(t.exportAs)for(let r=0;r<t.exportAs.length;r++)n[t.exportAs[r]]=e;Ve(t)&&(n[""]=e)}}function ia(e,t,n){ngDevMode&&O(n,e.directiveEnd-e.directiveStart,"Reached the max number of directives"),e.flags|=1,e.directiveStart=t,e.directiveEnd=t+n,e.providerIndexes=t}function sa(e,t,n,r,o){ngDevMode&&P(r,je,"Must be in Expando section"),e.data[r]=o;const i=o.factory||(o.factory=et(o.type,!0)),s=new Cn(i,Ve(o),null);e.blueprint[r]=s,n[r]=s,ta(e,t,0,r,Fu(e,n,o.hostVars,Hs),o)}function ua(e,t,n){const r=_t(t,e),o=zu(n),i=e[10],s=ga(e,ku(e,o,null,n.onPush?64:16,r,t,i,i.createRenderer(r,n),null,null));e[t.index]=s}function aa(e,t,n,r,o,i){ngDevMode&&(D(r,Hs,"Incoming value should never be NO_CHANGE."),function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event attribute '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...`;throw new p(306,t)}}(n),xn(e,2,`Attempted to set attribute \`${n}\` on a container node. Host bindings are not valid on ng-container or ng-template.`));const s=_t(e,t);ca(t[11],s,i,e.value,n,r,o)}function ca(e,t,n,r,o,i,s){if(null==i)ngDevMode&&ngDevMode.rendererRemoveAttribute++,yt(e)?e.removeAttribute(t,o,n):t.removeAttribute(o);else{ngDevMode&&ngDevMode.rendererSetAttribute++;const u=null==s?v(i):s(i,r||"",o);yt(e)?e.setAttribute(t,o,u,n):n?t.setAttributeNS(n,o,u):t.setAttribute(o,u)}}function la(e,t,n,r,o,i){const s=i[t];if(null!==s){const t=r.setInput;for(let i=0;i<s.length;){const u=s[i++],a=s[i++],c=s[i++];null!==t?r.setInput(n,c,u,a):n[a]=c,ngDevMode&&Qu(e,_t(o,e),o.type,a,c)}}}function da(e,t){let n=null,r=0;for(;r<t.length;){const o=t[r];if(0!==o)if(5!==o){if("number"==typeof o)break;e.hasOwnProperty(o)&&(null===n&&(n=[]),n.push(o,e[o],t[r+1])),r+=2}else r+=2;else r+=4}return n}const fa=class extends Array{};function pa(e,t,n,r){ngDevMode&&Ke(t),ngDevMode&&!yt(t[11])&&A(n);const o=new(ngDevMode?fa:Array)(e,!0,!1,t,null,0,r,n,null,null);return ngDevMode&&C(o.length,Pe,"Should allocate correct number of slots for LContainer header."),ngDevMode&&function(e){Xs(e,new ju(e))}(o),o}function ha(e,t){ngDevMode&&C(Ot(e),!1,"Should be run in update mode");const n=Ct(t,e);if(xt(n)){const e=n[1];80&n[2]?Lu(e,n,e.template,n[8]):n[5]>0&&va(n)}}function va(e){for(let t=Zi(e);null!==t;t=Qi(t))for(let e=Pe;e<t.length;e++){const n=t[e];if(1024&n[2]){const e=n[1];ngDevMode&&j(e,"TView must be allocated"),Lu(e,n,e.template,n[8])}else n[5]>0&&va(n)}const t=e[1].components;if(null!==t)for(let n=0;n<t.length;n++){const r=Ct(t[n],e);xt(r)&&r[5]>0&&va(r)}}function ya(e,t){ngDevMode&&C(Ot(e),!0,"Should be run in creation mode");const n=Ct(t,e),r=n[1];!function(e,t){for(let n=t.length;n<e.blueprint.length;n++)t.push(e.blueprint[n])}(r,n),Vu(r,n,n[8])}function ga(e,t){return e[13]?e[14][4]=t:e[13]=t,e[14]=t,t}function ma(e){for(;e;){e[2]|=64;const t=Gi(e);if(0!=(512&e[2])&&!t)return e;e=t}return null}function ba(e){for(let t=0;t<e.components.length;t++){const n=e.components[t],r=Ci(n),o=r[1];$u(o,r,o.template,n)}}function _a(e,t,n){const r=t[10];r.begin&&r.begin();try{Lu(e,t,e.template,n)}catch(e){throw Ea(t,e),e}finally{r.end&&r.end()}}function wa(e){ba(e[8])}function Ma(e,t,n){ngDevMode&&j(t,"View queries function to execute must be defined."),en(0),t(e,n)}function Ca(e,t,n,r,...o){if(null===e[r]&&(null==t.inputs||!t.inputs[n])){(t.propertyBindings||(t.propertyBindings=[])).push(r);let i=n;o.length>0&&(i+=Hi+o.join(Hi)),e[r]=i}}const Oa=Tu;function xa(e){return e[7]||(e[7]=ngDevMode?new bu:[])}function Da(e){return e.cleanup||(e.cleanup=ngDevMode?new _u:[])}function Sa(e,t,n){return(null===e||Ve(e))&&(n=function(e){for(;Array.isArray(e);){if("object"==typeof e[1])return e;e=e[0]}return null}(n[t.index])),n[11]}function Ea(e,t){const n=e[9],r=n?n.get(Pi,null):null;r&&r.handleError(t)}function Ia(e,t,n,r,o){for(let i=0;i<n.length;){const s=n[i++],u=n[i++],a=t[s];ngDevMode&&k(t,s);const c=e.data[s];null!==c.setInput?c.setInput(a,o,r,u):a[u]=o}}function Pa(e,t,n){ngDevMode&&M(n,"Value should be a string"),ngDevMode&&D(n,Hs,"value should not be NO_CHANGE"),ngDevMode&&k(e,t);const r=bt(t,e);ngDevMode&&j(r,"native element should exist"),ts(e[11],r,n)}function ja(e,t,n){ngDevMode&&Ge(kt(),"Expecting to be called in first template pass only");let r=n?e.styles:null,o=n?e.classes:null,i=0;if(null!==t)for(let e=0;e<t.length;e++){const n=t[e];"number"==typeof n?i=n:1==i?o=a(o,n):2==i&&(r=a(r,n+": "+t[++e]+";"))}n?e.styles=r:e.stylesWithoutHost=r,n?e.classes=o:e.classesWithoutHost=o}function Ta(e){const t=_i(e);_a(t[1],t,e)}function Aa(e){ngDevMode&&j(e,"component");const t=ma(_i(e));ngDevMode&&j(t[8],"rootContext should be defined"),function(e,t){if(0===e.flags&&e.clean==Tu){let t;e.flags|=1,e.clean=new Promise((e=>t=e)),e.scheduler((()=>{if(1&e.flags&&(e.flags&=-2,ba(e)),2&e.flags){e.flags&=-3;const t=e.playerHandler;t&&t.flushPlayers()}e.clean=Tu,t(null)}))}}(t[8])}const ka=new lr("INJECTOR",-1);class Na{get(e,t=Fr){if(t===Fr){const t=new Error(`NullInjectorError: No provider for ${u(e)}!`);throw t.name="NullInjectorError",t}return t}}const Ra=new lr("Set Injector scope."),Fa={},Va={};let La;function $a(){return void 0===La&&(La=new Na),La}function Ha(e,t=null,n=null,r){const o=Ba(e,t,n,r);return o._resolveInjectorDefTypes(),o}function Ba(e,t=null,n=null,r){return new Ua(e,n,t||$a(),r)}class Ua{constructor(e,t,n,r=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const o=[];t&&Cr(t,(n=>this.processProvider(n,e,t))),Cr([e],(e=>this.processInjectorType(e,[],o))),this.records.set(ka,qa(void 0,this));const i=this.records.get(Ra);this.scope=null!=i?i.value:null,this.source=r||("object"==typeof e?null:u(e))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach((e=>e.ngOnDestroy()))}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(e,t=Fr,n=q.Default){this.assertNotDestroyed();const r=Br(this),o=G(void 0);try{if(!(n&q.SkipSelf)){let t=this.records.get(e);if(void 0===t){const n=("function"==typeof(i=e)||"object"==typeof i&&i instanceof lr)&&L(e);t=n&&this.injectableDefInScope(n)?qa(Wa(e),Fa):null,this.records.set(e,t)}if(null!=t)return this.hydrate(e,t)}const s=n&q.Self?$a():this.parent;return t=n&q.Optional&&t===Fr?null:t,s.get(e,t)}catch(t){if("NullInjectorError"===t.name){if((t.ngTempTokenPath=t.ngTempTokenPath||[]).unshift(u(e)),r)throw t;return function(e,t,n,r){const o=e.ngTempTokenPath;throw t[Lr]&&o.unshift(t[Lr]),e.message=function(e,t,n,r=null){e=e&&"\n"===e.charAt(0)&&"ɵ"==e.charAt(1)?e.substr(2):e;let o=u(t);if(Array.isArray(t))o=t.map(u).join(" -> ");else if("object"==typeof t){let e=[];for(let n in t)if(t.hasOwnProperty(n)){let r=t[n];e.push(n+":"+("string"==typeof r?JSON.stringify(r):u(r)))}o=`{${e.join(", ")}}`}return`${n}${r?"("+r+")":""}[${o}]: ${e.replace(Vr,"\n  ")}`}("\n"+e.message,o,n,r),e.ngTokenPath=o,e.ngTempTokenPath=null,e}(t,e,"R3InjectorError",this.source)}throw t}finally{G(o),Br(r)}var i}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach((e=>this.get(e)))}toString(){const e=[];return this.records.forEach(((t,n)=>e.push(u(n)))),`R3Injector[${e.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new p(205,ngDevMode&&"Injector has already been destroyed.")}processInjectorType(e,t,n){if(!(e=d(e)))return!1;let r=H(e);const o=null==r&&e.ngModule||void 0,i=void 0===o?e:o;ngDevMode&&-1!==t.indexOf(i)&&g(u(i),t.map(u));const s=-1!==n.indexOf(i);if(void 0!==o&&(r=H(o)),null==r)return!1;if(null!=r.imports&&!s){let e;ngDevMode&&t.push(i),n.push(i);try{Cr(r.imports,(r=>{this.processInjectorType(r,t,n)&&(void 0===e&&(e=[]),e.push(r))}))}finally{ngDevMode&&t.pop()}if(void 0!==e)for(let t=0;t<e.length;t++){const{ngModule:n,providers:r}=e[t];Cr(r,(e=>this.processProvider(e,n,r||ae)))}}this.injectorDefTypes.add(i);const a=et(i)||(()=>new i);this.records.set(i,qa(a,Fa));const c=r.providers;if(null!=c&&!s){const t=e;Cr(c,(e=>this.processProvider(e,t,c)))}return void 0!==o&&void 0!==e.providers}processProvider(e,t,n){let r=Ga(e=d(e))?e:d(e&&e.provide);const o=function(e,t,n){return Ka(e)?qa(void 0,e.useValue):qa(za(e,t,n),Fa)}(e,t,n);if(Ga(e)||!0!==e.multi){const e=this.records.get(r);ngDevMode&&e&&void 0!==e.multi&&m()}else{let t=this.records.get(r);t?ngDevMode&&void 0===t.multi&&m():(t=qa(void 0,Fa,!0),t.factory=()=>Kr(t.multi),this.records.set(r,t)),r=e,t.multi.push(e)}this.records.set(r,o)}hydrate(e,t){var n;return ngDevMode&&t.value===Va?g(u(e)):t.value===Fa&&(t.value=Va,t.value=t.factory()),"object"==typeof t.value&&t.value&&null!==(n=t.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(t.value),t.value}injectableDefInScope(e){if(!e.providedIn)return!1;const t=d(e.providedIn);return"string"==typeof t?"any"===t||t===this.scope:this.injectorDefTypes.has(t)}}function Wa(e){const t=L(e),n=null!==t?t.factory:et(e);if(null!==n)return n;if(e instanceof lr)throw new p(204,ngDevMode&&`Token ${u(e)} is missing a ɵprov definition.`);if(e instanceof Function)return function(e){const t=e.length;if(t>0){const n=Dr(t,"?");throw new p(204,ngDevMode&&`Can't resolve all parameters for ${u(e)}: (${n.join(", ")}).`)}const n=function(e){const t=e&&(e[B]||e[W]);if(t){const n=function(e){if(e.hasOwnProperty("name"))return e.name;const t=(""+e).match(/^function\s*([^\s(]+)/);return null===t?"":t[1]}(e);return console.warn(`DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${n}" class.`),t}return null}(e);return null!==n?()=>n.factory(e):()=>new e}(e);throw new p(204,ngDevMode&&"unreachable")}function za(e,t,n){let r;if(Ga(e)){const t=d(e);return et(t)||Wa(t)}if(Ka(e))r=()=>d(e.useValue);else if((o=e)&&o.useFactory)r=()=>e.useFactory(...Kr(e.deps||[]));else if(function(e){return!(!e||!e.useExisting)}(e))r=()=>Wr(d(e.useExisting));else{const o=d(e&&(e.useClass||e.provide));if(ngDevMode&&!o&&function(e,t,n){let r="";throw e&&t&&(r=` - only instances of Provider and Type are allowed, got: [${t.map((e=>e==n?"?"+n+"?":"...")).join(", ")}]`),new Error(`Invalid provider for the NgModule '${u(e)}'`+r)}(t,n,e),!function(e){return!!e.deps}(e))return et(o)||Wa(o);r=()=>new o(...Kr(e.deps))}var o;return r}function qa(e,t,n=!1){return{factory:e,value:t,multi:n?[]:void 0}}function Ka(e){return null!==e&&"object"==typeof e&&$r in e}function Ga(e){return"function"==typeof e}class Ja{static create(e,t){var n;if(Array.isArray(e))return Ha({name:""},t,e,"");{const t=null!==(n=e.name)&&void 0!==n?n:"";return Ha({name:t},e.parent,e.providers,t)}}}function Za(e){sc(e);const t=mi(e);return null===t?null:(void 0===t.component&&(t.component=function(e,t){const n=t[1].data[e];let r=n.directiveStart;return 2&n.flags?t[r]:null}(t.nodeIndex,t.lView)),t.component)}function Qa(e){sc(e);const t=mi(e);return null===t?null:t.lView[8]}function Ya(e){const t=mi(e);if(null===t)return null;let n,r=t.lView;for(ngDevMode&&Ke(r);2===r[1].type&&(n=Gi(r));)r=n;return 512&r[2]?null:r[8]}function Xa(e){return[...Ji(e).components]}function ec(e){const t=mi(e);if(null===t)return Ja.NULL;const n=t.lView[1].data[t.nodeIndex];return new Yn(n,t.lView)}function tc(e){if(e instanceof Text)return[];const t=mi(e);if(null===t)return[];const n=t.lView,r=n[1],o=t.nodeIndex;return(null==r?void 0:r.data[o])?(void 0===t.directives&&(t.directives=Si(o,n,!1)),null===t.directives?[]:[...t.directives]):[]}function nc(e){const{constructor:t}=e;if(!t)throw new Error("Unable to find the instance constructor");const n=De(t);if(n)return{inputs:n.inputs,outputs:n.outputs,encapsulation:n.encapsulation,changeDetection:n.onPush?Q.OnPush:Q.Default};const r=Se(t);return r?{inputs:r.inputs,outputs:r.outputs}:null}function rc(e){return mi(e).native}function oc(e){sc(e);const t=mi(e);if(null===t)return[];const n=t.lView,r=n[1],o=n[7],i=r.cleanup,s=[];if(i&&o)for(let t=0;t<i.length;){const r=i[t++],u=i[t++];if("string"==typeof r){const a=r,c=mt(n[u]),l=o[i[t++]],d=i[t++],f="boolean"==typeof d||d>=0?"dom":"output",p="boolean"==typeof d&&d;e==c&&s.push({element:e,name:a,callback:l,useCapture:p,type:f})}}return s.sort(ic),s}function ic(e,t){return e.name==t.name?0:e.name<t.name?-1:1}function sc(e){if("undefined"!=typeof Element&&!(e instanceof Element))throw new Error("Expecting instance of DOM Element")}function uc(e){Aa(e),Xa(e).forEach((e=>Ta(e)))}Ja.THROW_IF_NOT_FOUND=Fr,Ja.NULL=new Na,Ja.ɵprov=R({token:Ja,providedIn:"any",factory:()=>Wr(ka)}),Ja.__NG_ELEMENT_ID__=-1;let ac=!1;function cc(){ac||(ac=!0,lc("ɵsetProfiler",at),lc("getDirectiveMetadata",nc),lc("getComponent",Za),lc("getContext",Qa),lc("getListeners",oc),lc("getOwningComponent",Ya),lc("getHostElement",rc),lc("getInjector",ec),lc("getRootComponents",Xa),lc("getDirectives",tc),lc("applyChanges",uc))}function lc(e,t){if("undefined"==typeof COMPILED||!COMPILED){const n=ie;if(ngDevMode&&j(t,"function not defined"),n){let r=n.ng;r||(r=n.ng={}),r[e]=t}}}function dc(e,t={}){ngDevMode&&cc(),ngDevMode&&Ue(e);const n=t.rendererFactory||gt,r=t.sanitizer||null,o=De(e);o.type!=e&&(o.type=e);const i=o.selectors[0][0],s=Ku(n.createRenderer(null,null),t.host||i,o.encapsulation),u=o.onPush?576:528,a=hc(t.scheduler,t.playerHandler),c=n.createRenderer(s,o),l=qu(0,null,null,1,0,null,null,null,null,null),d=ku(null,l,a,u,null,null,n,c,null,t.injector||null);let f;rn(d);try{n.begin&&n.begin(),f=pc(fc(s,o,d,n,c,r),o,d,a,t.hostFeatures||null),Vu(l,d,null),Lu(l,d,null,null)}finally{cn(),n.end&&n.end()}return f}function fc(e,t,n,r,o,i){const s=n[1];ngDevMode&&k(n,20),n[20]=e;const u=Nu(s,20,2,"#host",null),a=u.mergedAttrs=t.hostAttrs;null!==a&&(ja(u,a,!0),null!==e&&(Dn(o,e,a),null!==u.classes&&Es(o,e,u.classes),null!==u.styles&&Ss(o,e,u.styles)));const c=r.createRenderer(e,t),l=ku(n,zu(t),null,t.onPush?64:16,n[20],u,r,c,i||null,null);return s.firstCreatePass&&(Hn(Fn(u,n),s,t.type),ra(s,u),ia(u,n.length,1)),ga(n,l),n[20]=l}function pc(e,t,n,r,o){const i=n[1],s=function(e,t,n){const r=Rt();if(e.firstCreatePass){n.providersResolver&&n.providersResolver(n);const o=Fu(e,t,1,null);ngDevMode&&C(o,r.directiveStart,"Because this is a root component the allocated expando should match the TNode component."),sa(e,r,t,o,n)}const o=Jn(t,e,r.directiveStart,r);wi(o,t);const i=_t(r,t);return i&&wi(i,t),o}(i,n,t);if(r.components.push(s),e[8]=s,o&&o.forEach((e=>e(s,t))),t.contentQueries){const e=Rt();ngDevMode&&j(e,"TNode expected"),t.contentQueries(1,s,e.directiveStart)}const u=Rt();return ngDevMode&&j(u,"tNode should have been already created"),!i.firstCreatePass||null===t.hostBindings&&null===t.hostAttrs||(dn(u.index),ta(n[1],u,0,u.directiveStart,u.directiveEnd,t),na(t,s)),s}function hc(e,t){return{components:[],scheduler:e||Fi,clean:Oa,playerHandler:t||null,flags:0}}function vc(e,t){const n=Ci(e);ngDevMode&&j(n,"LView is required");const r=n[1],o=Rt();ngDevMode&&j(o,"TNode is required"),yn(r,o)}function yc(e){return Ji(e).clean}function gc(e){return Object.getPrototypeOf(e.prototype).constructor}function mc(e){let t=gc(e.type),n=!0;const r=[e];for(;t;){let o;if(Ve(e))o=t.ɵcmp||t.ɵdir;else{if(t.ɵcmp){const e="undefined"==typeof ngDevMode||ngDevMode?"Directives cannot inherit Components":"";throw new p(903,e)}o=t.ɵdir}if(o){if(n){r.push(o);const t=e;t.inputs=bc(e.inputs),t.declaredInputs=bc(e.declaredInputs),t.outputs=bc(e.outputs);const n=o.hostBindings;n&&Mc(e,n);const i=o.viewQuery,u=o.contentQueries;if(i&&_c(e,i),u&&wc(e,u),s(e.inputs,o.inputs),s(e.declaredInputs,o.declaredInputs),s(e.outputs,o.outputs),Ve(o)&&o.data.animation){const t=e.data;t.animation=(t.animation||[]).concat(o.data.animation)}}const t=o.features;if(t)for(let r=0;r<t.length;r++){const o=t[r];o&&o.ngInherit&&o(e),o===mc&&(n=!1)}}t=Object.getPrototypeOf(t)}!function(e){let t=0,n=null;for(let r=e.length-1;r>=0;r--){const o=e[r];o.hostVars=t+=o.hostVars,o.hostAttrs=In(o.hostAttrs,n=In(n,o.hostAttrs))}}(r)}function bc(e){return e===ue?{}:e===ae?[]:e}function _c(e,t){const n=e.viewQuery;e.viewQuery=n?(e,r)=>{t(e,r),n(e,r)}:t}function wc(e,t){const n=e.contentQueries;e.contentQueries=n?(e,r,o)=>{t(e,r,o),n(e,r,o)}:t}function Mc(e,t){const n=e.hostBindings;e.hostBindings=n?(e,r)=>{t(e,r),n(e,r)}:t}const Cc=["providersResolver"],Oc=["template","decls","consts","vars","onPush","ngContentSelectors","styles","encapsulation","schemas"];function xc(e){let t,n=gc(e.type);t=Ve(e)?n.ɵcmp:n.ɵdir;const r=e;for(const e of Cc)r[e]=t[e];if(Ve(t))for(const e of Oc)r[e]=t[e]}let Dc=null;function Sc(){if(!Dc){const e=ie.Symbol;if(e&&e.iterator)Dc=e.iterator;else{const e=Object.getOwnPropertyNames(Map.prototype);for(let t=0;t<e.length;++t){const n=e[t];"entries"!==n&&"size"!==n&&Map.prototype[n]===Map.prototype.entries&&(Dc=n)}}}return Dc}function Ec(e,t){const n=Ic(e),r=Ic(t);if(n&&r)return function(e,t,n){const r=e[Sc()](),o=t[Sc()]();for(;;){const e=r.next(),t=o.next();if(e.done&&t.done)return!0;if(e.done||t.done)return!1;if(!n(e.value,t.value))return!1}}(e,t,Ec);{const o=e&&("object"==typeof e||"function"==typeof e),i=t&&("object"==typeof t||"function"==typeof t);return!(n||!o||r||!i)||Object.is(e,t)}}function Ic(e){return!!Pc(e)&&(Array.isArray(e)||!(e instanceof Map)&&Sc()in e)}function Pc(e){return null!==e&&("function"==typeof e||"object"==typeof e)}function jc(e,t,n){return e[t]=n}function Tc(e,t){return ngDevMode&&k(e,t),ngDevMode&&D(e[t],Hs,"Stored value should never be NO_CHANGE."),e[t]}function Ac(e,t,n){ngDevMode&&D(n,Hs,"Incoming value should never be NO_CHANGE."),ngDevMode&&S(t,e.length,"Slot should have been initialized to NO_CHANGE");const r=e[t];if(Object.is(r,n))return!1;if(ngDevMode&&Bt()){const o=r!==Hs?r:void 0;if(!Ec(o,n)){const i=function(e,t,n,r){const o=e[1].data,i=o[t];if("string"==typeof i)return i.indexOf(Hi)>-1?Wi(e,t,t,i,r):{propName:i,oldValue:n,newValue:r};if(null===i){let n=t-1;for(;"string"!=typeof o[n]&&null===o[n+1];)n--;const i=o[n];if("string"==typeof i){const o=i.match(new RegExp(Hi,"g"));if(o&&o.length-1>t-n)return Wi(e,n,t,i,r)}}return{propName:void 0,oldValue:n,newValue:r}}(e,t,o,n);!function(e,t,n,r){let o=`ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${r?` for '${r}'`:""}: '${t}'. Current value: '${n}'.`;throw e&&(o+=" It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?"),new p(-100,o)}(r===Hs,i.oldValue,i.newValue,i.propName)}return!1}return e[t]=n,!0}function kc(e,t,n,r){const o=Ac(e,t,n);return Ac(e,t+1,r)||o}function Nc(e,t,n,r,o){const i=kc(e,t,n,r);return Ac(e,t+2,o)||i}function Rc(e,t,n,r,o,i){const s=kc(e,t,n,r);return kc(e,t+2,o,i)||s}function Fc(e,t,n,r){const o=At(),i=Kt();if(Ac(o,i,t)){const s=kt(),u=fn();aa(u,o,e,t,n,r),ngDevMode&&Ca(s.data,u,"attr."+e,i)}return Fc}function Vc(e,t){ngDevMode&&S(2,t.length,"should have at least 3 values"),ngDevMode&&C(t.length%2,1,"should have an odd number of values");let n=!1,r=zt();for(let o=1;o<t.length;o+=2)n=Ac(e,r++,t[o])||n;if(qt(r),!n)return Hs;let o=t[0];for(let e=1;e<t.length;e+=2)o+=v(t[e])+t[e+1];return o}function Lc(e,t,n,r){return Ac(e,Kt(),n)?t+v(n)+r:Hs}function $c(e,t,n,r,o,i){const s=kc(e,zt(),n,o);return Gt(2),s?t+v(n)+r+v(o)+i:Hs}function Hc(e,t,n,r,o,i,s,u){const a=Nc(e,zt(),n,o,s);return Gt(3),a?t+v(n)+r+v(o)+i+v(s)+u:Hs}function Bc(e,t,n,r,o,i,s,u,a,c){const l=Rc(e,zt(),n,o,s,a);return Gt(4),l?t+v(n)+r+v(o)+i+v(s)+u+v(a)+c:Hs}function Uc(e,t,n,r,o,i,s,u,a,c,l,d){const f=zt();let p=Rc(e,f,n,o,s,a);return p=Ac(e,f+4,l)||p,Gt(5),p?t+v(n)+r+v(o)+i+v(s)+u+v(a)+c+v(l)+d:Hs}function Wc(e,t,n,r,o,i,s,u,a,c,l,d,f,p){const h=zt();let y=Rc(e,h,n,o,s,a);return y=kc(e,h+4,l,f)||y,Gt(6),y?t+v(n)+r+v(o)+i+v(s)+u+v(a)+c+v(l)+d+v(f)+p:Hs}function zc(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,y){const g=zt();let m=Rc(e,g,n,o,s,a);return m=Nc(e,g+4,l,f,h)||m,Gt(7),m?t+v(n)+r+v(o)+i+v(s)+u+v(a)+c+v(l)+d+v(f)+p+v(h)+y:Hs}function qc(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,y,g,m){const b=zt();let _=Rc(e,b,n,o,s,a);return _=Rc(e,b+4,l,f,h,g)||_,Gt(8),_?t+v(n)+r+v(o)+i+v(s)+u+v(a)+c+v(l)+d+v(f)+p+v(h)+y+v(g)+m:Hs}function Kc(e,t,n,r,o,i){const s=At(),u=Lc(s,t,n,r);if(u!==Hs){const n=fn();aa(n,s,e,u,o,i),ngDevMode&&Ca(kt().data,n,"attr."+e,zt()-1,t,r)}return Kc}function Gc(e,t,n,r,o,i,s,u){const a=At(),c=$c(a,t,n,r,o,i);if(c!==Hs){const n=fn();aa(n,a,e,c,s,u),ngDevMode&&Ca(kt().data,n,"attr."+e,zt()-2,t,r,i)}return Gc}function Jc(e,t,n,r,o,i,s,u,a,c){const l=At(),d=Hc(l,t,n,r,o,i,s,u);if(d!==Hs){const n=fn();aa(n,l,e,d,a,c),ngDevMode&&Ca(kt().data,n,"attr."+e,zt()-3,t,r,i,u)}return Jc}function Zc(e,t,n,r,o,i,s,u,a,c,l,d){const f=At(),p=Bc(f,t,n,r,o,i,s,u,a,c);if(p!==Hs){const n=fn();aa(n,f,e,p,l,d),ngDevMode&&Ca(kt().data,n,"attr."+e,zt()-4,t,r,i,u,c)}return Zc}function Qc(e,t,n,r,o,i,s,u,a,c,l,d,f,p){const h=At(),v=Uc(h,t,n,r,o,i,s,u,a,c,l,d);if(v!==Hs){const n=fn();aa(n,h,e,v,f,p),ngDevMode&&Ca(kt().data,n,"attr."+e,zt()-5,t,r,i,u,c,d)}return Qc}function Yc(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v){const y=At(),g=Wc(y,t,n,r,o,i,s,u,a,c,l,d,f,p);if(g!==Hs){const n=fn();aa(n,y,e,g,h,v),ngDevMode&&Ca(kt().data,n,"attr."+e,zt()-6,t,r,i,u,c,d,p)}return Yc}function Xc(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g){const m=At(),b=zc(m,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v);if(b!==Hs){const n=fn();aa(n,m,e,b,y,g),ngDevMode&&Ca(kt().data,n,"attr."+e,zt()-7,t,r,i,u,c,d,p,v)}return Xc}function el(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g,m,b){const _=At(),w=qc(_,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g);if(w!==Hs){const n=fn();aa(n,_,e,w,m,b),ngDevMode&&Ca(kt().data,n,"attr."+e,zt()-8,t,r,i,u,c,d,p,v,g)}return el}function tl(e,t,n,r){const o=At(),i=Vc(o,t);if(i!==Hs){const s=fn();if(aa(s,o,e,i,n,r),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Ca(kt().data,s,"attr."+e,zt()-n.length+1,...n)}}return tl}function nl(e,t,n,r,o,i,s,u){const a=At(),c=kt(),l=e+je,d=c.firstCreatePass?function(e,t,n,r,o,i,s,u,a){ngDevMode&&Ge(t),ngDevMode&&ngDevMode.firstCreatePass++;const c=t.consts,l=Nu(t,e,4,s||null,Dt(c,u));ea(t,n,l,Dt(c,a)),yn(t,l);const d=l.tViews=qu(2,l,r,o,i,t.directiveRegistry,t.pipeRegistry,null,t.schemas,c);return null!==t.queries&&(t.queries.template(t,l),d.queries=t.queries.embeddedTView(l)),l}(l,c,a,t,n,r,o,i,s):c.data[l];Lt(d,!1);const f=a[11].createComment(ngDevMode?"container":"");bs(c,a,f,d),wi(f,a),ga(a,a[l]=pa(f,a,f,d)),Fe(d)&&Uu(c,a,d),null!=s&&Wu(a,d,u)}function rl(e,t,n,r){n>=e.data.length&&(e.data[n]=null,e.blueprint[n]=null),t[n]=r}function ol(e){return Mt(It.lFrame.contextLView,je+e)}const il={ɵɵdefineInjectable:R,ɵɵdefineInjector:V,ɵɵinject:Wr,ɵɵinvalidFactoryDep:zr,resolveForwardRef:d};const sl=i({provide:String,useValue:i});function ul(e){return void 0!==e.useClass}function al(e){return void 0!==e.useFactory}const cl=ir("Injectable",void 0,void 0,void 0,((e,t)=>function(e,t){let n=null,r=null;e.hasOwnProperty(B)||Object.defineProperty(e,B,{get:()=>{if(null===n){const r=br({usage:0,kind:"injectable",type:e});n=r.compileInjectable(il,`ng:///${e.name}/ɵprov.js`,function(e,t){const n=t||{providedIn:null},r={name:e.name,type:e,typeArgumentCount:0,providedIn:n.providedIn};return(ul(n)||al(n))&&void 0!==n.deps&&(r.deps=ro(n.deps)),ul(n)?r.useClass=n.useClass:function(e){return sl in e}(n)?r.useValue=n.useValue:al(n)?r.useFactory=n.useFactory:function(e){return void 0!==e.useExisting}(n)&&(r.useExisting=n.useExisting),r}(e,t))}return n}}),e.hasOwnProperty(pe)||Object.defineProperty(e,pe,{get:()=>{if(null===r){const t=br({usage:0,kind:"injectable",type:e});r=t.compileFactory(il,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,typeArgumentCount:0,deps:no(e),target:t.FactoryTarget.Injectable})}return r},configurable:!0})}(e,t)));function ll(e){return e.length>1?" ("+function(e){const t=[];for(let n=0;n<e.length;++n){if(t.indexOf(e[n])>-1)return t.push(e[n]),t;t.push(e[n])}return t}(e.slice().reverse()).map((e=>u(e.token))).join(" -> ")+")":""}function dl(e,t,n,r){const o=[t],i=n(o),s=r?function(e,t){const n=`${e} caused by: ${t instanceof Error?t.message:t}`,r=Error(n);return r.ngOriginalError=t,r}(i,r):Error(i);return s.addKey=fl,s.keys=o,s.injectors=[e],s.constructResolvingMessage=n,s.ngOriginalError=r,s}function fl(e,t){this.injectors.push(e),this.keys.push(t),this.message=this.constructResolvingMessage(this.keys)}function pl(e,t){const n=[];for(let e=0,r=t.length;e<r;e++){const r=t[e];r&&0!=r.length?n.push(r.map(u).join(" ")):n.push("?")}return Error("Cannot resolve all parameters for '"+u(e)+"'("+n.join(", ")+"). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '"+u(e)+"' is decorated with Injectable.")}class hl{constructor(e,t){if(this.token=e,this.id=t,!e)throw new Error("Token must be defined!");this.displayName=u(this.token)}static get(e){return vl.get(d(e))}static get numberOfKeys(){return vl.numberOfKeys}}const vl=new class{constructor(){this._allKeys=new Map}get(e){if(e instanceof hl)return e;if(this._allKeys.has(e))return this._allKeys.get(e);const t=new hl(e,hl.numberOfKeys);return this._allKeys.set(e,t),t}get numberOfKeys(){return this._allKeys.size}},yl=new class{constructor(e){this.reflectionCapabilities=e}updateCapabilities(e){this.reflectionCapabilities=e}factory(e){return this.reflectionCapabilities.factory(e)}parameters(e){return this.reflectionCapabilities.parameters(e)}annotations(e){return this.reflectionCapabilities.annotations(e)}propMetadata(e){return this.reflectionCapabilities.propMetadata(e)}hasLifecycleHook(e,t){return this.reflectionCapabilities.hasLifecycleHook(e,t)}getter(e){return this.reflectionCapabilities.getter(e)}setter(e){return this.reflectionCapabilities.setter(e)}method(e){return this.reflectionCapabilities.method(e)}importUri(e){return this.reflectionCapabilities.importUri(e)}resourceUri(e){return this.reflectionCapabilities.resourceUri(e)}resolveIdentifier(e,t,n,r){return this.reflectionCapabilities.resolveIdentifier(e,t,n,r)}resolveEnum(e,t){return this.reflectionCapabilities.resolveEnum(e,t)}}(new kr);class gl{constructor(e,t,n){this.key=e,this.optional=t,this.visibility=n}static fromKey(e){return new gl(e,!1,null)}}const ml=[];class bl{constructor(e,t,n){this.key=e,this.resolvedFactories=t,this.multiProvider=n,this.resolvedFactory=this.resolvedFactories[0]}}class _l{constructor(e,t){this.factory=e,this.dependencies=t}}function wl(e){let t,n;if(e.useClass){const r=d(e.useClass);t=yl.factory(r),n=xl(r)}else e.useExisting?(t=e=>e,n=[gl.fromKey(hl.get(e.useExisting))]):e.useFactory?(t=e.useFactory,n=function(e,t){if(t){const n=t.map((e=>[e]));return t.map((t=>Dl(e,t,n)))}return xl(e)}(e.useFactory,e.deps)):(t=()=>e.useValue,n=ml);return new _l(t,n)}function Ml(e){return new bl(hl.get(e.provide),[wl(e)],e.multi||!1)}function Cl(e){const t=function(e,t){for(let n=0;n<e.length;n++){const r=e[n],o=t.get(r.key.id);if(o){if(r.multiProvider!==o.multiProvider)throw Error(`Cannot mix multi providers and regular providers, got: ${o} ${r}`);if(r.multiProvider)for(let e=0;e<r.resolvedFactories.length;e++)o.resolvedFactories.push(r.resolvedFactories[e]);else t.set(r.key.id,r)}else{let e;e=r.multiProvider?new bl(r.key,r.resolvedFactories.slice(),r.multiProvider):r,t.set(r.key.id,e)}}return t}(Ol(e,[]).map(Ml),new Map);return Array.from(t.values())}function Ol(e,t){return e.forEach((e=>{if(e instanceof _r)t.push({provide:e,useClass:e});else if(e&&"object"==typeof e&&void 0!==e.provide)t.push(e);else{if(!Array.isArray(e))throw Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${e}`);Ol(e,t)}})),t}function xl(e){const t=yl.parameters(e);if(!t)return[];if(t.some((e=>null==e)))throw pl(e,t);return t.map((n=>Dl(e,n,t)))}function Dl(e,t,n){let r=null,o=!1;if(!Array.isArray(t))return Sl(t instanceof Jr?t.token:t,o,null);let i=null;for(let e=0;e<t.length;++e){const n=t[e];n instanceof _r?r=n:n instanceof Jr?r=n.token:n instanceof Zr?o=!0:n instanceof Qr||n instanceof Yr?i=n:n instanceof lr&&(r=n)}if(r=d(r),null!=r)return Sl(r,o,i);throw pl(e,n)}function Sl(e,t,n){return new gl(hl.get(e),t,n)}const El={};class Il{static resolve(e){return Cl(e)}static resolveAndCreate(e,t){const n=Il.resolve(e);return Il.fromResolvedProviders(n,t)}static fromResolvedProviders(e,t){return new Pl(e,t)}}class Pl{constructor(e,t){this._constructionCounter=0,this._providers=e,this.parent=t||null;const n=e.length;this.keyIds=[],this.objs=[];for(let t=0;t<n;t++)this.keyIds[t]=e[t].key.id,this.objs[t]=El}get(e,t=Fr){return this._getByKey(hl.get(e),null,t)}resolveAndCreateChild(e){const t=Il.resolve(e);return this.createChildFromResolved(t)}createChildFromResolved(e){const t=new Pl(e);return t.parent=this,t}resolveAndInstantiate(e){return this.instantiateResolved(Il.resolve([e])[0])}instantiateResolved(e){return this._instantiateProvider(e)}getProviderAtIndex(e){if(e<0||e>=this._providers.length)throw function(e){return Error(`Index ${e} is out-of-bounds.`)}(e);return this._providers[e]}_new(e){if(this._constructionCounter++>this._getMaxNumberOfObjects())throw this,dl(this,e.key,(function(e){return`Cannot instantiate cyclic dependency!${ll(e)}`}));return this._instantiateProvider(e)}_getMaxNumberOfObjects(){return this.objs.length}_instantiateProvider(e){if(e.multiProvider){const t=[];for(let n=0;n<e.resolvedFactories.length;++n)t[n]=this._instantiate(e,e.resolvedFactories[n]);return t}return this._instantiate(e,e.resolvedFactories[0])}_instantiate(e,t){const n=t.factory;let r,o;try{r=t.dependencies.map((e=>this._getByReflectiveDependency(e)))}catch(t){throw t.addKey&&t.addKey(this,e.key),t}try{o=n(...r)}catch(t){throw this,i=t,t.stack,dl(this,e.key,(function(e){const t=u(e[0].token);return`${i.message}: Error during instantiation of ${t}!${ll(e)}.`}),i)}var i;return o}_getByReflectiveDependency(e){return this._getByKey(e.key,e.visibility,e.optional?null:Fr)}_getByKey(e,t,n){return e===Pl.INJECTOR_KEY?this:t instanceof Qr?this._getByKeySelf(e,n):this._getByKeyDefault(e,n,t)}_getObjByKeyId(e){for(let t=0;t<this.keyIds.length;t++)if(this.keyIds[t]===e)return this.objs[t]===El&&(this.objs[t]=this._new(this._providers[t])),this.objs[t];return El}_throwOrNull(e,t){if(t!==Fr)return t;throw function(e,t){return dl(e,t,(function(e){return`No provider for ${u(e[0].token)}!${ll(e)}`}))}(this,e)}_getByKeySelf(e,t){const n=this._getObjByKeyId(e.id);return n!==El?n:this._throwOrNull(e,t)}_getByKeyDefault(e,t,n){let r;for(r=n instanceof Yr?this.parent:this;r instanceof Pl;){const t=r,n=t._getObjByKeyId(e.id);if(n!==El)return n;r=t.parent}return null!==r?r.get(e.token,t):this._throwOrNull(e,t)}get displayName(){return`ReflectiveInjector(providers: [${function(e,t){const n=[];for(let t=0;t<e._providers.length;++t)n[t]=' "'+e.getProviderAtIndex(t).key.displayName+'" ';return n}(this).join(", ")}])`}toString(){return this.displayName}}function jl(e,t=q.Default){const n=At();return null===n?(ngDevMode&&(ngDevMode&&O(K,jl,"Calling ɵɵinject would cause infinite recursion")),Wr(e,t)):Wn(Rt(),n,d(e),t)}function Tl(){const e=ngDevMode?"This constructor was not compatible with Dependency Injection.":"invalid";throw new Error(e)}function Al(e,t,n){const r=At(),o=Kt();if(Ac(r,o,t)){const i=kt(),s=fn();Zu(i,s,r,e,t,r[11],n,!1),ngDevMode&&Ca(i.data,s,e,o)}return Al}function kl(e,t,n,r,o){const i=o?"class":"style";Ia(e,n,t.inputs[i],i,r)}function Nl(e,t,n,r){const o=At(),i=kt(),s=je+e;ngDevMode&&C(zt(),i.bindingStartIndex,"elements should be created before any bindings"),ngDevMode&&k(o,s);const u=o[11],a=o[s]=rs(u,t,It.lFrame.currentNamespace),c=i.firstCreatePass?function(e,t,n,r,o,i,s){ngDevMode&&Ge(t),ngDevMode&&ngDevMode.firstCreatePass++;const u=t.consts,a=Nu(t,e,2,o,Dt(u,i)),c=ea(t,n,a,Dt(u,s));return ngDevMode&&function(e,t,n,r){if(null===e.schemas)return;const o=n.value;if(!r&&null!==o&&("undefined"!=typeof HTMLUnknownElement&&HTMLUnknownElement&&t instanceof HTMLUnknownElement||"undefined"!=typeof customElements&&o.indexOf("-")>-1&&!customElements.get(o))&&!Yu(e,o)){let e=`'${o}' is not a known element:\n`;e+=`1. If '${o}' is an Angular component, then verify that it is part of this module.\n`,o&&o.indexOf("-")>-1?e+=`2. If '${o}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`:e+="2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.",console.error(h(304,e))}}(t,r,a,c),null!==a.attrs&&ja(a,a.attrs,!1),null!==a.mergedAttrs&&ja(a,a.mergedAttrs,!0),null!==t.queries&&t.queries.elementStart(t,a),a}(s,i,o,a,t,n,r):i.data[s];Lt(c,!0);const l=c.mergedAttrs;null!==l&&Dn(u,a,l);const d=c.classes;null!==d&&Es(u,a,d);const f=c.styles;null!==f&&Ss(u,a,f),64!=(64&c.flags)&&bs(i,o,a,c),0===It.lFrame.elementDepthCount&&wi(a,o),It.lFrame.elementDepthCount++,Fe(c)&&(Uu(i,o,c),Bu(i,c,o)),null!==r&&Wu(o,c)}function Rl(){let e=Rt();ngDevMode&&j(e,"No parent node to close."),$t()?Ht():(ngDevMode&&We(Rt()),e=e.parent,Lt(e,!1));const t=e;ngDevMode&&xn(t,3),It.lFrame.elementDepthCount--;const n=kt();n.firstCreatePass&&(yn(n,e),Ne(e)&&n.queries.elementEnd(e)),null!=t.classesWithoutHost&&function(e){return 0!=(16&e.flags)}(t)&&kl(n,t,At(),t.classesWithoutHost,!0),null!=t.stylesWithoutHost&&function(e){return 0!=(32&e.flags)}(t)&&kl(n,t,At(),t.stylesWithoutHost,!1)}function Fl(e,t,n,r){Nl(e,t,n,r),Rl()}function Vl(e,t,n){const r=At(),o=kt(),i=e+je;ngDevMode&&k(r,i),ngDevMode&&C(zt(),o.bindingStartIndex,"element containers should be created before any bindings");const s=o.firstCreatePass?function(e,t,n,r,o){ngDevMode&&ngDevMode.firstCreatePass++;const i=t.consts,s=Dt(i,r),u=Nu(t,e,8,"ng-container",s);return null!==s&&ja(u,s,!0),ea(t,n,u,Dt(i,o)),null!==t.queries&&t.queries.elementStart(t,u),u}(i,o,r,t,n):o.data[i];Lt(s,!0),ngDevMode&&ngDevMode.rendererCreateComment++;const u=r[i]=r[11].createComment(ngDevMode?"ng-container":"");bs(o,r,u,s),wi(u,r),Fe(s)&&(Uu(o,r,s),Bu(o,s,r)),null!=n&&Wu(r,s)}function Ll(){let e=Rt();const t=kt();$t()?Ht():(ngDevMode&&We(e),e=e.parent,Lt(e,!1)),ngDevMode&&xn(e,8),t.firstCreatePass&&(yn(t,e),Ne(e)&&t.queries.elementEnd(e))}function $l(e,t,n){Vl(e,t,n),Ll()}function Hl(){return At()}function Bl(e){return!!e&&"function"==typeof e.then}function Ul(e){return!!e&&"function"==typeof e.subscribe}Pl.INJECTOR_KEY=hl.get(Ja);const Wl=Ul;function zl(e,t,n,r){const o=At(),i=kt(),s=Rt();return Kl(i,o,o[11],s,e,t,!!n,r),zl}function ql(e,t){const n=Rt(),r=At(),o=kt();return Kl(o,r,Sa(Yt(o.data),n,r),n,e,t,!1),ql}function Kl(e,t,n,r,o,i,s,u){const a=Fe(r),c=e.firstCreatePass&&Da(e),l=t[8],d=xa(t);ngDevMode&&xn(r,15);let f=!0;if(3&r.type||u){const p=_t(r,t),h=u?u(p):p,v=d.length,y=u?e=>u(mt(e[r.index])):r.index;if(yt(n)){let s=null;if(!u&&a&&(s=function(e,t,n,r){const o=e.cleanup;if(null!=o)for(let e=0;e<o.length-1;e+=2){const i=o[e];if(i===n&&o[e+1]===r){const n=t[7],r=o[e+2];return n.length>r?n[r]:null}"string"==typeof i&&(e+=2)}return null}(e,t,o,r.index)),null!==s)(s.__ngLastListenerFn__||s).__ngNextListenerFn__=i,s.__ngLastListenerFn__=i,f=!1;else{i=Jl(r,t,l,i,!1);const e=n.listen(h,o,i);ngDevMode&&ngDevMode.rendererAddEventListener++,d.push(i,e),c&&c.push(o,y,v,v+1)}}else i=Jl(r,t,l,i,!0),h.addEventListener(o,i,s),ngDevMode&&ngDevMode.rendererAddEventListener++,d.push(i),c&&c.push(o,y,v,s)}else i=Jl(r,t,l,i,!1);const p=r.outputs;let h;if(f&&null!==p&&(h=p[o])){const e=h.length;if(e)for(let n=0;n<e;n+=2){const e=h[n];ngDevMode&&k(t,e);const s=h[n+1],u=t[e],a=u[s];if(ngDevMode&&!Wl(a))throw new Error(`@Output ${s} not initialized in '${u.constructor.name}'.`);const l=a.subscribe(i),f=d.length;d.push(i,l),c&&c.push(o,r.index,f,-(f+1))}}}function Gl(e,t,n,r){try{return ct(6,t,n),!1!==n(r)}catch(t){return Ea(e,t),!1}finally{ct(7,t,n)}}function Jl(e,t,n,r,o){return function i(s){if(s===Function)return r;const u=2&e.flags?Ct(e.index,t):t;0==(32&t[2])&&ma(u);let a=Gl(t,n,r,s),c=i.__ngNextListenerFn__;for(;c;)a=Gl(t,n,c,s)&&a,c=c.__ngNextListenerFn__;return o&&!1===a&&(s.preventDefault(),s.returnValue=!1),a}}function Zl(e=1){return function(e){return(It.lFrame.contextLView=function(e,t){for(;e>0;)ngDevMode&&j(t[15],"Declaration view should be defined if nesting level is greater than 0."),t=t[15],e--;return t}(e,It.lFrame.contextLView))[8]}(e)}function Ql(e,t){let n=null;const r=function(e){const t=e.attrs;if(null!=t){const e=t.indexOf(5);if(0==(1&e))return t[e+1]}return null}(e);for(let o=0;o<t.length;o++){const i=t[o];if("*"!==i){if(null===r?Fs(e,i,!0):Vs(r,i))return o}else n=o}return n}function Yl(e){const t=At()[16][6];if(!t.projection){const n=e?e.length:1,r=t.projection=Dr(n,null),o=r.slice();let i=t.child;for(;null!==i;){const t=e?Ql(i,e):0;null!==t&&(o[t]?o[t].projectionNext=i:r[t]=i,o[t]=i),i=i.next}}}function Xl(e,t=0,n){const r=At(),o=kt(),i=Nu(o,je+e,16,null,n||null);null===i.projection&&(i.projection=t),Ht(),64!=(64&i.flags)&&function(e,t,n){Ds(t[11],0,t,n,as(e,n,t),hs(n.parent||t[6],n,t))}(o,r,i)}function ed(e,t,n){return td(e,"",t,"",n),ed}function td(e,t,n,r,o){const i=At(),s=Lc(i,t,n,r);if(s!==Hs){const n=kt(),u=fn();Zu(n,u,i,e,s,i[11],o,!1),ngDevMode&&Ca(n.data,u,e,zt()-1,t,r)}return td}function nd(e,t,n,r,o,i,s){const u=At(),a=$c(u,t,n,r,o,i);if(a!==Hs){const n=kt(),o=fn();Zu(n,o,u,e,a,u[11],s,!1),ngDevMode&&Ca(n.data,o,e,zt()-2,t,r,i)}return nd}function rd(e,t,n,r,o,i,s,u,a){const c=At(),l=Hc(c,t,n,r,o,i,s,u);if(l!==Hs){const n=kt(),o=fn();Zu(n,o,c,e,l,c[11],a,!1),ngDevMode&&Ca(n.data,o,e,zt()-3,t,r,i,u)}return rd}function od(e,t,n,r,o,i,s,u,a,c,l){const d=At(),f=Bc(d,t,n,r,o,i,s,u,a,c);if(f!==Hs){const n=kt(),o=fn();Zu(n,o,d,e,f,d[11],l,!1),ngDevMode&&Ca(n.data,o,e,zt()-4,t,r,i,u,c)}return od}function id(e,t,n,r,o,i,s,u,a,c,l,d,f){const p=At(),h=Uc(p,t,n,r,o,i,s,u,a,c,l,d);if(h!==Hs){const n=kt(),o=fn();Zu(n,o,p,e,h,p[11],f,!1),ngDevMode&&Ca(n.data,o,e,zt()-5,t,r,i,u,c,d)}return id}function sd(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h){const v=At(),y=Wc(v,t,n,r,o,i,s,u,a,c,l,d,f,p);if(y!==Hs){const n=kt(),o=fn();Zu(n,o,v,e,y,v[11],h,!1),ngDevMode&&Ca(n.data,o,e,zt()-6,t,r,i,u,c,d,p)}return sd}function ud(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y){const g=At(),m=zc(g,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v);if(m!==Hs){const n=kt(),o=fn();Zu(n,o,g,e,m,g[11],y,!1),ngDevMode&&Ca(n.data,o,e,zt()-7,t,r,i,u,c,d,p,v)}return ud}function ad(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g,m){const b=At(),_=qc(b,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g);if(_!==Hs){const n=kt(),o=fn();Zu(n,o,b,e,_,b[11],m,!1),ngDevMode&&Ca(n.data,o,e,zt()-8,t,r,i,u,c,d,p,v,g)}return ad}function cd(e,t,n){const r=At(),o=Vc(r,t);if(o!==Hs){const i=kt(),s=fn();if(Zu(i,s,r,e,o,r[11],n,!1),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Ca(i.data,s,e,zt()-n.length+1,...n)}}return cd}function ld(e,t,n,r,o){const i=e[n+1],s=null===t;let u=r?qs(i):Js(i),a=!1;for(;0!==u&&(!1===a||s);){ngDevMode&&k(e,u);const n=e[u],o=e[u+1];dd(n,t)&&(a=!0,e[u+1]=r?Ys(o):Gs(o)),u=r?qs(o):Js(o)}a&&(e[n+1]=r?Gs(i):Ys(i))}function dd(e,t){return ngDevMode&&O(Array.isArray(t),!0,"Expected that 'tStylingKey' has been unwrapped"),null===e||null==t||(Array.isArray(e)?e[1]:e)===t||!(!Array.isArray(e)||"string"!=typeof t)&&Ir(e,t)>=0}const fd={textEnd:0,key:0,keyEnd:0,value:0,valueEnd:0};function pd(e){return e.substring(fd.key,fd.keyEnd)}function hd(e){return e.substring(fd.value,fd.valueEnd)}function vd(e,t){const n=fd.textEnd;return n===t?-1:(t=fd.keyEnd=function(e,t,n){for(;t<n&&e.charCodeAt(t)>32;)t++;return t}(e,fd.key=t,n),md(e,t,n))}function yd(e,t){const n=fd.textEnd;let r=fd.key=md(e,t,n);return n===r?-1:(r=fd.keyEnd=function(e,t,n){let r;for(;t<n&&(45===(r=e.charCodeAt(t))||95===r||(-33&r)>=65&&(-33&r)<=90||r>=48&&r<=57);)t++;return t}(e,r,n),r=bd(e,r,n,58),r=fd.value=md(e,r,n),r=fd.valueEnd=function(e,t,n){let r=-1,o=-1,i=-1,s=t,u=s;for(;s<n;){const a=e.charCodeAt(s++);if(59===a)return u;34===a||39===a?u=s=_d(e,a,s,n):t===s-4&&85===i&&82===o&&76===r&&40===a?u=s=_d(e,41,s,n):a>32&&(u=s),i=o,o=r,r=-33&a}return u}(e,r,n),bd(e,r,n,59))}function gd(e){fd.key=0,fd.keyEnd=0,fd.value=0,fd.valueEnd=0,fd.textEnd=e.length}function md(e,t,n){for(;t<n&&e.charCodeAt(t)<=32;)t++;return t}function bd(e,t,n,r){return(t=md(e,t,n))<n&&(ngDevMode&&e.charCodeAt(t)!==r&&wd(e,String.fromCharCode(r),t),t++),t}function _d(e,t,n,r){let o=-1,i=n;for(;i<r;){const n=e.charCodeAt(i++);if(n==t&&92!==o)return i;o=92==n&&92===o?0:n}throw ngDevMode?wd(e,String.fromCharCode(t),r):new Error}function wd(e,t,n){throw ngDevMode&&C("string"==typeof e,!0,"String expected here"),T(`Malformed style at location ${n} in string '`+e.substring(0,n)+"[>>"+e.substring(n,n+1)+"<<]"+e.substr(n+1)+`'. Expecting '${t}'.`)}function Md(e,t,n){return Ed(e,t,n,!1),Md}function Cd(e,t){return Ed(e,t,null,!0),Cd}function Od(e){Id(kd,xd,e,!1)}function xd(e,t){for(let n=function(e){return gd(e),yd(e,md(e,0,fd.textEnd))}(t);n>=0;n=yd(t,n))kd(e,pd(t),hd(t))}function Dd(e){Id(Sr,Sd,e,!0)}function Sd(e,t){for(let n=function(e){return gd(e),vd(e,md(e,0,fd.textEnd))}(t);n>=0;n=vd(t,n))Sr(e,pd(t),!0)}function Ed(e,t,n,r){const o=At(),i=kt(),s=Gt(2);i.firstUpdatePass&&jd(i,e,s,r),t!==Hs&&Ac(o,s,t)&&Nd(i,i.data[ln()],o,o[11],e,o[s+1]=function(e,t){return null==e||("string"==typeof t?e+=t:"object"==typeof e&&(e=u(xo(e)))),e}(t,n),r,s)}function Id(e,t,n,r){const o=kt(),i=Gt(2);o.firstUpdatePass&&jd(o,null,i,r);const s=At();if(n!==Hs&&Ac(s,i,n)){const u=o.data[ln()];if(Vd(u,r)&&!Pd(o,i)){if(ngDevMode){const e=o.data[i];C(Array.isArray(e)?e[1]:e,!1,"Styling linked list shadow input should be marked as 'false'")}let e=r?u.classesWithoutHost:u.stylesWithoutHost;ngDevMode&&!1===r&&null!==e&&C(e.endsWith(";"),!0,"Expecting static portion to end with ';'"),null!==e&&(n=a(e,n||"")),kl(o,u,s,n,r)}else!function(e,t,n,r,o,i,s,u){o===Hs&&(o=ae);let a=0,c=0,l=0<o.length?o[0]:null,d=0<i.length?i[0]:null;for(;null!==l||null!==d;){ngDevMode&&S(a,999,"Are we stuck in infinite loop?"),ngDevMode&&S(c,999,"Are we stuck in infinite loop?");const f=a<o.length?o[a+1]:void 0,p=c<i.length?i[c+1]:void 0;let h,v=null;l===d?(a+=2,c+=2,f!==p&&(v=d,h=p)):null===d||null!==l&&l<d?(a+=2,v=l):(ngDevMode&&j(d,"Expecting to have a valid key"),c+=2,v=d,h=p),null!==v&&Nd(e,t,n,r,v,h,s,u),l=a<o.length?o[a]:null,d=c<i.length?i[c]:null}}(o,u,s,s[11],s[i+1],s[i+1]=function(e,t,n){if(null==n||""===n)return ae;const r=[],o=xo(n);if(Array.isArray(o))for(let t=0;t<o.length;t++)e(r,o[t],!0);else if("object"==typeof o)for(const t in o)o.hasOwnProperty(t)&&e(r,t,o[t]);else"string"==typeof o?t(r,o):ngDevMode&&T("Unsupported styling type "+typeof o+": "+o);return r}(e,t,n),r,i)}}function Pd(e,t){return t>=e.expandoStartIndex}function jd(e,t,n,r){ngDevMode&&Je(e);const o=e.data;if(null===o[n+1]){const i=o[ln()];ngDevMode&&j(i,"TNode expected");const s=Pd(e,n);Vd(i,r)&&null===t&&!s&&(t=!1),t=function(e,t,n,r){const o=Yt(e);let i=r?t.residualClasses:t.residualStyles;if(null===o)0===(r?t.classBindings:t.styleBindings)&&(n=Ad(n=Td(null,e,t,n,r),t.attrs,r),i=null);else{const s=t.directiveStylingLast;if(-1===s||e[s]!==o)if(n=Td(o,e,t,n,r),null===i){let n=function(e,t,n){const r=n?t.classBindings:t.styleBindings;if(0!==Js(r))return e[qs(r)]}(e,t,r);void 0!==n&&Array.isArray(n)&&(n=Td(null,e,t,n[1],r),n=Ad(n,t.attrs,r),function(e,t,n,r){const o=n?t.classBindings:t.styleBindings;ngDevMode&&O(Js(o),0,"Expecting to have at least one template styling binding."),e[qs(o)]=r}(e,t,r,n))}else i=function(e,t,n){let r;const o=t.directiveEnd;ngDevMode&&O(t.directiveStylingLast,-1,"By the time this function gets called at least one hostBindings-node styling instruction must have executed.");for(let i=1+t.directiveStylingLast;i<o;i++)r=Ad(r,e[i].hostAttrs,n);return Ad(r,t.attrs,n)}(e,t,r)}return void 0!==i&&(r?t.residualClasses=i:t.residualStyles=i),n}(o,i,t,r),function(e,t,n,r,o,i){ngDevMode&&Je(kt());let s=i?t.classBindings:t.styleBindings,u=qs(s),a=Js(s);e[r]=n;let c,l=!1;if(Array.isArray(n)){const e=n;c=e[1],(null===c||Ir(e,c)>0)&&(l=!0)}else c=n;if(o)if(0!==a){const t=qs(e[u+1]);e[r+1]=zs(t,u),0!==t&&(e[t+1]=Zs(e[t+1],r)),e[u+1]=(d=e[u+1],f=r,ngDevMode&&_(d,"expected number"),ngDevMode&&w(f,0,32767),131071&d|f<<17)}else e[r+1]=zs(u,0),0!==u&&(e[u+1]=Zs(e[u+1],r)),u=r;else e[r+1]=zs(a,0),ngDevMode&&C(0!==u&&0===a,!1,"Adding template bindings after hostBindings is not allowed."),0===u?u=r:e[a+1]=Zs(e[a+1],r),a=r;var d,f;l&&(e[r+1]=Gs(e[r+1])),ld(e,c,r,!0),ld(e,c,r,!1),function(e,t,n,r,o){const i=o?e.residualClasses:e.residualStyles;null!=i&&"string"==typeof t&&Ir(i,t)>=0&&(n[r+1]=Ys(n[r+1]))}(t,c,e,r,i),s=zs(u,a),i?t.classBindings=s:t.styleBindings=s}(o,i,t,n,s,r)}}function Td(e,t,n,r,o){let i=null;const s=n.directiveEnd;let u=n.directiveStylingLast;for(-1===u?u=n.directiveStart:u++;u<s&&(i=t[u],ngDevMode&&j(i,"expected to be defined"),r=Ad(r,i.hostAttrs,o),i!==e);)u++;return null!==e&&(n.directiveStylingLast=u),r}function Ad(e,t,n){const r=n?1:2;let o=-1;if(null!==t)for(let i=0;i<t.length;i++){const s=t[i];"number"==typeof s?o=s:o===r&&(Array.isArray(e)||(e=void 0===e?[]:["",e]),Sr(e,s,!!n||t[++i]))}return void 0===e?null:e}function kd(e,t,n){Sr(e,t,xo(n))}function Nd(e,t,n,r,o,i,s,u){if(!(3&t.type))return;const a=e.data,c=a[u+1];Fd(Qs(c)?Rd(a,t,n,o,Js(c),s):void 0)||(Fd(i)||Ks(c)&&(i=Rd(a,null,n,o,u,s)),function(e,t,n,r,o){const i=yt(e);if(t)o?(ngDevMode&&ngDevMode.rendererAddClass++,i?e.addClass(n,r):(ngDevMode&&j(n.classList,"HTMLElement expected"),n.classList.add(r))):(ngDevMode&&ngDevMode.rendererRemoveClass++,i?e.removeClass(n,r):n.classList.remove(r));else{let t=-1===r.indexOf("-")?void 0:zi.DashCase;if(null==o)ngDevMode&&ngDevMode.rendererRemoveStyle++,i?e.removeStyle(n,r,t):n.style.removeProperty(r);else{const s="string"==typeof o&&o.endsWith("!important");s&&(o=o.slice(0,-10),t|=zi.Important),ngDevMode&&ngDevMode.rendererSetStyle++,i?e.setStyle(n,r,o,t):(ngDevMode&&j(n.style,"HTMLElement expected"),n.style.setProperty(r,o,s?"important":""))}}}(r,s,bt(ln(),n),o,i))}function Rd(e,t,n,r,o,i){const s=null===t;let u;for(;o>0;){const t=e[o],i=Array.isArray(t),a=i?t[1]:t,c=null===a;let l=n[o+1];l===Hs&&(l=c?ae:void 0);let d=c?Er(l,r):a===r?l:void 0;if(i&&!Fd(d)&&(d=Er(t,r)),Fd(d)&&(u=d,s))return u;const f=e[o+1];o=s?qs(f):Js(f)}if(null!==t){let e=i?t.residualClasses:t.residualStyles;null!=e&&(u=Er(e,r))}return u}function Fd(e){return void 0!==e}function Vd(e,t){return 0!=(e.flags&(t?16:32))}function Ld(e,t=""){const n=At(),r=kt(),o=e+je;ngDevMode&&C(zt(),r.bindingStartIndex,"text nodes should be created before any bindings"),ngDevMode&&k(n,o);const i=r.firstCreatePass?Nu(r,o,1,t,null):r.data[o],s=n[o]=es(n[11],t);bs(r,n,s,i),Lt(i,!1)}function $d(e){return Hd("",e,""),$d}function Hd(e,t,n){const r=At(),o=Lc(r,e,t,n);return o!==Hs&&Pa(r,ln(),o),Hd}function Bd(e,t,n,r,o){const i=At(),s=$c(i,e,t,n,r,o);return s!==Hs&&Pa(i,ln(),s),Bd}function Ud(e,t,n,r,o,i,s){const u=At(),a=Hc(u,e,t,n,r,o,i,s);return a!==Hs&&Pa(u,ln(),a),Ud}function Wd(e,t,n,r,o,i,s,u,a){const c=At(),l=Bc(c,e,t,n,r,o,i,s,u,a);return l!==Hs&&Pa(c,ln(),l),Wd}function zd(e,t,n,r,o,i,s,u,a,c,l){const d=At(),f=Uc(d,e,t,n,r,o,i,s,u,a,c,l);return f!==Hs&&Pa(d,ln(),f),zd}function qd(e,t,n,r,o,i,s,u,a,c,l,d,f){const p=At(),h=Wc(p,e,t,n,r,o,i,s,u,a,c,l,d,f);return h!==Hs&&Pa(p,ln(),h),qd}function Kd(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h){const v=At(),y=zc(v,e,t,n,r,o,i,s,u,a,c,l,d,f,p,h);return y!==Hs&&Pa(v,ln(),y),Kd}function Gd(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y){const g=At(),m=qc(g,e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y);return m!==Hs&&Pa(g,ln(),m),Gd}function Jd(e){const t=At(),n=Vc(t,e);return n!==Hs&&Pa(t,ln(),n),Jd}function Zd(e,t,n){Id(Sr,Sd,Lc(At(),e,t,n),!0)}function Qd(e,t,n,r,o){Id(Sr,Sd,$c(At(),e,t,n,r,o),!0)}function Yd(e,t,n,r,o,i,s){Id(Sr,Sd,Hc(At(),e,t,n,r,o,i,s),!0)}function Xd(e,t,n,r,o,i,s,u,a){Id(Sr,Sd,Bc(At(),e,t,n,r,o,i,s,u,a),!0)}function ef(e,t,n,r,o,i,s,u,a,c,l){Id(Sr,Sd,Uc(At(),e,t,n,r,o,i,s,u,a,c,l),!0)}function tf(e,t,n,r,o,i,s,u,a,c,l,d,f){Id(Sr,Sd,Wc(At(),e,t,n,r,o,i,s,u,a,c,l,d,f),!0)}function nf(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h){Id(Sr,Sd,zc(At(),e,t,n,r,o,i,s,u,a,c,l,d,f,p,h),!0)}function rf(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y){Id(Sr,Sd,qc(At(),e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y),!0)}function of(e){Id(Sr,Sd,Vc(At(),e),!0)}function sf(e,t,n){Od(Lc(At(),e,t,n))}function uf(e,t,n,r,o){Od($c(At(),e,t,n,r,o))}function af(e,t,n,r,o,i,s){Od(Hc(At(),e,t,n,r,o,i,s))}function cf(e,t,n,r,o,i,s,u,a){Od(Bc(At(),e,t,n,r,o,i,s,u,a))}function lf(e,t,n,r,o,i,s,u,a,c,l){Od(Uc(At(),e,t,n,r,o,i,s,u,a,c,l))}function df(e,t,n,r,o,i,s,u,a,c,l,d,f){Od(Wc(At(),e,t,n,r,o,i,s,u,a,c,l,d,f))}function ff(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h){Od(zc(At(),e,t,n,r,o,i,s,u,a,c,l,d,f,p,h))}function pf(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y){Od(qc(At(),e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y))}function hf(e){Od(Vc(At(),e))}function vf(e,t,n,r,o){return Ed(e,Lc(At(),t,n,r),o,!1),vf}function yf(e,t,n,r,o,i,s){return Ed(e,$c(At(),t,n,r,o,i),s,!1),yf}function gf(e,t,n,r,o,i,s,u,a){return Ed(e,Hc(At(),t,n,r,o,i,s,u),a,!1),gf}function mf(e,t,n,r,o,i,s,u,a,c,l){return Ed(e,Bc(At(),t,n,r,o,i,s,u,a,c),l,!1),mf}function bf(e,t,n,r,o,i,s,u,a,c,l,d,f){return Ed(e,Uc(At(),t,n,r,o,i,s,u,a,c,l,d),f,!1),bf}function _f(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h){return Ed(e,Wc(At(),t,n,r,o,i,s,u,a,c,l,d,f,p),h,!1),_f}function wf(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y){return Ed(e,zc(At(),t,n,r,o,i,s,u,a,c,l,d,f,p,h,v),y,!1),wf}function Mf(e,t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g,m){return Ed(e,qc(At(),t,n,r,o,i,s,u,a,c,l,d,f,p,h,v,y,g),m,!1),Mf}function Cf(e,t,n){return Ed(e,Vc(At(),t),n,!1),Cf}function Of(e,t,n){const r=At(),o=Kt();if(Ac(r,o,t)){const i=kt(),s=fn();Zu(i,s,r,e,t,r[11],n,!0),ngDevMode&&Ca(i.data,s,e,o)}return Of}function xf(e,t,n){const r=At(),o=Kt();if(Ac(r,o,t)){const i=kt(),s=fn();Zu(i,s,r,e,t,Sa(Yt(i.data),s,r),n,!0),ngDevMode&&Ca(i.data,s,e,o)}return xf}"undefined"==typeof ngI18nClosureMode&&(ie.ngI18nClosureMode="undefined"!=typeof goog&&"function"==typeof goog.getMsg);const Df=void 0;var Sf=["en",[["a","p"],["AM","PM"],Df],[["AM","PM"],Df,Df],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],Df,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],Df,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",Df,"{1} 'at' {0}",Df],[".",",",";","%","+","-","E","×","‰","∞","NaN",":"],["#,##0.###","#,##0%","¤#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(e){const t=Math.floor(Math.abs(e)),n=e.toString().replace(/^[^.]*\.?/,"").length;return 1===t&&0===n?1:5}];let Ef={};function If(e,t,n){"string"!=typeof t&&(n=t,t=e[Nf.LocaleId]),t=t.toLowerCase().replace(/_/g,"-"),Ef[t]=e,n&&(Ef[t][Nf.ExtraData]=n)}function Pf(e){const t=function(e){return e.toLowerCase().replace(/_/g,"-")}(e);let n=Af(t);if(n)return n;const r=t.split("-")[0];if(n=Af(r),n)return n;if("en"===r)return Sf;throw new Error(`Missing locale data for the locale "${e}".`)}function jf(e){return Pf(e)[Nf.CurrencyCode]||null}function Tf(e){return Pf(e)[Nf.PluralCase]}function Af(e){return e in Ef||(Ef[e]=ie.ng&&ie.ng.common&&ie.ng.common.locales&&ie.ng.common.locales[e]),Ef[e]}function kf(){Ef={}}var Nf;!function(e){e[e.LocaleId=0]="LocaleId",e[e.DayPeriodsFormat=1]="DayPeriodsFormat",e[e.DayPeriodsStandalone=2]="DayPeriodsStandalone",e[e.DaysFormat=3]="DaysFormat",e[e.DaysStandalone=4]="DaysStandalone",e[e.MonthsFormat=5]="MonthsFormat",e[e.MonthsStandalone=6]="MonthsStandalone",e[e.Eras=7]="Eras",e[e.FirstDayOfWeek=8]="FirstDayOfWeek",e[e.WeekendRange=9]="WeekendRange",e[e.DateFormat=10]="DateFormat",e[e.TimeFormat=11]="TimeFormat",e[e.DateTimeFormat=12]="DateTimeFormat",e[e.NumberSymbols=13]="NumberSymbols",e[e.NumberFormats=14]="NumberFormats",e[e.CurrencyCode=15]="CurrencyCode",e[e.CurrencySymbol=16]="CurrencySymbol",e[e.CurrencyName=17]="CurrencyName",e[e.Currencies=18]="Currencies",e[e.Directionality=19]="Directionality",e[e.PluralCase=20]="PluralCase",e[e.ExtraData=21]="ExtraData"}(Nf||(Nf={}));const Rf=["zero","one","two","few","many"],Ff="en-US",Vf={marker:"element"},Lf={marker:"ICU"};var $f;!function(e){e[e.SHIFT=2]="SHIFT",e[e.APPEND_EAGERLY=1]="APPEND_EAGERLY",e[e.COMMENT=2]="COMMENT"}($f||($f={}));let Hf=Ff;function Bf(e){j(e,"Expected localeId to be defined"),"string"==typeof e&&(Hf=e.toLowerCase().replace(/_/g,"-"))}function Uf(e,t,n){const r=t.insertBeforeIndex,o=Array.isArray(r)?r[0]:r;return null===o?vs(e,0,n):(ngDevMode&&k(n,o),mt(n[o]))}function Wf(e,t,n,r,o){const i=t.insertBeforeIndex;if(Array.isArray(i)){ngDevMode&&A(r);let s=r,u=null;if(3&t.type||(u=s,s=o),null!==s&&0==(2&t.flags))for(let t=1;t<i.length;t++)ls(e,s,n[i[t]],u,!1)}}function zf(e,t){if(ngDevMode&&C(t.insertBeforeIndex,null,"We expect that insertBeforeIndex is not set"),e.push(t),e.length>1)for(let n=e.length-2;n>=0;n--){const r=e[n];qf(r)||Kf(r,t)&&null===Gf(r)&&Jf(r,t.index)}}function qf(e){return!(64&e.type)}function Kf(e,t){return qf(t)||e.index>t.index}function Gf(e){const t=e.insertBeforeIndex;return Array.isArray(t)?t[0]:t}function Jf(e,t){const n=e.insertBeforeIndex;Array.isArray(n)?n[0]=t:(ms(Uf,Wf),e.insertBeforeIndex=t)}function Zf(e,t){const n=e.data[t];if(null===n||"string"==typeof n)return null;!ngDevMode||n.hasOwnProperty("tViews")||n.hasOwnProperty("currentCaseLViewIndex")||T("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: "+n);const r=n.hasOwnProperty("currentCaseLViewIndex")?n:n.value;return ngDevMode&&Be(r),r}function Qf(e,t,n){const r=Ru(e,n,64,null,null);return zf(t,r),r}function Yf(e,t){const n=t[e.currentCaseLViewIndex];return null===n?n:n<0?~n:n}function Xf(e){return e>>>17}function ep(e){return(131070&e)>>>1}function tp(e){return 1&e}let np=0,rp=0;function op(e,t,n,r){ngDevMode&&A(r);const o=n[11];let i,s=null;for(let u=0;u<t.length;u++){const a=t[u];if("string"==typeof a){const e=t[++u];null===n[e]&&(ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&k(n,e),n[e]=es(o,a))}else if("number"==typeof a)switch(1&a){case 0:const c=Xf(a);let l,d;if(null===s&&(s=c,i=ps(o,r)),c===s?(l=r,d=i):(l=null,d=mt(n[c])),null!==d){ngDevMode&&A(d);const t=ep(a);ngDevMode&&I(t,je,"Missing ref");const r=n[t];ngDevMode&&A(r),ls(o,d,r,l,!1);const i=Zf(e,t);if(null!==i&&"object"==typeof i){ngDevMode&&Be(i);const t=Yf(i,n);null!==t&&op(e,i.create[t],n,n[i.anchorIdx])}}break;case 1:const f=a>>>1,h=t[++u],v=t[++u];ca(o,bt(f,n),null,null,h,v,null);break;default:if(ngDevMode)throw new p(700,`Unable to determine the type of mutate operation for "${a}"`)}else switch(a){case Lf:const e=t[++u],r=t[++u];null===n[r]&&(ngDevMode&&C(typeof e,"string",`Expected "${e}" to be a comment node value`),ngDevMode&&ngDevMode.rendererCreateComment++,ngDevMode&&Ze(n,r),wi(n[r]=ns(o,e),n));break;case Vf:const i=t[++u],s=t[++u];null===n[s]&&(ngDevMode&&C(typeof i,"string",`Expected "${i}" to be an element node tag name`),ngDevMode&&ngDevMode.rendererCreateElement++,ngDevMode&&Ze(n,s),wi(n[s]=rs(o,i,null),n));break;default:ngDevMode&&T(`Unable to determine the type of mutate operation for "${a}"`)}}}function ip(e,t,n,r,o){for(let i=0;i<n.length;i++){const s=n[i],u=n[++i];if(s&o){let o="";for(let s=i+1;s<=i+u;s++){const i=n[s];if("string"==typeof i)o+=i;else if("number"==typeof i)if(i<0)o+=v(t[r-i]);else{const u=i>>>2;switch(3&i){case 1:const i=n[++s],a=n[++s],c=e.data[u];ngDevMode&&j(c,"Experting TNode or string"),"string"==typeof c?ca(t[11],t[u],null,c,i,o,a):Zu(e,c,t,i,o,t[11],a,!1);break;case 0:const l=t[u];null!==l&&ts(t[11],l,o);break;case 2:up(e,Zf(e,u),t,o);break;case 3:sp(e,Zf(e,u),r,t)}}}}else{const o=n[i+1];if(o>0&&3==(3&o)){const n=Zf(e,o>>>2);t[n.currentCaseLViewIndex]<0&&sp(e,n,r,t)}}i+=u}}function sp(e,t,n,r){ngDevMode&&k(r,t.currentCaseLViewIndex);let o=r[t.currentCaseLViewIndex];if(null!==o){let i=np;o<0&&(o=r[t.currentCaseLViewIndex]=~o,i=-1),ip(e,r,t.update[o],n,i)}}function up(e,t,n,r){const o=function(e,t){let n=e.cases.indexOf(t);if(-1===n)switch(e.type){case 1:{const r=function(e,t){const n=Tf(t)(parseInt(e,10)),r=Rf[n];return void 0!==r?r:"other"}(t,Hf);n=e.cases.indexOf(r),-1===n&&"other"!==r&&(n=e.cases.indexOf("other"));break}case 0:n=e.cases.indexOf("other")}return-1===n?null:n}(t,r);if(Yf(t,n)!==o&&(ap(e,t,n),n[t.currentCaseLViewIndex]=null===o?null:~o,null!==o)){const r=n[t.anchorIdx];r&&(ngDevMode&&A(r),op(e,t.create[o],n,r))}}function ap(e,t,n){let r=Yf(t,n);if(null!==r){const o=t.remove[r];for(let t=0;t<o.length;t++){const r=o[t];if(r>0){const e=bt(r,n);null!==e&&Cs(n[11],e)}else ap(e,Zf(e,~r),n)}}}function cp(){const e=[];let t,n,r=-1;function o(e,t){r=0;const o=Yf(e,t);null!==o?(ngDevMode&&w(o,0,e.cases.length-1),n=e.remove[o]):n=ae}function i(){if(r<n.length){const s=n[r++];if(ngDevMode&&_(s,"Expecting OpCode number"),s>0){const e=t[s];return ngDevMode&&A(e),e}{e.push(r,n);const u=~s,a=t[1].data[u];return ngDevMode&&Be(a),o(a,t),i()}}return 0===e.length?null:(n=e.pop(),r=e.pop(),i())}return function(n,r){for(t=r;e.length;)e.pop();return ngDevMode&&Le(n,r),o(n.value,r),i}}function lp(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const r=t[e++],o=t[e],i=(r&$f.COMMENT)===$f.COMMENT,s=(r&$f.APPEND_EAGERLY)===$f.APPEND_EAGERLY,u=r>>>$f.SHIFT;n.push(`lView[${u}] = document.${i?"createComment":"createText"}(${JSON.stringify(o)});`),s&&n.push(`parent.appendChild(lView[${u}]);`)}return n}function dp(e){const t=new hp(e||(Array.isArray(this)?this:[]));let n=[];function r(e){const n=e>>>2;switch(3&e){case 0:return`(lView[${n}] as Text).textContent = $$$`;case 1:const e=t.consumeString(),r=t.consumeFunction();return`(lView[${n}] as Element).setAttribute('${e}', ${r?`(${r})($$$)`:"$$$"})`;case 2:return`icuSwitchCase(${n}, $$$)`;case 3:return`icuUpdateCase(${n})`}throw new Error("unexpected OpCode")}for(;t.hasMore();){let e=t.consumeNumber(),o=t.consumeNumber();const i=t.i+o,s=[];let u="";for(;t.i<i;){let e=t.consumeNumberOrString();if("string"==typeof e)u+=e;else if(e<0)u+="${lView[i"+e+"]}";else{const t=r(e);s.push(t.replace("$$$","`"+u+"`")+";"),u=""}}n.push(`if (mask & 0b${e.toString(2)}) { ${s.join(" ")} }`)}return n}function fp(e){const t=new hp(e||(Array.isArray(this)?this:[]));let n=[];function r(e){const n=Xf(e),r=ep(e);switch(tp(e)){case 0:return`(lView[${n}] as Element).appendChild(lView[${o}])`;case 1:return`(lView[${r}] as Element).setAttribute("${t.consumeString()}", "${t.consumeString()}")`}throw new Error("Unexpected OpCode: "+tp(e))}let o=-1;for(;t.hasMore();){let e=t.consumeNumberStringOrMarker();if(e===Lf){const e=t.consumeString();o=t.consumeNumber(),n.push(`lView[${o}] = document.createComment("${e}")`)}else if(e===Vf){const e=t.consumeString();o=t.consumeNumber(),n.push(`lView[${o}] = document.createElement("${e}")`)}else if("string"==typeof e)o=t.consumeNumber(),n.push(`lView[${o}] = document.createTextNode("${e}")`);else{if("number"!=typeof e)throw new Error("Unexpected value");{const t=r(e);t&&n.push(t)}}}return n}function pp(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const r=t[e];r>0?n.push(`remove(lView[${r}])`):n.push(`removeNestedICU(${~r})`)}return n}class hp{constructor(e){this.i=0,this.codes=e}hasMore(){return this.i<this.codes.length}consumeNumber(){let e=this.codes[this.i++];return _(e,"expecting number in OpCode"),e}consumeString(){let e=this.codes[this.i++];return M(e,"expecting string in OpCode"),e}consumeFunction(){let e=this.codes[this.i++];if(null===e||"function"==typeof e)return e;throw new Error("expecting function in OpCode")}consumeNumberOrString(){let e=this.codes[this.i++];return"string"==typeof e||_(e,"expecting number or string in OpCode"),e}consumeNumberStringOrMarker(){let e=this.codes[this.i++];return"string"==typeof e||"number"==typeof e||e==Lf||e==Vf||_(e,"expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode"),e}}const vp=/�(\d+):?\d*�/gi,yp=/({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi,gp=/�(\d+)�/,mp=/^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/,bp=/�\/?\*(\d+:\d+)�/gi,_p=/�(\/?[#*]\d+):?\d*�/gi,wp=/\uE500/g;function Mp(e,t,n,r,o,i,s){const u=Fu(e,r,1,null);let a=u<<$f.SHIFT,c=Vt();t===c&&(c=null),null===c&&(a|=$f.APPEND_EAGERLY),s&&(a|=$f.COMMENT,void 0===qi&&(qi=cp())),o.push(a,null===i?"":i);const l=Ru(e,u,s?32:1,null===i?ngDevMode?"{{?}}":"":i,null);zf(n,l);const d=l.index;return Lt(l,!1),null!==c&&t!==c&&function(e,t){ngDevMode&&He(e);let n=e.insertBeforeIndex;null===n?(ms(Uf,Wf),n=e.insertBeforeIndex=[null,t]):(C(Array.isArray(n),!0,"Expecting array here"),n.push(t))}(c,d),l}function Cp(e,t,n,r,o,i,s){const u=s.match(vp),a=Mp(e,t,n,i,r,u?null:s,!1);u&&Op(o,s,a.index,null,0,null)}function Op(e,t,n,r,o,i){ngDevMode&&P(n,je,"Index must be in absolute LView offset");const s=e.length,u=s+1;e.push(null,null);const a=s+2;ngDevMode&&eu(e,dp);const c=t.split(vp);let l=0;for(let t=0;t<c.length;t++){const n=c[t];if(1&t){const t=o+parseInt(n,10);e.push(-1-t),l|=Dp(t)}else""!==n&&e.push(n)}return e.push(n<<2|(r?1:0)),r&&e.push(r,i),e[s]=l,e[u]=e.length-a,l}function xp(e){let t=0;for(let n=0;n<e.length;n++){const r=e[n];"number"==typeof r&&r<0&&t++}return t}function Dp(e){return 1<<Math.min(e,31)}function Sp(e){let t,n,r="",o=0,i=!1;for(;null!==(t=bp.exec(e));)i?t[0]===`�/*${n}�`&&(o=t.index,i=!1):(r+=e.substring(o,t.index+t[0].length),n=t[1],i=!0);return ngDevMode&&C(i,!1,`Tag mismatch: unable to find the end of the sub-template in the translation "${e}"`),r+=e.substr(o),r}function Ep(e,t,n,r,o,i){ngDevMode&&j(o,"ICU expression must be defined");let s=0;const u={type:o.type,currentCaseLViewIndex:Fu(e,t,1,null),anchorIdx:i,cases:[],create:[],remove:[],update:[]};!function(e,t,n){e.push(Dp(t.mainBinding),2,-1-t.mainBinding,n<<2|2)}(n,o,i),function(e,t,n){const r=e.data[t];ngDevMode&&C(null===r||r.hasOwnProperty("tViews"),!0,"We expect to get 'null'|'TIcuContainer'"),null===r?e.data[t]=n:(ngDevMode&&xn(r,32),r.value=n)}(e,i,u);const a=o.values;for(let i=0;i<a.length;i++){const c=a[i],l=[];for(let e=0;e<c.length;e++){const t=c[e];if("string"!=typeof t){const n=l.push(t)-1;c[e]=`\x3c!--�${n}�--\x3e`}}s=jp(e,u,t,n,r,o.cases[i],c.join(""),l)|s}s&&function(e,t,n){e.push(t,1,n<<2|3)}(n,s,i)}function Ip(e){const t=[],n=[];let r=1,o=0;const i=Pp(e=e.replace(mp,(function(e,t,n){return r="select"===n?0:1,o=parseInt(t.substr(1),10),""})));for(let e=0;e<i.length;){let o=i[e++].trim();1===r&&(o=o.replace(/\s*(?:=)?(\w+)\s*/,"$1")),o.length&&t.push(o);const s=Pp(i[e++]);t.length>n.length&&n.push(s)}return{type:r,mainBinding:o,cases:t,values:n}}function Pp(e){if(!e)return[];let t=0;const n=[],r=[],o=/[{}]/g;let i;for(o.lastIndex=0;i=o.exec(e);){const o=i.index;if("}"==i[0]){if(n.pop(),0==n.length){const n=e.substring(t,o);mp.test(n)?r.push(Ip(n)):r.push(n),t=o+1}}else{if(0==n.length){const n=e.substring(t,o);r.push(n),t=o+1}n.push("{")}}const s=e.substring(t);return r.push(s),r}function jp(e,t,n,r,o,i,s,u){const a=[],c=[],l=[];ngDevMode&&(eu(a,fp),eu(c,pp),eu(l,dp)),t.cases.push(i),t.create.push(a),t.remove.push(c),t.update.push(l);const d=Ao(ht()).getInertBodyElement(s);ngDevMode&&j(d,"Unable to generate inert body element");const f=ui(d)||d;return f?Tp(e,t,n,r,a,c,l,f,o,u,0):0}function Tp(e,t,n,r,o,i,s,u,a,c,l){let d=0,f=u.firstChild;for(;f;){const u=Fu(e,n,1,null);switch(f.nodeType){case Node.ELEMENT_NODE:const p=f,h=p.tagName.toLowerCase();if(Go.hasOwnProperty(h)){Np(o,Vf,h,a,u),e.data[u]=h;const v=p.attributes;for(let e=0;e<v.length;e++){const t=v.item(e),n=t.name.toLowerCase();t.value.match(vp)?Xo.hasOwnProperty(n)?Jo[n]?Op(s,t.value,u,t.name,0,Vo):Zo[n]?Op(s,t.value,u,t.name,0,Lo):Op(s,t.value,u,t.name,0,null):ngDevMode&&console.warn(`WARNING: ignoring unsafe attribute value ${n} on element ${h} (see https://g.co/ng/security#xss)`):Rp(o,u,t)}d=Tp(e,t,n,r,o,i,s,f,u,c,l+1)|d,Ap(i,u,l)}break;case Node.TEXT_NODE:const v=f.textContent||"",y=v.match(vp);Np(o,null,y?"":v,a,u),Ap(i,u,l),y&&(d=Op(s,v,u,null,0,null)|d);break;case Node.COMMENT_NODE:const g=gp.exec(f.textContent||"");if(g){const t=parseInt(g[1],10),s=c[t];Np(o,Lf,ngDevMode?`nested ICU ${t}`:"",a,u),Ep(e,n,r,a,s,u),kp(i,u,l)}}f=f.nextSibling}return d}function Ap(e,t,n){0===n&&e.push(t)}function kp(e,t,n){0===n&&(e.push(~t),e.push(t))}function Np(e,t,n,r,o){var i,s;null!==t&&e.push(t),e.push(n,o,(0,i=r,s=o,ngDevMode&&P(i,0,"Missing parent index"),ngDevMode&&I(s,0,"Missing ref index"),0|i<<17|s<<1))}function Rp(e,t,n){e.push(t<<1|1,n.name,n.value)}const Fp=/\[(�.+?�?)\]/,Vp=/\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g,Lp=/({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g,$p=/{([A-Z0-9_]+)}/g,Hp=/�I18N_EXP_(ICU(_\d+)?)�/g,Bp=/\/\*/,Up=/\d+\:(\d+)/;function Wp(e,t,n=-1){const r=kt(),o=At(),i=je+e;ngDevMode&&j(r,"tView should be defined");const s=Dt(r.consts,t),u=Vt();r.firstCreatePass&&function(e,t,n,r,o,i){const s=Vt(),u=[],a=[],c=[[]];ngDevMode&&(eu(u,lp),eu(a,dp)),o=function(e,t){if(function(e){return-1===e}(t))return Sp(e);{const n=e.indexOf(`:${t}�`)+2+t.toString().length,r=e.search(new RegExp(`�\\/\\*\\d+:${t}�`));return Sp(e.substring(n,r))}}(o,i);const l=(d=o,d.replace(wp," ")).split(_p);var d;for(let i=0;i<l.length;i++){let d=l[i];if(0==(1&i)){const i=Pp(d);for(let l=0;l<i.length;l++){let d=i[l];if(0==(1&l)){const t=d;ngDevMode&&M(t,"Parsed ICU part should be string"),""!==t&&Cp(e,s,c[0],u,a,n,t)}else{const i=d;if("object"!=typeof i)throw new Error(`Unable to parse ICU expression in "${o}" message.`);const l=Mp(e,s,c[0],n,u,ngDevMode?`ICU ${r}:${i.mainBinding}`:"",!0).index;ngDevMode&&P(l,je,"Index must be in absolute LView offset"),Ep(e,n,a,t,i,l)}}}else{const t=47===d.charCodeAt(0),n=d.charCodeAt(t?1:0);ngDevMode&&N(n,42,35);const r=je+Number.parseInt(d.substring(t?2:1));if(t)c.shift(),Lt(Vt(),!1);else{const t=Qf(e,c[0],r);c.unshift([]),Lt(t,!0)}}}e.data[r]={create:u,update:a}}(r,null===u?0:u.index,o,i,s,n);const a=r.data[i],c=cs(r,u===o[6]?null:u,o),l=u&&8&u.type?o[u.index]:null;!function(e,t,n,r){const o=e[11];for(let i=0;i<t.length;i++){const s=t[i++],u=t[i],a=(s&$f.COMMENT)===$f.COMMENT,c=(s&$f.APPEND_EAGERLY)===$f.APPEND_EAGERLY,l=s>>>$f.SHIFT;let d=e[l];null===d&&(d=e[l]=a?o.createComment(u):es(o,u)),c&&null!==n&&ls(o,n,d,r,!1)}}(o,a.create,c,l),Jt(!0)}function zp(){Jt(!1)}function qp(e,t,n){Wp(e,t,n),zp()}function Kp(e,t){const n=kt();ngDevMode&&j(n,"tView should be defined");const r=Dt(n.consts,t);!function(e,t,n){const r=Rt().index,o=[];if(ngDevMode&&eu(o,dp),e.firstCreatePass&&null===e.data[t]){for(let e=0;e<n.length;e+=2){const t=n[e],i=n[e+1];if(""!==i){if(yp.test(i))throw new Error(`ICU expressions are not supported in attributes. Message: "${i}".`);Op(o,i,r,t,xp(o),null)}}e.data[t]=o}}(n,e+je,r)}function Gp(e){return Ac(At(),Kt(),e)&&(np|=1<<Math.min(rp,31)),rp++,Gp}function Jp(e){!function(e,t,n){if(rp>0){ngDevMode&&j(e,"tView should be defined");const r=e.data[n];ip(e,t,Array.isArray(r)?r:r.update,zt()-rp-1,np)}np=0,rp=0}(kt(),At(),e+je)}function Zp(e,t={}){return function(e,t={}){let n=e;if(Fp.test(e)){const e={},t=[0];n=n.replace(Vp,((n,r,o)=>{const i=r||o,s=e[i]||[];if(s.length||(i.split("|").forEach((e=>{const t=e.match(Up),n=t?parseInt(t[1],10):0,r=Bp.test(e);s.push([n,r,e])})),e[i]=s),!s.length)throw new Error(`i18n postprocess: unmatched placeholder - ${i}`);const u=t[t.length-1];let a=0;for(let e=0;e<s.length;e++)if(s[e][0]===u){a=e;break}const[c,l,d]=s[a];return l?t.pop():u!==c&&t.push(c),s.splice(a,1),d}))}return Object.keys(t).length?(n=n.replace(Lp,((e,n,r,o,i,s)=>t.hasOwnProperty(r)?`${n}${t[r]}${s}`:e)),n=n.replace($p,((e,n)=>t.hasOwnProperty(n)?t[n]:e)),n=n.replace(Hp,((e,n)=>{if(t.hasOwnProperty(n)){const r=t[n];if(!r.length)throw new Error(`i18n postprocess: unmatched ICU - ${e} with key: ${n}`);return r.shift()}return e})),n):n}(e,t)}function Qp(e,t,n,r,o){if(e=d(e),Array.isArray(e))for(let i=0;i<e.length;i++)Qp(e[i],t,n,r,o);else{const i=kt(),s=At();let u=Ga(e)?e:d(e.provide),a=za(e);const c=Rt(),l=1048575&c.providerIndexes,f=c.directiveStart,p=c.providerIndexes>>20;if(Ga(e)||!e.multi){const r=new Cn(a,o,jl),d=eh(u,t,o?l:l+p,f);-1===d?(Hn(Fn(c,s),i,u),Yp(i,e,t.length),t.push(u),c.directiveStart++,c.directiveEnd++,o&&(c.providerIndexes+=1048576),n.push(r),s.push(r)):(n[d]=r,s[d]=r)}else{const d=eh(u,t,l+p,f),h=eh(u,t,l,l+p),v=d>=0&&n[d],y=h>=0&&n[h];if(o&&!y||!o&&!v){Hn(Fn(c,s),i,u);const l=function(e,t,n,r,o){const i=new Cn(e,n,jl);return i.multi=[],i.index=t,i.componentProviders=0,Xp(i,o,r&&!n),i}(o?nh:th,n.length,o,r,a);!o&&y&&(n[h].providerFactory=l),Yp(i,e,t.length,0),t.push(u),c.directiveStart++,c.directiveEnd++,o&&(c.providerIndexes+=1048576),n.push(l),s.push(l)}else Yp(i,e,d>-1?d:h,Xp(n[o?h:d],a,!o&&r));!o&&r&&y&&n[h].componentProviders++}}}function Yp(e,t,n,r){const o=Ga(t),i=!!t.useClass;if(o||i){const s=(i?d(t.useClass):t).prototype.ngOnDestroy;if(s){const i=e.destroyHooks||(e.destroyHooks=[]);if(!o&&t.multi){ngDevMode&&j(r,"indexInFactory when registering multi factory destroy hook");const e=i.indexOf(n);-1===e?i.push(n,[r,s]):i[e+1].push(r,s)}else i.push(n,s)}}}function Xp(e,t,n){return n&&e.componentProviders++,e.multi.push(t)-1}function eh(e,t,n,r){for(let o=n;o<r;o++)if(t[o]===e)return o;return-1}function th(e,t,n,r){return rh(this.multi,[])}function nh(e,t,n,r){const o=this.multi;let i;if(this.providerFactory){const e=this.providerFactory.componentProviders,t=Jn(n,n[1],this.providerFactory.index,r);i=t.slice(0,e),rh(o,i);for(let n=e;n<t.length;n++)i.push(t[n])}else i=[],rh(o,i);return i}function rh(e,t){for(let n=0;n<e.length;n++){const r=e[n];t.push(r())}return t}function oh(e,t=[]){return n=>{n.providersResolver=(n,r)=>function(e,t,n){const r=kt();if(r.firstCreatePass){const o=Ve(e);Qp(n,r.data,r.blueprint,o,!0),Qp(t,r.data,r.blueprint,o,!1)}}(n,r?r(e):e,t)}}class ih{}class sh{}class uh{resolveComponentFactory(e){throw function(e){const t=Error(`No component factory found for ${u(e)}. Did you add it to @NgModule.entryComponents?`);return t.ngComponent=e,t}(e)}}class ah{}function ch(e,t){return new lh(_t(e,t))}ah.NULL=new uh;class lh{constructor(e){this.nativeElement=e}}function dh(e){return e instanceof lh?e.nativeElement:e}lh.__NG_ELEMENT_ID__=function(){return ch(Rt(),At())},new lr("Renderer2Interceptor");class fh{}class ph{}ph.__NG_ELEMENT_ID__=()=>function(){const e=At(),t=Ct(Rt().index,e);return function(e){const t=e[11];if(ngDevMode&&!yt(t))throw new Error("Cannot inject Renderer2 when the application uses Renderer3!");return t}(Ae(t)?t:e)}();class hh{}hh.ɵprov=R({token:hh,providedIn:"root",factory:()=>null});class vh{constructor(e){this.full=e,this.major=e.split(".")[0],this.minor=e.split(".")[1],this.patch=e.split(".").slice(2).join(".")}}const yh=new vh("13.2.2"),gh={};function mh(e,t,n,r,o=!1){for(;null!==n;){ngDevMode&&xn(n,63);const i=t[n.index];if(null!==i&&r.push(mt(i)),ke(i))for(let e=Pe;e<i.length;e++){const t=i[e],n=t[1].firstChild;null!==n&&mh(t[1],t,n,r)}const s=n.type;if(8&s)mh(e,t,n.child,r);else if(32&s){const e=Ki(n,t);let o;for(;o=e();)r.push(o)}else if(16&s){const e=ws(t,n);if(Array.isArray(e))r.push(...e);else{const n=Gi(t[16]);ngDevMode&&Ye(n),mh(n[1],n,e,r,!0)}}n=o?n.projectionNext:n.next}return r}class bh{constructor(e,t){this._lView=e,this._cdRefInjectingView=t,this._appRef=null,this._attachedToViewContainer=!1}get rootNodes(){const e=this._lView,t=e[1];return mh(t,e,t.firstChild,[])}get context(){return this._lView[8]}set context(e){this._lView[8]=e}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._attachedToViewContainer){const e=this._lView[3];if(ke(e)){const t=e[8],n=t?t.indexOf(this):-1;n>-1&&(ngDevMode&&C(n,e.indexOf(this._lView)-Pe,"An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array."),is(e,n),xr(t,n))}this._attachedToViewContainer=!1}ss(this._lView[1],this._lView)}onDestroy(e){Gu(this._lView[1],this._lView,null,e)}markForCheck(){ma(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){_a(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(e,t,n){Ut(!0);try{_a(e,t,n)}finally{Ut(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(){if(this._appRef){const e=ngDevMode?"This view is already attached directly to the ApplicationRef!":"";throw new p(902,e)}this._attachedToViewContainer=!0}detachFromAppRef(){var e;this._appRef=null,xs(this._lView[1],e=this._lView,e[11],2,null,null)}attachToAppRef(e){if(this._attachedToViewContainer){const e=ngDevMode?"This view is already attached to a ViewContainer!":"";throw new p(902,e)}this._appRef=e}}class _h extends bh{constructor(e){super(e),this._view=e}detectChanges(){wa(this._view)}checkNoChanges(){!function(e){Ut(!0);try{wa(e)}finally{Ut(!1)}}(this._view)}get context(){return null}}class wh extends ah{constructor(e){super(),this.ngModule=e}resolveComponentFactory(e){ngDevMode&&Ue(e);const t=De(e);return new Oh(t,this.ngModule)}}function Mh(e){const t=[];for(let n in e)if(e.hasOwnProperty(n)){const r=e[n];t.push({propName:r,templateName:n})}return t}const Ch=new lr("SCHEDULER_TOKEN",{providedIn:"root",factory:()=>Fi});class Oh extends sh{constructor(e,t){super(),this.componentDef=e,this.ngModule=t,this.componentType=e.type,this.selector=e.selectors.map($s).join(","),this.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],this.isBoundToModule=!!t}get inputs(){return Mh(this.componentDef.inputs)}get outputs(){return Mh(this.componentDef.outputs)}create(e,t,n,r){const o=(r=r||this.ngModule)?function(e,t){return{get:(n,r,o)=>{const i=e.get(n,gh,o);return i!==gh||r===gh?i:t.get(n,r,o)}}}(e,r.injector):e,i=o.get(fh,gt),s=o.get(hh,null),u=i.createRenderer(null,this.componentDef),a=this.componentDef.selectors[0][0]||"div",c=n?Ku(u,n,this.componentDef.encapsulation):rs(i.createRenderer(null,this.componentDef),a,function(e){const t=e.toLowerCase();return"svg"===t?lt:"math"===t?dt:null}(a)),l=this.componentDef.onPush?576:528,d=hc(),f=qu(0,null,null,1,0,null,null,null,null,null),p=ku(null,f,d,l,null,null,i,u,s,o);let h,v;rn(p);try{const e=fc(c,this.componentDef,p,i,u);if(c)if(n)Dn(u,c,["ng-version",yh.full]);else{const{attrs:e,classes:t}=function(e){const t=[],n=[];let r=1,o=2;for(;r<e.length;){let i=e[r];if("string"==typeof i)2===o?""!==i&&t.push(i,e[++r]):8===o&&n.push(i);else{if(!Ns(o))break;o=i}r++}return{attrs:t,classes:n}}(this.componentDef.selectors[0]);e&&Dn(u,c,e),t&&t.length>0&&Es(u,c,t.join(" "))}if(v=wt(f,je),void 0!==t){const e=v.projection=[];for(let n=0;n<this.ngContentSelectors.length;n++){const r=t[n];e.push(null!=r?Array.from(r):null)}}h=pc(e,this.componentDef,p,d,[vc]),Vu(f,p,null)}finally{cn()}return new xh(this.componentType,h,ch(v,p),p,v)}}new wh;class xh extends ih{constructor(e,t,n,r,o){super(),this.location=n,this._rootLView=r,this._tNode=o,this.instance=t,this.hostView=this.changeDetectorRef=new _h(r),this.componentType=e}get injector(){return new Yn(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(e){this.hostView.onDestroy(e)}}function Dh(e,t,n,r){return Z((()=>{const o=e;null!==t&&(o.hasOwnProperty("decorators")&&void 0!==o.decorators?o.decorators.push(...t):o.decorators=t),null!==n&&(o.ctorParameters=n),null!==r&&(o.hasOwnProperty("propDecorators")&&void 0!==o.propDecorators?o.propDecorators=Object.assign(Object.assign({},o.propDecorators),r):o.propDecorators=r)}))}class Sh{}class Eh{}const Ih=new Map;function Ph(e){const t=new Set;!function e(n){const r=Ie(n,!0),o=r.id;if(null!==o){(function(e,t,n){if(t&&t!==n)throw new Error(`Duplicate module registered for ${e} - ${u(t)} vs ${u(t.name)}`)})(o,Ih.get(o),n),Ih.set(o,n)}const i=Bi(r.imports);for(const n of i)t.has(n)||(t.add(n),e(n))}(e)}function jh(e){return Ih.get(e)||_e[e]}function Th(e,t){return new Ah(e,null!=t?t:null)}class Ah extends Sh{constructor(e,t){super(),this._parent=t,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new wh(this);const n=Ie(e);ngDevMode&&j(n,`NgModule '${u(e)}' is not a subtype of 'NgModuleType'.`),this._bootstrapComponents=Bi(n.bootstrap),this._r3Injector=Ba(e,t,[{provide:Sh,useValue:this},{provide:ah,useValue:this.componentFactoryResolver}],u(e)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(e)}get(e,t=Ja.THROW_IF_NOT_FOUND,n=q.Default){return e===Ja||e===Sh||e===ka?this:this._r3Injector.get(e,t,n)}destroy(){ngDevMode&&j(this.destroyCbs,"NgModule already destroyed");const e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach((e=>e())),this.destroyCbs=null}onDestroy(e){ngDevMode&&j(this.destroyCbs,"NgModule already destroyed"),this.destroyCbs.push(e)}}class kh extends Eh{constructor(e){super(),this.moduleType=e,null!==Ie(e)&&Ph(e)}create(e){return new Ah(this.moduleType,e)}}function Nh(e,t,n){const r=Wt()+e,o=At();return o[r]===Hs?jc(o,r,n?t.call(n):t()):Tc(o,r)}function Rh(e,t,n,r){return qh(At(),Wt(),e,t,n,r)}function Fh(e,t,n,r,o){return Kh(At(),Wt(),e,t,n,r,o)}function Vh(e,t,n,r,o,i){return Gh(At(),Wt(),e,t,n,r,o,i)}function Lh(e,t,n,r,o,i,s){return Jh(At(),Wt(),e,t,n,r,o,i,s)}function $h(e,t,n,r,o,i,s,u){const a=Wt()+e,c=At(),l=Rc(c,a,n,r,o,i);return Ac(c,a+4,s)||l?jc(c,a+5,u?t.call(u,n,r,o,i,s):t(n,r,o,i,s)):Tc(c,a+5)}function Hh(e,t,n,r,o,i,s,u,a){const c=Wt()+e,l=At(),d=Rc(l,c,n,r,o,i);return kc(l,c+4,s,u)||d?jc(l,c+6,a?t.call(a,n,r,o,i,s,u):t(n,r,o,i,s,u)):Tc(l,c+6)}function Bh(e,t,n,r,o,i,s,u,a,c){const l=Wt()+e,d=At();let f=Rc(d,l,n,r,o,i);return Nc(d,l+4,s,u,a)||f?jc(d,l+7,c?t.call(c,n,r,o,i,s,u,a):t(n,r,o,i,s,u,a)):Tc(d,l+7)}function Uh(e,t,n,r,o,i,s,u,a,c,l){const d=Wt()+e,f=At(),p=Rc(f,d,n,r,o,i);return Rc(f,d+4,s,u,a,c)||p?jc(f,d+8,l?t.call(l,n,r,o,i,s,u,a,c):t(n,r,o,i,s,u,a,c)):Tc(f,d+8)}function Wh(e,t,n,r){return Zh(At(),Wt(),e,t,n,r)}function zh(e,t){ngDevMode&&k(e,t);const n=e[t];return n===Hs?void 0:n}function qh(e,t,n,r,o,i){const s=t+n;return Ac(e,s,o)?jc(e,s+1,i?r.call(i,o):r(o)):zh(e,s+1)}function Kh(e,t,n,r,o,i,s){const u=t+n;return kc(e,u,o,i)?jc(e,u+2,s?r.call(s,o,i):r(o,i)):zh(e,u+2)}function Gh(e,t,n,r,o,i,s,u){const a=t+n;return Nc(e,a,o,i,s)?jc(e,a+3,u?r.call(u,o,i,s):r(o,i,s)):zh(e,a+3)}function Jh(e,t,n,r,o,i,s,u,a){const c=t+n;return Rc(e,c,o,i,s,u)?jc(e,c+4,a?r.call(a,o,i,s,u):r(o,i,s,u)):zh(e,c+4)}function Zh(e,t,n,r,o,i){let s=t+n,u=!1;for(let t=0;t<o.length;t++)Ac(e,s++,o[t])&&(u=!0);return u?jc(e,s,r.apply(i,o)):zh(e,s)}function Qh(e,t){const n=kt();let r;const o=e+je;n.firstCreatePass?(r=function(e,t){if(t)for(let n=t.length-1;n>=0;n--){const r=t[n];if(e===r.name)return r}if(ngDevMode){const t=At()[16][8],n=t?` in the '${t.constructor.name}' component`:"";throw new p(-302,`The pipe '${e}' could not be found${n}!`)}}(t,n.pipeRegistry),n.data[o]=r,r.onDestroy&&(n.destroyHooks||(n.destroyHooks=[])).push(o,r.onDestroy)):r=n.data[o];const i=r.factory||(r.factory=et(r.type,!0)),s=G(jl);try{const e=Nn(!1),t=i();return Nn(e),rl(n,At(),o,t),t}finally{G(s)}}function Yh(e,t,n){const r=e+je,o=At(),i=Mt(o,r);return rv(o,r)?qh(o,Wt(),t,i.transform,n,i):i.transform(n)}function Xh(e,t,n,r){const o=e+je,i=At(),s=Mt(i,o);return rv(i,o)?Kh(i,Wt(),t,s.transform,n,r,s):s.transform(n,r)}function ev(e,t,n,r,o){const i=e+je,s=At(),u=Mt(s,i);return rv(s,i)?Gh(s,Wt(),t,u.transform,n,r,o,u):u.transform(n,r,o)}function tv(e,t,n,r,o,i){const s=e+je,u=At(),a=Mt(u,s);return rv(u,s)?Jh(u,Wt(),t,a.transform,n,r,o,i,a):a.transform(n,r,o,i)}function nv(e,t,n){const r=e+je,o=At(),i=Mt(o,r);return rv(o,r)?Zh(o,Wt(),t,i.transform,n,i):i.transform.apply(i,n)}function rv(e,t){return e[1].data[t].pure}class ov extends r.Subject{constructor(e=!1){super(),this.__isAsync=e}emit(e){super.next(e)}subscribe(e,t,n){var o,i,s;let u=e,a=t||(()=>null),c=n;if(e&&"object"==typeof e){const t=e;u=null===(o=t.next)||void 0===o?void 0:o.bind(t),a=null===(i=t.error)||void 0===i?void 0:i.bind(t),c=null===(s=t.complete)||void 0===s?void 0:s.bind(t)}this.__isAsync&&(a=iv(a),u&&(u=iv(u)),c&&(c=iv(c)));const l=super.subscribe({next:u,error:a,complete:c});return e instanceof r.Subscription&&e.add(l),l}}function iv(e){return t=>{setTimeout(e,void 0,t)}}const sv=ov;function uv(){return this._results[Sc()]()}class av{constructor(e=!1){this._emitDistinctChangesOnly=e,this.dirty=!0,this._results=[],this._changesDetected=!1,this._changes=null,this.length=0,this.first=void 0,this.last=void 0;const t=Sc(),n=av.prototype;n[t]||(n[t]=uv)}get changes(){return this._changes||(this._changes=new sv)}get(e){return this._results[e]}map(e){return this._results.map(e)}filter(e){return this._results.filter(e)}find(e){return this._results.find(e)}reduce(e,t){return this._results.reduce(e,t)}forEach(e){this._results.forEach(e)}some(e){return this._results.some(e)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(e,t){const n=this;n.dirty=!1;const r=Mr(e);(this._changesDetected=!function(e,t,n){if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++){let o=e[r],i=t[r];if(n&&(o=n(o),i=n(i)),i!==o)return!1}return!0}(n._results,r,t))&&(n._results=r,n.length=r.length,n.last=r[this.length-1],n.first=r[0])}notifyOnChanges(){!this._changes||!this._changesDetected&&this._emitDistinctChangesOnly||this._changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}Symbol.iterator;class cv{}cv.__NG_ELEMENT_ID__=function(){return fv(Rt(),At())};const lv=cv,dv=class extends lv{constructor(e,t,n){super(),this._declarationLView=e,this._declarationTContainer=t,this.elementRef=n}createEmbeddedView(e){const t=this._declarationTContainer.tViews,n=ku(this._declarationLView,t,e,16,null,t.declTNode,null,null,null,null),r=this._declarationLView[this._declarationTContainer.index];ngDevMode&&ze(r),n[17]=r;const o=this._declarationLView[19];return null!==o&&(n[19]=o.createEmbeddedView(t)),Vu(t,n,e),new bh(n)}};function fv(e,t){return 4&e.type?(ngDevMode&&j(e.tViews,"TView must be allocated"),new dv(t,e,ch(e,t))):null}class pv{}pv.__NG_ELEMENT_ID__=function(){return mv(Rt(),At())};const hv=pv,vv=class extends hv{constructor(e,t,n){super(),this._lContainer=e,this._hostTNode=t,this._hostLView=n}get element(){return ch(this._hostTNode,this._hostLView)}get injector(){return new Yn(this._hostTNode,this._hostLView)}get parentInjector(){const e=$n(this._hostTNode,this._hostLView);if(jn(e)){const t=An(e,this._hostLView),n=Tn(e);ngDevMode&&Xe(t,n);const r=t[1].data[n+8];return new Yn(r,t)}return new Yn(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(e){const t=yv(this._lContainer);return null!==t&&t[e]||null}get length(){return this._lContainer.length-Pe}createEmbeddedView(e,t,n){const r=e.createEmbeddedView(t||{});return this.insert(r,n),r}createComponent(e,t,n,r,o){const i=e&&!wr(e);let s;if(i)ngDevMode&&C("object"!=typeof t,!0,"It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)"),s=t;else{ngDevMode&&(j(De(e),"Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator."),C("number"!=typeof t,!0,"It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead."));const i=t||{};s=i.index,n=i.injector,r=i.projectableNodes,o=i.ngModuleRef}const u=i?e:new Oh(De(e)),a=n||this.parentInjector;if(!o&&null==u.ngModule&&a){const e=a.get(Sh,null);e&&(o=e)}const c=u.create(a,r,void 0,o);return this.insert(c.hostView,s),c}insert(e,t){const n=e._lView,r=n[1];if(ngDevMode&&e.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(ke(n[3])){const t=this.indexOf(e);if(-1!==t)this.detach(t);else{const t=n[3];ngDevMode&&C(ke(t),!0,"An attached view should have its PARENT point to a container.");const r=new vv(t,t[6],t[3]);r.detach(r.indexOf(e))}}const o=this._adjustIndex(t),i=this._lContainer;!function(e,t,n,r){ngDevMode&&Ke(t),ngDevMode&&ze(n);const o=Pe+r,i=n.length;r>0&&(n[o-1][4]=t),r<i-Pe?(t[4]=n[o],Or(n,Pe+r,t)):(n.push(t),t[4]=null),t[3]=n;const s=t[17];null!==s&&n!==s&&function(e,t){ngDevMode&&j(t,"LView required"),ngDevMode&&ze(e);const n=e[9],r=t[3];ngDevMode&&ze(r);const o=r[3][16];ngDevMode&&j(o,"Missing insertedComponentLView");const i=t[16];ngDevMode&&j(i,"Missing declaredComponentLView"),i!==o&&(e[2]=!0),null===n?e[9]=[t]:n.push(t)}(s,t);const u=t[19];null!==u&&u.insertView(e),t[2]|=128}(r,n,i,o);const s=Ms(o,i),u=n[11],a=ps(u,i[7]);return null!==a&&function(e,t,n,r,o,i){r[0]=o,r[6]=t,xs(e,r,n,1,o,i)}(r,i[6],u,n,a,s),e.attachToViewContainerRef(),Or(gv(i),o,e),e}move(e,t){if(ngDevMode&&e.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(e,t)}indexOf(e){const t=yv(this._lContainer);return null!==t?t.indexOf(e):-1}remove(e){const t=this._adjustIndex(e,-1),n=is(this._lContainer,t);n&&(xr(gv(this._lContainer),t),ss(n[1],n))}detach(e){const t=this._adjustIndex(e,-1),n=is(this._lContainer,t);return n&&null!=xr(gv(this._lContainer),t)?new bh(n):null}_adjustIndex(e,t=0){return null==e?this.length+t:(ngDevMode&&(I(e,-1,`ViewRef index must be positive, got ${e}`),S(e,this.length+1+t,"index")),e)}};function yv(e){return e[8]}function gv(e){return e[8]||(e[8]=[])}function mv(e,t){let n;ngDevMode&&xn(e,15);const r=t[e.index];if(ke(r))n=r;else{let o;if(8&e.type)o=mt(r);else{const n=t[11];ngDevMode&&ngDevMode.rendererCreateComment++,o=n.createComment(ngDevMode?"container":"");const r=_t(e,t);ls(n,ps(n,r),o,function(e,t){return yt(e)?e.nextSibling(t):t.nextSibling}(n,r),!1)}t[e.index]=n=pa(r,t,o,e),ga(t,n)}return new vv(n,e,t)}class bv{constructor(e){this.queryList=e,this.matches=null}clone(){return new bv(this.queryList)}setDirty(){this.queryList.setDirty()}}class _v{constructor(e=[]){this.queries=e}createEmbeddedView(e){const t=e.queries;if(null!==t){const n=null!==e.contentQueries?e.contentQueries[0]:t.length,r=[];for(let e=0;e<n;e++){const n=t.getByIndex(e),o=this.queries[n.indexInDeclarationView];r.push(o.clone())}return new _v(r)}return null}insertView(e){this.dirtyQueriesWithMatches(e)}detachView(e){this.dirtyQueriesWithMatches(e)}dirtyQueriesWithMatches(e){for(let t=0;t<this.queries.length;t++)null!==kv(e,t).matches&&this.queries[t].setDirty()}}class wv{constructor(e,t,n=null){this.predicate=e,this.flags=t,this.read=n}}class Mv{constructor(e=[]){this.queries=e}elementStart(e,t){ngDevMode&&Ge(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].elementStart(e,t)}elementEnd(e){for(let t=0;t<this.queries.length;t++)this.queries[t].elementEnd(e)}embeddedTView(e){let t=null;for(let n=0;n<this.length;n++){const r=null!==t?t.length:0,o=this.getByIndex(n).embeddedTView(e,r);o&&(o.indexInDeclarationView=n,null!==t?t.push(o):t=[o])}return null!==t?new Mv(t):null}template(e,t){ngDevMode&&Ge(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].template(e,t)}getByIndex(e){return ngDevMode&&k(this.queries,e),this.queries[e]}get length(){return this.queries.length}track(e){this.queries.push(e)}}class Cv{constructor(e,t=-1){this.metadata=e,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=t}elementStart(e,t){this.isApplyingToNode(t)&&this.matchTNode(e,t)}elementEnd(e){this._declarationNodeIndex===e.index&&(this._appliesToNextNode=!1)}template(e,t){this.elementStart(e,t)}embeddedTView(e,t){return this.isApplyingToNode(e)?(this.crossesNgTemplate=!0,this.addMatch(-e.index,t),new Cv(this.metadata)):null}isApplyingToNode(e){if(this._appliesToNextNode&&1!=(1&this.metadata.flags)){const t=this._declarationNodeIndex;let n=e.parent;for(;null!==n&&8&n.type&&n.index!==t;)n=n.parent;return t===(null!==n?n.index:-1)}return this._appliesToNextNode}matchTNode(e,t){const n=this.metadata.predicate;if(Array.isArray(n))for(let r=0;r<n.length;r++){const o=n[r];this.matchTNodeWithReadOption(e,t,Ov(t,o)),this.matchTNodeWithReadOption(e,t,Gn(t,e,o,!1,!1))}else n===cv?4&t.type&&this.matchTNodeWithReadOption(e,t,-1):this.matchTNodeWithReadOption(e,t,Gn(t,e,n,!1,!1))}matchTNodeWithReadOption(e,t,n){if(null!==n){const r=this.metadata.read;if(null!==r)if(r===lh||r===pv||r===cv&&4&t.type)this.addMatch(t.index,-2);else{const n=Gn(t,e,r,!1,!1);null!==n&&this.addMatch(t.index,n)}else this.addMatch(t.index,n)}}addMatch(e,t){null===this.matches?this.matches=[e,t]:this.matches.push(e,t)}}function Ov(e,t){const n=e.localNames;if(null!==n)for(let e=0;e<n.length;e+=2)if(n[e]===t)return n[e+1];return null}function xv(e,t,n,r){return-1===n?function(e,t){return 11&e.type?ch(e,t):4&e.type?fv(e,t):null}(t,e):-2===n?function(e,t,n){return n===lh?ch(t,e):n===cv?fv(t,e):n===pv?(ngDevMode&&xn(t,15),mv(t,e)):void(ngDevMode&&T(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${u(n)}.`))}(e,t,r):Jn(e,e[1],n,t)}function Dv(e,t,n,r){const o=t[19].queries[r];if(null===o.matches){const r=e.data,i=n.matches,s=[];for(let e=0;e<i.length;e+=2){const o=i[e];if(o<0)s.push(null);else{ngDevMode&&k(r,o);const u=r[o];s.push(xv(t,u,i[e+1],n.metadata.read))}}o.matches=s}return o.matches}function Sv(e,t,n,r){const o=e.queries.getByIndex(n),i=o.matches;if(null!==i){const s=Dv(e,t,o,n);for(let e=0;e<i.length;e+=2){const n=i[e];if(n>0)r.push(s[e/2]);else{const o=i[e+1],s=t[-n];ngDevMode&&ze(s);for(let e=Pe;e<s.length;e++){const t=s[e];t[17]===t[3]&&Sv(t[1],t,o,r)}if(null!==s[9]){const e=s[9];for(let t=0;t<e.length;t++){const n=e[t];Sv(n[1],n,o,r)}}}}}return r}function Ev(e){const t=At(),n=kt(),r=Xt();en(r+1);const o=kv(n,r);if(e.dirty&&Ot(t)===(2==(2&o.metadata.flags))){if(null===o.matches)e.reset([]);else{const i=o.crossesNgTemplate?Sv(n,t,r,[]):Dv(n,t,o,r);e.reset(i,dh),e.notifyOnChanges()}return!0}return!1}function Iv(e,t,n){ngDevMode&&_(t,"Expecting flags");const r=kt();r.firstCreatePass&&(Av(r,new wv(e,t,n),-1),2==(2&t)&&(r.staticViewQueries=!0)),Tv(r,At(),t)}function Pv(e,t,n,r){ngDevMode&&_(n,"Expecting flags");const o=kt();if(o.firstCreatePass){const i=Rt();Av(o,new wv(t,n,r),i.index),function(e,t){const n=e.contentQueries||(e.contentQueries=[]);t!==(n.length?n[n.length-1]:-1)&&n.push(e.queries.length-1,t)}(o,e),2==(2&n)&&(o.staticContentQueries=!0)}Tv(o,At(),n)}function jv(){return e=At(),t=Xt(),ngDevMode&&j(e[19],"LQueries should be defined when trying to load a query"),ngDevMode&&k(e[19].queries,t),e[19].queries[t].queryList;var e,t}function Tv(e,t,n){const r=new av(4==(4&n));Gu(e,t,r,r.destroy),null===t[19]&&(t[19]=new _v),t[19].queries.push(new bv(r))}function Av(e,t,n){null===e.queries&&(e.queries=new Mv),e.queries.track(new Cv(t,n))}function kv(e,t){return ngDevMode&&j(e.queries,"TQueries must be defined to retrieve a TQuery"),e.queries.getByIndex(t)}function Nv(e,t){return fv(e,t)}const Rv={ɵɵattribute:Fc,ɵɵattributeInterpolate1:Kc,ɵɵattributeInterpolate2:Gc,ɵɵattributeInterpolate3:Jc,ɵɵattributeInterpolate4:Zc,ɵɵattributeInterpolate5:Qc,ɵɵattributeInterpolate6:Yc,ɵɵattributeInterpolate7:Xc,ɵɵattributeInterpolate8:el,ɵɵattributeInterpolateV:tl,ɵɵdefineComponent:ye,ɵɵdefineDirective:Oe,ɵɵdefineInjectable:R,ɵɵdefineInjector:V,ɵɵdefineNgModule:we,ɵɵdefinePipe:xe,ɵɵdirectiveInject:jl,ɵɵgetInheritedFactory:Xn,ɵɵinject:Wr,ɵɵinjectAttribute:tr,ɵɵinvalidFactory:Tl,ɵɵinvalidFactoryDep:zr,ɵɵtemplateRefExtractor:Nv,ɵɵNgOnChangesFeature:nt,ɵɵProvidersFeature:oh,ɵɵCopyDefinitionFeature:xc,ɵɵInheritDefinitionFeature:mc,ɵɵnextContext:Zl,ɵɵnamespaceHTML:vn,ɵɵnamespaceMathML:hn,ɵɵnamespaceSVG:pn,ɵɵenableBindings:jt,ɵɵdisableBindings:Tt,ɵɵelementStart:Nl,ɵɵelementEnd:Rl,ɵɵelement:Fl,ɵɵelementContainerStart:Vl,ɵɵelementContainerEnd:Ll,ɵɵelementContainer:$l,ɵɵpureFunction0:Nh,ɵɵpureFunction1:Rh,ɵɵpureFunction2:Fh,ɵɵpureFunction3:Vh,ɵɵpureFunction4:Lh,ɵɵpureFunction5:$h,ɵɵpureFunction6:Hh,ɵɵpureFunction7:Bh,ɵɵpureFunction8:Uh,ɵɵpureFunctionV:Wh,ɵɵgetCurrentView:Hl,ɵɵrestoreView:Nt,ɵɵlistener:zl,ɵɵprojection:Xl,ɵɵsyntheticHostProperty:xf,ɵɵsyntheticHostListener:ql,ɵɵpipeBind1:Yh,ɵɵpipeBind2:Xh,ɵɵpipeBind3:ev,ɵɵpipeBind4:tv,ɵɵpipeBindV:nv,ɵɵprojectionDef:Yl,ɵɵhostProperty:Of,ɵɵproperty:Al,ɵɵpropertyInterpolate:ed,ɵɵpropertyInterpolate1:td,ɵɵpropertyInterpolate2:nd,ɵɵpropertyInterpolate3:rd,ɵɵpropertyInterpolate4:od,ɵɵpropertyInterpolate5:id,ɵɵpropertyInterpolate6:sd,ɵɵpropertyInterpolate7:ud,ɵɵpropertyInterpolate8:ad,ɵɵpropertyInterpolateV:cd,ɵɵpipe:Qh,ɵɵqueryRefresh:Ev,ɵɵviewQuery:Iv,ɵɵloadQuery:jv,ɵɵcontentQuery:Pv,ɵɵreference:ol,ɵɵclassMap:Dd,ɵɵclassMapInterpolate1:Zd,ɵɵclassMapInterpolate2:Qd,ɵɵclassMapInterpolate3:Yd,ɵɵclassMapInterpolate4:Xd,ɵɵclassMapInterpolate5:ef,ɵɵclassMapInterpolate6:tf,ɵɵclassMapInterpolate7:nf,ɵɵclassMapInterpolate8:rf,ɵɵclassMapInterpolateV:of,ɵɵstyleMap:Od,ɵɵstyleMapInterpolate1:sf,ɵɵstyleMapInterpolate2:uf,ɵɵstyleMapInterpolate3:af,ɵɵstyleMapInterpolate4:cf,ɵɵstyleMapInterpolate5:lf,ɵɵstyleMapInterpolate6:df,ɵɵstyleMapInterpolate7:ff,ɵɵstyleMapInterpolate8:pf,ɵɵstyleMapInterpolateV:hf,ɵɵstyleProp:Md,ɵɵstylePropInterpolate1:vf,ɵɵstylePropInterpolate2:yf,ɵɵstylePropInterpolate3:gf,ɵɵstylePropInterpolate4:mf,ɵɵstylePropInterpolate5:bf,ɵɵstylePropInterpolate6:_f,ɵɵstylePropInterpolate7:wf,ɵɵstylePropInterpolate8:Mf,ɵɵstylePropInterpolateV:Cf,ɵɵclassProp:Cd,ɵɵadvance:Bs,ɵɵtemplate:nl,ɵɵtext:Ld,ɵɵtextInterpolate:$d,ɵɵtextInterpolate1:Hd,ɵɵtextInterpolate2:Bd,ɵɵtextInterpolate3:Ud,ɵɵtextInterpolate4:Wd,ɵɵtextInterpolate5:zd,ɵɵtextInterpolate6:qd,ɵɵtextInterpolate7:Kd,ɵɵtextInterpolate8:Gd,ɵɵtextInterpolateV:Jd,ɵɵi18n:qp,ɵɵi18nAttributes:Kp,ɵɵi18nExp:Gp,ɵɵi18nStart:Wp,ɵɵi18nEnd:zp,ɵɵi18nApply:Jp,ɵɵi18nPostprocess:Zp,ɵɵresolveWindow:Vi,ɵɵresolveDocument:Li,ɵɵresolveBody:$i,ɵɵsetComponentScope:ge,ɵɵsetNgModuleScope:Me,ɵɵsanitizeHtml:ci,ɵɵsanitizeStyle:li,ɵɵsanitizeResourceUrl:fi,ɵɵsanitizeScript:pi,ɵɵsanitizeUrl:di,ɵɵsanitizeUrlOrResourceUrl:yi,ɵɵtrustConstantHtml:hi,ɵɵtrustConstantResourceUrl:vi,forwardRef:l,resolveForwardRef:d};let Fv=null;function Vv(){Fv=null}const Lv=[];let $v=!1;function Hv(){if(!$v){$v=!0;try{for(let e=Lv.length-1;e>=0;e--){const{moduleType:t,ngModule:n}=Lv[e];n.declarations&&n.declarations.every(Bv)&&(Lv.splice(e,1),Yv(t,n))}}finally{$v=!1}}}function Bv(e){return Array.isArray(e)?e.every(Bv):!!d(e)}function Uv(e,t={}){Wv(e,t),function(e,t){Lv.push({moduleType:e,ngModule:t})}(e,t)}function Wv(e,t,n=!1){ngDevMode&&j(e,"Required value moduleType"),ngDevMode&&j(t,"Required value ngModule");const r=Mr(t.declarations||ae);let o=null;Object.defineProperty(e,fe,{configurable:!0,get:()=>{if(null===o){if(ngDevMode&&t.imports&&t.imports.indexOf(e)>-1)throw new Error(`'${y(e)}' module can't import itself`);const n=br({usage:0,kind:"NgModule",type:e});o=n.compileNgModule(Rv,`ng:///${e.name}/ɵmod.js`,{type:e,bootstrap:Mr(t.bootstrap||ae).map(d),declarations:r.map(d),imports:Mr(t.imports||ae).map(d).map(ty),exports:Mr(t.exports||ae).map(d).map(ty),schemas:t.schemas?Mr(t.schemas):null,id:t.id||null}),o.schemas||(o.schemas=[])}return o}});let i=null;Object.defineProperty(e,pe,{get:()=>{if(null===i){const t=br({usage:0,kind:"NgModule",type:e});i=t.compileFactory(Rv,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,deps:no(e),target:t.FactoryTarget.NgModule,typeArgumentCount:0})}return i},configurable:!!ngDevMode});let s=null;Object.defineProperty(e,U,{get:()=>{if(null===s){ngDevMode&&zv(e,n);const r={name:e.name,type:e,providers:t.providers||ae,imports:[(t.imports||ae).map(d),(t.exports||ae).map(d)]},o=br({usage:0,kind:"NgModule",type:e});s=o.compileInjector(Rv,`ng:///${e.name}/ɵinj.js`,r)}return s},configurable:!!ngDevMode})}function zv(e,t,n){if(Jv.get(e))return;let r;if(Jv.set(e,!0),e=d(e),n){if(r=Ie(e),!r)throw new Error(`Unexpected value '${e.name}' imported by the module '${n.name}'. Please add an @NgModule annotation.`)}else r=Ie(e,!0);const o=[],i=Bi(r.declarations),s=Bi(r.imports);Mr(s).map(qv).forEach((t=>{f(t,e),zv(t,!1,e)}));const u=Bi(r.exports);i.forEach((function(t){De(t=d(t))||Se(t)||Ee(t)||o.push(`Unexpected value '${y(t)}' declared by the module '${y(e)}'. Please add a @Pipe/@Directive/@Component annotation.`)})),i.forEach((function(e){const t=Se(e=d(e));!De(e)&&t&&0==t.selectors.length&&o.push(`Directive ${y(e)} has no selector, please add it!`)}));const a=[...i.map(d),...Mr(s.map(Qv)).map(d)];u.forEach((function(t){const n=(De(t=d(t))?"component":Se(t)&&"directive")||Ee(t)&&"pipe";n&&-1===a.lastIndexOf(t)&&o.push(`Can't export ${n} ${y(t)} from ${y(e)} as it was neither declared nor imported!`)})),i.forEach((n=>function(t,n){t=d(t);const r=Gv.get(t);if(r&&r!==e){if(!n){const n=[r,e].map(y).sort();o.push(`Type ${y(t)} is part of the declarations of 2 modules: ${n[0]} and ${n[1]}! Please consider moving ${y(t)} to a higher module that imports ${n[0]} and ${n[1]}. You can also create a new NgModule that exports and includes ${y(t)} then import that NgModule in ${n[0]} and ${n[1]}.`)}}else Gv.set(t,e)}(n,t))),i.forEach((function(e){if(De(e=d(e))){const t=Kv(e,"Component");t&&t.entryComponents&&Cr(t.entryComponents,l)}}));const c=Kv(e,"NgModule");if(c&&(c.imports&&Mr(c.imports).map(qv).forEach((t=>{f(t,e),zv(t,!1,e)})),c.bootstrap&&Cr(c.bootstrap,(function(e){De(e=d(e))||o.push(`${y(e)} cannot be used as an entry component.`)})),c.bootstrap&&Cr(c.bootstrap,l),c.entryComponents&&Cr(c.entryComponents,l)),o.length)throw new Error(o.join("\n"));function l(e){e=d(e),Gv.get(e)||o.push(`Component ${y(e)} is not part of any NgModule or the module has not been imported into your module.`)}function f(e,t){if(De(e=d(e))||Se(e))throw new Error(`Unexpected directive '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`);if(Ee(e))throw new Error(`Unexpected pipe '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`)}}function qv(e){return(e=d(e)).ngModule||e}function Kv(e,t){let n=null;return r(e.__annotations__),r(e.decorators),n;function r(e){e&&e.forEach(o)}function o(e){n||(Object.getPrototypeOf(e).ngMetadataName==t?n=e:e.type&&Object.getPrototypeOf(e.type).ngMetadataName==t&&(n=e.args[0]))}}let Gv=new WeakMap,Jv=new WeakMap;function Zv(){Gv=new WeakMap,Jv=new WeakMap,Lv.length=0}function Qv(e){return[...Mr(Bi(Ie(e=d(e),!0).exports).map((e=>Ie(e)?(zv(e,!1),Qv(e)):e)))]}function Yv(e,t){const n=Mr(t.declarations||ae),r=ey(e);n.forEach((t=>{t.hasOwnProperty(ce)?Xv(De(t),r):t.hasOwnProperty(le)||t.hasOwnProperty(de)||(t.ngSelectorScope=e)}))}function Xv(e,t){e.directiveDefs=()=>Array.from(t.compilation.directives).map((e=>e.hasOwnProperty(ce)?De(e):Se(e))).filter((e=>!!e)),e.pipeDefs=()=>Array.from(t.compilation.pipes).map((e=>Ee(e))),e.schemas=t.schemas,e.tView=null}function ey(e){if(!ny(e))throw new Error(`${e.name} does not have a module def (ɵmod property)`);const t=Ie(e);if(null!==t.transitiveCompileScopes)return t.transitiveCompileScopes;const n={schemas:t.schemas||null,compilation:{directives:new Set,pipes:new Set},exported:{directives:new Set,pipes:new Set}};return Bi(t.imports).forEach((e=>{const t=e;if(!ny(t))throw new Error(`Importing ${t.name} which does not have a ɵmod property`);const r=ey(t);r.exported.directives.forEach((e=>n.compilation.directives.add(e))),r.exported.pipes.forEach((e=>n.compilation.pipes.add(e)))})),Bi(t.declarations).forEach((e=>{Ee(e)?n.compilation.pipes.add(e):n.compilation.directives.add(e)})),Bi(t.exports).forEach((e=>{const t=e;if(ny(t)){const e=ey(t);e.exported.directives.forEach((e=>{n.compilation.directives.add(e),n.exported.directives.add(e)})),e.exported.pipes.forEach((e=>{n.compilation.pipes.add(e),n.exported.pipes.add(e)}))}else Ee(t)?n.exported.pipes.add(t):n.exported.directives.add(t)})),t.transitiveCompileScopes=n,n}function ty(e){return function(e){return void 0!==e.ngModule}(e)?e.ngModule:e}function ny(e){return!!Ie(e)}let ry=0;function oy(e,t){("undefined"==typeof ngDevMode||ngDevMode)&&se();let n=null;!function(e,t){uo(t)&&(io.set(e,t),so.add(e))}(e,t),uy(e,t),Object.defineProperty(e,ce,{get:()=>{if(null===n){const r=br({usage:0,kind:"component",type:e});if(uo(t)){const n=[`Component '${e.name}' is not resolved:`];throw t.templateUrl&&n.push(` - templateUrl: ${t.templateUrl}`),t.styleUrls&&t.styleUrls.length&&n.push(` - styleUrls: ${JSON.stringify(t.styleUrls)}`),n.push("Did you run and wait for 'resolveComponentResources()'?"),new Error(n.join("\n"))}const o=Fv;let i=t.preserveWhitespaces;void 0===i&&(i=null!==o&&void 0!==o.preserveWhitespaces&&o.preserveWhitespaces);let s=t.encapsulation;void 0===s&&(s=null!==o&&void 0!==o.defaultEncapsulation?o.defaultEncapsulation:X.Emulated);const u=t.templateUrl||`ng:///${e.name}/template.html`,a=Object.assign(Object.assign({},cy(e,t)),{typeSourceSpan:r.createParseSourceSpan("Component",e.name,u),template:t.template||"",preserveWhitespaces:i,styles:t.styles||ae,animations:t.animations,directives:[],changeDetection:t.changeDetection,pipes:new Map,encapsulation:s,interpolation:t.interpolation,viewProviders:t.viewProviders||null});ry++;try{a.usesInheritance&&ly(e),n=r.compileComponent(Rv,u,a)}finally{ry--}if(0===ry&&Hv(),void 0!==e.ngSelectorScope){const t=ey(e.ngSelectorScope);Xv(n,t)}}return n},configurable:!!ngDevMode})}function iy(e,t){let n=null;uy(e,t||{}),Object.defineProperty(e,le,{get:()=>{if(null===n){const r=sy(e,t||{}),o=br({usage:0,kind:"directive",type:e});n=o.compileDirective(Rv,r.sourceMapUrl,r.metadata)}return n},configurable:!!ngDevMode})}function sy(e,t){const n=e&&e.name,r=`ng:///${n}/ɵdir.js`,o=br({usage:0,kind:"directive",type:e}),i=cy(e,t);return i.typeSourceSpan=o.createParseSourceSpan("Directive",n,r),i.usesInheritance&&ly(e),{metadata:i,sourceMapUrl:r}}function uy(e,t){let n=null;Object.defineProperty(e,pe,{get:()=>{if(null===n){const r=sy(e,t),o=br({usage:0,kind:"directive",type:e});n=o.compileFactory(Rv,`ng:///${e.name}/ɵfac.js`,{name:r.metadata.name,type:r.metadata.type,typeArgumentCount:0,deps:no(e),target:o.FactoryTarget.Directive})}return n},configurable:!!ngDevMode})}function ay(e){return Object.getPrototypeOf(e.prototype)===Object.prototype}function cy(e,t){const n=to(),r=n.ownPropMetadata(e);return{name:e.name,type:e,selector:void 0!==t.selector?t.selector:null,host:t.host||ue,propMetadata:r,inputs:t.inputs||ae,outputs:t.outputs||ae,queries:fy(e,r,py),lifecycle:{usesOnChanges:n.hasLifecycleHook(e,"ngOnChanges")},typeSourceSpan:null,usesInheritance:!ay(e),exportAs:(o=t.exportAs,void 0===o?null:yy(o)),providers:t.providers||null,viewQueries:fy(e,r,hy)};var o}function ly(e){const t=Object.prototype;let n=Object.getPrototypeOf(e.prototype).constructor;for(;n&&n!==t;)Se(n)||De(n)||!my(n)||iy(n,null),n=Object.getPrototypeOf(n)}function dy(e,t){return{propertyName:e,predicate:(n=t.selector,"string"==typeof n?yy(n):d(n)),descendants:t.descendants,first:t.first,read:t.read?t.read:null,static:!!t.static,emitDistinctChangesOnly:!!t.emitDistinctChangesOnly};var n}function fy(e,t,n){const r=[];for(const o in t)if(t.hasOwnProperty(o)){const i=t[o];i.forEach((t=>{if(n(t)){if(!t.selector)throw new Error(`Can't construct a query for the property "${o}" of "${y(e)}" since the query selector wasn't defined.`);if(i.some(vy))throw new Error("Cannot combine @Input decorators with query decorators");r.push(dy(o,t))}}))}return r}function py(e){const t=e.ngMetadataName;return"ContentChild"===t||"ContentChildren"===t}function hy(e){const t=e.ngMetadataName;return"ViewChild"===t||"ViewChildren"===t}function vy(e){return"Input"===e.ngMetadataName}function yy(e){return e.split(",").map((e=>e.trim()))}const gy=["ngOnChanges","ngOnInit","ngOnDestroy","ngDoCheck","ngAfterViewInit","ngAfterViewChecked","ngAfterContentInit","ngAfterContentChecked"];function my(e){const t=to();if(gy.some((n=>t.hasLifecycleHook(e,n))))return!0;const n=t.propMetadata(e);for(const e in n){const t=n[e];for(let e=0;e<t.length;e++){const n=t[e],r=n.ngMetadataName;if(vy(n)||py(n)||hy(n)||"Output"===r||"HostBinding"===r||"HostListener"===r)return!0}}return!1}function by(e,t){let n=null,r=null;Object.defineProperty(e,pe,{get:()=>{if(null===r){const n=_y(e,t),o=br({usage:0,kind:"pipe",type:n.type});r=o.compileFactory(Rv,`ng:///${n.name}/ɵfac.js`,{name:n.name,type:n.type,typeArgumentCount:0,deps:no(e),target:o.FactoryTarget.Pipe})}return r},configurable:!!ngDevMode}),Object.defineProperty(e,de,{get:()=>{if(null===n){const r=_y(e,t),o=br({usage:0,kind:"pipe",type:r.type});n=o.compilePipe(Rv,`ng:///${r.name}/ɵpipe.js`,r)}return n},configurable:!!ngDevMode})}function _y(e,t){return{type:e,name:e.name,pipeName:t.name,pure:void 0===t.pure||t.pure}}const wy=ir("Directive",((e={})=>e),void 0,void 0,((e,t)=>iy(e,t))),My=ir("Component",((e={})=>Object.assign({changeDetection:Q.Default},e)),wy,void 0,((e,t)=>oy(e,t))),Cy=ir("Pipe",(e=>Object.assign({pure:!0},e)),void 0,void 0,((e,t)=>by(e,t))),Oy=ar("Input",(e=>({bindingPropertyName:e}))),xy=ar("Output",(e=>({bindingPropertyName:e}))),Dy=ar("HostBinding",(e=>({hostPropertyName:e}))),Sy=ar("HostListener",((e,t)=>({eventName:e,args:t}))),Ey=ir("NgModule",(e=>e),void 0,void 0,((e,t)=>Uv(e,t)));function Iy(...e){}const Py=new lr("Application Initializer");class jy{constructor(e){this.appInits=e,this.resolve=Iy,this.reject=Iy,this.initialized=!1,this.done=!1,this.donePromise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}runInitializers(){if(this.initialized)return;const e=[],t=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let t=0;t<this.appInits.length;t++){const n=this.appInits[t]();if(Bl(n))e.push(n);else if(Wl(n)){const t=new Promise(((e,t)=>{n.subscribe({complete:e,error:t})}));e.push(t)}}Promise.all(e).then((()=>{t()})).catch((e=>{this.reject(e)})),0===e.length&&t(),this.initialized=!0}}jy.ɵfac=function(e){return new(e||jy)(Wr(Py,8))},jy.ɵprov=R({token:jy,factory:jy.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Dh(jy,[{type:cl}],(function(){return[{type:void 0,decorators:[{type:Jr,args:[Py]},{type:Zr}]}]}),null);const Ty=new lr("AppId"),Ay={provide:Ty,useFactory:function(){return`${ky()}${ky()}${ky()}`},deps:[]};function ky(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const Ny=new lr("Platform Initializer"),Ry=new lr("Platform ID"),Fy=new lr("appBootstrapListener"),Vy=new lr("Application Packages Root URL");class Ly{log(e){console.log(e)}warn(e){console.warn(e)}}Ly.ɵfac=function(e){return new(e||Ly)},Ly.ɵprov=R({token:Ly,factory:Ly.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Dh(Ly,[{type:cl}],null,null);const $y=new lr("LocaleId"),Hy=new lr("DefaultCurrencyCode"),By=new lr("Translations"),Uy=new lr("TranslationsFormat");var Wy;!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Ignore=2]="Ignore"}(Wy||(Wy={}));class zy{constructor(e,t){this.ngModuleFactory=e,this.componentFactories=t}}class qy{compileModuleSync(e){return new kh(e)}compileModuleAsync(e){return Promise.resolve(this.compileModuleSync(e))}compileModuleAndAllComponentsSync(e){const t=this.compileModuleSync(e),n=Bi(Ie(e).declarations).reduce(((e,t)=>{const n=De(t);return n&&e.push(new Oh(n)),e}),[]);return new zy(t,n)}compileModuleAndAllComponentsAsync(e){return Promise.resolve(this.compileModuleAndAllComponentsSync(e))}clearCache(){}clearCacheFor(e){}getModuleId(e){}}qy.ɵfac=function(e){return new(e||qy)},qy.ɵprov=R({token:qy,factory:qy.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Dh(qy,[{type:cl}],null,null);const Ky=new lr("compilerOptions");class Gy{}const Jy=Promise.resolve(0);function Zy(e){"undefined"==typeof Zone?Jy.then((()=>{e&&e.apply(null,null)})):Zone.current.scheduleMicroTask("scheduleMicrotask",e)}class Qy{constructor({enableLongStackTrace:e=!1,shouldCoalesceEventChangeDetection:t=!1,shouldCoalesceRunChangeDetection:n=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new sv(!1),this.onMicrotaskEmpty=new sv(!1),this.onStable=new sv(!1),this.onError=new sv(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched();const r=this;r._nesting=0,r._outer=r._inner=Zone.current,Zone.TaskTrackingZoneSpec&&(r._inner=r._inner.fork(new Zone.TaskTrackingZoneSpec)),e&&Zone.longStackTraceZoneSpec&&(r._inner=r._inner.fork(Zone.longStackTraceZoneSpec)),r.shouldCoalesceEventChangeDetection=!n&&t,r.shouldCoalesceRunChangeDetection=n,r.lastRequestAnimationFrameId=-1,r.nativeRequestAnimationFrame=function(){let e=ie.requestAnimationFrame,t=ie.cancelAnimationFrame;if("undefined"!=typeof Zone&&e&&t){const n=e[Zone.__symbol__("OriginalDelegate")];n&&(e=n);const r=t[Zone.__symbol__("OriginalDelegate")];r&&(t=r)}return{nativeRequestAnimationFrame:e,nativeCancelAnimationFrame:t}}().nativeRequestAnimationFrame,function(e){const t=()=>{!function(e){e.isCheckStableRunning||-1!==e.lastRequestAnimationFrameId||(e.lastRequestAnimationFrameId=e.nativeRequestAnimationFrame.call(ie,(()=>{e.fakeTopEventTask||(e.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",(()=>{e.lastRequestAnimationFrameId=-1,eg(e),e.isCheckStableRunning=!0,Xy(e),e.isCheckStableRunning=!1}),void 0,(()=>{}),(()=>{}))),e.fakeTopEventTask.invoke()})),eg(e))}(e)};e._inner=e._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:(n,r,o,i,s,u)=>{try{return tg(e),n.invokeTask(o,i,s,u)}finally{(e.shouldCoalesceEventChangeDetection&&"eventTask"===i.type||e.shouldCoalesceRunChangeDetection)&&t(),ng(e)}},onInvoke:(n,r,o,i,s,u,a)=>{try{return tg(e),n.invoke(o,i,s,u,a)}finally{e.shouldCoalesceRunChangeDetection&&t(),ng(e)}},onHasTask:(t,n,r,o)=>{t.hasTask(r,o),n===r&&("microTask"==o.change?(e._hasPendingMicrotasks=o.microTask,eg(e),Xy(e)):"macroTask"==o.change&&(e.hasPendingMacrotasks=o.macroTask))},onHandleError:(t,n,r,o)=>(t.handleError(r,o),e.runOutsideAngular((()=>e.onError.emit(o))),!1)})}(r)}static isInAngularZone(){return"undefined"!=typeof Zone&&!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!Qy.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(Qy.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(e,t,n){return this._inner.run(e,t,n)}runTask(e,t,n,r){const o=this._inner,i=o.scheduleEventTask("NgZoneEvent: "+r,e,Yy,Iy,Iy);try{return o.runTask(i,t,n)}finally{o.cancelTask(i)}}runGuarded(e,t,n){return this._inner.runGuarded(e,t,n)}runOutsideAngular(e){return this._outer.run(e)}}const Yy={};function Xy(e){if(0==e._nesting&&!e.hasPendingMicrotasks&&!e.isStable)try{e._nesting++,e.onMicrotaskEmpty.emit(null)}finally{if(e._nesting--,!e.hasPendingMicrotasks)try{e.runOutsideAngular((()=>e.onStable.emit(null)))}finally{e.isStable=!0}}}function eg(e){e._hasPendingMicrotasks||(e.shouldCoalesceEventChangeDetection||e.shouldCoalesceRunChangeDetection)&&-1!==e.lastRequestAnimationFrameId?e.hasPendingMicrotasks=!0:e.hasPendingMicrotasks=!1}function tg(e){e._nesting++,e.isStable&&(e.isStable=!1,e.onUnstable.emit(null))}function ng(e){e._nesting--,Xy(e)}class rg{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new sv,this.onMicrotaskEmpty=new sv,this.onStable=new sv,this.onError=new sv}run(e,t,n){return e.apply(t,n)}runGuarded(e,t,n){return e.apply(t,n)}runOutsideAngular(e){return e()}runTask(e,t,n,r){return e.apply(t,n)}}class og{constructor(e){this._ngZone=e,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),e.run((()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")}))}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular((()=>{this._ngZone.onStable.subscribe({next:()=>{Qy.assertNotInAngularZone(),Zy((()=>{this._isZoneStable=!0,this._runCallbacksIfReady()}))}})}))}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())Zy((()=>{for(;0!==this._callbacks.length;){let e=this._callbacks.pop();clearTimeout(e.timeoutId),e.doneCb(this._didWork)}this._didWork=!1}));else{let e=this.getPendingTasks();this._callbacks=this._callbacks.filter((t=>!t.updateCb||!t.updateCb(e)||(clearTimeout(t.timeoutId),!1))),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map((e=>({source:e.source,creationLocation:e.creationLocation,data:e.data}))):[]}addCallback(e,t,n){let r=-1;t&&t>0&&(r=setTimeout((()=>{this._callbacks=this._callbacks.filter((e=>e.timeoutId!==r)),e(this._didWork,this.getPendingTasks())}),t)),this._callbacks.push({doneCb:e,timeoutId:r,updateCb:n})}whenStable(e,t,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');this.addCallback(e,t,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(e,t,n){return[]}}og.ɵfac=function(e){return new(e||og)(Wr(Qy))},og.ɵprov=R({token:og,factory:og.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Dh(og,[{type:cl}],(function(){return[{type:Qy}]}),null);class ig{constructor(){this._applications=new Map,ag.addToWindow(this)}registerApplication(e,t){this._applications.set(e,t)}unregisterApplication(e){this._applications.delete(e)}unregisterAllApplications(){this._applications.clear()}getTestability(e){return this._applications.get(e)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(e,t=!0){return ag.findTestabilityInTree(this,e,t)}}function sg(e){ag=e}ig.ɵfac=function(e){return new(e||ig)},ig.ɵprov=R({token:ig,factory:ig.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Dh(ig,[{type:cl}],(function(){return[]}),null);let ug,ag=new class{addToWindow(e){}findTestabilityInTree(e,t,n){return null}};function cg(e,t,n){ngDevMode&&function(e,t="Type passed in is not NgModuleType, it does not have 'ɵmod' property."){Ie(e)||T(t)}(n);const r=new kh(n);if("undefined"!=typeof ngJitMode&&!ngJitMode)return Promise.resolve(r);const o=e.get(Ky,[]).concat(t);if(function(e){if(null!==Fv){if(e.defaultEncapsulation!==Fv.defaultEncapsulation)return void(ngDevMode&&console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set."));if(e.preserveWhitespaces!==Fv.preserveWhitespaces)return void(ngDevMode&&console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set."))}Fv=e}({defaultEncapsulation:Mg(o.map((e=>e.defaultEncapsulation))),preserveWhitespaces:Mg(o.map((e=>e.preserveWhitespaces)))}),0===io.size)return Promise.resolve(r);const i=function(e){const t=[];return e.forEach((e=>e&&t.push(...e))),t}(o.map((e=>e.providers)));if(0===i.length)return Promise.resolve(r);const s=br({usage:0,kind:"NgModule",type:n}),u=Ja.create({providers:i}).get(s.ResourceLoader);return oo((e=>Promise.resolve(u.get(e)))).then((()=>r))}function lg(e){return e.isBoundToModule}const dg=new lr("AllowMultipleToken");class fg{constructor(e,t){this.name=e,this.token=t}}function pg(e){if(ug&&!ug.destroyed&&!ug.injector.get(dg,!1)){const e="undefined"==typeof ngDevMode||ngDevMode?"There can be only one platform. Destroy the previous one to create a new one.":"";throw new p(400,e)}ngDevMode&&cc(),ug=e.get(mg);const t=e.get(Ny,null);return t&&t.forEach((e=>e())),ug}function hg(e,t,n=[]){const r=`Platform: ${t}`,o=new lr(r);return(t=[])=>{let i=gg();if(!i||i.injector.get(dg,!1))if(e)e(n.concat(t).concat({provide:o,useValue:!0}));else{const e=n.concat(t).concat({provide:o,useValue:!0},{provide:Ra,useValue:"platform"});pg(Ja.create({providers:e,name:r}))}return vg(o)}}function vg(e){const t=gg();if(!t){const e="undefined"==typeof ngDevMode||ngDevMode?"No platform exists!":"";throw new p(401,e)}if(("undefined"==typeof ngDevMode||ngDevMode)&&!t.injector.get(e,null))throw new p(400,"A platform with a different configuration has been created. Please destroy it first.");return t}function yg(){ug&&!ug.destroyed&&ug.destroy()}function gg(){return ug&&!ug.destroyed?ug:null}class mg{constructor(e){this._injector=e,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(e,t){const n=function(e,t){let n;return n="noop"===e?new rg:("zone.js"===e?void 0:e)||new Qy({enableLongStackTrace:"undefined"!=typeof ngDevMode&&!!ngDevMode,shouldCoalesceEventChangeDetection:!!(null==t?void 0:t.ngZoneEventCoalescing),shouldCoalesceRunChangeDetection:!!(null==t?void 0:t.ngZoneRunCoalescing)}),n}(t?t.ngZone:void 0,{ngZoneEventCoalescing:t&&t.ngZoneEventCoalescing||!1,ngZoneRunCoalescing:t&&t.ngZoneRunCoalescing||!1}),r=[{provide:Qy,useValue:n}];return n.run((()=>{const t=Ja.create({providers:r,parent:this.injector,name:e.moduleType.name}),o=e.create(t),i=o.injector.get(Pi,null);if(!i){const e="undefined"==typeof ngDevMode||ngDevMode?"No ErrorHandler. Is platform module (BrowserModule) included?":"";throw new p(402,e)}return n.runOutsideAngular((()=>{const e=n.onError.subscribe({next:e=>{i.handleError(e)}});o.onDestroy((()=>{wg(this._modules,o),e.unsubscribe()}))})),function(e,t,n){try{const r=n();return Bl(r)?r.catch((n=>{throw t.runOutsideAngular((()=>e.handleError(n))),n})):r}catch(n){throw t.runOutsideAngular((()=>e.handleError(n))),n}}(i,n,(()=>{const e=o.injector.get(jy);return e.runInitializers(),e.donePromise.then((()=>(Bf(o.injector.get($y,Ff)||Ff),this._moduleDoBootstrap(o),o)))}))}))}bootstrapModule(e,t=[]){const n=bg({},t);return cg(this.injector,n,e).then((e=>this.bootstrapModuleFactory(e,n)))}_moduleDoBootstrap(e){const t=e.injector.get(_g);if(e._bootstrapComponents.length>0)e._bootstrapComponents.forEach((e=>t.bootstrap(e)));else{if(!e.instance.ngDoBootstrap){const t="undefined"==typeof ngDevMode||ngDevMode?`The module ${u(e.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`:"";throw new p(403,t)}e.instance.ngDoBootstrap(t)}this._modules.push(e)}onDestroy(e){this._destroyListeners.push(e)}get injector(){return this._injector}destroy(){if(this._destroyed){const e="undefined"==typeof ngDevMode||ngDevMode?"The platform has already been destroyed!":"";throw new p(404,e)}this._modules.slice().forEach((e=>e.destroy())),this._destroyListeners.forEach((e=>e())),this._destroyed=!0}get destroyed(){return this._destroyed}}function bg(e,t){return Array.isArray(t)?t.reduce(bg,e):Object.assign(Object.assign({},e),t)}mg.ɵfac=function(e){return new(e||mg)(Wr(Ja))},mg.ɵprov=R({token:mg,factory:mg.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Dh(mg,[{type:cl}],(function(){return[{type:Ja}]}),null);class _g{constructor(e,t,n,i,s){this._zone=e,this._injector=t,this._exceptionHandler=n,this._componentFactoryResolver=i,this._initStatus=s,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._onMicrotaskEmptySubscription=this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run((()=>{this.tick()}))}});const u=new r.Observable((e=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular((()=>{e.next(this._stable),e.complete()}))})),a=new r.Observable((e=>{let t;this._zone.runOutsideAngular((()=>{t=this._zone.onStable.subscribe((()=>{Qy.assertNotInAngularZone(),Zy((()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,e.next(!0))}))}))}));const n=this._zone.onUnstable.subscribe((()=>{Qy.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular((()=>{e.next(!1)})))}));return()=>{t.unsubscribe(),n.unsubscribe()}}));this.isStable=(0,r.merge)(u,a.pipe((0,o.BN)()))}bootstrap(e,t){if(!this._initStatus.done){const e="undefined"==typeof ngDevMode||ngDevMode?"Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.":"";throw new p(405,e)}let n;n=e instanceof sh?e:this._componentFactoryResolver.resolveComponentFactory(e),this.componentTypes.push(n.componentType);const r=lg(n)?void 0:this._injector.get(Sh),o=t||n.selector,i=n.create(Ja.NULL,[],o,r),s=i.location.nativeElement,u=i.injector.get(og,null),a=u&&i.injector.get(ig);return u&&a&&a.registerApplication(s,u),i.onDestroy((()=>{this.detachView(i.hostView),wg(this.components,i),a&&a.unregisterApplication(s)})),this._loadComponent(i),("undefined"==typeof ngDevMode||ngDevMode)&&this._injector.get(Ly).log("Angular is running in development mode. Call enableProdMode() to enable production mode."),i}tick(){if(this._runningTick){const e="undefined"==typeof ngDevMode||ngDevMode?"ApplicationRef.tick is called recursively":"";throw new p(101,e)}try{this._runningTick=!0;for(let e of this._views)e.detectChanges();if("undefined"==typeof ngDevMode||ngDevMode)for(let e of this._views)e.checkNoChanges()}catch(e){this._zone.runOutsideAngular((()=>this._exceptionHandler.handleError(e)))}finally{this._runningTick=!1}}attachView(e){const t=e;this._views.push(t),t.attachToAppRef(this)}detachView(e){const t=e;wg(this._views,t),t.detachFromAppRef()}_loadComponent(e){this.attachView(e.hostView),this.tick(),this.components.push(e),this._injector.get(Fy,[]).concat(this._bootstrapListeners).forEach((t=>t(e)))}ngOnDestroy(){this._views.slice().forEach((e=>e.destroy())),this._onMicrotaskEmptySubscription.unsubscribe()}get viewCount(){return this._views.length}}function wg(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}function Mg(e){for(let t=e.length-1;t>=0;t--)if(void 0!==e[t])return e[t]}_g.ɵfac=function(e){return new(e||_g)(Wr(Qy),Wr(Ja),Wr(Pi),Wr(ah),Wr(jy))},_g.ɵprov=R({token:_g,factory:_g.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Dh(_g,[{type:cl}],(function(){return[{type:Qy},{type:Ja},{type:Pi},{type:ah},{type:jy}]}),null);let Cg=!0,Og=!1;function xg(){return Og=!0,Cg}function Dg(){if(Og)throw new Error("Cannot enable prod mode after platform setup.");(void 0===typeof ngDevMode||ngDevMode)&&(ie.ngDevMode=!1),Cg=!1}function Sg(e){const t=jh(e);if(!t)throw Ig(e);return new kh(t)}function Eg(e){const t=jh(e);if(!t)throw Ig(e);return t}function Ig(e){return new Error(`No module with ID ${e} loaded`)}class Pg{}function jg(e){return function(e,t,n){if(Re(e)&&!n){const n=Ct(e.index,t);return new bh(n,n)}if(47&e.type){const e=t[16];return new bh(e,t)}return null}(Rt(),At(),16==(16&e))}Pg.__NG_ELEMENT_ID__=jg;class Tg extends Pg{}class Ag extends Tg{}class kg{constructor(e,t){this.name=e,this.callback=t}}function Ng(e){return e.map((e=>e.nativeElement))}class Rg{constructor(e){this.nativeNode=e}get parent(){const e=this.nativeNode.parentNode;return e?new Fg(e):null}get injector(){return ec(this.nativeNode)}get componentInstance(){const e=this.nativeNode;return e&&(Za(e)||Ya(e))}get context(){return Za(this.nativeNode)||Qa(this.nativeNode)}get listeners(){return oc(this.nativeNode).filter((e=>"dom"===e.type))}get references(){return function(e){const t=mi(e);return null===t?{}:(void 0===t.localRefs&&(t.localRefs=function(e,t){const n=e[1].data[t];if(n&&n.localNames){const t={};let r=n.index+1;for(let o=0;o<n.localNames.length;o+=2)t[n.localNames[o]]=e[r],r++;return t}return null}(t.lView,t.nodeIndex)),t.localRefs||{})}(this.nativeNode)}get providerTokens(){return function(e){const t=mi(e);if(null===t)return[];const n=t.lView[1],r=n.data[t.nodeIndex],o=[],i=1048575&r.providerIndexes,s=r.directiveEnd;for(let e=i;e<s;e++){let t=n.data[e];void 0!==(u=t).type&&void 0!==u.template&&void 0!==u.declaredInputs&&(t=t.type),o.push(t)}var u;return o}(this.nativeNode)}}class Fg extends Rg{constructor(e){ngDevMode&&A(e),super(e)}get nativeElement(){return this.nativeNode.nodeType==Node.ELEMENT_NODE?this.nativeNode:null}get name(){const e=mi(this.nativeNode);return null!==e?e.lView[1].data[e.nodeIndex].value:this.nativeNode.nodeName}get properties(){const e=mi(this.nativeNode);if(null===e)return{};const t=e.lView,n=t[1].data,r=n[e.nodeIndex],o={};return function(e,t){if(e){let n=Object.getPrototypeOf(e);const r=Node.prototype;for(;null!==n&&n!==r;){const r=Object.getOwnPropertyDescriptors(n);for(let n in r)if(!n.startsWith("__")&&!n.startsWith("on")){const r=e[n];Vg(r)&&(t[n]=r)}n=Object.getPrototypeOf(n)}}}(this.nativeElement,o),function(e,t,n,r){let o=t.propertyBindings;if(null!==o)for(let t=0;t<o.length;t++){const i=o[t],s=r[i].split(Hi),u=s[0];if(s.length>1){let t=s[1];for(let e=1;e<s.length-1;e++)t+=v(n[i+e-1])+s[e+1];e[u]=t}else e[u]=n[i]}}(o,r,t,n),o}get attributes(){const e={},t=this.nativeElement;if(!t)return e;const n=mi(t);if(null===n)return{};const r=n.lView[1].data[n.nodeIndex].attrs,o=[];if(r){let t=0;for(;t<r.length;){const n=r[t];if("string"!=typeof n)break;const i=r[t+1];e[n]=i,o.push(n.toLowerCase()),t+=2}}const i=t.attributes;for(let t=0;t<i.length;t++){const n=i[t],r=n.name.toLowerCase();-1===o.indexOf(r)&&(e[r]=n.value)}return e}get styles(){return this.nativeElement&&this.nativeElement.style?this.nativeElement.style:{}}get classes(){const e={},t=this.nativeElement.className;return("string"!=typeof t?t.baseVal.split(" "):t.split(" ")).forEach((t=>e[t]=!0)),e}get childNodes(){const e=this.nativeNode.childNodes,t=[];for(let n=0;n<e.length;n++){const r=e[n];t.push(Wg(r))}return t}get children(){const e=this.nativeElement;if(!e)return[];const t=e.children,n=[];for(let e=0;e<t.length;e++){const r=t[e];n.push(Wg(r))}return n}query(e){return this.queryAll(e)[0]||null}queryAll(e){const t=[];return Lg(this,e,t,!0),t}queryAllNodes(e){const t=[];return Lg(this,e,t,!1),t}triggerEventHandler(e,t){const n=this.nativeNode,r=[];this.listeners.forEach((o=>{if(o.name===e){const e=o.callback;e.call(n,t),r.push(e)}})),"function"==typeof n.eventListeners&&n.eventListeners(e).forEach((e=>{if(-1!==e.toString().indexOf("__ngUnwrap__")){const o=e("__ngUnwrap__");return-1===r.indexOf(o)&&o.call(n,t)}}))}}function Vg(e){return"string"==typeof e||"boolean"==typeof e||"number"==typeof e||null===e}function Lg(e,t,n,r){const o=mi(e.nativeNode);null!==o?$g(o.lView[1].data[o.nodeIndex],o.lView,t,n,r,e.nativeNode):Ug(e.nativeNode,t,n,r)}function $g(e,t,n,r,o,i){ngDevMode&&Le(e,t);const s=function(e,t){const n=null===e?-1:e.index;if(-1!==n){ngDevMode&&Le(e,t);const r=mt(t[n]);return ngDevMode&&null!==r&&!yt(t[11])&&A(r),r}return null}(e,t);if(11&e.type){if(Bg(s,n,r,o,i),Re(e)){const s=Ct(e.index,t);s&&s[1].firstChild&&$g(s[1].firstChild,s,n,r,o,i)}else e.child&&$g(e.child,t,n,r,o,i),s&&Ug(s,n,r,o);const u=t[e.index];ke(u)&&Hg(u,n,r,o,i)}else if(4&e.type){const s=t[e.index];Bg(s[7],n,r,o,i),Hg(s,n,r,o,i)}else if(16&e.type){const s=t[16],u=s[6].projection[e.projection];if(Array.isArray(u))for(let e of u)Bg(e,n,r,o,i);else if(u){const e=s[3];$g(e[1].data[u.index],e,n,r,o,i)}}else e.child&&$g(e.child,t,n,r,o,i);if(i!==s){const s=4&e.flags?e.projectionNext:e.next;s&&$g(s,t,n,r,o,i)}}function Hg(e,t,n,r,o){for(let i=Pe;i<e.length;i++){const s=e[i],u=s[1].firstChild;u&&$g(u,s,t,n,r,o)}}function Bg(e,t,n,r,o){if(o!==e){const o=Wg(e);if(!o)return;(r&&o instanceof Fg&&t(o)&&-1===n.indexOf(o)||!r&&t(o)&&-1===n.indexOf(o))&&n.push(o)}}function Ug(e,t,n,r){const o=e.childNodes,i=o.length;for(let e=0;e<i;e++){const i=o[e],s=Wg(i);s&&((r&&s instanceof Fg&&t(s)&&-1===n.indexOf(s)||!r&&t(s)&&-1===n.indexOf(s))&&n.push(s),Ug(i,t,n,r))}}new Map;function Wg(e){return e instanceof Node?(e.hasOwnProperty("__ng_debug__")||(e.__ng_debug__=e.nodeType==Node.ELEMENT_NODE?new Fg(e):new Rg(e)),e.__ng_debug__):null}function zg(e){return null}class qg{constructor(){}supports(e){return Ic(e)}create(e){return new Gg(e)}}const Kg=(e,t)=>t;class Gg{constructor(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||Kg}forEachItem(e){let t;for(t=this._itHead;null!==t;t=t._next)e(t)}forEachOperation(e){let t=this._itHead,n=this._removalsHead,r=0,o=null;for(;t||n;){const i=!n||t&&t.currentIndex<Yg(n,r,o)?t:n,s=Yg(i,r,o),u=i.currentIndex;if(i===n)r--,n=n._nextRemoved;else if(t=t._next,null==i.previousIndex)r++;else{o||(o=[]);const e=s-r,t=u-r;if(e!=t){for(let n=0;n<e;n++){const r=n<o.length?o[n]:o[n]=0,i=r+n;t<=i&&i<e&&(o[n]=r+1)}o[i.previousIndex]=t-e}}s!==u&&e(i,s,u)}}forEachPreviousItem(e){let t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachMovedItem(e){let t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}forEachIdentityChange(e){let t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)}diff(e){if(null==e&&(e=[]),!Ic(e)){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${u(e)}'. Only arrays and iterables are allowed`:"";throw new p(900,t)}return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t,n,r,o=this._itHead,i=!1;if(Array.isArray(e)){this.length=e.length;for(let t=0;t<this.length;t++)n=e[t],r=this._trackByFn(t,n),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,n,r,t)),Object.is(o.item,n)||this._addIdentityChange(o,n)):(o=this._mismatch(o,n,r,t),i=!0),o=o._next}else t=0,function(e,t){if(Array.isArray(e))for(let n=0;n<e.length;n++)t(e[n]);else{const n=e[Sc()]();let r;for(;!(r=n.next()).done;)t(r.value)}}(e,(e=>{r=this._trackByFn(t,e),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,e,r,t)),Object.is(o.item,e)||this._addIdentityChange(o,e)):(o=this._mismatch(o,e,r,t),i=!0),o=o._next,t++})),this.length=t;return this._truncate(o),this.collection=e,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let e;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=e._nextMoved)e.previousIndex=e.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(e,t,n,r){let o;return null===e?o=this._itTail:(o=e._prev,this._remove(e)),null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,o,r)):null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(n,r))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,o,r)):e=this._addAfter(new Jg(t,n),o,r),e}_verifyReinsertion(e,t,n,r){let o=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==o?e=this._reinsertAfter(o,e._prev,r):e.currentIndex!=r&&(e.currentIndex=r,this._addToMoves(e,r)),e}_truncate(e){for(;null!==e;){const t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(e,t,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);const r=e._prevRemoved,o=e._nextRemoved;return null===r?this._removalsHead=o:r._nextRemoved=o,null===o?this._removalsTail=r:o._prevRemoved=r,this._insertAfter(e,t,n),this._addToMoves(e,n),e}_moveAfter(e,t,n){return this._unlink(e),this._insertAfter(e,t,n),this._addToMoves(e,n),e}_addAfter(e,t,n){return this._insertAfter(e,t,n),null===this._additionsTail?this._additionsTail=this._additionsHead=e:this._additionsTail=this._additionsTail._nextAdded=e,e}_insertAfter(e,t,n){const r=null===t?this._itHead:t._next;return e._next=r,e._prev=t,null===r?this._itTail=e:r._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new Qg),this._linkedRecords.put(e),e.currentIndex=n,e}_remove(e){return this._addToRemovals(this._unlink(e))}_unlink(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);const t=e._prev,n=e._next;return null===t?this._itHead=n:t._next=n,null===n?this._itTail=t:n._prev=t,e}_addToMoves(e,t){return e.previousIndex===t||(null===this._movesTail?this._movesTail=this._movesHead=e:this._movesTail=this._movesTail._nextMoved=e),e}_addToRemovals(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new Qg),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}_addIdentityChange(e,t){return e.item=t,null===this._identityChangesTail?this._identityChangesTail=this._identityChangesHead=e:this._identityChangesTail=this._identityChangesTail._nextIdentityChange=e,e}}class Jg{constructor(e,t){this.item=e,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class Zg{constructor(){this._head=null,this._tail=null}add(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}get(e,t){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===t||t<=n.currentIndex)&&Object.is(n.trackById,e))return n;return null}remove(e){const t=e._prevDup,n=e._nextDup;return null===t?this._head=n:t._nextDup=n,null===n?this._tail=t:n._prevDup=t,null===this._head}}class Qg{constructor(){this.map=new Map}put(e){const t=e.trackById;let n=this.map.get(t);n||(n=new Zg,this.map.set(t,n)),n.add(e)}get(e,t){const n=e,r=this.map.get(n);return r?r.get(e,t):null}remove(e){const t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function Yg(e,t,n){const r=e.previousIndex;if(null===r)return r;let o=0;return n&&r<n.length&&(o=n[r]),r+t+o}class Xg{constructor(){}supports(e){return e instanceof Map||Pc(e)}create(){return new em}}class em{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(e){let t;for(t=this._mapHead;null!==t;t=t._next)e(t)}forEachPreviousItem(e){let t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)}forEachChangedItem(e){let t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}diff(e){if(e){if(!(e instanceof Map||Pc(e))){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${u(e)}'. Only maps and objects are allowed`:"";throw new p(900,t)}}else e=new Map;return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t=this._mapHead;if(this._appendAfter=null,this._forEach(e,((e,n)=>{if(t&&t.key===n)this._maybeAddToChanges(t,e),this._appendAfter=t,t=t._next;else{const r=this._getOrCreateRecordForKey(n,e);t=this._insertBeforeOrAppend(t,r)}})),t){t._prev&&(t._prev._next=null),this._removalsHead=t;for(let e=t;null!==e;e=e._nextRemoved)e===this._mapHead&&(this._mapHead=null),this._records.delete(e.key),e._nextRemoved=e._next,e.previousValue=e.currentValue,e.currentValue=null,e._prev=null,e._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(e,t){if(e){const n=e._prev;return t._next=e,t._prev=n,e._prev=t,n&&(n._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}_getOrCreateRecordForKey(e,t){if(this._records.has(e)){const n=this._records.get(e);this._maybeAddToChanges(n,t);const r=n._prev,o=n._next;return r&&(r._next=o),o&&(o._prev=r),n._next=null,n._prev=null,n}const n=new tm(e);return this._records.set(e,n),n.currentValue=t,this._addToAdditions(n),n}_reset(){if(this.isDirty){let e;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(e,t){Object.is(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))}_addToAdditions(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)}_addToChanges(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)}_forEach(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach((n=>t(e[n],n)))}}class tm{constructor(e){this.key=e,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}function nm(){return new rm([new qg])}class rm{constructor(e){this.factories=e}static create(e,t){if(null!=t){const n=t.factories.slice();e=e.concat(n)}return new rm(e)}static extend(e){return{provide:rm,useFactory:t=>rm.create(e,t||nm()),deps:[[rm,new Yr,new Zr]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(null!=t)return t;{const t="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}' of type '${n=e,n.name||typeof n}'`:"";throw new p(901,t)}var n}}function om(){return new im([new Xg])}rm.ɵprov=R({token:rm,providedIn:"root",factory:nm});class im{constructor(e){this.factories=e}static create(e,t){if(t){const n=t.factories.slice();e=e.concat(n)}return new im(e)}static extend(e){return{provide:im,useFactory:t=>im.create(e,t||om()),deps:[[im,new Yr,new Zr]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(t)return t;const n="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}'`:"";throw new p(901,n)}}im.ɵprov=R({token:im,providedIn:"root",factory:om});const sm=[new Xg],um=[new qg],am=new rm(um),cm=new im(sm),lm=hg(null,"core",[{provide:Ry,useValue:"unknown"},{provide:mg,deps:[Ja]},{provide:ig,deps:[]},{provide:Ly,deps:[]}]),dm=[{provide:_g,useClass:_g,deps:[Qy,Ja,Pi,ah,jy]},{provide:Ch,deps:[Qy],useFactory:function(e){let t=[];return e.onStable.subscribe((()=>{for(;t.length;)t.pop()()})),function(e){t.push(e)}}},{provide:jy,useClass:jy,deps:[[new Zr,Py]]},{provide:qy,useClass:qy,deps:[]},Ay,{provide:rm,useFactory:function(){return am},deps:[]},{provide:im,useFactory:function(){return cm},deps:[]},{provide:$y,useFactory:function(e){return e||("undefined"!=typeof ngI18nClosureMode&&ngI18nClosureMode&&"undefined"!=typeof goog&&"en"!==goog.getLocale()?goog.getLocale():"undefined"!=typeof $localize&&$localize.locale||Ff)},deps:[[new Jr($y),new Zr,new Yr]]},{provide:Hy,useValue:"USD"}];class fm{constructor(e){}}fm.ɵfac=function(e){return new(e||fm)(Wr(_g))},fm.ɵmod=we({type:fm}),fm.ɵinj=V({providers:dm}),("undefined"==typeof ngDevMode||ngDevMode)&&Dh(fm,[{type:Ey,args:[{providers:dm}]}],(function(){return[{type:_g}]}),null);const pm=!0;function hm(e){return br({usage:1,kind:"directive",type:e.type}).compileDirectiveDeclaration(Rv,`ng:///${e.type.name}/ɵfac.js`,e)}function vm(e){var t,n;Dh(e.type,e.decorators,null!==(t=e.ctorParameters)&&void 0!==t?t:null,null!==(n=e.propDecorators)&&void 0!==n?n:null)}function ym(e){return br({usage:1,kind:"component",type:e.type}).compileComponentDeclaration(Rv,`ng:///${e.type.name}/ɵcmp.js`,e)}function gm(e){return br({usage:1,kind:mm(e.target),type:e.type}).compileFactoryDeclaration(Rv,`ng:///${e.type.name}/ɵfac.js`,e)}function mm(e){switch(e){case gr.Directive:return"directive";case gr.Component:return"component";case gr.Injectable:return"injectable";case gr.Pipe:return"pipe";case gr.NgModule:return"NgModule"}}function bm(e){return br({usage:1,kind:"injectable",type:e.type}).compileInjectableDeclaration(Rv,`ng:///${e.type.name}/ɵprov.js`,e)}function _m(e){return br({usage:1,kind:"NgModule",type:e.type}).compileInjectorDeclaration(Rv,`ng:///${e.type.name}/ɵinj.js`,e)}function wm(e){return br({usage:1,kind:"NgModule",type:e.type}).compileNgModuleDeclaration(Rv,`ng:///${e.type.name}/ɵmod.js`,e)}function Mm(e){return br({usage:1,kind:"pipe",type:e.type}).compilePipeDeclaration(Rv,`ng:///${e.type.name}/ɵpipe.js`,e)}"undefined"!=typeof ngDevMode&&ngDevMode&&(ie.$localize=ie.$localize||function(){throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)")})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.signCredential=e.signProofObject=e.signCredentialObject=e.validCredentialsTrustedPartiesFunc=e.validCredentialsFunc=e.userCredentialSignatureWrong=e.knownAddressesContains=e.issuerCredentialSignatureWrong=e.reOrderProofObject=e.getSha3Key=e.getKeyPurpose=e.didContractKeyWrong=e.calculateMinutesDifference=e.ProofmeUtilsProvider=e.WebRtcProvider=e.SignalingServer=void 0;var t=n(2582);Object.defineProperty(e,"SignalingServer",{enumerable:!0,get:function(){return t.SignalingServer}});var o=n(2733);Object.defineProperty(e,"WebRtcProvider",{enumerable:!0,get:function(){return o.WebRtcProvider}});var i=n(1015);Object.defineProperty(e,"ProofmeUtilsProvider",{enumerable:!0,get:function(){return i.ProofmeUtilsProvider}});var s=n(6168);Object.defineProperty(e,"calculateMinutesDifference",{enumerable:!0,get:function(){return s.calculateMinutesDifference}});var u=n(6168);Object.defineProperty(e,"didContractKeyWrong",{enumerable:!0,get:function(){return u.didContractKeyWrong}});var a=n(6168);Object.defineProperty(e,"getKeyPurpose",{enumerable:!0,get:function(){return a.getKeyPurpose}});var c=n(6168);Object.defineProperty(e,"getSha3Key",{enumerable:!0,get:function(){return c.getSha3Key}});var l=n(6168);Object.defineProperty(e,"reOrderProofObject",{enumerable:!0,get:function(){return l.reOrderProofObject}});var d=n(6168);Object.defineProperty(e,"issuerCredentialSignatureWrong",{enumerable:!0,get:function(){return d.issuerCredentialSignatureWrong}});var f=n(6168);Object.defineProperty(e,"knownAddressesContains",{enumerable:!0,get:function(){return f.knownAddressesContains}});var p=n(6168);Object.defineProperty(e,"userCredentialSignatureWrong",{enumerable:!0,get:function(){return p.userCredentialSignatureWrong}});var h=n(6168);Object.defineProperty(e,"validCredentialsFunc",{enumerable:!0,get:function(){return h.validCredentialsFunc}});var v=n(6168);Object.defineProperty(e,"validCredentialsTrustedPartiesFunc",{enumerable:!0,get:function(){return v.validCredentialsTrustedPartiesFunc}});var y=n(6168);Object.defineProperty(e,"signCredentialObject",{enumerable:!0,get:function(){return y.signCredentialObject}});var g=n(6168);Object.defineProperty(e,"signProofObject",{enumerable:!0,get:function(){return g.signProofObject}});var m=n(6168);Object.defineProperty(e,"signCredential",{enumerable:!0,get:function(){return m.signCredential}})})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,