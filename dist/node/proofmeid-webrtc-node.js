/*! For license information please see proofmeid-webrtc-node.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ProofmeId=t():e.ProofmeId=t()}(global,(function(){return(()=>{"use strict";var e={280:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncSubject=void 0;var i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._value=null,t._hasValue=!1,t._isComplete=!1,t}return o(t,e),t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t._hasValue,o=t._value,i=t.thrownError,s=t.isStopped,a=t._isComplete;n?e.error(i):(s||a)&&(r&&e.next(o),e.complete())},t.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},t.prototype.complete=function(){var t=this,n=t._hasValue,r=t._value;t._isComplete||(this._isComplete=!0,n&&e.prototype.next.call(this,r),e.prototype.complete.call(this))},t}(n(3032).Subject);t.AsyncSubject=i},5240:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.BehaviorSubject=void 0;var i=function(e){function t(t){var n=e.call(this)||this;return n._value=t,n}return o(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var n=e.prototype._subscribe.call(this,t);return!n.closed&&t.next(this._value),n},t.prototype.getValue=function(){var e=this,t=e.hasError,n=e.thrownError,r=e._value;if(t)throw n;return this._throwIfClosed(),r},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(n(3032).Subject);t.BehaviorSubject=i},3104:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeNotification=t.Notification=t.NotificationKind=void 0;var r,o=n(6332),i=n(5726),s=n(2098),a=n(3005);(r=t.NotificationKind||(t.NotificationKind={})).NEXT="N",r.ERROR="E",r.COMPLETE="C";var u=function(){function e(e,t,n){this.kind=e,this.value=t,this.error=n,this.hasValue="N"===e}return e.prototype.observe=function(e){return c(this,e)},e.prototype.do=function(e,t,n){var r=this,o=r.kind,i=r.value,s=r.error;return"N"===o?null==e?void 0:e(i):"E"===o?null==t?void 0:t(s):null==n?void 0:n()},e.prototype.accept=function(e,t,n){var r;return a.isFunction(null===(r=e)||void 0===r?void 0:r.next)?this.observe(e):this.do(e,t,n)},e.prototype.toObservable=function(){var e=this,t=e.kind,n=e.value,r=e.error,a="N"===t?i.of(n):"E"===t?s.throwError((function(){return r})):"C"===t?o.EMPTY:0;if(!a)throw new TypeError("Unexpected notification kind "+t);return a},e.createNext=function(t){return new e("N",t)},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function c(e,t){var n,r,o,i=e,s=i.kind,a=i.value,u=i.error;if("string"!=typeof s)throw new TypeError('Invalid notification, missing "kind"');"N"===s?null===(n=t.next)||void 0===n||n.call(t,a):"E"===s?null===(r=t.error)||void 0===r||r.call(t,u):null===(o=t.complete)||void 0===o||o.call(t)}t.Notification=u,t.observeNotification=c},7286:(e,t)=>{function n(e,t,n){return{kind:e,value:t,error:n}}Object.defineProperty(t,"__esModule",{value:!0}),t.createNotification=t.nextNotification=t.errorNotification=t.COMPLETE_NOTIFICATION=void 0,t.COMPLETE_NOTIFICATION=n("C",void 0,void 0),t.errorNotification=function(e){return n("E",void 0,e)},t.nextNotification=function(e){return n("N",e,void 0)},t.createNotification=n},2419:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var r=n(5125),o=n(3865),i=n(2801),s=n(2872),a=n(3280),u=n(3005),c=n(6110),l=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var i,s=this,a=(i=e)&&i instanceof r.Subscriber||function(e){return e&&u.isFunction(e.next)&&u.isFunction(e.error)&&u.isFunction(e.complete)}(i)&&o.isSubscription(i)?e:new r.SafeSubscriber(e,t,n);return c.errorContext((function(){var e=s,t=e.operator,n=e.source;a.add(t?t.call(a,n):n?s._subscribe(a):s._trySubscribe(a))})),a},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=f(t))((function(t,o){var i=new r.SafeSubscriber({next:function(t){try{e(t)}catch(e){o(e),i.unsubscribe()}},error:o,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=f(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function f(e){var t;return null!==(t=null!=e?e:a.config.Promise)&&void 0!==t?t:Promise}t.Observable=l},3274:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReplaySubject=void 0;var i=n(3032),s=n(7950),a=function(e){function t(t,n,r){void 0===t&&(t=1/0),void 0===n&&(n=1/0),void 0===r&&(r=s.dateTimestampProvider);var o=e.call(this)||this;return o._bufferSize=t,o._windowTime=n,o._timestampProvider=r,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=n===1/0,o._bufferSize=Math.max(1,t),o._windowTime=Math.max(1,n),o}return o(t,e),t.prototype.next=function(t){var n=this,r=n.isStopped,o=n._buffer,i=n._infiniteTimeWindow,s=n._timestampProvider,a=n._windowTime;r||(o.push(t),!i&&o.push(s.now()+a)),this._trimBuffer(),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var t=this._innerSubscribe(e),n=this._infiniteTimeWindow,r=this._buffer.slice(),o=0;o<r.length&&!e.closed;o+=n?1:2)e.next(r[o]);return this._checkFinalizedStatuses(e),t},t.prototype._trimBuffer=function(){var e=this,t=e._bufferSize,n=e._timestampProvider,r=e._buffer,o=e._infiniteTimeWindow,i=(o?1:2)*t;if(t<1/0&&i<r.length&&r.splice(0,r.length-i),!o){for(var s=n.now(),a=0,u=1;u<r.length&&r[u]<=s;u+=2)a=u;a&&r.splice(0,a+1)}},t}(i.Subject);t.ReplaySubject=a},218:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Scheduler=void 0;var r=n(7950),o=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=r.dateTimestampProvider.now,e}();t.Scheduler=o},3032:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.AnonymousSubject=t.Subject=void 0;var s=n(2419),a=n(3865),u=n(2642),c=n(6967),l=n(6110),f=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,e),t.prototype.lift=function(e){var t=new d(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new u.ObjectUnsubscribedError},t.prototype.next=function(e){var t=this;l.errorContext((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){var o=t.observers.slice();try{for(var s=i(o),a=s.next();!a.done;a=s.next())a.value.next(e)}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;l.errorContext((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;l.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=t.hasError,r=t.isStopped,o=t.observers;return n||r?a.EMPTY_SUBSCRIPTION:(o.push(e),new a.Subscription((function(){return c.arrRemove(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new s.Observable;return e.source=this,e},t.create=function(e,t){return new d(e,t)},t}(s.Observable);t.Subject=f;var d=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return o(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:a.EMPTY_SUBSCRIPTION},t}(f);t.AnonymousSubject=d},5125:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_OBSERVER=t.SafeSubscriber=t.Subscriber=void 0;var i=n(3005),s=n(3865),a=n(3280),u=n(7968),c=n(2576),l=n(7286),f=n(4590),d=n(6110),p=function(e){function n(n){var r=e.call(this)||this;return r.isStopped=!1,n?(r.destination=n,s.isSubscription(n)&&n.add(r)):r.destination=t.EMPTY_OBSERVER,r}return o(n,e),n.create=function(e,t,n){return new g(e,t,n)},n.prototype.next=function(e){this.isStopped?m(l.nextNotification(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?m(l.errorNotification(e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?m(l.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(s.Subscription);t.Subscriber=p;var h=Function.prototype.bind;function v(e,t){return h.call(e,t)}var y=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){b(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){b(e)}else b(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){b(e)}},e}(),g=function(e){function t(t,n,r){var o,s,u=e.call(this)||this;return i.isFunction(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&a.config.useDeprecatedNextContext?((s=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&v(t.next,s),error:t.error&&v(t.error,s),complete:t.complete&&v(t.complete,s)}):o=t,u.destination=new y(o),u}return o(t,e),t}(p);function b(e){a.config.useDeprecatedSynchronousErrorHandling?d.captureError(e):u.reportUnhandledError(e)}function m(e,t){var n=a.config.onStoppedNotification;n&&f.timeoutProvider.setTimeout((function(){return n(e,t)}))}t.SafeSubscriber=g,t.EMPTY_OBSERVER={closed:!0,next:c.noop,error:function(e){throw e},complete:c.noop}},3865:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},i=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.isSubscription=t.EMPTY_SUBSCRIPTION=t.Subscription=void 0;var s=n(3005),a=n(4805),u=n(6967),c=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,u,c;if(!this.closed){this.closed=!0;var f=this._parentage;if(f)if(this._parentage=null,Array.isArray(f))try{for(var d=r(f),p=d.next();!p.done;p=d.next())p.value.remove(this)}catch(t){e={error:t}}finally{try{p&&!p.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}else f.remove(this);var h=this.initialTeardown;if(s.isFunction(h))try{h()}catch(e){c=e instanceof a.UnsubscriptionError?e.errors:[e]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var y=r(v),g=y.next();!g.done;g=y.next()){var b=g.value;try{l(b)}catch(e){c=null!=c?c:[],e instanceof a.UnsubscriptionError?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{g&&!g.done&&(u=y.return)&&u.call(y)}finally{if(n)throw n.error}}}if(c)throw new a.UnsubscriptionError(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)l(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&u.arrRemove(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&u.arrRemove(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function l(e){s.isFunction(e)?e():e.unsubscribe()}t.Subscription=c,t.EMPTY_SUBSCRIPTION=c.EMPTY,t.isSubscription=function(e){return e instanceof c||e&&"closed"in e&&s.isFunction(e.remove)&&s.isFunction(e.add)&&s.isFunction(e.unsubscribe)}},3280:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0,t.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},9518:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectableObservable=void 0;var i=n(2419),s=n(3865),a=n(8739),u=n(4990),c=n(4935),l=function(e){function t(t,n){var r=e.call(this)||this;return r.source=t,r.subjectFactory=n,r._subject=null,r._refCount=0,r._connection=null,c.hasLift(t)&&(r.lift=t.lift),r}return o(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},t.prototype.connect=function(){var e=this,t=this._connection;if(!t){t=this._connection=new s.Subscription;var n=this.getSubject();t.add(this.source.subscribe(u.createOperatorSubscriber(n,void 0,(function(){e._teardown(),n.complete()}),(function(t){e._teardown(),n.error(t)}),(function(){return e._teardown()})))),t.closed&&(this._connection=null,t=s.Subscription.EMPTY)}return t},t.prototype.refCount=function(){return a.refCount()(this)},t}(i.Observable);t.ConnectableObservable=l},9258:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestInit=t.combineLatest=void 0;var r=n(2419),o=n(1203),i=n(5432),s=n(4781),a=n(1914),u=n(2433),c=n(641),l=n(4990),f=n(7738);function d(e,t,n){return void 0===n&&(n=s.identity),function(r){p(t,(function(){for(var o=e.length,s=new Array(o),a=o,u=o,c=function(o){p(t,(function(){var c=i.from(e[o],t),f=!1;c.subscribe(l.createOperatorSubscriber(r,(function(e){s[o]=e,f||(f=!0,u--),u||r.next(n(s.slice()))}),(function(){--a||r.complete()})))}),r)},f=0;f<o;f++)c(f)}),r)}}function p(e,t,n){e?f.executeSchedule(n,e,t):t()}t.combineLatest=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=u.popScheduler(e),l=u.popResultSelector(e),f=o.argsArgArrayOrObject(e),p=f.args,h=f.keys;if(0===p.length)return i.from([],n);var v=new r.Observable(d(p,n,h?function(e){return c.createObject(h,e)}:s.identity));return l?v.pipe(a.mapOneOrManyArgs(l)):v},t.combineLatestInit=d},2239:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var r=n(4413),o=n(2433),i=n(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return r.concatAll()(i.from(e,o.popScheduler(e)))}},6332:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.empty=t.EMPTY=void 0;var r=n(2419);t.EMPTY=new r.Observable((function(e){return e.complete()})),t.empty=function(e){return e?function(e){return new r.Observable((function(t){return e.schedule((function(){return t.complete()}))}))}(e):t.EMPTY}},5432:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.from=void 0;var r=n(5207),o=n(7103);t.from=function(e,t){return t?r.scheduled(e,t):o.innerFrom(e)}},851:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromSubscribable=void 0;var r=n(2419);t.fromSubscribable=function(e){return new r.Observable((function(t){return e.subscribe(t)}))}},7103:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof s?s(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}},s=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fromReadableStreamLike=t.fromAsyncIterable=t.fromIterable=t.fromPromise=t.fromArrayLike=t.fromInteropObservable=t.innerFrom=void 0;var a=n(3909),u=n(6018),c=n(2419),l=n(9500),f=n(9595),d=n(9906),p=n(2743),h=n(7823),v=n(3005),y=n(7968),g=n(2801);function b(e){return new c.Observable((function(t){var n=e[g.observable]();if(v.isFunction(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function m(e){return new c.Observable((function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()}))}function _(e){return new c.Observable((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,y.reportUnhandledError)}))}function w(e){return new c.Observable((function(t){var n,r;try{for(var o=s(e),i=o.next();!i.done;i=o.next()){var a=i.value;if(t.next(a),t.closed)return}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}))}function M(e){return new c.Observable((function(t){(function(e,t){var n,s,a,u;return r(this,void 0,void 0,(function(){var r,c;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),n=i(e),o.label=1;case 1:return[4,n.next()];case 2:if((s=o.sent()).done)return[3,4];if(r=s.value,t.next(r),t.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=o.sent(),a={error:c},[3,11];case 6:return o.trys.push([6,,9,10]),s&&!s.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function C(e){return M(h.readableStreamLikeToAsyncGenerator(e))}t.innerFrom=function(e){if(e instanceof c.Observable)return e;if(null!=e){if(l.isInteropObservable(e))return b(e);if(a.isArrayLike(e))return m(e);if(u.isPromise(e))return _(e);if(f.isAsyncIterable(e))return M(e);if(p.isIterable(e))return w(e);if(h.isReadableStreamLike(e))return C(e)}throw d.createInvalidObservableTypeError(e)},t.fromInteropObservable=b,t.fromArrayLike=m,t.fromPromise=_,t.fromIterable=w,t.fromAsyncIterable=M,t.fromReadableStreamLike=C},8990:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.interval=void 0;var r=n(2445),o=n(7513);t.interval=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=r.asyncScheduler),e<0&&(e=0),o.timer(e,e,t)}},5726:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.of=void 0;var r=n(2433),o=n(5432);t.of=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=r.popScheduler(e);return o.from(e,n)}},5182:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.raceInit=t.race=void 0;var r=n(2419),o=n(7103),i=n(5498),s=n(4990);function a(e){return function(t){for(var n=[],r=function(r){n.push(o.innerFrom(e[r]).subscribe(s.createOperatorSubscriber(t,(function(e){if(n){for(var o=0;o<n.length;o++)o!==r&&n[o].unsubscribe();n=null}t.next(e)}))))},i=0;n&&!t.closed&&i<e.length;i++)r(i)}}t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 1===(e=i.argsOrArgArray(e)).length?o.innerFrom(e[0]):new r.Observable(a(e))},t.raceInit=a},2098:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwError=void 0;var r=n(2419),o=n(3005);t.throwError=function(e,t){var n=o.isFunction(e)?e:function(){return e},i=function(e){return e.error(n())};return new r.Observable(t?function(e){return t.schedule(i,0,e)}:i)}},7513:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timer=void 0;var r=n(2419),o=n(2445),i=n(9016),s=n(1677);t.timer=function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=o.async);var a=-1;return null!=t&&(i.isScheduler(t)?n=t:a=t),new r.Observable((function(t){var r=s.isValidDate(e)?+e-n.now():e;r<0&&(r=0);var o=0;return n.schedule((function(){t.closed||(t.next(o++),0<=a?this.schedule(void 0,a):t.complete())}),r)}))}},7654:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=n(2419),s=n(7103),a=n(5498),u=n(6332),c=n(4990),l=n(2433);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=l.popResultSelector(e),f=a.argsOrArgArray(e);return f.length?new i.Observable((function(e){var t=f.map((function(){return[]})),i=f.map((function(){return!1}));e.add((function(){t=i=null}));for(var a=function(a){s.innerFrom(f[a]).subscribe(c.createOperatorSubscriber(e,(function(s){if(t[a].push(s),t.every((function(e){return e.length}))){var u=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,o([],r(u))):u),t.some((function(e,t){return!e.length&&i[t]}))&&e.complete()}}),(function(){i[a]=!0,!t[a].length&&e.complete()})))},u=0;!e.closed&&u<f.length;u++)a(u);return function(){t=i=null}})):u.EMPTY}},4990:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorSubscriber=t.createOperatorSubscriber=void 0;var i=n(5125);t.createOperatorSubscriber=function(e,t,n,r,o){return new s(e,t,n,r,o)};var s=function(e){function t(t,n,r,o,i,s){var a=e.call(this,t)||this;return a.onFinalize=i,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return o(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(i.Subscriber);t.OperatorSubscriber=s},6474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.audit=void 0;var r=n(4935),o=n(7103),i=n(4990);t.audit=function(e){return r.operate((function(t,n){var r=!1,s=null,a=null,u=!1,c=function(){if(null==a||a.unsubscribe(),a=null,r){r=!1;var e=s;s=null,n.next(e)}u&&n.complete()},l=function(){a=null,u&&n.complete()};t.subscribe(i.createOperatorSubscriber(n,(function(t){r=!0,s=t,a||o.innerFrom(e(t)).subscribe(a=i.createOperatorSubscriber(n,c,l))}),(function(){u=!0,(!r||!a||a.closed)&&n.complete()})))}))}},5382:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.auditTime=void 0;var r=n(2445),o=n(6474),i=n(7513);t.auditTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.audit((function(){return i.timer(e,t)}))}},9715:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buffer=void 0;var r=n(4935),o=n(2576),i=n(4990);t.buffer=function(e){return r.operate((function(t,n){var r=[];return t.subscribe(i.createOperatorSubscriber(n,(function(e){return r.push(e)}),(function(){n.next(r),n.complete()}))),e.subscribe(i.createOperatorSubscriber(n,(function(){var e=r;r=[],n.next(e)}),o.noop)),function(){r=null}}))}},3814:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferCount=void 0;var o=n(4935),i=n(4990),s=n(6967);t.bufferCount=function(e,t){return void 0===t&&(t=null),t=null!=t?t:e,o.operate((function(n,o){var a=[],u=0;n.subscribe(i.createOperatorSubscriber(o,(function(n){var i,c,l,f,d=null;u++%t==0&&a.push([]);try{for(var p=r(a),h=p.next();!h.done;h=p.next())(g=h.value).push(n),e<=g.length&&(d=null!=d?d:[]).push(g)}catch(e){i={error:e}}finally{try{h&&!h.done&&(c=p.return)&&c.call(p)}finally{if(i)throw i.error}}if(d)try{for(var v=r(d),y=v.next();!y.done;y=v.next()){var g=y.value;s.arrRemove(a,g),o.next(g)}}catch(e){l={error:e}}finally{try{y&&!y.done&&(f=v.return)&&f.call(v)}finally{if(l)throw l.error}}}),(function(){var e,t;try{for(var n=r(a),i=n.next();!i.done;i=n.next()){var s=i.value;o.next(s)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}o.complete()}),void 0,(function(){a=null})))}))}},7211:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferTime=void 0;var o=n(3865),i=n(4935),s=n(4990),a=n(6967),u=n(2445),c=n(2433),l=n(7738);t.bufferTime=function(e){for(var t,n,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(t=c.popScheduler(f))&&void 0!==t?t:u.asyncScheduler,h=null!==(n=f[0])&&void 0!==n?n:null,v=f[1]||1/0;return i.operate((function(t,n){var i=[],u=!1,c=function(e){var t=e.buffer;e.subs.unsubscribe(),a.arrRemove(i,e),n.next(t),u&&f()},f=function(){if(i){var t=new o.Subscription;n.add(t);var r={buffer:[],subs:t};i.push(r),l.executeSchedule(t,p,(function(){return c(r)}),e)}};null!==h&&h>=0?l.executeSchedule(n,p,f,h,!0):u=!0,f();var d=s.createOperatorSubscriber(n,(function(e){var t,n,o=i.slice();try{for(var s=r(o),a=s.next();!a.done;a=s.next()){var u=a.value,l=u.buffer;l.push(e),v<=l.length&&c(u)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}}),(function(){for(;null==i?void 0:i.length;)n.next(i.shift().buffer);null==d||d.unsubscribe(),n.complete(),n.unsubscribe()}),void 0,(function(){return i=null}));t.subscribe(d)}))}},4943:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferToggle=void 0;var o=n(3865),i=n(4935),s=n(7103),a=n(4990),u=n(2576),c=n(6967);t.bufferToggle=function(e,t){return i.operate((function(n,i){var l=[];s.innerFrom(e).subscribe(a.createOperatorSubscriber(i,(function(e){var n=[];l.push(n);var r=new o.Subscription;r.add(s.innerFrom(t(e)).subscribe(a.createOperatorSubscriber(i,(function(){c.arrRemove(l,n),i.next(n),r.unsubscribe()}),u.noop)))}),u.noop)),n.subscribe(a.createOperatorSubscriber(i,(function(e){var t,n;try{for(var o=r(l),i=o.next();!i.done;i=o.next())i.value.push(e)}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}}),(function(){for(;l.length>0;)i.next(l.shift());i.complete()})))}))}},1240:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bufferWhen=void 0;var r=n(4935),o=n(2576),i=n(4990),s=n(7103);t.bufferWhen=function(e){return r.operate((function(t,n){var r=null,a=null,u=function(){null==a||a.unsubscribe();var t=r;r=[],t&&n.next(t),s.innerFrom(e()).subscribe(a=i.createOperatorSubscriber(n,u,o.noop))};u(),t.subscribe(i.createOperatorSubscriber(n,(function(e){return null==r?void 0:r.push(e)}),(function(){r&&n.next(r),n.complete()}),void 0,(function(){return r=a=null})))}))}},9548:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.catchError=void 0;var r=n(7103),o=n(4990),i=n(4935);t.catchError=function e(t){return i.operate((function(n,i){var s,a=null,u=!1;a=n.subscribe(o.createOperatorSubscriber(i,void 0,void 0,(function(o){s=r.innerFrom(t(o,e(t)(n))),a?(a.unsubscribe(),a=null,s.subscribe(i)):u=!0}))),u&&(a.unsubscribe(),a=null,s.subscribe(i))}))}},2128:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineAll=void 0;var r=n(3240);t.combineAll=r.combineLatestAll},6318:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatest=void 0;var i=n(9258),s=n(4935),a=n(5498),u=n(1914),c=n(2872),l=n(2433);t.combineLatest=function e(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var f=l.popResultSelector(t);return f?c.pipe(e.apply(void 0,o([],r(t))),u.mapOneOrManyArgs(f)):s.operate((function(e,n){i.combineLatestInit(o([e],r(a.argsOrArgArray(t))))(n)}))}},3240:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestAll=void 0;var r=n(9258),o=n(2069);t.combineLatestAll=function(e){return o.joinAllInternals(r.combineLatest,e)}},5024:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestWith=void 0;var i=n(6318);t.combineLatestWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.combineLatest.apply(void 0,o([],r(e)))}},4919:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var i=n(4935),s=n(4413),a=n(2433),u=n(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=a.popScheduler(e);return i.operate((function(t,i){s.concatAll()(u.from(o([t],r(e)),n)).subscribe(i)}))}},4413:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatAll=void 0;var r=n(3783);t.concatAll=function(){return r.mergeAll(1)}},7498:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMap=void 0;var r=n(9475),o=n(3005);t.concatMap=function(e,t){return o.isFunction(t)?r.mergeMap(e,t,1):r.mergeMap(e,1)}},6109:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMapTo=void 0;var r=n(7498),o=n(3005);t.concatMapTo=function(e,t){return o.isFunction(t)?r.concatMap((function(){return e}),t):r.concatMap((function(){return e}))}},9664:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concatWith=void 0;var i=n(4919);t.concatWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.concat.apply(void 0,o([],r(e)))}},1995:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0;var r=n(3032),o=n(5432),i=n(4935),s=n(851),a={connector:function(){return new r.Subject}};t.connect=function(e,t){void 0===t&&(t=a);var n=t.connector;return i.operate((function(t,r){var i=n();o.from(e(s.fromSubscribable(i))).subscribe(r),r.add(t.subscribe(i))}))}},993:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.count=void 0;var r=n(122);t.count=function(e){return r.reduce((function(t,n,r){return!e||e(n,r)?t+1:t}),0)}},496:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0;var r=n(4935),o=n(2576),i=n(4990),s=n(7103);t.debounce=function(e){return r.operate((function(t,n){var r=!1,a=null,u=null,c=function(){if(null==u||u.unsubscribe(),u=null,r){r=!1;var e=a;a=null,n.next(e)}};t.subscribe(i.createOperatorSubscriber(n,(function(t){null==u||u.unsubscribe(),r=!0,a=t,u=i.createOperatorSubscriber(n,c,o.noop),s.innerFrom(e(t)).subscribe(u)}),(function(){c(),n.complete()}),void 0,(function(){a=u=null})))}))}},1385:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounceTime=void 0;var r=n(2445),o=n(4935),i=n(4990);t.debounceTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.operate((function(n,r){var o=null,s=null,a=null,u=function(){if(o){o.unsubscribe(),o=null;var e=s;s=null,r.next(e)}};function c(){var n=a+e,i=t.now();if(i<n)return o=this.schedule(void 0,n-i),void r.add(o);u()}n.subscribe(i.createOperatorSubscriber(r,(function(n){s=n,a=t.now(),o||(o=t.schedule(c,e),r.add(o))}),(function(){u(),r.complete()}),void 0,(function(){s=o=null})))}))}},1658:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultIfEmpty=void 0;var r=n(4935),o=n(4990);t.defaultIfEmpty=function(e){return r.operate((function(t,n){var r=!1;t.subscribe(o.createOperatorSubscriber(n,(function(e){r=!0,n.next(e)}),(function(){r||n.next(e),n.complete()})))}))}},5841:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0;var r=n(2445),o=n(8798),i=n(7513);t.delay=function(e,t){void 0===t&&(t=r.asyncScheduler);var n=i.timer(e,t);return o.delayWhen((function(){return n}))}},8798:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayWhen=void 0;var r=n(2239),o=n(4783),i=n(9438),s=n(8313),a=n(9475);t.delayWhen=function e(t,n){return n?function(s){return r.concat(n.pipe(o.take(1),i.ignoreElements()),s.pipe(e(t)))}:a.mergeMap((function(e,n){return t(e,n).pipe(o.take(1),s.mapTo(e))}))}},1080:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dematerialize=void 0;var r=n(3104),o=n(4935),i=n(4990);t.dematerialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){return r.observeNotification(e,t)})))}))}},3054:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinct=void 0;var r=n(4935),o=n(4990),i=n(2576);t.distinct=function(e,t){return r.operate((function(n,r){var s=new Set;n.subscribe(o.createOperatorSubscriber(r,(function(t){var n=e?e(t):t;s.has(n)||(s.add(n),r.next(t))}))),null==t||t.subscribe(o.createOperatorSubscriber(r,(function(){return s.clear()}),i.noop))}))}},8737:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilChanged=void 0;var r=n(4781),o=n(4935),i=n(4990);function s(e,t){return e===t}t.distinctUntilChanged=function(e,t){return void 0===t&&(t=r.identity),e=null!=e?e:s,o.operate((function(n,r){var o,s=!0;n.subscribe(i.createOperatorSubscriber(r,(function(n){var i=t(n);!s&&e(o,i)||(s=!1,o=i,r.next(n))})))}))}},7957:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilKeyChanged=void 0;var r=n(8737);t.distinctUntilKeyChanged=function(e,t){return r.distinctUntilChanged((function(n,r){return t?t(n[e],r[e]):n[e]===r[e]}))}},8633:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.elementAt=void 0;var r=n(2351),o=n(9154),i=n(1779),s=n(1658),a=n(4783);t.elementAt=function(e,t){if(e<0)throw new r.ArgumentOutOfRangeError;var n=arguments.length>=2;return function(u){return u.pipe(o.filter((function(t,n){return n===e})),a.take(1),n?s.defaultIfEmpty(t):i.throwIfEmpty((function(){return new r.ArgumentOutOfRangeError})))}}},911:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.endWith=void 0;var i=n(2239),s=n(5726);t.endWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return i.concat(t,s.of.apply(void 0,o([],r(e))))}}},2096:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.every=void 0;var r=n(4935),o=n(4990);t.every=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(o){e.call(t,o,i++,n)||(r.next(!1),r.complete())}),(function(){r.next(!0),r.complete()})))}))}},67:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaust=void 0;var r=n(5337);t.exhaust=r.exhaustAll},5337:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustAll=void 0;var r=n(4935),o=n(7103),i=n(4990);t.exhaustAll=function(){return r.operate((function(e,t){var n=!1,r=null;e.subscribe(i.createOperatorSubscriber(t,(function(e){r||(r=o.innerFrom(e).subscribe(i.createOperatorSubscriber(t,void 0,(function(){r=null,n&&t.complete()}))))}),(function(){n=!0,!r&&t.complete()})))}))}},5635:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustMap=void 0;var r=n(7291),o=n(7103),i=n(4935),s=n(4990);t.exhaustMap=function e(t,n){return n?function(i){return i.pipe(e((function(e,i){return o.innerFrom(t(e,i)).pipe(r.map((function(t,r){return n(e,t,i,r)})))})))}:i.operate((function(e,n){var r=0,i=null,a=!1;e.subscribe(s.createOperatorSubscriber(n,(function(e){i||(i=s.createOperatorSubscriber(n,void 0,(function(){i=null,a&&n.complete()})),o.innerFrom(t(e,r++)).subscribe(i))}),(function(){a=!0,!i&&n.complete()})))}))}},9745:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.expand=void 0;var r=n(4935),o=n(7788);t.expand=function(e,t,n){return void 0===t&&(t=1/0),t=(t||0)<1?1/0:t,r.operate((function(r,i){return o.mergeInternals(r,i,e,t,void 0,!0,n)}))}},9154:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.filter=void 0;var r=n(4935),o=n(4990);t.filter=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){return e.call(t,n,i++)&&r.next(n)})))}))}},9283:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.finalize=void 0;var r=n(4935);t.finalize=function(e){return r.operate((function(t,n){try{t.subscribe(n)}finally{n.add(e)}}))}},7119:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createFind=t.find=void 0;var r=n(4935),o=n(4990);function i(e,t,n){var r="index"===n;return function(n,i){var s=0;n.subscribe(o.createOperatorSubscriber(i,(function(o){var a=s++;e.call(t,o,a,n)&&(i.next(r?a:o),i.complete())}),(function(){i.next(r?-1:void 0),i.complete()})))}}t.find=function(e,t){return r.operate(i(e,t,"value"))},t.createFind=i},4706:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.findIndex=void 0;var r=n(4935),o=n(7119);t.findIndex=function(e,t){return r.operate(o.createFind(e,t,"index"))}},9219:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var r=n(9474),o=n(9154),i=n(4783),s=n(1658),a=n(1779),u=n(4781);t.first=function(e,t){var n=arguments.length>=2;return function(c){return c.pipe(e?o.filter((function(t,n){return e(t,n,c)})):u.identity,i.take(1),n?s.defaultIfEmpty(t):a.throwIfEmpty((function(){return new r.EmptyError})))}}},1788:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.flatMap=void 0;var r=n(9475);t.flatMap=r.mergeMap},9749:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.groupBy=void 0;var r=n(2419),o=n(7103),i=n(3032),s=n(4935),a=n(4990);t.groupBy=function(e,t,n,u){return s.operate((function(s,c){var l;t&&"function"!=typeof t?(n=t.duration,l=t.element,u=t.connector):l=t;var f=new Map,d=function(e){f.forEach(e),e(c)},p=function(e){return d((function(t){return t.error(e)}))},h=0,v=!1,y=new a.OperatorSubscriber(c,(function(t){try{var s=e(t),d=f.get(s);if(!d){f.set(s,d=u?u():new i.Subject);var g=(m=s,_=d,(w=new r.Observable((function(e){h++;var t=_.subscribe(e);return function(){t.unsubscribe(),0==--h&&v&&y.unsubscribe()}}))).key=m,w);if(c.next(g),n){var b=a.createOperatorSubscriber(d,(function(){d.complete(),null==b||b.unsubscribe()}),void 0,void 0,(function(){return f.delete(s)}));y.add(o.innerFrom(n(g)).subscribe(b))}}d.next(l?l(t):t)}catch(e){p(e)}var m,_,w}),(function(){return d((function(e){return e.complete()}))}),p,(function(){return f.clear()}),(function(){return v=!0,0===h}));s.subscribe(y)}))}},9438:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ignoreElements=void 0;var r=n(4935),o=n(4990),i=n(2576);t.ignoreElements=function(){return r.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,i.noop))}))}},8515:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=void 0;var r=n(4935),o=n(4990);t.isEmpty=function(){return r.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,(function(){t.next(!1),t.complete()}),(function(){t.next(!0),t.complete()})))}))}},2069:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.joinAllInternals=void 0;var r=n(4781),o=n(1914),i=n(2872),s=n(9475),a=n(2);t.joinAllInternals=function(e,t){return i.pipe(a.toArray(),s.mergeMap((function(t){return e(t)})),t?o.mapOneOrManyArgs(t):r.identity)}},2435:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var r=n(9474),o=n(9154),i=n(1980),s=n(1779),a=n(1658),u=n(4781);t.last=function(e,t){var n=arguments.length>=2;return function(c){return c.pipe(e?o.filter((function(t,n){return e(t,n,c)})):u.identity,i.takeLast(1),n?a.defaultIfEmpty(t):s.throwIfEmpty((function(){return new r.EmptyError})))}}},7291:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.map=void 0;var r=n(4935),o=n(4990);t.map=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){r.next(e.call(t,n,i++))})))}))}},8313:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mapTo=void 0;var r=n(7291);t.mapTo=function(e){return r.map((function(){return e}))}},3209:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.materialize=void 0;var r=n(3104),o=n(4935),i=n(4990);t.materialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){t.next(r.Notification.createNext(e))}),(function(){t.next(r.Notification.createComplete()),t.complete()}),(function(e){t.next(r.Notification.createError(e)),t.complete()})))}))}},2620:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.max=void 0;var r=n(122),o=n(3005);t.max=function(e){return r.reduce(o.isFunction(e)?function(t,n){return e(t,n)>0?t:n}:function(e,t){return e>t?e:t})}},9821:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var i=n(4935),s=n(5498),a=n(3783),u=n(2433),c=n(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=u.popScheduler(e),l=u.popNumber(e,1/0);return e=s.argsOrArgArray(e),i.operate((function(t,i){a.mergeAll(l)(c.from(o([t],r(e)),n)).subscribe(i)}))}},3783:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeAll=void 0;var r=n(9475),o=n(4781);t.mergeAll=function(e){return void 0===e&&(e=1/0),r.mergeMap(o.identity,e)}},7788:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeInternals=void 0;var r=n(7103),o=n(7738),i=n(4990);t.mergeInternals=function(e,t,n,s,a,u,c,l){var f=[],d=0,p=0,h=!1,v=function(){!h||f.length||d||t.complete()},y=function(e){return d<s?g(e):f.push(e)},g=function(e){u&&t.next(e),d++;var l=!1;r.innerFrom(n(e,p++)).subscribe(i.createOperatorSubscriber(t,(function(e){null==a||a(e),u?y(e):t.next(e)}),(function(){l=!0}),void 0,(function(){if(l)try{d--;for(var e=function(){var e=f.shift();c?o.executeSchedule(t,c,(function(){return g(e)})):g(e)};f.length&&d<s;)e();v()}catch(e){t.error(e)}})))};return e.subscribe(i.createOperatorSubscriber(t,y,(function(){h=!0,v()}))),function(){null==l||l()}}},9475:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMap=void 0;var r=n(7291),o=n(7103),i=n(4935),s=n(7788),a=n(3005);t.mergeMap=function e(t,n,u){return void 0===u&&(u=1/0),a.isFunction(n)?e((function(e,i){return r.map((function(t,r){return n(e,t,i,r)}))(o.innerFrom(t(e,i)))}),u):("number"==typeof n&&(u=n),i.operate((function(e,n){return s.mergeInternals(e,n,t,u)})))}},1211:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMapTo=void 0;var r=n(9475),o=n(3005);t.mergeMapTo=function(e,t,n){return void 0===n&&(n=1/0),o.isFunction(t)?r.mergeMap((function(){return e}),t,n):("number"==typeof t&&(n=t),r.mergeMap((function(){return e}),n))}},7267:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeScan=void 0;var r=n(4935),o=n(7788);t.mergeScan=function(e,t,n){return void 0===n&&(n=1/0),r.operate((function(r,i){var s=t;return o.mergeInternals(r,i,(function(t,n){return e(s,t,n)}),n,(function(e){s=e}),!1,void 0,(function(){return s=null}))}))}},9303:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeWith=void 0;var i=n(9821);t.mergeWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.merge.apply(void 0,o([],r(e)))}},9714:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.min=void 0;var r=n(122),o=n(3005);t.min=function(e){return r.reduce(o.isFunction(e)?function(t,n){return e(t,n)<0?t:n}:function(e,t){return e<t?e:t})}},3848:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.multicast=void 0;var r=n(9518),o=n(3005),i=n(1995);t.multicast=function(e,t){var n=o.isFunction(e)?e:function(){return e};return o.isFunction(t)?i.connect(t,{connector:n}):function(e){return new r.ConnectableObservable(e,n)}}},1184:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeOn=void 0;var r=n(7738),o=n(4935),i=n(4990);t.observeOn=function(e,t){return void 0===t&&(t=0),o.operate((function(n,o){n.subscribe(i.createOperatorSubscriber(o,(function(n){return r.executeSchedule(o,e,(function(){return o.next(n)}),t)}),(function(){return r.executeSchedule(o,e,(function(){return o.complete()}),t)}),(function(n){return r.executeSchedule(o,e,(function(){return o.error(n)}),t)})))}))}},6223:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=void 0;var i=n(4935),s=n(7103),a=n(5498),u=n(4990),c=n(2576);t.onErrorResumeNext=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=a.argsOrArgArray(e);return i.operate((function(e,t){var i=o([e],r(n)),a=function(){if(!t.closed)if(i.length>0){var e=void 0;try{e=s.innerFrom(i.shift())}catch(e){return void a()}var n=u.createOperatorSubscriber(t,void 0,c.noop,c.noop);e.subscribe(n),n.add(a)}else t.complete()};a()}))}},2731:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairwise=void 0;var r=n(4935),o=n(4990);t.pairwise=function(){return r.operate((function(e,t){var n,r=!1;e.subscribe(o.createOperatorSubscriber(t,(function(e){var o=n;n=e,r&&t.next([o,e]),r=!0})))}))}},5649:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.partition=void 0;var r=n(8634),o=n(9154);t.partition=function(e,t){return function(n){return[o.filter(e,t)(n),o.filter(r.not(e,t))(n)]}}},4691:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pluck=void 0;var r=n(7291);t.pluck=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.length;if(0===n)throw new Error("list of properties cannot be empty.");return r.map((function(t){for(var r=t,o=0;o<n;o++){var i=null==r?void 0:r[e[o]];if(void 0===i)return;r=i}return r}))}},4474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publish=void 0;var r=n(3032),o=n(3848),i=n(1995);t.publish=function(e){return e?function(t){return i.connect(e)(t)}:function(e){return o.multicast(new r.Subject)(e)}}},52:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishBehavior=void 0;var r=n(5240),o=n(9518);t.publishBehavior=function(e){return function(t){var n=new r.BehaviorSubject(e);return new o.ConnectableObservable(t,(function(){return n}))}}},2110:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishLast=void 0;var r=n(280),o=n(9518);t.publishLast=function(){return function(e){var t=new r.AsyncSubject;return new o.ConnectableObservable(e,(function(){return t}))}}},9864:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishReplay=void 0;var r=n(3274),o=n(3848),i=n(3005);t.publishReplay=function(e,t,n,s){n&&!i.isFunction(n)&&(s=n);var a=i.isFunction(n)?n:void 0;return function(n){return o.multicast(new r.ReplaySubject(e,t,s),a)(n)}}},9764:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.race=void 0;var i=n(5498),s=n(179);t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.raceWith.apply(void 0,o([],r(i.argsOrArgArray(e))))}},179:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.raceWith=void 0;var i=n(5182),s=n(4935),a=n(4781);t.raceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?s.operate((function(t,n){i.raceInit(o([t],r(e)))(n)})):a.identity}},122:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reduce=void 0;var r=n(8345),o=n(4935);t.reduce=function(e,t){return o.operate(r.scanInternals(e,t,arguments.length>=2,!1,!0))}},8739:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.refCount=void 0;var r=n(4935),o=n(4990);t.refCount=function(){return r.operate((function(e,t){var n=null;e._refCount++;var r=o.createOperatorSubscriber(t,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)n=null;else{var r=e._connection,o=n;n=null,!r||o&&r!==o||r.unsubscribe(),t.unsubscribe()}}));e.subscribe(r),r.closed||(n=e.connect())}))}},5313:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=void 0;var r=n(6332),o=n(4935),i=n(4990),s=n(7103),a=n(7513);t.repeat=function(e){var t,n,u=1/0;return null!=e&&("object"==typeof e?(t=e.count,u=void 0===t?1/0:t,n=e.delay):u=e),u<=0?function(){return r.EMPTY}:o.operate((function(e,t){var r,o=0,c=function(){if(null==r||r.unsubscribe(),r=null,null!=n){var e="number"==typeof n?a.timer(n):s.innerFrom(n(o)),u=i.createOperatorSubscriber(t,(function(){u.unsubscribe(),l()}));e.subscribe(u)}else l()},l=function(){var n=!1;r=e.subscribe(i.createOperatorSubscriber(t,void 0,(function(){++o<u?r?c():n=!0:t.complete()}))),n&&c()};l()}))}},4068:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeatWhen=void 0;var r=n(3032),o=n(4935),i=n(4990);t.repeatWhen=function(e){return o.operate((function(t,n){var o,s,a=!1,u=!1,c=!1,l=function(){return c&&u&&(n.complete(),!0)},f=function(){c=!1,o=t.subscribe(i.createOperatorSubscriber(n,void 0,(function(){c=!0,!l()&&(s||(s=new r.Subject,e(s).subscribe(i.createOperatorSubscriber(n,(function(){o?f():a=!0}),(function(){u=!0,l()})))),s).next()}))),a&&(o.unsubscribe(),o=null,a=!1,f())};f()}))}},64:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retry=void 0;var r=n(4935),o=n(4990),i=n(4781),s=n(7513),a=n(7103);t.retry=function(e){var t;void 0===e&&(e=1/0);var n=(t=e&&"object"==typeof e?e:{count:e}).count,u=void 0===n?1/0:n,c=t.delay,l=t.resetOnSuccess,f=void 0!==l&&l;return u<=0?i.identity:r.operate((function(e,t){var n,r=0,i=function(){var l=!1;n=e.subscribe(o.createOperatorSubscriber(t,(function(e){f&&(r=0),t.next(e)}),void 0,(function(e){if(r++<u){var f=function(){n?(n.unsubscribe(),n=null,i()):l=!0};if(null!=c){var d="number"==typeof c?s.timer(c):a.innerFrom(c(e,r)),p=o.createOperatorSubscriber(t,(function(){p.unsubscribe(),f()}),(function(){t.complete()}));d.subscribe(p)}else f()}else t.error(e)}))),l&&(n.unsubscribe(),n=null,i())};i()}))}},1188:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retryWhen=void 0;var r=n(3032),o=n(4935),i=n(4990);t.retryWhen=function(e){return o.operate((function(t,n){var o,s,a=!1,u=function(){o=t.subscribe(i.createOperatorSubscriber(n,void 0,void 0,(function(t){s||(s=new r.Subject,e(s).subscribe(i.createOperatorSubscriber(n,(function(){return o?u():a=!0})))),s&&s.next(t)}))),a&&(o.unsubscribe(),o=null,a=!1,u())};u()}))}},4193:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sample=void 0;var r=n(4935),o=n(2576),i=n(4990);t.sample=function(e){return r.operate((function(t,n){var r=!1,s=null;t.subscribe(i.createOperatorSubscriber(n,(function(e){r=!0,s=e}))),e.subscribe(i.createOperatorSubscriber(n,(function(){if(r){r=!1;var e=s;s=null,n.next(e)}}),o.noop))}))}},6170:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sampleTime=void 0;var r=n(2445),o=n(4193),i=n(8990);t.sampleTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.sample(i.interval(e,t))}},5876:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scan=void 0;var r=n(4935),o=n(8345);t.scan=function(e,t){return r.operate(o.scanInternals(e,t,arguments.length>=2,!0))}},8345:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scanInternals=void 0;var r=n(4990);t.scanInternals=function(e,t,n,o,i){return function(s,a){var u=n,c=t,l=0;s.subscribe(r.createOperatorSubscriber(a,(function(t){var n=l++;c=u?e(c,t,n):(u=!0,t),o&&a.next(c)}),i&&function(){u&&a.next(c),a.complete()}))}}},1791:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sequenceEqual=void 0;var r=n(4935),o=n(4990);t.sequenceEqual=function(e,t){return void 0===t&&(t=function(e,t){return e===t}),r.operate((function(n,r){var i={buffer:[],complete:!1},s={buffer:[],complete:!1},a=function(e){r.next(e),r.complete()},u=function(e,n){var i=o.createOperatorSubscriber(r,(function(r){var o=n.buffer,i=n.complete;0===o.length?i?a(!1):e.buffer.push(r):!t(r,o.shift())&&a(!1)}),(function(){e.complete=!0;var t=n.complete,r=n.buffer;t&&a(0===r.length),null==i||i.unsubscribe()}));return i};n.subscribe(u(i,s)),e.subscribe(u(s,i))}))}},5137:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.share=void 0;var i=n(5432),s=n(4783),a=n(3032),u=n(5125),c=n(4935);function l(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];return!0===t?(e(),null):!1===t?null:t.apply(void 0,o([],r(n))).pipe(s.take(1)).subscribe((function(){return e()}))}t.share=function(e){void 0===e&&(e={});var t=e.connector,n=void 0===t?function(){return new a.Subject}:t,r=e.resetOnError,o=void 0===r||r,s=e.resetOnComplete,f=void 0===s||s,d=e.resetOnRefCountZero,p=void 0===d||d;return function(e){var t=null,r=null,s=null,a=0,d=!1,h=!1,v=function(){null==r||r.unsubscribe(),r=null},y=function(){v(),t=s=null,d=h=!1},g=function(){var e=t;y(),null==e||e.unsubscribe()};return c.operate((function(e,c){a++,h||d||v();var b=s=null!=s?s:n();c.add((function(){0!=--a||h||d||(r=l(g,p))})),b.subscribe(c),t||(t=new u.SafeSubscriber({next:function(e){return b.next(e)},error:function(e){h=!0,v(),r=l(y,o,e),b.error(e)},complete:function(){d=!0,v(),r=l(y,f),b.complete()}}),i.from(e).subscribe(t))}))(e)}}},1348:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.shareReplay=void 0;var r=n(3274),o=n(5137);t.shareReplay=function(e,t,n){var i,s,a,u=!1;return e&&"object"==typeof e?(a=null!==(i=e.bufferSize)&&void 0!==i?i:1/0,t=null!==(s=e.windowTime)&&void 0!==s?s:1/0,u=!!e.refCount,n=e.scheduler):a=null!=e?e:1/0,o.share({connector:function(){return new r.ReplaySubject(a,t,n)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:u})}},8242:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.single=void 0;var r=n(9474),o=n(6156),i=n(8598),s=n(4935),a=n(4990);t.single=function(e){return s.operate((function(t,n){var s,u=!1,c=!1,l=0;t.subscribe(a.createOperatorSubscriber(n,(function(r){c=!0,e&&!e(r,l++,t)||(u&&n.error(new o.SequenceError("Too many matching values")),u=!0,s=r)}),(function(){u?(n.next(s),n.complete()):n.error(c?new i.NotFoundError("No matching values"):new r.EmptyError)})))}))}},3169:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skip=void 0;var r=n(9154);t.skip=function(e){return r.filter((function(t,n){return e<=n}))}},2454:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipLast=void 0;var r=n(4781),o=n(4935),i=n(4990);t.skipLast=function(e){return e<=0?r.identity:o.operate((function(t,n){var r=new Array(e),o=0;return t.subscribe(i.createOperatorSubscriber(n,(function(t){var i=o++;if(i<e)r[i]=t;else{var s=i%e,a=r[s];r[s]=t,n.next(a)}}))),function(){r=null}}))}},6931:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipUntil=void 0;var r=n(4935),o=n(4990),i=n(7103),s=n(2576);t.skipUntil=function(e){return r.operate((function(t,n){var r=!1,a=o.createOperatorSubscriber(n,(function(){null==a||a.unsubscribe(),r=!0}),s.noop);i.innerFrom(e).subscribe(a),t.subscribe(o.createOperatorSubscriber(n,(function(e){return r&&n.next(e)})))}))}},7913:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipWhile=void 0;var r=n(4935),o=n(4990);t.skipWhile=function(e){return r.operate((function(t,n){var r=!1,i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){return(r||(r=!e(t,i++)))&&n.next(t)})))}))}},9234:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.startWith=void 0;var r=n(2239),o=n(2433),i=n(4935);t.startWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=o.popScheduler(e);return i.operate((function(t,o){(n?r.concat(e,t,n):r.concat(e,t)).subscribe(o)}))}},276:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subscribeOn=void 0;var r=n(4935);t.subscribeOn=function(e,t){return void 0===t&&(t=0),r.operate((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}},9253:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchAll=void 0;var r=n(8518),o=n(4781);t.switchAll=function(){return r.switchMap(o.identity)}},8518:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMap=void 0;var r=n(7103),o=n(4935),i=n(4990);t.switchMap=function(e,t){return o.operate((function(n,o){var s=null,a=0,u=!1,c=function(){return u&&!s&&o.complete()};n.subscribe(i.createOperatorSubscriber(o,(function(n){null==s||s.unsubscribe();var u=0,l=a++;r.innerFrom(e(n,l)).subscribe(s=i.createOperatorSubscriber(o,(function(e){return o.next(t?t(n,e,l,u++):e)}),(function(){s=null,c()})))}),(function(){u=!0,c()})))}))}},1173:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMapTo=void 0;var r=n(8518),o=n(3005);t.switchMapTo=function(e,t){return o.isFunction(t)?r.switchMap((function(){return e}),t):r.switchMap((function(){return e}))}},3855:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchScan=void 0;var r=n(8518),o=n(4935);t.switchScan=function(e,t){return o.operate((function(n,o){var i=t;return r.switchMap((function(t,n){return e(i,t,n)}),(function(e,t){return i=t,t}))(n).subscribe(o),function(){i=null}}))}},4783:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.take=void 0;var r=n(6332),o=n(4935),i=n(4990);t.take=function(e){return e<=0?function(){return r.EMPTY}:o.operate((function(t,n){var r=0;t.subscribe(i.createOperatorSubscriber(n,(function(t){++r<=e&&(n.next(t),e<=r&&n.complete())})))}))}},1980:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.takeLast=void 0;var o=n(6332),i=n(4935),s=n(4990);t.takeLast=function(e){return e<=0?function(){return o.EMPTY}:i.operate((function(t,n){var o=[];t.subscribe(s.createOperatorSubscriber(n,(function(t){o.push(t),e<o.length&&o.shift()}),(function(){var e,t;try{for(var i=r(o),s=i.next();!s.done;s=i.next()){var a=s.value;n.next(a)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}n.complete()}),void 0,(function(){o=null})))}))}},9845:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeUntil=void 0;var r=n(4935),o=n(4990),i=n(7103),s=n(2576);t.takeUntil=function(e){return r.operate((function(t,n){i.innerFrom(e).subscribe(o.createOperatorSubscriber(n,(function(){return n.complete()}),s.noop)),!n.closed&&t.subscribe(n)}))}},6060:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeWhile=void 0;var r=n(4935),o=n(4990);t.takeWhile=function(e,t){return void 0===t&&(t=!1),r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){var o=e(n,i++);(o||t)&&r.next(n),!o&&r.complete()})))}))}},1138:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tap=void 0;var r=n(3005),o=n(4935),i=n(4990),s=n(4781);t.tap=function(e,t,n){var a=r.isFunction(e)||t||n?{next:e,error:t,complete:n}:e;return a?o.operate((function(e,t){var n;null===(n=a.subscribe)||void 0===n||n.call(a);var r=!0;e.subscribe(i.createOperatorSubscriber(t,(function(e){var n;null===(n=a.next)||void 0===n||n.call(a,e),t.next(e)}),(function(){var e;r=!1,null===(e=a.complete)||void 0===e||e.call(a),t.complete()}),(function(e){var n;r=!1,null===(n=a.error)||void 0===n||n.call(a,e),t.error(e)}),(function(){var e,t;r&&(null===(e=a.unsubscribe)||void 0===e||e.call(a)),null===(t=a.finalize)||void 0===t||t.call(a)})))})):s.identity}},7306:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttle=t.defaultThrottleConfig=void 0;var r=n(4935),o=n(4990),i=n(7103);t.defaultThrottleConfig={leading:!0,trailing:!1},t.throttle=function(e,n){return void 0===n&&(n=t.defaultThrottleConfig),r.operate((function(t,r){var s=n.leading,a=n.trailing,u=!1,c=null,l=null,f=!1,d=function(){null==l||l.unsubscribe(),l=null,a&&(v(),f&&r.complete())},p=function(){l=null,f&&r.complete()},h=function(t){return l=i.innerFrom(e(t)).subscribe(o.createOperatorSubscriber(r,d,p))},v=function(){if(u){u=!1;var e=c;c=null,r.next(e),!f&&h(e)}};t.subscribe(o.createOperatorSubscriber(r,(function(e){u=!0,c=e,(!l||l.closed)&&(s?v():h(e))}),(function(){f=!0,(!(a&&u&&l)||l.closed)&&r.complete()})))}))}},8968:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttleTime=void 0;var r=n(2445),o=n(7306),i=n(7513);t.throttleTime=function(e,t,n){void 0===t&&(t=r.asyncScheduler),void 0===n&&(n=o.defaultThrottleConfig);var s=i.timer(e,t);return o.throttle((function(){return s}),n)}},1779:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfEmpty=void 0;var r=n(9474),o=n(4935),i=n(4990);function s(){return new r.EmptyError}t.throwIfEmpty=function(e){return void 0===e&&(e=s),o.operate((function(t,n){var r=!1;t.subscribe(i.createOperatorSubscriber(n,(function(e){r=!0,n.next(e)}),(function(){return r?n.complete():n.error(e())})))}))}},8005:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeInterval=t.timeInterval=void 0;var r=n(2445),o=n(4935),i=n(4990);t.timeInterval=function(e){return void 0===e&&(e=r.asyncScheduler),o.operate((function(t,n){var r=e.now();t.subscribe(i.createOperatorSubscriber(n,(function(t){var o=e.now(),i=o-r;r=o,n.next(new s(t,i))})))}))};var s=function(e,t){this.value=e,this.interval=t};t.TimeInterval=s},4173:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeout=t.TimeoutError=void 0;var r=n(2445),o=n(1677),i=n(4935),s=n(7103),a=n(7029),u=n(4990),c=n(7738);function l(e){throw new t.TimeoutError(e)}t.TimeoutError=a.createErrorClass((function(e){return function(t){void 0===t&&(t=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=t}})),t.timeout=function(e,t){var n=o.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,a=n.first,f=n.each,d=n.with,p=void 0===d?l:d,h=n.scheduler,v=void 0===h?null!=t?t:r.asyncScheduler:h,y=n.meta,g=void 0===y?null:y;if(null==a&&null==f)throw new TypeError("No timeout provided.");return i.operate((function(e,t){var n,r,o=null,i=0,l=function(e){r=c.executeSchedule(t,v,(function(){try{n.unsubscribe(),s.innerFrom(p({meta:g,lastValue:o,seen:i})).subscribe(t)}catch(e){t.error(e)}}),e)};n=e.subscribe(u.createOperatorSubscriber(t,(function(e){null==r||r.unsubscribe(),i++,t.next(o=e),f>0&&l(f)}),void 0,void 0,(function(){(null==r?void 0:r.closed)||null==r||r.unsubscribe(),o=null}))),l(null!=a?"number"==typeof a?a:+a-v.now():f)}))}},7223:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutWith=void 0;var r=n(2445),o=n(1677),i=n(4173);t.timeoutWith=function(e,t,n){var s,a,u;if(n=null!=n?n:r.async,o.isValidDate(e)?s=e:"number"==typeof e&&(a=e),!t)throw new TypeError("No observable provided to switch to");if(u=function(){return t},null==s&&null==a)throw new TypeError("No timeout provided.");return i.timeout({first:s,each:a,scheduler:n,with:u})}},8975:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timestamp=void 0;var r=n(7950),o=n(7291);t.timestamp=function(e){return void 0===e&&(e=r.dateTimestampProvider),o.map((function(t){return{value:t,timestamp:e.now()}}))}},2:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toArray=void 0;var r=n(122),o=n(4935),i=function(e,t){return e.push(t),e};t.toArray=function(){return o.operate((function(e,t){r.reduce(i,[])(e).subscribe(t)}))}},2826:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.window=void 0;var r=n(3032),o=n(4935),i=n(4990),s=n(2576);t.window=function(e){return o.operate((function(t,n){var o=new r.Subject;n.next(o.asObservable());var a=function(e){o.error(e),n.error(e)};return t.subscribe(i.createOperatorSubscriber(n,(function(e){return null==o?void 0:o.next(e)}),(function(){o.complete(),n.complete()}),a)),e.subscribe(i.createOperatorSubscriber(n,(function(){o.complete(),n.next(o=new r.Subject)}),s.noop,a)),function(){null==o||o.unsubscribe(),o=null}}))}},7526:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowCount=void 0;var o=n(3032),i=n(4935),s=n(4990);t.windowCount=function(e,t){void 0===t&&(t=0);var n=t>0?t:e;return i.operate((function(t,i){var a=[new o.Subject],u=0;i.next(a[0].asObservable()),t.subscribe(s.createOperatorSubscriber(i,(function(t){var s,c;try{for(var l=r(a),f=l.next();!f.done;f=l.next())f.value.next(t)}catch(e){s={error:e}}finally{try{f&&!f.done&&(c=l.return)&&c.call(l)}finally{if(s)throw s.error}}var d=u-e+1;if(d>=0&&d%n==0&&a.shift().complete(),++u%n==0){var p=new o.Subject;a.push(p),i.next(p.asObservable())}}),(function(){for(;a.length>0;)a.shift().complete();i.complete()}),(function(e){for(;a.length>0;)a.shift().error(e);i.error(e)}),(function(){a=null})))}))}},8294:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowTime=void 0;var r=n(3032),o=n(2445),i=n(3865),s=n(4935),a=n(4990),u=n(6967),c=n(2433),l=n(7738);t.windowTime=function(e){for(var t,n,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(t=c.popScheduler(f))&&void 0!==t?t:o.asyncScheduler,h=null!==(n=f[0])&&void 0!==n?n:null,v=f[1]||1/0;return s.operate((function(t,n){var o=[],s=!1,c=function(e){var t=e.window,n=e.subs;t.complete(),n.unsubscribe(),u.arrRemove(o,e),s&&f()},f=function(){if(o){var t=new i.Subscription;n.add(t);var s=new r.Subject,a={window:s,subs:t,seen:0};o.push(a),n.next(s.asObservable()),l.executeSchedule(t,p,(function(){return c(a)}),e)}};null!==h&&h>=0?l.executeSchedule(n,p,f,h,!0):s=!0,f();var d=function(e){return o.slice().forEach(e)},y=function(e){d((function(t){var n=t.window;return e(n)})),e(n),n.unsubscribe()};return t.subscribe(a.createOperatorSubscriber(n,(function(e){d((function(t){t.window.next(e),v<=++t.seen&&c(t)}))}),(function(){return y((function(e){return e.complete()}))}),(function(e){return y((function(t){return t.error(e)}))}))),function(){o=null}}))}},1883:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowToggle=void 0;var o=n(3032),i=n(3865),s=n(4935),a=n(7103),u=n(4990),c=n(2576),l=n(6967);t.windowToggle=function(e,t){return s.operate((function(n,s){var f=[],d=function(e){for(;0<f.length;)f.shift().error(e);s.error(e)};a.innerFrom(e).subscribe(u.createOperatorSubscriber(s,(function(e){var n=new o.Subject;f.push(n);var r,p=new i.Subscription;try{r=a.innerFrom(t(e))}catch(e){return void d(e)}s.next(n.asObservable()),p.add(r.subscribe(u.createOperatorSubscriber(s,(function(){l.arrRemove(f,n),n.complete(),p.unsubscribe()}),c.noop,d)))}),c.noop)),n.subscribe(u.createOperatorSubscriber(s,(function(e){var t,n,o=f.slice();try{for(var i=r(o),s=i.next();!s.done;s=i.next())s.value.next(e)}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}}),(function(){for(;0<f.length;)f.shift().complete();s.complete()}),d,(function(){for(;0<f.length;)f.shift().unsubscribe()})))}))}},4309:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowWhen=void 0;var r=n(3032),o=n(4935),i=n(4990),s=n(7103);t.windowWhen=function(e){return o.operate((function(t,n){var o,a,u=function(e){o.error(e),n.error(e)},c=function(){var t;null==a||a.unsubscribe(),null==o||o.complete(),o=new r.Subject,n.next(o.asObservable());try{t=s.innerFrom(e())}catch(e){return void u(e)}t.subscribe(a=i.createOperatorSubscriber(n,c,c,u))};c(),t.subscribe(i.createOperatorSubscriber(n,(function(e){return o.next(e)}),(function(){o.complete(),n.complete()}),u,(function(){null==a||a.unsubscribe(),o=null})))}))}},3041:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.withLatestFrom=void 0;var i=n(4935),s=n(4990),a=n(7103),u=n(4781),c=n(2576),l=n(2433);t.withLatestFrom=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=l.popResultSelector(e);return i.operate((function(t,i){for(var l=e.length,f=new Array(l),d=e.map((function(){return!1})),p=!1,h=function(t){a.innerFrom(e[t]).subscribe(s.createOperatorSubscriber(i,(function(e){f[t]=e,p||d[t]||(d[t]=!0,(p=d.every(u.identity))&&(d=null))}),c.noop))},v=0;v<l;v++)h(v);t.subscribe(s.createOperatorSubscriber(i,(function(e){if(p){var t=o([e],r(f));i.next(n?n.apply(void 0,o([],r(t))):t)}})))}))}},4400:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=n(7654),s=n(4935);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.operate((function(t,n){i.zip.apply(void 0,o([t],r(e))).subscribe(n)}))}},8593:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.zipAll=void 0;var r=n(7654),o=n(2069);t.zipAll=function(e){return o.joinAllInternals(r.zip,e)}},8096:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zipWith=void 0;var i=n(4400);t.zipWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.zip.apply(void 0,o([],r(e)))}},7631:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleArray=void 0;var r=n(2419);t.scheduleArray=function(e,t){return new r.Observable((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}},8489:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleAsyncIterable=void 0;var r=n(2419),o=n(7738);t.scheduleAsyncIterable=function(e,t){if(!e)throw new Error("Iterable cannot be null");return new r.Observable((function(n){o.executeSchedule(n,t,(function(){var r=e[Symbol.asyncIterator]();o.executeSchedule(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}},1297:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleIterable=void 0;var r=n(2419),o=n(3725),i=n(3005),s=n(7738);t.scheduleIterable=function(e,t){return new r.Observable((function(n){var r;return s.executeSchedule(n,t,(function(){r=e[o.iterator](),s.executeSchedule(n,t,(function(){var e,t,o;try{t=(e=r.next()).value,o=e.done}catch(e){return void n.error(e)}o?n.complete():n.next(t)}),0,!0)})),function(){return i.isFunction(null==r?void 0:r.return)&&r.return()}}))}},4001:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleObservable=void 0;var r=n(7103),o=n(1184),i=n(276);t.scheduleObservable=function(e,t){return r.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},5143:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.schedulePromise=void 0;var r=n(7103),o=n(1184),i=n(276);t.schedulePromise=function(e,t){return r.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},3676:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleReadableStreamLike=void 0;var r=n(8489),o=n(7823);t.scheduleReadableStreamLike=function(e,t){return r.scheduleAsyncIterable(o.readableStreamLikeToAsyncGenerator(e),t)}},5207:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduled=void 0;var r=n(4001),o=n(5143),i=n(7631),s=n(1297),a=n(8489),u=n(9500),c=n(6018),l=n(3909),f=n(2743),d=n(9595),p=n(9906),h=n(7823),v=n(3676);t.scheduled=function(e,t){if(null!=e){if(u.isInteropObservable(e))return r.scheduleObservable(e,t);if(l.isArrayLike(e))return i.scheduleArray(e,t);if(c.isPromise(e))return o.schedulePromise(e,t);if(d.isAsyncIterable(e))return a.scheduleAsyncIterable(e,t);if(f.isIterable(e))return s.scheduleIterable(e,t);if(h.isReadableStreamLike(e))return v.scheduleReadableStreamLike(e,t)}throw p.createInvalidObservableTypeError(e)}},1986:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0;var i=function(e){function t(t,n){return e.call(this)||this}return o(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(n(3865).Subscription);t.Action=i},9702:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncAction=void 0;var i=n(1986),s=n(8203),a=n(6967),u=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return o(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),s.intervalProvider.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;s.intervalProvider.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,a.arrRemove(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(i.Action);t.AsyncAction=u},3643:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncScheduler=void 0;var i=n(218),s=function(e){function t(t,n){void 0===n&&(n=i.Scheduler.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return o(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(i.Scheduler);t.AsyncScheduler=s},2445:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.async=t.asyncScheduler=void 0;var r=n(9702),o=n(3643);t.asyncScheduler=new o.AsyncScheduler(r.AsyncAction),t.async=t.asyncScheduler},7950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dateTimestampProvider=void 0,t.dateTimestampProvider={now:function(){return(t.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8203:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},r=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.intervalProvider=void 0,t.intervalProvider={setInterval:function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];var i=t.intervalProvider.delegate;return((null==i?void 0:i.setInterval)||setInterval).apply(void 0,r([],n(e)))},clearInterval:function(e){var n=t.intervalProvider.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(e)},delegate:void 0}},4590:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},r=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutProvider=void 0,t.timeoutProvider={setTimeout:function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];var i=t.timeoutProvider.delegate;return((null==i?void 0:i.setTimeout)||setTimeout).apply(void 0,r([],n(e)))},clearTimeout:function(e){var n=t.timeoutProvider.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,t)=>{function n(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(t,"__esModule",{value:!0}),t.iterator=t.getSymbolIterator=void 0,t.getSymbolIterator=n,t.iterator=n()},2801:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observable=void 0,t.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},2351:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ArgumentOutOfRangeError=void 0;var r=n(7029);t.ArgumentOutOfRangeError=r.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyError=void 0;var r=n(7029);t.EmptyError=r.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},8598:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundError=void 0;var r=n(7029);t.NotFoundError=r.createErrorClass((function(e){return function(t){e(this),this.name="NotFoundError",this.message=t}}))},2642:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectUnsubscribedError=void 0;var r=n(7029);t.ObjectUnsubscribedError=r.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SequenceError=void 0;var r=n(7029);t.SequenceError=r.createErrorClass((function(e){return function(t){e(this),this.name="SequenceError",this.message=t}}))},4805:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnsubscriptionError=void 0;var r=n(7029);t.UnsubscriptionError=r.createErrorClass((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}))},2433:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.popNumber=t.popScheduler=t.popResultSelector=void 0;var r=n(3005),o=n(9016);function i(e){return e[e.length-1]}t.popResultSelector=function(e){return r.isFunction(i(e))?e.pop():void 0},t.popScheduler=function(e){return o.isScheduler(i(e))?e.pop():void 0},t.popNumber=function(e,t){return"number"==typeof i(e)?e.pop():t}},1203:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsArgArrayOrObject=void 0;var n=Array.isArray,r=Object.getPrototypeOf,o=Object.prototype,i=Object.keys;t.argsArgArrayOrObject=function(e){if(1===e.length){var t=e[0];if(n(t))return{args:t,keys:null};if((a=t)&&"object"==typeof a&&r(a)===o){var s=i(t);return{args:s.map((function(e){return t[e]})),keys:s}}}var a;return{args:e,keys:null}}},5498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsOrArgArray=void 0;var n=Array.isArray;t.argsOrArgArray=function(e){return 1===e.length&&n(e[0])?e[0]:e}},6967:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arrRemove=void 0,t.arrRemove=function(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}},7029:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createErrorClass=void 0,t.createErrorClass=function(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}},641:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createObject=void 0,t.createObject=function(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}},6110:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.captureError=t.errorContext=void 0;var r=n(3280),o=null;t.errorContext=function(e){if(r.config.useDeprecatedSynchronousErrorHandling){var t=!o;if(t&&(o={errorThrown:!1,error:null}),e(),t){var n=o,i=n.errorThrown,s=n.error;if(o=null,i)throw s}}else e()},t.captureError=function(e){r.config.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=e)}},7738:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.executeSchedule=void 0,t.executeSchedule=function(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}},4781:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.identity=void 0,t.identity=function(e){return e}},3909:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArrayLike=void 0,t.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isAsyncIterable=void 0;var r=n(3005);t.isAsyncIterable=function(e){return Symbol.asyncIterator&&r.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValidDate=void 0,t.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=void 0,t.isFunction=function(e){return"function"==typeof e}},9500:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isInteropObservable=void 0;var r=n(2801),o=n(3005);t.isInteropObservable=function(e){return o.isFunction(e[r.observable])}},2743:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isIterable=void 0;var r=n(3725),o=n(3005);t.isIterable=function(e){return o.isFunction(null==e?void 0:e[r.iterator])}},6018:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isPromise=void 0;var r=n(3005);t.isPromise=function(e){return r.isFunction(null==e?void 0:e.then)}},7823:function(e,t,n){var r=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},i=this&&this.__asyncGenerator||function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),s=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){s.push([e,t,n,r])>1||u(e,t)}))})}function u(e,t){try{(n=i[e](t)).value instanceof o?Promise.resolve(n.value.v).then(c,l):f(s[0][2],n)}catch(e){f(s[0][3],e)}var n}function c(e){u("next",e)}function l(e){u("throw",e)}function f(e,t){e(t),s.shift(),s.length&&u(s[0][0],s[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.isReadableStreamLike=t.readableStreamLikeToAsyncGenerator=void 0;var s=n(3005);t.readableStreamLikeToAsyncGenerator=function(e){return i(this,arguments,(function(){var t,n,i;return r(this,(function(r){switch(r.label){case 0:t=e.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,o(t.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,o(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,o(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))},t.isReadableStreamLike=function(e){return s.isFunction(null==e?void 0:e.getReader)}},9016:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isScheduler=void 0;var r=n(3005);t.isScheduler=function(e){return e&&r.isFunction(e.schedule)}},4935:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.operate=t.hasLift=void 0;var r=n(3005);function o(e){return r.isFunction(null==e?void 0:e.lift)}t.hasLift=o,t.operate=function(e){return function(t){if(o(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mapOneOrManyArgs=void 0;var i=n(7291),s=Array.isArray;t.mapOneOrManyArgs=function(e){return i.map((function(t){return function(e,t){return s(t)?e.apply(void 0,o([],r(t))):e(t)}(e,t)}))}},2576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.noop=void 0,t.noop=function(){}},8634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0,t.not=function(e,t){return function(n,r){return!e.call(t,n,r)}}},2872:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pipeFromArray=t.pipe=void 0;var r=n(4781);function o(e){return 0===e.length?r.identity:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o(e)},t.pipeFromArray=o},7968:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reportUnhandledError=void 0;var r=n(3280),o=n(4590);t.reportUnhandledError=function(e){o.timeoutProvider.setTimeout((function(){var t=r.config.onUnhandledError;if(!t)throw e;t(e)}))}},9906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createInvalidObservableTypeError=void 0,t.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},4857:(e,t,n)=>{t.BN=void 0;n(6474),n(5382),n(9715),n(3814),n(7211),n(4943),n(1240),n(9548),n(2128),n(3240),n(6318),n(5024),n(4919),n(4413),n(7498),n(6109),n(9664),n(1995),n(993),n(496),n(1385),n(1658),n(5841),n(8798),n(1080),n(3054),n(8737),n(7957),n(8633),n(911),n(2096),n(67),n(5337),n(5635),n(9745),n(9154),n(9283),n(7119),n(4706),n(9219),n(9749),n(9438),n(8515),n(2435),n(7291),n(8313),n(3209),n(2620),n(9821),n(3783),n(1788),n(9475),n(1211),n(7267),n(9303),n(9714),n(3848),n(1184),n(6223),n(2731),n(5649),n(4691),n(4474),n(52),n(2110),n(9864),n(9764),n(179),n(122),n(5313),n(4068),n(64),n(1188),n(8739),n(4193),n(6170),n(5876),n(1791);var r=n(5137);Object.defineProperty(t,"BN",{enumerable:!0,get:function(){return r.share}});n(1348),n(8242),n(3169),n(2454),n(6931),n(7913),n(9234),n(276),n(9253),n(8518),n(1173),n(3855),n(4783),n(1980),n(9845),n(6060),n(1138),n(7306),n(8968),n(1779),n(8005),n(4173),n(7223),n(8975),n(2),n(2826),n(7526),n(8294),n(1883),n(4309),n(3041),n(4400),n(8593),n(8096)},9137:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EClaimType=void 0,(n=t.EClaimType||(t.EClaimType={}))[n.SIGNED_CONTENT=1e3]="SIGNED_CONTENT",n[n.COMPANY_INFO=2e3]="COMPANY_INFO",n[n.VALIDATORS=2001]="VALIDATORS",n[n.USERS=2002]="USERS"},8922:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EDIDAccessLevel=void 0,(n=t.EDIDAccessLevel||(t.EDIDAccessLevel={})).NONE="0",n.MANAGEMENT_KEY="1",n.ACTION_KEY="2",n.CLAIM_SIGNER_KEY="3",n.ENCRYPTION_KEY="4"},3244:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EMimeType=void 0,(n=t.EMimeType||(t.EMimeType={})).AAC="audio/aac",n.ABW="application/x-abiword",n.ARC="application/x-freearc",n.AVI="video/x-msvideo",n.AZW="application/vnd.amazon.ebook",n.BIN="application/octet-stream",n.BMP="image/bmp",n.BZ="application/x-bzip",n.BZ2="application/x-bzip2",n.CSH="application/x-csh",n.CSS="text/css",n.CSV="text/csv",n.DOC="application/msword",n.DOCX="application/vnd.openxmlformats-officedocument.wordprocessingml.document",n.EOT="application/vnd.ms-fontobject",n.EPUB="application/epub+zip",n.GZ="application/gzip",n.GIF="image/gif",n.HTM="text/html",n.HTML="text/html",n.ICO="image/vnd.microsoft.icon",n.ICS="text/calendar",n.JAR="application/java-archive",n.JPEG=".jpg",n.JS="text/javascript",n.JSON="application/json",n.JSONLD="application/ld+json",n.MID=".midi",n.MJS="text/javascript",n.MP3="audio/mpeg",n.MPEG="video/mpeg",n.MPKG="application/vnd.apple.installer+xml",n.ODP="application/vnd.oasis.opendocument.presentation",n.ODS="application/vnd.oasis.opendocument.spreadsheet",n.ODT="application/vnd.oasis.opendocument.text",n.OGA="audio/ogg",n.OGV="video/ogg",n.OGX="application/ogg",n.OPUS="audio/opus",n.OTF="font/otf",n.PNG="image/png",n.PDF="application/pdf",n.PHP="application/php",n.PPT="application/vnd.ms-powerpoint",n.PPTX="application/vnd.openxmlformats-officedocument.presentationml.presentation",n.RAR="application/vnd.rar",n.RTF="application/rtf",n.SH="application/x-sh",n.SVG="image/svg+xml",n.SWF="application/x-shockwave-flash",n.TAR="application/x-tar",n.TIF="image/tiff",n.TIFF="image/tiff",n.TS="video/mp2t",n.TTF="font/ttf",n.TXT="text/plain",n.URI="text/x-uri",n.VSD="application/vnd.visio",n.WAV="audio/wav",n.WEBA="audio/webm",n.WEBM="video/webm",n.WEBP="image/webp",n.WOFF="font/woff",n.WOFF2="font/woff2",n.XHTML="application/xhtml+xml",n.XLS="application/vnd.ms-excel",n.XLSX="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",n.XML="XML",n.XUL="application/vnd.mozilla.xul+xml",n.ZIP="application/zip",n.GP3="video/3gpp",n.G23="video/3gpp2",n.Z7="application/x-7z-compressed"},5018:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EProofmeDataPurpose=void 0,(n=t.EProofmeDataPurpose||(t.EProofmeDataPurpose={})).AGE_VERIFICATION="AGE_VERIFICATION",n.KYC_VERIFICATION="KYC_VERIFICATION",n.ACCESS_CONTROL="ACCESS_CONTROL",n.ONLINE_VERIFICATION="ONLINE_VERIFICATION",n.IDENTIFICATION="IDENTIFICATION"},345:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EProofmeDataStorage=void 0,(n=t.EProofmeDataStorage||(t.EProofmeDataStorage={})).DATABASE="DATABASE",n.CERTIFICATE="CERTIFICATE",n.NOT_STORED="NOT_STORED"},2178:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ESignatureTypes=void 0,(n=t.ESignatureTypes||(t.ESignatureTypes={})).ECDSA="ECDSA",n.RSA="RSA",n.HMAC="HMAC"},6498:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getRTCConnectionConfig=t.validChannelId=void 0;const o=r(n(6113));t.validChannelId=function(e,t){return 1===t.filter((t=>t.uuid===e&&null===t.channel&&!0===t.host)).length},t.getRTCConnectionConfig=function(e,t,n,r){const i=`${Math.floor(Date.now()/1e3)+t}:${e}`;return{iceCandidatePoolSize:5,iceServers:[{urls:r,credential:o.default.createHmac("sha1",n).update(i.toString()).digest("base64"),username:i}]}}},1015:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtilsProvider=void 0;const o=n(2254),i=n(5583);let s=class{proofmeUtils=new i.ProofmeUtils;async isValidCredentials(e,t,n,r,o,i){return this.proofmeUtils.isValidCredentials(e,t,n,r,o,i)}getSignature(e,t){return this.proofmeUtils.getSignature(e,t)}signCredentialObject(e,t){return this.proofmeUtils.signCredentialObject(e,t)}signRequestedCredentials(e,t,n){return this.proofmeUtils.signRequestedCredentials(e,t,n)}async isValidRequestedCredentials(e,t,n){return this.proofmeUtils.isValidRequestedCredentials(e,t,n)}async isValidLicense(e,t,n){return this.proofmeUtils.isValidLicense(e,t,n)}generateChallenge(e,t,n,r){return this.proofmeUtils.generateChallenge(e,t,n,r)}async getClaim(e,t,n,r){return await this.proofmeUtils.getClaim(e,t,n,r)}getContractAddressFromDid(e){return this.proofmeUtils.getContractAddressFromDid(e)}};s=r([(0,o.Injectable)()],s),t.ProofmeUtilsProvider=s},5583:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtils=void 0;const o=r(n(8519)),i=n(9137),s=n(8922),a=n(2178),u=n(1485);t.ProofmeUtils=class{excludedCredentialKeys=["OWN","ADDITIONAL_INFO","SIGNATURE"];async isValidCredentials(e,t,n,r,i,s){const a=new o.default(t),u=this.requestedCredentialsCorrect(e,n);if(!u.success)return u.credentials=e,u;const c=await this.checkCredentials(e,t,i,s);if(!c.valid)return c;for(const e of r)a.utils.isAddress(e)||(console.error(`Trusted party did ${e} is NOT a valid address and is removed.`),r=r.filter((t=>t!==e)));if(r.length>0){const t=[];let n=0,o=0;const i=[];for(const[s]of Object.entries(e.credentials))if(!this.excludedCredentialKeys.includes(s))for(const[u,c]of Object.entries(e.credentials[s].credentials)){o++;const e=c.issuer.id.split(":")[2];let s=!1,l=null,f=null,d=!0;for(const o of r){const r=t.find((t=>t.issuerDidContractAddress===e&&t.did===o));let p=null;if(r?p=r.claim:(p=await this.getClaims(e,o,a),t.push({issuerDidContractAddress:e,did:o,claim:p})),p)if(d=!1,new Date(p.expirationDate)>new Date){const e=p.keys;f=e;const t=`${c.provider}_${u}`;if(!e.includes(t)){l=t;break}if(!l){n++,s=!0;break}}else i.push({credential:c,valid:!1,code:14,message:"Claim expired."})}d?i.push({credential:c,valid:!1,code:13,message:`No claims found to check. Checked dids ${r}`}):!l||s||i.push({credential:c,valid:!1,code:12,message:`Tried to validate attribute ${l} but provider was not allowed to issue. Allowed attributes: ${f.join(", ")}`})}return n===o?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential",requestedCheckResult:u}:{valid:!1,code:1,message:"Invalid credentials",invalidCredentials:i}}return{valid:!1,code:10,message:"No trusted parties to check."}}async checkCredentials(e,t,n,r){"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e);const i=new o.default(t),s=[];let a=0,c=0;const l=[];for(const[o]of Object.entries(e.credentials)){if(this.excludedCredentialKeys.includes(o))continue;const f={credentials:{[o]:JSON.parse(JSON.stringify(e.credentials[o]))}};delete f.credentials[o].proof.signature;const d=i.eth.accounts.recover(JSON.stringify(f),e.credentials[o].proof.signature);if(this.userCredentialSignatureWrong(e.credentials[o].proof.holder,d))for(const[,f]of Object.entries(e.credentials[o].credentials)){if(c++,!f.version){l.push({credential:f,code:8,message:"Incorrect credential version. Renew your credentials"});continue}const d=new Date(f.expirationDate),p=new Date;if(p>d){l.push({credential:f,code:7,message:`Your credential expired on ${d}`});continue}const h=new Date(e.credentials[o].proof.nonce);if(this.calculateMinutesDifference(p,h)>5&&n)l.push({credential:f,code:2,message:"Nonce too old"});else if(this.issuerCredentialSignatureWrong(f,i)){const n=f.proof.holder,c=f.issuer.id.split(":")[2];if(await this.didContractKeyWrong(i,t,u.claimHolderAbi,n,c,s)){const n=e.credentials[o].proof.holder,c=f.id.split(":")[2];await this.didContractKeyWrong(i,t,u.claimHolderAbi,n,c,s)?r&&void 0!==f.verified&&!0!==f.verified?l.push({credential:f,code:15,message:"Liveness check required but credential not verified"}):a++:l.push({credential:f,code:6,message:"User did incorrect"})}else l.push({credential:f,code:5,message:"Issuer did incorrect"})}else l.push({credential:f,code:4,message:"Issuer signature incorrect"})}else l.push({credential:e.credentials[o],code:3,message:"User signature incorrect"})}return c>0&&a===c?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential"}:{valid:!1,code:1,message:"Invalid credential",invalidCredentials:l}}userCredentialSignatureWrong(e,t){return e===t||(console.error(`User signature of credential ${e} does not match recoveredAddress ${t}`),!1)}issuerCredentialSignatureWrong(e,t){const n=e.proof.signature,r=e.proof.holder,o=JSON.parse(JSON.stringify(e));delete o.proof.signature;const i=t.eth.accounts.recover(JSON.stringify(o),n);return r===i||(console.error(`Issuer signature of credential ${r} does not match recoveredAddress ${i}`),!1)}async didContractKeyWrong(e,t,n,r,i,s){const a=s.find((e=>e.did==i&&e.holderKey===r));if(a)return a.result;{const a=[];if(i===r)return s.push({did:i,holderKey:r,result:!0}),!0;{const u=this.getSha3Key(r,e),c=new(new o.default(t).eth.Contract)(n,i);if(!this.knownAddressesContains(a,u,i)){const e=parseInt(await this.getKeyPurpose(c,u),10);if(0===e||e>3)return s.push({did:i,holderKey:r,result:!1}),!1;a.push({sha3Key:u,didAddress:i})}return s.push({did:i,holderKey:r,result:!0}),!0}}}knownAddressesContains(e,t,n){for(const r of e)if(r.sha3Key===t&&r.didContractAddress===n)return!0}getSha3Key(e,t){return t.utils.keccak256(e)}async getKeyPurpose(e,t){return null===e.options.address?Promise.resolve(null):await e.methods.getKeyPurpose(t).call()}calculateMinutesDifference(e,t){let n=(e.getTime()-t.getTime())/1e3;return n/=60,Math.abs(Math.round(n))}reOrderCredentialObject(e){for(const t of Object.keys(e.credentials)){const n=[];for(const r of Object.keys(e.credentials[t].credentials))n.push(r);n.sort();const r={};for(const o of n){const n=this.reOrderCredential(e.credentials[t].credentials[o]);r[o]=n}e.credentials[t].proof=this.reOrderCredentialProof(e.credentials[t].proof),e.credentials[t]={credentials:r,proof:e.credentials[t].proof}}return e}reOrderCredential(e){return this.sortObjectAlphabetically(e)}sortObjectAlphabetically(e){const t={},n=Object.keys(e);n.sort(((e,t)=>(e=e.toLowerCase())<(t=t.toLowerCase())?-1:e>t?1:0));for(const r in n){const o=n[r];null===e[o]||"object"!=typeof e[o]||e[o]instanceof Array?t[o]=e[o]:t[o]=this.sortObjectAlphabetically(e[o])}return t}reOrderCredentialProof(e){return{holder:e.holder,nonce:e.nonce,signature:e.signature,type:e.type}}getSignature(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderObject(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature}reOrderObject(e){return this.sortObjectAlphabetically(e)}signCredentialObject(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature}async getClaims(e,t,n){const r=new n.eth.Contract(u.claimHolderAbi,t),o=await r.methods.getClaimIdsByType(e).call();if(!(o.length>0))return Promise.resolve(null);try{const e=await r.methods.getClaim(o[o.length-1]).call(),t=JSON.parse(n.utils.toAscii(e.data));return Promise.resolve(t)}catch(e){return Promise.resolve(null)}}async getClaim(e,t,n,r){const i=new o.default(n),s=new i.eth.Contract(r,t),a=await s.methods.getClaimIdsByType(e).call();if(!(a.length>0))return Promise.resolve(null);try{const e=await s.methods.getClaim(a[a.length-1]).call(),t=i.utils.toAscii(e.data);if(t.length>1){const e=JSON.parse(t);return Promise.resolve(e)}return Promise.resolve(null)}catch(e){return console.log("Error: ",e),Promise.resolve(null)}}requestedCredentialsCorrect(e,t){const n={success:!0,missingKeys:[]};for(const r of t.credentials)if(r.required&&"ADDITIONAL_INFO"===r.provider){const t=Object.keys(e.credentials[r.provider].credentials);for(const o of t){const t=e.credentials[r.provider].credentials[o];t.required&&t.key.find((e=>!e.answer))&&(n.success=!1,n.missingKeys.push(t))}}else if(r.required){Array.isArray(r.provider)||(r.provider=[r.provider]);let t=!1;for(const n of r.provider)e.credentials[n]&&e.credentials[n].credentials&&e.credentials[n].credentials[r.key]&&(t=!0);t||(n.success=!1,n.missingKeys.push(r))}return n}recoverAddressFromSignature(e,t,n){const r=new o.default;return!0===n?(e=this.sortObjectAlphabetically(JSON.parse(e)),r.eth.accounts.recover(JSON.stringify(e),t)):r.eth.accounts.recover(e,t)}signRequestedCredentials(e,t,n){e.proof={holder:t,nonce:Date.now(),type:a.ESignatureTypes.ECDSA};const r=this.getSignature(e,n);return e.proof.signature=r,e}async isValidRequestedCredentials(e,t,n){if(e?.proof?.signature){const r=JSON.parse(JSON.stringify(e));delete r.proof.signature;const i=this.recoverAddressFromSignature(JSON.stringify(r),e.proof.signature,!0),a=new o.default(t),u=e.id;if(i!==e.proof.holder)return console.error(`Recovered address ${i} does not match holder address ${e.proof.holder}`),!1;const c=new a.eth.Contract(n,this.getContractAddressFromDid(u)),l=this.getSha3Key(i,a),f=await this.getKeyPurpose(c,l);return f===s.EDIDAccessLevel.MANAGEMENT_KEY||f===s.EDIDAccessLevel.ACTION_KEY}return console.error("Requested Credentials doesn't have a signature in the proof. Not checking"),!1}async isValidLicense(e,t,n){const r=e.id,o=(await this.getClaim(i.EClaimType.COMPANY_INFO,this.getContractAddressFromDid(r),t,n))?.credentialSubject?.credential?.value?.status;return!!o&&!0===o}privateKeyToPublicKey(e){return(new o.default).eth.accounts.privateKeyToAccount(e).address}generateChallenge(e,t,n,r){const i=new o.default,s=Math.floor(Date.now()/1e3).toString(),a=`${e}-${t}-${n}-${s}`;return{did:t,publicKey:e,endpoint:n,timestamp:s,challenge:a,signature:i.eth.accounts.sign(a,r).signature}}getContractAddressFromDid(e){let t=e;const n=e.split(":");if(2===n.length)return console.error("Unsupported did:",e),null;if(3===n.length){if("did"!==n[0])return console.error("Unsupported did:",e),null;if("didux"!==n[1])return console.error("Unsupported chain:",n[1]),null;t=n[2]}return t}}},5456:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SignalServerV2=void 0;const r=n(1964),o=n(5828),i=n(367),s=n(6498),a=n(593);t.SignalServerV2=class{wsServer;wsRequest$=new r.Subject;startSignal(e){this.wsServer=new i.server({httpServer:e,autoAcceptConnections:!1}),this.wsServer.on("request",(async e=>{this.wsRequest$.next(e)}))}sendTo(e,t){e?e.sendUTF(JSON.stringify(t)):console.error("Tried to send this over undefined connection:",t)}rejectConnection(e,t){t.reject(),console.error((new Date).toISOString()+" "+e),console.error((new Date).toISOString()+" Connection from remoteAddress "+t.remoteAddresses+" rejected.")}async setupP2PConnection(e,t,n,r,i,u,c,l,f,d,p,h){const v=e.accept(null,e.origin);if(console.log(`Library - Accepted ${e.origin} valid signed ${t}`),v.uuid=(0,o.v4)(),v.did=t?e?.resourceURL?.query?.did?.toString():null,v.publicKey=t?e?.resourceURL?.query?.publickey?.toString():null,v.authenticated=t,v.channel=n,this.setupWebsocketListeners(v),"validator"===h&&t&&null===n||r&&null===n){v.host=!0,v.origin=h;const e=(0,s.getRTCConnectionConfig)("host",i,c,u);console.log("Library - Host waiting for connection"),this.sendTo(v,{type:"host",success:!0,message:`Host initialised ${v.uuid}`,channelId:v.uuid,signalServer:l,..."validator"===h&&{webRtcConnectionConfig:e}}),"validator"!==h&&(v.webRtcClient=new a.WebRTCClientV2(e,f,v,d,p),await v.webRtcClient.setupPeerconnection(v.uuid))}else if(null!==n){const e=this.wsServer.connections.find((e=>e.uuid===n&&null===e.channel&&!0===e.host));if(e){e.channel=v.uuid,v.channel=e.uuid,console.log(`Library - Client connecting to ${n}`);const t=(0,s.getRTCConnectionConfig)("client",i,c,u);this.sendTo(v,{type:"client",success:!0,message:`Client initialised ${v.uuid}`,channelId:n,webRtcConnectionConfig:t}),"validator"!==e.origin&&(e.webRtcClient.clientChannel=v,e.webRtcClient.data={...e.webRtcClient.data,clientData:p})}else v.close()}else console.error("Library - Not a client or host"),v.close();return v}setupWebsocketListeners(e){e.on("message",(async t=>{let n;try{"utf8Data"in t&&(n=JSON.parse(t.utf8Data))}catch(e){console.error("Library - Websocket connection invalid JSON",e),n={type:null}}const{type:r,offer:o,answer:i,candidate:s}=n;switch(r){case"offer":if(!e.host&&e.channel){const t=this.wsServer.connections.find((t=>t.channel===e.uuid&&!0===t.host));t?"validator"===t.origin?this.sendTo(t,{type:"offer",success:!0,message:"Client shared an offer",offer:o}):(await t.webRtcClient.setRemoteDescription(o),await t.webRtcClient.sendAnswer()):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close();break;case"answer":if(e.host&&e.channel&&"validator"===e.origin){const t=this.wsServer.connections.find((t=>t.channel===e.uuid));t?this.sendTo(t,{type:"answer",success:!0,message:"Client shared an answer",answer:i}):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close();break;case"candidate":if(e.channel){const t=this.wsServer.connections.find((t=>t.channel===e.uuid));t?"validator"===t.origin||"validator"===e.origin?this.sendTo(t,{type:"candidate",success:!0,message:"Candidate shared",candidate:s}):t.webRtcClient.addCandidate(s):console.error("Couldn't find connection on uuid:",e.uuid)}else e.close()}})),e.on("close",((t,n)=>{console.log(`Library - ${(new Date).toISOString()} - Peer ${e.remoteAddress} disconnected, Reason ${t}, description ${n}`)}))}}},2582:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.SignalingServer=void 0;const s=i(n(5352)),a=n(5828),u=i(n(6113));t.SignalingServer=class{wsServer;rtcConnectionConfig;setRTCConnectionConfig(e){this.rtcConnectionConfig=e}getRTCConnectionConfig(e){if(this.rtcConnectionConfig.turnEnabled){const t=`${Math.floor(Date.now()/1e3)+this.rtcConnectionConfig.turnExpiration}:${e}`,n=u.createHmac("sha1",this.rtcConnectionConfig.turnSecret).update(t.toString()).digest("base64");return{iceCandidatePoolSize:5,iceServers:[{urls:this.rtcConnectionConfig.turnUrl,credential:n,username:t}]}}if(this.rtcConnectionConfig.stunEnabled)return{iceServers:[{urls:this.rtcConnectionConfig.stunUrl}]}}startSignal(e){this.wsServer=new s.Server({server:e});const t=(e,t)=>{e.send(JSON.stringify(t))};this.wsServer.on("connection",(e=>{e.uuid=(0,a.v4)(),e.did=null,e.host=!1,e.authenticated=!1,e.connected=null,e.on("error",(e=>{})),e.on("message",(n=>{let r;try{r=JSON.parse(n)}catch(e){r={}}const{type:o,token:i,host:s,offer:u,answer:c,candidate:l}=r;switch(o){case"auth":i?(e.authenticated=!0,t(e,{type:"AUTH",success:!0,message:"Authentication successful"})):t(e,{type:"auth",success:!1,message:"Could not validate token"});break;case"host":e.host=!0,t(e,{type:"host",success:!0,message:"Host initialised "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")});break;case"ping":t(e,{type:"pong"});break;case"connect":{const n=[...this.wsServer.clients].filter((e=>e.uuid===s&&null===e.connected&&!0===e.host));1===n.length?(t(n[0],{type:"connected",success:!0,message:"Client connected "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")}),t(e,{type:"connected",success:!0,message:"Connected to "+s,webRtcConnectionConfig:this.getRTCConnectionConfig("client")}),e.connected=n[0].uuid,n[0].connected=e.uuid):t(e,{type:"connected",success:!1,message:"Could not connect to "+s});break}case"offer":if(null!=e.connected&&this.wsServer.clients.size>0){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"offer",success:!0,offer:u}),t(e,{type:"offer",success:!0,offer:u})):t(e,{type:"offer",success:!1,offer:u,message:"Connection not found."})}else t(e,{type:"offer",success:!1,offer:u,message:"Too soon..."});break;case"answer":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"answer",success:!0,answer:c}),t(e,{type:"answer",success:!0,answer:c})):t(e,{type:"answer",success:!1,answer:c,message:"Connection not found."})}else t(e,{type:"answer",success:!1,answer:c,message:"Too soon..."});break;case"candidate":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?t(n[0],{type:"candidate",success:!0,candidate:l}):t(e,{type:"candidate",success:!1,candidate:l,message:"Connection not found."})}else t(e,{type:"candidate",success:!1,candidate:l,message:"Too soon..."});break;case"leave":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));e.uuid=(0,a.v4)(),1===n.length?(t(n[0],{type:"leave",success:!0,message:"Connection left on receive leave"}),n[0].connected=null,t(e,{type:"leave",success:!0,message:"Connection left.",uuid:e.uuid})):t(e,{type:"leave",success:!1,message:"Connection not found.",uuid:e.uuid}),e.connected=null}else e.uuid=(0,a.v4)(),t(e,{type:"leave",success:!1,message:"Not connected to host/client.",uuid:e.uuid});break;default:t(e,{type:"error",message:"Command not found: "+o})}})),e.on("close",((e,n,r)=>{if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length&&(t(n[0],{type:"leave",success:!0,message:"Connection left on websocket close"}),n[0].connected=null),e.connected=null}})),e.send(JSON.stringify({type:"connect",message:"Well hello there, I am the Signaling Server",success:!0}))}))}}},1485:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.claimHolderAbi=void 0,t.claimHolderAbi=[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}]},3002:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Identity=void 0,t.Identity={abi:[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_str",type:"bytes"},{name:"_offset",type:"uint256"},{name:"_length",type:"uint256"}],name:"getBytes",outputs:[{name:"",type:"bytes"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_str",type:"string"},{name:"_offset",type:"uint256"},{name:"_length",type:"uint256"}],name:"getString",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[{name:"_claimType",type:"uint256[]"},{name:"_scheme",type:"uint256[]"},{name:"_issuer",type:"address[]"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"},{name:"_sigSizes",type:"uint256[]"},{name:"dataSizes",type:"uint256[]"},{name:"uriSizes",type:"uint256[]"}],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}],data:"60806040523480156200001157600080fd5b50604051620033333803806200333383398101806040528101908080518201929190602001805182019291906020018051820192919060200180518201929190602001805182019291906020018051820192919060200180518201929190602001805182019291906020018051820192919050505060008060008060008033604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209050806001600083600019166000191681526020019081526020016000206002018160001916905550600180600083600019166000191681526020019081526020016000206000018190555060018060008360001916600019168152602001908152602001600020600101819055506002600060018152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600180600083600019166000191681526020019081526020016000206000015482600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a450600093506000925060009150600090505b8d51811015620007ba578b818151811015156200020f57fe5b906020019060200201518e828151811015156200022857fe5b90602001906020020151604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001925050506040518091039020945060c0604051908101604052808f83815181101515620002a657fe5b9060200190602002015181526020018e83815181101515620002c457fe5b9060200190602002015181526020018d83815181101515620002e257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1681526020016200033b8d878c868151811015156200031c57fe5b90602001906020020151620007ce640100000000026401000000009004565b8152602001620003748c858b868151811015156200035557fe5b90602001906020020151620007ce640100000000026401000000009004565b8152602001620003ad8b868a868151811015156200038e57fe5b90602001906020020151620008da640100000000026401000000009004565b815250600460008760001916600019168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019062000444929190620009ec565b50608082015181600401908051906020019062000463929190620009ec565b5060a08201518160050190805190602001906200048292919062000a73565b5090505087818151811015156200049557fe5b90602001906020020151840193508581815181101515620004b257fe5b90602001906020020151830192508681815181101515620004cf57fe5b906020019060200201518201915060046000866000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166004600087600019166000191681526020019081526020016000206000015486600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5600460008a6000191660001916815260200190815260200160002060010154600460008b60001916600019168152602001908152602001600020600301600460008c60001916600019168152602001908152602001600020600401600460008d60001916600019168152602001908152602001600020600501604051808581526020018060200180602001806020018481038452878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200068b5780601f106200065f576101008083540402835291602001916200068b565b820191906000526020600020905b8154815290600101906020018083116200066d57829003601f168201915b5050848103835286818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620007125780601f10620006e65761010080835404028352916020019162000712565b820191906000526020600020905b815481529060010190602001808311620006f457829003601f168201915b5050848103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620007995780601f106200076d5761010080835404028352916020019162000799565b820191906000526020600020905b8154815290600101906020018083116200077b57829003601f168201915b505097505050505050505060405180910390a48080600101915050620001f6565b505050505050505050505050505062000b22565b606080600080846040519080825280601f01601f191660200182016040528015620008085781602001602082028038833980820191505090505b509250600091508590505b848601811015620008cd5786818151811015156200082d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156200088757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505062000813565b8293505050509392505050565b6060806060600080879350856040519080825280601f01601f191660200182016040528015620009195781602001602082028038833980820191505090505b509250600091508690505b858701811015620009de5783818151811015156200093e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156200099857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505062000924565b829450505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a2f57805160ff191683800117855562000a60565b8280016001018555821562000a60579182015b8281111562000a5f57825182559160200191906001019062000a42565b5b50905062000a6f919062000afa565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000ab657805160ff191683800117855562000ae7565b8280016001018555821562000ae7579182015b8281111562000ae657825182559160200191906001019062000ac9565b5b50905062000af6919062000afa565b5090565b62000b1f91905b8082111562000b1b57600081600090555060010162000b01565b5090565b90565b6128018062000b326000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063032c1a8a146100d557806312aaac701461011a5780631d38124014610175578063262b54f5146101d25780634eee424a146102545780635d2cfd611461029d578063747442d314610393578063862642f5146103e45780639010f7261461042d578063b1a34e0d146104af578063b61d27f6146105f4578063c9100bcb1461069b578063d202158d1461085e578063df9319be146108b1575b600080fd5b3480156100e157600080fd5b5061010460048036038101908080356000191690602001909291905050506109a7565b6040518082815260200191505060405180910390f35b34801561012657600080fd5b5061014960048036038101908080356000191690602001909291905050506109cf565b604051808481526020018381526020018260001916600019168152602001935050505060405180910390f35b34801561018157600080fd5b506101b860048036038101908080356000191690602001909291908035906020019092919080359060200190929190505050610a3e565b604051808215151515815260200191505060405180910390f35b3480156101de57600080fd5b506101fd60048036038101908080359060200190929190505050610cf7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610240578082015181840152602081019050610225565b505050509050019250505060405180910390f35b34801561026057600080fd5b506102836004803603810190808035600019169060200190929190505050610d66565b604051808215151515815260200191505060405180910390f35b3480156102a957600080fd5b50610318600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001909291905050506111e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035857808201518184015260208101905061033d565b50505050905090810190601f1680156103855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039f57600080fd5b506103ca600480360381019080803590602001909291908035151590602001909291905050506112eb565b604051808215151515815260200191505060405180910390f35b3480156103f057600080fd5b5061041360048036038101908080356000191690602001909291905050506117ff565b604051808215151515815260200191505060405180910390f35b34801561043957600080fd5b506104586004803603810190808035906020019092919050505061196a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561049b578082015181840152602081019050610480565b505050509050019250505060405180910390f35b3480156104bb57600080fd5b506105d66004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506119d9565b60405180826000191660001916815260200191505060405180910390f35b34801561060057600080fd5b50610685600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611efe565b6040518082815260200191505060405180910390f35b3480156106a757600080fd5b506106ca60048036038101908080356000191690602001909291905050506121e0565b604051808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610750578082015181840152602081019050610735565b50505050905090810190601f16801561077d5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156107b657808201518184015260208101905061079b565b50505050905090810190601f1680156107e35780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561081c578082015181840152602081019050610801565b50505050905090810190601f1680156108495780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561086a57600080fd5b506108976004803603810190808035600019169060200190929190803590602001909291905050506124aa565b604051808215151515815260200191505060405180910390f35b3480156108bd57600080fd5b5061092c600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050612513565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096c578082015181840152602081019050610951565b50505050905090810190601f1680156109995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000600160008360001916600019168152602001908152602001600020600001549050919050565b60008060006001600085600019166000191681526020019081526020016000206000015460016000866000191660001916815260200190815260200160002060010154600160008760001916600019168152602001908152602001600020600201549250925092509193909250565b60008360001916600160008660001916600019168152602001908152602001600020600201546000191614151515610ade576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b657920616c726561647920657869737473000000000000000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0957610b6e33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b1515610c08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742081526020017f6b6579000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8360016000866000191660001916815260200190815260200160002060020181600019169055508260016000866000191660001916815260200190815260200160002060000181905550816001600086600019166000191681526020019081526020016000206001018190555060026000848152602001908152602001600020849080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550818385600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a4600190509392505050565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610d5a57602002820191906000526020600020905b81546000191681526020019060010190808311610d42575b50505050509050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e9357610df833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b1515610e92576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742081526020017f6b6579000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b60046000836000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166004600084600019166000191681526020019081526020016000206000015483600019167f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a60046000876000191660001916815260200190815260200160002060010154600460008860001916600019168152602001908152602001600020600301600460008960001916600019168152602001908152602001600020600401600460008a600019166000191681526020019081526020016000206005016040518085815260200180602001806020018060200184810384528781815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561103d5780601f106110125761010080835404028352916020019161103d565b820191906000526020600020905b81548152906001019060200180831161102057829003601f168201915b50508481038352868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156110c05780601f10611095576101008083540402835291602001916110c0565b820191906000526020600020905b8154815290600101906020018083116110a357829003601f168201915b50508481038252858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156111435780601f1061111857610100808354040283529160200191611143565b820191906000526020600020905b81548152906001019060200180831161112657829003601f168201915b505097505050505050505060405180910390a460046000836000191660001916815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006111b99190612620565b6004820160006111c99190612620565b6005820160006111d99190612668565b505060019050919050565b606080600080846040519080825280601f01601f19166020018201604052801561121d5781602001602082028038833980820191505090505b509250600091508590505b8486018110156112de57868181518110151561124057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838381518110151561129957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250508080600101915050611228565b8293505050509392505050565b600061134833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060026124aa565b15156113bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f53656e64657220646f6573206e6f74206861766520616374696f6e206b65790081525060200191505060405180910390fd5b827fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d883604051808215151515815260200191505060405180910390a26001151582151514156117c55760016003600085815260200190815260200160002060030160006101000a81548160ff0219169083151502179055506003600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660036000858152602001908152602001600020600201600060405180838054600181600116156101000203166002900480156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b50508260ff168152602001925050506000604051808303816000865af19150509050801561168d5760016003600085815260200190815260200160002060030160016101000a81548160ff02191690831515021790555060036000848152602001908152602001600020600101546003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b860036000888152602001908152602001600020600201604051808060200182810382528381815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561167a5780601f1061164f5761010080835404028352916020019161167a565b820191906000526020600020905b81548152906001019060200180831161165d57829003601f168201915b50509250505060405180910390a46117f9565b60036000848152602001908152602001600020600101546003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a686003600088815260200190815260200160002060020160405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156117b25780601f10611787576101008083540402835291602001916117b2565b820191906000526020600020905b81548152906001019060200180831161179557829003601f168201915b50509250505060405180910390a46117f9565b60006003600085815260200190815260200160002060030160006101000a81548160ff021916908315150217905550600190505b92915050565b60008160001916600160008460001916600019168152602001908152602001600020600201546000191614151561189e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f2073756368206b657900000000000000000000000000000000000000000081525060200191505060405180910390fd5b600160008360001916600019168152602001908152602001600020600101546001600084600019166000191681526020019081526020016000206000015460016000856000191660001916815260200190815260200160002060020154600019167f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339760405160405180910390a460016000836000191660001916815260200190815260200160002060008082016000905560018201600090556002820160009055505060019050919050565b6060600260008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119cd57602002820191906000526020600020905b815460001916815260200190600101908083116119b5575b50505050509050919050565b6000808588604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200192505050604051809103902090503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b6257611ac733604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060036124aa565b1515611b61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f53656e64657220646f6573206e6f74206861766520636c61696d207369676e6581526020017f72206b657900000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8573ffffffffffffffffffffffffffffffffffffffff1660046000836000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611c1957600560008981526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505b876004600083600019166000191681526020019081526020016000206000018190555086600460008360001916600019168152602001908152602001600020600101819055508560046000836000191660001916815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846004600083600019166000191681526020019081526020016000206003019080519060200190611cee9291906126b0565b50836004600083600019166000191681526020019081526020016000206004019080519060200190611d219291906126b0565b50826004600083600019166000191681526020019081526020016000206005019080519060200190611d54929190612730565b508573ffffffffffffffffffffffffffffffffffffffff168882600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c58a89898960405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015611de5578082015181840152602081019050611dca565b50505050905090810190601f168015611e125780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611e4b578082015181840152602081019050611e30565b50505050905090810190601f168015611e785780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015611eb1578082015181840152602081019050611e96565b50505050905090810190601f168015611ede5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a4809150509695505050505050565b6000600360008054815260200190815260200160002060030160019054906101000a900460ff16151515611f9a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f416c72656164792065786563757465640000000000000000000000000000000081525060200191505060405180910390fd5b83600360008054815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260036000805481526020019081526020016000206001018190555081600360008054815260200190815260200160002060020190805190602001906120379291906126b0565b50828473ffffffffffffffffffffffffffffffffffffffff166000547f8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8856040518080602001828103825283818151815260200191508051906020019080838360005b838110156120b557808201518184015260208101905061209a565b50505050905090810190601f1680156120e25780820380516001836020036101000a031916815260200191505b509250505060405180910390a461214a33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b806121ac57506121ab33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060026124aa565b5b156121c0576121be60005460016112eb565b505b600080815480929190600101919050555060016000540390509392505050565b600080600060608060606004600088600019166000191681526020019081526020016000206000015460046000896000191660001916815260200190815260200160002060010154600460008a6000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008b60001916600019168152602001908152602001600020600301600460008c60001916600019168152602001908152602001600020600401600460008d60001916600019168152602001908152602001600020600501828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123565780601f1061232b57610100808354040283529160200191612356565b820191906000526020600020905b81548152906001019060200180831161233957829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123f25780601f106123c7576101008083540402835291602001916123f2565b820191906000526020600020905b8154815290600101906020018083116123d557829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561248e5780601f106124635761010080835404028352916020019161248e565b820191906000526020600020905b81548152906001019060200180831161247157829003601f168201915b5050505050905095509550955095509550955091939550919395565b6000806000600102600160008660001916600019168152602001908152602001600020600201546000191614156124e4576000915061250c565b8260016000866000191660001916815260200190815260200160002060000154111590508091505b5092915050565b6060806060600080879350856040519080825280601f01601f1916602001820160405280156125515781602001602082028038833980820191505090505b509250600091508690505b85870181101561261257838181518110151561257457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156125cd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505061255c565b829450505050509392505050565b50805460018160011615610100020316600290046000825580601f106126465750612665565b601f01602090049060005260206000209081019061266491906127b0565b5b50565b50805460018160011615610100020316600290046000825580601f1061268e57506126ad565b601f0160209004906000526020600020908101906126ac91906127b0565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126f157805160ff191683800117855561271f565b8280016001018555821561271f579182015b8281111561271e578251825591602001919060010190612703565b5b50905061272c91906127b0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061277157805160ff191683800117855561279f565b8280016001018555821561279f579182015b8281111561279e578251825591602001919060010190612783565b5b5090506127ac91906127b0565b5090565b6127d291905b808211156127ce5760008160009055506001016127b6565b5090565b905600a165627a7a723058200017634e62c856198c9c8d204756bd9ed5e12ca97b230682c6cc941e813b81330029"}},6919:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getSubDomain=void 0,t.getSubDomain=function(e){return e?.replace("http://","").replace("https://","").split(":")[0]}},3817:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.checkKeyForDid=void 0;const o=n(3002),i=r(n(8519));t.checkKeyForDid=async function(e,t,n,r){try{const s=new i.default(e),a=new s.eth.Contract(o.Identity.abi,t),u=s.utils.sha3(n);return await a.methods.keyHasPurpose(u,r).call()}catch(e){return console.log("Library - Something went wrong: "+e),!1}}},2733:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.WebRtcProvider=void 0;const o=n(2254),i=n(1964),s=n(1904),a=n(367);let u=class{webRtcConfig;hostUuid;peerConnection=null;dataChannel=null;wsClient=null;receivedActions$=new i.BehaviorSubject(null);uuid$=new i.BehaviorSubject(null);websocketMessage$=new i.BehaviorSubject(null);websocketConnectionClosed$=new i.BehaviorSubject(null);websocketConnectionOpen$=new i.BehaviorSubject(null);websocketConnectionError$=new i.BehaviorSubject(null);webRtcConnectionConfig;connectionTimeout=null;pongCheckInterval=null;pingTimeout=null;WEBSOCKET_PING_ANSWER_DELAY=1e3;WEBSOCKET_PING_PONG_ALLOWED_TIME=3e3;getConfig(){return this.webRtcConfig}setHostUuid(e){this.hostUuid=e}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?(console.log(`Library - Sending action '${e}'`),this.dataChannel.send(JSON.stringify({action:e,...t}))):console.error(`Websocket - Attempted to send data with action ${e} but data channel is not open`)}sendWebsocketData(e,t){return this.wsClient&&this.wsClient.readyState===this.wsClient.OPEN?(this.wsClient.send(JSON.stringify({action:e,...t})),!0):(console.error(`Websocket - Attempted to send data with action ${e} but websocket channel is not open`),!1)}getWebsocket(){return this.wsClient}setUuid(e){this.uuid$.next(e)}disconnect(){clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),this.peerConnection&&this.peerConnection.close(),this.dataChannel&&this.dataChannel.close(),this.wsClient&&(this.wsClient.close(),this.wsClient.onclose=null),this.peerConnection=null,this.dataChannel=null,this.wsClient=null,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)}remoteDisconnect(){this.dataChannel&&"open"===this.dataChannel.readyState&&this.dataChannel.send(JSON.stringify({action:"disconnect"})),setTimeout((()=>{this.disconnect()}),1e3)}async sendOffer(e,t){const n=await e.createOffer();await e.setLocalDescription(n),t.send(JSON.stringify({type:"offer",offer:n}))}async launchWebsocketClient(e,t){this.webRtcConfig=e;let n=null;this.receivedActions$=new i.BehaviorSubject(null),this.connectionTimeout&&clearTimeout(this.connectionTimeout),this.uuid$=new i.BehaviorSubject(null),this.websocketMessage$=new i.BehaviorSubject(null),this.websocketConnectionClosed$=new i.BehaviorSubject(null),this.websocketConnectionOpen$=new i.BehaviorSubject(null),this.websocketConnectionError$=new i.BehaviorSubject(null);let r=this.webRtcConfig.signalingUrl;r||(console.log("Launch websocket - URL undefined, falling back to default"),r="wss://auth.proofme.id"),console.log("Launch websocket - Client URL:",r),console.log("Launch websocket - Channel:",e.channel),console.log("Launch websocket - Headers:",t);let o=null;o=r.includes("?")?`${r}&channel=${e.channel}`:`${r}?channel=${e.channel}`,e.data&&(o=`${o}&data=${e.data}`),e.keepalive&&(o=`${o}&keepalive=${e.keepalive}`),this.wsClient=new a.w3cwebsocket(o,null,null,t),this.connectionTimeout=setTimeout((()=>{!0!==n&&(this.websocketConnectionError$.next(!0),this.wsClient&&this.wsClient.close())}),1e4),this.wsClient.onerror=e=>{console.log("Websocket - Error: "+e.toString()),n=!1,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1),this.websocketConnectionError$.next(!0)},this.wsClient.onclose=()=>{console.log("Websocket - Connection closed"),this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)},this.wsClient.onopen=()=>{console.log("Websocket - Connection open"),n=!0,this.websocketConnectionClosed$.next(!1),this.websocketConnectionOpen$.next(!0)},this.wsClient.onmessage=async e=>{if(console.log("Websocket - Message:",e),this.websocketMessage$.next(e),e.data){let t;try{t=JSON.parse(e.data)}catch(e){console.error("Websocket - Message was not JSON"),t={}}const{type:n,message:r,success:o,channelId:i,offer:a,answer:u,candidate:c,webRtcConnectionConfig:l}=t;switch(n){case"error":console.log("Websocket - Error message:",r),"Command not found: ping"==r&&(clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{console.log(`Websocket - Ping pong took more than ${this.WEBSOCKET_PING_PONG_ALLOWED_TIME}ms. Disconnecting`),this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing());break;case"connect":if(o)if(this.webRtcConfig.isHost){const e=500;let t=0;const n=setInterval((()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"host"}))),t>=e&&clearInterval(n),t++}),50)}else{const e=500;let t=0;const n=setInterval((async()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"connect",host:this.hostUuid}))),t>=e&&clearInterval(n),t++}),50)}break;case"connected":clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),l&&(this.webRtcConnectionConfig=l,this.webRtcConfig.isHost||await this.setupPeerconnection(this.hostUuid)),i&&this.webRtcConfig.isHost&&await this.sendOffer(this.peerConnection,this.wsClient);break;case"pong":clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing();break;case"offer":if(a){await this.peerConnection.setRemoteDescription(new s.RTCSessionDescription(a));const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.wsClient.send(JSON.stringify({type:"answer",answer:e}))}break;case"host":i&&this.webRtcConfig.isHost&&(this.setUuid(i),l&&(this.webRtcConnectionConfig=l),await this.setupPeerconnection(i),this.sendPing());break;case"leave":this.setUuid(null),this.disconnect();break;case"answer":u&&await this.peerConnection.setRemoteDescription(new s.RTCSessionDescription(u));break;case"candidate":if(c){const e=new s.RTCIceCandidate(c);await this.peerConnection.addIceCandidate(e)}break;case"client":l&&(this.webRtcConnectionConfig=l,this.webRtcConfig.isHost||(await this.setupPeerconnection(this.hostUuid),await this.sendOffer(this.peerConnection,this.wsClient)))}}}}sendPing(){this.pingTimeout=setTimeout((()=>{1===this.wsClient.readyState&&this.wsClient.send(JSON.stringify({type:"ping"}))}),this.WEBSOCKET_PING_ANSWER_DELAY)}async setupPeerconnection(e){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){console.log("P2P - Message invalid JSON:",e)}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.sendP2PData("clientconnected",{success:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new s.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}async setupClientPeerconnection(){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){console.log("P2P - Message invalid JSON:",e)}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.sendP2PData("clientconnected",{success:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new s.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}};u=r([(0,o.Injectable)()],u),t.WebRtcProvider=u},593:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WebRTCClientV2=void 0;const r=n(1964),o=n(1904);t.WebRTCClientV2=class{peerConnection=null;dataChannel=null;clientChannel;webRtcConnectionConfig;requestedCredentials;hostWsConnection;actionType;dataChannelOpen$=new r.Subject;dataChannelMessage$=new r.Subject;data;constructor(e,t,n,r,o){this.webRtcConnectionConfig=e,this.requestedCredentials=t,this.hostWsConnection=n,this.actionType=r,this.data=o}async setupPeerconnection(e){this.peerConnection=new o.RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new o.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.clientChannel.sendUTF(JSON.stringify({type:"candidate",candidate:e.candidate}))}})),this.peerConnection.addEventListener("iceconnectionstatechange",(()=>{"disconnected"===this.peerConnection.iceConnectionState&&this.peerConnection.close()})),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{try{const t=JSON.parse(e.data);this.dataChannelMessage$.next(t)}catch(e){console.error("Could not parse message:",e)}},e.channel.onopen=async()=>{console.log("Library - Datachannel connected"),this.hostWsConnection.sendUTF(JSON.stringify({type:"clientconnected",success:!0})),this.dataChannelOpen$.next()},e.channel.onclose=e=>{console.log("Library - Datachannel onclose:",e),this.hostWsConnection.sendUTF(JSON.stringify({type:"disconnect"}))}}))}async sendOffer(){const e=await this.peerConnection.createOffer();await this.peerConnection.setLocalDescription(e),this.clientChannel.sendUTF(JSON.stringify({type:"offer",offer:e}))}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?(console.log(`Library - Sending action '${e}'`),this.dataChannel.send(JSON.stringify({action:e,...t}))):console.error(`Library - Attempted to send data with action ${e} but data channel is not open`)}async setRemoteDescription(e){await this.peerConnection.setRemoteDescription(new o.RTCSessionDescription(e))}async addCandidate(e){try{const t=new o.RTCIceCandidate(e);await this.peerConnection.addIceCandidate(t)}catch(e){console.error(e)}}async sendAnswer(){const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.clientChannel.sendUTF(JSON.stringify({type:"answer",answer:e}))}}},1964:e=>{e.exports=require("rxjs")},5828:e=>{e.exports=require("uuid")},8519:e=>{e.exports=require("web3")},367:e=>{e.exports=require("websocket")},1904:e=>{e.exports=require("wrtc")},5352:e=>{e.exports=require("ws")},6113:e=>{e.exports=require("crypto")},2254:(e,t,n)=>{n.r(t),n.d(t,{ANALYZE_FOR_ENTRY_COMPONENTS:()=>fr,APP_BOOTSTRAP_LISTENER:()=>Fy,APP_ID:()=>Ty,APP_INITIALIZER:()=>Iy,ApplicationInitStatus:()=>Py,ApplicationModule:()=>fb,ApplicationRef:()=>_g,Attribute:()=>cr,COMPILER_OPTIONS:()=>Ky,CUSTOM_ELEMENTS_SCHEMA:()=>Ti,ChangeDetectionStrategy:()=>Q,ChangeDetectorRef:()=>Pg,Compiler:()=>qy,CompilerFactory:()=>Gy,Component:()=>wy,ComponentFactory:()=>sh,ComponentFactoryResolver:()=>uh,ComponentRef:()=>ih,ContentChild:()=>hr,ContentChildren:()=>pr,DEFAULT_CURRENCY_CODE:()=>Hy,DebugElement:()=>Fg,DebugEventListener:()=>kg,DebugNode:()=>Rg,DefaultIterableDiffer:()=>Gg,Directive:()=>_y,ElementRef:()=>lh,EmbeddedViewRef:()=>jg,ErrorHandler:()=>Pi,EventEmitter:()=>iv,Host:()=>Xr,HostBinding:()=>Oy,HostListener:()=>Dy,INJECTOR:()=>ku,Inject:()=>Jr,InjectFlags:()=>q,Injectable:()=>cl,InjectionToken:()=>lr,Injector:()=>Ju,Input:()=>Cy,IterableDiffers:()=>rb,KeyValueDiffers:()=>ib,LOCALE_ID:()=>$y,MissingTranslationStrategy:()=>Wy,ModuleWithComponentFactories:()=>zy,NO_ERRORS_SCHEMA:()=>Ai,NgModule:()=>Sy,NgModuleFactory:()=>Sh,NgModuleRef:()=>Dh,NgProbeToken:()=>dg,NgZone:()=>Qy,Optional:()=>Zr,Output:()=>xy,PACKAGE_ROOT_URL:()=>Ly,PLATFORM_ID:()=>Ry,PLATFORM_INITIALIZER:()=>Ny,Pipe:()=>My,PlatformRef:()=>bg,Query:()=>dr,QueryList:()=>av,ReflectiveInjector:()=>Il,ReflectiveKey:()=>hl,Renderer2:()=>ph,RendererFactory2:()=>dh,RendererStyleFlags2:()=>zi,ResolvedReflectiveFactory:()=>_l,Sanitizer:()=>hh,SecurityContext:()=>ui,Self:()=>Qr,SimpleChange:()=>tt,SkipSelf:()=>Yr,TRANSLATIONS:()=>Uy,TRANSLATIONS_FORMAT:()=>By,TemplateRef:()=>uv,Testability:()=>og,TestabilityRegistry:()=>ig,Type:()=>_r,VERSION:()=>yh,Version:()=>vh,ViewChild:()=>yr,ViewChildren:()=>vr,ViewContainerRef:()=>dv,ViewEncapsulation:()=>X,ViewRef:()=>Ag,asNativeElements:()=>Ng,assertPlatform:()=>vg,createNgModuleRef:()=>Th,createPlatform:()=>pg,createPlatformFactory:()=>hg,defineInjectable:()=>F,destroyPlatform:()=>yg,enableProdMode:()=>Dg,forwardRef:()=>l,getDebugNode:()=>Wg,getModuleFactory:()=>Sg,getNgModuleById:()=>Eg,getPlatform:()=>gg,inject:()=>qr,isDevMode:()=>Og,platformCore:()=>lb,resolveForwardRef:()=>f,setTestabilityGetter:()=>sg,ɵALLOW_MULTIPLE_PLATFORMS:()=>fg,ɵAPP_ID_RANDOM_PROVIDER:()=>jy,ɵChangeDetectorStatus:()=>Y,ɵComponentFactory:()=>sh,ɵConsole:()=>Vy,ɵDEFAULT_LOCALE_ID:()=>Fd,ɵINJECTOR_SCOPE:()=>Ru,ɵLifecycleHooksFeature:()=>vc,ɵLocaleDataIndex:()=>Nd,ɵNG_COMP_DEF:()=>ce,ɵNG_DIR_DEF:()=>le,ɵNG_ELEMENT_ID:()=>he,ɵNG_INJ_DEF:()=>B,ɵNG_MOD_DEF:()=>de,ɵNG_PIPE_DEF:()=>fe,ɵNG_PROV_DEF:()=>U,ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR:()=>gh,ɵNO_CHANGE:()=>Hs,ɵNgModuleFactory:()=>jh,ɵNoopNgZone:()=>rg,ɵReflectionCapabilities:()=>kr,ɵRender3ComponentFactory:()=>Ch,ɵRender3ComponentRef:()=>xh,ɵRender3NgModuleRef:()=>Ah,ɵRuntimeError:()=>p,ɵViewRef:()=>mh,ɵ_sanitizeHtml:()=>si,ɵ_sanitizeUrl:()=>Lo,ɵallowSanitizationBypassAndThrow:()=>Do,ɵbypassSanitizationTrustHtml:()=>Eo,ɵbypassSanitizationTrustResourceUrl:()=>Ao,ɵbypassSanitizationTrustScript:()=>Po,ɵbypassSanitizationTrustStyle:()=>Io,ɵbypassSanitizationTrustUrl:()=>To,ɵclearResolutionOfComponentResourcesQueue:()=>uo,ɵcompileComponent:()=>ry,ɵcompileDirective:()=>oy,ɵcompileNgModule:()=>Uv,ɵcompileNgModuleDefs:()=>Bv,ɵcompileNgModuleFactory:()=>cg,ɵcompilePipe:()=>by,ɵcreateInjector:()=>Hu,ɵdefaultIterableDiffers:()=>ub,ɵdefaultKeyValueDiffers:()=>cb,ɵdetectChanges:()=>Au,ɵdevModeEqual:()=>Ec,ɵfindLocaleData:()=>Pd,ɵflushModuleScopingQueueAsMuchAsPossible:()=>$v,ɵgetDebugNode:()=>Wg,ɵgetDebugNodeR2:()=>zg,ɵgetDirectives:()=>tc,ɵgetHostElement:()=>rc,ɵgetInjectableDef:()=>V,ɵgetLContext:()=>bi,ɵgetLocaleCurrencyCode:()=>Td,ɵgetLocalePluralCase:()=>Ad,ɵgetSanitizationBypassType:()=>So,ɵglobal:()=>ie,ɵinjectChangeDetectorRef:()=>Tg,ɵisBoundToModule:()=>lg,ɵisDefaultChangeDetectionStrategy:()=>ee,ɵisListLikeIterable:()=>Ic,ɵisObservable:()=>Wl,ɵisPromise:()=>Ul,ɵisSubscribable:()=>Bl,ɵivyEnabled:()=>db,ɵmakeDecorator:()=>ir,ɵmarkDirty:()=>ju,ɵnoSideEffects:()=>Z,ɵpatchComponentDefWithScope:()=>Yv,ɵpublishDefaultGlobalUtils:()=>cc,ɵpublishGlobalUtil:()=>lc,ɵregisterLocaleData:()=>Id,ɵregisterNgModuleType:()=>Ih,ɵrenderComponent:()=>fc,ɵresetCompiledComponents:()=>Jv,ɵresetJitOptions:()=>Fv,ɵresolveComponentResources:()=>oo,ɵsetClassMetadata:()=>Oh,ɵsetCurrentInjector:()=>Ur,ɵsetDocument:()=>pt,ɵsetLocaleId:()=>Ud,ɵstore:()=>rl,ɵstringify:()=>a,ɵtransitiveScopesFor:()=>Xv,ɵunregisterLocaleData:()=>kd,ɵunwrapSafeValue:()=>Oo,ɵwhenRendered:()=>yc,ɵɵCopyDefinitionFeature:()=>Oc,ɵɵFactoryTarget:()=>gr,ɵɵInheritDefinitionFeature:()=>bc,ɵɵNgOnChangesFeature:()=>nt,ɵɵProvidersFeature:()=>oh,ɵɵadvance:()=>Us,ɵɵattribute:()=>Fc,ɵɵattributeInterpolate1:()=>Kc,ɵɵattributeInterpolate2:()=>Gc,ɵɵattributeInterpolate3:()=>Jc,ɵɵattributeInterpolate4:()=>Zc,ɵɵattributeInterpolate5:()=>Qc,ɵɵattributeInterpolate6:()=>Yc,ɵɵattributeInterpolate7:()=>Xc,ɵɵattributeInterpolate8:()=>el,ɵɵattributeInterpolateV:()=>tl,ɵɵclassMap:()=>Sf,ɵɵclassMapInterpolate1:()=>Qf,ɵɵclassMapInterpolate2:()=>Yf,ɵɵclassMapInterpolate3:()=>Xf,ɵɵclassMapInterpolate4:()=>ed,ɵɵclassMapInterpolate5:()=>td,ɵɵclassMapInterpolate6:()=>nd,ɵɵclassMapInterpolate7:()=>rd,ɵɵclassMapInterpolate8:()=>od,ɵɵclassMapInterpolateV:()=>id,ɵɵclassProp:()=>xf,ɵɵcontentQuery:()=>Iv,ɵɵdefineComponent:()=>ye,ɵɵdefineDirective:()=>xe,ɵɵdefineInjectable:()=>R,ɵɵdefineInjector:()=>L,ɵɵdefineNgModule:()=>we,ɵɵdefinePipe:()=>Oe,ɵɵdirectiveInject:()=>Tl,ɵɵdisableBindings:()=>At,ɵɵelement:()=>Fl,ɵɵelementContainer:()=>$l,ɵɵelementContainerEnd:()=>Vl,ɵɵelementContainerStart:()=>Ll,ɵɵelementEnd:()=>Rl,ɵɵelementStart:()=>Nl,ɵɵenableBindings:()=>Tt,ɵɵgetCurrentView:()=>Hl,ɵɵgetInheritedFactory:()=>Xn,ɵɵhostProperty:()=>xd,ɵɵi18n:()=>qp,ɵɵi18nApply:()=>Jp,ɵɵi18nAttributes:()=>Kp,ɵɵi18nEnd:()=>zp,ɵɵi18nExp:()=>Gp,ɵɵi18nPostprocess:()=>Zp,ɵɵi18nStart:()=>Wp,ɵɵinject:()=>Wr,ɵɵinjectAttribute:()=>tr,ɵɵinvalidFactory:()=>Al,ɵɵinvalidFactoryDep:()=>zr,ɵɵlistener:()=>zl,ɵɵloadQuery:()=>Pv,ɵɵnamespaceHTML:()=>vn,ɵɵnamespaceMathML:()=>hn,ɵɵnamespaceSVG:()=>pn,ɵɵnextContext:()=>Zl,ɵɵngDeclareClassMetadata:()=>hb,ɵɵngDeclareComponent:()=>vb,ɵɵngDeclareDirective:()=>pb,ɵɵngDeclareFactory:()=>yb,ɵɵngDeclareInjectable:()=>bb,ɵɵngDeclareInjector:()=>mb,ɵɵngDeclareNgModule:()=>_b,ɵɵngDeclarePipe:()=>wb,ɵɵpipe:()=>Zh,ɵɵpipeBind1:()=>Qh,ɵɵpipeBind2:()=>Yh,ɵɵpipeBind3:()=>Xh,ɵɵpipeBind4:()=>ev,ɵɵpipeBindV:()=>tv,ɵɵprojection:()=>Xl,ɵɵprojectionDef:()=>Yl,ɵɵproperty:()=>jl,ɵɵpropertyInterpolate:()=>ef,ɵɵpropertyInterpolate1:()=>tf,ɵɵpropertyInterpolate2:()=>nf,ɵɵpropertyInterpolate3:()=>rf,ɵɵpropertyInterpolate4:()=>of,ɵɵpropertyInterpolate5:()=>sf,ɵɵpropertyInterpolate6:()=>af,ɵɵpropertyInterpolate7:()=>uf,ɵɵpropertyInterpolate8:()=>cf,ɵɵpropertyInterpolateV:()=>lf,ɵɵpureFunction0:()=>kh,ɵɵpureFunction1:()=>Nh,ɵɵpureFunction2:()=>Rh,ɵɵpureFunction3:()=>Fh,ɵɵpureFunction4:()=>Lh,ɵɵpureFunction5:()=>Vh,ɵɵpureFunction6:()=>$h,ɵɵpureFunction7:()=>Hh,ɵɵpureFunction8:()=>Uh,ɵɵpureFunctionV:()=>Bh,ɵɵqueryRefresh:()=>Sv,ɵɵreference:()=>ol,ɵɵresolveBody:()=>$i,ɵɵresolveDocument:()=>Vi,ɵɵresolveWindow:()=>Li,ɵɵrestoreView:()=>Nt,ɵɵsanitizeHtml:()=>ci,ɵɵsanitizeResourceUrl:()=>di,ɵɵsanitizeScript:()=>pi,ɵɵsanitizeStyle:()=>li,ɵɵsanitizeUrl:()=>fi,ɵɵsanitizeUrlOrResourceUrl:()=>yi,ɵɵsetComponentScope:()=>ge,ɵɵsetNgModuleScope:()=>Me,ɵɵstyleMap:()=>Of,ɵɵstyleMapInterpolate1:()=>sd,ɵɵstyleMapInterpolate2:()=>ad,ɵɵstyleMapInterpolate3:()=>ud,ɵɵstyleMapInterpolate4:()=>cd,ɵɵstyleMapInterpolate5:()=>ld,ɵɵstyleMapInterpolate6:()=>fd,ɵɵstyleMapInterpolate7:()=>dd,ɵɵstyleMapInterpolate8:()=>pd,ɵɵstyleMapInterpolateV:()=>hd,ɵɵstyleProp:()=>Cf,ɵɵstylePropInterpolate1:()=>vd,ɵɵstylePropInterpolate2:()=>yd,ɵɵstylePropInterpolate3:()=>gd,ɵɵstylePropInterpolate4:()=>bd,ɵɵstylePropInterpolate5:()=>md,ɵɵstylePropInterpolate6:()=>_d,ɵɵstylePropInterpolate7:()=>wd,ɵɵstylePropInterpolate8:()=>Md,ɵɵstylePropInterpolateV:()=>Cd,ɵɵsyntheticHostListener:()=>ql,ɵɵsyntheticHostProperty:()=>Od,ɵɵtemplate:()=>nl,ɵɵtemplateRefExtractor:()=>kv,ɵɵtext:()=>$f,ɵɵtextInterpolate:()=>Hf,ɵɵtextInterpolate1:()=>Uf,ɵɵtextInterpolate2:()=>Bf,ɵɵtextInterpolate3:()=>Wf,ɵɵtextInterpolate4:()=>zf,ɵɵtextInterpolate5:()=>qf,ɵɵtextInterpolate6:()=>Kf,ɵɵtextInterpolate7:()=>Gf,ɵɵtextInterpolate8:()=>Jf,ɵɵtextInterpolateV:()=>Zf,ɵɵtrustConstantHtml:()=>hi,ɵɵtrustConstantResourceUrl:()=>vi,ɵɵviewQuery:()=>Ev});var r=n(1964),o=n(4857);function i(e){for(let t in e)if(e[t]===i)return t;throw Error("Could not find renamed property on target object.")}function s(e,t){for(const n in t)t.hasOwnProperty(n)&&!e.hasOwnProperty(n)&&(e[n]=t[n])}function a(e){if("string"==typeof e)return e;if(Array.isArray(e))return"["+e.map(a).join(", ")+"]";if(null==e)return""+e;if(e.overriddenName)return`${e.overriddenName}`;if(e.name)return`${e.name}`;const t=e.toString();if(null==t)return""+t;const n=t.indexOf("\n");return-1===n?t:t.substring(0,n)}function u(e,t){return null==e||""===e?null===t?"":t:null==t||""===t?e:e+" "+t}const c=i({__forward_ref__:i});function l(e){return e.__forward_ref__=l,e.toString=function(){return a(this())},e}function f(e){return d(e)?e():e}function d(e){return"function"==typeof e&&e.hasOwnProperty(c)&&e.__forward_ref__===l}class p extends Error{constructor(e,t){super(h(e,t)),this.code=e}}function h(e,t){const n=`NG0${Math.abs(e)}`;let r=`${n}${t?": "+t:""}`;return ngDevMode&&e<0&&(r=`${r}. Find more at https://angular.io/errors/${n}`),r}function v(e){return"string"==typeof e?e:null==e?"":String(e)}function y(e){return"function"==typeof e?e.name||e.toString():"object"==typeof e&&null!=e&&"function"==typeof e.type?e.type.name||e.type.toString():v(e)}function g(e,t){const n=t?`. Dependency path: ${t.join(" > ")} > ${e}`:"";throw new p(-200,`Circular dependency in DI detected for ${e}${n}`)}function b(){throw new Error("Cannot mix multi providers and regular providers")}function m(e,t){const n=t?` in ${t}`:"";throw new p(-201,`No provider for ${y(e)} found${n}`)}function _(e,t){"number"!=typeof e&&A(t,typeof e,"number","===")}function w(e,t,n){_(e,"Expected a number"),E(e,n,"Expected number to be less than or equal to"),P(e,t,"Expected number to be greater than or equal to")}function M(e,t){"string"!=typeof e&&A(t,null===e?"null":typeof e,"string","===")}function C(e,t,n){e!=t&&A(n,e,t,"==")}function x(e,t,n){e==t&&A(n,e,t,"!=")}function O(e,t,n){e!==t&&A(n,e,t,"===")}function D(e,t,n){e===t&&A(n,e,t,"!==")}function S(e,t,n){e<t||A(n,e,t,"<")}function E(e,t,n){e<=t||A(n,e,t,"<=")}function I(e,t,n){e>t||A(n,e,t,">")}function P(e,t,n){e>=t||A(n,e,t,">=")}function T(e,t){null==e&&A(t,e,null,"!=")}function A(e,t,n,r){throw new Error(`ASSERTION ERROR: ${e}`+(null==r?"":` [Expected=> ${n} ${r} ${t} <=Actual]`))}function j(e){"undefined"!=typeof Node&&e instanceof Node||"object"==typeof e&&null!=e&&"WebWorkerRenderNode"===e.constructor.name||A(`The provided value must be an instance of a DOM Node but got ${a(e)}`)}function k(e,t){T(e,"Array must be defined.");const n=e.length;(t<0||t>=n)&&A(`Index expected to be less than ${n} but got ${t}`)}function N(e,...t){if(-1!==t.indexOf(e))return!0;A(`Expected value to be one of ${JSON.stringify(t)} but was ${JSON.stringify(e)}.`)}function R(e){return{token:e.token,providedIn:e.providedIn||null,factory:e.factory,value:void 0}}const F=R;function L(e){return{providers:e.providers||[],imports:e.imports||[]}}function V(e){return $(e,U)||$(e,W)}function $(e,t){return e.hasOwnProperty(t)?e[t]:null}function H(e){return e&&(e.hasOwnProperty(B)||e.hasOwnProperty(z))?e[B]:null}const U=i({ɵprov:i}),B=i({ɵinj:i}),W=i({ngInjectableDef:i}),z=i({ngInjectorDef:i});var q;let K;function G(e){const t=K;return K=e,t}function J(e,t,n){const r=V(e);return r&&"root"==r.providedIn?void 0===r.value?r.value=r.factory():r.value:n&q.Optional?null:void 0!==t?t:void m(a(e),"Injector")}function Z(e){return{toString:e}.toString()}var Q,Y,X;function ee(e){return null==e||e===Q.Default}!function(e){e[e.Default=0]="Default",e[e.Host=1]="Host",e[e.Self=2]="Self",e[e.SkipSelf=4]="SkipSelf",e[e.Optional=8]="Optional"}(q||(q={})),function(e){e[e.OnPush=0]="OnPush",e[e.Default=1]="Default"}(Q||(Q={})),function(e){e[e.CheckOnce=0]="CheckOnce",e[e.Checked=1]="Checked",e[e.CheckAlways=2]="CheckAlways",e[e.Detached=3]="Detached",e[e.Errored=4]="Errored",e[e.Destroyed=5]="Destroyed"}(Y||(Y={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(X||(X={}));const te="undefined"!=typeof globalThis&&globalThis,ne="undefined"!=typeof window&&window,re="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,oe="undefined"!=typeof global&&global,ie=te||oe||ne||re;function se(){return!("undefined"!=typeof ngDevMode&&!ngDevMode||("object"!=typeof ngDevMode&&function(){const e="undefined"!=typeof location?location.toString():"",t={namedConstructors:-1!=e.indexOf("ngDevMode=namedConstructors"),firstCreatePass:0,tNode:0,tView:0,rendererCreateTextNode:0,rendererSetText:0,rendererCreateElement:0,rendererAddEventListener:0,rendererSetAttribute:0,rendererRemoveAttribute:0,rendererSetProperty:0,rendererSetClassName:0,rendererAddClass:0,rendererRemoveClass:0,rendererSetStyle:0,rendererRemoveStyle:0,rendererDestroy:0,rendererDestroyNode:0,rendererMoveNode:0,rendererRemoveNode:0,rendererAppendChild:0,rendererInsertBefore:0,rendererCreateComment:0},n=-1===e.indexOf("ngDevMode=false");ie.ngDevMode=n&&t}(),"undefined"==typeof ngDevMode||!ngDevMode))}const ae={},ue=[];("undefined"==typeof ngDevMode||ngDevMode)&&se()&&(Object.freeze(ae),Object.freeze(ue));const ce=i({ɵcmp:i}),le=i({ɵdir:i}),fe=i({ɵpipe:i}),de=i({ɵmod:i}),pe=i({ɵfac:i}),he=i({__NG_ELEMENT_ID__:i});let ve=0;function ye(e){return Z((()=>{("undefined"==typeof ngDevMode||ngDevMode)&&se();const t={},n={type:e.type,providersResolver:null,decls:e.decls,vars:e.vars,factory:null,template:e.template||null,consts:e.consts||null,ngContentSelectors:e.ngContentSelectors,hostBindings:e.hostBindings||null,hostVars:e.hostVars||0,hostAttrs:e.hostAttrs||null,contentQueries:e.contentQueries||null,declaredInputs:t,inputs:null,outputs:null,exportAs:e.exportAs||null,onPush:e.changeDetection===Q.OnPush,directiveDefs:null,pipeDefs:null,selectors:e.selectors||ue,viewQuery:e.viewQuery||null,features:e.features||null,data:e.data||{},encapsulation:e.encapsulation||X.Emulated,id:"c",styles:e.styles||ue,_:null,setInput:null,schemas:e.schemas||null,tView:null},r=e.directives,o=e.features,i=e.pipes;return n.id+=ve++,n.inputs=Ce(e.inputs,t),n.outputs=Ce(e.outputs),o&&o.forEach((e=>e(n))),n.directiveDefs=r?()=>("function"==typeof r?r():r).map(be):null,n.pipeDefs=i?()=>("function"==typeof i?i():i).map(me):null,n}))}function ge(e,t,n){const r=e.ɵcmp;r.directiveDefs=()=>t.map(be),r.pipeDefs=()=>n.map(me)}function be(e){const t=De(e)||Se(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is neither 'ComponentType' or 'DirectiveType'.`);return t}function me(e){const t=Ee(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is not a 'PipeType'.`);return t}const _e={};function we(e){return Z((()=>{const t={type:e.type,bootstrap:e.bootstrap||ue,declarations:e.declarations||ue,imports:e.imports||ue,exports:e.exports||ue,transitiveCompileScopes:null,schemas:e.schemas||null,id:e.id||null};return null!=e.id&&(_e[e.id]=e.type),t}))}function Me(e,t){return Z((()=>{const n=Ie(e,!0);n.declarations=t.declarations||ue,n.imports=t.imports||ue,n.exports=t.exports||ue}))}function Ce(e,t){if(null==e)return ae;const n={};for(const r in e)if(e.hasOwnProperty(r)){let o=e[r],i=o;Array.isArray(o)&&(i=o[1],o=o[0]),n[o]=r,t&&(t[o]=i)}return n}const xe=ye;function Oe(e){return{type:e.type,name:e.name,factory:null,pure:!1!==e.pure,onDestroy:e.type.prototype.ngOnDestroy||null}}function De(e){return e[ce]||null}function Se(e){return e[le]||null}function Ee(e){return e[fe]||null}function Ie(e,t){const n=e[de]||null;if(!n&&!0===t)throw new Error(`Type ${a(e)} does not have 'ɵmod' property.`);return n}const Pe=10,Te=20,Ae=["Root","Component","Embedded"];function je(e){return Array.isArray(e)&&"object"==typeof e[1]}function ke(e){return Array.isArray(e)&&!0===e[1]}function Ne(e){return 0!=(8&e.flags)}function Re(e){return 2==(2&e.flags)}function Fe(e){return 1==(1&e.flags)}function Le(e){return null!==e.template}function Ve(e,t){$e(e,t[1])}function $e(e,t){He(e),e.hasOwnProperty("tView_")&&C(e.tView_,t,"This TNode does not belong to this TView.")}function He(e){T(e,"TNode must be defined"),e&&"object"==typeof e&&e.hasOwnProperty("directiveStylingLast")||A("Not of type TNode, got: "+e)}function Ue(e){T(e,"Expected TIcu to be defined"),"number"!=typeof e.currentCaseLViewIndex&&A("Object is not of TIcu type.")}function Be(e,t="Type passed in is not ComponentType, it does not have 'ɵcmp' property."){De(e)||A(t)}function We(e){T(e,"currentTNode should exist!"),T(e.parent,"currentTNode should have a parent")}function ze(e){T(e,"LContainer must be defined"),C(ke(e),!0,"Expecting LContainer")}function qe(e){e&&C(je(e),!0,"Expecting LView or undefined or null")}function Ke(e){T(e,"LView must be defined"),C(je(e),!0,"Expecting LView")}function Ge(e,t){C(e.firstCreatePass,!0,t||"Should only be called in first create pass.")}function Je(e,t){C(e.firstUpdatePass,!0,t||"Should only be called in first update pass.")}function Ze(e,t){Qe(e[1].expandoStartIndex,e.length,t)}function Qe(e,t,n){e<=n&&n<t||A(`Index out of range (expecting ${e} <= ${n} < ${t})`)}function Ye(e,t){T(e,t||"Component views should always have a parent view (component's host view)")}function Xe(e,t){Ze(e,t),Ze(e,t+8),_(e[t+0],"injectorIndex should point to a bloom filter"),_(e[t+1],"injectorIndex should point to a bloom filter"),_(e[t+2],"injectorIndex should point to a bloom filter"),_(e[t+3],"injectorIndex should point to a bloom filter"),_(e[t+4],"injectorIndex should point to a bloom filter"),_(e[t+5],"injectorIndex should point to a bloom filter"),_(e[t+6],"injectorIndex should point to a bloom filter"),_(e[t+7],"injectorIndex should point to a bloom filter"),_(e[t+8],"injectorIndex should point to parent injector")}function et(e,t){const n=e.hasOwnProperty(pe);if(!n&&!0===t&&ngDevMode)throw new Error(`Type ${a(e)} does not have 'ɵfac' property.`);return n?e[pe]:null}class tt{constructor(e,t,n){this.previousValue=e,this.currentValue=t,this.firstChange=n}isFirstChange(){return this.firstChange}}function nt(){return rt}function rt(e){return e.type.prototype.ngOnChanges&&(e.setInput=it),ot}function ot(){const e=st(this),t=null==e?void 0:e.current;if(t){const n=e.previous;if(n===ae)e.previous=t;else for(let e in t)n[e]=t[e];e.current=null,this.ngOnChanges(t)}}function it(e,t,n,r){const o=st(e)||function(e,t){return e.__ngSimpleChanges__=t}(e,{previous:ae,current:null}),i=o.current||(o.current={}),s=o.previous,a=this.declaredInputs[n],u=s[a];i[a]=new tt(u&&u.currentValue,t,s===ae),e[r]=t}function st(e){return e.__ngSimpleChanges__||null}nt.ngInherit=!0;let at=null;const ut=e=>{at=e},ct=function(e,t,n){null!=at&&at(e,t,n)},lt="svg",ft="math";let dt;function pt(e){dt=e}function ht(){return void 0!==dt?dt:"undefined"!=typeof document?document:void 0}var vt;function yt(e){return!!e.listen}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(vt||(vt={}));const gt={createRenderer:(e,t)=>ht()};function bt(e){for(;Array.isArray(e);)e=e[0];return e}function mt(e,t){return ngDevMode&&k(t,e),ngDevMode&&P(e,Te,"Expected to be past HEADER_OFFSET"),bt(t[e])}function _t(e,t){ngDevMode&&Ve(e,t),ngDevMode&&k(t,e.index);const n=bt(t[e.index]);return ngDevMode&&!yt(t[11])&&j(n),n}function wt(e,t){ngDevMode&&I(t,-1,"wrong index for TNode"),ngDevMode&&S(t,e.data.length,"wrong index for TNode");const n=e.data[t];return ngDevMode&&null!==n&&He(n),n}function Mt(e,t){return ngDevMode&&k(e,t),e[t]}function Ct(e,t){ngDevMode&&k(t,e);const n=t[e];return je(n)?n:n[0]}function xt(e){return 4==(4&e[2])}function Ot(e){return 128==(128&e[2])}function Dt(e,t){return null==t?null:(ngDevMode&&k(e,t),e[t])}function St(e){e[18]=0}function Et(e,t){e[5]+=t;let n=e,r=e[3];for(;null!==r&&(1===t&&1===n[5]||-1===t&&0===n[5]);)r[5]+=t,n=r,r=r[3]}const It={lFrame:sn(null),bindingsEnabled:!0,isInCheckNoChangesMode:!1};function Pt(){return It.bindingsEnabled}function Tt(){It.bindingsEnabled=!0}function At(){It.bindingsEnabled=!1}function jt(){return It.lFrame.lView}function kt(){return It.lFrame.tView}function Nt(e){return It.lFrame.contextLView=e,e[8]}function Rt(){let e=Ft();for(;null!==e&&64===e.type;)e=e.parent;return e}function Ft(){return It.lFrame.currentTNode}function Lt(){const e=It.lFrame,t=e.currentTNode;return e.isParent?t:t.parent}function Vt(e,t){ngDevMode&&e&&$e(e,It.lFrame.tView);const n=It.lFrame;n.currentTNode=e,n.isParent=t}function $t(){return It.lFrame.isParent}function Ht(){It.lFrame.isParent=!1}function Ut(){return It.isInCheckNoChangesMode}function Bt(e){It.isInCheckNoChangesMode=e}function Wt(){const e=It.lFrame;let t=e.bindingRootIndex;return-1===t&&(t=e.bindingRootIndex=e.tView.bindingStartIndex),t}function zt(){return It.lFrame.bindingIndex}function qt(e){return It.lFrame.bindingIndex=e}function Kt(){return It.lFrame.bindingIndex++}function Gt(e){const t=It.lFrame,n=t.bindingIndex;return t.bindingIndex=t.bindingIndex+e,n}function Jt(e){It.lFrame.inI18n=e}function Zt(e,t){const n=It.lFrame;n.bindingIndex=n.bindingRootIndex=e,Qt(t)}function Qt(e){It.lFrame.currentDirectiveIndex=e}function Yt(e){const t=It.lFrame.currentDirectiveIndex;return-1===t?null:e[t]}function Xt(){return It.lFrame.currentQueryIndex}function en(e){It.lFrame.currentQueryIndex=e}function tn(e){const t=e[1];return 2===t.type?(ngDevMode&&T(t.declTNode,"Embedded TNodes should have declaration parents."),t.declTNode):1===t.type?e[6]:null}function nn(e,t,n){if(ngDevMode&&qe(e),n&q.SkipSelf){ngDevMode&&$e(t,e[1]);let r=t,o=e;for(;ngDevMode&&T(r,"Parent TNode should be defined"),r=r.parent,!(null!==r||n&q.Host||(r=tn(o),null===r)||(ngDevMode&&T(o,"Parent LView should be defined"),o=o[15],10&r.type)););if(null===r)return!1;t=r,e=o}ngDevMode&&Ve(t,e);const r=It.lFrame=on();return r.currentTNode=t,r.lView=e,!0}function rn(e){ngDevMode&&x(e[0],e[1],"????"),ngDevMode&&qe(e);const t=on();ngDevMode&&(C(t.isParent,!0,"Expected clean LFrame"),C(t.lView,null,"Expected clean LFrame"),C(t.tView,null,"Expected clean LFrame"),C(t.selectedIndex,-1,"Expected clean LFrame"),C(t.elementDepthCount,0,"Expected clean LFrame"),C(t.currentDirectiveIndex,-1,"Expected clean LFrame"),C(t.currentNamespace,null,"Expected clean LFrame"),C(t.bindingRootIndex,-1,"Expected clean LFrame"),C(t.currentQueryIndex,0,"Expected clean LFrame"));const n=e[1];It.lFrame=t,ngDevMode&&n.firstChild&&$e(n.firstChild,n),t.currentTNode=n.firstChild,t.lView=e,t.tView=n,t.contextLView=e,t.bindingIndex=n.bindingStartIndex,t.inI18n=!1}function on(){const e=It.lFrame,t=null===e?null:e.child;return null===t?sn(e):t}function sn(e){const t={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:e,child:null,inI18n:!1};return null!==e&&(e.child=t),t}function an(){const e=It.lFrame;return It.lFrame=e.parent,e.currentTNode=null,e.lView=null,e}const un=an;function cn(){const e=an();e.isParent=!0,e.tView=null,e.selectedIndex=-1,e.contextLView=null,e.elementDepthCount=0,e.currentDirectiveIndex=-1,e.currentNamespace=null,e.bindingRootIndex=-1,e.bindingIndex=-1,e.currentQueryIndex=0}function ln(){return It.lFrame.selectedIndex}function fn(e){ngDevMode&&-1!==e&&P(e,Te,"Index must be past HEADER_OFFSET (or -1)."),ngDevMode&&S(e,It.lFrame.lView.length,"Can't set index passed end of LView"),It.lFrame.selectedIndex=e}function dn(){const e=It.lFrame;return wt(e.tView,e.selectedIndex)}function pn(){It.lFrame.currentNamespace=lt}function hn(){It.lFrame.currentNamespace=ft}function vn(){It.lFrame.currentNamespace=null}function yn(e,t){ngDevMode&&Ge(e);for(let n=t.directiveStart,r=t.directiveEnd;n<r;n++){const t=e.data[n];ngDevMode&&T(t,"Expecting DirectiveDef");const r=t.type.prototype,{ngAfterContentInit:o,ngAfterContentChecked:i,ngAfterViewInit:s,ngAfterViewChecked:a,ngOnDestroy:u}=r;o&&(e.contentHooks||(e.contentHooks=[])).push(-n,o),i&&((e.contentHooks||(e.contentHooks=[])).push(n,i),(e.contentCheckHooks||(e.contentCheckHooks=[])).push(n,i)),s&&(e.viewHooks||(e.viewHooks=[])).push(-n,s),a&&((e.viewHooks||(e.viewHooks=[])).push(n,a),(e.viewCheckHooks||(e.viewCheckHooks=[])).push(n,a)),null!=u&&(e.destroyHooks||(e.destroyHooks=[])).push(n,u)}}function gn(e,t,n){_n(e,t,3,n)}function bn(e,t,n,r){ngDevMode&&x(n,3,"Init pre-order hooks should not be called more than once"),(3&e[2])===n&&_n(e,t,n,r)}function mn(e,t){ngDevMode&&x(t,3,"Init hooks phase should not be incremented after all init hooks have been run.");let n=e[2];(3&n)===t&&(n&=2047,n+=1,e[2]=n)}function _n(e,t,n,r){ngDevMode&&C(Ut(),!1,"Hooks should never be run when in check no changes mode.");const o=void 0!==r?65535&e[18]:0,i=null!=r?r:-1,s=t.length-1;let a=0;for(let u=o;u<s;u++)if("number"==typeof t[u+1]){if(a=t[u],null!=r&&a>=r)break}else t[u]<0&&(e[18]+=65536),(a<i||-1==i)&&(wn(e,n,t,u),e[18]=(4294901760&e[18])+u+2),u++}function wn(e,t,n,r){const o=n[r]<0,i=n[r+1],s=e[o?-n[r]:n[r]];if(o){if(e[2]>>11<e[18]>>16&&(3&e[2])===t){e[2]+=2048,ct(4,s,i);try{i.call(s)}finally{ct(5,s,i)}}}else{ct(4,s,i);try{i.call(s)}finally{ct(5,s,i)}}}const Mn=-1;class Cn{constructor(e,t,n){this.factory=e,this.resolving=!1,ngDevMode&&T(e,"Factory not specified"),ngDevMode&&C(typeof e,"function","Expected factory function."),this.canSeeViewProviders=t,this.injectImpl=n}}function xn(e){let t="";return 1&e&&(t+="|Text"),2&e&&(t+="|Element"),4&e&&(t+="|Container"),8&e&&(t+="|ElementContainer"),16&e&&(t+="|Projection"),32&e&&(t+="|IcuContainer"),64&e&&(t+="|Placeholder"),t.length>0?t.substring(1):t}function On(e,t,n){T(e,"should be called with a TNode"),0==(e.type&t)&&A(n||`Expected [${xn(t)}] but got ${xn(e.type)}.`)}function Dn(e,t,n){const r=yt(e);let o=0;for(;o<n.length;){const i=n[o];if("number"==typeof i){if(0!==i)break;o++;const s=n[o++],a=n[o++],u=n[o++];ngDevMode&&ngDevMode.rendererSetAttribute++,r?e.setAttribute(t,a,u,s):t.setAttributeNS(s,a,u)}else{const s=i,a=n[++o];ngDevMode&&ngDevMode.rendererSetAttribute++,En(s)?r&&e.setProperty(t,s,a):r?e.setAttribute(t,s,a):t.setAttribute(s,a),o++}}return o}function Sn(e){return 3===e||4===e||6===e}function En(e){return 64===e.charCodeAt(0)}function In(e,t){if(null===t||0===t.length);else if(null===e||0===e.length)e=t.slice();else{let n=-1;for(let r=0;r<t.length;r++){const o=t[r];"number"==typeof o?n=o:0===n||Pn(e,n,o,null,-1===n||2===n?t[++r]:null)}}return e}function Pn(e,t,n,r,o){let i=0,s=e.length;if(-1===t)s=-1;else for(;i<e.length;){const n=e[i++];if("number"==typeof n){if(n===t){s=-1;break}if(n>t){s=i-1;break}}}for(;i<e.length;){const t=e[i];if("number"==typeof t)break;if(t===n){if(null===r)return void(null!==o&&(e[i+1]=o));if(r===e[i+1])return void(e[i+2]=o)}i++,null!==r&&i++,null!==o&&i++}-1!==s&&(e.splice(s,0,t),i=s+1),e.splice(i++,0,n),null!==r&&e.splice(i++,0,r),null!==o&&e.splice(i++,0,o)}function Tn(e){return e!==Mn}function An(e){return ngDevMode&&_(e,"Number expected"),ngDevMode&&x(e,-1,"Not a valid state."),ngDevMode&&I(32767&e,Te,"Parent injector must be pointing past HEADER_OFFSET."),32767&e}function jn(e,t){let n=e>>16,r=t;for(;n>0;)r=r[15],n--;return r}let kn=!0;function Nn(e){const t=kn;return kn=e,t}let Rn=0;function Fn(e,t){const n=Vn(e,t);if(-1!==n)return n;const r=t[1];r.firstCreatePass&&(e.injectorIndex=t.length,Ln(r.data,e),Ln(t,null),Ln(r.blueprint,null));const o=$n(e,t),i=e.injectorIndex;if(Tn(o)){const e=An(o),n=jn(o,t),r=n[1].data;for(let o=0;o<8;o++)t[i+o]=n[e+o]|r[e+o]}return t[i+8]=o,i}function Ln(e,t){e.push(0,0,0,0,0,0,0,0,t)}function Vn(e,t){return-1===e.injectorIndex||e.parent&&e.parent.injectorIndex===e.injectorIndex||null===t[e.injectorIndex+8]?-1:(ngDevMode&&k(t,e.injectorIndex),e.injectorIndex)}function $n(e,t){if(e.parent&&-1!==e.parent.injectorIndex)return e.parent.injectorIndex;let n=0,r=null,o=t;for(;null!==o;){const e=o[1],t=e.type;if(2===t?(ngDevMode&&T(e.declTNode,"Embedded TNodes should have declaration parents."),r=e.declTNode):1===t?r=o[6]:(ngDevMode&&C(e.type,0,"Root type expected"),r=null),null===r)return Mn;if(ngDevMode&&r&&Ve(r,o[15]),n++,o=o[15],-1!==r.injectorIndex)return r.injectorIndex|n<<16}return Mn}function Hn(e,t,n){!function(e,t,n){let r;ngDevMode&&C(t.firstCreatePass,!0,"expected firstCreatePass to be true"),"string"==typeof n?r=n.charCodeAt(0)||0:n.hasOwnProperty(he)&&(r=n[he]),null==r&&(r=n[he]=Rn++);const o=255&r,i=1<<o;t.data[e+(o>>5)]|=i}(e,t,n)}function Un(e,t,n){if(n&q.Optional)return e;m(t,"NodeInjector")}function Bn(e,t,n,r){if(n&q.Optional&&void 0===r&&(r=null),0==(n&(q.Self|q.Host))){const o=e[9],i=G(void 0);try{return o?o.get(t,r,n&q.Optional):J(t,r,n&q.Optional)}finally{G(i)}}return Un(r,t,n)}function Wn(e,t,n,r=q.Default,o){if(null!==e){const i=function(e){if(ngDevMode&&T(e,"token must be defined"),"string"==typeof e)return e.charCodeAt(0)||0;const t=e.hasOwnProperty(he)?e[he]:void 0;return"number"==typeof t?t>=0?255&t:(ngDevMode&&C(t,-1,"Expecting to get Special Injector Id"),qn):t}(n);if("function"==typeof i){if(!nn(t,e,r))return r&q.Host?Un(o,n,r):Bn(t,n,r,o);try{const e=i(r);if(null!=e||r&q.Optional)return e;m(n)}finally{un()}}else if("number"==typeof i){let o=null,s=Vn(e,t),a=Mn,u=r&q.Host?t[16][6]:null;for((-1===s||r&q.SkipSelf)&&(a=-1===s?$n(e,t):t[s+8],a!==Mn&&Qn(r,!1)?(o=t[1],s=An(a),t=jn(a,t)):s=-1);-1!==s;){ngDevMode&&Xe(t,s);const e=t[1];if(ngDevMode&&Ve(e.data[s+8],t),Zn(i,s,e.data)){const e=Kn(s,t,n,o,r,u);if(e!==zn)return e}a=t[s+8],a!==Mn&&Qn(r,t[1].data[s+8]===u)&&Zn(i,s,t)?(o=e,s=An(a),t=jn(a,t)):s=-1}}}return Bn(t,n,r,o)}const zn={};function qn(){return new Yn(Rt(),jt())}function Kn(e,t,n,r,o,i){const s=t[1],a=s.data[e+8],u=Gn(a,s,n,null==r?Re(a)&&kn:r!=s&&0!=(3&a.type),o&q.Host&&i===a);return null!==u?Jn(t,s,u,a):zn}function Gn(e,t,n,r,o){const i=e.providerIndexes,s=t.data,a=1048575&i,u=e.directiveStart,c=e.directiveEnd,l=i>>20,f=o?a+l:c;for(let e=r?a:a+l;e<f;e++){const t=s[e];if(e<u&&n===t||e>=u&&t.type===n)return e}if(o){const e=s[u];if(e&&Le(e)&&e.type===n)return u}return null}function Jn(e,t,n,r){let o=e[n];const i=t.data;if(o instanceof Cn){const a=o;a.resolving&&g(y(i[n]));const u=Nn(a.canSeeViewProviders);a.resolving=!0;const c=a.injectImpl?G(a.injectImpl):null,l=nn(e,r,q.Default);ngDevMode&&C(l,!0,"Because flags do not contain `SkipSelf' we expect this to always succeed.");try{o=e[n]=a.factory(void 0,i,e,r),t.firstCreatePass&&n>=r.directiveStart&&(ngDevMode&&(void 0!==(s=i[n]).type&&null!=s.selectors&&void 0!==s.inputs||A("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.")),function(e,t,n){ngDevMode&&Ge(n);const{ngOnChanges:r,ngOnInit:o,ngDoCheck:i}=t.type.prototype;if(r){const r=rt(t);(n.preOrderHooks||(n.preOrderHooks=[])).push(e,r),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,r)}o&&(n.preOrderHooks||(n.preOrderHooks=[])).push(0-e,o),i&&((n.preOrderHooks||(n.preOrderHooks=[])).push(e,i),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,i))}(n,i[n],t))}finally{null!==c&&G(c),Nn(u),a.resolving=!1,un()}}var s;return o}function Zn(e,t,n){const r=1<<e;return!!(n[t+(e>>5)]&r)}function Qn(e,t){return!(e&q.Self||e&q.Host&&t)}class Yn{constructor(e,t){this._tNode=e,this._lView=t}get(e,t,n){return Wn(this._tNode,this._lView,e,n,t)}}function Xn(e){return Z((()=>{const t=e.prototype.constructor,n=t[pe]||er(t),r=Object.prototype;let o=Object.getPrototypeOf(e.prototype).constructor;for(;o&&o!==r;){const e=o[pe]||er(o);if(e&&e!==n)return e;o=Object.getPrototypeOf(o)}return e=>new e}))}function er(e){return d(e)?()=>{const t=er(f(e));return t&&t()}:et(e)}function tr(e){return function(e,t){if(ngDevMode&&On(e,15),ngDevMode&&T(e,"expecting tNode"),"class"===t)return e.classes;if("style"===t)return e.styles;const n=e.attrs;if(n){const e=n.length;let r=0;for(;r<e;){const o=n[r];if(Sn(o))break;if(0===o)r+=2;else if("number"==typeof o)for(r++;r<e&&"string"==typeof n[r];)r++;else{if(o===t)return n[r+1];r+=2}}}return null}(Rt(),e)}const nr="__annotations__",rr="__parameters__",or="__prop__metadata__";function ir(e,t,n,r,o){return Z((()=>{const i=sr(t);function s(...e){if(this instanceof s)return i.call(this,...e),this;const t=new s(...e);return function(n){return o&&o(n,...e),(n.hasOwnProperty(nr)?n[nr]:Object.defineProperty(n,nr,{value:[]})[nr]).push(t),r&&r(n),n}}return n&&(s.prototype=Object.create(n.prototype)),s.prototype.ngMetadataName=e,s.annotationCls=s,s}))}function sr(e){return function(...t){if(e){const n=e(...t);for(const e in n)this[e]=n[e]}}}function ar(e,t,n){return Z((()=>{const r=sr(t);function o(...e){if(this instanceof o)return r.apply(this,e),this;const t=new o(...e);return n.annotation=t,n;function n(e,n,r){const o=e.hasOwnProperty(rr)?e[rr]:Object.defineProperty(e,rr,{value:[]})[rr];for(;o.length<=r;)o.push(null);return(o[r]=o[r]||[]).push(t),e}}return n&&(o.prototype=Object.create(n.prototype)),o.prototype.ngMetadataName=e,o.annotationCls=o,o}))}function ur(e,t,n,r){return Z((()=>{const o=sr(t);function i(...e){if(this instanceof i)return o.apply(this,e),this;const t=new i(...e);return function(n,o){const i=n.constructor,s=i.hasOwnProperty(or)?i[or]:Object.defineProperty(i,or,{value:{}})[or];s[o]=s.hasOwnProperty(o)&&s[o]||[],s[o].unshift(t),r&&r(n,o,...e)}}return n&&(i.prototype=Object.create(n.prototype)),i.prototype.ngMetadataName=e,i.annotationCls=i,i}))}const cr=ar("Attribute",(e=>({attributeName:e,__NG_ELEMENT_ID__:()=>tr(e)})));class lr{constructor(e,t){this._desc=e,this.ngMetadataName="InjectionToken",this.ɵprov=void 0,"number"==typeof t?(("undefined"==typeof ngDevMode||ngDevMode)&&S(t,0,"Only negative numbers are supported here"),this.__NG_ELEMENT_ID__=t):void 0!==t&&(this.ɵprov=R({token:this,providedIn:t.providedIn||"root",factory:t.factory}))}toString(){return`InjectionToken ${this._desc}`}}const fr=new lr("AnalyzeForEntryComponents");class dr{}const pr=ur("ContentChildren",((e,t={})=>Object.assign({selector:e,first:!1,isViewQuery:!1,descendants:!1,emitDistinctChangesOnly:!0},t)),dr),hr=ur("ContentChild",((e,t={})=>Object.assign({selector:e,first:!0,isViewQuery:!1,descendants:!0},t)),dr),vr=ur("ViewChildren",((e,t={})=>Object.assign({selector:e,first:!1,isViewQuery:!0,descendants:!0,emitDistinctChangesOnly:!0},t)),dr),yr=ur("ViewChild",((e,t)=>Object.assign({selector:e,first:!0,isViewQuery:!0,descendants:!0},t)),dr);var gr,br;function mr(e){const t=ie.ng;if(t&&t.ɵcompilerFacade)return t.ɵcompilerFacade;if("undefined"==typeof ngDevMode||ngDevMode){console.error(`JIT compilation failed for ${e.kind}`,e.type);let t=`The ${e.kind} '${e.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n`;throw 1===e.usage?(t+=`The ${e.kind} is part of a library that has been partially compiled.\n`,t+="However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n",t+="\n",t+="Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n"):t+="JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n",t+="Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n",t+="or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.",new Error(t)}throw new Error("JIT compiler unavailable")}!function(e){e[e.Directive=0]="Directive",e[e.Component=1]="Component",e[e.Injectable=2]="Injectable",e[e.Pipe=3]="Pipe",e[e.NgModule=4]="NgModule"}(gr||(gr={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(br||(br={}));const _r=Function;function wr(e){return"function"==typeof e}function Mr(e,t){void 0===t&&(t=e);for(let n=0;n<e.length;n++){let r=e[n];Array.isArray(r)?(t===e&&(t=e.slice(0,n)),Mr(r,t)):t!==e&&t.push(r)}return t}function Cr(e,t){e.forEach((e=>Array.isArray(e)?Cr(e,t):t(e)))}function xr(e,t,n){t>=e.length?e.push(n):e.splice(t,0,n)}function Or(e,t){return t>=e.length-1?e.pop():e.splice(t,1)[0]}function Dr(e,t){const n=[];for(let r=0;r<e;r++)n.push(t);return n}function Sr(e,t,n){let r=Ir(e,t);return r>=0?e[1|r]=n:(r=~r,function(e,t,n,r){ngDevMode&&E(t,e.length,"Can't insert past array end.");let o=e.length;if(o==t)e.push(n,r);else if(1===o)e.push(r,e[0]),e[0]=n;else{for(o--,e.push(e[o-1],e[o]);o>t;){const t=o-2;e[o]=e[t],o--}e[t]=n,e[t+1]=r}}(e,r,t,n)),r}function Er(e,t){const n=Ir(e,t);if(n>=0)return e[1|n]}function Ir(e,t){return function(e,t,n){ngDevMode&&C(Array.isArray(e),!0,"Expecting an array");let r=0,o=e.length>>n;for(;o!==r;){const i=r+(o-r>>1),s=e[i<<n];if(t===s)return i<<n;s>t?o=i:r=i+1}return~(o<<n)}(e,t,1)}const Pr=/^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/,Tr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/,Ar=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/,jr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;class kr{constructor(e){this._reflect=e||ie.Reflect}isReflectionEnabled(){return!0}factory(e){return(...t)=>new e(...t)}_zipTypesAndAnnotations(e,t){let n;n=Dr(void 0===e?t.length:e.length);for(let r=0;r<n.length;r++)void 0===e?n[r]=[]:e[r]&&e[r]!=Object?n[r]=[e[r]]:n[r]=[],t&&null!=t[r]&&(n[r]=n[r].concat(t[r]));return n}_ownParameters(e,t){if(n=e.toString(),Pr.test(n)||jr.test(n)||Tr.test(n)&&!Ar.test(n))return null;var n;if(e.parameters&&e.parameters!==t.parameters)return e.parameters;const r=e.ctorParameters;if(r&&r!==t.ctorParameters){const e="function"==typeof r?r():r,t=e.map((e=>e&&e.type)),n=e.map((e=>e&&Nr(e.decorators)));return this._zipTypesAndAnnotations(t,n)}const o=e.hasOwnProperty(rr)&&e[rr],i=this._reflect&&this._reflect.getOwnMetadata&&this._reflect.getOwnMetadata("design:paramtypes",e);return i||o?this._zipTypesAndAnnotations(i,o):Dr(e.length)}parameters(e){if(!wr(e))return[];const t=Rr(e);let n=this._ownParameters(e,t);return n||t===Object||(n=this.parameters(t)),n||[]}_ownAnnotations(e,t){if(e.annotations&&e.annotations!==t.annotations){let t=e.annotations;return"function"==typeof t&&t.annotations&&(t=t.annotations),t}return e.decorators&&e.decorators!==t.decorators?Nr(e.decorators):e.hasOwnProperty(nr)?e[nr]:null}annotations(e){if(!wr(e))return[];const t=Rr(e),n=this._ownAnnotations(e,t)||[];return(t!==Object?this.annotations(t):[]).concat(n)}_ownPropMetadata(e,t){if(e.propMetadata&&e.propMetadata!==t.propMetadata){let t=e.propMetadata;return"function"==typeof t&&t.propMetadata&&(t=t.propMetadata),t}if(e.propDecorators&&e.propDecorators!==t.propDecorators){const t=e.propDecorators,n={};return Object.keys(t).forEach((e=>{n[e]=Nr(t[e])})),n}return e.hasOwnProperty(or)?e[or]:null}propMetadata(e){if(!wr(e))return{};const t=Rr(e),n={};if(t!==Object){const e=this.propMetadata(t);Object.keys(e).forEach((t=>{n[t]=e[t]}))}const r=this._ownPropMetadata(e,t);return r&&Object.keys(r).forEach((e=>{const t=[];n.hasOwnProperty(e)&&t.push(...n[e]),t.push(...r[e]),n[e]=t})),n}ownPropMetadata(e){return wr(e)&&this._ownPropMetadata(e,Rr(e))||{}}hasLifecycleHook(e,t){return e instanceof _r&&t in e.prototype}guards(e){return{}}getter(e){return new Function("o","return o."+e+";")}setter(e){return new Function("o","v","return o."+e+" = v;")}method(e){return new Function("o","args",`if (!o.${e}) throw new Error('"${e}" is undefined');\n        return o.${e}.apply(o, args);`)}importUri(e){return"object"==typeof e&&e.filePath?e.filePath:`./${a(e)}`}resourceUri(e){return`./${a(e)}`}resolveIdentifier(e,t,n,r){return r}resolveEnum(e,t){return e[t]}}function Nr(e){return e?e.map((e=>new(0,e.type.annotationCls)(...e.args?e.args:[]))):[]}function Rr(e){const t=e.prototype?Object.getPrototypeOf(e.prototype):null;return(t?t.constructor:null)||Object}const Fr={},Lr=/\n/gm,Vr="__source",$r=i({provide:String,useValue:i});let Hr;function Ur(e){const t=Hr;return Hr=e,t}function Br(e,t=q.Default){if(void 0===Hr){const e="undefined"==typeof ngDevMode||ngDevMode?"inject() must be called from an injection context":"";throw new p(203,e)}return null===Hr?J(e,void 0,t):Hr.get(e,t&q.Optional?null:void 0,t)}function Wr(e,t=q.Default){return(K||Br)(f(e),t)}function zr(e){const t=ngDevMode?`This constructor is not compatible with Angular Dependency Injection because its dependency at index ${e} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${e} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`:"invalid";throw new Error(t)}const qr=Wr;function Kr(e){const t=[];for(let n=0;n<e.length;n++){const r=f(e[n]);if(Array.isArray(r)){if(0===r.length){const e="undefined"==typeof ngDevMode||ngDevMode?"Arguments array must have arguments.":"";throw new p(900,e)}let e,n=q.Default;for(let t=0;t<r.length;t++){const o=r[t],i=o.__NG_DI_FLAG__;"number"==typeof i?-1===i?e=o.token:n|=i:e=o}t.push(Wr(e,n))}else t.push(Wr(r))}return t}function Gr(e,t){return e.__NG_DI_FLAG__=t,e.prototype.__NG_DI_FLAG__=t,e}const Jr=Gr(ar("Inject",(e=>({token:e}))),-1),Zr=Gr(ar("Optional"),8),Qr=Gr(ar("Self"),2),Yr=Gr(ar("SkipSelf"),4),Xr=Gr(ar("Host"),1);let eo=null;function to(){return eo=eo||new kr}function no(e){return ro(to().parameters(e))}function ro(e){return e.map((e=>function(e){const t={token:null,attribute:null,host:!1,optional:!1,self:!1,skipSelf:!1};if(Array.isArray(e)&&e.length>0)for(let n=0;n<e.length;n++){const r=e[n];if(void 0===r)continue;const o=Object.getPrototypeOf(r);if(r instanceof Zr||"Optional"===o.ngMetadataName)t.optional=!0;else if(r instanceof Yr||"SkipSelf"===o.ngMetadataName)t.skipSelf=!0;else if(r instanceof Qr||"Self"===o.ngMetadataName)t.self=!0;else if(r instanceof Xr||"Host"===o.ngMetadataName)t.host=!0;else if(r instanceof Jr)t.token=r.token;else if(r instanceof cr){if(void 0===r.attributeName)throw new Error("Attribute name must be defined.");t.attribute=r.attributeName}else t.token=r}else void 0===e||Array.isArray(e)&&0===e.length?t.token=null:t.token=e;return t}(e)))}function oo(e){const t=[],n=new Map;function r(t){let r=n.get(t);if(!r){const o=e(t);n.set(t,r=o.then(co))}return r}return io.forEach(((e,n)=>{const o=[];e.templateUrl&&o.push(r(e.templateUrl).then((t=>{e.template=t})));const i=e.styleUrls,s=e.styles||(e.styles=[]),a=e.styles.length;i&&i.forEach(((t,n)=>{s.push(""),o.push(r(t).then((r=>{s[a+n]=r,i.splice(i.indexOf(t),1),0==i.length&&(e.styleUrls=void 0)})))}));const u=Promise.all(o).then((()=>function(e){so.delete(e)}(n)));t.push(u)})),uo(),Promise.all(t).then((()=>{}))}let io=new Map;const so=new Set;function ao(e){return!!(e.templateUrl&&!e.hasOwnProperty("template")||e.styleUrls&&e.styleUrls.length)}function uo(){const e=io;return io=new Map,e}function co(e){return"string"==typeof e?e:e.text()}let lo,fo;function po(){if(void 0===lo&&(lo=null,ie.trustedTypes))try{lo=ie.trustedTypes.createPolicy("angular",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch(e){}return lo}function ho(e){var t;return(null===(t=po())||void 0===t?void 0:t.createHTML(e))||e}function vo(){if(void 0===fo&&(fo=null,ie.trustedTypes))try{fo=ie.trustedTypes.createPolicy("angular#unsafe-bypass",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch(e){}return fo}function yo(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createHTML(e))||e}function go(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createScript(e))||e}function bo(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createScriptURL(e))||e}class mo{constructor(e){this.changingThisBreaksApplicationSecurity=e}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see https://g.co/ng/security#xss)`}}class _o extends mo{getTypeName(){return"HTML"}}class wo extends mo{getTypeName(){return"Style"}}class Mo extends mo{getTypeName(){return"Script"}}class Co extends mo{getTypeName(){return"URL"}}class xo extends mo{getTypeName(){return"ResourceURL"}}function Oo(e){return e instanceof mo?e.changingThisBreaksApplicationSecurity:e}function Do(e,t){const n=So(e);if(null!=n&&n!==t){if("ResourceURL"===n&&"URL"===t)return!0;throw new Error(`Required a safe ${t}, got a ${n} (see https://g.co/ng/security#xss)`)}return n===t}function So(e){return e instanceof mo&&e.getTypeName()||null}function Eo(e){return new _o(e)}function Io(e){return new wo(e)}function Po(e){return new Mo(e)}function To(e){return new Co(e)}function Ao(e){return new xo(e)}function jo(e){const t=new No(e);return function(){try{return!!(new window.DOMParser).parseFromString(ho(""),"text/html")}catch(e){return!1}}()?new ko(t):t}class ko{constructor(e){this.inertDocumentHelper=e}getInertBodyElement(e){e="<body><remove></remove>"+e;try{const t=(new window.DOMParser).parseFromString(ho(e),"text/html").body;return null===t?this.inertDocumentHelper.getInertBodyElement(e):(t.removeChild(t.firstChild),t)}catch(e){return null}}}class No{constructor(e){if(this.defaultDoc=e,this.inertDocument=this.defaultDoc.implementation.createHTMLDocument("sanitization-inert"),null==this.inertDocument.body){const e=this.inertDocument.createElement("html");this.inertDocument.appendChild(e);const t=this.inertDocument.createElement("body");e.appendChild(t)}}getInertBodyElement(e){const t=this.inertDocument.createElement("template");if("content"in t)return t.innerHTML=ho(e),t;const n=this.inertDocument.createElement("body");return n.innerHTML=ho(e),this.defaultDoc.documentMode&&this.stripCustomNsAttrs(n),n}stripCustomNsAttrs(e){const t=e.attributes;for(let n=t.length-1;0<n;n--){const r=t.item(n).name;"xmlns:ns1"!==r&&0!==r.indexOf("ns1:")||e.removeAttribute(r)}let n=e.firstChild;for(;n;)n.nodeType===Node.ELEMENT_NODE&&this.stripCustomNsAttrs(n),n=n.nextSibling}}const Ro=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,Fo=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function Lo(e){return(e=String(e)).match(Ro)||e.match(Fo)?e:(("undefined"==typeof ngDevMode||ngDevMode)&&console.warn(`WARNING: sanitizing unsafe URL value ${e} (see https://g.co/ng/security#xss)`),"unsafe:"+e)}function Vo(e){return(e=String(e)).split(",").map((e=>Lo(e.trim()))).join(", ")}function $o(e){const t={};for(const n of e.split(","))t[n]=!0;return t}function Ho(...e){const t={};for(const n of e)for(const e in n)n.hasOwnProperty(e)&&(t[e]=!0);return t}const Uo=$o("area,br,col,hr,img,wbr"),Bo=$o("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),Wo=$o("rp,rt"),zo=Ho(Wo,Bo),qo=Ho(Bo,$o("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),Ko=Ho(Wo,$o("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),Go=Ho(Uo,qo,Ko,zo),Jo=$o("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),Zo=$o("srcset"),Qo=$o("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),Yo=$o("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext"),Xo=Ho(Jo,Zo,Qo,Yo),ei=$o("script,style,template");class ti{constructor(){this.sanitizedSomething=!1,this.buf=[]}sanitizeChildren(e){let t=e.firstChild,n=!0;for(;t;)if(t.nodeType===Node.ELEMENT_NODE?n=this.startElement(t):t.nodeType===Node.TEXT_NODE?this.chars(t.nodeValue):this.sanitizedSomething=!0,n&&t.firstChild)t=t.firstChild;else for(;t;){t.nodeType===Node.ELEMENT_NODE&&this.endElement(t);let e=this.checkClobberedElement(t,t.nextSibling);if(e){t=e;break}t=this.checkClobberedElement(t,t.parentNode)}return this.buf.join("")}startElement(e){const t=e.nodeName.toLowerCase();if(!Go.hasOwnProperty(t))return this.sanitizedSomething=!0,!ei.hasOwnProperty(t);this.buf.push("<"),this.buf.push(t);const n=e.attributes;for(let e=0;e<n.length;e++){const t=n.item(e),r=t.name,o=r.toLowerCase();if(!Xo.hasOwnProperty(o)){this.sanitizedSomething=!0;continue}let i=t.value;Jo[o]&&(i=Lo(i)),Zo[o]&&(i=Vo(i)),this.buf.push(" ",r,'="',oi(i),'"')}return this.buf.push(">"),!0}endElement(e){const t=e.nodeName.toLowerCase();Go.hasOwnProperty(t)&&!Uo.hasOwnProperty(t)&&(this.buf.push("</"),this.buf.push(t),this.buf.push(">"))}chars(e){this.buf.push(oi(e))}checkClobberedElement(e,t){if(t&&(e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)===Node.DOCUMENT_POSITION_CONTAINED_BY)throw new Error(`Failed to sanitize html because the element is clobbered: ${e.outerHTML}`);return t}}const ni=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,ri=/([^\#-~ |!])/g;function oi(e){return e.replace(/&/g,"&amp;").replace(ni,(function(e){return"&#"+(1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536)+";"})).replace(ri,(function(e){return"&#"+e.charCodeAt(0)+";"})).replace(/</g,"&lt;").replace(/>/g,"&gt;")}let ii;function si(e,t){let n=null;try{ii=ii||jo(e);let r=t?String(t):"";n=ii.getInertBodyElement(r);let o=5,i=r;do{if(0===o)throw new Error("Failed to sanitize html because the input is unstable");o--,r=i,i=n.innerHTML,n=ii.getInertBodyElement(r)}while(r!==i);const s=new ti,a=s.sanitizeChildren(ai(n)||n);return("undefined"==typeof ngDevMode||ngDevMode)&&s.sanitizedSomething&&console.warn("WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss"),ho(a)}finally{if(n){const e=ai(n)||n;for(;e.firstChild;)e.removeChild(e.firstChild)}}}function ai(e){return"content"in e&&function(e){return e.nodeType===Node.ELEMENT_NODE&&"TEMPLATE"===e.nodeName}(e)?e.content:null}var ui;function ci(e){const t=gi();return t?yo(t.sanitize(ui.HTML,e)||""):Do(e,"HTML")?yo(Oo(e)):si(ht(),v(e))}function li(e){const t=gi();return t?t.sanitize(ui.STYLE,e)||"":Do(e,"Style")?Oo(e):v(e)}function fi(e){const t=gi();return t?t.sanitize(ui.URL,e)||"":Do(e,"URL")?Oo(e):Lo(v(e))}function di(e){const t=gi();if(t)return bo(t.sanitize(ui.RESOURCE_URL,e)||"");if(Do(e,"ResourceURL"))return bo(Oo(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a resource URL context (see https://g.co/ng/security#xss)":"";throw new p(904,n)}function pi(e){const t=gi();if(t)return go(t.sanitize(ui.SCRIPT,e)||"");if(Do(e,"Script"))return go(Oo(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a script context":"";throw new p(905,n)}function hi(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted HTML constant: ${e.join("?")}`);return ho(e[0])}function vi(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted URL constant: ${e.join("?")}`);return function(e){var t;return(null===(t=po())||void 0===t?void 0:t.createScriptURL(e))||e}(e[0])}function yi(e,t,n){return function(e,t){return"src"===t&&("embed"===e||"frame"===e||"iframe"===e||"media"===e||"script"===e)||"href"===t&&("base"===e||"link"===e)?di:fi}(t,n)(e)}function gi(){const e=jt();return e&&e[12]}function bi(e){let t=Mi(e);if(t){if(Array.isArray(t)){const r=t;let o,i,s;if((n=e)&&n.constructor&&n.constructor.ɵcmp){if(o=Di(r,e),-1==o)throw new Error("The provided component was not found in the application");i=e}else if(function(e){return e&&e.constructor&&e.constructor.ɵdir}(e)){if(o=function(e,t){let n=e[1].firstChild;for(;n;){const r=n.directiveStart,o=n.directiveEnd;for(let i=r;i<o;i++)if(e[i]===t)return n.index;n=Oi(n)}return-1}(r,e),-1==o)throw new Error("The provided directive was not found in the application");s=Si(o,r,!1)}else if(o=xi(r,e),-1==o)return null;const a=bt(r[o]),u=Mi(a),c=u&&!Array.isArray(u)?u:mi(r,o,a);if(i&&void 0===c.component&&(c.component=i,wi(c.component,c)),s&&void 0===c.directives){c.directives=s;for(let e=0;e<s.length;e++)wi(s[e],c)}wi(c.native,c),t=c}}else{const n=e;ngDevMode&&j(n);let r=n;for(;r=r.parentNode;){const e=Mi(r);if(e){let r;if(r=Array.isArray(e)?e:e.lView,!r)return null;const o=xi(r,n);if(o>=0){const e=bt(r[o]),n=mi(r,o,e);wi(e,n),t=n;break}}}}var n;return t||null}function mi(e,t,n){return{lView:e,nodeIndex:t,native:n,component:void 0,directives:void 0,localRefs:void 0}}function _i(e){let t,n=Mi(e);if(Array.isArray(n)){const r=Di(n,e);t=Ct(r,n);const o=mi(n,r,t[0]);o.component=e,wi(e,o),wi(o.native,o)}else{const e=n;t=Ct(e.nodeIndex,e.lView)}return t}function wi(e,t){ngDevMode&&T(e,"Target expected"),e.__ngContext__=t}function Mi(e){return ngDevMode&&T(e,"Target expected"),e.__ngContext__||null}function Ci(e){const t=Mi(e);return t?Array.isArray(t)?t:t.lView:null}function xi(e,t){const n=e[1];for(let r=Te;r<n.bindingStartIndex;r++)if(bt(e[r])===t)return r;return-1}function Oi(e){if(e.child)return e.child;if(e.next)return e.next;for(;e.parent&&!e.parent.next;)e=e.parent;return e.parent&&e.parent.next}function Di(e,t){const n=e[1].components;if(n)for(let r=0;r<n.length;r++){const o=n[r];if(Ct(o,e)[8]===t)return o}else if(Ct(Te,e)[8]===t)return Te;return-1}function Si(e,t,n){const r=t[1].data[e];let o=r.directiveStart;if(0==o)return ue;const i=r.directiveEnd;return!n&&2&r.flags&&o++,t.slice(o,i)}function Ei(e){return e.ngOriginalError}function Ii(e,...t){e.error(...t)}!function(e){e[e.NONE=0]="NONE",e[e.HTML=1]="HTML",e[e.STYLE=2]="STYLE",e[e.SCRIPT=3]="SCRIPT",e[e.URL=4]="URL",e[e.RESOURCE_URL=5]="RESOURCE_URL"}(ui||(ui={}));class Pi{constructor(){this._console=console}handleError(e){const t=this._findOriginalError(e),n=function(e){return e&&e.ngErrorLogger||Ii}(e);n(this._console,"ERROR",e),t&&n(this._console,"ORIGINAL ERROR",t)}_findOriginalError(e){let t=e&&Ei(e);for(;t&&Ei(t);)t=Ei(t);return t||null}}const Ti={name:"custom-elements"},Ai={name:"no-errors-schema"},ji=/^>|^->|<!--|-->|--!>|<!-$/g,ki=/(<|>)/;function Ni(e){return e.replace(ji,(e=>e.replace(ki,"​$1​")))}const Ri=/([A-Z])/g,Fi=("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(ie);function Li(e){return e.ownerDocument.defaultView}function Vi(e){return e.ownerDocument}function $i(e){return e.ownerDocument.body}const Hi="�";function Ui(e){return e instanceof Function?e():e}function Bi(e){throw new p(-300,`Multiple components match node with tagname ${e.value}`)}function Wi(e,t,n,r,o){const[i,s,...a]=r.split(Hi);let u=s,c=s;for(let r=0;r<a.length;r++){const i=t+r;u+=`${e[i]}${a[r]}`,c+=`${i===n?o:e[i]}${a[r]}`}return{propName:i,oldValue:u,newValue:c}}var zi;let qi;function Ki(e,t){return qi(e,t)}function Gi(e){ngDevMode&&Ke(e);const t=e[3];return ke(t)?t[3]:t}function Ji(e){const t=function(e){ngDevMode&&T(e,"component");let t=je(e)?e:Ci(e);for(;t&&!(512&t[2]);)t=Gi(t);return ngDevMode&&Ke(t),t}(e);return ngDevMode&&T(t[8],"RootView has no context. Perhaps it is disconnected?"),t[8]}function Zi(e){return Yi(e[13])}function Qi(e){return Yi(e[4])}function Yi(e){for(;null!==e&&!ke(e);)e=e[4];return e}function Xi(e,t,n,r,o){if(null!=r){let i,s=!1;ke(r)?i=r:je(r)&&(s=!0,ngDevMode&&T(r[0],"HOST must be defined for a component LView"),r=r[0]);const a=bt(r);ngDevMode&&!yt(t)&&j(a),0===e&&null!==n?null==o?fs(t,n,a):ls(t,n,a,o||null,!0):1===e&&null!==n?ls(t,n,a,o||null,!0):2===e?Cs(t,a,s):3===e&&(ngDevMode&&ngDevMode.rendererDestroyNode++,t.destroyNode(a)),null!=i&&function(e,t,n,r,o){ngDevMode&&ze(n);const i=n[7];i!==bt(n)&&Xi(t,e,r,i,o);for(let o=Pe;o<n.length;o++){const s=n[o];Os(s[1],s,e,t,r,i)}}(t,e,i,n,o)}}function es(e,t){return ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&ngDevMode.rendererSetText++,yt(e)?e.createText(t):e.createTextNode(t)}function ts(e,t,n){ngDevMode&&ngDevMode.rendererSetText++,yt(e)?e.setValue(t,n):t.textContent=n}function ns(e,t){return ngDevMode&&ngDevMode.rendererCreateComment++,e.createComment(Ni(t))}function rs(e,t,n){if(ngDevMode&&ngDevMode.rendererCreateElement++,yt(e))return e.createElement(t,n);{const r=null!==n?function(e){const t=e.toLowerCase();return t===lt?"http://www.w3.org/2000/svg":t===ft?"http://www.w3.org/1998/MathML/":null}(n):null;return null===r?e.createElement(t):e.createElementNS(r,t)}}function os(e,t){ngDevMode&&ze(e),ngDevMode&&T(e[9],"A projected view should belong to a non-empty projected views collection");const n=e[9],r=n.indexOf(t),o=t[3];ngDevMode&&ze(o),1024&t[2]&&(t[2]&=-1025,Et(o,-1)),n.splice(r,1)}function is(e,t){if(e.length<=Pe)return;const n=Pe+t,r=e[n];if(r){const i=r[17];null!==i&&i!==e&&os(i,r),t>0&&(e[n-1][4]=r[4]);const s=Or(e,Pe+t);Os(r[1],o=r,o[11],2,null,null),o[0]=null,o[6]=null;const a=s[19];null!==a&&a.detachView(s[1]),r[3]=null,r[4]=null,r[2]&=-129}var o;return r}function ss(e,t){if(!(256&t[2])){const n=t[11];yt(n)&&n.destroyNode&&Os(e,t,n,3,null,null),function(e){let t=e[13];if(!t)return as(e[1],e);for(;t;){let n=null;if(je(t))n=t[13];else{ngDevMode&&ze(t);const e=t[10];e&&(n=e)}if(!n){for(;t&&!t[4]&&t!==e;)je(t)&&as(t[1],t),t=t[3];null===t&&(t=e),je(t)&&as(t[1],t),n=t&&t[4]}t=n}}(t)}}function as(e,t){if(!(256&t[2])){t[2]&=-129,t[2]|=256,function(e,t){let n;if(null!=e&&null!=(n=e.destroyHooks))for(let e=0;e<n.length;e+=2){const r=t[n[e]];if(!(r instanceof Cn)){const t=n[e+1];if(Array.isArray(t))for(let e=0;e<t.length;e+=2){const n=r[t[e]],o=t[e+1];ct(4,n,o);try{o.call(n)}finally{ct(5,n,o)}}else{ct(4,r,t);try{t.call(r)}finally{ct(5,r,t)}}}}}(e,t),function(e,t){const n=e.cleanup,r=t[7];let o=-1;if(null!==n)for(let e=0;e<n.length-1;e+=2)if("string"==typeof n[e]){const i=n[e+1],s="function"==typeof i?i(t):bt(t[i]),a=r[o=n[e+2]],u=n[e+3];"boolean"==typeof u?s.removeEventListener(n[e],a,u):u>=0?r[o=u]():r[o=-u].unsubscribe(),e+=2}else{const t=r[o=n[e+1]];n[e].call(t)}if(null!==r){for(let e=o+1;e<r.length;e++){const t=r[e];ngDevMode&&(s="Expecting instance cleanup function.","function"!=typeof(i=t)&&A(s,null===i?"null":typeof i,"function","===")),t()}t[7]=null}var i,s}(e,t),1===t[1].type&&yt(t[11])&&(ngDevMode&&ngDevMode.rendererDestroy++,t[11].destroy());const n=t[17];if(null!==n&&ke(t[3])){n!==t[3]&&os(n,t);const r=t[19];null!==r&&r.detachView(e)}}}function us(e,t,n){return cs(e,t.parent,n)}function cs(e,t,n){let r=t;for(;null!==r&&40&r.type;)r=(t=r).parent;if(null===r)return n[0];if(ngDevMode&&On(r,7),2&r.flags){ngDevMode&&Ve(r,n);const t=e.data[r.directiveStart].encapsulation;if(t===X.None||t===X.Emulated)return null}return _t(r,n)}function ls(e,t,n,r,o){ngDevMode&&ngDevMode.rendererInsertBefore++,yt(e)?e.insertBefore(t,n,r,o):t.insertBefore(n,r,o)}function fs(e,t,n){ngDevMode&&ngDevMode.rendererAppendChild++,ngDevMode&&T(t,"parent node must be defined"),yt(e)?e.appendChild(t,n):t.appendChild(n)}function ds(e,t,n,r,o){null!==r?ls(e,t,n,r,o):fs(e,t,n)}function ps(e,t){return yt(e)?e.parentNode(t):t.parentNode}function hs(e,t,n){return gs(e,t,n)}function vs(e,t,n){return 40&e.type?_t(e,n):null}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(zi||(zi={}));let ys,gs=vs;function bs(e,t){gs=e,ys=t}function ms(e,t,n,r){const o=us(e,r,t),i=t[11],s=hs(r.parent||t[6],r,t);if(null!=o)if(Array.isArray(n))for(let e=0;e<n.length;e++)ds(i,o,n[e],s,!1);else ds(i,o,n,s,!1);void 0!==ys&&ys(i,r,t,n,o)}function _s(e,t){if(null!==t){ngDevMode&&On(t,63);const n=t.type;if(3&n)return _t(t,e);if(4&n)return Ms(-1,e[t.index]);if(8&n){const n=t.child;if(null!==n)return _s(e,n);{const n=e[t.index];return ke(n)?Ms(-1,n):bt(n)}}if(32&n)return Ki(t,e)()||bt(e[t.index]);{const n=ws(e,t);if(null!==n){if(Array.isArray(n))return n[0];const t=Gi(e[16]);return ngDevMode&&Ye(t),_s(t,n)}return _s(e,t.next)}}return null}function ws(e,t){if(null!==t){const n=e[16][6],r=t.projection;return ngDevMode&&function(e,t){T(e[16],"Component views should exist."),T(e[16][6].projection,"Components with projection nodes (<ng-content>) must have projection slots defined.")}(e),n.projection[r]}return null}function Ms(e,t){const n=Pe+e+1;if(n<t.length){const e=t[n],r=e[1].firstChild;if(null!==r)return _s(e,r)}return t[7]}function Cs(e,t,n){ngDevMode&&ngDevMode.rendererRemoveNode++;const r=ps(e,t);r&&function(e,t,n,r){yt(e)?e.removeChild(t,n,r):t.removeChild(n)}(e,r,t,n)}function xs(e,t,n,r,o,i,s){for(;null!=n;){ngDevMode&&Ve(n,r),ngDevMode&&On(n,63);const a=r[n.index],u=n.type;if(s&&0===t&&(a&&wi(bt(a),r),n.flags|=4),64!=(64&n.flags))if(8&u)xs(e,t,n.child,r,o,i,!1),Xi(t,e,o,a,i);else if(32&u){const s=Ki(n,r);let u;for(;u=s();)Xi(t,e,o,u,i);Xi(t,e,o,a,i)}else 16&u?Ds(e,t,r,n,o,i):(ngDevMode&&On(n,7),Xi(t,e,o,a,i));n=s?n.projectionNext:n.next}}function Os(e,t,n,r,o,i){xs(n,r,e.firstChild,t,o,i,!1)}function Ds(e,t,n,r,o,i){const s=n[16],a=s[6];ngDevMode&&C(typeof r.projection,"number","expecting projection index");const u=a.projection[r.projection];if(Array.isArray(u))for(let n=0;n<u.length;n++)Xi(t,e,o,u[n],i);else xs(e,t,u,s[3],o,i,!0)}function Ss(e,t,n){ngDevMode&&M(n,"'newValue' should be a string"),yt(e)?e.setAttribute(t,"style",n):t.style.cssText=n,ngDevMode&&ngDevMode.rendererSetStyle++}function Es(e,t,n){ngDevMode&&M(n,"'newValue' should be a string"),yt(e)?""===n?e.removeAttribute(t,"class"):e.setAttribute(t,"class",n):t.className=n,ngDevMode&&ngDevMode.rendererSetClassName++}function Is(e,t,n){ngDevMode&&x(t,"",'can not look for "" string.');let r=e.length;for(;;){const o=e.indexOf(t,n);if(-1===o)return o;if(0===o||e.charCodeAt(o-1)<=32){const n=t.length;if(o+n===r||e.charCodeAt(o+n)<=32)return o}n=o+1}}const Ps="ng-template";function Ts(e,t,n){ngDevMode&&C(t,t.toLowerCase(),"Class name expected to be lowercase.");let r=0;for(;r<e.length;){let o=e[r++];if(n&&"class"===o){if(o=e[r],-1!==Is(o.toLowerCase(),t,0))return!0}else if(1===o){for(;r<e.length&&"string"==typeof(o=e[r++]);)if(o.toLowerCase()===t)return!0;return!1}}return!1}function As(e){return 4===e.type&&e.value!==Ps}function js(e,t,n){return t===(4!==e.type||n?e.value:Ps)}function ks(e,t,n){ngDevMode&&T(t[0],"Selector should have a tag name");let r=4;const o=e.attrs||[],i=function(e){for(let t=0;t<e.length;t++)if(Sn(e[t]))return t;return e.length}(o);let s=!1;for(let a=0;a<t.length;a++){const u=t[a];if("number"!=typeof u){if(!s)if(4&r){if(r=2|1&r,""!==u&&!js(e,u,n)||""===u&&1===t.length){if(Ns(r))return!1;s=!0}}else{const c=8&r?u:t[++a];if(8&r&&null!==e.attrs){if(!Ts(e.attrs,c,n)){if(Ns(r))return!1;s=!0}continue}const l=Rs(8&r?"class":u,o,As(e),n);if(-1===l){if(Ns(r))return!1;s=!0;continue}if(""!==c){let e;l>i?e="":(ngDevMode&&x(o[l],0,"We do not match directives on namespaced attributes"),e=o[l+1].toLowerCase());const t=8&r?e:null;if(t&&-1!==Is(t,c,0)||2&r&&c!==e){if(Ns(r))return!1;s=!0}}}}else{if(!s&&!Ns(r)&&!Ns(u))return!1;if(s&&Ns(u))continue;s=!1,r=u|1&r}}return Ns(r)||s}function Ns(e){return 0==(1&e)}function Rs(e,t,n,r){if(null===t)return-1;let o=0;if(r||!n){let n=!1;for(;o<t.length;){const r=t[o];if(r===e)return o;if(3===r||6===r)n=!0;else{if(1===r||2===r){let e=t[++o];for(;"string"==typeof e;)e=t[++o];continue}if(4===r)break;if(0===r){o+=4;continue}}o+=n?1:2}return-1}return function(e,t){let n=e.indexOf(4);if(n>-1)for(n++;n<e.length;){const r=e[n];if("number"==typeof r)return-1;if(r===t)return n;n++}return-1}(t,e)}function Fs(e,t,n=!1){for(let r=0;r<t.length;r++)if(ks(e,t[r],n))return!0;return!1}function Ls(e,t){e:for(let n=0;n<t.length;n++){const r=t[n];if(e.length===r.length){for(let t=0;t<e.length;t++)if(e[t]!==r[t])continue e;return!0}}return!1}function Vs(e,t){return e?":not("+t.trim()+")":t}function $s(e){let t=e[0],n=1,r=2,o="",i=!1;for(;n<e.length;){let s=e[n];if("string"==typeof s)if(2&r){const t=e[++n];o+="["+s+(t.length>0?'="'+t+'"':"")+"]"}else 8&r?o+="."+s:4&r&&(o+=" "+s);else""===o||Ns(s)||(t+=Vs(i,o),o=""),r=s,i=i||!Ns(r);n++}return""!==o&&(t+=Vs(i,o)),t}const Hs="undefined"==typeof ngDevMode||ngDevMode?{__brand__:"NO_CHANGE"}:{};function Us(e){ngDevMode&&I(e,0,"Can only advance forward"),Bs(kt(),jt(),ln()+e,Ut())}function Bs(e,t,n,r){if(ngDevMode&&function(e,t){const n=e[1];Qe(Te,n.bindingStartIndex,t)}(t,n),!r)if(3==(3&t[2])){const r=e.preOrderCheckHooks;null!==r&&gn(t,r,n)}else{const r=e.preOrderHooks;null!==r&&bn(t,r,0,n)}fn(n)}function Ws(e){if(!ngDevMode)throw new Error("Looks like we are in 'prod mode', but we are creating a named Array type, which is wrong! Check your code");try{return function(...e){if("undefined"==typeof ngDevMode)throw new Error("newTrustedFunctionForDev should never be called in production");if(!ie.trustedTypes)return new Function(...e);const t=`(function anonymous(${e.slice(0,-1).join(",")}\n) { ${e[e.length-1]}\n})`,n=ie.eval((r=t,(null===(o=po())||void 0===o?void 0:o.createScript(r))||r));var r,o;return void 0===n.bind?new Function(...e):(n.toString=()=>t,n.bind(ie))}("Array",`return class ${e} extends Array{}`)(Array)}catch(e){return Array}}function zs(e,t){return ngDevMode&&w(e,0,32767),ngDevMode&&w(t,0,32767),e<<17|t<<2}function qs(e){return ngDevMode&&_(e,"expected number"),e>>17&32767}function Ks(e){return ngDevMode&&_(e,"expected number"),2==(2&e)}function Gs(e){return ngDevMode&&_(e,"expected number"),2|e}function Js(e){return ngDevMode&&_(e,"expected number"),(131068&e)>>2}function Zs(e,t){return ngDevMode&&_(e,"expected number"),ngDevMode&&w(t,0,32767),-131069&e|t<<2}function Qs(e){return ngDevMode&&_(e,"expected number"),1==(1&e)}function Ys(e){return ngDevMode&&_(e,"expected number"),1|e}function Xs(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{value:t,enumerable:!1})}function ea(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{get:t,enumerable:!1})}let ta,na,ra,oa,ia;class sa extends Array{}class aa extends Array{}class ua extends Array{}function ca(e){if(null==e)return"";const t=e.lastIndexOf("_Template");return"_"+(-1===t?e:e.substr(0,t))}function la(e,t){const n=e.tView_.data,r=[],o=t?e.classBindings:e.styleBindings,i=qs(o),s=Js(o);let a=0!==s,u=a?s:i;for(;0!==u;){const e=n[u],t=n[u+1];r.unshift({key:e,index:u,isTemplate:a,prevDuplicate:Ks(t),nextDuplicate:Qs(t),nextIndex:Js(t),prevIndex:qs(t)}),u===i&&(a=!1),u=qs(t)}return r.push((t?e.residualClasses:e.residualStyles)||null),r}function fa(e,t){for(;e;)t.push(e.template_),e=e.next}class da extends Array{}let pa;class ha extends Array{}class va extends Array{}class ya extends Array{}class ga extends Array{}class ba extends Array{}class ma extends Array{}class _a extends Array{}function wa(e){if(e){const t=e.debug;return T(t,"Object does not have a debug representation."),t}return e}function Ma(e,t=!1){const n=bt(e);if(n)switch(n.nodeType){case Node.TEXT_NODE:return n.textContent;case Node.COMMENT_NODE:return`\x3c!--${n.textContent}--\x3e`;case Node.ELEMENT_NODE:const e=n.outerHTML;if(t)return e;{const t=">"+n.innerHTML+"<";return e.split(t)[0]+">"}}return null}class Ca{constructor(e){this._raw_lView=e}get flags(){const e=this._raw_lView[2];return{__raw__flags__:e,initPhaseState:3&e,creationMode:!!(4&e),firstViewPass:!!(8&e),checkAlways:!!(16&e),dirty:!!(64&e),attached:!!(128&e),destroyed:!!(256&e),isRoot:!!(512&e),indexWithinInitPhase:e>>11}}get parent(){return wa(this._raw_lView[3])}get hostHTML(){return Ma(this._raw_lView[0],!0)}get html(){return(this.nodes||[]).map(xa).join("")}get context(){return this._raw_lView[8]}get nodes(){const e=this._raw_lView;return Da(e[1].firstChild,e)}get template(){return this.tView.template_}get tView(){return this._raw_lView[1]}get cleanup(){return this._raw_lView[7]}get injector(){return this._raw_lView[9]}get rendererFactory(){return this._raw_lView[10]}get renderer(){return this._raw_lView[11]}get sanitizer(){return this._raw_lView[12]}get childHead(){return wa(this._raw_lView[13])}get next(){return wa(this._raw_lView[4])}get childTail(){return wa(this._raw_lView[14])}get declarationView(){return wa(this._raw_lView[15])}get queries(){return this._raw_lView[19]}get tHost(){return this._raw_lView[6]}get decls(){return Oa(this.tView,this._raw_lView,Te,this.tView.bindingStartIndex)}get vars(){return Oa(this.tView,this._raw_lView,this.tView.bindingStartIndex,this.tView.expandoStartIndex)}get expando(){return Oa(this.tView,this._raw_lView,this.tView.expandoStartIndex,this._raw_lView.length)}get childViews(){const e=[];let t=this.childHead;for(;t;)e.push(t),t=t.next;return e}}function xa(e){if("ElementContainer"===e.type)return(e.children||[]).map(xa).join("");if("IcuContainer"===e.type)throw new Error("Not implemented");return Ma(e.native,!0)||""}function Oa(e,t,n,r){let o=[];for(let i=n;i<r;i++)o.push({index:i,t:e.data[i],l:t[i]});return{start:n,end:r,length:r-n,content:o}}function Da(e,t){if(e){const n=[];let r=e;for(;r;)n.push(Sa(r,t)),r=r.next;return n}return[]}function Sa(e,t){const n=bt(t[e.index]),r=[],o=[],i=t[1];for(let n=e.directiveStart;n<e.directiveEnd;n++){const e=i.data[n];r.push(e.type),o.push(t[n])}return{html:Ma(n),type:xn(e.type),tNode:e,native:n,children:Da(e.child,t),factories:r,instances:o,injector:Ea(e,i,t),get injectorResolutionPath(){return e.debugNodeInjectorPath(t)}}}function Ea(e,t,n){const r=[];for(let n=e.providerIndexStart_;n<e.providerIndexEnd_;n++)r.push(t.data[n]);const o=[];for(let n=e.providerIndexEnd_;n<e.directiveEnd;n++)o.push(t.data[n]);return{bloom:Pa(n,e.injectorIndex),cumulativeBloom:Pa(t.data,e.injectorIndex),providers:o,viewProviders:r,parentInjectorIndex:n[e.providerIndexStart_-1]}}function Ia(e,t){const n=e[t];if("number"!=typeof n)return"????????";const r="00000000"+n.toString(2);return r.substring(r.length-8)}function Pa(e,t){return t<0?"NO_NODE_INJECTOR":`${Ia(e,t+7)}_${Ia(e,t+6)}_${Ia(e,t+5)}_${Ia(e,t+4)}_${Ia(e,t+3)}_${Ia(e,t+2)}_${Ia(e,t+1)}_${Ia(e,t+0)}`}class Ta{constructor(e){this._raw_lContainer=e}get hasTransplantedViews(){return this._raw_lContainer[2]}get views(){return this._raw_lContainer.slice(Pe).map(wa)}get parent(){return wa(this._raw_lContainer[3])}get movedViews(){return this._raw_lContainer[9]}get host(){return this._raw_lContainer[0]}get native(){return this._raw_lContainer[7]}get next(){return wa(this._raw_lContainer[4])}}const Aa=Promise.resolve(null);function ja(e,t){const n=e.contentQueries;if(null!==n)for(let r=0;r<n.length;r+=2){const o=n[r],i=n[r+1];if(-1!==i){const n=e.data[i];ngDevMode&&T(n,"DirectiveDef not found."),ngDevMode&&T(n.contentQueries,"contentQueries function should be defined"),en(o),n.contentQueries(2,t[i],i)}}}function ka(e,t,n,r,o,i,s,a,u,c){const l=ngDevMode?function(e){return function(e,t){switch(e){case 0:return void 0===ra&&(ra=new sa),ra;case 1:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===oa&&(oa=new aa),oa;void 0===ta&&(ta=new Map);let e=ta.get(t);return void 0===e&&(e=new(Ws("LComponentView"+ca(t))),ta.set(t,e)),e;case 2:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===ia&&(ia=new ua),ia;void 0===na&&(na=new Map);let n=na.get(t);return void 0===n&&(n=new(Ws("LEmbeddedView"+ca(t))),na.set(t,n)),n}}(e.type,e.template&&e.template.name).concat(e.blueprint)}(t):t.blueprint.slice();return l[0]=o,l[2]=140|r,St(l),ngDevMode&&t.declTNode&&e&&Ve(t.declTNode,e),l[3]=l[15]=e,l[8]=n,l[10]=s||e&&e[10],ngDevMode&&T(l[10],"RendererFactory is required"),l[11]=a||e&&e[11],ngDevMode&&T(l[11],"Renderer is required"),l[12]=u||e&&e[12]||null,l[9]=c||e&&e[9]||null,l[6]=i,ngDevMode&&C(2!=t.type||null!==e,!0,"Embedded views must have parentLView"),l[16]=2==t.type?e[16]:l,ngDevMode&&function(e){Xs(e,new Ca(e))}(l),l}function Na(e,t,n,r,o){ngDevMode&&0!==t&&P(t,Te,"TNodes can't be in the LView header."),ngDevMode&&function(e){2!==e&&1!==e&&4!==e&&8!==e&&32!==e&&16!==e&&64!==e&&A(`Expected TNodeType to have only a single type selected, but got ${xn(e)}.`)}(n);let i=e.data[t];if(null===i)i=Ra(e,t,n,r,o),It.lFrame.inI18n&&(i.flags|=64);else if(64&i.type){i.type=n,i.value=r,i.attrs=o;const s=Lt();i.injectorIndex=null===s?-1:s.injectorIndex,ngDevMode&&$e(i,e),ngDevMode&&C(t,i.index,"Expecting same index")}return Vt(i,!0),i}function Ra(e,t,n,r,o){const i=Ft(),s=$t(),a=s?i:i&&i.parent,u=e.data[t]=function(e,t,n,r,o,i){ngDevMode&&0!==r&&P(r,Te,"TNodes can't be in the LView header."),ngDevMode&&D(i,void 0,"'undefined' is not valid value for 'attrs'"),ngDevMode&&ngDevMode.tNode++,ngDevMode&&t&&$e(t,e);let s=t?t.injectorIndex:-1;const a=ngDevMode?new class{constructor(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b,m,_,w,M,C,x,O,D,S,E,I,P,T){this.tView_=e,this.type=t,this.index=n,this.insertBeforeIndex=r,this.injectorIndex=o,this.directiveStart=i,this.directiveEnd=s,this.directiveStylingLast=a,this.propertyBindings=u,this.flags=c,this.providerIndexes=l,this.value=f,this.attrs=d,this.mergedAttrs=p,this.localNames=h,this.initialInputs=v,this.inputs=y,this.outputs=g,this.tViews=b,this.next=m,this.projectionNext=_,this.child=w,this.parent=M,this.projection=C,this.styles=x,this.stylesWithoutHost=O,this.residualStyles=D,this.classes=S,this.classesWithoutHost=E,this.residualClasses=I,this.classBindings=P,this.styleBindings=T}debugNodeInjectorPath(e){const t=[];let n=Vn(this,e);if(-1===n){const t=$n(this,e);t!==Mn&&(n=An(t),e=jn(t,e))}for(;-1!==n;){ngDevMode&&Xe(e,n);const r=e[1].data[n+8];t.push(Sa(r,e));const o=e[n+8];o===Mn?n=-1:(n=An(o),e=jn(o,e))}return t}get type_(){return xn(this.type)||`TNodeType.?${this.type}?`}get flags_(){const e=[];return 16&this.flags&&e.push("TNodeFlags.hasClassInput"),8&this.flags&&e.push("TNodeFlags.hasContentQuery"),32&this.flags&&e.push("TNodeFlags.hasStyleInput"),128&this.flags&&e.push("TNodeFlags.hasHostBindings"),2&this.flags&&e.push("TNodeFlags.isComponentHost"),1&this.flags&&e.push("TNodeFlags.isDirectiveHost"),64&this.flags&&e.push("TNodeFlags.isDetached"),4&this.flags&&e.push("TNodeFlags.isProjected"),e.join("|")}get template_(){if(1&this.type)return this.value;const e=[],t="string"==typeof this.value&&this.value||this.type_;if(e.push("<",t),this.flags&&e.push(" ",this.flags_),this.attrs)for(let t=0;t<this.attrs.length;){const n=this.attrs[t++];if("number"==typeof n)break;const r=this.attrs[t++];e.push(" ",n,'="',r,'"')}return e.push(">"),fa(this.child,e),e.push("</",t,">"),e.join("")}get styleBindings_(){return la(this,!1)}get classBindings_(){return la(this,!0)}get providerIndexStart_(){return 1048575&this.providerIndexes}get providerIndexEnd_(){return this.providerIndexStart_+(this.providerIndexes>>>20)}}(e,n,r,null,s,-1,-1,-1,null,0,0,o,i,null,null,void 0,null,null,null,null,null,null,t,null,null,null,void 0,null,null,void 0,0,0):{type:n,index:r,insertBeforeIndex:null,injectorIndex:s,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,value:o,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:t,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0};return ngDevMode&&Object.seal(a),a}(e,a,n,t,r,o);return null===e.firstChild&&(e.firstChild=u),null!==i&&(s?null==i.child&&null!==u.parent&&(i.child=u):null===i.next&&(i.next=u)),u}function Fa(e,t,n,r){if(0===n)return-1;ngDevMode&&(Ge(e),O(e,t[1],"`LView` must be associated with `TView`!"),C(e.data.length,t.length,"Expecting LView to be same size as TView"),C(e.data.length,e.blueprint.length,"Expecting Blueprint to be same size as TView"),Je(e));const o=t.length;for(let o=0;o<n;o++)t.push(r),e.blueprint.push(r),e.data.push(null);return o}function La(e,t,n){ngDevMode&&C(xt(t),!0,"Should be run in creation mode"),rn(t);try{const r=e.viewQuery;null!==r&&Mu(1,r,n);const o=e.template;null!==o&&Ha(e,t,o,1,n),e.firstCreatePass&&(e.firstCreatePass=!1),e.staticContentQueries&&ja(e,t),e.staticViewQueries&&Mu(2,e.viewQuery,n);const i=e.components;null!==i&&function(e,t){for(let n=0;n<t.length;n++)yu(e,t[n])}(t,i)}catch(t){throw e.firstCreatePass&&(e.incompleteFirstPass=!0,e.firstCreatePass=!1),t}finally{t[2]&=-5,cn()}}function Va(e,t,n,r){ngDevMode&&C(xt(t),!1,"Should be run in update mode");const o=t[2];if(256==(256&o))return;rn(t);const i=Ut();try{St(t),qt(e.bindingStartIndex),null!==n&&Ha(e,t,n,2,r);const s=3==(3&o);if(!i)if(s){const n=e.preOrderCheckHooks;null!==n&&gn(t,n,null)}else{const n=e.preOrderHooks;null!==n&&bn(t,n,0,null),mn(t,0)}if(function(e){for(let t=Zi(e);null!==t;t=Qi(t)){if(!t[2])continue;const e=t[9];ngDevMode&&T(e,"Transplanted View flags set but missing MOVED_VIEWS");for(let t=0;t<e.length;t++){const n=e[t],r=n[3];ngDevMode&&ze(r),0==(1024&n[2])&&Et(r,1),n[2]|=1024}}}(t),function(e){for(let t=Zi(e);null!==t;t=Qi(t))for(let e=Pe;e<t.length;e++){const n=t[e],r=n[1];ngDevMode&&T(r,"TView must be allocated"),Ot(n)&&Va(r,n,r.template,n[8])}}(t),null!==e.contentQueries&&ja(e,t),!i)if(s){const n=e.contentCheckHooks;null!==n&&gn(t,n)}else{const n=e.contentHooks;null!==n&&bn(t,n,1),mn(t,1)}!function(e,t){const n=e.hostBindingOpCodes;if(null!==n)try{for(let e=0;e<n.length;e++){const r=n[e];if(r<0)fn(~r);else{const o=r,i=n[++e],s=n[++e];Zt(i,o),s(2,t[o])}}}finally{fn(-1)}}(e,t);const a=e.components;null!==a&&function(e,t){for(let n=0;n<t.length;n++)hu(e,t[n])}(t,a);const u=e.viewQuery;if(null!==u&&Mu(2,u,r),!i)if(s){const n=e.viewCheckHooks;null!==n&&gn(t,n)}else{const n=e.viewHooks;null!==n&&bn(t,n,2),mn(t,2)}!0===e.firstUpdatePass&&(e.firstUpdatePass=!1),i||(t[2]&=-73),1024&t[2]&&(t[2]&=-1025,Et(t[3],-1))}finally{cn()}}function $a(e,t,n,r){const o=t[10],i=!Ut(),s=xt(t);try{i&&!s&&o.begin&&o.begin(),s&&La(e,t,r),Va(e,t,n,r)}finally{i&&!s&&o.end&&o.end()}}function Ha(e,t,n,r,o){const i=ln(),s=2&r;try{fn(-1),s&&t.length>Te&&Bs(e,t,Te,Ut()),ct(s?2:0,o),n(r,o)}finally{fn(i),ct(s?3:1,o)}}function Ua(e,t,n){if(Ne(t)){const r=t.directiveStart,o=t.directiveEnd;for(let t=r;t<o;t++){const r=e.data[t];r.contentQueries&&r.contentQueries(1,n[t],t)}}}function Ba(e,t,n){Pt()&&(function(e,t,n,r){const o=n.directiveStart,i=n.directiveEnd;e.firstCreatePass||Fn(n,t),wi(r,t);const s=n.initialInputs;for(let r=o;r<i;r++){const i=e.data[r],a=Le(i);a&&(ngDevMode&&On(n,3),au(t,n,i));const u=Jn(t,e,r,n);wi(u,t),null!==s&&lu(t,r-o,u,i,n,s),a&&(Ct(n.index,t)[8]=u)}}(e,t,n,_t(n,t)),128==(128&n.flags)&&function(e,t,n){const r=n.directiveStart,o=n.directiveEnd,i=(e.firstCreatePass,n.index),s=It.lFrame.currentDirectiveIndex;try{fn(i);for(let n=r;n<o;n++){const r=e.data[n],o=t[n];Qt(n),null===r.hostBindings&&0===r.hostVars&&null===r.hostAttrs||nu(r,o)}}finally{fn(-1),Qt(s)}}(e,t,n))}function Wa(e,t,n=_t){const r=t.localNames;if(null!==r){let o=t.index+1;for(let i=0;i<r.length;i+=2){const s=r[i+1],a=-1===s?n(t,e):e[s];e[o++]=a}}}function za(e){const t=e.tView;if(null===t||t.incompleteFirstPass){const t=null;return e.tView=qa(1,t,e.template,e.decls,e.vars,e.directiveDefs,e.pipeDefs,e.viewQuery,e.schemas,e.consts)}return t}function qa(e,t,n,r,o,i,s,a,u,c){ngDevMode&&ngDevMode.tView++;const l=Te+r,f=l+o,d=function(e,t){const n=ngDevMode?new ha:[];for(let r=0;r<t;r++)n.push(r<e?null:Hs);return n}(l,f),p="function"==typeof c?c():c,h=d[1]=ngDevMode?new class{constructor(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b,m,_,w,M,C,x,O,D,S,E,I,P,T){this.type=e,this.blueprint=t,this.template=n,this.queries=r,this.viewQuery=o,this.declTNode=i,this.data=s,this.bindingStartIndex=a,this.expandoStartIndex=u,this.hostBindingOpCodes=c,this.firstCreatePass=l,this.firstUpdatePass=f,this.staticViewQueries=d,this.staticContentQueries=p,this.preOrderHooks=h,this.preOrderCheckHooks=v,this.contentHooks=y,this.contentCheckHooks=g,this.viewHooks=b,this.viewCheckHooks=m,this.destroyHooks=_,this.cleanup=w,this.contentQueries=M,this.components=C,this.directiveRegistry=x,this.pipeRegistry=O,this.firstChild=D,this.schemas=S,this.consts=E,this.incompleteFirstPass=I,this._decls=P,this._vars=T}get template_(){const e=[];return fa(this.firstChild,e),e.join("")}get type_(){return Ae[this.type]||`TViewType.?${this.type}?`}}(e,d,n,null,a,t,(v=d,void 0===pa&&(pa=new da),pa.concat(v)).fill(null,l),l,f,null,!0,!0,!1,!1,null,null,null,null,null,null,null,null,null,null,"function"==typeof i?i():i,"function"==typeof s?s():s,null,u,p,!1,r,o):{type:e,blueprint:d,template:n,queries:null,viewQuery:a,declTNode:t,data:d.slice().fill(null,l),bindingStartIndex:l,expandoStartIndex:f,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof i?i():i,pipeRegistry:"function"==typeof s?s():s,firstChild:null,schemas:u,consts:p,incompleteFirstPass:!1};var v;return ngDevMode&&Object.seal(h),h}function Ka(e,t,n){if(yt(e)){const r=n===X.ShadowDom;return e.selectRootElement(t,r)}let r="string"==typeof t?e.querySelector(t):t;return ngDevMode&&function(e,t){if(!e)throw new Error(`Renderer: ${"string"==typeof t?"Host node with selector not found:":"Host node is required:"} [${y(t)}]`)}(r,t),r.textContent="",r}function Ga(e,t,n,r){const o=Ou(t);null===n?(ngDevMode&&Object.freeze(Du(e)),o.push(r)):(o.push(n),e.firstCreatePass&&Du(e).push(r,o.length-1))}function Ja(e,t,n){for(let r in e)if(e.hasOwnProperty(r)){n=null===n?{}:n;const o=e[r];n.hasOwnProperty(r)?n[r].push(t,o):n[r]=[t,o]}return n}function Za(e,t,n,r,o,i,s,a){ngDevMode&&D(o,Hs,"Incoming value should never be NO_CHANGE.");const u=_t(t,n);let c,l=t.inputs;if(!a&&null!=l&&(c=l[r]))Iu(e,n,c,r,o),Re(t)&&function(e,t){ngDevMode&&Ke(e);const n=Ct(t,e);16&n[2]||(n[2]|=64)}(n,t.index),ngDevMode&&function(e,t,n,r,o){if(7&n)for(let i=0;i<r.length;i+=2)Qa(e,t,n,r[i+1],o)}(n,u,t.type,c,o);else if(3&t.type){if(r="class"===(f=r)?"className":"for"===f?"htmlFor":"formaction"===f?"formAction":"innerHtml"===f?"innerHTML":"readonly"===f?"readOnly":"tabindex"===f?"tabIndex":f,ngDevMode){if(function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event property '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...\nIf '${e}' is a directive input, make sure the directive is imported by the current module.`;throw new p(306,t)}}(r),!function(e,t,n,r){return null===e.schemas||(!!(Ya(e,r.value)||n in t||En(n))||("undefined"==typeof Node||null===Node||!(t instanceof Node)))}(e,u,r,t))return void Xa(r,t);ngDevMode.rendererSetProperty++}o=null!=s?s(o,t.value||"",r):o,yt(i)?i.setProperty(u,r,o):En(r)||(u.setProperty?u.setProperty(r,o):u[r]=o)}else 12&t.type&&ngDevMode&&!Ya(e,t.value)&&Xa(r,t);var f}function Qa(e,t,n,r,o){const i=e[11];var s;s=r.replace(/[$@]/g,"_"),r=`ng-reflect-${s.replace(Ri,((...e)=>"-"+e[1].toLowerCase()))}`;const a=function(e){try{return null!=e?e.toString().slice(0,30):e}catch(e){return"[ERROR] Exception while trying to serialize the value"}}(o);if(3&n)null==o?yt(i)?i.removeAttribute(t,r):t.removeAttribute(r):yt(i)?i.setAttribute(t,r,a):t.setAttribute(r,a);else{const e=Ni(`bindings=${JSON.stringify({[r]:a},null,2)}`);yt(i)?i.setValue(t,e):t.textContent=e}}function Ya(e,t){const n=e.schemas;if(null!==n)for(let e=0;e<n.length;e++){const r=n[e];if(r===Ai||r===Ti&&t&&t.indexOf("-")>-1)return!0}return!1}function Xa(e,t){let n=`Can't bind to '${e}' since it isn't a known property of '${t.value}'.`;console.error(h(303,n))}function eu(e,t,n,r){ngDevMode&&Ge(e);let o=!1;if(Pt()){const i=function(e,t,n){ngDevMode&&Ge(e),ngDevMode&&On(n,15);const r=e.directiveRegistry;let o=null;if(r)for(let i=0;i<r.length;i++){const s=r[i];Fs(n,s.selectors,!1)&&(o||(o=ngDevMode?new va:[]),Hn(Fn(n,t),e,s.type),Le(s)?(ngDevMode&&(On(n,2,`"${n.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${a(s.type)} component.`),2&n.flags&&Bi(n)),ru(e,n),o.unshift(s)):o.push(s))}return o}(e,t,n),s=null===r?null:{"":-1};if(null!==i){o=!0,iu(n,e.data.length,i.length);for(let e=0;e<i.length;e++){const t=i[e];t.providersResolver&&t.providersResolver(t)}let r=!1,a=!1,u=Fa(e,t,i.length,null);ngDevMode&&O(u,n.directiveStart,"TNode.directiveStart should point to just allocated space");for(let o=0;o<i.length;o++){const c=i[o];n.mergedAttrs=In(n.mergedAttrs,c.hostAttrs),su(e,n,t,u,c),ou(u,c,s),null!==c.contentQueries&&(n.flags|=8),null===c.hostBindings&&null===c.hostAttrs&&0===c.hostVars||(n.flags|=128);const l=c.type.prototype;!r&&(l.ngOnChanges||l.ngOnInit||l.ngDoCheck)&&((e.preOrderHooks||(e.preOrderHooks=[])).push(n.index),r=!0),a||!l.ngOnChanges&&!l.ngDoCheck||((e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(n.index),a=!0),u++}!function(e,t){ngDevMode&&Ge(e);const n=t.directiveStart,r=t.directiveEnd,o=e.data,i=t.attrs,s=ngDevMode?new ba:[];let a=null,u=null;for(let e=n;e<r;e++){const n=o[e],r=n.inputs,c=null===i||As(t)?null:fu(r,i);s.push(c),a=Ja(r,e,a),u=Ja(n.outputs,e,u)}null!==a&&(a.hasOwnProperty("class")&&(t.flags|=16),a.hasOwnProperty("style")&&(t.flags|=32)),t.initialInputs=s,t.inputs=a,t.outputs=u}(e,n)}s&&function(e,t,n){if(t){const r=e.localNames=ngDevMode?new ga:[];for(let e=0;e<t.length;e+=2){const o=n[t[e+1]];if(null==o)throw new p(-301,ngDevMode&&`Export of name '${t[e+1]}' not found!`);r.push(t[e],o)}}}(n,r,s)}return n.mergedAttrs=In(n.mergedAttrs,n.attrs),o}function tu(e,t,n,r,o,i){ngDevMode&&Ge(e);const s=i.hostBindings;if(s){let n=e.hostBindingOpCodes;null===n&&(n=e.hostBindingOpCodes=[]);const i=~t.index;(function(e){let t=e.length;for(;t>0;){const n=e[--t];if("number"==typeof n&&n<0)return n}return 0})(n)!=i&&n.push(i),n.push(r,o,s)}}function nu(e,t){null!==e.hostBindings&&e.hostBindings(1,t)}function ru(e,t){ngDevMode&&Ge(e),t.flags|=2,(e.components||(e.components=ngDevMode?new ya:[])).push(t.index)}function ou(e,t,n){if(n){if(t.exportAs)for(let r=0;r<t.exportAs.length;r++)n[t.exportAs[r]]=e;Le(t)&&(n[""]=e)}}function iu(e,t,n){ngDevMode&&x(n,e.directiveEnd-e.directiveStart,"Reached the max number of directives"),e.flags|=1,e.directiveStart=t,e.directiveEnd=t+n,e.providerIndexes=t}function su(e,t,n,r,o){ngDevMode&&P(r,Te,"Must be in Expando section"),e.data[r]=o;const i=o.factory||(o.factory=et(o.type,!0)),s=new Cn(i,Le(o),null);e.blueprint[r]=s,n[r]=s,tu(e,t,0,r,Fa(e,n,o.hostVars,Hs),o)}function au(e,t,n){const r=_t(t,e),o=za(n),i=e[10],s=gu(e,ka(e,o,null,n.onPush?64:16,r,t,i,i.createRenderer(r,n),null,null));e[t.index]=s}function uu(e,t,n,r,o,i){ngDevMode&&(D(r,Hs,"Incoming value should never be NO_CHANGE."),function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event attribute '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...`;throw new p(306,t)}}(n),On(e,2,`Attempted to set attribute \`${n}\` on a container node. Host bindings are not valid on ng-container or ng-template.`));const s=_t(e,t);cu(t[11],s,i,e.value,n,r,o)}function cu(e,t,n,r,o,i,s){if(null==i)ngDevMode&&ngDevMode.rendererRemoveAttribute++,yt(e)?e.removeAttribute(t,o,n):t.removeAttribute(o);else{ngDevMode&&ngDevMode.rendererSetAttribute++;const a=null==s?v(i):s(i,r||"",o);yt(e)?e.setAttribute(t,o,a,n):n?t.setAttributeNS(n,o,a):t.setAttribute(o,a)}}function lu(e,t,n,r,o,i){const s=i[t];if(null!==s){const t=r.setInput;for(let i=0;i<s.length;){const a=s[i++],u=s[i++],c=s[i++];null!==t?r.setInput(n,c,a,u):n[u]=c,ngDevMode&&Qa(e,_t(o,e),o.type,u,c)}}}function fu(e,t){let n=null,r=0;for(;r<t.length;){const o=t[r];if(0!==o)if(5!==o){if("number"==typeof o)break;e.hasOwnProperty(o)&&(null===n&&(n=[]),n.push(o,e[o],t[r+1])),r+=2}else r+=2;else r+=4}return n}const du=class extends Array{};function pu(e,t,n,r){ngDevMode&&Ke(t),ngDevMode&&!yt(t[11])&&j(n);const o=new(ngDevMode?du:Array)(e,!0,!1,t,null,0,r,n,null,null);return ngDevMode&&C(o.length,Pe,"Should allocate correct number of slots for LContainer header."),ngDevMode&&function(e){Xs(e,new Ta(e))}(o),o}function hu(e,t){ngDevMode&&C(xt(e),!1,"Should be run in update mode");const n=Ct(t,e);if(Ot(n)){const e=n[1];80&n[2]?Va(e,n,e.template,n[8]):n[5]>0&&vu(n)}}function vu(e){for(let t=Zi(e);null!==t;t=Qi(t))for(let e=Pe;e<t.length;e++){const n=t[e];if(1024&n[2]){const e=n[1];ngDevMode&&T(e,"TView must be allocated"),Va(e,n,e.template,n[8])}else n[5]>0&&vu(n)}const t=e[1].components;if(null!==t)for(let n=0;n<t.length;n++){const r=Ct(t[n],e);Ot(r)&&r[5]>0&&vu(r)}}function yu(e,t){ngDevMode&&C(xt(e),!0,"Should be run in creation mode");const n=Ct(t,e),r=n[1];!function(e,t){for(let n=t.length;n<e.blueprint.length;n++)t.push(e.blueprint[n])}(r,n),La(r,n,n[8])}function gu(e,t){return e[13]?e[14][4]=t:e[13]=t,e[14]=t,t}function bu(e){for(;e;){e[2]|=64;const t=Gi(e);if(0!=(512&e[2])&&!t)return e;e=t}return null}function mu(e){for(let t=0;t<e.components.length;t++){const n=e.components[t],r=Ci(n),o=r[1];$a(o,r,o.template,n)}}function _u(e,t,n){const r=t[10];r.begin&&r.begin();try{Va(e,t,e.template,n)}catch(e){throw Eu(t,e),e}finally{r.end&&r.end()}}function wu(e){mu(e[8])}function Mu(e,t,n){ngDevMode&&T(t,"View queries function to execute must be defined."),en(0),t(e,n)}function Cu(e,t,n,r,...o){if(null===e[r]&&(null==t.inputs||!t.inputs[n])){(t.propertyBindings||(t.propertyBindings=[])).push(r);let i=n;o.length>0&&(i+=Hi+o.join(Hi)),e[r]=i}}const xu=Aa;function Ou(e){return e[7]||(e[7]=ngDevMode?new ma:[])}function Du(e){return e.cleanup||(e.cleanup=ngDevMode?new _a:[])}function Su(e,t,n){return(null===e||Le(e))&&(n=function(e){for(;Array.isArray(e);){if("object"==typeof e[1])return e;e=e[0]}return null}(n[t.index])),n[11]}function Eu(e,t){const n=e[9],r=n?n.get(Pi,null):null;r&&r.handleError(t)}function Iu(e,t,n,r,o){for(let i=0;i<n.length;){const s=n[i++],a=n[i++],u=t[s];ngDevMode&&k(t,s);const c=e.data[s];null!==c.setInput?c.setInput(u,o,r,a):u[a]=o}}function Pu(e,t,n){ngDevMode&&M(n,"Value should be a string"),ngDevMode&&D(n,Hs,"value should not be NO_CHANGE"),ngDevMode&&k(e,t);const r=mt(t,e);ngDevMode&&T(r,"native element should exist"),ts(e[11],r,n)}function Tu(e,t,n){ngDevMode&&Ge(kt(),"Expecting to be called in first template pass only");let r=n?e.styles:null,o=n?e.classes:null,i=0;if(null!==t)for(let e=0;e<t.length;e++){const n=t[e];"number"==typeof n?i=n:1==i?o=u(o,n):2==i&&(r=u(r,n+": "+t[++e]+";"))}n?e.styles=r:e.stylesWithoutHost=r,n?e.classes=o:e.classesWithoutHost=o}function Au(e){const t=_i(e);_u(t[1],t,e)}function ju(e){ngDevMode&&T(e,"component");const t=bu(_i(e));ngDevMode&&T(t[8],"rootContext should be defined"),function(e,t){if(0===e.flags&&e.clean==Aa){let t;e.flags|=1,e.clean=new Promise((e=>t=e)),e.scheduler((()=>{if(1&e.flags&&(e.flags&=-2,mu(e)),2&e.flags){e.flags&=-3;const t=e.playerHandler;t&&t.flushPlayers()}e.clean=Aa,t(null)}))}}(t[8])}const ku=new lr("INJECTOR",-1);class Nu{get(e,t=Fr){if(t===Fr){const t=new Error(`NullInjectorError: No provider for ${a(e)}!`);throw t.name="NullInjectorError",t}return t}}const Ru=new lr("Set Injector scope."),Fu={},Lu={};let Vu;function $u(){return void 0===Vu&&(Vu=new Nu),Vu}function Hu(e,t=null,n=null,r){const o=Uu(e,t,n,r);return o._resolveInjectorDefTypes(),o}function Uu(e,t=null,n=null,r){return new Bu(e,n,t||$u(),r)}class Bu{constructor(e,t,n,r=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const o=[];t&&Cr(t,(n=>this.processProvider(n,e,t))),Cr([e],(e=>this.processInjectorType(e,[],o))),this.records.set(ku,qu(void 0,this));const i=this.records.get(Ru);this.scope=null!=i?i.value:null,this.source=r||("object"==typeof e?null:a(e))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach((e=>e.ngOnDestroy()))}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(e,t=Fr,n=q.Default){this.assertNotDestroyed();const r=Ur(this),o=G(void 0);try{if(!(n&q.SkipSelf)){let t=this.records.get(e);if(void 0===t){const n=("function"==typeof(i=e)||"object"==typeof i&&i instanceof lr)&&V(e);t=n&&this.injectableDefInScope(n)?qu(Wu(e),Fu):null,this.records.set(e,t)}if(null!=t)return this.hydrate(e,t)}const s=n&q.Self?$u():this.parent;return t=n&q.Optional&&t===Fr?null:t,s.get(e,t)}catch(t){if("NullInjectorError"===t.name){if((t.ngTempTokenPath=t.ngTempTokenPath||[]).unshift(a(e)),r)throw t;return function(e,t,n,r){const o=e.ngTempTokenPath;throw t[Vr]&&o.unshift(t[Vr]),e.message=function(e,t,n,r=null){e=e&&"\n"===e.charAt(0)&&"ɵ"==e.charAt(1)?e.substr(2):e;let o=a(t);if(Array.isArray(t))o=t.map(a).join(" -> ");else if("object"==typeof t){let e=[];for(let n in t)if(t.hasOwnProperty(n)){let r=t[n];e.push(n+":"+("string"==typeof r?JSON.stringify(r):a(r)))}o=`{${e.join(", ")}}`}return`${n}${r?"("+r+")":""}[${o}]: ${e.replace(Lr,"\n  ")}`}("\n"+e.message,o,n,r),e.ngTokenPath=o,e.ngTempTokenPath=null,e}(t,e,"R3InjectorError",this.source)}throw t}finally{G(o),Ur(r)}var i}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach((e=>this.get(e)))}toString(){const e=[];return this.records.forEach(((t,n)=>e.push(a(n)))),`R3Injector[${e.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new p(205,ngDevMode&&"Injector has already been destroyed.")}processInjectorType(e,t,n){if(!(e=f(e)))return!1;let r=H(e);const o=null==r&&e.ngModule||void 0,i=void 0===o?e:o;ngDevMode&&-1!==t.indexOf(i)&&g(a(i),t.map(a));const s=-1!==n.indexOf(i);if(void 0!==o&&(r=H(o)),null==r)return!1;if(null!=r.imports&&!s){let e;ngDevMode&&t.push(i),n.push(i);try{Cr(r.imports,(r=>{this.processInjectorType(r,t,n)&&(void 0===e&&(e=[]),e.push(r))}))}finally{ngDevMode&&t.pop()}if(void 0!==e)for(let t=0;t<e.length;t++){const{ngModule:n,providers:r}=e[t];Cr(r,(e=>this.processProvider(e,n,r||ue)))}}this.injectorDefTypes.add(i);const u=et(i)||(()=>new i);this.records.set(i,qu(u,Fu));const c=r.providers;if(null!=c&&!s){const t=e;Cr(c,(e=>this.processProvider(e,t,c)))}return void 0!==o&&void 0!==e.providers}processProvider(e,t,n){let r=Gu(e=f(e))?e:f(e&&e.provide);const o=function(e,t,n){return Ku(e)?qu(void 0,e.useValue):qu(zu(e,t,n),Fu)}(e,t,n);if(Gu(e)||!0!==e.multi){const e=this.records.get(r);ngDevMode&&e&&void 0!==e.multi&&b()}else{let t=this.records.get(r);t?ngDevMode&&void 0===t.multi&&b():(t=qu(void 0,Fu,!0),t.factory=()=>Kr(t.multi),this.records.set(r,t)),r=e,t.multi.push(e)}this.records.set(r,o)}hydrate(e,t){var n;return ngDevMode&&t.value===Lu?g(a(e)):t.value===Fu&&(t.value=Lu,t.value=t.factory()),"object"==typeof t.value&&t.value&&null!==(n=t.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(t.value),t.value}injectableDefInScope(e){if(!e.providedIn)return!1;const t=f(e.providedIn);return"string"==typeof t?"any"===t||t===this.scope:this.injectorDefTypes.has(t)}}function Wu(e){const t=V(e),n=null!==t?t.factory:et(e);if(null!==n)return n;if(e instanceof lr)throw new p(204,ngDevMode&&`Token ${a(e)} is missing a ɵprov definition.`);if(e instanceof Function)return function(e){const t=e.length;if(t>0){const n=Dr(t,"?");throw new p(204,ngDevMode&&`Can't resolve all parameters for ${a(e)}: (${n.join(", ")}).`)}const n=function(e){const t=e&&(e[U]||e[W]);if(t){const n=function(e){if(e.hasOwnProperty("name"))return e.name;const t=(""+e).match(/^function\s*([^\s(]+)/);return null===t?"":t[1]}(e);return console.warn(`DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${n}" class.`),t}return null}(e);return null!==n?()=>n.factory(e):()=>new e}(e);throw new p(204,ngDevMode&&"unreachable")}function zu(e,t,n){let r;if(Gu(e)){const t=f(e);return et(t)||Wu(t)}if(Ku(e))r=()=>f(e.useValue);else if((o=e)&&o.useFactory)r=()=>e.useFactory(...Kr(e.deps||[]));else if(function(e){return!(!e||!e.useExisting)}(e))r=()=>Wr(f(e.useExisting));else{const o=f(e&&(e.useClass||e.provide));if(ngDevMode&&!o&&function(e,t,n){let r="";throw e&&t&&(r=` - only instances of Provider and Type are allowed, got: [${t.map((e=>e==n?"?"+n+"?":"...")).join(", ")}]`),new Error(`Invalid provider for the NgModule '${a(e)}'`+r)}(t,n,e),!function(e){return!!e.deps}(e))return et(o)||Wu(o);r=()=>new o(...Kr(e.deps))}var o;return r}function qu(e,t,n=!1){return{factory:e,value:t,multi:n?[]:void 0}}function Ku(e){return null!==e&&"object"==typeof e&&$r in e}function Gu(e){return"function"==typeof e}class Ju{static create(e,t){var n;if(Array.isArray(e))return Hu({name:""},t,e,"");{const t=null!==(n=e.name)&&void 0!==n?n:"";return Hu({name:t},e.parent,e.providers,t)}}}function Zu(e){sc(e);const t=bi(e);return null===t?null:(void 0===t.component&&(t.component=function(e,t){const n=t[1].data[e];let r=n.directiveStart;return 2&n.flags?t[r]:null}(t.nodeIndex,t.lView)),t.component)}function Qu(e){sc(e);const t=bi(e);return null===t?null:t.lView[8]}function Yu(e){const t=bi(e);if(null===t)return null;let n,r=t.lView;for(ngDevMode&&Ke(r);2===r[1].type&&(n=Gi(r));)r=n;return 512&r[2]?null:r[8]}function Xu(e){return[...Ji(e).components]}function ec(e){const t=bi(e);if(null===t)return Ju.NULL;const n=t.lView[1].data[t.nodeIndex];return new Yn(n,t.lView)}function tc(e){if(e instanceof Text)return[];const t=bi(e);if(null===t)return[];const n=t.lView,r=n[1],o=t.nodeIndex;return(null==r?void 0:r.data[o])?(void 0===t.directives&&(t.directives=Si(o,n,!1)),null===t.directives?[]:[...t.directives]):[]}function nc(e){const{constructor:t}=e;if(!t)throw new Error("Unable to find the instance constructor");const n=De(t);if(n)return{inputs:n.inputs,outputs:n.outputs,encapsulation:n.encapsulation,changeDetection:n.onPush?Q.OnPush:Q.Default};const r=Se(t);return r?{inputs:r.inputs,outputs:r.outputs}:null}function rc(e){return bi(e).native}function oc(e){sc(e);const t=bi(e);if(null===t)return[];const n=t.lView,r=n[1],o=n[7],i=r.cleanup,s=[];if(i&&o)for(let t=0;t<i.length;){const r=i[t++],a=i[t++];if("string"==typeof r){const u=r,c=bt(n[a]),l=o[i[t++]],f=i[t++],d="boolean"==typeof f||f>=0?"dom":"output",p="boolean"==typeof f&&f;e==c&&s.push({element:e,name:u,callback:l,useCapture:p,type:d})}}return s.sort(ic),s}function ic(e,t){return e.name==t.name?0:e.name<t.name?-1:1}function sc(e){if("undefined"!=typeof Element&&!(e instanceof Element))throw new Error("Expecting instance of DOM Element")}function ac(e){ju(e),Xu(e).forEach((e=>Au(e)))}Ju.THROW_IF_NOT_FOUND=Fr,Ju.NULL=new Nu,Ju.ɵprov=R({token:Ju,providedIn:"any",factory:()=>Wr(ku)}),Ju.__NG_ELEMENT_ID__=-1;let uc=!1;function cc(){uc||(uc=!0,lc("ɵsetProfiler",ut),lc("getDirectiveMetadata",nc),lc("getComponent",Zu),lc("getContext",Qu),lc("getListeners",oc),lc("getOwningComponent",Yu),lc("getHostElement",rc),lc("getInjector",ec),lc("getRootComponents",Xu),lc("getDirectives",tc),lc("applyChanges",ac))}function lc(e,t){if("undefined"==typeof COMPILED||!COMPILED){const n=ie;if(ngDevMode&&T(t,"function not defined"),n){let r=n.ng;r||(r=n.ng={}),r[e]=t}}}function fc(e,t={}){ngDevMode&&cc(),ngDevMode&&Be(e);const n=t.rendererFactory||gt,r=t.sanitizer||null,o=De(e);o.type!=e&&(o.type=e);const i=o.selectors[0][0],s=Ka(n.createRenderer(null,null),t.host||i,o.encapsulation),a=o.onPush?576:528,u=hc(t.scheduler,t.playerHandler),c=n.createRenderer(s,o),l=qa(0,null,null,1,0,null,null,null,null,null),f=ka(null,l,u,a,null,null,n,c,null,t.injector||null);let d;rn(f);try{n.begin&&n.begin(),d=pc(dc(s,o,f,n,c,r),o,f,u,t.hostFeatures||null),La(l,f,null),Va(l,f,null,null)}finally{cn(),n.end&&n.end()}return d}function dc(e,t,n,r,o,i){const s=n[1];ngDevMode&&k(n,20),n[20]=e;const a=Na(s,20,2,"#host",null),u=a.mergedAttrs=t.hostAttrs;null!==u&&(Tu(a,u,!0),null!==e&&(Dn(o,e,u),null!==a.classes&&Es(o,e,a.classes),null!==a.styles&&Ss(o,e,a.styles)));const c=r.createRenderer(e,t),l=ka(n,za(t),null,t.onPush?64:16,n[20],a,r,c,i||null,null);return s.firstCreatePass&&(Hn(Fn(a,n),s,t.type),ru(s,a),iu(a,n.length,1)),gu(n,l),n[20]=l}function pc(e,t,n,r,o){const i=n[1],s=function(e,t,n){const r=Rt();if(e.firstCreatePass){n.providersResolver&&n.providersResolver(n);const o=Fa(e,t,1,null);ngDevMode&&C(o,r.directiveStart,"Because this is a root component the allocated expando should match the TNode component."),su(e,r,t,o,n)}const o=Jn(t,e,r.directiveStart,r);wi(o,t);const i=_t(r,t);return i&&wi(i,t),o}(i,n,t);if(r.components.push(s),e[8]=s,o&&o.forEach((e=>e(s,t))),t.contentQueries){const e=Rt();ngDevMode&&T(e,"TNode expected"),t.contentQueries(1,s,e.directiveStart)}const a=Rt();return ngDevMode&&T(a,"tNode should have been already created"),!i.firstCreatePass||null===t.hostBindings&&null===t.hostAttrs||(fn(a.index),tu(n[1],a,0,a.directiveStart,a.directiveEnd,t),nu(t,s)),s}function hc(e,t){return{components:[],scheduler:e||Fi,clean:xu,playerHandler:t||null,flags:0}}function vc(e,t){const n=Ci(e);ngDevMode&&T(n,"LView is required");const r=n[1],o=Rt();ngDevMode&&T(o,"TNode is required"),yn(r,o)}function yc(e){return Ji(e).clean}function gc(e){return Object.getPrototypeOf(e.prototype).constructor}function bc(e){let t=gc(e.type),n=!0;const r=[e];for(;t;){let o;if(Le(e))o=t.ɵcmp||t.ɵdir;else{if(t.ɵcmp){const e="undefined"==typeof ngDevMode||ngDevMode?"Directives cannot inherit Components":"";throw new p(903,e)}o=t.ɵdir}if(o){if(n){r.push(o);const t=e;t.inputs=mc(e.inputs),t.declaredInputs=mc(e.declaredInputs),t.outputs=mc(e.outputs);const n=o.hostBindings;n&&Mc(e,n);const i=o.viewQuery,a=o.contentQueries;if(i&&_c(e,i),a&&wc(e,a),s(e.inputs,o.inputs),s(e.declaredInputs,o.declaredInputs),s(e.outputs,o.outputs),Le(o)&&o.data.animation){const t=e.data;t.animation=(t.animation||[]).concat(o.data.animation)}}const t=o.features;if(t)for(let r=0;r<t.length;r++){const o=t[r];o&&o.ngInherit&&o(e),o===bc&&(n=!1)}}t=Object.getPrototypeOf(t)}!function(e){let t=0,n=null;for(let r=e.length-1;r>=0;r--){const o=e[r];o.hostVars=t+=o.hostVars,o.hostAttrs=In(o.hostAttrs,n=In(n,o.hostAttrs))}}(r)}function mc(e){return e===ae?{}:e===ue?[]:e}function _c(e,t){const n=e.viewQuery;e.viewQuery=n?(e,r)=>{t(e,r),n(e,r)}:t}function wc(e,t){const n=e.contentQueries;e.contentQueries=n?(e,r,o)=>{t(e,r,o),n(e,r,o)}:t}function Mc(e,t){const n=e.hostBindings;e.hostBindings=n?(e,r)=>{t(e,r),n(e,r)}:t}const Cc=["providersResolver"],xc=["template","decls","consts","vars","onPush","ngContentSelectors","styles","encapsulation","schemas"];function Oc(e){let t,n=gc(e.type);t=Le(e)?n.ɵcmp:n.ɵdir;const r=e;for(const e of Cc)r[e]=t[e];if(Le(t))for(const e of xc)r[e]=t[e]}let Dc=null;function Sc(){if(!Dc){const e=ie.Symbol;if(e&&e.iterator)Dc=e.iterator;else{const e=Object.getOwnPropertyNames(Map.prototype);for(let t=0;t<e.length;++t){const n=e[t];"entries"!==n&&"size"!==n&&Map.prototype[n]===Map.prototype.entries&&(Dc=n)}}}return Dc}function Ec(e,t){const n=Ic(e),r=Ic(t);if(n&&r)return function(e,t,n){const r=e[Sc()](),o=t[Sc()]();for(;;){const e=r.next(),t=o.next();if(e.done&&t.done)return!0;if(e.done||t.done)return!1;if(!n(e.value,t.value))return!1}}(e,t,Ec);{const o=e&&("object"==typeof e||"function"==typeof e),i=t&&("object"==typeof t||"function"==typeof t);return!(n||!o||r||!i)||Object.is(e,t)}}function Ic(e){return!!Pc(e)&&(Array.isArray(e)||!(e instanceof Map)&&Sc()in e)}function Pc(e){return null!==e&&("function"==typeof e||"object"==typeof e)}function Tc(e,t,n){return e[t]=n}function Ac(e,t){return ngDevMode&&k(e,t),ngDevMode&&D(e[t],Hs,"Stored value should never be NO_CHANGE."),e[t]}function jc(e,t,n){ngDevMode&&D(n,Hs,"Incoming value should never be NO_CHANGE."),ngDevMode&&S(t,e.length,"Slot should have been initialized to NO_CHANGE");const r=e[t];if(Object.is(r,n))return!1;if(ngDevMode&&Ut()){const o=r!==Hs?r:void 0;if(!Ec(o,n)){const i=function(e,t,n,r){const o=e[1].data,i=o[t];if("string"==typeof i)return i.indexOf(Hi)>-1?Wi(e,t,t,i,r):{propName:i,oldValue:n,newValue:r};if(null===i){let n=t-1;for(;"string"!=typeof o[n]&&null===o[n+1];)n--;const i=o[n];if("string"==typeof i){const o=i.match(new RegExp(Hi,"g"));if(o&&o.length-1>t-n)return Wi(e,n,t,i,r)}}return{propName:void 0,oldValue:n,newValue:r}}(e,t,o,n);!function(e,t,n,r){let o=`ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${r?` for '${r}'`:""}: '${t}'. Current value: '${n}'.`;throw e&&(o+=" It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?"),new p(-100,o)}(r===Hs,i.oldValue,i.newValue,i.propName)}return!1}return e[t]=n,!0}function kc(e,t,n,r){const o=jc(e,t,n);return jc(e,t+1,r)||o}function Nc(e,t,n,r,o){const i=kc(e,t,n,r);return jc(e,t+2,o)||i}function Rc(e,t,n,r,o,i){const s=kc(e,t,n,r);return kc(e,t+2,o,i)||s}function Fc(e,t,n,r){const o=jt(),i=Kt();if(jc(o,i,t)){const s=kt(),a=dn();uu(a,o,e,t,n,r),ngDevMode&&Cu(s.data,a,"attr."+e,i)}return Fc}function Lc(e,t){ngDevMode&&S(2,t.length,"should have at least 3 values"),ngDevMode&&C(t.length%2,1,"should have an odd number of values");let n=!1,r=zt();for(let o=1;o<t.length;o+=2)n=jc(e,r++,t[o])||n;if(qt(r),!n)return Hs;let o=t[0];for(let e=1;e<t.length;e+=2)o+=v(t[e])+t[e+1];return o}function Vc(e,t,n,r){return jc(e,Kt(),n)?t+v(n)+r:Hs}function $c(e,t,n,r,o,i){const s=kc(e,zt(),n,o);return Gt(2),s?t+v(n)+r+v(o)+i:Hs}function Hc(e,t,n,r,o,i,s,a){const u=Nc(e,zt(),n,o,s);return Gt(3),u?t+v(n)+r+v(o)+i+v(s)+a:Hs}function Uc(e,t,n,r,o,i,s,a,u,c){const l=Rc(e,zt(),n,o,s,u);return Gt(4),l?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c:Hs}function Bc(e,t,n,r,o,i,s,a,u,c,l,f){const d=zt();let p=Rc(e,d,n,o,s,u);return p=jc(e,d+4,l)||p,Gt(5),p?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c+v(l)+f:Hs}function Wc(e,t,n,r,o,i,s,a,u,c,l,f,d,p){const h=zt();let y=Rc(e,h,n,o,s,u);return y=kc(e,h+4,l,d)||y,Gt(6),y?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c+v(l)+f+v(d)+p:Hs}function zc(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,y){const g=zt();let b=Rc(e,g,n,o,s,u);return b=Nc(e,g+4,l,d,h)||b,Gt(7),b?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c+v(l)+f+v(d)+p+v(h)+y:Hs}function qc(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,y,g,b){const m=zt();let _=Rc(e,m,n,o,s,u);return _=Rc(e,m+4,l,d,h,g)||_,Gt(8),_?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c+v(l)+f+v(d)+p+v(h)+y+v(g)+b:Hs}function Kc(e,t,n,r,o,i){const s=jt(),a=Vc(s,t,n,r);if(a!==Hs){const n=dn();uu(n,s,e,a,o,i),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-1,t,r)}return Kc}function Gc(e,t,n,r,o,i,s,a){const u=jt(),c=$c(u,t,n,r,o,i);if(c!==Hs){const n=dn();uu(n,u,e,c,s,a),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-2,t,r,i)}return Gc}function Jc(e,t,n,r,o,i,s,a,u,c){const l=jt(),f=Hc(l,t,n,r,o,i,s,a);if(f!==Hs){const n=dn();uu(n,l,e,f,u,c),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-3,t,r,i,a)}return Jc}function Zc(e,t,n,r,o,i,s,a,u,c,l,f){const d=jt(),p=Uc(d,t,n,r,o,i,s,a,u,c);if(p!==Hs){const n=dn();uu(n,d,e,p,l,f),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-4,t,r,i,a,c)}return Zc}function Qc(e,t,n,r,o,i,s,a,u,c,l,f,d,p){const h=jt(),v=Bc(h,t,n,r,o,i,s,a,u,c,l,f);if(v!==Hs){const n=dn();uu(n,h,e,v,d,p),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-5,t,r,i,a,c,f)}return Qc}function Yc(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v){const y=jt(),g=Wc(y,t,n,r,o,i,s,a,u,c,l,f,d,p);if(g!==Hs){const n=dn();uu(n,y,e,g,h,v),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-6,t,r,i,a,c,f,p)}return Yc}function Xc(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g){const b=jt(),m=zc(b,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v);if(m!==Hs){const n=dn();uu(n,b,e,m,y,g),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-7,t,r,i,a,c,f,p,v)}return Xc}function el(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b,m){const _=jt(),w=qc(_,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g);if(w!==Hs){const n=dn();uu(n,_,e,w,b,m),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-8,t,r,i,a,c,f,p,v,g)}return el}function tl(e,t,n,r){const o=jt(),i=Lc(o,t);if(i!==Hs){const s=dn();if(uu(s,o,e,i,n,r),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Cu(kt().data,s,"attr."+e,zt()-n.length+1,...n)}}return tl}function nl(e,t,n,r,o,i,s,a){const u=jt(),c=kt(),l=e+Te,f=c.firstCreatePass?function(e,t,n,r,o,i,s,a,u){ngDevMode&&Ge(t),ngDevMode&&ngDevMode.firstCreatePass++;const c=t.consts,l=Na(t,e,4,s||null,Dt(c,a));eu(t,n,l,Dt(c,u)),yn(t,l);const f=l.tViews=qa(2,l,r,o,i,t.directiveRegistry,t.pipeRegistry,null,t.schemas,c);return null!==t.queries&&(t.queries.template(t,l),f.queries=t.queries.embeddedTView(l)),l}(l,c,u,t,n,r,o,i,s):c.data[l];Vt(f,!1);const d=u[11].createComment(ngDevMode?"container":"");ms(c,u,d,f),wi(d,u),gu(u,u[l]=pu(d,u,d,f)),Fe(f)&&Ba(c,u,f),null!=s&&Wa(u,f,a)}function rl(e,t,n,r){n>=e.data.length&&(e.data[n]=null,e.blueprint[n]=null),t[n]=r}function ol(e){return Mt(It.lFrame.contextLView,Te+e)}const il={ɵɵdefineInjectable:R,ɵɵdefineInjector:L,ɵɵinject:Wr,ɵɵinvalidFactoryDep:zr,resolveForwardRef:f};const sl=i({provide:String,useValue:i});function al(e){return void 0!==e.useClass}function ul(e){return void 0!==e.useFactory}const cl=ir("Injectable",void 0,void 0,void 0,((e,t)=>function(e,t){let n=null,r=null;e.hasOwnProperty(U)||Object.defineProperty(e,U,{get:()=>{if(null===n){const r=mr({usage:0,kind:"injectable",type:e});n=r.compileInjectable(il,`ng:///${e.name}/ɵprov.js`,function(e,t){const n=t||{providedIn:null},r={name:e.name,type:e,typeArgumentCount:0,providedIn:n.providedIn};return(al(n)||ul(n))&&void 0!==n.deps&&(r.deps=ro(n.deps)),al(n)?r.useClass=n.useClass:function(e){return sl in e}(n)?r.useValue=n.useValue:ul(n)?r.useFactory=n.useFactory:function(e){return void 0!==e.useExisting}(n)&&(r.useExisting=n.useExisting),r}(e,t))}return n}}),e.hasOwnProperty(pe)||Object.defineProperty(e,pe,{get:()=>{if(null===r){const t=mr({usage:0,kind:"injectable",type:e});r=t.compileFactory(il,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,typeArgumentCount:0,deps:no(e),target:t.FactoryTarget.Injectable})}return r},configurable:!0})}(e,t)));function ll(e){return e.length>1?" ("+function(e){const t=[];for(let n=0;n<e.length;++n){if(t.indexOf(e[n])>-1)return t.push(e[n]),t;t.push(e[n])}return t}(e.slice().reverse()).map((e=>a(e.token))).join(" -> ")+")":""}function fl(e,t,n,r){const o=[t],i=n(o),s=r?function(e,t){const n=`${e} caused by: ${t instanceof Error?t.message:t}`,r=Error(n);return r.ngOriginalError=t,r}(i,r):Error(i);return s.addKey=dl,s.keys=o,s.injectors=[e],s.constructResolvingMessage=n,s.ngOriginalError=r,s}function dl(e,t){this.injectors.push(e),this.keys.push(t),this.message=this.constructResolvingMessage(this.keys)}function pl(e,t){const n=[];for(let e=0,r=t.length;e<r;e++){const r=t[e];r&&0!=r.length?n.push(r.map(a).join(" ")):n.push("?")}return Error("Cannot resolve all parameters for '"+a(e)+"'("+n.join(", ")+"). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '"+a(e)+"' is decorated with Injectable.")}class hl{constructor(e,t){if(this.token=e,this.id=t,!e)throw new Error("Token must be defined!");this.displayName=a(this.token)}static get(e){return vl.get(f(e))}static get numberOfKeys(){return vl.numberOfKeys}}const vl=new class{constructor(){this._allKeys=new Map}get(e){if(e instanceof hl)return e;if(this._allKeys.has(e))return this._allKeys.get(e);const t=new hl(e,hl.numberOfKeys);return this._allKeys.set(e,t),t}get numberOfKeys(){return this._allKeys.size}},yl=new class{constructor(e){this.reflectionCapabilities=e}updateCapabilities(e){this.reflectionCapabilities=e}factory(e){return this.reflectionCapabilities.factory(e)}parameters(e){return this.reflectionCapabilities.parameters(e)}annotations(e){return this.reflectionCapabilities.annotations(e)}propMetadata(e){return this.reflectionCapabilities.propMetadata(e)}hasLifecycleHook(e,t){return this.reflectionCapabilities.hasLifecycleHook(e,t)}getter(e){return this.reflectionCapabilities.getter(e)}setter(e){return this.reflectionCapabilities.setter(e)}method(e){return this.reflectionCapabilities.method(e)}importUri(e){return this.reflectionCapabilities.importUri(e)}resourceUri(e){return this.reflectionCapabilities.resourceUri(e)}resolveIdentifier(e,t,n,r){return this.reflectionCapabilities.resolveIdentifier(e,t,n,r)}resolveEnum(e,t){return this.reflectionCapabilities.resolveEnum(e,t)}}(new kr);class gl{constructor(e,t,n){this.key=e,this.optional=t,this.visibility=n}static fromKey(e){return new gl(e,!1,null)}}const bl=[];class ml{constructor(e,t,n){this.key=e,this.resolvedFactories=t,this.multiProvider=n,this.resolvedFactory=this.resolvedFactories[0]}}class _l{constructor(e,t){this.factory=e,this.dependencies=t}}function wl(e){let t,n;if(e.useClass){const r=f(e.useClass);t=yl.factory(r),n=Ol(r)}else e.useExisting?(t=e=>e,n=[gl.fromKey(hl.get(e.useExisting))]):e.useFactory?(t=e.useFactory,n=function(e,t){if(t){const n=t.map((e=>[e]));return t.map((t=>Dl(e,t,n)))}return Ol(e)}(e.useFactory,e.deps)):(t=()=>e.useValue,n=bl);return new _l(t,n)}function Ml(e){return new ml(hl.get(e.provide),[wl(e)],e.multi||!1)}function Cl(e){const t=function(e,t){for(let n=0;n<e.length;n++){const r=e[n],o=t.get(r.key.id);if(o){if(r.multiProvider!==o.multiProvider)throw Error(`Cannot mix multi providers and regular providers, got: ${o} ${r}`);if(r.multiProvider)for(let e=0;e<r.resolvedFactories.length;e++)o.resolvedFactories.push(r.resolvedFactories[e]);else t.set(r.key.id,r)}else{let e;e=r.multiProvider?new ml(r.key,r.resolvedFactories.slice(),r.multiProvider):r,t.set(r.key.id,e)}}return t}(xl(e,[]).map(Ml),new Map);return Array.from(t.values())}function xl(e,t){return e.forEach((e=>{if(e instanceof _r)t.push({provide:e,useClass:e});else if(e&&"object"==typeof e&&void 0!==e.provide)t.push(e);else{if(!Array.isArray(e))throw Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${e}`);xl(e,t)}})),t}function Ol(e){const t=yl.parameters(e);if(!t)return[];if(t.some((e=>null==e)))throw pl(e,t);return t.map((n=>Dl(e,n,t)))}function Dl(e,t,n){let r=null,o=!1;if(!Array.isArray(t))return Sl(t instanceof Jr?t.token:t,o,null);let i=null;for(let e=0;e<t.length;++e){const n=t[e];n instanceof _r?r=n:n instanceof Jr?r=n.token:n instanceof Zr?o=!0:n instanceof Qr||n instanceof Yr?i=n:n instanceof lr&&(r=n)}if(r=f(r),null!=r)return Sl(r,o,i);throw pl(e,n)}function Sl(e,t,n){return new gl(hl.get(e),t,n)}const El={};class Il{static resolve(e){return Cl(e)}static resolveAndCreate(e,t){const n=Il.resolve(e);return Il.fromResolvedProviders(n,t)}static fromResolvedProviders(e,t){return new Pl(e,t)}}class Pl{constructor(e,t){this._constructionCounter=0,this._providers=e,this.parent=t||null;const n=e.length;this.keyIds=[],this.objs=[];for(let t=0;t<n;t++)this.keyIds[t]=e[t].key.id,this.objs[t]=El}get(e,t=Fr){return this._getByKey(hl.get(e),null,t)}resolveAndCreateChild(e){const t=Il.resolve(e);return this.createChildFromResolved(t)}createChildFromResolved(e){const t=new Pl(e);return t.parent=this,t}resolveAndInstantiate(e){return this.instantiateResolved(Il.resolve([e])[0])}instantiateResolved(e){return this._instantiateProvider(e)}getProviderAtIndex(e){if(e<0||e>=this._providers.length)throw function(e){return Error(`Index ${e} is out-of-bounds.`)}(e);return this._providers[e]}_new(e){if(this._constructionCounter++>this._getMaxNumberOfObjects())throw this,fl(this,e.key,(function(e){return`Cannot instantiate cyclic dependency!${ll(e)}`}));return this._instantiateProvider(e)}_getMaxNumberOfObjects(){return this.objs.length}_instantiateProvider(e){if(e.multiProvider){const t=[];for(let n=0;n<e.resolvedFactories.length;++n)t[n]=this._instantiate(e,e.resolvedFactories[n]);return t}return this._instantiate(e,e.resolvedFactories[0])}_instantiate(e,t){const n=t.factory;let r,o;try{r=t.dependencies.map((e=>this._getByReflectiveDependency(e)))}catch(t){throw t.addKey&&t.addKey(this,e.key),t}try{o=n(...r)}catch(t){throw this,i=t,t.stack,fl(this,e.key,(function(e){const t=a(e[0].token);return`${i.message}: Error during instantiation of ${t}!${ll(e)}.`}),i)}var i;return o}_getByReflectiveDependency(e){return this._getByKey(e.key,e.visibility,e.optional?null:Fr)}_getByKey(e,t,n){return e===Pl.INJECTOR_KEY?this:t instanceof Qr?this._getByKeySelf(e,n):this._getByKeyDefault(e,n,t)}_getObjByKeyId(e){for(let t=0;t<this.keyIds.length;t++)if(this.keyIds[t]===e)return this.objs[t]===El&&(this.objs[t]=this._new(this._providers[t])),this.objs[t];return El}_throwOrNull(e,t){if(t!==Fr)return t;throw function(e,t){return fl(e,t,(function(e){return`No provider for ${a(e[0].token)}!${ll(e)}`}))}(this,e)}_getByKeySelf(e,t){const n=this._getObjByKeyId(e.id);return n!==El?n:this._throwOrNull(e,t)}_getByKeyDefault(e,t,n){let r;for(r=n instanceof Yr?this.parent:this;r instanceof Pl;){const t=r,n=t._getObjByKeyId(e.id);if(n!==El)return n;r=t.parent}return null!==r?r.get(e.token,t):this._throwOrNull(e,t)}get displayName(){return`ReflectiveInjector(providers: [${function(e,t){const n=[];for(let t=0;t<e._providers.length;++t)n[t]=' "'+e.getProviderAtIndex(t).key.displayName+'" ';return n}(this).join(", ")}])`}toString(){return this.displayName}}function Tl(e,t=q.Default){const n=jt();return null===n?(ngDevMode&&(ngDevMode&&x(K,Tl,"Calling ɵɵinject would cause infinite recursion")),Wr(e,t)):Wn(Rt(),n,f(e),t)}function Al(){const e=ngDevMode?"This constructor was not compatible with Dependency Injection.":"invalid";throw new Error(e)}function jl(e,t,n){const r=jt(),o=Kt();if(jc(r,o,t)){const i=kt(),s=dn();Za(i,s,r,e,t,r[11],n,!1),ngDevMode&&Cu(i.data,s,e,o)}return jl}function kl(e,t,n,r,o){const i=o?"class":"style";Iu(e,n,t.inputs[i],i,r)}function Nl(e,t,n,r){const o=jt(),i=kt(),s=Te+e;ngDevMode&&C(zt(),i.bindingStartIndex,"elements should be created before any bindings"),ngDevMode&&k(o,s);const a=o[11],u=o[s]=rs(a,t,It.lFrame.currentNamespace),c=i.firstCreatePass?function(e,t,n,r,o,i,s){ngDevMode&&Ge(t),ngDevMode&&ngDevMode.firstCreatePass++;const a=t.consts,u=Na(t,e,2,o,Dt(a,i)),c=eu(t,n,u,Dt(a,s));return ngDevMode&&function(e,t,n,r){if(null===e.schemas)return;const o=n.value;if(!r&&null!==o&&("undefined"!=typeof HTMLUnknownElement&&HTMLUnknownElement&&t instanceof HTMLUnknownElement||"undefined"!=typeof customElements&&o.indexOf("-")>-1&&!customElements.get(o))&&!Ya(e,o)){let e=`'${o}' is not a known element:\n`;e+=`1. If '${o}' is an Angular component, then verify that it is part of this module.\n`,o&&o.indexOf("-")>-1?e+=`2. If '${o}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`:e+="2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.",console.error(h(304,e))}}(t,r,u,c),null!==u.attrs&&Tu(u,u.attrs,!1),null!==u.mergedAttrs&&Tu(u,u.mergedAttrs,!0),null!==t.queries&&t.queries.elementStart(t,u),u}(s,i,o,u,t,n,r):i.data[s];Vt(c,!0);const l=c.mergedAttrs;null!==l&&Dn(a,u,l);const f=c.classes;null!==f&&Es(a,u,f);const d=c.styles;return null!==d&&Ss(a,u,d),64!=(64&c.flags)&&ms(i,o,u,c),0===It.lFrame.elementDepthCount&&wi(u,o),It.lFrame.elementDepthCount++,Fe(c)&&(Ba(i,o,c),Ua(i,c,o)),null!==r&&Wa(o,c),Nl}function Rl(){let e=Rt();ngDevMode&&T(e,"No parent node to close."),$t()?Ht():(ngDevMode&&We(Rt()),e=e.parent,Vt(e,!1));const t=e;ngDevMode&&On(t,3),It.lFrame.elementDepthCount--;const n=kt();return n.firstCreatePass&&(yn(n,e),Ne(e)&&n.queries.elementEnd(e)),null!=t.classesWithoutHost&&function(e){return 0!=(16&e.flags)}(t)&&kl(n,t,jt(),t.classesWithoutHost,!0),null!=t.stylesWithoutHost&&function(e){return 0!=(32&e.flags)}(t)&&kl(n,t,jt(),t.stylesWithoutHost,!1),Rl}function Fl(e,t,n,r){return Nl(e,t,n,r),Rl(),Fl}function Ll(e,t,n){const r=jt(),o=kt(),i=e+Te;ngDevMode&&k(r,i),ngDevMode&&C(zt(),o.bindingStartIndex,"element containers should be created before any bindings");const s=o.firstCreatePass?function(e,t,n,r,o){ngDevMode&&ngDevMode.firstCreatePass++;const i=t.consts,s=Dt(i,r),a=Na(t,e,8,"ng-container",s);return null!==s&&Tu(a,s,!0),eu(t,n,a,Dt(i,o)),null!==t.queries&&t.queries.elementStart(t,a),a}(i,o,r,t,n):o.data[i];Vt(s,!0),ngDevMode&&ngDevMode.rendererCreateComment++;const a=r[i]=r[11].createComment(ngDevMode?"ng-container":"");return ms(o,r,a,s),wi(a,r),Fe(s)&&(Ba(o,r,s),Ua(o,s,r)),null!=n&&Wa(r,s),Ll}function Vl(){let e=Rt();const t=kt();return $t()?Ht():(ngDevMode&&We(e),e=e.parent,Vt(e,!1)),ngDevMode&&On(e,8),t.firstCreatePass&&(yn(t,e),Ne(e)&&t.queries.elementEnd(e)),Vl}function $l(e,t,n){return Ll(e,t,n),Vl(),$l}function Hl(){return jt()}function Ul(e){return!!e&&"function"==typeof e.then}function Bl(e){return!!e&&"function"==typeof e.subscribe}Pl.INJECTOR_KEY=hl.get(Ju);const Wl=Bl;function zl(e,t,n,r){const o=jt(),i=kt(),s=Rt();return Kl(i,o,o[11],s,e,t,!!n,r),zl}function ql(e,t){const n=Rt(),r=jt(),o=kt();return Kl(o,r,Su(Yt(o.data),n,r),n,e,t,!1),ql}function Kl(e,t,n,r,o,i,s,a){const u=Fe(r),c=e.firstCreatePass&&Du(e),l=t[8],f=Ou(t);ngDevMode&&On(r,15);let d=!0;if(3&r.type||a){const p=_t(r,t),h=a?a(p):p,v=f.length,y=a?e=>a(bt(e[r.index])):r.index;if(yt(n)){let s=null;if(!a&&u&&(s=function(e,t,n,r){const o=e.cleanup;if(null!=o)for(let e=0;e<o.length-1;e+=2){const i=o[e];if(i===n&&o[e+1]===r){const n=t[7],r=o[e+2];return n.length>r?n[r]:null}"string"==typeof i&&(e+=2)}return null}(e,t,o,r.index)),null!==s)(s.__ngLastListenerFn__||s).__ngNextListenerFn__=i,s.__ngLastListenerFn__=i,d=!1;else{i=Jl(r,t,l,i,!1);const e=n.listen(h,o,i);ngDevMode&&ngDevMode.rendererAddEventListener++,f.push(i,e),c&&c.push(o,y,v,v+1)}}else i=Jl(r,t,l,i,!0),h.addEventListener(o,i,s),ngDevMode&&ngDevMode.rendererAddEventListener++,f.push(i),c&&c.push(o,y,v,s)}else i=Jl(r,t,l,i,!1);const p=r.outputs;let h;if(d&&null!==p&&(h=p[o])){const e=h.length;if(e)for(let n=0;n<e;n+=2){const e=h[n];ngDevMode&&k(t,e);const s=h[n+1],a=t[e],u=a[s];if(ngDevMode&&!Wl(u))throw new Error(`@Output ${s} not initialized in '${a.constructor.name}'.`);const l=u.subscribe(i),d=f.length;f.push(i,l),c&&c.push(o,r.index,d,-(d+1))}}}function Gl(e,t,n,r){try{return ct(6,t,n),!1!==n(r)}catch(t){return Eu(e,t),!1}finally{ct(7,t,n)}}function Jl(e,t,n,r,o){return function i(s){if(s===Function)return r;const a=2&e.flags?Ct(e.index,t):t;0==(32&t[2])&&bu(a);let u=Gl(t,n,r,s),c=i.__ngNextListenerFn__;for(;c;)u=Gl(t,n,c,s)&&u,c=c.__ngNextListenerFn__;return o&&!1===u&&(s.preventDefault(),s.returnValue=!1),u}}function Zl(e=1){return function(e){return(It.lFrame.contextLView=function(e,t){for(;e>0;)ngDevMode&&T(t[15],"Declaration view should be defined if nesting level is greater than 0."),t=t[15],e--;return t}(e,It.lFrame.contextLView))[8]}(e)}function Ql(e,t){let n=null;const r=function(e){const t=e.attrs;if(null!=t){const e=t.indexOf(5);if(0==(1&e))return t[e+1]}return null}(e);for(let o=0;o<t.length;o++){const i=t[o];if("*"!==i){if(null===r?Fs(e,i,!0):Ls(r,i))return o}else n=o}return n}function Yl(e){const t=jt()[16][6];if(!t.projection){const n=e?e.length:1,r=t.projection=Dr(n,null),o=r.slice();let i=t.child;for(;null!==i;){const t=e?Ql(i,e):0;null!==t&&(o[t]?o[t].projectionNext=i:r[t]=i,o[t]=i),i=i.next}}}function Xl(e,t=0,n){const r=jt(),o=kt(),i=Na(o,Te+e,16,null,n||null);null===i.projection&&(i.projection=t),Ht(),64!=(64&i.flags)&&function(e,t,n){Ds(t[11],0,t,n,us(e,n,t),hs(n.parent||t[6],n,t))}(o,r,i)}function ef(e,t,n){return tf(e,"",t,"",n),ef}function tf(e,t,n,r,o){const i=jt(),s=Vc(i,t,n,r);if(s!==Hs){const n=kt(),a=dn();Za(n,a,i,e,s,i[11],o,!1),ngDevMode&&Cu(n.data,a,e,zt()-1,t,r)}return tf}function nf(e,t,n,r,o,i,s){const a=jt(),u=$c(a,t,n,r,o,i);if(u!==Hs){const n=kt(),o=dn();Za(n,o,a,e,u,a[11],s,!1),ngDevMode&&Cu(n.data,o,e,zt()-2,t,r,i)}return nf}function rf(e,t,n,r,o,i,s,a,u){const c=jt(),l=Hc(c,t,n,r,o,i,s,a);if(l!==Hs){const n=kt(),o=dn();Za(n,o,c,e,l,c[11],u,!1),ngDevMode&&Cu(n.data,o,e,zt()-3,t,r,i,a)}return rf}function of(e,t,n,r,o,i,s,a,u,c,l){const f=jt(),d=Uc(f,t,n,r,o,i,s,a,u,c);if(d!==Hs){const n=kt(),o=dn();Za(n,o,f,e,d,f[11],l,!1),ngDevMode&&Cu(n.data,o,e,zt()-4,t,r,i,a,c)}return of}function sf(e,t,n,r,o,i,s,a,u,c,l,f,d){const p=jt(),h=Bc(p,t,n,r,o,i,s,a,u,c,l,f);if(h!==Hs){const n=kt(),o=dn();Za(n,o,p,e,h,p[11],d,!1),ngDevMode&&Cu(n.data,o,e,zt()-5,t,r,i,a,c,f)}return sf}function af(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){const v=jt(),y=Wc(v,t,n,r,o,i,s,a,u,c,l,f,d,p);if(y!==Hs){const n=kt(),o=dn();Za(n,o,v,e,y,v[11],h,!1),ngDevMode&&Cu(n.data,o,e,zt()-6,t,r,i,a,c,f,p)}return af}function uf(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){const g=jt(),b=zc(g,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v);if(b!==Hs){const n=kt(),o=dn();Za(n,o,g,e,b,g[11],y,!1),ngDevMode&&Cu(n.data,o,e,zt()-7,t,r,i,a,c,f,p,v)}return uf}function cf(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b){const m=jt(),_=qc(m,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g);if(_!==Hs){const n=kt(),o=dn();Za(n,o,m,e,_,m[11],b,!1),ngDevMode&&Cu(n.data,o,e,zt()-8,t,r,i,a,c,f,p,v,g)}return cf}function lf(e,t,n){const r=jt(),o=Lc(r,t);if(o!==Hs){const i=kt(),s=dn();if(Za(i,s,r,e,o,r[11],n,!1),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Cu(i.data,s,e,zt()-n.length+1,...n)}}return lf}function ff(e,t,n,r,o){const i=e[n+1],s=null===t;let a=r?qs(i):Js(i),u=!1;for(;0!==a&&(!1===u||s);){ngDevMode&&k(e,a);const n=e[a],o=e[a+1];df(n,t)&&(u=!0,e[a+1]=r?Ys(o):Gs(o)),a=r?qs(o):Js(o)}u&&(e[n+1]=r?Gs(i):Ys(i))}function df(e,t){return ngDevMode&&x(Array.isArray(t),!0,"Expected that 'tStylingKey' has been unwrapped"),null===e||null==t||(Array.isArray(e)?e[1]:e)===t||!(!Array.isArray(e)||"string"!=typeof t)&&Ir(e,t)>=0}const pf={textEnd:0,key:0,keyEnd:0,value:0,valueEnd:0};function hf(e){return e.substring(pf.key,pf.keyEnd)}function vf(e){return e.substring(pf.value,pf.valueEnd)}function yf(e,t){const n=pf.textEnd;return n===t?-1:(t=pf.keyEnd=function(e,t,n){for(;t<n&&e.charCodeAt(t)>32;)t++;return t}(e,pf.key=t,n),mf(e,t,n))}function gf(e,t){const n=pf.textEnd;let r=pf.key=mf(e,t,n);return n===r?-1:(r=pf.keyEnd=function(e,t,n){let r;for(;t<n&&(45===(r=e.charCodeAt(t))||95===r||(-33&r)>=65&&(-33&r)<=90||r>=48&&r<=57);)t++;return t}(e,r,n),r=_f(e,r,n,58),r=pf.value=mf(e,r,n),r=pf.valueEnd=function(e,t,n){let r=-1,o=-1,i=-1,s=t,a=s;for(;s<n;){const u=e.charCodeAt(s++);if(59===u)return a;34===u||39===u?a=s=wf(e,u,s,n):t===s-4&&85===i&&82===o&&76===r&&40===u?a=s=wf(e,41,s,n):u>32&&(a=s),i=o,o=r,r=-33&u}return a}(e,r,n),_f(e,r,n,59))}function bf(e){pf.key=0,pf.keyEnd=0,pf.value=0,pf.valueEnd=0,pf.textEnd=e.length}function mf(e,t,n){for(;t<n&&e.charCodeAt(t)<=32;)t++;return t}function _f(e,t,n,r){return(t=mf(e,t,n))<n&&(ngDevMode&&e.charCodeAt(t)!==r&&Mf(e,String.fromCharCode(r),t),t++),t}function wf(e,t,n,r){let o=-1,i=n;for(;i<r;){const n=e.charCodeAt(i++);if(n==t&&92!==o)return i;o=92==n&&92===o?0:n}throw ngDevMode?Mf(e,String.fromCharCode(t),r):new Error}function Mf(e,t,n){throw ngDevMode&&C("string"==typeof e,!0,"String expected here"),A(`Malformed style at location ${n} in string '`+e.substring(0,n)+"[>>"+e.substring(n,n+1)+"<<]"+e.substr(n+1)+`'. Expecting '${t}'.`)}function Cf(e,t,n){return If(e,t,n,!1),Cf}function xf(e,t){return If(e,t,null,!0),xf}function Of(e){Pf(Nf,Df,e,!1)}function Df(e,t){for(let n=function(e){return bf(e),gf(e,mf(e,0,pf.textEnd))}(t);n>=0;n=gf(t,n))Nf(e,hf(t),vf(t))}function Sf(e){Pf(Sr,Ef,e,!0)}function Ef(e,t){for(let n=function(e){return bf(e),yf(e,mf(e,0,pf.textEnd))}(t);n>=0;n=yf(t,n))Sr(e,hf(t),!0)}function If(e,t,n,r){const o=jt(),i=kt(),s=Gt(2);i.firstUpdatePass&&Af(i,e,s,r),t!==Hs&&jc(o,s,t)&&Rf(i,i.data[ln()],o,o[11],e,o[s+1]=function(e,t){return null==e||("string"==typeof t?e+=t:"object"==typeof e&&(e=a(Oo(e)))),e}(t,n),r,s)}function Pf(e,t,n,r){const o=kt(),i=Gt(2);o.firstUpdatePass&&Af(o,null,i,r);const s=jt();if(n!==Hs&&jc(s,i,n)){const a=o.data[ln()];if(Vf(a,r)&&!Tf(o,i)){if(ngDevMode){const e=o.data[i];C(Array.isArray(e)?e[1]:e,!1,"Styling linked list shadow input should be marked as 'false'")}let e=r?a.classesWithoutHost:a.stylesWithoutHost;ngDevMode&&!1===r&&null!==e&&C(e.endsWith(";"),!0,"Expecting static portion to end with ';'"),null!==e&&(n=u(e,n||"")),kl(o,a,s,n,r)}else!function(e,t,n,r,o,i,s,a){o===Hs&&(o=ue);let u=0,c=0,l=0<o.length?o[0]:null,f=0<i.length?i[0]:null;for(;null!==l||null!==f;){ngDevMode&&S(u,999,"Are we stuck in infinite loop?"),ngDevMode&&S(c,999,"Are we stuck in infinite loop?");const d=u<o.length?o[u+1]:void 0,p=c<i.length?i[c+1]:void 0;let h,v=null;l===f?(u+=2,c+=2,d!==p&&(v=f,h=p)):null===f||null!==l&&l<f?(u+=2,v=l):(ngDevMode&&T(f,"Expecting to have a valid key"),c+=2,v=f,h=p),null!==v&&Rf(e,t,n,r,v,h,s,a),l=u<o.length?o[u]:null,f=c<i.length?i[c]:null}}(o,a,s,s[11],s[i+1],s[i+1]=function(e,t,n){if(null==n||""===n)return ue;const r=[],o=Oo(n);if(Array.isArray(o))for(let t=0;t<o.length;t++)e(r,o[t],!0);else if("object"==typeof o)for(const t in o)o.hasOwnProperty(t)&&e(r,t,o[t]);else"string"==typeof o?t(r,o):ngDevMode&&A("Unsupported styling type "+typeof o+": "+o);return r}(e,t,n),r,i)}}function Tf(e,t){return t>=e.expandoStartIndex}function Af(e,t,n,r){ngDevMode&&Je(e);const o=e.data;if(null===o[n+1]){const i=o[ln()];ngDevMode&&T(i,"TNode expected");const s=Tf(e,n);Vf(i,r)&&null===t&&!s&&(t=!1),t=function(e,t,n,r){const o=Yt(e);let i=r?t.residualClasses:t.residualStyles;if(null===o)0===(r?t.classBindings:t.styleBindings)&&(n=kf(n=jf(null,e,t,n,r),t.attrs,r),i=null);else{const s=t.directiveStylingLast;if(-1===s||e[s]!==o)if(n=jf(o,e,t,n,r),null===i){let n=function(e,t,n){const r=n?t.classBindings:t.styleBindings;if(0!==Js(r))return e[qs(r)]}(e,t,r);void 0!==n&&Array.isArray(n)&&(n=jf(null,e,t,n[1],r),n=kf(n,t.attrs,r),function(e,t,n,r){const o=n?t.classBindings:t.styleBindings;ngDevMode&&x(Js(o),0,"Expecting to have at least one template styling binding."),e[qs(o)]=r}(e,t,r,n))}else i=function(e,t,n){let r;const o=t.directiveEnd;ngDevMode&&x(t.directiveStylingLast,-1,"By the time this function gets called at least one hostBindings-node styling instruction must have executed.");for(let i=1+t.directiveStylingLast;i<o;i++)r=kf(r,e[i].hostAttrs,n);return kf(r,t.attrs,n)}(e,t,r)}return void 0!==i&&(r?t.residualClasses=i:t.residualStyles=i),n}(o,i,t,r),function(e,t,n,r,o,i){ngDevMode&&Je(kt());let s=i?t.classBindings:t.styleBindings,a=qs(s),u=Js(s);e[r]=n;let c,l=!1;if(Array.isArray(n)){const e=n;c=e[1],(null===c||Ir(e,c)>0)&&(l=!0)}else c=n;if(o)if(0!==u){const t=qs(e[a+1]);e[r+1]=zs(t,a),0!==t&&(e[t+1]=Zs(e[t+1],r)),e[a+1]=(f=e[a+1],d=r,ngDevMode&&_(f,"expected number"),ngDevMode&&w(d,0,32767),131071&f|d<<17)}else e[r+1]=zs(a,0),0!==a&&(e[a+1]=Zs(e[a+1],r)),a=r;else e[r+1]=zs(u,0),ngDevMode&&C(0!==a&&0===u,!1,"Adding template bindings after hostBindings is not allowed."),0===a?a=r:e[u+1]=Zs(e[u+1],r),u=r;var f,d;l&&(e[r+1]=Gs(e[r+1])),ff(e,c,r,!0),ff(e,c,r,!1),function(e,t,n,r,o){const i=o?e.residualClasses:e.residualStyles;null!=i&&"string"==typeof t&&Ir(i,t)>=0&&(n[r+1]=Ys(n[r+1]))}(t,c,e,r,i),s=zs(a,u),i?t.classBindings=s:t.styleBindings=s}(o,i,t,n,s,r)}}function jf(e,t,n,r,o){let i=null;const s=n.directiveEnd;let a=n.directiveStylingLast;for(-1===a?a=n.directiveStart:a++;a<s&&(i=t[a],ngDevMode&&T(i,"expected to be defined"),r=kf(r,i.hostAttrs,o),i!==e);)a++;return null!==e&&(n.directiveStylingLast=a),r}function kf(e,t,n){const r=n?1:2;let o=-1;if(null!==t)for(let i=0;i<t.length;i++){const s=t[i];"number"==typeof s?o=s:o===r&&(Array.isArray(e)||(e=void 0===e?[]:["",e]),Sr(e,s,!!n||t[++i]))}return void 0===e?null:e}function Nf(e,t,n){Sr(e,t,Oo(n))}function Rf(e,t,n,r,o,i,s,a){if(!(3&t.type))return;const u=e.data,c=u[a+1];Lf(Qs(c)?Ff(u,t,n,o,Js(c),s):void 0)||(Lf(i)||Ks(c)&&(i=Ff(u,null,n,o,a,s)),function(e,t,n,r,o){const i=yt(e);if(t)o?(ngDevMode&&ngDevMode.rendererAddClass++,i?e.addClass(n,r):(ngDevMode&&T(n.classList,"HTMLElement expected"),n.classList.add(r))):(ngDevMode&&ngDevMode.rendererRemoveClass++,i?e.removeClass(n,r):n.classList.remove(r));else{let t=-1===r.indexOf("-")?void 0:zi.DashCase;if(null==o)ngDevMode&&ngDevMode.rendererRemoveStyle++,i?e.removeStyle(n,r,t):n.style.removeProperty(r);else{const s="string"==typeof o&&o.endsWith("!important");s&&(o=o.slice(0,-10),t|=zi.Important),ngDevMode&&ngDevMode.rendererSetStyle++,i?e.setStyle(n,r,o,t):(ngDevMode&&T(n.style,"HTMLElement expected"),n.style.setProperty(r,o,s?"important":""))}}}(r,s,mt(ln(),n),o,i))}function Ff(e,t,n,r,o,i){const s=null===t;let a;for(;o>0;){const t=e[o],i=Array.isArray(t),u=i?t[1]:t,c=null===u;let l=n[o+1];l===Hs&&(l=c?ue:void 0);let f=c?Er(l,r):u===r?l:void 0;if(i&&!Lf(f)&&(f=Er(t,r)),Lf(f)&&(a=f,s))return a;const d=e[o+1];o=s?qs(d):Js(d)}if(null!==t){let e=i?t.residualClasses:t.residualStyles;null!=e&&(a=Er(e,r))}return a}function Lf(e){return void 0!==e}function Vf(e,t){return 0!=(e.flags&(t?16:32))}function $f(e,t=""){const n=jt(),r=kt(),o=e+Te;ngDevMode&&C(zt(),r.bindingStartIndex,"text nodes should be created before any bindings"),ngDevMode&&k(n,o);const i=r.firstCreatePass?Na(r,o,1,t,null):r.data[o],s=n[o]=es(n[11],t);ms(r,n,s,i),Vt(i,!1)}function Hf(e){return Uf("",e,""),Hf}function Uf(e,t,n){const r=jt(),o=Vc(r,e,t,n);return o!==Hs&&Pu(r,ln(),o),Uf}function Bf(e,t,n,r,o){const i=jt(),s=$c(i,e,t,n,r,o);return s!==Hs&&Pu(i,ln(),s),Bf}function Wf(e,t,n,r,o,i,s){const a=jt(),u=Hc(a,e,t,n,r,o,i,s);return u!==Hs&&Pu(a,ln(),u),Wf}function zf(e,t,n,r,o,i,s,a,u){const c=jt(),l=Uc(c,e,t,n,r,o,i,s,a,u);return l!==Hs&&Pu(c,ln(),l),zf}function qf(e,t,n,r,o,i,s,a,u,c,l){const f=jt(),d=Bc(f,e,t,n,r,o,i,s,a,u,c,l);return d!==Hs&&Pu(f,ln(),d),qf}function Kf(e,t,n,r,o,i,s,a,u,c,l,f,d){const p=jt(),h=Wc(p,e,t,n,r,o,i,s,a,u,c,l,f,d);return h!==Hs&&Pu(p,ln(),h),Kf}function Gf(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){const v=jt(),y=zc(v,e,t,n,r,o,i,s,a,u,c,l,f,d,p,h);return y!==Hs&&Pu(v,ln(),y),Gf}function Jf(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){const g=jt(),b=qc(g,e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y);return b!==Hs&&Pu(g,ln(),b),Jf}function Zf(e){const t=jt(),n=Lc(t,e);return n!==Hs&&Pu(t,ln(),n),Zf}function Qf(e,t,n){Pf(Sr,Ef,Vc(jt(),e,t,n),!0)}function Yf(e,t,n,r,o){Pf(Sr,Ef,$c(jt(),e,t,n,r,o),!0)}function Xf(e,t,n,r,o,i,s){Pf(Sr,Ef,Hc(jt(),e,t,n,r,o,i,s),!0)}function ed(e,t,n,r,o,i,s,a,u){Pf(Sr,Ef,Uc(jt(),e,t,n,r,o,i,s,a,u),!0)}function td(e,t,n,r,o,i,s,a,u,c,l){Pf(Sr,Ef,Bc(jt(),e,t,n,r,o,i,s,a,u,c,l),!0)}function nd(e,t,n,r,o,i,s,a,u,c,l,f,d){Pf(Sr,Ef,Wc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d),!0)}function rd(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){Pf(Sr,Ef,zc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d,p,h),!0)}function od(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){Pf(Sr,Ef,qc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y),!0)}function id(e){Pf(Sr,Ef,Lc(jt(),e),!0)}function sd(e,t,n){Of(Vc(jt(),e,t,n))}function ad(e,t,n,r,o){Of($c(jt(),e,t,n,r,o))}function ud(e,t,n,r,o,i,s){Of(Hc(jt(),e,t,n,r,o,i,s))}function cd(e,t,n,r,o,i,s,a,u){Of(Uc(jt(),e,t,n,r,o,i,s,a,u))}function ld(e,t,n,r,o,i,s,a,u,c,l){Of(Bc(jt(),e,t,n,r,o,i,s,a,u,c,l))}function fd(e,t,n,r,o,i,s,a,u,c,l,f,d){Of(Wc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d))}function dd(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){Of(zc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d,p,h))}function pd(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){Of(qc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y))}function hd(e){Of(Lc(jt(),e))}function vd(e,t,n,r,o){return If(e,Vc(jt(),t,n,r),o,!1),vd}function yd(e,t,n,r,o,i,s){return If(e,$c(jt(),t,n,r,o,i),s,!1),yd}function gd(e,t,n,r,o,i,s,a,u){return If(e,Hc(jt(),t,n,r,o,i,s,a),u,!1),gd}function bd(e,t,n,r,o,i,s,a,u,c,l){return If(e,Uc(jt(),t,n,r,o,i,s,a,u,c),l,!1),bd}function md(e,t,n,r,o,i,s,a,u,c,l,f,d){return If(e,Bc(jt(),t,n,r,o,i,s,a,u,c,l,f),d,!1),md}function _d(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){return If(e,Wc(jt(),t,n,r,o,i,s,a,u,c,l,f,d,p),h,!1),_d}function wd(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){return If(e,zc(jt(),t,n,r,o,i,s,a,u,c,l,f,d,p,h,v),y,!1),wd}function Md(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b){return If(e,qc(jt(),t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g),b,!1),Md}function Cd(e,t,n){return If(e,Lc(jt(),t),n,!1),Cd}function xd(e,t,n){const r=jt(),o=Kt();if(jc(r,o,t)){const i=kt(),s=dn();Za(i,s,r,e,t,r[11],n,!0),ngDevMode&&Cu(i.data,s,e,o)}return xd}function Od(e,t,n){const r=jt(),o=Kt();if(jc(r,o,t)){const i=kt(),s=dn();Za(i,s,r,e,t,Su(Yt(i.data),s,r),n,!0),ngDevMode&&Cu(i.data,s,e,o)}return Od}"undefined"==typeof ngI18nClosureMode&&(ie.ngI18nClosureMode="undefined"!=typeof goog&&"function"==typeof goog.getMsg);const Dd=void 0;var Sd=["en",[["a","p"],["AM","PM"],Dd],[["AM","PM"],Dd,Dd],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],Dd,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],Dd,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",Dd,"{1} 'at' {0}",Dd],[".",",",";","%","+","-","E","×","‰","∞","NaN",":"],["#,##0.###","#,##0%","¤#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(e){const t=Math.floor(Math.abs(e)),n=e.toString().replace(/^[^.]*\.?/,"").length;return 1===t&&0===n?1:5}];let Ed={};function Id(e,t,n){"string"!=typeof t&&(n=t,t=e[Nd.LocaleId]),t=t.toLowerCase().replace(/_/g,"-"),Ed[t]=e,n&&(Ed[t][Nd.ExtraData]=n)}function Pd(e){const t=function(e){return e.toLowerCase().replace(/_/g,"-")}(e);let n=jd(t);if(n)return n;const r=t.split("-")[0];if(n=jd(r),n)return n;if("en"===r)return Sd;throw new Error(`Missing locale data for the locale "${e}".`)}function Td(e){return Pd(e)[Nd.CurrencyCode]||null}function Ad(e){return Pd(e)[Nd.PluralCase]}function jd(e){return e in Ed||(Ed[e]=ie.ng&&ie.ng.common&&ie.ng.common.locales&&ie.ng.common.locales[e]),Ed[e]}function kd(){Ed={}}var Nd;!function(e){e[e.LocaleId=0]="LocaleId",e[e.DayPeriodsFormat=1]="DayPeriodsFormat",e[e.DayPeriodsStandalone=2]="DayPeriodsStandalone",e[e.DaysFormat=3]="DaysFormat",e[e.DaysStandalone=4]="DaysStandalone",e[e.MonthsFormat=5]="MonthsFormat",e[e.MonthsStandalone=6]="MonthsStandalone",e[e.Eras=7]="Eras",e[e.FirstDayOfWeek=8]="FirstDayOfWeek",e[e.WeekendRange=9]="WeekendRange",e[e.DateFormat=10]="DateFormat",e[e.TimeFormat=11]="TimeFormat",e[e.DateTimeFormat=12]="DateTimeFormat",e[e.NumberSymbols=13]="NumberSymbols",e[e.NumberFormats=14]="NumberFormats",e[e.CurrencyCode=15]="CurrencyCode",e[e.CurrencySymbol=16]="CurrencySymbol",e[e.CurrencyName=17]="CurrencyName",e[e.Currencies=18]="Currencies",e[e.Directionality=19]="Directionality",e[e.PluralCase=20]="PluralCase",e[e.ExtraData=21]="ExtraData"}(Nd||(Nd={}));const Rd=["zero","one","two","few","many"],Fd="en-US",Ld={marker:"element"},Vd={marker:"ICU"};var $d;!function(e){e[e.SHIFT=2]="SHIFT",e[e.APPEND_EAGERLY=1]="APPEND_EAGERLY",e[e.COMMENT=2]="COMMENT"}($d||($d={}));let Hd=Fd;function Ud(e){T(e,"Expected localeId to be defined"),"string"==typeof e&&(Hd=e.toLowerCase().replace(/_/g,"-"))}function Bd(e,t,n){const r=t.insertBeforeIndex,o=Array.isArray(r)?r[0]:r;return null===o?vs(e,0,n):(ngDevMode&&k(n,o),bt(n[o]))}function Wd(e,t,n,r,o){const i=t.insertBeforeIndex;if(Array.isArray(i)){ngDevMode&&j(r);let s=r,a=null;if(3&t.type||(a=s,s=o),null!==s&&0==(2&t.flags))for(let t=1;t<i.length;t++)ls(e,s,n[i[t]],a,!1)}}function zd(e,t){if(ngDevMode&&C(t.insertBeforeIndex,null,"We expect that insertBeforeIndex is not set"),e.push(t),e.length>1)for(let n=e.length-2;n>=0;n--){const r=e[n];qd(r)||Kd(r,t)&&null===Gd(r)&&Jd(r,t.index)}}function qd(e){return!(64&e.type)}function Kd(e,t){return qd(t)||e.index>t.index}function Gd(e){const t=e.insertBeforeIndex;return Array.isArray(t)?t[0]:t}function Jd(e,t){const n=e.insertBeforeIndex;Array.isArray(n)?n[0]=t:(bs(Bd,Wd),e.insertBeforeIndex=t)}function Zd(e,t){const n=e.data[t];if(null===n||"string"==typeof n)return null;!ngDevMode||n.hasOwnProperty("tViews")||n.hasOwnProperty("currentCaseLViewIndex")||A("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: "+n);const r=n.hasOwnProperty("currentCaseLViewIndex")?n:n.value;return ngDevMode&&Ue(r),r}function Qd(e,t,n){const r=Ra(e,n,64,null,null);return zd(t,r),r}function Yd(e,t){const n=t[e.currentCaseLViewIndex];return null===n?n:n<0?~n:n}function Xd(e){return e>>>17}function ep(e){return(131070&e)>>>1}function tp(e){return 1&e}let np=0,rp=0;function op(e,t,n,r){ngDevMode&&j(r);const o=n[11];let i,s=null;for(let a=0;a<t.length;a++){const u=t[a];if("string"==typeof u){const e=t[++a];null===n[e]&&(ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&k(n,e),n[e]=es(o,u))}else if("number"==typeof u)switch(1&u){case 0:const c=Xd(u);let l,f;if(null===s&&(s=c,i=ps(o,r)),c===s?(l=r,f=i):(l=null,f=bt(n[c])),null!==f){ngDevMode&&j(f);const t=ep(u);ngDevMode&&I(t,Te,"Missing ref");const r=n[t];ngDevMode&&j(r),ls(o,f,r,l,!1);const i=Zd(e,t);if(null!==i&&"object"==typeof i){ngDevMode&&Ue(i);const t=Yd(i,n);null!==t&&op(e,i.create[t],n,n[i.anchorIdx])}}break;case 1:const d=u>>>1,h=t[++a],v=t[++a];cu(o,mt(d,n),null,null,h,v,null);break;default:if(ngDevMode)throw new p(700,`Unable to determine the type of mutate operation for "${u}"`)}else switch(u){case Vd:const e=t[++a],r=t[++a];null===n[r]&&(ngDevMode&&C(typeof e,"string",`Expected "${e}" to be a comment node value`),ngDevMode&&ngDevMode.rendererCreateComment++,ngDevMode&&Ze(n,r),wi(n[r]=ns(o,e),n));break;case Ld:const i=t[++a],s=t[++a];null===n[s]&&(ngDevMode&&C(typeof i,"string",`Expected "${i}" to be an element node tag name`),ngDevMode&&ngDevMode.rendererCreateElement++,ngDevMode&&Ze(n,s),wi(n[s]=rs(o,i,null),n));break;default:ngDevMode&&A(`Unable to determine the type of mutate operation for "${u}"`)}}}function ip(e,t,n,r,o){for(let i=0;i<n.length;i++){const s=n[i],a=n[++i];if(s&o){let o="";for(let s=i+1;s<=i+a;s++){const i=n[s];if("string"==typeof i)o+=i;else if("number"==typeof i)if(i<0)o+=v(t[r-i]);else{const a=i>>>2;switch(3&i){case 1:const i=n[++s],u=n[++s],c=e.data[a];ngDevMode&&T(c,"Experting TNode or string"),"string"==typeof c?cu(t[11],t[a],null,c,i,o,u):Za(e,c,t,i,o,t[11],u,!1);break;case 0:const l=t[a];null!==l&&ts(t[11],l,o);break;case 2:ap(e,Zd(e,a),t,o);break;case 3:sp(e,Zd(e,a),r,t)}}}}else{const o=n[i+1];if(o>0&&3==(3&o)){const n=Zd(e,o>>>2);t[n.currentCaseLViewIndex]<0&&sp(e,n,r,t)}}i+=a}}function sp(e,t,n,r){ngDevMode&&k(r,t.currentCaseLViewIndex);let o=r[t.currentCaseLViewIndex];if(null!==o){let i=np;o<0&&(o=r[t.currentCaseLViewIndex]=~o,i=-1),ip(e,r,t.update[o],n,i)}}function ap(e,t,n,r){const o=function(e,t){let n=e.cases.indexOf(t);if(-1===n)switch(e.type){case 1:{const r=function(e,t){const n=Ad(t)(parseInt(e,10)),r=Rd[n];return void 0!==r?r:"other"}(t,Hd);n=e.cases.indexOf(r),-1===n&&"other"!==r&&(n=e.cases.indexOf("other"));break}case 0:n=e.cases.indexOf("other")}return-1===n?null:n}(t,r);if(Yd(t,n)!==o&&(up(e,t,n),n[t.currentCaseLViewIndex]=null===o?null:~o,null!==o)){const r=n[t.anchorIdx];r&&(ngDevMode&&j(r),op(e,t.create[o],n,r))}}function up(e,t,n){let r=Yd(t,n);if(null!==r){const o=t.remove[r];for(let t=0;t<o.length;t++){const r=o[t];if(r>0){const e=mt(r,n);null!==e&&Cs(n[11],e)}else up(e,Zd(e,~r),n)}}}function cp(){const e=[];let t,n,r=-1;function o(e,t){r=0;const o=Yd(e,t);null!==o?(ngDevMode&&w(o,0,e.cases.length-1),n=e.remove[o]):n=ue}function i(){if(r<n.length){const s=n[r++];if(ngDevMode&&_(s,"Expecting OpCode number"),s>0){const e=t[s];return ngDevMode&&j(e),e}{e.push(r,n);const a=~s,u=t[1].data[a];return ngDevMode&&Ue(u),o(u,t),i()}}return 0===e.length?null:(n=e.pop(),r=e.pop(),i())}return function(n,r){for(t=r;e.length;)e.pop();return ngDevMode&&Ve(n,r),o(n.value,r),i}}function lp(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const r=t[e++],o=t[e],i=(r&$d.COMMENT)===$d.COMMENT,s=(r&$d.APPEND_EAGERLY)===$d.APPEND_EAGERLY,a=r>>>$d.SHIFT;n.push(`lView[${a}] = document.${i?"createComment":"createText"}(${JSON.stringify(o)});`),s&&n.push(`parent.appendChild(lView[${a}]);`)}return n}function fp(e){const t=new hp(e||(Array.isArray(this)?this:[]));let n=[];function r(e){const n=e>>>2;switch(3&e){case 0:return`(lView[${n}] as Text).textContent = $$$`;case 1:const e=t.consumeString(),r=t.consumeFunction();return`(lView[${n}] as Element).setAttribute('${e}', ${r?`(${r})($$$)`:"$$$"})`;case 2:return`icuSwitchCase(${n}, $$$)`;case 3:return`icuUpdateCase(${n})`}throw new Error("unexpected OpCode")}for(;t.hasMore();){let e=t.consumeNumber(),o=t.consumeNumber();const i=t.i+o,s=[];let a="";for(;t.i<i;){let e=t.consumeNumberOrString();if("string"==typeof e)a+=e;else if(e<0)a+="${lView[i"+e+"]}";else{const t=r(e);s.push(t.replace("$$$","`"+a+"`")+";"),a=""}}n.push(`if (mask & 0b${e.toString(2)}) { ${s.join(" ")} }`)}return n}function dp(e){const t=new hp(e||(Array.isArray(this)?this:[]));let n=[];function r(e){const n=Xd(e),r=ep(e);switch(tp(e)){case 0:return`(lView[${n}] as Element).appendChild(lView[${o}])`;case 1:return`(lView[${r}] as Element).setAttribute("${t.consumeString()}", "${t.consumeString()}")`}throw new Error("Unexpected OpCode: "+tp(e))}let o=-1;for(;t.hasMore();){let e=t.consumeNumberStringOrMarker();if(e===Vd){const e=t.consumeString();o=t.consumeNumber(),n.push(`lView[${o}] = document.createComment("${e}")`)}else if(e===Ld){const e=t.consumeString();o=t.consumeNumber(),n.push(`lView[${o}] = document.createElement("${e}")`)}else if("string"==typeof e)o=t.consumeNumber(),n.push(`lView[${o}] = document.createTextNode("${e}")`);else{if("number"!=typeof e)throw new Error("Unexpected value");{const t=r(e);t&&n.push(t)}}}return n}function pp(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const r=t[e];r>0?n.push(`remove(lView[${r}])`):n.push(`removeNestedICU(${~r})`)}return n}class hp{constructor(e){this.i=0,this.codes=e}hasMore(){return this.i<this.codes.length}consumeNumber(){let e=this.codes[this.i++];return _(e,"expecting number in OpCode"),e}consumeString(){let e=this.codes[this.i++];return M(e,"expecting string in OpCode"),e}consumeFunction(){let e=this.codes[this.i++];if(null===e||"function"==typeof e)return e;throw new Error("expecting function in OpCode")}consumeNumberOrString(){let e=this.codes[this.i++];return"string"==typeof e||_(e,"expecting number or string in OpCode"),e}consumeNumberStringOrMarker(){let e=this.codes[this.i++];return"string"==typeof e||"number"==typeof e||e==Vd||e==Ld||_(e,"expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode"),e}}const vp=/�(\d+):?\d*�/gi,yp=/({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi,gp=/�(\d+)�/,bp=/^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/,mp=/�\/?\*(\d+:\d+)�/gi,_p=/�(\/?[#*]\d+):?\d*�/gi,wp=/\uE500/g;function Mp(e,t,n,r,o,i,s){const a=Fa(e,r,1,null);let u=a<<$d.SHIFT,c=Lt();t===c&&(c=null),null===c&&(u|=$d.APPEND_EAGERLY),s&&(u|=$d.COMMENT,void 0===qi&&(qi=cp())),o.push(u,null===i?"":i);const l=Ra(e,a,s?32:1,null===i?ngDevMode?"{{?}}":"":i,null);zd(n,l);const f=l.index;return Vt(l,!1),null!==c&&t!==c&&function(e,t){ngDevMode&&He(e);let n=e.insertBeforeIndex;null===n?(bs(Bd,Wd),n=e.insertBeforeIndex=[null,t]):(C(Array.isArray(n),!0,"Expecting array here"),n.push(t))}(c,f),l}function Cp(e,t,n,r,o,i,s){const a=s.match(vp),u=Mp(e,t,n,i,r,a?null:s,!1);a&&xp(o,s,u.index,null,0,null)}function xp(e,t,n,r,o,i){ngDevMode&&P(n,Te,"Index must be in absolute LView offset");const s=e.length,a=s+1;e.push(null,null);const u=s+2;ngDevMode&&ea(e,fp);const c=t.split(vp);let l=0;for(let t=0;t<c.length;t++){const n=c[t];if(1&t){const t=o+parseInt(n,10);e.push(-1-t),l|=Dp(t)}else""!==n&&e.push(n)}return e.push(n<<2|(r?1:0)),r&&e.push(r,i),e[s]=l,e[a]=e.length-u,l}function Op(e){let t=0;for(let n=0;n<e.length;n++){const r=e[n];"number"==typeof r&&r<0&&t++}return t}function Dp(e){return 1<<Math.min(e,31)}function Sp(e){let t,n,r="",o=0,i=!1;for(;null!==(t=mp.exec(e));)i?t[0]===`�/*${n}�`&&(o=t.index,i=!1):(r+=e.substring(o,t.index+t[0].length),n=t[1],i=!0);return ngDevMode&&C(i,!1,`Tag mismatch: unable to find the end of the sub-template in the translation "${e}"`),r+=e.substr(o),r}function Ep(e,t,n,r,o,i){ngDevMode&&T(o,"ICU expression must be defined");let s=0;const a={type:o.type,currentCaseLViewIndex:Fa(e,t,1,null),anchorIdx:i,cases:[],create:[],remove:[],update:[]};!function(e,t,n){e.push(Dp(t.mainBinding),2,-1-t.mainBinding,n<<2|2)}(n,o,i),function(e,t,n){const r=e.data[t];ngDevMode&&C(null===r||r.hasOwnProperty("tViews"),!0,"We expect to get 'null'|'TIcuContainer'"),null===r?e.data[t]=n:(ngDevMode&&On(r,32),r.value=n)}(e,i,a);const u=o.values;for(let i=0;i<u.length;i++){const c=u[i],l=[];for(let e=0;e<c.length;e++){const t=c[e];if("string"!=typeof t){const n=l.push(t)-1;c[e]=`\x3c!--�${n}�--\x3e`}}s=Tp(e,a,t,n,r,o.cases[i],c.join(""),l)|s}s&&function(e,t,n){e.push(t,1,n<<2|3)}(n,s,i)}function Ip(e){const t=[],n=[];let r=1,o=0;const i=Pp(e=e.replace(bp,(function(e,t,n){return r="select"===n?0:1,o=parseInt(t.substr(1),10),""})));for(let e=0;e<i.length;){let o=i[e++].trim();1===r&&(o=o.replace(/\s*(?:=)?(\w+)\s*/,"$1")),o.length&&t.push(o);const s=Pp(i[e++]);t.length>n.length&&n.push(s)}return{type:r,mainBinding:o,cases:t,values:n}}function Pp(e){if(!e)return[];let t=0;const n=[],r=[],o=/[{}]/g;let i;for(o.lastIndex=0;i=o.exec(e);){const o=i.index;if("}"==i[0]){if(n.pop(),0==n.length){const n=e.substring(t,o);bp.test(n)?r.push(Ip(n)):r.push(n),t=o+1}}else{if(0==n.length){const n=e.substring(t,o);r.push(n),t=o+1}n.push("{")}}const s=e.substring(t);return r.push(s),r}function Tp(e,t,n,r,o,i,s,a){const u=[],c=[],l=[];ngDevMode&&(ea(u,dp),ea(c,pp),ea(l,fp)),t.cases.push(i),t.create.push(u),t.remove.push(c),t.update.push(l);const f=jo(ht()).getInertBodyElement(s);ngDevMode&&T(f,"Unable to generate inert body element");const d=ai(f)||f;return d?Ap(e,t,n,r,u,c,l,d,o,a,0):0}function Ap(e,t,n,r,o,i,s,a,u,c,l){let f=0,d=a.firstChild;for(;d;){const a=Fa(e,n,1,null);switch(d.nodeType){case Node.ELEMENT_NODE:const p=d,h=p.tagName.toLowerCase();if(Go.hasOwnProperty(h)){Np(o,Ld,h,u,a),e.data[a]=h;const v=p.attributes;for(let e=0;e<v.length;e++){const t=v.item(e),n=t.name.toLowerCase();t.value.match(vp)?Xo.hasOwnProperty(n)?Jo[n]?xp(s,t.value,a,t.name,0,Lo):Zo[n]?xp(s,t.value,a,t.name,0,Vo):xp(s,t.value,a,t.name,0,null):ngDevMode&&console.warn(`WARNING: ignoring unsafe attribute value ${n} on element ${h} (see https://g.co/ng/security#xss)`):Rp(o,a,t)}f=Ap(e,t,n,r,o,i,s,d,a,c,l+1)|f,jp(i,a,l)}break;case Node.TEXT_NODE:const v=d.textContent||"",y=v.match(vp);Np(o,null,y?"":v,u,a),jp(i,a,l),y&&(f=xp(s,v,a,null,0,null)|f);break;case Node.COMMENT_NODE:const g=gp.exec(d.textContent||"");if(g){const t=parseInt(g[1],10),s=c[t];Np(o,Vd,ngDevMode?`nested ICU ${t}`:"",u,a),Ep(e,n,r,u,s,a),kp(i,a,l)}}d=d.nextSibling}return f}function jp(e,t,n){0===n&&e.push(t)}function kp(e,t,n){0===n&&(e.push(~t),e.push(t))}function Np(e,t,n,r,o){var i,s;null!==t&&e.push(t),e.push(n,o,(0,i=r,s=o,ngDevMode&&P(i,0,"Missing parent index"),ngDevMode&&I(s,0,"Missing ref index"),0|i<<17|s<<1))}function Rp(e,t,n){e.push(t<<1|1,n.name,n.value)}const Fp=/\[(�.+?�?)\]/,Lp=/\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g,Vp=/({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g,$p=/{([A-Z0-9_]+)}/g,Hp=/�I18N_EXP_(ICU(_\d+)?)�/g,Up=/\/\*/,Bp=/\d+\:(\d+)/;function Wp(e,t,n=-1){const r=kt(),o=jt(),i=Te+e;ngDevMode&&T(r,"tView should be defined");const s=Dt(r.consts,t),a=Lt();r.firstCreatePass&&function(e,t,n,r,o,i){const s=Lt(),a=[],u=[],c=[[]];ngDevMode&&(ea(a,lp),ea(u,fp)),o=function(e,t){if(function(e){return-1===e}(t))return Sp(e);{const n=e.indexOf(`:${t}�`)+2+t.toString().length,r=e.search(new RegExp(`�\\/\\*\\d+:${t}�`));return Sp(e.substring(n,r))}}(o,i);const l=(f=o,f.replace(wp," ")).split(_p);var f;for(let i=0;i<l.length;i++){let f=l[i];if(0==(1&i)){const i=Pp(f);for(let l=0;l<i.length;l++){let f=i[l];if(0==(1&l)){const t=f;ngDevMode&&M(t,"Parsed ICU part should be string"),""!==t&&Cp(e,s,c[0],a,u,n,t)}else{const i=f;if("object"!=typeof i)throw new Error(`Unable to parse ICU expression in "${o}" message.`);const l=Mp(e,s,c[0],n,a,ngDevMode?`ICU ${r}:${i.mainBinding}`:"",!0).index;ngDevMode&&P(l,Te,"Index must be in absolute LView offset"),Ep(e,n,u,t,i,l)}}}else{const t=47===f.charCodeAt(0),n=f.charCodeAt(t?1:0);ngDevMode&&N(n,42,35);const r=Te+Number.parseInt(f.substring(t?2:1));if(t)c.shift(),Vt(Lt(),!1);else{const t=Qd(e,c[0],r);c.unshift([]),Vt(t,!0)}}}e.data[r]={create:a,update:u}}(r,null===a?0:a.index,o,i,s,n);const u=r.data[i],c=cs(r,a===o[6]?null:a,o),l=a&&8&a.type?o[a.index]:null;!function(e,t,n,r){const o=e[11];for(let i=0;i<t.length;i++){const s=t[i++],a=t[i],u=(s&$d.COMMENT)===$d.COMMENT,c=(s&$d.APPEND_EAGERLY)===$d.APPEND_EAGERLY,l=s>>>$d.SHIFT;let f=e[l];null===f&&(f=e[l]=u?o.createComment(a):es(o,a)),c&&null!==n&&ls(o,n,f,r,!1)}}(o,u.create,c,l),Jt(!0)}function zp(){Jt(!1)}function qp(e,t,n){Wp(e,t,n),zp()}function Kp(e,t){const n=kt();ngDevMode&&T(n,"tView should be defined");const r=Dt(n.consts,t);!function(e,t,n){const r=Rt().index,o=[];if(ngDevMode&&ea(o,fp),e.firstCreatePass&&null===e.data[t]){for(let e=0;e<n.length;e+=2){const t=n[e],i=n[e+1];if(""!==i){if(yp.test(i))throw new Error(`ICU expressions are not supported in attributes. Message: "${i}".`);xp(o,i,r,t,Op(o),null)}}e.data[t]=o}}(n,e+Te,r)}function Gp(e){return jc(jt(),Kt(),e)&&(np|=1<<Math.min(rp,31)),rp++,Gp}function Jp(e){!function(e,t,n){if(rp>0){ngDevMode&&T(e,"tView should be defined");const r=e.data[n];ip(e,t,Array.isArray(r)?r:r.update,zt()-rp-1,np)}np=0,rp=0}(kt(),jt(),e+Te)}function Zp(e,t={}){return function(e,t={}){let n=e;if(Fp.test(e)){const e={},t=[0];n=n.replace(Lp,((n,r,o)=>{const i=r||o,s=e[i]||[];if(s.length||(i.split("|").forEach((e=>{const t=e.match(Bp),n=t?parseInt(t[1],10):0,r=Up.test(e);s.push([n,r,e])})),e[i]=s),!s.length)throw new Error(`i18n postprocess: unmatched placeholder - ${i}`);const a=t[t.length-1];let u=0;for(let e=0;e<s.length;e++)if(s[e][0]===a){u=e;break}const[c,l,f]=s[u];return l?t.pop():a!==c&&t.push(c),s.splice(u,1),f}))}return Object.keys(t).length?(n=n.replace(Vp,((e,n,r,o,i,s)=>t.hasOwnProperty(r)?`${n}${t[r]}${s}`:e)),n=n.replace($p,((e,n)=>t.hasOwnProperty(n)?t[n]:e)),n=n.replace(Hp,((e,n)=>{if(t.hasOwnProperty(n)){const r=t[n];if(!r.length)throw new Error(`i18n postprocess: unmatched ICU - ${e} with key: ${n}`);return r.shift()}return e})),n):n}(e,t)}function Qp(e,t,n,r,o){if(e=f(e),Array.isArray(e))for(let i=0;i<e.length;i++)Qp(e[i],t,n,r,o);else{const i=kt(),s=jt();let a=Gu(e)?e:f(e.provide),u=zu(e);const c=Rt(),l=1048575&c.providerIndexes,d=c.directiveStart,p=c.providerIndexes>>20;if(Gu(e)||!e.multi){const r=new Cn(u,o,Tl),f=eh(a,t,o?l:l+p,d);-1===f?(Hn(Fn(c,s),i,a),Yp(i,e,t.length),t.push(a),c.directiveStart++,c.directiveEnd++,o&&(c.providerIndexes+=1048576),n.push(r),s.push(r)):(n[f]=r,s[f]=r)}else{const f=eh(a,t,l+p,d),h=eh(a,t,l,l+p),v=f>=0&&n[f],y=h>=0&&n[h];if(o&&!y||!o&&!v){Hn(Fn(c,s),i,a);const l=function(e,t,n,r,o){const i=new Cn(e,n,Tl);return i.multi=[],i.index=t,i.componentProviders=0,Xp(i,o,r&&!n),i}(o?nh:th,n.length,o,r,u);!o&&y&&(n[h].providerFactory=l),Yp(i,e,t.length,0),t.push(a),c.directiveStart++,c.directiveEnd++,o&&(c.providerIndexes+=1048576),n.push(l),s.push(l)}else Yp(i,e,f>-1?f:h,Xp(n[o?h:f],u,!o&&r));!o&&r&&y&&n[h].componentProviders++}}}function Yp(e,t,n,r){const o=Gu(t),i=!!t.useClass;if(o||i){const s=(i?f(t.useClass):t).prototype.ngOnDestroy;if(s){const i=e.destroyHooks||(e.destroyHooks=[]);if(!o&&t.multi){ngDevMode&&T(r,"indexInFactory when registering multi factory destroy hook");const e=i.indexOf(n);-1===e?i.push(n,[r,s]):i[e+1].push(r,s)}else i.push(n,s)}}}function Xp(e,t,n){return n&&e.componentProviders++,e.multi.push(t)-1}function eh(e,t,n,r){for(let o=n;o<r;o++)if(t[o]===e)return o;return-1}function th(e,t,n,r){return rh(this.multi,[])}function nh(e,t,n,r){const o=this.multi;let i;if(this.providerFactory){const e=this.providerFactory.componentProviders,t=Jn(n,n[1],this.providerFactory.index,r);i=t.slice(0,e),rh(o,i);for(let n=e;n<t.length;n++)i.push(t[n])}else i=[],rh(o,i);return i}function rh(e,t){for(let n=0;n<e.length;n++){const r=e[n];t.push(r())}return t}function oh(e,t=[]){return n=>{n.providersResolver=(n,r)=>function(e,t,n){const r=kt();if(r.firstCreatePass){const o=Le(e);Qp(n,r.data,r.blueprint,o,!0),Qp(t,r.data,r.blueprint,o,!1)}}(n,r?r(e):e,t)}}class ih{}class sh{}class ah{resolveComponentFactory(e){throw function(e){const t=Error(`No component factory found for ${a(e)}. Did you add it to @NgModule.entryComponents?`);return t.ngComponent=e,t}(e)}}class uh{}function ch(e,t){return new lh(_t(e,t))}uh.NULL=new ah;class lh{constructor(e){this.nativeElement=e}}function fh(e){return e instanceof lh?e.nativeElement:e}lh.__NG_ELEMENT_ID__=function(){return ch(Rt(),jt())},new lr("Renderer2Interceptor");class dh{}class ph{}ph.__NG_ELEMENT_ID__=()=>function(){const e=jt(),t=Ct(Rt().index,e);return function(e){const t=e[11];if(ngDevMode&&!yt(t))throw new Error("Cannot inject Renderer2 when the application uses Renderer3!");return t}(je(t)?t:e)}();class hh{}hh.ɵprov=R({token:hh,providedIn:"root",factory:()=>null});class vh{constructor(e){this.full=e,this.major=e.split(".")[0],this.minor=e.split(".")[1],this.patch=e.split(".").slice(2).join(".")}}const yh=new vh("13.2.6"),gh={};function bh(e,t,n,r,o=!1){for(;null!==n;){ngDevMode&&On(n,63);const i=t[n.index];if(null!==i&&r.push(bt(i)),ke(i))for(let e=Pe;e<i.length;e++){const t=i[e],n=t[1].firstChild;null!==n&&bh(t[1],t,n,r)}const s=n.type;if(8&s)bh(e,t,n.child,r);else if(32&s){const e=Ki(n,t);let o;for(;o=e();)r.push(o)}else if(16&s){const e=ws(t,n);if(Array.isArray(e))r.push(...e);else{const n=Gi(t[16]);ngDevMode&&Ye(n),bh(n[1],n,e,r,!0)}}n=o?n.projectionNext:n.next}return r}class mh{constructor(e,t){this._lView=e,this._cdRefInjectingView=t,this._appRef=null,this._attachedToViewContainer=!1}get rootNodes(){const e=this._lView,t=e[1];return bh(t,e,t.firstChild,[])}get context(){return this._lView[8]}set context(e){this._lView[8]=e}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._attachedToViewContainer){const e=this._lView[3];if(ke(e)){const t=e[8],n=t?t.indexOf(this):-1;n>-1&&(ngDevMode&&C(n,e.indexOf(this._lView)-Pe,"An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array."),is(e,n),Or(t,n))}this._attachedToViewContainer=!1}ss(this._lView[1],this._lView)}onDestroy(e){Ga(this._lView[1],this._lView,null,e)}markForCheck(){bu(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){_u(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(e,t,n){Bt(!0);try{_u(e,t,n)}finally{Bt(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(){if(this._appRef){const e=ngDevMode?"This view is already attached directly to the ApplicationRef!":"";throw new p(902,e)}this._attachedToViewContainer=!0}detachFromAppRef(){var e;this._appRef=null,Os(this._lView[1],e=this._lView,e[11],2,null,null)}attachToAppRef(e){if(this._attachedToViewContainer){const e=ngDevMode?"This view is already attached to a ViewContainer!":"";throw new p(902,e)}this._appRef=e}}class _h extends mh{constructor(e){super(e),this._view=e}detectChanges(){wu(this._view)}checkNoChanges(){!function(e){Bt(!0);try{wu(e)}finally{Bt(!1)}}(this._view)}get context(){return null}}class wh extends uh{constructor(e){super(),this.ngModule=e}resolveComponentFactory(e){ngDevMode&&Be(e);const t=De(e);return new Ch(t,this.ngModule)}}function Mh(e){const t=[];for(let n in e)if(e.hasOwnProperty(n)){const r=e[n];t.push({propName:r,templateName:n})}return t}class Ch extends sh{constructor(e,t){super(),this.componentDef=e,this.ngModule=t,this.componentType=e.type,this.selector=e.selectors.map($s).join(","),this.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],this.isBoundToModule=!!t}get inputs(){return Mh(this.componentDef.inputs)}get outputs(){return Mh(this.componentDef.outputs)}create(e,t,n,r){const o=(r=r||this.ngModule)?function(e,t){return{get:(n,r,o)=>{const i=e.get(n,gh,o);return i!==gh||r===gh?i:t.get(n,r,o)}}}(e,r.injector):e,i=o.get(dh,gt),s=o.get(hh,null),a=i.createRenderer(null,this.componentDef),u=this.componentDef.selectors[0][0]||"div",c=n?Ka(a,n,this.componentDef.encapsulation):rs(i.createRenderer(null,this.componentDef),u,function(e){const t=e.toLowerCase();return"svg"===t?lt:"math"===t?ft:null}(u)),l=this.componentDef.onPush?576:528,f=hc(),d=qa(0,null,null,1,0,null,null,null,null,null),p=ka(null,d,f,l,null,null,i,a,s,o);let h,v;rn(p);try{const e=dc(c,this.componentDef,p,i,a);if(c)if(n)Dn(a,c,["ng-version",yh.full]);else{const{attrs:e,classes:t}=function(e){const t=[],n=[];let r=1,o=2;for(;r<e.length;){let i=e[r];if("string"==typeof i)2===o?""!==i&&t.push(i,e[++r]):8===o&&n.push(i);else{if(!Ns(o))break;o=i}r++}return{attrs:t,classes:n}}(this.componentDef.selectors[0]);e&&Dn(a,c,e),t&&t.length>0&&Es(a,c,t.join(" "))}if(v=wt(d,Te),void 0!==t){const e=v.projection=[];for(let n=0;n<this.ngContentSelectors.length;n++){const r=t[n];e.push(null!=r?Array.from(r):null)}}h=pc(e,this.componentDef,p,f,[vc]),La(d,p,null)}finally{cn()}return new xh(this.componentType,h,ch(v,p),p,v)}}new wh;class xh extends ih{constructor(e,t,n,r,o){super(),this.location=n,this._rootLView=r,this._tNode=o,this.instance=t,this.hostView=this.changeDetectorRef=new _h(r),this.componentType=e}get injector(){return new Yn(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(e){this.hostView.onDestroy(e)}}function Oh(e,t,n,r){return Z((()=>{const o=e;null!==t&&(o.hasOwnProperty("decorators")&&void 0!==o.decorators?o.decorators.push(...t):o.decorators=t),null!==n&&(o.ctorParameters=n),null!==r&&(o.hasOwnProperty("propDecorators")&&void 0!==o.propDecorators?o.propDecorators=Object.assign(Object.assign({},o.propDecorators),r):o.propDecorators=r)}))}class Dh{}class Sh{}const Eh=new Map;function Ih(e){const t=new Set;!function e(n){const r=Ie(n,!0),o=r.id;if(null!==o){(function(e,t,n){if(t&&t!==n)throw new Error(`Duplicate module registered for ${e} - ${a(t)} vs ${a(t.name)}`)})(o,Eh.get(o),n),Eh.set(o,n)}const i=Ui(r.imports);for(const n of i)t.has(n)||(t.add(n),e(n))}(e)}function Ph(e){return Eh.get(e)||_e[e]}function Th(e,t){return new Ah(e,null!=t?t:null)}class Ah extends Dh{constructor(e,t){super(),this._parent=t,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new wh(this);const n=Ie(e);ngDevMode&&T(n,`NgModule '${a(e)}' is not a subtype of 'NgModuleType'.`),this._bootstrapComponents=Ui(n.bootstrap),this._r3Injector=Uu(e,t,[{provide:Dh,useValue:this},{provide:uh,useValue:this.componentFactoryResolver}],a(e)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(e)}get(e,t=Ju.THROW_IF_NOT_FOUND,n=q.Default){return e===Ju||e===Dh||e===ku?this:this._r3Injector.get(e,t,n)}destroy(){ngDevMode&&T(this.destroyCbs,"NgModule already destroyed");const e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach((e=>e())),this.destroyCbs=null}onDestroy(e){ngDevMode&&T(this.destroyCbs,"NgModule already destroyed"),this.destroyCbs.push(e)}}class jh extends Sh{constructor(e){super(),this.moduleType=e,null!==Ie(e)&&Ih(e)}create(e){return new Ah(this.moduleType,e)}}function kh(e,t,n){const r=Wt()+e,o=jt();return o[r]===Hs?Tc(o,r,n?t.call(n):t()):Ac(o,r)}function Nh(e,t,n,r){return zh(jt(),Wt(),e,t,n,r)}function Rh(e,t,n,r,o){return qh(jt(),Wt(),e,t,n,r,o)}function Fh(e,t,n,r,o,i){return Kh(jt(),Wt(),e,t,n,r,o,i)}function Lh(e,t,n,r,o,i,s){return Gh(jt(),Wt(),e,t,n,r,o,i,s)}function Vh(e,t,n,r,o,i,s,a){const u=Wt()+e,c=jt(),l=Rc(c,u,n,r,o,i);return jc(c,u+4,s)||l?Tc(c,u+5,a?t.call(a,n,r,o,i,s):t(n,r,o,i,s)):Ac(c,u+5)}function $h(e,t,n,r,o,i,s,a,u){const c=Wt()+e,l=jt(),f=Rc(l,c,n,r,o,i);return kc(l,c+4,s,a)||f?Tc(l,c+6,u?t.call(u,n,r,o,i,s,a):t(n,r,o,i,s,a)):Ac(l,c+6)}function Hh(e,t,n,r,o,i,s,a,u,c){const l=Wt()+e,f=jt();let d=Rc(f,l,n,r,o,i);return Nc(f,l+4,s,a,u)||d?Tc(f,l+7,c?t.call(c,n,r,o,i,s,a,u):t(n,r,o,i,s,a,u)):Ac(f,l+7)}function Uh(e,t,n,r,o,i,s,a,u,c,l){const f=Wt()+e,d=jt(),p=Rc(d,f,n,r,o,i);return Rc(d,f+4,s,a,u,c)||p?Tc(d,f+8,l?t.call(l,n,r,o,i,s,a,u,c):t(n,r,o,i,s,a,u,c)):Ac(d,f+8)}function Bh(e,t,n,r){return Jh(jt(),Wt(),e,t,n,r)}function Wh(e,t){ngDevMode&&k(e,t);const n=e[t];return n===Hs?void 0:n}function zh(e,t,n,r,o,i){const s=t+n;return jc(e,s,o)?Tc(e,s+1,i?r.call(i,o):r(o)):Wh(e,s+1)}function qh(e,t,n,r,o,i,s){const a=t+n;return kc(e,a,o,i)?Tc(e,a+2,s?r.call(s,o,i):r(o,i)):Wh(e,a+2)}function Kh(e,t,n,r,o,i,s,a){const u=t+n;return Nc(e,u,o,i,s)?Tc(e,u+3,a?r.call(a,o,i,s):r(o,i,s)):Wh(e,u+3)}function Gh(e,t,n,r,o,i,s,a,u){const c=t+n;return Rc(e,c,o,i,s,a)?Tc(e,c+4,u?r.call(u,o,i,s,a):r(o,i,s,a)):Wh(e,c+4)}function Jh(e,t,n,r,o,i){let s=t+n,a=!1;for(let t=0;t<o.length;t++)jc(e,s++,o[t])&&(a=!0);return a?Tc(e,s,r.apply(i,o)):Wh(e,s)}function Zh(e,t){const n=kt();let r;const o=e+Te;n.firstCreatePass?(r=function(e,t){if(t)for(let n=t.length-1;n>=0;n--){const r=t[n];if(e===r.name)return r}if(ngDevMode){const t=jt()[16][8],n=t?` in the '${t.constructor.name}' component`:"";throw new p(-302,`The pipe '${e}' could not be found${n}!`)}}(t,n.pipeRegistry),n.data[o]=r,r.onDestroy&&(n.destroyHooks||(n.destroyHooks=[])).push(o,r.onDestroy)):r=n.data[o];const i=r.factory||(r.factory=et(r.type,!0)),s=G(Tl);try{const e=Nn(!1),t=i();return Nn(e),rl(n,jt(),o,t),t}finally{G(s)}}function Qh(e,t,n){const r=e+Te,o=jt(),i=Mt(o,r);return nv(o,r)?zh(o,Wt(),t,i.transform,n,i):i.transform(n)}function Yh(e,t,n,r){const o=e+Te,i=jt(),s=Mt(i,o);return nv(i,o)?qh(i,Wt(),t,s.transform,n,r,s):s.transform(n,r)}function Xh(e,t,n,r,o){const i=e+Te,s=jt(),a=Mt(s,i);return nv(s,i)?Kh(s,Wt(),t,a.transform,n,r,o,a):a.transform(n,r,o)}function ev(e,t,n,r,o,i){const s=e+Te,a=jt(),u=Mt(a,s);return nv(a,s)?Gh(a,Wt(),t,u.transform,n,r,o,i,u):u.transform(n,r,o,i)}function tv(e,t,n){const r=e+Te,o=jt(),i=Mt(o,r);return nv(o,r)?Jh(o,Wt(),t,i.transform,n,i):i.transform.apply(i,n)}function nv(e,t){return e[1].data[t].pure}class rv extends r.Subject{constructor(e=!1){super(),this.__isAsync=e}emit(e){super.next(e)}subscribe(e,t,n){var o,i,s;let a=e,u=t||(()=>null),c=n;if(e&&"object"==typeof e){const t=e;a=null===(o=t.next)||void 0===o?void 0:o.bind(t),u=null===(i=t.error)||void 0===i?void 0:i.bind(t),c=null===(s=t.complete)||void 0===s?void 0:s.bind(t)}this.__isAsync&&(u=ov(u),a&&(a=ov(a)),c&&(c=ov(c)));const l=super.subscribe({next:a,error:u,complete:c});return e instanceof r.Subscription&&e.add(l),l}}function ov(e){return t=>{setTimeout(e,void 0,t)}}const iv=rv;function sv(){return this._results[Sc()]()}class av{constructor(e=!1){this._emitDistinctChangesOnly=e,this.dirty=!0,this._results=[],this._changesDetected=!1,this._changes=null,this.length=0,this.first=void 0,this.last=void 0;const t=Sc(),n=av.prototype;n[t]||(n[t]=sv)}get changes(){return this._changes||(this._changes=new iv)}get(e){return this._results[e]}map(e){return this._results.map(e)}filter(e){return this._results.filter(e)}find(e){return this._results.find(e)}reduce(e,t){return this._results.reduce(e,t)}forEach(e){this._results.forEach(e)}some(e){return this._results.some(e)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(e,t){const n=this;n.dirty=!1;const r=Mr(e);(this._changesDetected=!function(e,t,n){if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++){let o=e[r],i=t[r];if(n&&(o=n(o),i=n(i)),i!==o)return!1}return!0}(n._results,r,t))&&(n._results=r,n.length=r.length,n.last=r[this.length-1],n.first=r[0])}notifyOnChanges(){!this._changes||!this._changesDetected&&this._emitDistinctChangesOnly||this._changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}Symbol.iterator;class uv{}uv.__NG_ELEMENT_ID__=function(){return fv(Rt(),jt())};const cv=uv,lv=class extends cv{constructor(e,t,n){super(),this._declarationLView=e,this._declarationTContainer=t,this.elementRef=n}createEmbeddedView(e){const t=this._declarationTContainer.tViews,n=ka(this._declarationLView,t,e,16,null,t.declTNode,null,null,null,null),r=this._declarationLView[this._declarationTContainer.index];ngDevMode&&ze(r),n[17]=r;const o=this._declarationLView[19];return null!==o&&(n[19]=o.createEmbeddedView(t)),La(t,n,e),new mh(n)}};function fv(e,t){return 4&e.type?(ngDevMode&&T(e.tViews,"TView must be allocated"),new lv(t,e,ch(e,t))):null}class dv{}dv.__NG_ELEMENT_ID__=function(){return gv(Rt(),jt())};const pv=dv,hv=class extends pv{constructor(e,t,n){super(),this._lContainer=e,this._hostTNode=t,this._hostLView=n}get element(){return ch(this._hostTNode,this._hostLView)}get injector(){return new Yn(this._hostTNode,this._hostLView)}get parentInjector(){const e=$n(this._hostTNode,this._hostLView);if(Tn(e)){const t=jn(e,this._hostLView),n=An(e);ngDevMode&&Xe(t,n);const r=t[1].data[n+8];return new Yn(r,t)}return new Yn(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(e){const t=vv(this._lContainer);return null!==t&&t[e]||null}get length(){return this._lContainer.length-Pe}createEmbeddedView(e,t,n){const r=e.createEmbeddedView(t||{});return this.insert(r,n),r}createComponent(e,t,n,r,o){const i=e&&!wr(e);let s;if(i)ngDevMode&&C("object"!=typeof t,!0,"It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)"),s=t;else{ngDevMode&&(T(De(e),"Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator."),C("number"!=typeof t,!0,"It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead."));const i=t||{};s=i.index,n=i.injector,r=i.projectableNodes,o=i.ngModuleRef}const a=i?e:new Ch(De(e)),u=n||this.parentInjector;if(!o&&null==a.ngModule){const e=(i?u:this.parentInjector).get(Dh,null);e&&(o=e)}const c=a.create(u,r,void 0,o);return this.insert(c.hostView,s),c}insert(e,t){const n=e._lView,r=n[1];if(ngDevMode&&e.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(ke(n[3])){const t=this.indexOf(e);if(-1!==t)this.detach(t);else{const t=n[3];ngDevMode&&C(ke(t),!0,"An attached view should have its PARENT point to a container.");const r=new hv(t,t[6],t[3]);r.detach(r.indexOf(e))}}const o=this._adjustIndex(t),i=this._lContainer;!function(e,t,n,r){ngDevMode&&Ke(t),ngDevMode&&ze(n);const o=Pe+r,i=n.length;r>0&&(n[o-1][4]=t),r<i-Pe?(t[4]=n[o],xr(n,Pe+r,t)):(n.push(t),t[4]=null),t[3]=n;const s=t[17];null!==s&&n!==s&&function(e,t){ngDevMode&&T(t,"LView required"),ngDevMode&&ze(e);const n=e[9],r=t[3];ngDevMode&&ze(r);const o=r[3][16];ngDevMode&&T(o,"Missing insertedComponentLView");const i=t[16];ngDevMode&&T(i,"Missing declaredComponentLView"),i!==o&&(e[2]=!0),null===n?e[9]=[t]:n.push(t)}(s,t);const a=t[19];null!==a&&a.insertView(e),t[2]|=128}(r,n,i,o);const s=Ms(o,i),a=n[11],u=ps(a,i[7]);return null!==u&&function(e,t,n,r,o,i){r[0]=o,r[6]=t,Os(e,r,n,1,o,i)}(r,i[6],a,n,u,s),e.attachToViewContainerRef(),xr(yv(i),o,e),e}move(e,t){if(ngDevMode&&e.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(e,t)}indexOf(e){const t=vv(this._lContainer);return null!==t?t.indexOf(e):-1}remove(e){const t=this._adjustIndex(e,-1),n=is(this._lContainer,t);n&&(Or(yv(this._lContainer),t),ss(n[1],n))}detach(e){const t=this._adjustIndex(e,-1),n=is(this._lContainer,t);return n&&null!=Or(yv(this._lContainer),t)?new mh(n):null}_adjustIndex(e,t=0){return null==e?this.length+t:(ngDevMode&&(I(e,-1,`ViewRef index must be positive, got ${e}`),S(e,this.length+1+t,"index")),e)}};function vv(e){return e[8]}function yv(e){return e[8]||(e[8]=[])}function gv(e,t){let n;ngDevMode&&On(e,15);const r=t[e.index];if(ke(r))n=r;else{let o;if(8&e.type)o=bt(r);else{const n=t[11];ngDevMode&&ngDevMode.rendererCreateComment++,o=n.createComment(ngDevMode?"container":"");const r=_t(e,t);ls(n,ps(n,r),o,function(e,t){return yt(e)?e.nextSibling(t):t.nextSibling}(n,r),!1)}t[e.index]=n=pu(r,t,o,e),gu(t,n)}return new hv(n,e,t)}class bv{constructor(e){this.queryList=e,this.matches=null}clone(){return new bv(this.queryList)}setDirty(){this.queryList.setDirty()}}class mv{constructor(e=[]){this.queries=e}createEmbeddedView(e){const t=e.queries;if(null!==t){const n=null!==e.contentQueries?e.contentQueries[0]:t.length,r=[];for(let e=0;e<n;e++){const n=t.getByIndex(e),o=this.queries[n.indexInDeclarationView];r.push(o.clone())}return new mv(r)}return null}insertView(e){this.dirtyQueriesWithMatches(e)}detachView(e){this.dirtyQueriesWithMatches(e)}dirtyQueriesWithMatches(e){for(let t=0;t<this.queries.length;t++)null!==jv(e,t).matches&&this.queries[t].setDirty()}}class _v{constructor(e,t,n=null){this.predicate=e,this.flags=t,this.read=n}}class wv{constructor(e=[]){this.queries=e}elementStart(e,t){ngDevMode&&Ge(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].elementStart(e,t)}elementEnd(e){for(let t=0;t<this.queries.length;t++)this.queries[t].elementEnd(e)}embeddedTView(e){let t=null;for(let n=0;n<this.length;n++){const r=null!==t?t.length:0,o=this.getByIndex(n).embeddedTView(e,r);o&&(o.indexInDeclarationView=n,null!==t?t.push(o):t=[o])}return null!==t?new wv(t):null}template(e,t){ngDevMode&&Ge(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].template(e,t)}getByIndex(e){return ngDevMode&&k(this.queries,e),this.queries[e]}get length(){return this.queries.length}track(e){this.queries.push(e)}}class Mv{constructor(e,t=-1){this.metadata=e,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=t}elementStart(e,t){this.isApplyingToNode(t)&&this.matchTNode(e,t)}elementEnd(e){this._declarationNodeIndex===e.index&&(this._appliesToNextNode=!1)}template(e,t){this.elementStart(e,t)}embeddedTView(e,t){return this.isApplyingToNode(e)?(this.crossesNgTemplate=!0,this.addMatch(-e.index,t),new Mv(this.metadata)):null}isApplyingToNode(e){if(this._appliesToNextNode&&1!=(1&this.metadata.flags)){const t=this._declarationNodeIndex;let n=e.parent;for(;null!==n&&8&n.type&&n.index!==t;)n=n.parent;return t===(null!==n?n.index:-1)}return this._appliesToNextNode}matchTNode(e,t){const n=this.metadata.predicate;if(Array.isArray(n))for(let r=0;r<n.length;r++){const o=n[r];this.matchTNodeWithReadOption(e,t,Cv(t,o)),this.matchTNodeWithReadOption(e,t,Gn(t,e,o,!1,!1))}else n===uv?4&t.type&&this.matchTNodeWithReadOption(e,t,-1):this.matchTNodeWithReadOption(e,t,Gn(t,e,n,!1,!1))}matchTNodeWithReadOption(e,t,n){if(null!==n){const r=this.metadata.read;if(null!==r)if(r===lh||r===dv||r===uv&&4&t.type)this.addMatch(t.index,-2);else{const n=Gn(t,e,r,!1,!1);null!==n&&this.addMatch(t.index,n)}else this.addMatch(t.index,n)}}addMatch(e,t){null===this.matches?this.matches=[e,t]:this.matches.push(e,t)}}function Cv(e,t){const n=e.localNames;if(null!==n)for(let e=0;e<n.length;e+=2)if(n[e]===t)return n[e+1];return null}function xv(e,t,n,r){return-1===n?function(e,t){return 11&e.type?ch(e,t):4&e.type?fv(e,t):null}(t,e):-2===n?function(e,t,n){return n===lh?ch(t,e):n===uv?fv(t,e):n===dv?(ngDevMode&&On(t,15),gv(t,e)):void(ngDevMode&&A(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${a(n)}.`))}(e,t,r):Jn(e,e[1],n,t)}function Ov(e,t,n,r){const o=t[19].queries[r];if(null===o.matches){const r=e.data,i=n.matches,s=[];for(let e=0;e<i.length;e+=2){const o=i[e];if(o<0)s.push(null);else{ngDevMode&&k(r,o);const a=r[o];s.push(xv(t,a,i[e+1],n.metadata.read))}}o.matches=s}return o.matches}function Dv(e,t,n,r){const o=e.queries.getByIndex(n),i=o.matches;if(null!==i){const s=Ov(e,t,o,n);for(let e=0;e<i.length;e+=2){const n=i[e];if(n>0)r.push(s[e/2]);else{const o=i[e+1],s=t[-n];ngDevMode&&ze(s);for(let e=Pe;e<s.length;e++){const t=s[e];t[17]===t[3]&&Dv(t[1],t,o,r)}if(null!==s[9]){const e=s[9];for(let t=0;t<e.length;t++){const n=e[t];Dv(n[1],n,o,r)}}}}}return r}function Sv(e){const t=jt(),n=kt(),r=Xt();en(r+1);const o=jv(n,r);if(e.dirty&&xt(t)===(2==(2&o.metadata.flags))){if(null===o.matches)e.reset([]);else{const i=o.crossesNgTemplate?Dv(n,t,r,[]):Ov(n,t,o,r);e.reset(i,fh),e.notifyOnChanges()}return!0}return!1}function Ev(e,t,n){ngDevMode&&_(t,"Expecting flags");const r=kt();r.firstCreatePass&&(Av(r,new _v(e,t,n),-1),2==(2&t)&&(r.staticViewQueries=!0)),Tv(r,jt(),t)}function Iv(e,t,n,r){ngDevMode&&_(n,"Expecting flags");const o=kt();if(o.firstCreatePass){const i=Rt();Av(o,new _v(t,n,r),i.index),function(e,t){const n=e.contentQueries||(e.contentQueries=[]);t!==(n.length?n[n.length-1]:-1)&&n.push(e.queries.length-1,t)}(o,e),2==(2&n)&&(o.staticContentQueries=!0)}Tv(o,jt(),n)}function Pv(){return e=jt(),t=Xt(),ngDevMode&&T(e[19],"LQueries should be defined when trying to load a query"),ngDevMode&&k(e[19].queries,t),e[19].queries[t].queryList;var e,t}function Tv(e,t,n){const r=new av(4==(4&n));Ga(e,t,r,r.destroy),null===t[19]&&(t[19]=new mv),t[19].queries.push(new bv(r))}function Av(e,t,n){null===e.queries&&(e.queries=new wv),e.queries.track(new Mv(t,n))}function jv(e,t){return ngDevMode&&T(e.queries,"TQueries must be defined to retrieve a TQuery"),e.queries.getByIndex(t)}function kv(e,t){return fv(e,t)}const Nv={ɵɵattribute:Fc,ɵɵattributeInterpolate1:Kc,ɵɵattributeInterpolate2:Gc,ɵɵattributeInterpolate3:Jc,ɵɵattributeInterpolate4:Zc,ɵɵattributeInterpolate5:Qc,ɵɵattributeInterpolate6:Yc,ɵɵattributeInterpolate7:Xc,ɵɵattributeInterpolate8:el,ɵɵattributeInterpolateV:tl,ɵɵdefineComponent:ye,ɵɵdefineDirective:xe,ɵɵdefineInjectable:R,ɵɵdefineInjector:L,ɵɵdefineNgModule:we,ɵɵdefinePipe:Oe,ɵɵdirectiveInject:Tl,ɵɵgetInheritedFactory:Xn,ɵɵinject:Wr,ɵɵinjectAttribute:tr,ɵɵinvalidFactory:Al,ɵɵinvalidFactoryDep:zr,ɵɵtemplateRefExtractor:kv,ɵɵNgOnChangesFeature:nt,ɵɵProvidersFeature:oh,ɵɵCopyDefinitionFeature:Oc,ɵɵInheritDefinitionFeature:bc,ɵɵnextContext:Zl,ɵɵnamespaceHTML:vn,ɵɵnamespaceMathML:hn,ɵɵnamespaceSVG:pn,ɵɵenableBindings:Tt,ɵɵdisableBindings:At,ɵɵelementStart:Nl,ɵɵelementEnd:Rl,ɵɵelement:Fl,ɵɵelementContainerStart:Ll,ɵɵelementContainerEnd:Vl,ɵɵelementContainer:$l,ɵɵpureFunction0:kh,ɵɵpureFunction1:Nh,ɵɵpureFunction2:Rh,ɵɵpureFunction3:Fh,ɵɵpureFunction4:Lh,ɵɵpureFunction5:Vh,ɵɵpureFunction6:$h,ɵɵpureFunction7:Hh,ɵɵpureFunction8:Uh,ɵɵpureFunctionV:Bh,ɵɵgetCurrentView:Hl,ɵɵrestoreView:Nt,ɵɵlistener:zl,ɵɵprojection:Xl,ɵɵsyntheticHostProperty:Od,ɵɵsyntheticHostListener:ql,ɵɵpipeBind1:Qh,ɵɵpipeBind2:Yh,ɵɵpipeBind3:Xh,ɵɵpipeBind4:ev,ɵɵpipeBindV:tv,ɵɵprojectionDef:Yl,ɵɵhostProperty:xd,ɵɵproperty:jl,ɵɵpropertyInterpolate:ef,ɵɵpropertyInterpolate1:tf,ɵɵpropertyInterpolate2:nf,ɵɵpropertyInterpolate3:rf,ɵɵpropertyInterpolate4:of,ɵɵpropertyInterpolate5:sf,ɵɵpropertyInterpolate6:af,ɵɵpropertyInterpolate7:uf,ɵɵpropertyInterpolate8:cf,ɵɵpropertyInterpolateV:lf,ɵɵpipe:Zh,ɵɵqueryRefresh:Sv,ɵɵviewQuery:Ev,ɵɵloadQuery:Pv,ɵɵcontentQuery:Iv,ɵɵreference:ol,ɵɵclassMap:Sf,ɵɵclassMapInterpolate1:Qf,ɵɵclassMapInterpolate2:Yf,ɵɵclassMapInterpolate3:Xf,ɵɵclassMapInterpolate4:ed,ɵɵclassMapInterpolate5:td,ɵɵclassMapInterpolate6:nd,ɵɵclassMapInterpolate7:rd,ɵɵclassMapInterpolate8:od,ɵɵclassMapInterpolateV:id,ɵɵstyleMap:Of,ɵɵstyleMapInterpolate1:sd,ɵɵstyleMapInterpolate2:ad,ɵɵstyleMapInterpolate3:ud,ɵɵstyleMapInterpolate4:cd,ɵɵstyleMapInterpolate5:ld,ɵɵstyleMapInterpolate6:fd,ɵɵstyleMapInterpolate7:dd,ɵɵstyleMapInterpolate8:pd,ɵɵstyleMapInterpolateV:hd,ɵɵstyleProp:Cf,ɵɵstylePropInterpolate1:vd,ɵɵstylePropInterpolate2:yd,ɵɵstylePropInterpolate3:gd,ɵɵstylePropInterpolate4:bd,ɵɵstylePropInterpolate5:md,ɵɵstylePropInterpolate6:_d,ɵɵstylePropInterpolate7:wd,ɵɵstylePropInterpolate8:Md,ɵɵstylePropInterpolateV:Cd,ɵɵclassProp:xf,ɵɵadvance:Us,ɵɵtemplate:nl,ɵɵtext:$f,ɵɵtextInterpolate:Hf,ɵɵtextInterpolate1:Uf,ɵɵtextInterpolate2:Bf,ɵɵtextInterpolate3:Wf,ɵɵtextInterpolate4:zf,ɵɵtextInterpolate5:qf,ɵɵtextInterpolate6:Kf,ɵɵtextInterpolate7:Gf,ɵɵtextInterpolate8:Jf,ɵɵtextInterpolateV:Zf,ɵɵi18n:qp,ɵɵi18nAttributes:Kp,ɵɵi18nExp:Gp,ɵɵi18nStart:Wp,ɵɵi18nEnd:zp,ɵɵi18nApply:Jp,ɵɵi18nPostprocess:Zp,ɵɵresolveWindow:Li,ɵɵresolveDocument:Vi,ɵɵresolveBody:$i,ɵɵsetComponentScope:ge,ɵɵsetNgModuleScope:Me,ɵɵsanitizeHtml:ci,ɵɵsanitizeStyle:li,ɵɵsanitizeResourceUrl:di,ɵɵsanitizeScript:pi,ɵɵsanitizeUrl:fi,ɵɵsanitizeUrlOrResourceUrl:yi,ɵɵtrustConstantHtml:hi,ɵɵtrustConstantResourceUrl:vi,forwardRef:l,resolveForwardRef:f};let Rv=null;function Fv(){Rv=null}const Lv=[];let Vv=!1;function $v(){if(!Vv){Vv=!0;try{for(let e=Lv.length-1;e>=0;e--){const{moduleType:t,ngModule:n}=Lv[e];n.declarations&&n.declarations.every(Hv)&&(Lv.splice(e,1),Qv(t,n))}}finally{Vv=!1}}}function Hv(e){return Array.isArray(e)?e.every(Hv):!!f(e)}function Uv(e,t={}){Bv(e,t),function(e,t){Lv.push({moduleType:e,ngModule:t})}(e,t)}function Bv(e,t,n=!1){ngDevMode&&T(e,"Required value moduleType"),ngDevMode&&T(t,"Required value ngModule");const r=Mr(t.declarations||ue);let o=null;Object.defineProperty(e,de,{configurable:!0,get:()=>{if(null===o){if(ngDevMode&&t.imports&&t.imports.indexOf(e)>-1)throw new Error(`'${y(e)}' module can't import itself`);const n=mr({usage:0,kind:"NgModule",type:e});o=n.compileNgModule(Nv,`ng:///${e.name}/ɵmod.js`,{type:e,bootstrap:Mr(t.bootstrap||ue).map(f),declarations:r.map(f),imports:Mr(t.imports||ue).map(f).map(ey),exports:Mr(t.exports||ue).map(f).map(ey),schemas:t.schemas?Mr(t.schemas):null,id:t.id||null}),o.schemas||(o.schemas=[])}return o}});let i=null;Object.defineProperty(e,pe,{get:()=>{if(null===i){const t=mr({usage:0,kind:"NgModule",type:e});i=t.compileFactory(Nv,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,deps:no(e),target:t.FactoryTarget.NgModule,typeArgumentCount:0})}return i},configurable:!!ngDevMode});let s=null;Object.defineProperty(e,B,{get:()=>{if(null===s){ngDevMode&&Wv(e,n);const r={name:e.name,type:e,providers:t.providers||ue,imports:[(t.imports||ue).map(f),(t.exports||ue).map(f)]},o=mr({usage:0,kind:"NgModule",type:e});s=o.compileInjector(Nv,`ng:///${e.name}/ɵinj.js`,r)}return s},configurable:!!ngDevMode})}function Wv(e,t,n){if(Gv.get(e))return;let r;if(Gv.set(e,!0),e=f(e),n){if(r=Ie(e),!r)throw new Error(`Unexpected value '${e.name}' imported by the module '${n.name}'. Please add an @NgModule annotation.`)}else r=Ie(e,!0);const o=[],i=Ui(r.declarations),s=Ui(r.imports);Mr(s).map(zv).forEach((t=>{d(t,e),Wv(t,!1,e)}));const a=Ui(r.exports);i.forEach((function(t){De(t=f(t))||Se(t)||Ee(t)||o.push(`Unexpected value '${y(t)}' declared by the module '${y(e)}'. Please add a @Pipe/@Directive/@Component annotation.`)})),i.forEach((function(e){const t=Se(e=f(e));!De(e)&&t&&0==t.selectors.length&&o.push(`Directive ${y(e)} has no selector, please add it!`)}));const u=[...i.map(f),...Mr(s.map(Zv)).map(f)];a.forEach((function(t){const n=(De(t=f(t))?"component":Se(t)&&"directive")||Ee(t)&&"pipe";n&&-1===u.lastIndexOf(t)&&o.push(`Can't export ${n} ${y(t)} from ${y(e)} as it was neither declared nor imported!`)})),i.forEach((n=>function(t,n){t=f(t);const r=Kv.get(t);if(r&&r!==e){if(!n){const n=[r,e].map(y).sort();o.push(`Type ${y(t)} is part of the declarations of 2 modules: ${n[0]} and ${n[1]}! Please consider moving ${y(t)} to a higher module that imports ${n[0]} and ${n[1]}. You can also create a new NgModule that exports and includes ${y(t)} then import that NgModule in ${n[0]} and ${n[1]}.`)}}else Kv.set(t,e)}(n,t))),i.forEach((function(e){if(De(e=f(e))){const t=qv(e,"Component");t&&t.entryComponents&&Cr(t.entryComponents,l)}}));const c=qv(e,"NgModule");if(c&&(c.imports&&Mr(c.imports).map(zv).forEach((t=>{d(t,e),Wv(t,!1,e)})),c.bootstrap&&Cr(c.bootstrap,(function(e){De(e=f(e))||o.push(`${y(e)} cannot be used as an entry component.`)})),c.bootstrap&&Cr(c.bootstrap,l),c.entryComponents&&Cr(c.entryComponents,l)),o.length)throw new Error(o.join("\n"));function l(e){e=f(e),Kv.get(e)||o.push(`Component ${y(e)} is not part of any NgModule or the module has not been imported into your module.`)}function d(e,t){if(De(e=f(e))||Se(e))throw new Error(`Unexpected directive '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`);if(Ee(e))throw new Error(`Unexpected pipe '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`)}}function zv(e){return(e=f(e)).ngModule||e}function qv(e,t){let n=null;return r(e.__annotations__),r(e.decorators),n;function r(e){e&&e.forEach(o)}function o(e){n||(Object.getPrototypeOf(e).ngMetadataName==t?n=e:e.type&&Object.getPrototypeOf(e.type).ngMetadataName==t&&(n=e.args[0]))}}let Kv=new WeakMap,Gv=new WeakMap;function Jv(){Kv=new WeakMap,Gv=new WeakMap,Lv.length=0}function Zv(e){return[...Mr(Ui(Ie(e=f(e),!0).exports).map((e=>Ie(e)?(Wv(e,!1),Zv(e)):e)))]}function Qv(e,t){const n=Mr(t.declarations||ue),r=Xv(e);n.forEach((t=>{t.hasOwnProperty(ce)?Yv(De(t),r):t.hasOwnProperty(le)||t.hasOwnProperty(fe)||(t.ngSelectorScope=e)}))}function Yv(e,t){e.directiveDefs=()=>Array.from(t.compilation.directives).map((e=>e.hasOwnProperty(ce)?De(e):Se(e))).filter((e=>!!e)),e.pipeDefs=()=>Array.from(t.compilation.pipes).map((e=>Ee(e))),e.schemas=t.schemas,e.tView=null}function Xv(e){if(!ty(e))throw new Error(`${e.name} does not have a module def (ɵmod property)`);const t=Ie(e);if(null!==t.transitiveCompileScopes)return t.transitiveCompileScopes;const n={schemas:t.schemas||null,compilation:{directives:new Set,pipes:new Set},exported:{directives:new Set,pipes:new Set}};return Ui(t.imports).forEach((e=>{const t=e;if(!ty(t))throw new Error(`Importing ${t.name} which does not have a ɵmod property`);const r=Xv(t);r.exported.directives.forEach((e=>n.compilation.directives.add(e))),r.exported.pipes.forEach((e=>n.compilation.pipes.add(e)))})),Ui(t.declarations).forEach((e=>{Ee(e)?n.compilation.pipes.add(e):n.compilation.directives.add(e)})),Ui(t.exports).forEach((e=>{const t=e;if(ty(t)){const e=Xv(t);e.exported.directives.forEach((e=>{n.compilation.directives.add(e),n.exported.directives.add(e)})),e.exported.pipes.forEach((e=>{n.compilation.pipes.add(e),n.exported.pipes.add(e)}))}else Ee(t)?n.exported.pipes.add(t):n.exported.directives.add(t)})),t.transitiveCompileScopes=n,n}function ey(e){return function(e){return void 0!==e.ngModule}(e)?e.ngModule:e}function ty(e){return!!Ie(e)}let ny=0;function ry(e,t){("undefined"==typeof ngDevMode||ngDevMode)&&se();let n=null;!function(e,t){ao(t)&&(io.set(e,t),so.add(e))}(e,t),sy(e,t),Object.defineProperty(e,ce,{get:()=>{if(null===n){const r=mr({usage:0,kind:"component",type:e});if(ao(t)){const n=[`Component '${e.name}' is not resolved:`];throw t.templateUrl&&n.push(` - templateUrl: ${t.templateUrl}`),t.styleUrls&&t.styleUrls.length&&n.push(` - styleUrls: ${JSON.stringify(t.styleUrls)}`),n.push("Did you run and wait for 'resolveComponentResources()'?"),new Error(n.join("\n"))}const o=Rv;let i=t.preserveWhitespaces;void 0===i&&(i=null!==o&&void 0!==o.preserveWhitespaces&&o.preserveWhitespaces);let s=t.encapsulation;void 0===s&&(s=null!==o&&void 0!==o.defaultEncapsulation?o.defaultEncapsulation:X.Emulated);const a=t.templateUrl||`ng:///${e.name}/template.html`,u=Object.assign(Object.assign({},uy(e,t)),{typeSourceSpan:r.createParseSourceSpan("Component",e.name,a),template:t.template||"",preserveWhitespaces:i,styles:t.styles||ue,animations:t.animations,directives:[],changeDetection:t.changeDetection,pipes:new Map,encapsulation:s,interpolation:t.interpolation,viewProviders:t.viewProviders||null});ny++;try{u.usesInheritance&&cy(e),n=r.compileComponent(Nv,a,u)}finally{ny--}if(0===ny&&$v(),void 0!==e.ngSelectorScope){const t=Xv(e.ngSelectorScope);Yv(n,t)}}return n},configurable:!!ngDevMode})}function oy(e,t){let n=null;sy(e,t||{}),Object.defineProperty(e,le,{get:()=>{if(null===n){const r=iy(e,t||{}),o=mr({usage:0,kind:"directive",type:e});n=o.compileDirective(Nv,r.sourceMapUrl,r.metadata)}return n},configurable:!!ngDevMode})}function iy(e,t){const n=e&&e.name,r=`ng:///${n}/ɵdir.js`,o=mr({usage:0,kind:"directive",type:e}),i=uy(e,t);return i.typeSourceSpan=o.createParseSourceSpan("Directive",n,r),i.usesInheritance&&cy(e),{metadata:i,sourceMapUrl:r}}function sy(e,t){let n=null;Object.defineProperty(e,pe,{get:()=>{if(null===n){const r=iy(e,t),o=mr({usage:0,kind:"directive",type:e});n=o.compileFactory(Nv,`ng:///${e.name}/ɵfac.js`,{name:r.metadata.name,type:r.metadata.type,typeArgumentCount:0,deps:no(e),target:o.FactoryTarget.Directive})}return n},configurable:!!ngDevMode})}function ay(e){return Object.getPrototypeOf(e.prototype)===Object.prototype}function uy(e,t){const n=to(),r=n.ownPropMetadata(e);return{name:e.name,type:e,selector:void 0!==t.selector?t.selector:null,host:t.host||ae,propMetadata:r,inputs:t.inputs||ue,outputs:t.outputs||ue,queries:fy(e,r,dy),lifecycle:{usesOnChanges:n.hasLifecycleHook(e,"ngOnChanges")},typeSourceSpan:null,usesInheritance:!ay(e),exportAs:(o=t.exportAs,void 0===o?null:vy(o)),providers:t.providers||null,viewQueries:fy(e,r,py)};var o}function cy(e){const t=Object.prototype;let n=Object.getPrototypeOf(e.prototype).constructor;for(;n&&n!==t;)Se(n)||De(n)||!gy(n)||oy(n,null),n=Object.getPrototypeOf(n)}function ly(e,t){return{propertyName:e,predicate:(n=t.selector,"string"==typeof n?vy(n):f(n)),descendants:t.descendants,first:t.first,read:t.read?t.read:null,static:!!t.static,emitDistinctChangesOnly:!!t.emitDistinctChangesOnly};var n}function fy(e,t,n){const r=[];for(const o in t)if(t.hasOwnProperty(o)){const i=t[o];i.forEach((t=>{if(n(t)){if(!t.selector)throw new Error(`Can't construct a query for the property "${o}" of "${y(e)}" since the query selector wasn't defined.`);if(i.some(hy))throw new Error("Cannot combine @Input decorators with query decorators");r.push(ly(o,t))}}))}return r}function dy(e){const t=e.ngMetadataName;return"ContentChild"===t||"ContentChildren"===t}function py(e){const t=e.ngMetadataName;return"ViewChild"===t||"ViewChildren"===t}function hy(e){return"Input"===e.ngMetadataName}function vy(e){return e.split(",").map((e=>e.trim()))}const yy=["ngOnChanges","ngOnInit","ngOnDestroy","ngDoCheck","ngAfterViewInit","ngAfterViewChecked","ngAfterContentInit","ngAfterContentChecked"];function gy(e){const t=to();if(yy.some((n=>t.hasLifecycleHook(e,n))))return!0;const n=t.propMetadata(e);for(const e in n){const t=n[e];for(let e=0;e<t.length;e++){const n=t[e],r=n.ngMetadataName;if(hy(n)||dy(n)||py(n)||"Output"===r||"HostBinding"===r||"HostListener"===r)return!0}}return!1}function by(e,t){let n=null,r=null;Object.defineProperty(e,pe,{get:()=>{if(null===r){const n=my(e,t),o=mr({usage:0,kind:"pipe",type:n.type});r=o.compileFactory(Nv,`ng:///${n.name}/ɵfac.js`,{name:n.name,type:n.type,typeArgumentCount:0,deps:no(e),target:o.FactoryTarget.Pipe})}return r},configurable:!!ngDevMode}),Object.defineProperty(e,fe,{get:()=>{if(null===n){const r=my(e,t),o=mr({usage:0,kind:"pipe",type:r.type});n=o.compilePipe(Nv,`ng:///${r.name}/ɵpipe.js`,r)}return n},configurable:!!ngDevMode})}function my(e,t){return{type:e,name:e.name,pipeName:t.name,pure:void 0===t.pure||t.pure}}const _y=ir("Directive",((e={})=>e),void 0,void 0,((e,t)=>oy(e,t))),wy=ir("Component",((e={})=>Object.assign({changeDetection:Q.Default},e)),_y,void 0,((e,t)=>ry(e,t))),My=ir("Pipe",(e=>Object.assign({pure:!0},e)),void 0,void 0,((e,t)=>by(e,t))),Cy=ur("Input",(e=>({bindingPropertyName:e}))),xy=ur("Output",(e=>({bindingPropertyName:e}))),Oy=ur("HostBinding",(e=>({hostPropertyName:e}))),Dy=ur("HostListener",((e,t)=>({eventName:e,args:t}))),Sy=ir("NgModule",(e=>e),void 0,void 0,((e,t)=>Uv(e,t)));function Ey(...e){}const Iy=new lr("Application Initializer");class Py{constructor(e){this.appInits=e,this.resolve=Ey,this.reject=Ey,this.initialized=!1,this.done=!1,this.donePromise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}runInitializers(){if(this.initialized)return;const e=[],t=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let t=0;t<this.appInits.length;t++){const n=this.appInits[t]();if(Ul(n))e.push(n);else if(Wl(n)){const t=new Promise(((e,t)=>{n.subscribe({complete:e,error:t})}));e.push(t)}}Promise.all(e).then((()=>{t()})).catch((e=>{this.reject(e)})),0===e.length&&t(),this.initialized=!0}}Py.ɵfac=function(e){return new(e||Py)(Wr(Iy,8))},Py.ɵprov=R({token:Py,factory:Py.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(Py,[{type:cl,args:[{providedIn:"root"}]}],(function(){return[{type:void 0,decorators:[{type:Jr,args:[Iy]},{type:Zr}]}]}),null);const Ty=new lr("AppId",{providedIn:"root",factory:Ay});function Ay(){return`${ky()}${ky()}${ky()}`}const jy={provide:Ty,useFactory:Ay,deps:[]};function ky(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const Ny=new lr("Platform Initializer"),Ry=new lr("Platform ID"),Fy=new lr("appBootstrapListener"),Ly=new lr("Application Packages Root URL");class Vy{log(e){console.log(e)}warn(e){console.warn(e)}}Vy.ɵfac=function(e){return new(e||Vy)},Vy.ɵprov=R({token:Vy,factory:Vy.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(Vy,[{type:cl}],null,null);const $y=new lr("LocaleId",{providedIn:"root",factory:()=>qr($y,q.Optional|q.SkipSelf)||("undefined"!=typeof ngI18nClosureMode&&ngI18nClosureMode&&"undefined"!=typeof goog&&"en"!==goog.getLocale()?goog.getLocale():"undefined"!=typeof $localize&&$localize.locale||Fd)}),Hy=new lr("DefaultCurrencyCode",{providedIn:"root",factory:()=>"USD"}),Uy=new lr("Translations"),By=new lr("TranslationsFormat");var Wy;!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Ignore=2]="Ignore"}(Wy||(Wy={}));class zy{constructor(e,t){this.ngModuleFactory=e,this.componentFactories=t}}class qy{compileModuleSync(e){return new jh(e)}compileModuleAsync(e){return Promise.resolve(this.compileModuleSync(e))}compileModuleAndAllComponentsSync(e){const t=this.compileModuleSync(e),n=Ui(Ie(e).declarations).reduce(((e,t)=>{const n=De(t);return n&&e.push(new Ch(n)),e}),[]);return new zy(t,n)}compileModuleAndAllComponentsAsync(e){return Promise.resolve(this.compileModuleAndAllComponentsSync(e))}clearCache(){}clearCacheFor(e){}getModuleId(e){}}qy.ɵfac=function(e){return new(e||qy)},qy.ɵprov=R({token:qy,factory:qy.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(qy,[{type:cl,args:[{providedIn:"root"}]}],null,null);const Ky=new lr("compilerOptions");class Gy{}const Jy=Promise.resolve(0);function Zy(e){"undefined"==typeof Zone?Jy.then((()=>{e&&e.apply(null,null)})):Zone.current.scheduleMicroTask("scheduleMicrotask",e)}class Qy{constructor({enableLongStackTrace:e=!1,shouldCoalesceEventChangeDetection:t=!1,shouldCoalesceRunChangeDetection:n=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new iv(!1),this.onMicrotaskEmpty=new iv(!1),this.onStable=new iv(!1),this.onError=new iv(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched();const r=this;r._nesting=0,r._outer=r._inner=Zone.current,Zone.TaskTrackingZoneSpec&&(r._inner=r._inner.fork(new Zone.TaskTrackingZoneSpec)),e&&Zone.longStackTraceZoneSpec&&(r._inner=r._inner.fork(Zone.longStackTraceZoneSpec)),r.shouldCoalesceEventChangeDetection=!n&&t,r.shouldCoalesceRunChangeDetection=n,r.lastRequestAnimationFrameId=-1,r.nativeRequestAnimationFrame=function(){let e=ie.requestAnimationFrame,t=ie.cancelAnimationFrame;if("undefined"!=typeof Zone&&e&&t){const n=e[Zone.__symbol__("OriginalDelegate")];n&&(e=n);const r=t[Zone.__symbol__("OriginalDelegate")];r&&(t=r)}return{nativeRequestAnimationFrame:e,nativeCancelAnimationFrame:t}}().nativeRequestAnimationFrame,function(e){const t=()=>{!function(e){e.isCheckStableRunning||-1!==e.lastRequestAnimationFrameId||(e.lastRequestAnimationFrameId=e.nativeRequestAnimationFrame.call(ie,(()=>{e.fakeTopEventTask||(e.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",(()=>{e.lastRequestAnimationFrameId=-1,eg(e),e.isCheckStableRunning=!0,Xy(e),e.isCheckStableRunning=!1}),void 0,(()=>{}),(()=>{}))),e.fakeTopEventTask.invoke()})),eg(e))}(e)};e._inner=e._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:(n,r,o,i,s,a)=>{try{return tg(e),n.invokeTask(o,i,s,a)}finally{(e.shouldCoalesceEventChangeDetection&&"eventTask"===i.type||e.shouldCoalesceRunChangeDetection)&&t(),ng(e)}},onInvoke:(n,r,o,i,s,a,u)=>{try{return tg(e),n.invoke(o,i,s,a,u)}finally{e.shouldCoalesceRunChangeDetection&&t(),ng(e)}},onHasTask:(t,n,r,o)=>{t.hasTask(r,o),n===r&&("microTask"==o.change?(e._hasPendingMicrotasks=o.microTask,eg(e),Xy(e)):"macroTask"==o.change&&(e.hasPendingMacrotasks=o.macroTask))},onHandleError:(t,n,r,o)=>(t.handleError(r,o),e.runOutsideAngular((()=>e.onError.emit(o))),!1)})}(r)}static isInAngularZone(){return"undefined"!=typeof Zone&&!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!Qy.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(Qy.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(e,t,n){return this._inner.run(e,t,n)}runTask(e,t,n,r){const o=this._inner,i=o.scheduleEventTask("NgZoneEvent: "+r,e,Yy,Ey,Ey);try{return o.runTask(i,t,n)}finally{o.cancelTask(i)}}runGuarded(e,t,n){return this._inner.runGuarded(e,t,n)}runOutsideAngular(e){return this._outer.run(e)}}const Yy={};function Xy(e){if(0==e._nesting&&!e.hasPendingMicrotasks&&!e.isStable)try{e._nesting++,e.onMicrotaskEmpty.emit(null)}finally{if(e._nesting--,!e.hasPendingMicrotasks)try{e.runOutsideAngular((()=>e.onStable.emit(null)))}finally{e.isStable=!0}}}function eg(e){e._hasPendingMicrotasks||(e.shouldCoalesceEventChangeDetection||e.shouldCoalesceRunChangeDetection)&&-1!==e.lastRequestAnimationFrameId?e.hasPendingMicrotasks=!0:e.hasPendingMicrotasks=!1}function tg(e){e._nesting++,e.isStable&&(e.isStable=!1,e.onUnstable.emit(null))}function ng(e){e._nesting--,Xy(e)}class rg{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new iv,this.onMicrotaskEmpty=new iv,this.onStable=new iv,this.onError=new iv}run(e,t,n){return e.apply(t,n)}runGuarded(e,t,n){return e.apply(t,n)}runOutsideAngular(e){return e()}runTask(e,t,n,r){return e.apply(t,n)}}class og{constructor(e){this._ngZone=e,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),e.run((()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")}))}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular((()=>{this._ngZone.onStable.subscribe({next:()=>{Qy.assertNotInAngularZone(),Zy((()=>{this._isZoneStable=!0,this._runCallbacksIfReady()}))}})}))}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())Zy((()=>{for(;0!==this._callbacks.length;){let e=this._callbacks.pop();clearTimeout(e.timeoutId),e.doneCb(this._didWork)}this._didWork=!1}));else{let e=this.getPendingTasks();this._callbacks=this._callbacks.filter((t=>!t.updateCb||!t.updateCb(e)||(clearTimeout(t.timeoutId),!1))),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map((e=>({source:e.source,creationLocation:e.creationLocation,data:e.data}))):[]}addCallback(e,t,n){let r=-1;t&&t>0&&(r=setTimeout((()=>{this._callbacks=this._callbacks.filter((e=>e.timeoutId!==r)),e(this._didWork,this.getPendingTasks())}),t)),this._callbacks.push({doneCb:e,timeoutId:r,updateCb:n})}whenStable(e,t,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');this.addCallback(e,t,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(e,t,n){return[]}}og.ɵfac=function(e){return new(e||og)(Wr(Qy))},og.ɵprov=R({token:og,factory:og.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(og,[{type:cl}],(function(){return[{type:Qy}]}),null);class ig{constructor(){this._applications=new Map,ug.addToWindow(this)}registerApplication(e,t){this._applications.set(e,t)}unregisterApplication(e){this._applications.delete(e)}unregisterAllApplications(){this._applications.clear()}getTestability(e){return this._applications.get(e)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(e,t=!0){return ug.findTestabilityInTree(this,e,t)}}function sg(e){ug=e}ig.ɵfac=function(e){return new(e||ig)},ig.ɵprov=R({token:ig,factory:ig.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(ig,[{type:cl}],(function(){return[]}),null);let ag,ug=new class{addToWindow(e){}findTestabilityInTree(e,t,n){return null}};function cg(e,t,n){ngDevMode&&function(e,t="Type passed in is not NgModuleType, it does not have 'ɵmod' property."){Ie(e)||A(t)}(n);const r=new jh(n);if("undefined"!=typeof ngJitMode&&!ngJitMode)return Promise.resolve(r);const o=e.get(Ky,[]).concat(t);if(function(e){if(null!==Rv){if(e.defaultEncapsulation!==Rv.defaultEncapsulation)return void(ngDevMode&&console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set."));if(e.preserveWhitespaces!==Rv.preserveWhitespaces)return void(ngDevMode&&console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set."))}Rv=e}({defaultEncapsulation:Mg(o.map((e=>e.defaultEncapsulation))),preserveWhitespaces:Mg(o.map((e=>e.preserveWhitespaces)))}),0===io.size)return Promise.resolve(r);const i=function(e){const t=[];return e.forEach((e=>e&&t.push(...e))),t}(o.map((e=>e.providers)));if(0===i.length)return Promise.resolve(r);const s=mr({usage:0,kind:"NgModule",type:n}),a=Ju.create({providers:i}).get(s.ResourceLoader);return oo((e=>Promise.resolve(a.get(e)))).then((()=>r))}function lg(e){return e.isBoundToModule}const fg=new lr("AllowMultipleToken");class dg{constructor(e,t){this.name=e,this.token=t}}function pg(e){if(ag&&!ag.destroyed&&!ag.injector.get(fg,!1)){const e="undefined"==typeof ngDevMode||ngDevMode?"There can be only one platform. Destroy the previous one to create a new one.":"";throw new p(400,e)}ngDevMode&&cc(),ag=e.get(bg);const t=e.get(Ny,null);return t&&t.forEach((e=>e())),ag}function hg(e,t,n=[]){const r=`Platform: ${t}`,o=new lr(r);return(t=[])=>{let i=gg();if(!i||i.injector.get(fg,!1))if(e)e(n.concat(t).concat({provide:o,useValue:!0}));else{const e=n.concat(t).concat({provide:o,useValue:!0},{provide:Ru,useValue:"platform"});pg(Ju.create({providers:e,name:r}))}return vg(o)}}function vg(e){const t=gg();if(!t){const e="undefined"==typeof ngDevMode||ngDevMode?"No platform exists!":"";throw new p(401,e)}if(("undefined"==typeof ngDevMode||ngDevMode)&&!t.injector.get(e,null))throw new p(400,"A platform with a different configuration has been created. Please destroy it first.");return t}function yg(){ag&&!ag.destroyed&&ag.destroy()}function gg(){return ag&&!ag.destroyed?ag:null}class bg{constructor(e){this._injector=e,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(e,t){const n=function(e,t){let n;return n="noop"===e?new rg:("zone.js"===e?void 0:e)||new Qy({enableLongStackTrace:"undefined"!=typeof ngDevMode&&!!ngDevMode,shouldCoalesceEventChangeDetection:!!(null==t?void 0:t.ngZoneEventCoalescing),shouldCoalesceRunChangeDetection:!!(null==t?void 0:t.ngZoneRunCoalescing)}),n}(t?t.ngZone:void 0,{ngZoneEventCoalescing:t&&t.ngZoneEventCoalescing||!1,ngZoneRunCoalescing:t&&t.ngZoneRunCoalescing||!1}),r=[{provide:Qy,useValue:n}];return n.run((()=>{const t=Ju.create({providers:r,parent:this.injector,name:e.moduleType.name}),o=e.create(t),i=o.injector.get(Pi,null);if(!i){const e="undefined"==typeof ngDevMode||ngDevMode?"No ErrorHandler. Is platform module (BrowserModule) included?":"";throw new p(402,e)}return n.runOutsideAngular((()=>{const e=n.onError.subscribe({next:e=>{i.handleError(e)}});o.onDestroy((()=>{wg(this._modules,o),e.unsubscribe()}))})),function(e,t,n){try{const r=n();return Ul(r)?r.catch((n=>{throw t.runOutsideAngular((()=>e.handleError(n))),n})):r}catch(n){throw t.runOutsideAngular((()=>e.handleError(n))),n}}(i,n,(()=>{const e=o.injector.get(Py);return e.runInitializers(),e.donePromise.then((()=>(Ud(o.injector.get($y,Fd)||Fd),this._moduleDoBootstrap(o),o)))}))}))}bootstrapModule(e,t=[]){const n=mg({},t);return cg(this.injector,n,e).then((e=>this.bootstrapModuleFactory(e,n)))}_moduleDoBootstrap(e){const t=e.injector.get(_g);if(e._bootstrapComponents.length>0)e._bootstrapComponents.forEach((e=>t.bootstrap(e)));else{if(!e.instance.ngDoBootstrap){const t="undefined"==typeof ngDevMode||ngDevMode?`The module ${a(e.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`:"";throw new p(403,t)}e.instance.ngDoBootstrap(t)}this._modules.push(e)}onDestroy(e){this._destroyListeners.push(e)}get injector(){return this._injector}destroy(){if(this._destroyed){const e="undefined"==typeof ngDevMode||ngDevMode?"The platform has already been destroyed!":"";throw new p(404,e)}this._modules.slice().forEach((e=>e.destroy())),this._destroyListeners.forEach((e=>e())),this._destroyed=!0}get destroyed(){return this._destroyed}}function mg(e,t){return Array.isArray(t)?t.reduce(mg,e):Object.assign(Object.assign({},e),t)}bg.ɵfac=function(e){return new(e||bg)(Wr(Ju))},bg.ɵprov=R({token:bg,factory:bg.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(bg,[{type:cl}],(function(){return[{type:Ju}]}),null);class _g{constructor(e,t,n,i,s){this._zone=e,this._injector=t,this._exceptionHandler=n,this._componentFactoryResolver=i,this._initStatus=s,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._onMicrotaskEmptySubscription=this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run((()=>{this.tick()}))}});const a=new r.Observable((e=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular((()=>{e.next(this._stable),e.complete()}))})),u=new r.Observable((e=>{let t;this._zone.runOutsideAngular((()=>{t=this._zone.onStable.subscribe((()=>{Qy.assertNotInAngularZone(),Zy((()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,e.next(!0))}))}))}));const n=this._zone.onUnstable.subscribe((()=>{Qy.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular((()=>{e.next(!1)})))}));return()=>{t.unsubscribe(),n.unsubscribe()}}));this.isStable=(0,r.merge)(a,u.pipe((0,o.BN)()))}bootstrap(e,t){if(!this._initStatus.done){const e="undefined"==typeof ngDevMode||ngDevMode?"Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.":"";throw new p(405,e)}let n;n=e instanceof sh?e:this._componentFactoryResolver.resolveComponentFactory(e),this.componentTypes.push(n.componentType);const r=lg(n)?void 0:this._injector.get(Dh),o=t||n.selector,i=n.create(Ju.NULL,[],o,r),s=i.location.nativeElement,a=i.injector.get(og,null),u=a&&i.injector.get(ig);return a&&u&&u.registerApplication(s,a),i.onDestroy((()=>{this.detachView(i.hostView),wg(this.components,i),u&&u.unregisterApplication(s)})),this._loadComponent(i),("undefined"==typeof ngDevMode||ngDevMode)&&this._injector.get(Vy).log("Angular is running in development mode. Call enableProdMode() to enable production mode."),i}tick(){if(this._runningTick){const e="undefined"==typeof ngDevMode||ngDevMode?"ApplicationRef.tick is called recursively":"";throw new p(101,e)}try{this._runningTick=!0;for(let e of this._views)e.detectChanges();if("undefined"==typeof ngDevMode||ngDevMode)for(let e of this._views)e.checkNoChanges()}catch(e){this._zone.runOutsideAngular((()=>this._exceptionHandler.handleError(e)))}finally{this._runningTick=!1}}attachView(e){const t=e;this._views.push(t),t.attachToAppRef(this)}detachView(e){const t=e;wg(this._views,t),t.detachFromAppRef()}_loadComponent(e){this.attachView(e.hostView),this.tick(),this.components.push(e),this._injector.get(Fy,[]).concat(this._bootstrapListeners).forEach((t=>t(e)))}ngOnDestroy(){this._views.slice().forEach((e=>e.destroy())),this._onMicrotaskEmptySubscription.unsubscribe()}get viewCount(){return this._views.length}}function wg(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}function Mg(e){for(let t=e.length-1;t>=0;t--)if(void 0!==e[t])return e[t]}_g.ɵfac=function(e){return new(e||_g)(Wr(Qy),Wr(Ju),Wr(Pi),Wr(uh),Wr(Py))},_g.ɵprov=R({token:_g,factory:_g.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(_g,[{type:cl,args:[{providedIn:"root"}]}],(function(){return[{type:Qy},{type:Ju},{type:Pi},{type:uh},{type:Py}]}),null);let Cg=!0,xg=!1;function Og(){return xg=!0,Cg}function Dg(){if(xg)throw new Error("Cannot enable prod mode after platform setup.");(void 0===typeof ngDevMode||ngDevMode)&&(ie.ngDevMode=!1),Cg=!1}function Sg(e){const t=Ph(e);if(!t)throw Ig(e);return new jh(t)}function Eg(e){const t=Ph(e);if(!t)throw Ig(e);return t}function Ig(e){return new Error(`No module with ID ${e} loaded`)}class Pg{}function Tg(e){return function(e,t,n){if(Re(e)&&!n){const n=Ct(e.index,t);return new mh(n,n)}if(47&e.type){const e=t[16];return new mh(e,t)}return null}(Rt(),jt(),16==(16&e))}Pg.__NG_ELEMENT_ID__=Tg;class Ag extends Pg{}class jg extends Ag{}class kg{constructor(e,t){this.name=e,this.callback=t}}function Ng(e){return e.map((e=>e.nativeElement))}class Rg{constructor(e){this.nativeNode=e}get parent(){const e=this.nativeNode.parentNode;return e?new Fg(e):null}get injector(){return ec(this.nativeNode)}get componentInstance(){const e=this.nativeNode;return e&&(Zu(e)||Yu(e))}get context(){return Zu(this.nativeNode)||Qu(this.nativeNode)}get listeners(){return oc(this.nativeNode).filter((e=>"dom"===e.type))}get references(){return function(e){const t=bi(e);return null===t?{}:(void 0===t.localRefs&&(t.localRefs=function(e,t){const n=e[1].data[t];if(n&&n.localNames){const t={};let r=n.index+1;for(let o=0;o<n.localNames.length;o+=2)t[n.localNames[o]]=e[r],r++;return t}return null}(t.lView,t.nodeIndex)),t.localRefs||{})}(this.nativeNode)}get providerTokens(){return function(e){const t=bi(e);if(null===t)return[];const n=t.lView[1],r=n.data[t.nodeIndex],o=[],i=1048575&r.providerIndexes,s=r.directiveEnd;for(let e=i;e<s;e++){let t=n.data[e];void 0!==(a=t).type&&void 0!==a.template&&void 0!==a.declaredInputs&&(t=t.type),o.push(t)}var a;return o}(this.nativeNode)}}class Fg extends Rg{constructor(e){ngDevMode&&j(e),super(e)}get nativeElement(){return this.nativeNode.nodeType==Node.ELEMENT_NODE?this.nativeNode:null}get name(){const e=bi(this.nativeNode);return null!==e?e.lView[1].data[e.nodeIndex].value:this.nativeNode.nodeName}get properties(){const e=bi(this.nativeNode);if(null===e)return{};const t=e.lView,n=t[1].data,r=n[e.nodeIndex],o={};return function(e,t){if(e){let n=Object.getPrototypeOf(e);const r=Node.prototype;for(;null!==n&&n!==r;){const r=Object.getOwnPropertyDescriptors(n);for(let n in r)if(!n.startsWith("__")&&!n.startsWith("on")){const r=e[n];Lg(r)&&(t[n]=r)}n=Object.getPrototypeOf(n)}}}(this.nativeElement,o),function(e,t,n,r){let o=t.propertyBindings;if(null!==o)for(let t=0;t<o.length;t++){const i=o[t],s=r[i].split(Hi),a=s[0];if(s.length>1){let t=s[1];for(let e=1;e<s.length-1;e++)t+=v(n[i+e-1])+s[e+1];e[a]=t}else e[a]=n[i]}}(o,r,t,n),o}get attributes(){const e={},t=this.nativeElement;if(!t)return e;const n=bi(t);if(null===n)return{};const r=n.lView[1].data[n.nodeIndex].attrs,o=[];if(r){let t=0;for(;t<r.length;){const n=r[t];if("string"!=typeof n)break;const i=r[t+1];e[n]=i,o.push(n.toLowerCase()),t+=2}}const i=t.attributes;for(let t=0;t<i.length;t++){const n=i[t],r=n.name.toLowerCase();-1===o.indexOf(r)&&(e[r]=n.value)}return e}get styles(){return this.nativeElement&&this.nativeElement.style?this.nativeElement.style:{}}get classes(){const e={},t=this.nativeElement.className;return("string"!=typeof t?t.baseVal.split(" "):t.split(" ")).forEach((t=>e[t]=!0)),e}get childNodes(){const e=this.nativeNode.childNodes,t=[];for(let n=0;n<e.length;n++){const r=e[n];t.push(Wg(r))}return t}get children(){const e=this.nativeElement;if(!e)return[];const t=e.children,n=[];for(let e=0;e<t.length;e++){const r=t[e];n.push(Wg(r))}return n}query(e){return this.queryAll(e)[0]||null}queryAll(e){const t=[];return Vg(this,e,t,!0),t}queryAllNodes(e){const t=[];return Vg(this,e,t,!1),t}triggerEventHandler(e,t){const n=this.nativeNode,r=[];this.listeners.forEach((o=>{if(o.name===e){const e=o.callback;e.call(n,t),r.push(e)}})),"function"==typeof n.eventListeners&&n.eventListeners(e).forEach((e=>{if(-1!==e.toString().indexOf("__ngUnwrap__")){const o=e("__ngUnwrap__");return-1===r.indexOf(o)&&o.call(n,t)}}))}}function Lg(e){return"string"==typeof e||"boolean"==typeof e||"number"==typeof e||null===e}function Vg(e,t,n,r){const o=bi(e.nativeNode);null!==o?$g(o.lView[1].data[o.nodeIndex],o.lView,t,n,r,e.nativeNode):Bg(e.nativeNode,t,n,r)}function $g(e,t,n,r,o,i){ngDevMode&&Ve(e,t);const s=function(e,t){const n=null===e?-1:e.index;if(-1!==n){ngDevMode&&Ve(e,t);const r=bt(t[n]);return ngDevMode&&null!==r&&!yt(t[11])&&j(r),r}return null}(e,t);if(11&e.type){if(Ug(s,n,r,o,i),Re(e)){const s=Ct(e.index,t);s&&s[1].firstChild&&$g(s[1].firstChild,s,n,r,o,i)}else e.child&&$g(e.child,t,n,r,o,i),s&&Bg(s,n,r,o);const a=t[e.index];ke(a)&&Hg(a,n,r,o,i)}else if(4&e.type){const s=t[e.index];Ug(s[7],n,r,o,i),Hg(s,n,r,o,i)}else if(16&e.type){const s=t[16],a=s[6].projection[e.projection];if(Array.isArray(a))for(let e of a)Ug(e,n,r,o,i);else if(a){const e=s[3];$g(e[1].data[a.index],e,n,r,o,i)}}else e.child&&$g(e.child,t,n,r,o,i);if(i!==s){const s=4&e.flags?e.projectionNext:e.next;s&&$g(s,t,n,r,o,i)}}function Hg(e,t,n,r,o){for(let i=Pe;i<e.length;i++){const s=e[i],a=s[1].firstChild;a&&$g(a,s,t,n,r,o)}}function Ug(e,t,n,r,o){if(o!==e){const o=Wg(e);if(!o)return;(r&&o instanceof Fg&&t(o)&&-1===n.indexOf(o)||!r&&t(o)&&-1===n.indexOf(o))&&n.push(o)}}function Bg(e,t,n,r){const o=e.childNodes,i=o.length;for(let e=0;e<i;e++){const i=o[e],s=Wg(i);s&&((r&&s instanceof Fg&&t(s)&&-1===n.indexOf(s)||!r&&t(s)&&-1===n.indexOf(s))&&n.push(s),Bg(i,t,n,r))}}new Map;function Wg(e){return e instanceof Node?(e.hasOwnProperty("__ng_debug__")||(e.__ng_debug__=e.nodeType==Node.ELEMENT_NODE?new Fg(e):new Rg(e)),e.__ng_debug__):null}function zg(e){return null}class qg{constructor(){}supports(e){return Ic(e)}create(e){return new Gg(e)}}const Kg=(e,t)=>t;class Gg{constructor(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||Kg}forEachItem(e){let t;for(t=this._itHead;null!==t;t=t._next)e(t)}forEachOperation(e){let t=this._itHead,n=this._removalsHead,r=0,o=null;for(;t||n;){const i=!n||t&&t.currentIndex<Yg(n,r,o)?t:n,s=Yg(i,r,o),a=i.currentIndex;if(i===n)r--,n=n._nextRemoved;else if(t=t._next,null==i.previousIndex)r++;else{o||(o=[]);const e=s-r,t=a-r;if(e!=t){for(let n=0;n<e;n++){const r=n<o.length?o[n]:o[n]=0,i=r+n;t<=i&&i<e&&(o[n]=r+1)}o[i.previousIndex]=t-e}}s!==a&&e(i,s,a)}}forEachPreviousItem(e){let t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachMovedItem(e){let t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}forEachIdentityChange(e){let t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)}diff(e){if(null==e&&(e=[]),!Ic(e)){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${a(e)}'. Only arrays and iterables are allowed`:"";throw new p(900,t)}return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t,n,r,o=this._itHead,i=!1;if(Array.isArray(e)){this.length=e.length;for(let t=0;t<this.length;t++)n=e[t],r=this._trackByFn(t,n),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,n,r,t)),Object.is(o.item,n)||this._addIdentityChange(o,n)):(o=this._mismatch(o,n,r,t),i=!0),o=o._next}else t=0,function(e,t){if(Array.isArray(e))for(let n=0;n<e.length;n++)t(e[n]);else{const n=e[Sc()]();let r;for(;!(r=n.next()).done;)t(r.value)}}(e,(e=>{r=this._trackByFn(t,e),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,e,r,t)),Object.is(o.item,e)||this._addIdentityChange(o,e)):(o=this._mismatch(o,e,r,t),i=!0),o=o._next,t++})),this.length=t;return this._truncate(o),this.collection=e,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let e;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=e._nextMoved)e.previousIndex=e.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(e,t,n,r){let o;return null===e?o=this._itTail:(o=e._prev,this._remove(e)),null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,o,r)):null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(n,r))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,o,r)):e=this._addAfter(new Jg(t,n),o,r),e}_verifyReinsertion(e,t,n,r){let o=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==o?e=this._reinsertAfter(o,e._prev,r):e.currentIndex!=r&&(e.currentIndex=r,this._addToMoves(e,r)),e}_truncate(e){for(;null!==e;){const t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(e,t,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);const r=e._prevRemoved,o=e._nextRemoved;return null===r?this._removalsHead=o:r._nextRemoved=o,null===o?this._removalsTail=r:o._prevRemoved=r,this._insertAfter(e,t,n),this._addToMoves(e,n),e}_moveAfter(e,t,n){return this._unlink(e),this._insertAfter(e,t,n),this._addToMoves(e,n),e}_addAfter(e,t,n){return this._insertAfter(e,t,n),null===this._additionsTail?this._additionsTail=this._additionsHead=e:this._additionsTail=this._additionsTail._nextAdded=e,e}_insertAfter(e,t,n){const r=null===t?this._itHead:t._next;return e._next=r,e._prev=t,null===r?this._itTail=e:r._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new Qg),this._linkedRecords.put(e),e.currentIndex=n,e}_remove(e){return this._addToRemovals(this._unlink(e))}_unlink(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);const t=e._prev,n=e._next;return null===t?this._itHead=n:t._next=n,null===n?this._itTail=t:n._prev=t,e}_addToMoves(e,t){return e.previousIndex===t||(null===this._movesTail?this._movesTail=this._movesHead=e:this._movesTail=this._movesTail._nextMoved=e),e}_addToRemovals(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new Qg),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}_addIdentityChange(e,t){return e.item=t,null===this._identityChangesTail?this._identityChangesTail=this._identityChangesHead=e:this._identityChangesTail=this._identityChangesTail._nextIdentityChange=e,e}}class Jg{constructor(e,t){this.item=e,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class Zg{constructor(){this._head=null,this._tail=null}add(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}get(e,t){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===t||t<=n.currentIndex)&&Object.is(n.trackById,e))return n;return null}remove(e){const t=e._prevDup,n=e._nextDup;return null===t?this._head=n:t._nextDup=n,null===n?this._tail=t:n._prevDup=t,null===this._head}}class Qg{constructor(){this.map=new Map}put(e){const t=e.trackById;let n=this.map.get(t);n||(n=new Zg,this.map.set(t,n)),n.add(e)}get(e,t){const n=e,r=this.map.get(n);return r?r.get(e,t):null}remove(e){const t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function Yg(e,t,n){const r=e.previousIndex;if(null===r)return r;let o=0;return n&&r<n.length&&(o=n[r]),r+t+o}class Xg{constructor(){}supports(e){return e instanceof Map||Pc(e)}create(){return new eb}}class eb{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(e){let t;for(t=this._mapHead;null!==t;t=t._next)e(t)}forEachPreviousItem(e){let t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)}forEachChangedItem(e){let t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}diff(e){if(e){if(!(e instanceof Map||Pc(e))){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${a(e)}'. Only maps and objects are allowed`:"";throw new p(900,t)}}else e=new Map;return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t=this._mapHead;if(this._appendAfter=null,this._forEach(e,((e,n)=>{if(t&&t.key===n)this._maybeAddToChanges(t,e),this._appendAfter=t,t=t._next;else{const r=this._getOrCreateRecordForKey(n,e);t=this._insertBeforeOrAppend(t,r)}})),t){t._prev&&(t._prev._next=null),this._removalsHead=t;for(let e=t;null!==e;e=e._nextRemoved)e===this._mapHead&&(this._mapHead=null),this._records.delete(e.key),e._nextRemoved=e._next,e.previousValue=e.currentValue,e.currentValue=null,e._prev=null,e._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(e,t){if(e){const n=e._prev;return t._next=e,t._prev=n,e._prev=t,n&&(n._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}_getOrCreateRecordForKey(e,t){if(this._records.has(e)){const n=this._records.get(e);this._maybeAddToChanges(n,t);const r=n._prev,o=n._next;return r&&(r._next=o),o&&(o._prev=r),n._next=null,n._prev=null,n}const n=new tb(e);return this._records.set(e,n),n.currentValue=t,this._addToAdditions(n),n}_reset(){if(this.isDirty){let e;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(e,t){Object.is(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))}_addToAdditions(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)}_addToChanges(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)}_forEach(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach((n=>t(e[n],n)))}}class tb{constructor(e){this.key=e,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}function nb(){return new rb([new qg])}class rb{constructor(e){this.factories=e}static create(e,t){if(null!=t){const n=t.factories.slice();e=e.concat(n)}return new rb(e)}static extend(e){return{provide:rb,useFactory:t=>rb.create(e,t||nb()),deps:[[rb,new Yr,new Zr]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(null!=t)return t;{const t="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}' of type '${n=e,n.name||typeof n}'`:"";throw new p(901,t)}var n}}function ob(){return new ib([new Xg])}rb.ɵprov=R({token:rb,providedIn:"root",factory:nb});class ib{constructor(e){this.factories=e}static create(e,t){if(t){const n=t.factories.slice();e=e.concat(n)}return new ib(e)}static extend(e){return{provide:ib,useFactory:t=>ib.create(e,t||ob()),deps:[[ib,new Yr,new Zr]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(t)return t;const n="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}'`:"";throw new p(901,n)}}ib.ɵprov=R({token:ib,providedIn:"root",factory:ob});const sb=[new Xg],ab=[new qg],ub=new rb(ab),cb=new ib(sb),lb=hg(null,"core",[{provide:Ry,useValue:"unknown"},{provide:bg,deps:[Ju]},{provide:ig,deps:[]},{provide:Vy,deps:[]}]);class fb{constructor(e){}}fb.ɵfac=function(e){return new(e||fb)(Wr(_g))},fb.ɵmod=we({type:fb}),fb.ɵinj=L({}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(fb,[{type:Sy}],(function(){return[{type:_g}]}),null);const db=!0;function pb(e){return mr({usage:1,kind:"directive",type:e.type}).compileDirectiveDeclaration(Nv,`ng:///${e.type.name}/ɵfac.js`,e)}function hb(e){var t,n;Oh(e.type,e.decorators,null!==(t=e.ctorParameters)&&void 0!==t?t:null,null!==(n=e.propDecorators)&&void 0!==n?n:null)}function vb(e){return mr({usage:1,kind:"component",type:e.type}).compileComponentDeclaration(Nv,`ng:///${e.type.name}/ɵcmp.js`,e)}function yb(e){return mr({usage:1,kind:gb(e.target),type:e.type}).compileFactoryDeclaration(Nv,`ng:///${e.type.name}/ɵfac.js`,e)}function gb(e){switch(e){case gr.Directive:return"directive";case gr.Component:return"component";case gr.Injectable:return"injectable";case gr.Pipe:return"pipe";case gr.NgModule:return"NgModule"}}function bb(e){return mr({usage:1,kind:"injectable",type:e.type}).compileInjectableDeclaration(Nv,`ng:///${e.type.name}/ɵprov.js`,e)}function mb(e){return mr({usage:1,kind:"NgModule",type:e.type}).compileInjectorDeclaration(Nv,`ng:///${e.type.name}/ɵinj.js`,e)}function _b(e){return mr({usage:1,kind:"NgModule",type:e.type}).compileNgModuleDeclaration(Nv,`ng:///${e.type.name}/ɵmod.js`,e)}function wb(e){return mr({usage:1,kind:"pipe",type:e.type}).compilePipeDeclaration(Nv,`ng:///${e.type.name}/ɵpipe.js`,e)}"undefined"!=typeof ngDevMode&&ngDevMode&&(ie.$localize=ie.$localize||function(){throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)")})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.checkKeyForDid=e.EProofmeDataStorage=e.EProofmeDataPurpose=e.EClaimType=e.ESignatureTypes=e.EMimeType=e.getSubDomain=e.SignalServerV2=e.ProofmeUtils=e.ProofmeUtilsProvider=e.WebRtcProvider=e.SignalingServer=void 0;var t=n(2582);Object.defineProperty(e,"SignalingServer",{enumerable:!0,get:function(){return t.SignalingServer}});var o=n(2733);Object.defineProperty(e,"WebRtcProvider",{enumerable:!0,get:function(){return o.WebRtcProvider}});var i=n(1015);Object.defineProperty(e,"ProofmeUtilsProvider",{enumerable:!0,get:function(){return i.ProofmeUtilsProvider}});var s=n(5583);Object.defineProperty(e,"ProofmeUtils",{enumerable:!0,get:function(){return s.ProofmeUtils}});var a=n(5456);Object.defineProperty(e,"SignalServerV2",{enumerable:!0,get:function(){return a.SignalServerV2}});var u=n(6919);Object.defineProperty(e,"getSubDomain",{enumerable:!0,get:function(){return u.getSubDomain}});var c=n(3244);Object.defineProperty(e,"EMimeType",{enumerable:!0,get:function(){return c.EMimeType}});var l=n(2178);Object.defineProperty(e,"ESignatureTypes",{enumerable:!0,get:function(){return l.ESignatureTypes}});var f=n(9137);Object.defineProperty(e,"EClaimType",{enumerable:!0,get:function(){return f.EClaimType}});var d=n(5018);Object.defineProperty(e,"EProofmeDataPurpose",{enumerable:!0,get:function(){return d.EProofmeDataPurpose}});var p=n(345);Object.defineProperty(e,"EProofmeDataStorage",{enumerable:!0,get:function(){return p.EProofmeDataStorage}});var h=n(3817);Object.defineProperty(e,"checkKeyForDid",{enumerable:!0,get:function(){return h.checkKeyForDid}})})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QU91dEgsWUFBYSxDQUFFMzFILE1BQU8sV0FFN0RkLE9BQU9hLGVBQWV2QixFQUFTLGFBQWMsQ0FBRXdCLE9BQU8sMlNDTHZELGNBQVMsaUZBQUE0MUgsbUJBQ1QsY0FBUyxnRkFBQXJ3RixrQkFDVCxjQUFTLHNGQUFBek8sd0JBQ1QsY0FBUyw4RUFBQUUsZ0JBQ1QsY0FBUyxnRkFBQTYrRixrQkFDVCxjQUFTLHNEQUFBejBILElBQUEsb0JBQUEwMEgsZ0JBSVQsY0FBUywyRUFBQXZnRyxhQUNULGNBQVMsaUZBQUFHLG1CQUNULGNBQVMsNEVBQUFMLGNBVVQsY0FBUyxxRkFBQUcsdUJBQ1QsYUFBUyxxRkFBQUMsdUJBR1QsY0FBUyxnRkFBQXNnRyIsInNvdXJjZXMiOlsid2VicGFjazovL1Byb29mbWVJZC93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvQXN5bmNTdWJqZWN0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL0JlaGF2aW9yU3ViamVjdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9Ob3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvTm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvUmVwbGF5U3ViamVjdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9TY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9TdWJzY3JpYmVyLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9Db25uZWN0YWJsZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvY29uY2F0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvZW1wdHkuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9mcm9tLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvZnJvbVN1YnNjcmliYWJsZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2lubmVyRnJvbS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL2ludGVydmFsLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvb2YuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb2JzZXJ2YWJsZS9yYWNlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvdGhyb3dFcnJvci5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vYnNlcnZhYmxlL3RpbWVyLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29ic2VydmFibGUvemlwLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2F1ZGl0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9hdWRpdFRpbWUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyQ291bnQuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRpbWUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRvZ2dsZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyV2hlbi5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY2F0Y2hFcnJvci5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUFsbC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdEFsbC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdFdpdGguanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0QWxsLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXAuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdE1hcFRvLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRXaXRoLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb25uZWN0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9jb3VudC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlYm91bmNlVGltZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGVmYXVsdElmRW1wdHkuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbGF5LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kZWxheVdoZW4uanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2RlbWF0ZXJpYWxpemUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsQ2hhbmdlZC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbEtleUNoYW5nZWQuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2VsZW1lbnRBdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZW5kV2l0aC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZXZlcnkuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3QuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RBbGwuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RNYXAuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2V4cGFuZC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmlsdGVyLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9maW5hbGl6ZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmluZC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmluZEluZGV4LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9maXJzdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZmxhdE1hcC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZ3JvdXBCeS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2pvaW5BbGxJbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL2xhc3QuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21hcC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwVG8uanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21hdGVyaWFsaXplLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tYXguanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUFsbC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VJbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZU1hcFRvLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZVNjYW4uanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlV2l0aC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvbWluLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9tdWx0aWNhc3QuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPbi5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvb25FcnJvclJlc3VtZU5leHQuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3BhaXJ3aXNlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wYXJ0aXRpb24uanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3BsdWNrLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoQmVoYXZpb3IuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hMYXN0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9wdWJsaXNoUmVwbGF5LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yYWNlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yYWNlV2l0aC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVkdWNlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yZWZDb3VudC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXRXaGVuLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9yZXRyeS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NhbXBsZVRpbWUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW4uanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NjYW5JbnRlcm5hbHMuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NlcXVlbmNlRXF1YWwuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3NoYXJlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zaGFyZVJlcGxheS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2luZ2xlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9za2lwLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9za2lwTGFzdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFVudGlsLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9za2lwV2hpbGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3N0YXJ0V2l0aC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaEFsbC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBUby5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoU2Nhbi5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZUxhc3QuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VVbnRpbC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVdoaWxlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90YXAuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm90dGxlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90aHJvdHRsZVRpbWUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm93SWZFbXB0eS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZUludGVydmFsLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0V2l0aC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvdGltZXN0YW1wLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy90b0FycmF5LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd0NvdW50LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUaW1lLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dUb2dnbGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1doZW4uanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3dpdGhMYXRlc3RGcm9tLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL29wZXJhdG9ycy96aXAuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvb3BlcmF0b3JzL3ppcEFsbC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9vcGVyYXRvcnMvemlwV2l0aC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBcnJheS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZU9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvQWN0aW9uLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9Bc3luY0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zY2hlZHVsZXIvQXN5bmNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL2ludGVydmFsUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlci5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC9zeW1ib2wvaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvc3ltYm9sL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvci5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL0VtcHR5RXJyb3IuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9Ob3RGb3VuZEVycm9yLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9TZXF1ZW5jZUVycm9yLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2FyZ3MuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9hcmdzQXJnQXJyYXlPck9iamVjdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2FyZ3NPckFyZ0FycmF5LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvYXJyUmVtb3ZlLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvY3JlYXRlRXJyb3JDbGFzcy5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2NyZWF0ZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2Vycm9yQ29udGV4dC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2V4ZWN1dGVTY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc0RhdGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvbGlmdC5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL21hcE9uZU9yTWFueUFyZ3MuanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9janMvaW50ZXJuYWwvdXRpbC9ub29wLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvbm90LmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL1Byb29mbWVJZC8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvY2pzL2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2Nqcy9vcGVyYXRvcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vc3JjL2VudW1zL2NsYWltVHlwZXMuZW51bS50cyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9zcmMvZW51bXMvZGlkQWNjZXNzTGV2ZWwuZW51bS50cyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9zcmMvZW51bXMvbWltZVR5cGVzLmVudW0udHMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vc3JjL2VudW1zL3Byb29mbWVEYXRhUHVycG9zZS50cyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9zcmMvZW51bXMvcHJvb2ZtZURhdGFTdG9yYWdlLnRzIiwid2VicGFjazovL1Byb29mbWVJZC8uL3NyYy9lbnVtcy9zaWduYXR1cmVUeXBlcy5lbnVtLnRzIiwid2VicGFjazovL1Byb29mbWVJZC8uL3NyYy9oZWxwZXJzL3NpZ25hbEhlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vc3JjL3Byb29mbWUtdXRpbHMucHJvdmlkZXIudHMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vc3JjL3Byb29mbWUtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vc3JjL3NpZ25hbFNlcnZlci9zaWduYWxTZXJ2ZXJWMi50cyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9zcmMvc2lnbmFsaW5nU2VydmVyLnRzIiwid2VicGFjazovL1Byb29mbWVJZC8uL3NyYy9zbWFydGNvbnRyYWN0cy9jbGFpbUhvbGRlckFiaS50cyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9zcmMvc21hcnRjb250cmFjdHMvaWRlbnRpdHkudHMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vc3JjL3V0aWxzL2dsb2JhbC92MVV0aWxzLnRzIiwid2VicGFjazovL1Byb29mbWVJZC8uL3NyYy91dGlscy9zbWFydENvbnRyYWN0cy9zbWFydENvbnRyYWN0VXRpbHMudHMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkLy4vc3JjL3dlYlJ0Yy5wcm92aWRlci50cyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9zcmMvd2ViUnRjQ2xpZW50VjIudHMiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkL2V4dGVybmFsIGNvbW1vbmpzIFwicnhqc1wiIiwid2VicGFjazovL1Byb29mbWVJZC9leHRlcm5hbCBjb21tb25qcyBcInV1aWRcIiIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvZXh0ZXJuYWwgY29tbW9uanMgXCJ3ZWIzXCIiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkL2V4dGVybmFsIGNvbW1vbmpzIFwid2Vic29ja2V0XCIiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkL2V4dGVybmFsIGNvbW1vbmpzIFwid3J0Y1wiIiwid2VicGFjazovL1Byb29mbWVJZC9leHRlcm5hbCBjb21tb25qcyBcIndzXCIiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJjcnlwdG9cIiIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29yZS9mZXNtMjAxNS9jb3JlLm1qcyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vUHJvb2ZtZUlkL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9Qcm9vZm1lSWQvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiUHJvb2ZtZUlkXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlByb29mbWVJZFwiXSA9IGZhY3RvcnkoKTtcbn0pKGdsb2JhbCwgZnVuY3Rpb24oKSB7XG5yZXR1cm4gIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Bc3luY1N1YmplY3QgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4vU3ViamVjdFwiKTtcbnZhciBBc3luY1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZhbHVlID0gbnVsbDtcbiAgICAgICAgX3RoaXMuX2hhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9pc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIF9oYXNWYWx1ZSA9IF9hLl9oYXNWYWx1ZSwgX3ZhbHVlID0gX2EuX3ZhbHVlLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIF9pc0NvbXBsZXRlID0gX2EuX2lzQ29tcGxldGU7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdG9wcGVkIHx8IF9pc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICBfaGFzVmFsdWUgJiYgc3Vic2NyaWJlci5uZXh0KF92YWx1ZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEFzeW5jU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5faGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY1N1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfaGFzVmFsdWUgPSBfYS5faGFzVmFsdWUsIF92YWx1ZSA9IF9hLl92YWx1ZSwgX2lzQ29tcGxldGUgPSBfYS5faXNDb21wbGV0ZTtcbiAgICAgICAgaWYgKCFfaXNDb21wbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5faXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICBfaGFzVmFsdWUgJiYgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgX3ZhbHVlKTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUuY29tcGxldGUuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU3ViamVjdDtcbn0oU3ViamVjdF8xLlN1YmplY3QpKTtcbmV4cG9ydHMuQXN5bmNTdWJqZWN0ID0gQXN5bmNTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNTdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQmVoYXZpb3JTdWJqZWN0ID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuL1N1YmplY3RcIik7XG52YXIgQmVoYXZpb3JTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQmVoYXZpb3JTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEJlaGF2aW9yU3ViamVjdChfdmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3ZhbHVlID0gX3ZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdXBlci5wcm90b3R5cGUuX3N1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgICAgICAhc3Vic2NyaXB0aW9uLmNsb3NlZCAmJiBzdWJzY3JpYmVyLm5leHQodGhpcy5fdmFsdWUpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgdGhyb3duRXJyb3IgPSBfYS50aHJvd25FcnJvciwgX3ZhbHVlID0gX2EuX3ZhbHVlO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IHRocm93bkVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5leHQuY2FsbCh0aGlzLCAodGhpcy5fdmFsdWUgPSB2YWx1ZSkpO1xuICAgIH07XG4gICAgcmV0dXJuIEJlaGF2aW9yU3ViamVjdDtcbn0oU3ViamVjdF8xLlN1YmplY3QpKTtcbmV4cG9ydHMuQmVoYXZpb3JTdWJqZWN0ID0gQmVoYXZpb3JTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5vYnNlcnZlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5Ob3RpZmljYXRpb24gPSBleHBvcnRzLk5vdGlmaWNhdGlvbktpbmQgPSB2b2lkIDA7XG52YXIgZW1wdHlfMSA9IHJlcXVpcmUoXCIuL29ic2VydmFibGUvZW1wdHlcIik7XG52YXIgb2ZfMSA9IHJlcXVpcmUoXCIuL29ic2VydmFibGUvb2ZcIik7XG52YXIgdGhyb3dFcnJvcl8xID0gcmVxdWlyZShcIi4vb2JzZXJ2YWJsZS90aHJvd0Vycm9yXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBOb3RpZmljYXRpb25LaW5kO1xuKGZ1bmN0aW9uIChOb3RpZmljYXRpb25LaW5kKSB7XG4gICAgTm90aWZpY2F0aW9uS2luZFtcIk5FWFRcIl0gPSBcIk5cIjtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiRVJST1JcIl0gPSBcIkVcIjtcbiAgICBOb3RpZmljYXRpb25LaW5kW1wiQ09NUExFVEVcIl0gPSBcIkNcIjtcbn0pKE5vdGlmaWNhdGlvbktpbmQgPSBleHBvcnRzLk5vdGlmaWNhdGlvbktpbmQgfHwgKGV4cG9ydHMuTm90aWZpY2F0aW9uS2luZCA9IHt9KSk7XG52YXIgTm90aWZpY2F0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLmhhc1ZhbHVlID0ga2luZCA9PT0gJ04nO1xuICAgIH1cbiAgICBOb3RpZmljYXRpb24ucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVOb3RpZmljYXRpb24odGhpcywgb2JzZXJ2ZXIpO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChuZXh0SGFuZGxlciwgZXJyb3JIYW5kbGVyLCBjb21wbGV0ZUhhbmRsZXIpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywga2luZCA9IF9hLmtpbmQsIHZhbHVlID0gX2EudmFsdWUsIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgIHJldHVybiBraW5kID09PSAnTicgPyBuZXh0SGFuZGxlciA9PT0gbnVsbCB8fCBuZXh0SGFuZGxlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmV4dEhhbmRsZXIodmFsdWUpIDoga2luZCA9PT0gJ0UnID8gZXJyb3JIYW5kbGVyID09PSBudWxsIHx8IGVycm9ySGFuZGxlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3JIYW5kbGVyKGVycm9yKSA6IGNvbXBsZXRlSGFuZGxlciA9PT0gbnVsbCB8fCBjb21wbGV0ZUhhbmRsZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbXBsZXRlSGFuZGxlcigpO1xuICAgIH07XG4gICAgTm90aWZpY2F0aW9uLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbiAobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbigoX2EgPSBuZXh0T3JPYnNlcnZlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5leHQpXG4gICAgICAgICAgICA/IHRoaXMub2JzZXJ2ZShuZXh0T3JPYnNlcnZlcilcbiAgICAgICAgICAgIDogdGhpcy5kbyhuZXh0T3JPYnNlcnZlciwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5wcm90b3R5cGUudG9PYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBraW5kID0gX2Eua2luZCwgdmFsdWUgPSBfYS52YWx1ZSwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGtpbmQgPT09ICdOJ1xuICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgIG9mXzEub2YodmFsdWUpXG4gICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAga2luZCA9PT0gJ0UnXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93RXJyb3JfMS50aHJvd0Vycm9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yOyB9KVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBraW5kID09PSAnQydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5XzEuRU1QVFlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5leHBlY3RlZCBub3RpZmljYXRpb24ga2luZCBcIiArIGtpbmQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY3JlYXRlTmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbmV3IE5vdGlmaWNhdGlvbignTicsIHZhbHVlKTtcbiAgICB9O1xuICAgIE5vdGlmaWNhdGlvbi5jcmVhdGVFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycik7XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBOb3RpZmljYXRpb24uY29tcGxldGVOb3RpZmljYXRpb247XG4gICAgfTtcbiAgICBOb3RpZmljYXRpb24uY29tcGxldGVOb3RpZmljYXRpb24gPSBuZXcgTm90aWZpY2F0aW9uKCdDJyk7XG4gICAgcmV0dXJuIE5vdGlmaWNhdGlvbjtcbn0oKSk7XG5leHBvcnRzLk5vdGlmaWNhdGlvbiA9IE5vdGlmaWNhdGlvbjtcbmZ1bmN0aW9uIG9ic2VydmVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBvYnNlcnZlcikge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIHZhciBfZCA9IG5vdGlmaWNhdGlvbiwga2luZCA9IF9kLmtpbmQsIHZhbHVlID0gX2QudmFsdWUsIGVycm9yID0gX2QuZXJyb3I7XG4gICAgaWYgKHR5cGVvZiBraW5kICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIG5vdGlmaWNhdGlvbiwgbWlzc2luZyBcImtpbmRcIicpO1xuICAgIH1cbiAgICBraW5kID09PSAnTicgPyAoX2EgPSBvYnNlcnZlci5uZXh0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChvYnNlcnZlciwgdmFsdWUpIDoga2luZCA9PT0gJ0UnID8gKF9iID0gb2JzZXJ2ZXIuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKG9ic2VydmVyLCBlcnJvcikgOiAoX2MgPSBvYnNlcnZlci5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwob2JzZXJ2ZXIpO1xufVxuZXhwb3J0cy5vYnNlcnZlTm90aWZpY2F0aW9uID0gb2JzZXJ2ZU5vdGlmaWNhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlTm90aWZpY2F0aW9uID0gZXhwb3J0cy5uZXh0Tm90aWZpY2F0aW9uID0gZXhwb3J0cy5lcnJvck5vdGlmaWNhdGlvbiA9IGV4cG9ydHMuQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gdm9pZCAwO1xuZXhwb3J0cy5DT01QTEVURV9OT1RJRklDQVRJT04gPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdDJywgdW5kZWZpbmVkLCB1bmRlZmluZWQpOyB9KSgpO1xuZnVuY3Rpb24gZXJyb3JOb3RpZmljYXRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnJvcik7XG59XG5leHBvcnRzLmVycm9yTm90aWZpY2F0aW9uID0gZXJyb3JOb3RpZmljYXRpb247XG5mdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0cy5uZXh0Tm90aWZpY2F0aW9uID0gbmV4dE5vdGlmaWNhdGlvbjtcbmZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuZXhwb3J0cy5jcmVhdGVOb3RpZmljYXRpb24gPSBjcmVhdGVOb3RpZmljYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ob3RpZmljYXRpb25GYWN0b3JpZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk9ic2VydmFibGUgPSB2b2lkIDA7XG52YXIgU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vU3Vic2NyaWJlclwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmlwdGlvblwiKTtcbnZhciBvYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi9zeW1ib2wvb2JzZXJ2YWJsZVwiKTtcbnZhciBwaXBlXzEgPSByZXF1aXJlKFwiLi91dGlsL3BpcGVcIik7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIGVycm9yQ29udGV4dF8xID0gcmVxdWlyZShcIi4vdXRpbC9lcnJvckNvbnRleHRcIik7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTdWJzY3JpYmVyXzEuU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICAgIGVycm9yQ29udGV4dF8xLmVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBfdGhpcywgb3BlcmF0b3IgPSBfYS5vcGVyYXRvciwgc291cmNlID0gX2Euc291cmNlO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQob3BlcmF0b3JcbiAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yLmNhbGwoc3Vic2NyaWJlciwgc291cmNlKVxuICAgICAgICAgICAgICAgIDogc291cmNlXG4gICAgICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgICAgICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RyeVN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3Vic2NyaWJlcjtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc2luaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBzaW5rLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAobmV4dCwgcHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmliZXIgPSBuZXcgU3Vic2NyaWJlcl8xLlNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbb2JzZXJ2YWJsZV8xLm9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVfMS5waXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0cy5PYnNlcnZhYmxlID0gT2JzZXJ2YWJsZTtcbmZ1bmN0aW9uIGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSBwcm9taXNlQ3RvciAhPT0gbnVsbCAmJiBwcm9taXNlQ3RvciAhPT0gdm9pZCAwID8gcHJvbWlzZUN0b3IgOiBjb25maWdfMS5jb25maWcuUHJvbWlzZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogUHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGlzT2JzZXJ2ZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlLmNvbXBsZXRlKTtcbn1cbmZ1bmN0aW9uIGlzU3Vic2NyaWJlcih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgJiYgdmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpYmVyXzEuU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIFN1YnNjcmlwdGlvbl8xLmlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUmVwbGF5U3ViamVjdCA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi9TdWJqZWN0XCIpO1xudmFyIGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlclwiKTtcbnZhciBSZXBsYXlTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoUmVwbGF5U3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBSZXBsYXlTdWJqZWN0KF9idWZmZXJTaXplLCBfd2luZG93VGltZSwgX3RpbWVzdGFtcFByb3ZpZGVyKSB7XG4gICAgICAgIGlmIChfYnVmZmVyU2l6ZSA9PT0gdm9pZCAwKSB7IF9idWZmZXJTaXplID0gSW5maW5pdHk7IH1cbiAgICAgICAgaWYgKF93aW5kb3dUaW1lID09PSB2b2lkIDApIHsgX3dpbmRvd1RpbWUgPSBJbmZpbml0eTsgfVxuICAgICAgICBpZiAoX3RpbWVzdGFtcFByb3ZpZGVyID09PSB2b2lkIDApIHsgX3RpbWVzdGFtcFByb3ZpZGVyID0gZGF0ZVRpbWVzdGFtcFByb3ZpZGVyXzEuZGF0ZVRpbWVzdGFtcFByb3ZpZGVyOyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9idWZmZXJTaXplID0gX2J1ZmZlclNpemU7XG4gICAgICAgIF90aGlzLl93aW5kb3dUaW1lID0gX3dpbmRvd1RpbWU7XG4gICAgICAgIF90aGlzLl90aW1lc3RhbXBQcm92aWRlciA9IF90aW1lc3RhbXBQcm92aWRlcjtcbiAgICAgICAgX3RoaXMuX2J1ZmZlciA9IFtdO1xuICAgICAgICBfdGhpcy5faW5maW5pdGVUaW1lV2luZG93ID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuX2luZmluaXRlVGltZVdpbmRvdyA9IF93aW5kb3dUaW1lID09PSBJbmZpbml0eTtcbiAgICAgICAgX3RoaXMuX2J1ZmZlclNpemUgPSBNYXRoLm1heCgxLCBfYnVmZmVyU2l6ZSk7XG4gICAgICAgIF90aGlzLl93aW5kb3dUaW1lID0gTWF0aC5tYXgoMSwgX3dpbmRvd1RpbWUpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBfYnVmZmVyID0gX2EuX2J1ZmZlciwgX2luZmluaXRlVGltZVdpbmRvdyA9IF9hLl9pbmZpbml0ZVRpbWVXaW5kb3csIF90aW1lc3RhbXBQcm92aWRlciA9IF9hLl90aW1lc3RhbXBQcm92aWRlciwgX3dpbmRvd1RpbWUgPSBfYS5fd2luZG93VGltZTtcbiAgICAgICAgaWYgKCFpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIF9idWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAhX2luZmluaXRlVGltZVdpbmRvdyAmJiBfYnVmZmVyLnB1c2goX3RpbWVzdGFtcFByb3ZpZGVyLm5vdygpICsgX3dpbmRvd1RpbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RyaW1CdWZmZXIoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fdHJpbUJ1ZmZlcigpO1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9pbmZpbml0ZVRpbWVXaW5kb3cgPSBfYS5faW5maW5pdGVUaW1lV2luZG93LCBfYnVmZmVyID0gX2EuX2J1ZmZlcjtcbiAgICAgICAgdmFyIGNvcHkgPSBfYnVmZmVyLnNsaWNlKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29weS5sZW5ndGggJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpICs9IF9pbmZpbml0ZVRpbWVXaW5kb3cgPyAxIDogMikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGNvcHlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMoc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfTtcbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5fdHJpbUJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgX2J1ZmZlclNpemUgPSBfYS5fYnVmZmVyU2l6ZSwgX3RpbWVzdGFtcFByb3ZpZGVyID0gX2EuX3RpbWVzdGFtcFByb3ZpZGVyLCBfYnVmZmVyID0gX2EuX2J1ZmZlciwgX2luZmluaXRlVGltZVdpbmRvdyA9IF9hLl9pbmZpbml0ZVRpbWVXaW5kb3c7XG4gICAgICAgIHZhciBhZGp1c3RlZEJ1ZmZlclNpemUgPSAoX2luZmluaXRlVGltZVdpbmRvdyA/IDEgOiAyKSAqIF9idWZmZXJTaXplO1xuICAgICAgICBfYnVmZmVyU2l6ZSA8IEluZmluaXR5ICYmIGFkanVzdGVkQnVmZmVyU2l6ZSA8IF9idWZmZXIubGVuZ3RoICYmIF9idWZmZXIuc3BsaWNlKDAsIF9idWZmZXIubGVuZ3RoIC0gYWRqdXN0ZWRCdWZmZXJTaXplKTtcbiAgICAgICAgaWYgKCFfaW5maW5pdGVUaW1lV2luZG93KSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gX3RpbWVzdGFtcFByb3ZpZGVyLm5vdygpO1xuICAgICAgICAgICAgdmFyIGxhc3QgPSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBfYnVmZmVyLmxlbmd0aCAmJiBfYnVmZmVyW2ldIDw9IG5vdzsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgbGFzdCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0ICYmIF9idWZmZXIuc3BsaWNlKDAsIGxhc3QgKyAxKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFJlcGxheVN1YmplY3Q7XG59KFN1YmplY3RfMS5TdWJqZWN0KSk7XG5leHBvcnRzLlJlcGxheVN1YmplY3QgPSBSZXBsYXlTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UmVwbGF5U3ViamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2NoZWR1bGVyID0gdm9pZCAwO1xudmFyIGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlclwiKTtcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlcl8xLmRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnRzLlNjaGVkdWxlciA9IFNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFub255bW91c1N1YmplY3QgPSBleHBvcnRzLlN1YmplY3QgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuL1N1YnNjcmlwdGlvblwiKTtcbnZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xID0gcmVxdWlyZShcIi4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvclwiKTtcbnZhciBhcnJSZW1vdmVfMSA9IHJlcXVpcmUoXCIuL3V0aWwvYXJyUmVtb3ZlXCIpO1xudmFyIGVycm9yQ29udGV4dF8xID0gcmVxdWlyZShcIi4vdXRpbC9lcnJvckNvbnRleHRcIik7XG52YXIgU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3ViamVjdCgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90aHJvd0lmQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcl8xLk9iamVjdFVuc3Vic2NyaWJlZEVycm9yKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0XzEuZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvcHkgPSBfdGhpcy5vYnNlcnZlcnMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjb3B5XzEgPSBfX3ZhbHVlcyhjb3B5KSwgY29weV8xXzEgPSBjb3B5XzEubmV4dCgpOyAhY29weV8xXzEuZG9uZTsgY29weV8xXzEgPSBjb3B5XzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBjb3B5XzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29weV8xXzEgJiYgIWNvcHlfMV8xLmRvbmUgJiYgKF9hID0gY29weV8xLnJldHVybikpIF9hLmNhbGwoY29weV8xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHRfMS5lcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBfdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLnRocm93bkVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBfdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dF8xLmVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBfdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgICAgICAgICAgd2hpbGUgKG9ic2VydmVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9ic2VydmVycyA9IG51bGw7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3ViamVjdC5wcm90b3R5cGUsIFwib2JzZXJ2ZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5vYnNlcnZlcnMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5sZW5ndGgpID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHJldHVybiBfc3VwZXIucHJvdG90eXBlLl90cnlTdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHRoaXMuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMoc3Vic2NyaWJlcik7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lclN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9pbm5lclN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZCwgb2JzZXJ2ZXJzID0gX2Eub2JzZXJ2ZXJzO1xuICAgICAgICByZXR1cm4gaGFzRXJyb3IgfHwgaXNTdG9wcGVkXG4gICAgICAgICAgICA/IFN1YnNjcmlwdGlvbl8xLkVNUFRZX1NVQlNDUklQVElPTlxuICAgICAgICAgICAgOiAob2JzZXJ2ZXJzLnB1c2goc3Vic2NyaWJlciksIG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJyUmVtb3ZlXzEuYXJyUmVtb3ZlKG9ic2VydmVycywgc3Vic2NyaWJlcik7IH0pKTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgdGhyb3duRXJyb3IgPSBfYS50aHJvd25FcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkO1xuICAgICAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IodGhyb3duRXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5hc09ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvYnNlcnZhYmxlID0gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZSkpO1xuZXhwb3J0cy5TdWJqZWN0ID0gU3ViamVjdDtcbnZhciBBbm9ueW1vdXNTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQW5vbnltb3VzU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBbm9ueW1vdXNTdWJqZWN0KGRlc3RpbmF0aW9uLCBzb3VyY2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm5leHQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCB2YWx1ZSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgZXJyKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29tcGxldGUpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5zb3VyY2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdWJzY3JpYmUoc3Vic2NyaWJlcikpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFN1YnNjcmlwdGlvbl8xLkVNUFRZX1NVQlNDUklQVElPTjtcbiAgICB9O1xuICAgIHJldHVybiBBbm9ueW1vdXNTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnRzLkFub255bW91c1N1YmplY3QgPSBBbm9ueW1vdXNTdWJqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVNUFRZX09CU0VSVkVSID0gZXhwb3J0cy5TYWZlU3Vic2NyaWJlciA9IGV4cG9ydHMuU3Vic2NyaWJlciA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi9TdWJzY3JpcHRpb25cIik7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiLi9jb25maWdcIik7XG52YXIgcmVwb3J0VW5oYW5kbGVkRXJyb3JfMSA9IHJlcXVpcmUoXCIuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3JcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4vdXRpbC9ub29wXCIpO1xudmFyIE5vdGlmaWNhdGlvbkZhY3Rvcmllc18xID0gcmVxdWlyZShcIi4vTm90aWZpY2F0aW9uRmFjdG9yaWVzXCIpO1xudmFyIHRpbWVvdXRQcm92aWRlcl8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlclwiKTtcbnZhciBlcnJvckNvbnRleHRfMSA9IHJlcXVpcmUoXCIuL3V0aWwvZXJyb3JDb250ZXh0XCIpO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChTdWJzY3JpcHRpb25fMS5pc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBleHBvcnRzLkVNUFRZX09CU0VSVkVSO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2FmZVN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKE5vdGlmaWNhdGlvbkZhY3Rvcmllc18xLm5leHROb3RpZmljYXRpb24odmFsdWUpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKE5vdGlmaWNhdGlvbkZhY3Rvcmllc18xLmVycm9yTm90aWZpY2F0aW9uKGVyciksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihOb3RpZmljYXRpb25GYWN0b3JpZXNfMS5DT01QTEVURV9OT1RJRklDQVRJT04sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24pKTtcbmV4cG9ydHMuU3Vic2NyaWJlciA9IFN1YnNjcmliZXI7XG52YXIgX2JpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbmZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gX2JpbmQuY2FsbChmbiwgdGhpc0FyZyk7XG59XG52YXIgQ29uc3VtZXJPYnNlcnZlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5wYXJ0aWFsT2JzZXJ2ZXIgPSBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgfVxuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmVycm9yKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIENvbnN1bWVyT2JzZXJ2ZXI7XG59KCkpO1xudmFyIFNhZmVTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU2FmZVN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU2FmZVN1YnNjcmliZXIob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0ICE9PSBudWxsICYmIG9ic2VydmVyT3JOZXh0ICE9PSB2b2lkIDAgPyBvYnNlcnZlck9yTmV4dCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMTtcbiAgICAgICAgICAgIGlmIChfdGhpcyAmJiBjb25maWdfMS5jb25maWcudXNlRGVwcmVjYXRlZE5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuY29tcGxldGUsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydHMuU2FmZVN1YnNjcmliZXIgPSBTYWZlU3Vic2NyaWJlcjtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGVycm9yQ29udGV4dF8xLmNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcl8xLnJlcG9ydFVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JIYW5kbGVyKGVycikge1xuICAgIHRocm93IGVycjtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiA9IGNvbmZpZ18xLmNvbmZpZy5vblN0b3BwZWROb3RpZmljYXRpb247XG4gICAgb25TdG9wcGVkTm90aWZpY2F0aW9uICYmIHRpbWVvdXRQcm92aWRlcl8xLnRpbWVvdXRQcm92aWRlci5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydHMuRU1QVFlfT0JTRVJWRVIgPSB7XG4gICAgY2xvc2VkOiB0cnVlLFxuICAgIG5leHQ6IG5vb3BfMS5ub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wXzEubm9vcCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fdmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX3ZhbHVlcykgfHwgZnVuY3Rpb24obykge1xuICAgIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG59O1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNTdWJzY3JpcHRpb24gPSBleHBvcnRzLkVNUFRZX1NVQlNDUklQVElPTiA9IGV4cG9ydHMuU3Vic2NyaXB0aW9uID0gdm9pZCAwO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBVbnN1YnNjcmlwdGlvbkVycm9yXzEgPSByZXF1aXJlKFwiLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3JcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi91dGlsL2FyclJlbW92ZVwiKTtcbnZhciBTdWJzY3JpcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihpbml0aWFsVGVhcmRvd24pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsVGVhcmRvd24gPSBpbml0aWFsVGVhcmRvd247XG4gICAgICAgIHRoaXMuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RlYXJkb3ducyA9IG51bGw7XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hLCBlXzIsIF9iO1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgICAgIGlmIChfcGFyZW50YWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3BhcmVudGFnZV8xID0gX192YWx1ZXMoX3BhcmVudGFnZSksIF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKTsgIV9wYXJlbnRhZ2VfMV8xLmRvbmU7IF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRhZ2VfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2VfMV8xICYmICFfcGFyZW50YWdlXzFfMS5kb25lICYmIChfYSA9IF9wYXJlbnRhZ2VfMS5yZXR1cm4pKSBfYS5jYWxsKF9wYXJlbnRhZ2VfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRhZ2UucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbml0aWFsVGVhcmRvd24gPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihpbml0aWFsVGVhcmRvd24pKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFRlYXJkb3duKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGUgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yXzEuVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfdGVhcmRvd25zID0gdGhpcy5fdGVhcmRvd25zO1xuICAgICAgICAgICAgaWYgKF90ZWFyZG93bnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZWFyZG93bnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90ZWFyZG93bnNfMSA9IF9fdmFsdWVzKF90ZWFyZG93bnMpLCBfdGVhcmRvd25zXzFfMSA9IF90ZWFyZG93bnNfMS5uZXh0KCk7ICFfdGVhcmRvd25zXzFfMS5kb25lOyBfdGVhcmRvd25zXzFfMSA9IF90ZWFyZG93bnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZWFyZG93bl8xID0gX3RlYXJkb3duc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNUZWFyZG93bih0ZWFyZG93bl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gX19zcHJlYWRBcnJheShfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoZXJyb3JzKSksIF9fcmVhZChlcnIuZXJyb3JzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90ZWFyZG93bnNfMV8xICYmICFfdGVhcmRvd25zXzFfMS5kb25lICYmIChfYiA9IF90ZWFyZG93bnNfMS5yZXR1cm4pKSBfYi5jYWxsKF90ZWFyZG93bnNfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcl8xLlVuc3Vic2NyaXB0aW9uRXJyb3IoZXJyb3JzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGVhcmRvd24gJiYgdGVhcmRvd24gIT09IHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIGV4ZWNUZWFyZG93bih0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duLmNsb3NlZCB8fCB0ZWFyZG93bi5faGFzUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKHRoaXMuX3RlYXJkb3ducyA9IChfYSA9IHRoaXMuX3RlYXJkb3ducykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10pLnB1c2godGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9oYXNQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICByZXR1cm4gX3BhcmVudGFnZSA9PT0gcGFyZW50IHx8IChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpICYmIF9wYXJlbnRhZ2UuaW5jbHVkZXMocGFyZW50KSk7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hZGRQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpID8gKF9wYXJlbnRhZ2UucHVzaChwYXJlbnQpLCBfcGFyZW50YWdlKSA6IF9wYXJlbnRhZ2UgPyBbX3BhcmVudGFnZSwgcGFyZW50XSA6IHBhcmVudDtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX3JlbW92ZVBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIGlmIChfcGFyZW50YWdlID09PSBwYXJlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgYXJyUmVtb3ZlXzEuYXJyUmVtb3ZlKF9wYXJlbnRhZ2UsIHBhcmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfdGVhcmRvd25zID0gdGhpcy5fdGVhcmRvd25zO1xuICAgICAgICBfdGVhcmRvd25zICYmIGFyclJlbW92ZV8xLmFyclJlbW92ZShfdGVhcmRvd25zLCB0ZWFyZG93bik7XG4gICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGVhcmRvd24uX3JlbW92ZVBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydHMuU3Vic2NyaXB0aW9uID0gU3Vic2NyaXB0aW9uO1xuZXhwb3J0cy5FTVBUWV9TVUJTQ1JJUFRJT04gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5mdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHZhbHVlLnJlbW92ZSkgJiYgaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmV4cG9ydHMuaXNTdWJzY3JpcHRpb24gPSBpc1N1YnNjcmlwdGlvbjtcbmZ1bmN0aW9uIGV4ZWNUZWFyZG93bih0ZWFyZG93bikge1xuICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih0ZWFyZG93bikpIHtcbiAgICAgICAgdGVhcmRvd24oKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRlYXJkb3duLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3Vic2NyaXB0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25maWcgPSB2b2lkIDA7XG5leHBvcnRzLmNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25uZWN0YWJsZU9ic2VydmFibGUgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIHJlZkNvdW50XzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL3JlZkNvdW50XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBDb25uZWN0YWJsZU9ic2VydmFibGUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhDb25uZWN0YWJsZU9ic2VydmFibGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29ubmVjdGFibGVPYnNlcnZhYmxlKHNvdXJjZSwgc3ViamVjdEZhY3RvcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgICAgICBfdGhpcy5zdWJqZWN0RmFjdG9yeSA9IHN1YmplY3RGYWN0b3J5O1xuICAgICAgICBfdGhpcy5fc3ViamVjdCA9IG51bGw7XG4gICAgICAgIF90aGlzLl9yZWZDb3VudCA9IDA7XG4gICAgICAgIF90aGlzLl9jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKGxpZnRfMS5oYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIF90aGlzLmxpZnQgPSBzb3VyY2UubGlmdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN1YmplY3QoKS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBDb25uZWN0YWJsZU9ic2VydmFibGUucHJvdG90eXBlLmdldFN1YmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gdGhpcy5fc3ViamVjdDtcbiAgICAgICAgaWYgKCFzdWJqZWN0IHx8IHN1YmplY3QuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJqZWN0ID0gdGhpcy5zdWJqZWN0RmFjdG9yeSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zdWJqZWN0O1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5fdGVhcmRvd24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3JlZkNvdW50ID0gMDtcbiAgICAgICAgdmFyIF9jb25uZWN0aW9uID0gdGhpcy5fY29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5fc3ViamVjdCA9IHRoaXMuX2Nvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICBfY29ubmVjdGlvbiA9PT0gbnVsbCB8fCBfY29ubmVjdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Nvbm5lY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIENvbm5lY3RhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuY29ubmVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSB0aGlzLl9jb25uZWN0aW9uO1xuICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSB0aGlzLl9jb25uZWN0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdmFyIHN1YmplY3RfMSA9IHRoaXMuZ2V0U3ViamVjdCgpO1xuICAgICAgICAgICAgY29ubmVjdGlvbi5hZGQodGhpcy5zb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJqZWN0XzEsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl90ZWFyZG93bigpO1xuICAgICAgICAgICAgICAgIHN1YmplY3RfMS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIF90aGlzLl90ZWFyZG93bigpO1xuICAgICAgICAgICAgICAgIHN1YmplY3RfMS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3RlYXJkb3duKCk7IH0pKSk7XG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uLkVNUFRZO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uO1xuICAgIH07XG4gICAgQ29ubmVjdGFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5yZWZDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlZkNvdW50XzEucmVmQ291bnQoKSh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBDb25uZWN0YWJsZU9ic2VydmFibGU7XG59KE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSk7XG5leHBvcnRzLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZSA9IENvbm5lY3RhYmxlT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUNvbm5lY3RhYmxlT2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tYmluZUxhdGVzdEluaXQgPSBleHBvcnRzLmNvbWJpbmVMYXRlc3QgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgYXJnc0FyZ0FycmF5T3JPYmplY3RfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0XCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2Zyb21cIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xudmFyIG1hcE9uZU9yTWFueUFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL21hcE9uZU9yTWFueUFyZ3NcIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbnZhciBjcmVhdGVPYmplY3RfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2NyZWF0ZU9iamVjdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGV4ZWN1dGVTY2hlZHVsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlXCIpO1xuZnVuY3Rpb24gY29tYmluZUxhdGVzdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHNjaGVkdWxlciA9IGFyZ3NfMS5wb3BTY2hlZHVsZXIoYXJncyk7XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gYXJnc18xLnBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0XzEuYXJnc0FyZ0FycmF5T3JPYmplY3QoYXJncyksIG9ic2VydmFibGVzID0gX2EuYXJncywga2V5cyA9IF9hLmtleXM7XG4gICAgaWYgKG9ic2VydmFibGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZnJvbV8xLmZyb20oW10sIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoY29tYmluZUxhdGVzdEluaXQob2JzZXJ2YWJsZXMsIHNjaGVkdWxlciwga2V5c1xuICAgICAgICA/XG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWVzKSB7IHJldHVybiBjcmVhdGVPYmplY3RfMS5jcmVhdGVPYmplY3Qoa2V5cywgdmFsdWVzKTsgfVxuICAgICAgICA6XG4gICAgICAgICAgICBpZGVudGl0eV8xLmlkZW50aXR5KSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJnc18xLm1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKSA6IHJlc3VsdDtcbn1cbmV4cG9ydHMuY29tYmluZUxhdGVzdCA9IGNvbWJpbmVMYXRlc3Q7XG5mdW5jdGlvbiBjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCB2YWx1ZVRyYW5zZm9ybSkge1xuICAgIGlmICh2YWx1ZVRyYW5zZm9ybSA9PT0gdm9pZCAwKSB7IHZhbHVlVHJhbnNmb3JtID0gaWRlbnRpdHlfMS5pZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRmlyc3RWYWx1ZXMgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZyb21fMS5mcm9tKG9ic2VydmFibGVzW2ldLCBzY2hlZHVsZXIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFzRmlyc3RWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNGaXJzdFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRmlyc3RWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nRmlyc3RWYWx1ZXMtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVtYWluaW5nRmlyc3RWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWVUcmFuc2Zvcm0odmFsdWVzLnNsaWNlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBzdWJzY3JpYmVyKTtcbiAgICB9O1xufVxuZXhwb3J0cy5jb21iaW5lTGF0ZXN0SW5pdCA9IGNvbWJpbmVMYXRlc3RJbml0O1xuZnVuY3Rpb24gbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGV4ZWN1dGUsIHN1YnNjcmlwdGlvbikge1xuICAgIGlmIChzY2hlZHVsZXIpIHtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmlwdGlvbiwgc2NoZWR1bGVyLCBleGVjdXRlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGV4ZWN1dGUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lTGF0ZXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25jYXQgPSB2b2lkIDA7XG52YXIgY29uY2F0QWxsXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL2NvbmNhdEFsbFwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuL2Zyb21cIik7XG5mdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBjb25jYXRBbGxfMS5jb25jYXRBbGwoKShmcm9tXzEuZnJvbShhcmdzLCBhcmdzXzEucG9wU2NoZWR1bGVyKGFyZ3MpKSk7XG59XG5leHBvcnRzLmNvbmNhdCA9IGNvbmNhdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZW1wdHkgPSBleHBvcnRzLkVNUFRZID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xuZXhwb3J0cy5FTVBUWSA9IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikgeyByZXR1cm4gc3Vic2NyaWJlci5jb21wbGV0ZSgpOyB9KTtcbmZ1bmN0aW9uIGVtcHR5KHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZXIgPyBlbXB0eVNjaGVkdWxlZChzY2hlZHVsZXIpIDogZXhwb3J0cy5FTVBUWTtcbn1cbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmZ1bmN0aW9uIGVtcHR5U2NoZWR1bGVkKHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0pOyB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVtcHR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tID0gdm9pZCAwO1xudmFyIHNjaGVkdWxlZF8xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlZC9zY2hlZHVsZWRcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi9pbm5lckZyb21cIik7XG5mdW5jdGlvbiBmcm9tKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gc2NoZWR1bGVyID8gc2NoZWR1bGVkXzEuc2NoZWR1bGVkKGlucHV0LCBzY2hlZHVsZXIpIDogaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGlucHV0KTtcbn1cbmV4cG9ydHMuZnJvbSA9IGZyb207XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5mcm9tU3Vic2NyaWJhYmxlID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xuZnVuY3Rpb24gZnJvbVN1YnNjcmliYWJsZShzdWJzY3JpYmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7IHJldHVybiBzdWJzY3JpYmFibGUuc3Vic2NyaWJlKHN1YnNjcmliZXIpOyB9KTtcbn1cbmV4cG9ydHMuZnJvbVN1YnNjcmliYWJsZSA9IGZyb21TdWJzY3JpYmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tU3Vic2NyaWJhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfX2FzeW5jVmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX2FzeW5jVmFsdWVzKSB8fCBmdW5jdGlvbiAobykge1xuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn07XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21SZWFkYWJsZVN0cmVhbUxpa2UgPSBleHBvcnRzLmZyb21Bc3luY0l0ZXJhYmxlID0gZXhwb3J0cy5mcm9tSXRlcmFibGUgPSBleHBvcnRzLmZyb21Qcm9taXNlID0gZXhwb3J0cy5mcm9tQXJyYXlMaWtlID0gZXhwb3J0cy5mcm9tSW50ZXJvcE9ic2VydmFibGUgPSBleHBvcnRzLmlubmVyRnJvbSA9IHZvaWQgMDtcbnZhciBpc0FycmF5TGlrZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNBcnJheUxpa2VcIik7XG52YXIgaXNQcm9taXNlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1Byb21pc2VcIik7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXNJbnRlcm9wT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZVwiKTtcbnZhciBpc0FzeW5jSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXN5bmNJdGVyYWJsZVwiKTtcbnZhciB0aHJvd1Vub2JzZXJ2YWJsZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yXCIpO1xudmFyIGlzSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzSXRlcmFibGVcIik7XG52YXIgaXNSZWFkYWJsZVN0cmVhbUxpa2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgcmVwb3J0VW5oYW5kbGVkRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yXCIpO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvb2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGVfMS5pc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlXzEuaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZV8xLmlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZV8xLmlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGVfMS5pc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlXzEuaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgdGhyb3dVbm9ic2VydmFibGVFcnJvcl8xLmNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbmV4cG9ydHMuaW5uZXJGcm9tID0gaW5uZXJGcm9tO1xuZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9icy5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tSW50ZXJvcE9ic2VydmFibGUgPSBmcm9tSW50ZXJvcE9ic2VydmFibGU7XG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21BcnJheUxpa2UgPSBmcm9tQXJyYXlMaWtlO1xuZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIHJlcG9ydFVuaGFuZGxlZEVycm9yXzEucmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5mcm9tUHJvbWlzZSA9IGZyb21Qcm9taXNlO1xuZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmZyb21JdGVyYWJsZSA9IGZyb21JdGVyYWJsZTtcbmZ1bmN0aW9uIGZyb21Bc3luY0l0ZXJhYmxlKGFzeW5jSXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZnJvbUFzeW5jSXRlcmFibGUgPSBmcm9tQXN5bmNJdGVyYWJsZTtcbmZ1bmN0aW9uIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUoaXNSZWFkYWJsZVN0cmVhbUxpa2VfMS5yZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5leHBvcnRzLmZyb21SZWFkYWJsZVN0cmVhbUxpa2UgPSBmcm9tUmVhZGFibGVTdHJlYW1MaWtlO1xuZnVuY3Rpb24gcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIGFzeW5jSXRlcmFibGVfMSwgYXN5bmNJdGVyYWJsZV8xXzE7XG4gICAgdmFyIGVfMiwgX2E7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUsIGVfMl8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDUsIDYsIDExXSk7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jSXRlcmFibGVfMSA9IF9fYXN5bmNWYWx1ZXMoYXN5bmNJdGVyYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCwgYXN5bmNJdGVyYWJsZV8xLm5leHQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSA9IF9iLnNlbnQoKSwgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUpKSByZXR1cm4gWzMsIDRdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFzeW5jSXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgZV8yXzEgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFs2LCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xICYmICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGFzeW5jSXRlcmFibGVfMS5yZXR1cm4pKSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfYS5jYWxsKGFzeW5jSXRlcmFibGVfMSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDg7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbm5lckZyb20uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmludGVydmFsID0gdm9pZCAwO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIHRpbWVyXzEgPSByZXF1aXJlKFwiLi90aW1lclwiKTtcbmZ1bmN0aW9uIGludGVydmFsKHBlcmlvZCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKHBlcmlvZCA9PT0gdm9pZCAwKSB7IHBlcmlvZCA9IDA7IH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIGlmIChwZXJpb2QgPCAwKSB7XG4gICAgICAgIHBlcmlvZCA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aW1lcl8xLnRpbWVyKHBlcmlvZCwgcGVyaW9kLCBzY2hlZHVsZXIpO1xufVxuZXhwb3J0cy5pbnRlcnZhbCA9IGludGVydmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJ2YWwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9mID0gdm9pZCAwO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4vZnJvbVwiKTtcbmZ1bmN0aW9uIG9mKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJnc18xLnBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICByZXR1cm4gZnJvbV8xLmZyb20oYXJncywgc2NoZWR1bGVyKTtcbn1cbmV4cG9ydHMub2YgPSBvZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9mLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yYWNlSW5pdCA9IGV4cG9ydHMucmFjZSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuL2lubmVyRnJvbVwiKTtcbnZhciBhcmdzT3JBcmdBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc09yQXJnQXJyYXlcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHJhY2UoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KHNvdXJjZXMpO1xuICAgIHJldHVybiBzb3VyY2VzLmxlbmd0aCA9PT0gMSA/IGlubmVyRnJvbV8xLmlubmVyRnJvbShzb3VyY2VzWzBdKSA6IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShyYWNlSW5pdChzb3VyY2VzKSk7XG59XG5leHBvcnRzLnJhY2UgPSByYWNlO1xuZnVuY3Rpb24gcmFjZUluaXQoc291cmNlcykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLnB1c2goaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHNvdXJjZXNbaV0pLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBzdWJzY3JpcHRpb25zLmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzICE9PSBpICYmIHN1YnNjcmlwdGlvbnNbc10udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25zID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH0pKSk7XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBzdWJzY3JpcHRpb25zICYmICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLnJhY2VJbml0ID0gcmFjZUluaXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yYWNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50aHJvd0Vycm9yID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiB0aHJvd0Vycm9yKGVycm9yT3JFcnJvckZhY3RvcnksIHNjaGVkdWxlcikge1xuICAgIHZhciBlcnJvckZhY3RvcnkgPSBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihlcnJvck9yRXJyb3JGYWN0b3J5KSA/IGVycm9yT3JFcnJvckZhY3RvcnkgOiBmdW5jdGlvbiAoKSB7IHJldHVybiBlcnJvck9yRXJyb3JGYWN0b3J5OyB9O1xuICAgIHZhciBpbml0ID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyb3JGYWN0b3J5KCkpOyB9O1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoc2NoZWR1bGVyID8gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHsgcmV0dXJuIHNjaGVkdWxlci5zY2hlZHVsZShpbml0LCAwLCBzdWJzY3JpYmVyKTsgfSA6IGluaXQpO1xufVxuZXhwb3J0cy50aHJvd0Vycm9yID0gdGhyb3dFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm93RXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRpbWVyID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIGlzU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1NjaGVkdWxlclwiKTtcbnZhciBpc0RhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRGF0ZVwiKTtcbmZ1bmN0aW9uIHRpbWVyKGR1ZVRpbWUsIGludGVydmFsT3JTY2hlZHVsZXIsIHNjaGVkdWxlcikge1xuICAgIGlmIChkdWVUaW1lID09PSB2b2lkIDApIHsgZHVlVGltZSA9IDA7IH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luYzsgfVxuICAgIHZhciBpbnRlcnZhbER1cmF0aW9uID0gLTE7XG4gICAgaWYgKGludGVydmFsT3JTY2hlZHVsZXIgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNTY2hlZHVsZXJfMS5pc1NjaGVkdWxlcihpbnRlcnZhbE9yU2NoZWR1bGVyKSkge1xuICAgICAgICAgICAgc2NoZWR1bGVyID0gaW50ZXJ2YWxPclNjaGVkdWxlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGludGVydmFsRHVyYXRpb24gPSBpbnRlcnZhbE9yU2NoZWR1bGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGR1ZSA9IGlzRGF0ZV8xLmlzVmFsaWREYXRlKGR1ZVRpbWUpID8gK2R1ZVRpbWUgLSBzY2hlZHVsZXIubm93KCkgOiBkdWVUaW1lO1xuICAgICAgICBpZiAoZHVlIDwgMCkge1xuICAgICAgICAgICAgZHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbiA9IDA7XG4gICAgICAgIHJldHVybiBzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChuKyspO1xuICAgICAgICAgICAgICAgIGlmICgwIDw9IGludGVydmFsRHVyYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIGludGVydmFsRHVyYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZHVlKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudGltZXIgPSB0aW1lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuemlwID0gdm9pZCAwO1xudmFyIE9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9PYnNlcnZhYmxlXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4vaW5uZXJGcm9tXCIpO1xudmFyIGFyZ3NPckFyZ0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzT3JBcmdBcnJheVwiKTtcbnZhciBlbXB0eV8xID0gcmVxdWlyZShcIi4vZW1wdHlcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xuZnVuY3Rpb24gemlwKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0U2VsZWN0b3IgPSBhcmdzXzEucG9wUmVzdWx0U2VsZWN0b3IoYXJncyk7XG4gICAgdmFyIHNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KGFyZ3MpO1xuICAgIHJldHVybiBzb3VyY2VzLmxlbmd0aFxuICAgICAgICA/IG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlcnMgPSBzb3VyY2VzLm1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSk7XG4gICAgICAgICAgICB2YXIgY29tcGxldGVkID0gc291cmNlcy5tYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0pO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMgPSBjb21wbGV0ZWQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChzb3VyY2VJbmRleCkge1xuICAgICAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShzb3VyY2VzW3NvdXJjZUluZGV4XSkuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyc1tzb3VyY2VJbmRleF0ucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzLmV2ZXJ5KGZ1bmN0aW9uIChidWZmZXIpIHsgcmV0dXJuIGJ1ZmZlci5sZW5ndGg7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gYnVmZmVycy5tYXAoZnVuY3Rpb24gKGJ1ZmZlcikgeyByZXR1cm4gYnVmZmVyLnNoaWZ0KCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0U2VsZWN0b3IuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQocmVzdWx0KSkpIDogcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzLnNvbWUoZnVuY3Rpb24gKGJ1ZmZlciwgaSkgeyByZXR1cm4gIWJ1ZmZlci5sZW5ndGggJiYgY29tcGxldGVkW2ldOyB9KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkW3NvdXJjZUluZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICFidWZmZXJzW3NvdXJjZUluZGV4XS5sZW5ndGggJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBzb3VyY2VJbmRleCA9IDA7ICFzdWJzY3JpYmVyLmNsb3NlZCAmJiBzb3VyY2VJbmRleCA8IHNvdXJjZXMubGVuZ3RoOyBzb3VyY2VJbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgX2xvb3BfMShzb3VyY2VJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMgPSBjb21wbGV0ZWQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSlcbiAgICAgICAgOiBlbXB0eV8xLkVNUFRZO1xufVxuZXhwb3J0cy56aXAgPSB6aXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16aXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5PcGVyYXRvclN1YnNjcmliZXIgPSBleHBvcnRzLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciA9IHZvaWQgMDtcbnZhciBTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKSB7XG4gICAgcmV0dXJuIG5ldyBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSk7XG59XG5leHBvcnRzLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciA9IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcjtcbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcl8xLlN1YnNjcmliZXIpKTtcbmV4cG9ydHMuT3BlcmF0b3JTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T3BlcmF0b3JTdWJzY3JpYmVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hdWRpdCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gYXVkaXQoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgdmFyIGR1cmF0aW9uU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBlbmREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBkdXJhdGlvblN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGR1cmF0aW9uU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlzQ29tcGxldGUgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgY2xlYW51cER1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKCFkdXJhdGlvblN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20oZHVyYXRpb25TZWxlY3Rvcih2YWx1ZSkpLnN1YnNjcmliZSgoZHVyYXRpb25TdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGVuZER1cmF0aW9uLCBjbGVhbnVwRHVyYXRpb24pKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgKCFoYXNWYWx1ZSB8fCAhZHVyYXRpb25TdWJzY3JpYmVyIHx8IGR1cmF0aW9uU3Vic2NyaWJlci5jbG9zZWQpICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5hdWRpdCA9IGF1ZGl0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXVkaXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmF1ZGl0VGltZSA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBhdWRpdF8xID0gcmVxdWlyZShcIi4vYXVkaXRcIik7XG52YXIgdGltZXJfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3RpbWVyXCIpO1xuZnVuY3Rpb24gYXVkaXRUaW1lKGR1cmF0aW9uLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIHJldHVybiBhdWRpdF8xLmF1ZGl0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRpbWVyXzEudGltZXIoZHVyYXRpb24sIHNjaGVkdWxlcik7IH0pO1xufVxuZXhwb3J0cy5hdWRpdFRpbWUgPSBhdWRpdFRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWRpdFRpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1ZmZlciA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBidWZmZXIoY2xvc2luZ05vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRCdWZmZXIgPSBbXTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBjdXJyZW50QnVmZmVyLnB1c2godmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoY3VycmVudEJ1ZmZlcik7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgY2xvc2luZ05vdGlmaWVyLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGIgPSBjdXJyZW50QnVmZmVyO1xuICAgICAgICAgICAgY3VycmVudEJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGIpO1xuICAgICAgICB9LCBub29wXzEubm9vcCkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY3VycmVudEJ1ZmZlciA9IG51bGw7XG4gICAgICAgIH07XG4gICAgfSk7XG59XG5leHBvcnRzLmJ1ZmZlciA9IGJ1ZmZlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3ZhbHVlcyA9ICh0aGlzICYmIHRoaXMuX192YWx1ZXMpIHx8IGZ1bmN0aW9uKG8pIHtcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICAgIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYnVmZmVyQ291bnQgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBhcnJSZW1vdmVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyclJlbW92ZVwiKTtcbmZ1bmN0aW9uIGJ1ZmZlckNvdW50KGJ1ZmZlclNpemUsIHN0YXJ0QnVmZmVyRXZlcnkpIHtcbiAgICBpZiAoc3RhcnRCdWZmZXJFdmVyeSA9PT0gdm9pZCAwKSB7IHN0YXJ0QnVmZmVyRXZlcnkgPSBudWxsOyB9XG4gICAgc3RhcnRCdWZmZXJFdmVyeSA9IHN0YXJ0QnVmZmVyRXZlcnkgIT09IG51bGwgJiYgc3RhcnRCdWZmZXJFdmVyeSAhPT0gdm9pZCAwID8gc3RhcnRCdWZmZXJFdmVyeSA6IGJ1ZmZlclNpemU7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYSwgZV8yLCBfYjtcbiAgICAgICAgICAgIHZhciB0b0VtaXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGNvdW50KysgJSBzdGFydEJ1ZmZlckV2ZXJ5ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVycy5wdXNoKFtdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYnVmZmVyc18xID0gX192YWx1ZXMoYnVmZmVycyksIGJ1ZmZlcnNfMV8xID0gYnVmZmVyc18xLm5leHQoKTsgIWJ1ZmZlcnNfMV8xLmRvbmU7IGJ1ZmZlcnNfMV8xID0gYnVmZmVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gYnVmZmVyc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlclNpemUgPD0gYnVmZmVyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9FbWl0ID0gdG9FbWl0ICE9PSBudWxsICYmIHRvRW1pdCAhPT0gdm9pZCAwID8gdG9FbWl0IDogW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0VtaXQucHVzaChidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzXzFfMSAmJiAhYnVmZmVyc18xXzEuZG9uZSAmJiAoX2EgPSBidWZmZXJzXzEucmV0dXJuKSkgX2EuY2FsbChidWZmZXJzXzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9FbWl0KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdG9FbWl0XzEgPSBfX3ZhbHVlcyh0b0VtaXQpLCB0b0VtaXRfMV8xID0gdG9FbWl0XzEubmV4dCgpOyAhdG9FbWl0XzFfMS5kb25lOyB0b0VtaXRfMV8xID0gdG9FbWl0XzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gdG9FbWl0XzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZShidWZmZXJzLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b0VtaXRfMV8xICYmICF0b0VtaXRfMV8xLmRvbmUgJiYgKF9iID0gdG9FbWl0XzEucmV0dXJuKSkgX2IuY2FsbCh0b0VtaXRfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMywgX2E7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlcnNfMiA9IF9fdmFsdWVzKGJ1ZmZlcnMpLCBidWZmZXJzXzJfMSA9IGJ1ZmZlcnNfMi5uZXh0KCk7ICFidWZmZXJzXzJfMS5kb25lOyBidWZmZXJzXzJfMSA9IGJ1ZmZlcnNfMi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNfMl8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8zXzEpIHsgZV8zID0geyBlcnJvcjogZV8zXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlcnNfMl8xICYmICFidWZmZXJzXzJfMS5kb25lICYmIChfYSA9IGJ1ZmZlcnNfMi5yZXR1cm4pKSBfYS5jYWxsKGJ1ZmZlcnNfMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBidWZmZXJzID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5idWZmZXJDb3VudCA9IGJ1ZmZlckNvdW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyQ291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1ZmZlclRpbWUgPSB2b2lkIDA7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcnJSZW1vdmVcIik7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbnZhciBleGVjdXRlU2NoZWR1bGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZVwiKTtcbmZ1bmN0aW9uIGJ1ZmZlclRpbWUoYnVmZmVyVGltZVNwYW4pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBvdGhlckFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvdGhlckFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSAoX2EgPSBhcmdzXzEucG9wU2NoZWR1bGVyKG90aGVyQXJncykpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7XG4gICAgdmFyIGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgPSAoX2IgPSBvdGhlckFyZ3NbMF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgdmFyIG1heEJ1ZmZlclNpemUgPSBvdGhlckFyZ3NbMV0gfHwgSW5maW5pdHk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGJ1ZmZlclJlY29yZHMgPSBbXTtcbiAgICAgICAgdmFyIHJlc3RhcnRPbkVtaXQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVtaXQgPSBmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gcmVjb3JkLmJ1ZmZlciwgc3VicyA9IHJlY29yZC5zdWJzO1xuICAgICAgICAgICAgc3Vicy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgYXJyUmVtb3ZlXzEuYXJyUmVtb3ZlKGJ1ZmZlclJlY29yZHMsIHJlY29yZCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYnVmZmVyKTtcbiAgICAgICAgICAgIHJlc3RhcnRPbkVtaXQgJiYgc3RhcnRCdWZmZXIoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0YXJ0QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlclJlY29yZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VicyA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzdWJzKTtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gW107XG4gICAgICAgICAgICAgICAgdmFyIHJlY29yZF8xID0ge1xuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgc3Viczogc3VicyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJ1ZmZlclJlY29yZHMucHVzaChyZWNvcmRfMSk7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnMsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZW1pdChyZWNvcmRfMSk7IH0sIGJ1ZmZlclRpbWVTcGFuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGJ1ZmZlckNyZWF0aW9uSW50ZXJ2YWwgIT09IG51bGwgJiYgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCA+PSAwKSB7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBzdGFydEJ1ZmZlciwgYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN0YXJ0T25FbWl0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydEJ1ZmZlcigpO1xuICAgICAgICB2YXIgYnVmZmVyVGltZVN1YnNjcmliZXIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIHZhciByZWNvcmRzQ29weSA9IGJ1ZmZlclJlY29yZHMuc2xpY2UoKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcmVjb3Jkc0NvcHlfMSA9IF9fdmFsdWVzKHJlY29yZHNDb3B5KSwgcmVjb3Jkc0NvcHlfMV8xID0gcmVjb3Jkc0NvcHlfMS5uZXh0KCk7ICFyZWNvcmRzQ29weV8xXzEuZG9uZTsgcmVjb3Jkc0NvcHlfMV8xID0gcmVjb3Jkc0NvcHlfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IHJlY29yZHNDb3B5XzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IHJlY29yZC5idWZmZXI7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbWF4QnVmZmVyU2l6ZSA8PSBidWZmZXIubGVuZ3RoICYmIGVtaXQocmVjb3JkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlY29yZHNDb3B5XzFfMSAmJiAhcmVjb3Jkc0NvcHlfMV8xLmRvbmUgJiYgKF9hID0gcmVjb3Jkc0NvcHlfMS5yZXR1cm4pKSBfYS5jYWxsKHJlY29yZHNDb3B5XzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdoaWxlIChidWZmZXJSZWNvcmRzID09PSBudWxsIHx8IGJ1ZmZlclJlY29yZHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ1ZmZlclJlY29yZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGJ1ZmZlclJlY29yZHMuc2hpZnQoKS5idWZmZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyVGltZVN1YnNjcmliZXIgPT09IG51bGwgfHwgYnVmZmVyVGltZVN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ1ZmZlclRpbWVTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gKGJ1ZmZlclJlY29yZHMgPSBudWxsKTsgfSk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoYnVmZmVyVGltZVN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5idWZmZXJUaW1lID0gYnVmZmVyVGltZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ1ZmZlclRpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1ZmZlclRvZ2dsZSA9IHZvaWQgMDtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIGFyclJlbW92ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJyUmVtb3ZlXCIpO1xuZnVuY3Rpb24gYnVmZmVyVG9nZ2xlKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgYnVmZmVycyA9IFtdO1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20ob3BlbmluZ3MpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKG9wZW5WYWx1ZSkge1xuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgICAgICAgICAgYnVmZmVycy5wdXNoKGJ1ZmZlcik7XG4gICAgICAgICAgICB2YXIgY2xvc2luZ1N1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgIHZhciBlbWl0QnVmZmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZShidWZmZXJzLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLmFkZChpbm5lckZyb21fMS5pbm5lckZyb20oY2xvc2luZ1NlbGVjdG9yKG9wZW5WYWx1ZSkpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZW1pdEJ1ZmZlciwgbm9vcF8xLm5vb3ApKSk7XG4gICAgICAgIH0sIG5vb3BfMS5ub29wKSk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlcnNfMSA9IF9fdmFsdWVzKGJ1ZmZlcnMpLCBidWZmZXJzXzFfMSA9IGJ1ZmZlcnNfMS5uZXh0KCk7ICFidWZmZXJzXzFfMS5kb25lOyBidWZmZXJzXzFfMSA9IGJ1ZmZlcnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlcnNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJzXzFfMSAmJiAhYnVmZmVyc18xXzEuZG9uZSAmJiAoX2EgPSBidWZmZXJzXzEucmV0dXJuKSkgX2EuY2FsbChidWZmZXJzXzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdoaWxlIChidWZmZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYnVmZmVycy5zaGlmdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5idWZmZXJUb2dnbGUgPSBidWZmZXJUb2dnbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXJUb2dnbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ1ZmZlcldoZW4gPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gYnVmZmVyV2hlbihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgYnVmZmVyID0gbnVsbDtcbiAgICAgICAgdmFyIGNsb3NpbmdTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgdmFyIG9wZW5CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBjbG9zaW5nU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2xvc2luZ1N1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHZhciBiID0gYnVmZmVyO1xuICAgICAgICAgICAgYnVmZmVyID0gW107XG4gICAgICAgICAgICBiICYmIHN1YnNjcmliZXIubmV4dChiKTtcbiAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShjbG9zaW5nU2VsZWN0b3IoKSkuc3Vic2NyaWJlKChjbG9zaW5nU3Vic2NyaWJlciA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvcGVuQnVmZmVyLCBub29wXzEubm9vcCkpKTtcbiAgICAgICAgfTtcbiAgICAgICAgb3BlbkJ1ZmZlcigpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGJ1ZmZlciA9PT0gbnVsbCB8fCBidWZmZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ1ZmZlci5wdXNoKHZhbHVlKTsgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYnVmZmVyICYmIHN1YnNjcmliZXIubmV4dChidWZmZXIpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIChidWZmZXIgPSBjbG9zaW5nU3Vic2NyaWJlciA9IG51bGwpOyB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmJ1ZmZlcldoZW4gPSBidWZmZXJXaGVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnVmZmVyV2hlbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2F0Y2hFcnJvciA9IHZvaWQgMDtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xuZnVuY3Rpb24gY2F0Y2hFcnJvcihzZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgIHZhciBzeW5jVW5zdWIgPSBmYWxzZTtcbiAgICAgICAgdmFyIGhhbmRsZWRSZXN1bHQ7XG4gICAgICAgIGlubmVyU3ViID0gc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGhhbmRsZWRSZXN1bHQgPSBpbm5lckZyb21fMS5pbm5lckZyb20oc2VsZWN0b3IoZXJyLCBjYXRjaEVycm9yKHNlbGVjdG9yKShzb3VyY2UpKSk7XG4gICAgICAgICAgICBpZiAoaW5uZXJTdWIpIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICBoYW5kbGVkUmVzdWx0LnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN5bmNVbnN1YiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgaWYgKHN5bmNVbnN1Yikge1xuICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgICAgIGhhbmRsZWRSZXN1bHQuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLmNhdGNoRXJyb3IgPSBjYXRjaEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2F0Y2hFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tYmluZUFsbCA9IHZvaWQgMDtcbnZhciBjb21iaW5lTGF0ZXN0QWxsXzEgPSByZXF1aXJlKFwiLi9jb21iaW5lTGF0ZXN0QWxsXCIpO1xuZXhwb3J0cy5jb21iaW5lQWxsID0gY29tYmluZUxhdGVzdEFsbF8xLmNvbWJpbmVMYXRlc3RBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21iaW5lQWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tYmluZUxhdGVzdCA9IHZvaWQgMDtcbnZhciBjb21iaW5lTGF0ZXN0XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgYXJnc09yQXJnQXJyYXlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NPckFyZ0FycmF5XCIpO1xudmFyIG1hcE9uZU9yTWFueUFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL21hcE9uZU9yTWFueUFyZ3NcIik7XG52YXIgcGlwZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvcGlwZVwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xuZnVuY3Rpb24gY29tYmluZUxhdGVzdCgpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdFNlbGVjdG9yID0gYXJnc18xLnBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHRTZWxlY3RvclxuICAgICAgICA/IHBpcGVfMS5waXBlKGNvbWJpbmVMYXRlc3QuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSwgbWFwT25lT3JNYW55QXJnc18xLm1hcE9uZU9yTWFueUFyZ3MocmVzdWx0U2VsZWN0b3IpKVxuICAgICAgICA6IGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIGNvbWJpbmVMYXRlc3RfMS5jb21iaW5lTGF0ZXN0SW5pdChfX3NwcmVhZEFycmF5KFtzb3VyY2VdLCBfX3JlYWQoYXJnc09yQXJnQXJyYXlfMS5hcmdzT3JBcmdBcnJheShhcmdzKSkpKShzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG59XG5leHBvcnRzLmNvbWJpbmVMYXRlc3QgPSBjb21iaW5lTGF0ZXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUxhdGVzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29tYmluZUxhdGVzdEFsbCA9IHZvaWQgMDtcbnZhciBjb21iaW5lTGF0ZXN0XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0XCIpO1xudmFyIGpvaW5BbGxJbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL2pvaW5BbGxJbnRlcm5hbHNcIik7XG5mdW5jdGlvbiBjb21iaW5lTGF0ZXN0QWxsKHByb2plY3QpIHtcbiAgICByZXR1cm4gam9pbkFsbEludGVybmFsc18xLmpvaW5BbGxJbnRlcm5hbHMoY29tYmluZUxhdGVzdF8xLmNvbWJpbmVMYXRlc3QsIHByb2plY3QpO1xufVxuZXhwb3J0cy5jb21iaW5lTGF0ZXN0QWxsID0gY29tYmluZUxhdGVzdEFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3RBbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21iaW5lTGF0ZXN0V2l0aCA9IHZvaWQgMDtcbnZhciBjb21iaW5lTGF0ZXN0XzEgPSByZXF1aXJlKFwiLi9jb21iaW5lTGF0ZXN0XCIpO1xuZnVuY3Rpb24gY29tYmluZUxhdGVzdFdpdGgoKSB7XG4gICAgdmFyIG90aGVyU291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVyU291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gY29tYmluZUxhdGVzdF8xLmNvbWJpbmVMYXRlc3QuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQob3RoZXJTb3VyY2VzKSkpO1xufVxuZXhwb3J0cy5jb21iaW5lTGF0ZXN0V2l0aCA9IGNvbWJpbmVMYXRlc3RXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tYmluZUxhdGVzdFdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25jYXQgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBjb25jYXRBbGxfMSA9IHJlcXVpcmUoXCIuL2NvbmNhdEFsbFwiKTtcbnZhciBhcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzXCIpO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2Zyb21cIik7XG5mdW5jdGlvbiBjb25jYXQoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzXzEucG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIGNvbmNhdEFsbF8xLmNvbmNhdEFsbCgpKGZyb21fMS5mcm9tKF9fc3ByZWFkQXJyYXkoW3NvdXJjZV0sIF9fcmVhZChhcmdzKSksIHNjaGVkdWxlcikpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb25jYXRBbGwgPSB2b2lkIDA7XG52YXIgbWVyZ2VBbGxfMSA9IHJlcXVpcmUoXCIuL21lcmdlQWxsXCIpO1xuZnVuY3Rpb24gY29uY2F0QWxsKCkge1xuICAgIHJldHVybiBtZXJnZUFsbF8xLm1lcmdlQWxsKDEpO1xufVxuZXhwb3J0cy5jb25jYXRBbGwgPSBjb25jYXRBbGw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRBbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmNhdE1hcCA9IHZvaWQgMDtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGNvbmNhdE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikgPyBtZXJnZU1hcF8xLm1lcmdlTWFwKHByb2plY3QsIHJlc3VsdFNlbGVjdG9yLCAxKSA6IG1lcmdlTWFwXzEubWVyZ2VNYXAocHJvamVjdCwgMSk7XG59XG5leHBvcnRzLmNvbmNhdE1hcCA9IGNvbmNhdE1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbmNhdE1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29uY2F0TWFwVG8gPSB2b2lkIDA7XG52YXIgY29uY2F0TWFwXzEgPSByZXF1aXJlKFwiLi9jb25jYXRNYXBcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGNvbmNhdE1hcFRvKGlubmVyT2JzZXJ2YWJsZSwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpID8gY29uY2F0TWFwXzEuY29uY2F0TWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlubmVyT2JzZXJ2YWJsZTsgfSwgcmVzdWx0U2VsZWN0b3IpIDogY29uY2F0TWFwXzEuY29uY2F0TWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlubmVyT2JzZXJ2YWJsZTsgfSk7XG59XG5leHBvcnRzLmNvbmNhdE1hcFRvID0gY29uY2F0TWFwVG87XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25jYXRNYXBUby5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNvbmNhdFdpdGggPSB2b2lkIDA7XG52YXIgY29uY2F0XzEgPSByZXF1aXJlKFwiLi9jb25jYXRcIik7XG5mdW5jdGlvbiBjb25jYXRXaXRoKCkge1xuICAgIHZhciBvdGhlclNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvdGhlclNvdXJjZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbmNhdF8xLmNvbmNhdC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChvdGhlclNvdXJjZXMpKSk7XG59XG5leHBvcnRzLmNvbmNhdFdpdGggPSBjb25jYXRXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uY2F0V2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29ubmVjdCA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBmcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9mcm9tXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgZnJvbVN1YnNjcmliYWJsZV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvZnJvbVN1YnNjcmliYWJsZVwiKTtcbnZhciBERUZBVUxUX0NPTkZJRyA9IHtcbiAgICBjb25uZWN0b3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpOyB9LFxufTtcbmZ1bmN0aW9uIGNvbm5lY3Qoc2VsZWN0b3IsIGNvbmZpZykge1xuICAgIGlmIChjb25maWcgPT09IHZvaWQgMCkgeyBjb25maWcgPSBERUZBVUxUX0NPTkZJRzsgfVxuICAgIHZhciBjb25uZWN0b3IgPSBjb25maWcuY29ubmVjdG9yO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gY29ubmVjdG9yKCk7XG4gICAgICAgIGZyb21fMS5mcm9tKHNlbGVjdG9yKGZyb21TdWJzY3JpYmFibGVfMS5mcm9tU3Vic2NyaWJhYmxlKHN1YmplY3QpKSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzb3VyY2Uuc3Vic2NyaWJlKHN1YmplY3QpKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuY29ubmVjdCA9IGNvbm5lY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb3VudCA9IHZvaWQgMDtcbnZhciByZWR1Y2VfMSA9IHJlcXVpcmUoXCIuL3JlZHVjZVwiKTtcbmZ1bmN0aW9uIGNvdW50KHByZWRpY2F0ZSkge1xuICAgIHJldHVybiByZWR1Y2VfMS5yZWR1Y2UoZnVuY3Rpb24gKHRvdGFsLCB2YWx1ZSwgaSkgeyByZXR1cm4gKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHZhbHVlLCBpKSA/IHRvdGFsICsgMSA6IHRvdGFsKTsgfSwgMCk7XG59XG5leHBvcnRzLmNvdW50ID0gY291bnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3VudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVib3VuY2UgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gZGVib3VuY2UoZHVyYXRpb25TZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgdmFyIGR1cmF0aW9uU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyID09PSBudWxsIHx8IGR1cmF0aW9uU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZHVyYXRpb25TdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICBkdXJhdGlvblN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uU3Vic2NyaWJlciA9PT0gbnVsbCB8fCBkdXJhdGlvblN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGR1cmF0aW9uU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICBkdXJhdGlvblN1YnNjcmliZXIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZW1pdCwgbm9vcF8xLm5vb3ApO1xuICAgICAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGR1cmF0aW9uU2VsZWN0b3IodmFsdWUpKS5zdWJzY3JpYmUoZHVyYXRpb25TdWJzY3JpYmVyKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW1pdCgpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGR1cmF0aW9uU3Vic2NyaWJlciA9IG51bGw7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVib3VuY2UgPSBkZWJvdW5jZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYm91bmNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGRlYm91bmNlVGltZShkdWVUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNfMS5hc3luY1NjaGVkdWxlcjsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciBsYXN0VGltZSA9IG51bGw7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgYWN0aXZlVGFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gbGFzdFZhbHVlO1xuICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gZW1pdFdoZW5JZGxlKCkge1xuICAgICAgICAgICAgdmFyIHRhcmdldFRpbWUgPSBsYXN0VGltZSArIGR1ZVRpbWU7XG4gICAgICAgICAgICB2YXIgbm93ID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgaWYgKG5vdyA8IHRhcmdldFRpbWUpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gdGhpcy5zY2hlZHVsZSh1bmRlZmluZWQsIHRhcmdldFRpbWUgLSBub3cpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGFjdGl2ZVRhc2spO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgbGFzdFRpbWUgPSBzY2hlZHVsZXIubm93KCk7XG4gICAgICAgICAgICBpZiAoIWFjdGl2ZVRhc2spIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVUYXNrID0gc2NoZWR1bGVyLnNjaGVkdWxlKGVtaXRXaGVuSWRsZSwgZHVlVGltZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5hZGQoYWN0aXZlVGFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVtaXQoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsYXN0VmFsdWUgPSBhY3RpdmVUYXNrID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSBkZWJvdW5jZVRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWJvdW5jZVRpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRJZkVtcHR5ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBkZWZhdWx0SWZFbXB0eShkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVmYXVsdElmRW1wdHkgPSBkZWZhdWx0SWZFbXB0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRJZkVtcHR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWxheSA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciBkZWxheVdoZW5fMSA9IHJlcXVpcmUoXCIuL2RlbGF5V2hlblwiKTtcbnZhciB0aW1lcl8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvdGltZXJcIik7XG5mdW5jdGlvbiBkZWxheShkdWUsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9XG4gICAgdmFyIGR1cmF0aW9uID0gdGltZXJfMS50aW1lcihkdWUsIHNjaGVkdWxlcik7XG4gICAgcmV0dXJuIGRlbGF5V2hlbl8xLmRlbGF5V2hlbihmdW5jdGlvbiAoKSB7IHJldHVybiBkdXJhdGlvbjsgfSk7XG59XG5leHBvcnRzLmRlbGF5ID0gZGVsYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVsYXlXaGVuID0gdm9pZCAwO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29uY2F0XCIpO1xudmFyIHRha2VfMSA9IHJlcXVpcmUoXCIuL3Rha2VcIik7XG52YXIgaWdub3JlRWxlbWVudHNfMSA9IHJlcXVpcmUoXCIuL2lnbm9yZUVsZW1lbnRzXCIpO1xudmFyIG1hcFRvXzEgPSByZXF1aXJlKFwiLi9tYXBUb1wiKTtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG5mdW5jdGlvbiBkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yLCBzdWJzY3JpcHRpb25EZWxheSkge1xuICAgIGlmIChzdWJzY3JpcHRpb25EZWxheSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbmNhdF8xLmNvbmNhdChzdWJzY3JpcHRpb25EZWxheS5waXBlKHRha2VfMS50YWtlKDEpLCBpZ25vcmVFbGVtZW50c18xLmlnbm9yZUVsZW1lbnRzKCkpLCBzb3VyY2UucGlwZShkZWxheVdoZW4oZGVsYXlEdXJhdGlvblNlbGVjdG9yKSkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcChmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7IHJldHVybiBkZWxheUR1cmF0aW9uU2VsZWN0b3IodmFsdWUsIGluZGV4KS5waXBlKHRha2VfMS50YWtlKDEpLCBtYXBUb18xLm1hcFRvKHZhbHVlKSk7IH0pO1xufVxuZXhwb3J0cy5kZWxheVdoZW4gPSBkZWxheVdoZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWxheVdoZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlbWF0ZXJpYWxpemUgPSB2b2lkIDA7XG52YXIgTm90aWZpY2F0aW9uXzEgPSByZXF1aXJlKFwiLi4vTm90aWZpY2F0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBkZW1hdGVyaWFsaXplKCkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChub3RpZmljYXRpb24pIHsgcmV0dXJuIE5vdGlmaWNhdGlvbl8xLm9ic2VydmVOb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kZW1hdGVyaWFsaXplID0gZGVtYXRlcmlhbGl6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbWF0ZXJpYWxpemUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRpc3RpbmN0ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbmZ1bmN0aW9uIGRpc3RpbmN0KGtleVNlbGVjdG9yLCBmbHVzaGVzKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGRpc3RpbmN0S2V5cyA9IG5ldyBTZXQoKTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5U2VsZWN0b3IgPyBrZXlTZWxlY3Rvcih2YWx1ZSkgOiB2YWx1ZTtcbiAgICAgICAgICAgIGlmICghZGlzdGluY3RLZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgZGlzdGluY3RLZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgICAgZmx1c2hlcyA9PT0gbnVsbCB8fCBmbHVzaGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmbHVzaGVzLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzdGluY3RLZXlzLmNsZWFyKCk7IH0sIG5vb3BfMS5ub29wKSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmRpc3RpbmN0ID0gZGlzdGluY3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGlzdGluY3RVbnRpbENoYW5nZWQgPSB2b2lkIDA7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZChjb21wYXJhdG9yLCBrZXlTZWxlY3Rvcikge1xuICAgIGlmIChrZXlTZWxlY3RvciA9PT0gdm9pZCAwKSB7IGtleVNlbGVjdG9yID0gaWRlbnRpdHlfMS5pZGVudGl0eTsgfVxuICAgIGNvbXBhcmF0b3IgPSBjb21wYXJhdG9yICE9PSBudWxsICYmIGNvbXBhcmF0b3IgIT09IHZvaWQgMCA/IGNvbXBhcmF0b3IgOiBkZWZhdWx0Q29tcGFyZTtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgcHJldmlvdXNLZXk7XG4gICAgICAgIHZhciBmaXJzdCA9IHRydWU7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZmlyc3QgfHwgIWNvbXBhcmF0b3IocHJldmlvdXNLZXksIGN1cnJlbnRLZXkpKSB7XG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c0tleSA9IGN1cnJlbnRLZXk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5kaXN0aW5jdFVudGlsQ2hhbmdlZCA9IGRpc3RpbmN0VW50aWxDaGFuZ2VkO1xuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmUoYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3RVbnRpbENoYW5nZWQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkID0gdm9pZCAwO1xudmFyIGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEgPSByZXF1aXJlKFwiLi9kaXN0aW5jdFVudGlsQ2hhbmdlZFwiKTtcbmZ1bmN0aW9uIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkKGtleSwgY29tcGFyZSkge1xuICAgIHJldHVybiBkaXN0aW5jdFVudGlsQ2hhbmdlZF8xLmRpc3RpbmN0VW50aWxDaGFuZ2VkKGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiBjb21wYXJlID8gY29tcGFyZSh4W2tleV0sIHlba2V5XSkgOiB4W2tleV0gPT09IHlba2V5XTsgfSk7XG59XG5leHBvcnRzLmRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkID0gZGlzdGluY3RVbnRpbEtleUNoYW5nZWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZWxlbWVudEF0ID0gdm9pZCAwO1xudmFyIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9Bcmd1bWVudE91dE9mUmFuZ2VFcnJvclwiKTtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlclwiKTtcbnZhciB0aHJvd0lmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL3Rocm93SWZFbXB0eVwiKTtcbnZhciBkZWZhdWx0SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vZGVmYXVsdElmRW1wdHlcIik7XG52YXIgdGFrZV8xID0gcmVxdWlyZShcIi4vdGFrZVwiKTtcbmZ1bmN0aW9uIGVsZW1lbnRBdChpbmRleCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICB0aHJvdyBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMS5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcigpO1xuICAgIH1cbiAgICB2YXIgaGFzRGVmYXVsdFZhbHVlID0gYXJndW1lbnRzLmxlbmd0aCA+PSAyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2UucGlwZShmaWx0ZXJfMS5maWx0ZXIoZnVuY3Rpb24gKHYsIGkpIHsgcmV0dXJuIGkgPT09IGluZGV4OyB9KSwgdGFrZV8xLnRha2UoMSksIGhhc0RlZmF1bHRWYWx1ZSA/IGRlZmF1bHRJZkVtcHR5XzEuZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKSA6IHRocm93SWZFbXB0eV8xLnRocm93SWZFbXB0eShmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMS5Bcmd1bWVudE91dE9mUmFuZ2VFcnJvcigpOyB9KSk7XG4gICAgfTtcbn1cbmV4cG9ydHMuZWxlbWVudEF0ID0gZWxlbWVudEF0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWxlbWVudEF0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZW5kV2l0aCA9IHZvaWQgMDtcbnZhciBjb25jYXRfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2NvbmNhdFwiKTtcbnZhciBvZl8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvb2ZcIik7XG5mdW5jdGlvbiBlbmRXaXRoKCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YWx1ZXNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIGNvbmNhdF8xLmNvbmNhdChzb3VyY2UsIG9mXzEub2YuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQodmFsdWVzKSkpKTsgfTtcbn1cbmV4cG9ydHMuZW5kV2l0aCA9IGVuZFdpdGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbmRXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ldmVyeSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZXZlcnkocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXByZWRpY2F0ZS5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5ldmVyeSA9IGV2ZXJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlcnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4aGF1c3QgPSB2b2lkIDA7XG52YXIgZXhoYXVzdEFsbF8xID0gcmVxdWlyZShcIi4vZXhoYXVzdEFsbFwiKTtcbmV4cG9ydHMuZXhoYXVzdCA9IGV4aGF1c3RBbGxfMS5leGhhdXN0QWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhoYXVzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXhoYXVzdEFsbCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZXhoYXVzdEFsbCgpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXIpIHtcbiAgICAgICAgICAgIGlmICghaW5uZXJTdWIpIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1YiA9IGlubmVyRnJvbV8xLmlubmVyRnJvbShpbm5lcikuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpc0NvbXBsZXRlICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgIWlubmVyU3ViICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5leGhhdXN0QWxsID0gZXhoYXVzdEFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4aGF1c3RBbGwuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4aGF1c3RNYXAgPSB2b2lkIDA7XG52YXIgbWFwXzEgPSByZXF1aXJlKFwiLi9tYXBcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGV4aGF1c3RNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IpIHtcbiAgICBpZiAocmVzdWx0U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UucGlwZShleGhhdXN0TWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBpbm5lckZyb21fMS5pbm5lckZyb20ocHJvamVjdChhLCBpKSkucGlwZShtYXBfMS5tYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKTsgfSkpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAob3V0ZXJWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFpbm5lclN1Yikge1xuICAgICAgICAgICAgICAgIGlubmVyU3ViID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGUgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShwcm9qZWN0KG91dGVyVmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoaW5uZXJTdWIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICFpbm5lclN1YiAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZXhoYXVzdE1hcCA9IGV4aGF1c3RNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGhhdXN0TWFwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leHBhbmQgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBtZXJnZUludGVybmFsc18xID0gcmVxdWlyZShcIi4vbWVyZ2VJbnRlcm5hbHNcIik7XG5mdW5jdGlvbiBleHBhbmQocHJvamVjdCwgY29uY3VycmVudCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICBjb25jdXJyZW50ID0gKGNvbmN1cnJlbnQgfHwgMCkgPCAxID8gSW5maW5pdHkgOiBjb25jdXJyZW50O1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHJldHVybiBtZXJnZUludGVybmFsc18xLm1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgdW5kZWZpbmVkLCB0cnVlLCBzY2hlZHVsZXIpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5leHBhbmQgPSBleHBhbmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHBhbmQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZpbHRlciA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gcHJlZGljYXRlLmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4KyspICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5maW5hbGl6ZSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xuZnVuY3Rpb24gZmluYWxpemUoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5maW5hbGl6ZSA9IGZpbmFsaXplO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluYWxpemUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUZpbmQgPSBleHBvcnRzLmZpbmQgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIGZpbmQocHJlZGljYXRlLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGNyZWF0ZUZpbmQocHJlZGljYXRlLCB0aGlzQXJnLCAndmFsdWUnKSk7XG59XG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZnVuY3Rpb24gY3JlYXRlRmluZChwcmVkaWNhdGUsIHRoaXNBcmcsIGVtaXQpIHtcbiAgICB2YXIgZmluZEluZGV4ID0gZW1pdCA9PT0gJ2luZGV4JztcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpID0gaW5kZXgrKztcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaSwgc291cmNlKSkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChmaW5kSW5kZXggPyBpIDogdmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGZpbmRJbmRleCA/IC0xIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZUZpbmQgPSBjcmVhdGVGaW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmluZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmluZEluZGV4ID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgZmluZF8xID0gcmVxdWlyZShcIi4vZmluZFwiKTtcbmZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZmluZF8xLmNyZWF0ZUZpbmQocHJlZGljYXRlLCB0aGlzQXJnLCAnaW5kZXgnKSk7XG59XG5leHBvcnRzLmZpbmRJbmRleCA9IGZpbmRJbmRleDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbmRJbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmlyc3QgPSB2b2lkIDA7XG52YXIgRW1wdHlFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvRW1wdHlFcnJvclwiKTtcbnZhciBmaWx0ZXJfMSA9IHJlcXVpcmUoXCIuL2ZpbHRlclwiKTtcbnZhciB0YWtlXzEgPSByZXF1aXJlKFwiLi90YWtlXCIpO1xudmFyIGRlZmF1bHRJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi9kZWZhdWx0SWZFbXB0eVwiKTtcbnZhciB0aHJvd0lmRW1wdHlfMSA9IHJlcXVpcmUoXCIuL3Rocm93SWZFbXB0eVwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBmaXJzdChwcmVkaWNhdGUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHZhciBoYXNEZWZhdWx0VmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID49IDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZS5waXBlKHByZWRpY2F0ZSA/IGZpbHRlcl8xLmZpbHRlcihmdW5jdGlvbiAodiwgaSkgeyByZXR1cm4gcHJlZGljYXRlKHYsIGksIHNvdXJjZSk7IH0pIDogaWRlbnRpdHlfMS5pZGVudGl0eSwgdGFrZV8xLnRha2UoMSksIGhhc0RlZmF1bHRWYWx1ZSA/IGRlZmF1bHRJZkVtcHR5XzEuZGVmYXVsdElmRW1wdHkoZGVmYXVsdFZhbHVlKSA6IHRocm93SWZFbXB0eV8xLnRocm93SWZFbXB0eShmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKTsgfSkpO1xuICAgIH07XG59XG5leHBvcnRzLmZpcnN0ID0gZmlyc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maXJzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmxhdE1hcCA9IHZvaWQgMDtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG5leHBvcnRzLmZsYXRNYXAgPSBtZXJnZU1hcF8xLm1lcmdlTWFwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmxhdE1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ3JvdXBCeSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gZ3JvdXBCeShrZXlTZWxlY3RvciwgZWxlbWVudE9yT3B0aW9ucywgZHVyYXRpb24sIGNvbm5lY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlbGVtZW50O1xuICAgICAgICBpZiAoIWVsZW1lbnRPck9wdGlvbnMgfHwgdHlwZW9mIGVsZW1lbnRPck9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50T3JPcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKGR1cmF0aW9uID0gZWxlbWVudE9yT3B0aW9ucy5kdXJhdGlvbiwgZWxlbWVudCA9IGVsZW1lbnRPck9wdGlvbnMuZWxlbWVudCwgY29ubmVjdG9yID0gZWxlbWVudE9yT3B0aW9ucy5jb25uZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncm91cHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHZhciBub3RpZnkgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgIGdyb3Vwcy5mb3JFYWNoKGNiKTtcbiAgICAgICAgICAgIGNiKHN1YnNjcmliZXIpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBub3RpZnkoZnVuY3Rpb24gKGNvbnN1bWVyKSB7IHJldHVybiBjb25zdW1lci5lcnJvcihlcnIpOyB9KTsgfTtcbiAgICAgICAgdmFyIGFjdGl2ZUdyb3VwcyA9IDA7XG4gICAgICAgIHZhciB0ZWFyZG93bkF0dGVtcHRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZ3JvdXBCeVNvdXJjZVN1YnNjcmliZXIgPSBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyXzEuT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIga2V5XzEgPSBrZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwXzEgPSBncm91cHMuZ2V0KGtleV8xKTtcbiAgICAgICAgICAgICAgICBpZiAoIWdyb3VwXzEpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBzLnNldChrZXlfMSwgKGdyb3VwXzEgPSBjb25uZWN0b3IgPyBjb25uZWN0b3IoKSA6IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cGVkID0gY3JlYXRlR3JvdXBlZE9ic2VydmFibGUoa2V5XzEsIGdyb3VwXzEpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZ3JvdXBlZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uU3Vic2NyaWJlcl8xID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGdyb3VwXzEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cF8xLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb25TdWJzY3JpYmVyXzEgPT09IG51bGwgfHwgZHVyYXRpb25TdWJzY3JpYmVyXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGR1cmF0aW9uU3Vic2NyaWJlcl8xLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZ3JvdXBzLmRlbGV0ZShrZXlfMSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBCeVNvdXJjZVN1YnNjcmliZXIuYWRkKGlubmVyRnJvbV8xLmlubmVyRnJvbShkdXJhdGlvbihncm91cGVkKSkuc3Vic2NyaWJlKGR1cmF0aW9uU3Vic2NyaWJlcl8xKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ3JvdXBfMS5uZXh0KGVsZW1lbnQgPyBlbGVtZW50KHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBub3RpZnkoZnVuY3Rpb24gKGNvbnN1bWVyKSB7IHJldHVybiBjb25zdW1lci5jb21wbGV0ZSgpOyB9KTsgfSwgaGFuZGxlRXJyb3IsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdyb3Vwcy5jbGVhcigpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0ZWFyZG93bkF0dGVtcHRlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlR3JvdXBzID09PSAwO1xuICAgICAgICB9KTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShncm91cEJ5U291cmNlU3Vic2NyaWJlcik7XG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUdyb3VwZWRPYnNlcnZhYmxlKGtleSwgZ3JvdXBTdWJqZWN0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChncm91cFN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVHcm91cHMrKztcbiAgICAgICAgICAgICAgICB2YXIgaW5uZXJTdWIgPSBncm91cFN1YmplY3Quc3Vic2NyaWJlKGdyb3VwU3Vic2NyaWJlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLS1hY3RpdmVHcm91cHMgPT09IDAgJiYgdGVhcmRvd25BdHRlbXB0ZWQgJiYgZ3JvdXBCeVNvdXJjZVN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQua2V5ID0ga2V5O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0cy5ncm91cEJ5ID0gZ3JvdXBCeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdyb3VwQnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlnbm9yZUVsZW1lbnRzID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbmZ1bmN0aW9uIGlnbm9yZUVsZW1lbnRzKCkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG5vb3BfMS5ub29wKSk7XG4gICAgfSk7XG59XG5leHBvcnRzLmlnbm9yZUVsZW1lbnRzID0gaWdub3JlRWxlbWVudHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZ25vcmVFbGVtZW50cy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNFbXB0eSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodHJ1ZSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuaXNFbXB0eSA9IGlzRW1wdHk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0VtcHR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5qb2luQWxsSW50ZXJuYWxzID0gdm9pZCAwO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbnZhciBtYXBPbmVPck1hbnlBcmdzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9tYXBPbmVPck1hbnlBcmdzXCIpO1xudmFyIHBpcGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL3BpcGVcIik7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuL21lcmdlTWFwXCIpO1xudmFyIHRvQXJyYXlfMSA9IHJlcXVpcmUoXCIuL3RvQXJyYXlcIik7XG5mdW5jdGlvbiBqb2luQWxsSW50ZXJuYWxzKGpvaW5GbiwgcHJvamVjdCkge1xuICAgIHJldHVybiBwaXBlXzEucGlwZSh0b0FycmF5XzEudG9BcnJheSgpLCBtZXJnZU1hcF8xLm1lcmdlTWFwKGZ1bmN0aW9uIChzb3VyY2VzKSB7IHJldHVybiBqb2luRm4oc291cmNlcyk7IH0pLCBwcm9qZWN0ID8gbWFwT25lT3JNYW55QXJnc18xLm1hcE9uZU9yTWFueUFyZ3MocHJvamVjdCkgOiBpZGVudGl0eV8xLmlkZW50aXR5KTtcbn1cbmV4cG9ydHMuam9pbkFsbEludGVybmFscyA9IGpvaW5BbGxJbnRlcm5hbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qb2luQWxsSW50ZXJuYWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5sYXN0ID0gdm9pZCAwO1xudmFyIEVtcHR5RXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL0VtcHR5RXJyb3JcIik7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi9maWx0ZXJcIik7XG52YXIgdGFrZUxhc3RfMSA9IHJlcXVpcmUoXCIuL3Rha2VMYXN0XCIpO1xudmFyIHRocm93SWZFbXB0eV8xID0gcmVxdWlyZShcIi4vdGhyb3dJZkVtcHR5XCIpO1xudmFyIGRlZmF1bHRJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi9kZWZhdWx0SWZFbXB0eVwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBsYXN0KHByZWRpY2F0ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgdmFyIGhhc0RlZmF1bHRWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPj0gMjtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gc291cmNlLnBpcGUocHJlZGljYXRlID8gZmlsdGVyXzEuZmlsdGVyKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBwcmVkaWNhdGUodiwgaSwgc291cmNlKTsgfSkgOiBpZGVudGl0eV8xLmlkZW50aXR5LCB0YWtlTGFzdF8xLnRha2VMYXN0KDEpLCBoYXNEZWZhdWx0VmFsdWUgPyBkZWZhdWx0SWZFbXB0eV8xLmRlZmF1bHRJZkVtcHR5KGRlZmF1bHRWYWx1ZSkgOiB0aHJvd0lmRW1wdHlfMS50aHJvd0lmRW1wdHkoZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yKCk7IH0pKTtcbiAgICB9O1xufVxuZXhwb3J0cy5sYXN0ID0gbGFzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxhc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1hcCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChwcm9qZWN0LmNhbGwodGhpc0FyZywgdmFsdWUsIGluZGV4KyspKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5tYXAgPSBtYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1hcFRvID0gdm9pZCAwO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vbWFwXCIpO1xuZnVuY3Rpb24gbWFwVG8odmFsdWUpIHtcbiAgICByZXR1cm4gbWFwXzEubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlOyB9KTtcbn1cbmV4cG9ydHMubWFwVG8gPSBtYXBUbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcFRvLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXRlcmlhbGl6ZSA9IHZvaWQgMDtcbnZhciBOb3RpZmljYXRpb25fMSA9IHJlcXVpcmUoXCIuLi9Ob3RpZmljYXRpb25cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIG1hdGVyaWFsaXplKCkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KE5vdGlmaWNhdGlvbl8xLk5vdGlmaWNhdGlvbi5jcmVhdGVOZXh0KHZhbHVlKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlQ29tcGxldGUoKSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChOb3RpZmljYXRpb25fMS5Ob3RpZmljYXRpb24uY3JlYXRlRXJyb3IoZXJyKSk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMubWF0ZXJpYWxpemUgPSBtYXRlcmlhbGl6ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hdGVyaWFsaXplLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXggPSB2b2lkIDA7XG52YXIgcmVkdWNlXzEgPSByZXF1aXJlKFwiLi9yZWR1Y2VcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIG1heChjb21wYXJlcikge1xuICAgIHJldHVybiByZWR1Y2VfMS5yZWR1Y2UoaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oY29tcGFyZXIpID8gZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIChjb21wYXJlcih4LCB5KSA+IDAgPyB4IDogeSk7IH0gOiBmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4gKHggPiB5ID8geCA6IHkpOyB9KTtcbn1cbmV4cG9ydHMubWF4ID0gbWF4O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2UgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBhcmdzT3JBcmdBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc09yQXJnQXJyYXlcIik7XG52YXIgbWVyZ2VBbGxfMSA9IHJlcXVpcmUoXCIuL21lcmdlQWxsXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgZnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvZnJvbVwiKTtcbmZ1bmN0aW9uIG1lcmdlKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gYXJnc18xLnBvcFNjaGVkdWxlcihhcmdzKTtcbiAgICB2YXIgY29uY3VycmVudCA9IGFyZ3NfMS5wb3BOdW1iZXIoYXJncywgSW5maW5pdHkpO1xuICAgIGFyZ3MgPSBhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KGFyZ3MpO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIG1lcmdlQWxsXzEubWVyZ2VBbGwoY29uY3VycmVudCkoZnJvbV8xLmZyb20oX19zcHJlYWRBcnJheShbc291cmNlXSwgX19yZWFkKGFyZ3MpKSwgc2NoZWR1bGVyKSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5tZXJnZSA9IG1lcmdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlQWxsID0gdm9pZCAwO1xudmFyIG1lcmdlTWFwXzEgPSByZXF1aXJlKFwiLi9tZXJnZU1hcFwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBtZXJnZUFsbChjb25jdXJyZW50KSB7XG4gICAgaWYgKGNvbmN1cnJlbnQgPT09IHZvaWQgMCkgeyBjb25jdXJyZW50ID0gSW5maW5pdHk7IH1cbiAgICByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcChpZGVudGl0eV8xLmlkZW50aXR5LCBjb25jdXJyZW50KTtcbn1cbmV4cG9ydHMubWVyZ2VBbGwgPSBtZXJnZUFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZUludGVybmFscyA9IHZvaWQgMDtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBleGVjdXRlU2NoZWR1bGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZVwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsVGVhcmRvd24pIHtcbiAgICB2YXIgYnVmZmVyID0gW107XG4gICAgdmFyIGFjdGl2ZSA9IDA7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgIHZhciBjaGVja0NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAhYnVmZmVyLmxlbmd0aCAmJiAhYWN0aXZlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciBvdXRlck5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIChhY3RpdmUgPCBjb25jdXJyZW50ID8gZG9Jbm5lclN1Yih2YWx1ZSkgOiBidWZmZXIucHVzaCh2YWx1ZSkpOyB9O1xuICAgIHZhciBkb0lubmVyU3ViID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGV4cGFuZCAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICBhY3RpdmUrKztcbiAgICAgICAgdmFyIGlubmVyQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKHByb2plY3QodmFsdWUsIGluZGV4KyspKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7XG4gICAgICAgICAgICBvbkJlZm9yZU5leHQgPT09IG51bGwgfHwgb25CZWZvcmVOZXh0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbkJlZm9yZU5leHQoaW5uZXJWYWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhwYW5kKSB7XG4gICAgICAgICAgICAgICAgb3V0ZXJOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lckNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5uZXJDb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZS0tO1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXJlZFZhbHVlID0gYnVmZmVyLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5uZXJTdWJTY2hlZHVsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgaW5uZXJTdWJTY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9Jbm5lclN1YihidWZmZXJlZFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggJiYgYWN0aXZlIDwgY29uY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3BfMSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBvdXRlck5leHQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWRkaXRpb25hbFRlYXJkb3duID09PSBudWxsIHx8IGFkZGl0aW9uYWxUZWFyZG93biA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbFRlYXJkb3duKCk7XG4gICAgfTtcbn1cbmV4cG9ydHMubWVyZ2VJbnRlcm5hbHMgPSBtZXJnZUludGVybmFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlSW50ZXJuYWxzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZU1hcCA9IHZvaWQgMDtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuL21hcFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIG1lcmdlSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9tZXJnZUludGVybmFsc1wiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gbWVyZ2VNYXAocHJvamVjdCwgcmVzdWx0U2VsZWN0b3IsIGNvbmN1cnJlbnQpIHtcbiAgICBpZiAoY29uY3VycmVudCA9PT0gdm9pZCAwKSB7IGNvbmN1cnJlbnQgPSBJbmZpbml0eTsgfVxuICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihyZXN1bHRTZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlTWFwKGZ1bmN0aW9uIChhLCBpKSB7IHJldHVybiBtYXBfMS5tYXAoZnVuY3Rpb24gKGIsIGlpKSB7IHJldHVybiByZXN1bHRTZWxlY3RvcihhLCBiLCBpLCBpaSk7IH0pKGlubmVyRnJvbV8xLmlubmVyRnJvbShwcm9qZWN0KGEsIGkpKSk7IH0sIGNvbmN1cnJlbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgcmVzdWx0U2VsZWN0b3IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmN1cnJlbnQgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzXzEubWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBwcm9qZWN0LCBjb25jdXJyZW50KTsgfSk7XG59XG5leHBvcnRzLm1lcmdlTWFwID0gbWVyZ2VNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZU1hcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VNYXBUbyA9IHZvaWQgMDtcbnZhciBtZXJnZU1hcF8xID0gcmVxdWlyZShcIi4vbWVyZ2VNYXBcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIG1lcmdlTWFwVG8oaW5uZXJPYnNlcnZhYmxlLCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yLCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHRTZWxlY3RvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uY3VycmVudCA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIGNvbmN1cnJlbnQpO1xufVxuZXhwb3J0cy5tZXJnZU1hcFRvID0gbWVyZ2VNYXBUbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlTWFwVG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlU2NhbiA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIG1lcmdlSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9tZXJnZUludGVybmFsc1wiKTtcbmZ1bmN0aW9uIG1lcmdlU2NhbihhY2N1bXVsYXRvciwgc2VlZCwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gc2VlZDtcbiAgICAgICAgcmV0dXJuIG1lcmdlSW50ZXJuYWxzXzEubWVyZ2VJbnRlcm5hbHMoc291cmNlLCBzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7IHJldHVybiBhY2N1bXVsYXRvcihzdGF0ZSwgdmFsdWUsIGluZGV4KTsgfSwgY29uY3VycmVudCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IHZhbHVlO1xuICAgICAgICB9LCBmYWxzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7IHJldHVybiAoc3RhdGUgPSBudWxsKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLm1lcmdlU2NhbiA9IG1lcmdlU2Nhbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlU2Nhbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlV2l0aCA9IHZvaWQgMDtcbnZhciBtZXJnZV8xID0gcmVxdWlyZShcIi4vbWVyZ2VcIik7XG5mdW5jdGlvbiBtZXJnZVdpdGgoKSB7XG4gICAgdmFyIG90aGVyU291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVyU291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VfMS5tZXJnZS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChvdGhlclNvdXJjZXMpKSk7XG59XG5leHBvcnRzLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlV2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWluID0gdm9pZCAwO1xudmFyIHJlZHVjZV8xID0gcmVxdWlyZShcIi4vcmVkdWNlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBtaW4oY29tcGFyZXIpIHtcbiAgICByZXR1cm4gcmVkdWNlXzEucmVkdWNlKGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKGNvbXBhcmVyKSA/IGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiAoY29tcGFyZXIoeCwgeSkgPCAwID8geCA6IHkpOyB9IDogZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuICh4IDwgeSA/IHggOiB5KTsgfSk7XG59XG5leHBvcnRzLm1pbiA9IG1pbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubXVsdGljYXN0ID0gdm9pZCAwO1xudmFyIENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvQ29ubmVjdGFibGVPYnNlcnZhYmxlXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG52YXIgY29ubmVjdF8xID0gcmVxdWlyZShcIi4vY29ubmVjdFwiKTtcbmZ1bmN0aW9uIG11bHRpY2FzdChzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSwgc2VsZWN0b3IpIHtcbiAgICB2YXIgc3ViamVjdEZhY3RvcnkgPSBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSkgPyBzdWJqZWN0T3JTdWJqZWN0RmFjdG9yeSA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YmplY3RPclN1YmplY3RGYWN0b3J5OyB9O1xuICAgIGlmIChpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3RfMS5jb25uZWN0KHNlbGVjdG9yLCB7XG4gICAgICAgICAgICBjb25uZWN0b3I6IHN1YmplY3RGYWN0b3J5LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UpIHsgcmV0dXJuIG5ldyBDb25uZWN0YWJsZU9ic2VydmFibGVfMS5Db25uZWN0YWJsZU9ic2VydmFibGUoc291cmNlLCBzdWJqZWN0RmFjdG9yeSk7IH07XG59XG5leHBvcnRzLm11bHRpY2FzdCA9IG11bHRpY2FzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpY2FzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub2JzZXJ2ZU9uID0gdm9pZCAwO1xudmFyIGV4ZWN1dGVTY2hlZHVsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBvYnNlcnZlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LCBkZWxheSk7IH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMub2JzZXJ2ZU9uID0gb2JzZXJ2ZU9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2ZU9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub25FcnJvclJlc3VtZU5leHQgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBhcmdzT3JBcmdBcnJheV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc09yQXJnQXJyYXlcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbmZ1bmN0aW9uIG9uRXJyb3JSZXN1bWVOZXh0KCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgc291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgbmV4dFNvdXJjZXMgPSBhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KHNvdXJjZXMpO1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciByZW1haW5pbmcgPSBfX3NwcmVhZEFycmF5KFtzb3VyY2VdLCBfX3JlYWQobmV4dFNvdXJjZXMpKTtcbiAgICAgICAgdmFyIHN1YnNjcmliZU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlbWFpbmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0U291cmNlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFNvdXJjZSA9IGlubmVyRnJvbV8xLmlubmVyRnJvbShyZW1haW5pbmcuc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlTmV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbm5lclN1YiA9IE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIG5vb3BfMS5ub29wLCBub29wXzEubm9vcCk7XG4gICAgICAgICAgICAgICAgICAgIG5leHRTb3VyY2Uuc3Vic2NyaWJlKGlubmVyU3ViKTtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXJTdWIuYWRkKHN1YnNjcmliZU5leHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc3Vic2NyaWJlTmV4dCgpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5vbkVycm9yUmVzdW1lTmV4dCA9IG9uRXJyb3JSZXN1bWVOZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b25FcnJvclJlc3VtZU5leHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhaXJ3aXNlID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBwYWlyd2lzZSgpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgcHJldjtcbiAgICAgICAgdmFyIGhhc1ByZXYgPSBmYWxzZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcCA9IHByZXY7XG4gICAgICAgICAgICBwcmV2ID0gdmFsdWU7XG4gICAgICAgICAgICBoYXNQcmV2ICYmIHN1YnNjcmliZXIubmV4dChbcCwgdmFsdWVdKTtcbiAgICAgICAgICAgIGhhc1ByZXYgPSB0cnVlO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnBhaXJ3aXNlID0gcGFpcndpc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWlyd2lzZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGFydGl0aW9uID0gdm9pZCAwO1xudmFyIG5vdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm90XCIpO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4vZmlsdGVyXCIpO1xuZnVuY3Rpb24gcGFydGl0aW9uKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHJldHVybiBbZmlsdGVyXzEuZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykoc291cmNlKSwgZmlsdGVyXzEuZmlsdGVyKG5vdF8xLm5vdChwcmVkaWNhdGUsIHRoaXNBcmcpKShzb3VyY2UpXTtcbiAgICB9O1xufVxuZXhwb3J0cy5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJ0aXRpb24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBsdWNrID0gdm9pZCAwO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vbWFwXCIpO1xuZnVuY3Rpb24gcGx1Y2soKSB7XG4gICAgdmFyIHByb3BlcnRpZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBwcm9wZXJ0aWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBwcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbGlzdCBvZiBwcm9wZXJ0aWVzIGNhbm5vdCBiZSBlbXB0eS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcF8xLm1hcChmdW5jdGlvbiAoeCkge1xuICAgICAgICB2YXIgY3VycmVudFByb3AgPSB4O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcCA9IGN1cnJlbnRQcm9wID09PSBudWxsIHx8IGN1cnJlbnRQcm9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50UHJvcFtwcm9wZXJ0aWVzW2ldXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UHJvcCA9IHA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjdXJyZW50UHJvcDtcbiAgICB9KTtcbn1cbmV4cG9ydHMucGx1Y2sgPSBwbHVjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBsdWNrLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wdWJsaXNoID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIG11bHRpY2FzdF8xID0gcmVxdWlyZShcIi4vbXVsdGljYXN0XCIpO1xudmFyIGNvbm5lY3RfMSA9IHJlcXVpcmUoXCIuL2Nvbm5lY3RcIik7XG5mdW5jdGlvbiBwdWJsaXNoKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIHNlbGVjdG9yID8gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gY29ubmVjdF8xLmNvbm5lY3Qoc2VsZWN0b3IpKHNvdXJjZSk7IH0gOiBmdW5jdGlvbiAoc291cmNlKSB7IHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3QobmV3IFN1YmplY3RfMS5TdWJqZWN0KCkpKHNvdXJjZSk7IH07XG59XG5leHBvcnRzLnB1Ymxpc2ggPSBwdWJsaXNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHVibGlzaEJlaGF2aW9yID0gdm9pZCAwO1xudmFyIEJlaGF2aW9yU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL0JlaGF2aW9yU3ViamVjdFwiKTtcbnZhciBDb25uZWN0YWJsZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHB1Ymxpc2hCZWhhdmlvcihpbml0aWFsVmFsdWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICB2YXIgc3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3RfMS5CZWhhdmlvclN1YmplY3QoaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb25uZWN0YWJsZU9ic2VydmFibGVfMS5Db25uZWN0YWJsZU9ic2VydmFibGUoc291cmNlLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJqZWN0OyB9KTtcbiAgICB9O1xufVxuZXhwb3J0cy5wdWJsaXNoQmVoYXZpb3IgPSBwdWJsaXNoQmVoYXZpb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoQmVoYXZpb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnB1Ymxpc2hMYXN0ID0gdm9pZCAwO1xudmFyIEFzeW5jU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL0FzeW5jU3ViamVjdFwiKTtcbnZhciBDb25uZWN0YWJsZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHB1Ymxpc2hMYXN0KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFzeW5jU3ViamVjdF8xLkFzeW5jU3ViamVjdCgpO1xuICAgICAgICByZXR1cm4gbmV3IENvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xLkNvbm5lY3RhYmxlT2JzZXJ2YWJsZShzb3VyY2UsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YmplY3Q7IH0pO1xuICAgIH07XG59XG5leHBvcnRzLnB1Ymxpc2hMYXN0ID0gcHVibGlzaExhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wdWJsaXNoTGFzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHVibGlzaFJlcGxheSA9IHZvaWQgMDtcbnZhciBSZXBsYXlTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vUmVwbGF5U3ViamVjdFwiKTtcbnZhciBtdWx0aWNhc3RfMSA9IHJlcXVpcmUoXCIuL211bHRpY2FzdFwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gcHVibGlzaFJlcGxheShidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzZWxlY3Rvck9yU2NoZWR1bGVyLCB0aW1lc3RhbXBQcm92aWRlcikge1xuICAgIGlmIChzZWxlY3Rvck9yU2NoZWR1bGVyICYmICFpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihzZWxlY3Rvck9yU2NoZWR1bGVyKSkge1xuICAgICAgICB0aW1lc3RhbXBQcm92aWRlciA9IHNlbGVjdG9yT3JTY2hlZHVsZXI7XG4gICAgfVxuICAgIHZhciBzZWxlY3RvciA9IGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHNlbGVjdG9yT3JTY2hlZHVsZXIpID8gc2VsZWN0b3JPclNjaGVkdWxlciA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkgeyByZXR1cm4gbXVsdGljYXN0XzEubXVsdGljYXN0KG5ldyBSZXBsYXlTdWJqZWN0XzEuUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCB0aW1lc3RhbXBQcm92aWRlciksIHNlbGVjdG9yKShzb3VyY2UpOyB9O1xufVxuZXhwb3J0cy5wdWJsaXNoUmVwbGF5ID0gcHVibGlzaFJlcGxheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1Ymxpc2hSZXBsYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yYWNlID0gdm9pZCAwO1xudmFyIGFyZ3NPckFyZ0FycmF5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcmdzT3JBcmdBcnJheVwiKTtcbnZhciByYWNlV2l0aF8xID0gcmVxdWlyZShcIi4vcmFjZVdpdGhcIik7XG5mdW5jdGlvbiByYWNlKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcmFjZVdpdGhfMS5yYWNlV2l0aC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzT3JBcmdBcnJheV8xLmFyZ3NPckFyZ0FycmF5KGFyZ3MpKSkpO1xufVxuZXhwb3J0cy5yYWNlID0gcmFjZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJhY2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yYWNlV2l0aCA9IHZvaWQgMDtcbnZhciByYWNlXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9yYWNlXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gcmFjZVdpdGgoKSB7XG4gICAgdmFyIG90aGVyU291cmNlcyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVyU291cmNlc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gIW90aGVyU291cmNlcy5sZW5ndGhcbiAgICAgICAgPyBpZGVudGl0eV8xLmlkZW50aXR5XG4gICAgICAgIDogbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgcmFjZV8xLnJhY2VJbml0KF9fc3ByZWFkQXJyYXkoW3NvdXJjZV0sIF9fcmVhZChvdGhlclNvdXJjZXMpKSkoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy5yYWNlV2l0aCA9IHJhY2VXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmFjZVdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlZHVjZSA9IHZvaWQgMDtcbnZhciBzY2FuSW50ZXJuYWxzXzEgPSByZXF1aXJlKFwiLi9zY2FuSW50ZXJuYWxzXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiByZWR1Y2UoYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoc2NhbkludGVybmFsc18xLnNjYW5JbnRlcm5hbHMoYWNjdW11bGF0b3IsIHNlZWQsIGFyZ3VtZW50cy5sZW5ndGggPj0gMiwgZmFsc2UsIHRydWUpKTtcbn1cbmV4cG9ydHMucmVkdWNlID0gcmVkdWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVkdWNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWZDb3VudCA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gcmVmQ291bnQoKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICBzb3VyY2UuX3JlZkNvdW50Kys7XG4gICAgICAgIHZhciByZWZDb3VudGVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc291cmNlIHx8IHNvdXJjZS5fcmVmQ291bnQgPD0gMCB8fCAwIDwgLS1zb3VyY2UuX3JlZkNvdW50KSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHNoYXJlZENvbm5lY3Rpb24gPSBzb3VyY2UuX2Nvbm5lY3Rpb247XG4gICAgICAgICAgICB2YXIgY29ubiA9IGNvbm5lY3Rpb247XG4gICAgICAgICAgICBjb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChzaGFyZWRDb25uZWN0aW9uICYmICghY29ubiB8fCBzaGFyZWRDb25uZWN0aW9uID09PSBjb25uKSkge1xuICAgICAgICAgICAgICAgIHNoYXJlZENvbm5lY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUocmVmQ291bnRlcik7XG4gICAgICAgIGlmICghcmVmQ291bnRlci5jbG9zZWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBzb3VyY2UuY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnJlZkNvdW50ID0gcmVmQ291bnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZDb3VudC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVwZWF0ID0gdm9pZCAwO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9lbXB0eVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIHRpbWVyXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS90aW1lclwiKTtcbmZ1bmN0aW9uIHJlcGVhdChjb3VudE9yQ29uZmlnKSB7XG4gICAgdmFyIF9hO1xuICAgIHZhciBjb3VudCA9IEluZmluaXR5O1xuICAgIHZhciBkZWxheTtcbiAgICBpZiAoY291bnRPckNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY291bnRPckNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIChfYSA9IGNvdW50T3JDb25maWcuY291bnQsIGNvdW50ID0gX2EgPT09IHZvaWQgMCA/IEluZmluaXR5IDogX2EsIGRlbGF5ID0gY291bnRPckNvbmZpZy5kZWxheSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb3VudCA9IGNvdW50T3JDb25maWc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvdW50IDw9IDBcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBlbXB0eV8xLkVNUFRZOyB9XG4gICAgICAgIDogbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICAgICAgdmFyIHNvRmFyID0gMDtcbiAgICAgICAgICAgIHZhciBzb3VyY2VTdWI7XG4gICAgICAgICAgICB2YXIgcmVzdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc291cmNlU3ViID09PSBudWxsIHx8IHNvdXJjZVN1YiA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgc291cmNlU3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbm90aWZpZXIgPSB0eXBlb2YgZGVsYXkgPT09ICdudW1iZXInID8gdGltZXJfMS50aW1lcihkZWxheSkgOiBpbm5lckZyb21fMS5pbm5lckZyb20oZGVsYXkoc29GYXIpKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWVyU3Vic2NyaWJlcl8xID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWVyU3Vic2NyaWJlcl8xLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVUb1NvdXJjZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZpZXIuc3Vic2NyaWJlKG5vdGlmaWVyU3Vic2NyaWJlcl8xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZVRvU291cmNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVUb1NvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3luY1Vuc3ViID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgc291cmNlU3ViID0gc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgrK3NvRmFyIDwgY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VTdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3luY1Vuc3ViID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICBpZiAoc3luY1Vuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN1YnNjcmliZVRvU291cmNlKCk7XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy5yZXBlYXQgPSByZXBlYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBlYXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlcGVhdFdoZW4gPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHJlcGVhdFdoZW4obm90aWZpZXIpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5uZXJTdWI7XG4gICAgICAgIHZhciBzeW5jUmVzdWIgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNvbXBsZXRpb25zJDtcbiAgICAgICAgdmFyIGlzTm90aWZpZXJDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNNYWluQ29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNoZWNrQ29tcGxldGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpc01haW5Db21wbGV0ZSAmJiBpc05vdGlmaWVyQ29tcGxldGUgJiYgKHN1YnNjcmliZXIuY29tcGxldGUoKSwgdHJ1ZSk7IH07XG4gICAgICAgIHZhciBnZXRDb21wbGV0aW9uU3ViamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghY29tcGxldGlvbnMkKSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGlvbnMkID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgbm90aWZpZXIoY29tcGxldGlvbnMkKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyU3ViKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVGb3JSZXBlYXRXaGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzeW5jUmVzdWIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBpc05vdGlmaWVyQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBsZXRpb25zJDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN1YnNjcmliZUZvclJlcGVhdFdoZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc01haW5Db21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaW5uZXJTdWIgPSBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpc01haW5Db21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgIWNoZWNrQ29tcGxldGUoKSAmJiBnZXRDb21wbGV0aW9uU3ViamVjdCgpLm5leHQoKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIGlmIChzeW5jUmVzdWIpIHtcbiAgICAgICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlubmVyU3ViID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzeW5jUmVzdWIgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVGb3JSZXBlYXRXaGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHN1YnNjcmliZUZvclJlcGVhdFdoZW4oKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVwZWF0V2hlbiA9IHJlcGVhdFdoZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBlYXRXaGVuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXRyeSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbnZhciB0aW1lcl8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvdGltZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG5mdW5jdGlvbiByZXRyeShjb25maWdPckNvdW50KSB7XG4gICAgaWYgKGNvbmZpZ09yQ291bnQgPT09IHZvaWQgMCkgeyBjb25maWdPckNvdW50ID0gSW5maW5pdHk7IH1cbiAgICB2YXIgY29uZmlnO1xuICAgIGlmIChjb25maWdPckNvdW50ICYmIHR5cGVvZiBjb25maWdPckNvdW50ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25maWcgPSBjb25maWdPckNvdW50O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uZmlnID0ge1xuICAgICAgICAgICAgY291bnQ6IGNvbmZpZ09yQ291bnQsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBfYSA9IGNvbmZpZy5jb3VudCwgY291bnQgPSBfYSA9PT0gdm9pZCAwID8gSW5maW5pdHkgOiBfYSwgZGVsYXkgPSBjb25maWcuZGVsYXksIF9iID0gY29uZmlnLnJlc2V0T25TdWNjZXNzLCByZXNldE9uU3VjY2VzcyA9IF9iID09PSB2b2lkIDAgPyBmYWxzZSA6IF9iO1xuICAgIHJldHVybiBjb3VudCA8PSAwXG4gICAgICAgID8gaWRlbnRpdHlfMS5pZGVudGl0eVxuICAgICAgICA6IGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBzb0ZhciA9IDA7XG4gICAgICAgICAgICB2YXIgaW5uZXJTdWI7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlRm9yUmV0cnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN5bmNVbnN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlubmVyU3ViID0gc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNldE9uU3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc29GYXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb0ZhcisrIDwgY291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1Yl8xID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbm5lclN1Yikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZUZvclJldHJ5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW5jVW5zdWIgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3RpZmllciA9IHR5cGVvZiBkZWxheSA9PT0gJ251bWJlcicgPyB0aW1lcl8xLnRpbWVyKGRlbGF5KSA6IGlubmVyRnJvbV8xLmlubmVyRnJvbShkZWxheShlcnIsIHNvRmFyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vdGlmaWVyU3Vic2NyaWJlcl8xID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpZXJTdWJzY3JpYmVyXzEudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWJfMSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGlmaWVyLnN1YnNjcmliZShub3RpZmllclN1YnNjcmliZXJfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1Yl8xKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgaWYgKHN5bmNVbnN1Yikge1xuICAgICAgICAgICAgICAgICAgICBpbm5lclN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBpbm5lclN1YiA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZUZvclJldHJ5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN1YnNjcmliZUZvclJldHJ5KCk7XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy5yZXRyeSA9IHJldHJ5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJldHJ5V2hlbiA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gcmV0cnlXaGVuKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGlubmVyU3ViO1xuICAgICAgICB2YXIgc3luY1Jlc3ViID0gZmFsc2U7XG4gICAgICAgIHZhciBlcnJvcnMkO1xuICAgICAgICB2YXIgc3Vic2NyaWJlRm9yUmV0cnlXaGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJTdWIgPSBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGlmICghZXJyb3JzJCkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMkID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIG5vdGlmaWVyKGVycm9ycyQpLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyU3ViID8gc3Vic2NyaWJlRm9yUmV0cnlXaGVuKCkgOiAoc3luY1Jlc3ViID0gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVycm9ycyQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzJC5uZXh0KGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgaWYgKHN5bmNSZXN1Yikge1xuICAgICAgICAgICAgICAgIGlubmVyU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWIgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN5bmNSZXN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZUZvclJldHJ5V2hlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzdWJzY3JpYmVGb3JSZXRyeVdoZW4oKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMucmV0cnlXaGVuID0gcmV0cnlXaGVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmV0cnlXaGVuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zYW1wbGUgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2FtcGxlKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICAgIHZhciBsYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgICB9KSk7XG4gICAgICAgIG5vdGlmaWVyLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBub29wXzEubm9vcCkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zYW1wbGUgPSBzYW1wbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zYW1wbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNhbXBsZVRpbWUgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgc2FtcGxlXzEgPSByZXF1aXJlKFwiLi9zYW1wbGVcIik7XG52YXIgaW50ZXJ2YWxfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2ludGVydmFsXCIpO1xuZnVuY3Rpb24gc2FtcGxlVGltZShwZXJpb2QsIHNjaGVkdWxlcikge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9XG4gICAgcmV0dXJuIHNhbXBsZV8xLnNhbXBsZShpbnRlcnZhbF8xLmludGVydmFsKHBlcmlvZCwgc2NoZWR1bGVyKSk7XG59XG5leHBvcnRzLnNhbXBsZVRpbWUgPSBzYW1wbGVUaW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FtcGxlVGltZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NhbiA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIHNjYW5JbnRlcm5hbHNfMSA9IHJlcXVpcmUoXCIuL3NjYW5JbnRlcm5hbHNcIik7XG5mdW5jdGlvbiBzY2FuKGFjY3VtdWxhdG9yLCBzZWVkKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKHNjYW5JbnRlcm5hbHNfMS5zY2FuSW50ZXJuYWxzKGFjY3VtdWxhdG9yLCBzZWVkLCBhcmd1bWVudHMubGVuZ3RoID49IDIsIHRydWUpKTtcbn1cbmV4cG9ydHMuc2NhbiA9IHNjYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2FuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2FuSW50ZXJuYWxzID0gdm9pZCAwO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2NhbkludGVybmFscyhhY2N1bXVsYXRvciwgc2VlZCwgaGFzU2VlZCwgZW1pdE9uTmV4dCwgZW1pdEJlZm9yZUNvbXBsZXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGhhc1N0YXRlID0gaGFzU2VlZDtcbiAgICAgICAgdmFyIHN0YXRlID0gc2VlZDtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGluZGV4Kys7XG4gICAgICAgICAgICBzdGF0ZSA9IGhhc1N0YXRlXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBhY2N1bXVsYXRvcihzdGF0ZSwgdmFsdWUsIGkpXG4gICAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgICAgICAoKGhhc1N0YXRlID0gdHJ1ZSksIHZhbHVlKTtcbiAgICAgICAgICAgIGVtaXRPbk5leHQgJiYgc3Vic2NyaWJlci5uZXh0KHN0YXRlKTtcbiAgICAgICAgfSwgZW1pdEJlZm9yZUNvbXBsZXRlICYmXG4gICAgICAgICAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGhhc1N0YXRlICYmIHN1YnNjcmliZXIubmV4dChzdGF0ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICB9O1xufVxuZXhwb3J0cy5zY2FuSW50ZXJuYWxzID0gc2NhbkludGVybmFscztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjYW5JbnRlcm5hbHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNlcXVlbmNlRXF1YWwgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHNlcXVlbmNlRXF1YWwoY29tcGFyZVRvLCBjb21wYXJhdG9yKSB7XG4gICAgaWYgKGNvbXBhcmF0b3IgPT09IHZvaWQgMCkgeyBjb21wYXJhdG9yID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgPT09IGI7IH07IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgYVN0YXRlID0gY3JlYXRlU3RhdGUoKTtcbiAgICAgICAgdmFyIGJTdGF0ZSA9IGNyZWF0ZVN0YXRlKCk7XG4gICAgICAgIHZhciBlbWl0ID0gZnVuY3Rpb24gKGlzRXF1YWwpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpc0VxdWFsKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGNyZWF0ZVN1YnNjcmliZXIgPSBmdW5jdGlvbiAoc2VsZlN0YXRlLCBvdGhlclN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgc2VxdWVuY2VFcXVhbFN1YnNjcmliZXIgPSBPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gb3RoZXJTdGF0ZS5idWZmZXIsIGNvbXBsZXRlID0gb3RoZXJTdGF0ZS5jb21wbGV0ZTtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZSA/IGVtaXQoZmFsc2UpIDogc2VsZlN0YXRlLmJ1ZmZlci5wdXNoKGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgIWNvbXBhcmF0b3IoYSwgYnVmZmVyLnNoaWZ0KCkpICYmIGVtaXQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzZWxmU3RhdGUuY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9IG90aGVyU3RhdGUuY29tcGxldGUsIGJ1ZmZlciA9IG90aGVyU3RhdGUuYnVmZmVyO1xuICAgICAgICAgICAgICAgIGNvbXBsZXRlICYmIGVtaXQoYnVmZmVyLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgICAgICAgICAgc2VxdWVuY2VFcXVhbFN1YnNjcmliZXIgPT09IG51bGwgfHwgc2VxdWVuY2VFcXVhbFN1YnNjcmliZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzZXF1ZW5jZUVxdWFsU3Vic2NyaWJlcjtcbiAgICAgICAgfTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVTdWJzY3JpYmVyKGFTdGF0ZSwgYlN0YXRlKSk7XG4gICAgICAgIGNvbXBhcmVUby5zdWJzY3JpYmUoY3JlYXRlU3Vic2NyaWJlcihiU3RhdGUsIGFTdGF0ZSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zZXF1ZW5jZUVxdWFsID0gc2VxdWVuY2VFcXVhbDtcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJ1ZmZlcjogW10sXG4gICAgICAgIGNvbXBsZXRlOiBmYWxzZSxcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VxdWVuY2VFcXVhbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNoYXJlID0gdm9pZCAwO1xudmFyIGZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2Zyb21cIik7XG52YXIgdGFrZV8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy90YWtlXCIpO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIFN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpYmVyXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiBzaGFyZShvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICB2YXIgX2EgPSBvcHRpb25zLmNvbm5lY3RvciwgY29ubmVjdG9yID0gX2EgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpOyB9IDogX2EsIF9iID0gb3B0aW9ucy5yZXNldE9uRXJyb3IsIHJlc2V0T25FcnJvciA9IF9iID09PSB2b2lkIDAgPyB0cnVlIDogX2IsIF9jID0gb3B0aW9ucy5yZXNldE9uQ29tcGxldGUsIHJlc2V0T25Db21wbGV0ZSA9IF9jID09PSB2b2lkIDAgPyB0cnVlIDogX2MsIF9kID0gb3B0aW9ucy5yZXNldE9uUmVmQ291bnRaZXJvLCByZXNldE9uUmVmQ291bnRaZXJvID0gX2QgPT09IHZvaWQgMCA/IHRydWUgOiBfZDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHdyYXBwZXJTb3VyY2UpIHtcbiAgICAgICAgdmFyIGNvbm5lY3Rpb24gPSBudWxsO1xuICAgICAgICB2YXIgcmVzZXRDb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBudWxsO1xuICAgICAgICB2YXIgcmVmQ291bnQgPSAwO1xuICAgICAgICB2YXIgaGFzQ29tcGxldGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBoYXNFcnJvcmVkID0gZmFsc2U7XG4gICAgICAgIHZhciBjYW5jZWxSZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9PT0gbnVsbCB8fCByZXNldENvbm5lY3Rpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc2V0Q29ubmVjdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgcmVzZXRDb25uZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2FuY2VsUmVzZXQoKTtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24gPSBzdWJqZWN0ID0gbnVsbDtcbiAgICAgICAgICAgIGhhc0NvbXBsZXRlZCA9IGhhc0Vycm9yZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHJlc2V0QW5kVW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY29ubiA9IGNvbm5lY3Rpb247XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgICAgY29ubiA9PT0gbnVsbCB8fCBjb25uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICByZWZDb3VudCsrO1xuICAgICAgICAgICAgaWYgKCFoYXNFcnJvcmVkICYmICFoYXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjYW5jZWxSZXNldCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRlc3QgPSAoc3ViamVjdCA9IHN1YmplY3QgIT09IG51bGwgJiYgc3ViamVjdCAhPT0gdm9pZCAwID8gc3ViamVjdCA6IGNvbm5lY3RvcigpKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZWZDb3VudC0tO1xuICAgICAgICAgICAgICAgIGlmIChyZWZDb3VudCA9PT0gMCAmJiAhaGFzRXJyb3JlZCAmJiAhaGFzQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IGhhbmRsZVJlc2V0KHJlc2V0QW5kVW5zdWJzY3JpYmUsIHJlc2V0T25SZWZDb3VudFplcm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGVzdC5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uID0gbmV3IFN1YnNjcmliZXJfMS5TYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZGVzdC5uZXh0KHZhbHVlKTsgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsUmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IGhhbmRsZVJlc2V0KHJlc2V0LCByZXNldE9uRXJyb3IsIGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0LmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNDb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsUmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0Q29ubmVjdGlvbiA9IGhhbmRsZVJlc2V0KHJlc2V0LCByZXNldE9uQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdC5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGZyb21fMS5mcm9tKHNvdXJjZSkuc3Vic2NyaWJlKGNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSh3cmFwcGVyU291cmNlKTtcbiAgICB9O1xufVxuZXhwb3J0cy5zaGFyZSA9IHNoYXJlO1xuZnVuY3Rpb24gaGFuZGxlUmVzZXQocmVzZXQsIG9uKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBhcmdzW19pIC0gMl0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICBpZiAob24gPT09IHRydWUpIHtcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBvbi5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpLnBpcGUodGFrZV8xLnRha2UoMSkpXG4gICAgICAgIC5zdWJzY3JpYmUoZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVzZXQoKTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFyZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2hhcmVSZXBsYXkgPSB2b2lkIDA7XG52YXIgUmVwbGF5U3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1JlcGxheVN1YmplY3RcIik7XG52YXIgc2hhcmVfMSA9IHJlcXVpcmUoXCIuL3NoYXJlXCIpO1xuZnVuY3Rpb24gc2hhcmVSZXBsYXkoY29uZmlnT3JCdWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBidWZmZXJTaXplO1xuICAgIHZhciByZWZDb3VudCA9IGZhbHNlO1xuICAgIGlmIChjb25maWdPckJ1ZmZlclNpemUgJiYgdHlwZW9mIGNvbmZpZ09yQnVmZmVyU2l6ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgYnVmZmVyU2l6ZSA9IChfYSA9IGNvbmZpZ09yQnVmZmVyU2l6ZS5idWZmZXJTaXplKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBJbmZpbml0eTtcbiAgICAgICAgd2luZG93VGltZSA9IChfYiA9IGNvbmZpZ09yQnVmZmVyU2l6ZS53aW5kb3dUaW1lKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBJbmZpbml0eTtcbiAgICAgICAgcmVmQ291bnQgPSAhIWNvbmZpZ09yQnVmZmVyU2l6ZS5yZWZDb3VudDtcbiAgICAgICAgc2NoZWR1bGVyID0gY29uZmlnT3JCdWZmZXJTaXplLnNjaGVkdWxlcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJ1ZmZlclNpemUgPSBjb25maWdPckJ1ZmZlclNpemUgIT09IG51bGwgJiYgY29uZmlnT3JCdWZmZXJTaXplICE9PSB2b2lkIDAgPyBjb25maWdPckJ1ZmZlclNpemUgOiBJbmZpbml0eTtcbiAgICB9XG4gICAgcmV0dXJuIHNoYXJlXzEuc2hhcmUoe1xuICAgICAgICBjb25uZWN0b3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBSZXBsYXlTdWJqZWN0XzEuUmVwbGF5U3ViamVjdChidWZmZXJTaXplLCB3aW5kb3dUaW1lLCBzY2hlZHVsZXIpOyB9LFxuICAgICAgICByZXNldE9uRXJyb3I6IHRydWUsXG4gICAgICAgIHJlc2V0T25Db21wbGV0ZTogZmFsc2UsXG4gICAgICAgIHJlc2V0T25SZWZDb3VudFplcm86IHJlZkNvdW50LFxuICAgIH0pO1xufVxuZXhwb3J0cy5zaGFyZVJlcGxheSA9IHNoYXJlUmVwbGF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2hhcmVSZXBsYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNpbmdsZSA9IHZvaWQgMDtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9FbXB0eUVycm9yXCIpO1xudmFyIFNlcXVlbmNlRXJyb3JfMSA9IHJlcXVpcmUoXCIuLi91dGlsL1NlcXVlbmNlRXJyb3JcIik7XG52YXIgTm90Rm91bmRFcnJvcl8xID0gcmVxdWlyZShcIi4uL3V0aWwvTm90Rm91bmRFcnJvclwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gc2luZ2xlKHByZWRpY2F0ZSkge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgc2luZ2xlVmFsdWU7XG4gICAgICAgIHZhciBzZWVuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzZWVuVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHZhbHVlLCBpbmRleCsrLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgJiYgc3Vic2NyaWJlci5lcnJvcihuZXcgU2VxdWVuY2VFcnJvcl8xLlNlcXVlbmNlRXJyb3IoJ1RvbyBtYW55IG1hdGNoaW5nIHZhbHVlcycpKTtcbiAgICAgICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgc2luZ2xlVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHNpbmdsZVZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHNlZW5WYWx1ZSA/IG5ldyBOb3RGb3VuZEVycm9yXzEuTm90Rm91bmRFcnJvcignTm8gbWF0Y2hpbmcgdmFsdWVzJykgOiBuZXcgRW1wdHlFcnJvcl8xLkVtcHR5RXJyb3IoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2luZ2xlID0gc2luZ2xlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2luZ2xlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5za2lwID0gdm9pZCAwO1xudmFyIGZpbHRlcl8xID0gcmVxdWlyZShcIi4vZmlsdGVyXCIpO1xuZnVuY3Rpb24gc2tpcChjb3VudCkge1xuICAgIHJldHVybiBmaWx0ZXJfMS5maWx0ZXIoZnVuY3Rpb24gKF8sIGluZGV4KSB7IHJldHVybiBjb3VudCA8PSBpbmRleDsgfSk7XG59XG5leHBvcnRzLnNraXAgPSBza2lwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2tpcExhc3QgPSB2b2lkIDA7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiBza2lwTGFzdChza2lwQ291bnQpIHtcbiAgICByZXR1cm4gc2tpcENvdW50IDw9IDBcbiAgICAgICAgP1xuICAgICAgICAgICAgaWRlbnRpdHlfMS5pZGVudGl0eVxuICAgICAgICA6IGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciByaW5nID0gbmV3IEFycmF5KHNraXBDb3VudCk7XG4gICAgICAgICAgICB2YXIgc2VlbiA9IDA7XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVJbmRleCA9IHNlZW4rKztcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVJbmRleCA8IHNraXBDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICByaW5nW3ZhbHVlSW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB2YWx1ZUluZGV4ICUgc2tpcENvdW50O1xuICAgICAgICAgICAgICAgICAgICB2YXIgb2xkVmFsdWUgPSByaW5nW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgcmluZ1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJpbmcgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG59XG5leHBvcnRzLnNraXBMYXN0ID0gc2tpcExhc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1za2lwTGFzdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2tpcFVudGlsID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgbm9vcF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbm9vcFwiKTtcbmZ1bmN0aW9uIHNraXBVbnRpbChub3RpZmllcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciB0YWtpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHNraXBTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHNraXBTdWJzY3JpYmVyID09PSBudWxsIHx8IHNraXBTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBza2lwU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGFraW5nID0gdHJ1ZTtcbiAgICAgICAgfSwgbm9vcF8xLm5vb3ApO1xuICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20obm90aWZpZXIpLnN1YnNjcmliZShza2lwU3Vic2NyaWJlcik7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdGFraW5nICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7IH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2tpcFVudGlsID0gc2tpcFVudGlsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2tpcFVudGlsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5za2lwV2hpbGUgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHNraXBXaGlsZShwcmVkaWNhdGUpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgdGFraW5nID0gZmFsc2U7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKHRha2luZyB8fCAodGFraW5nID0gIXByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgrKykpKSAmJiBzdWJzY3JpYmVyLm5leHQodmFsdWUpOyB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnNraXBXaGlsZSA9IHNraXBXaGlsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNraXBXaGlsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc3RhcnRXaXRoID0gdm9pZCAwO1xudmFyIGNvbmNhdF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvY29uY2F0XCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIHN0YXJ0V2l0aCgpIHtcbiAgICB2YXIgdmFsdWVzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFsdWVzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSBhcmdzXzEucG9wU2NoZWR1bGVyKHZhbHVlcyk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgKHNjaGVkdWxlciA/IGNvbmNhdF8xLmNvbmNhdCh2YWx1ZXMsIHNvdXJjZSwgc2NoZWR1bGVyKSA6IGNvbmNhdF8xLmNvbmNhdCh2YWx1ZXMsIHNvdXJjZSkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3RhcnRXaXRoID0gc3RhcnRXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhcnRXaXRoLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdWJzY3JpYmVPbiA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xuZnVuY3Rpb24gc3Vic2NyaWJlT24oc2NoZWR1bGVyLCBkZWxheSkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHN1YnNjcmliZXIuYWRkKHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7IHJldHVybiBzb3VyY2Uuc3Vic2NyaWJlKHN1YnNjcmliZXIpOyB9LCBkZWxheSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zdWJzY3JpYmVPbiA9IHN1YnNjcmliZU9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Vic2NyaWJlT24uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN3aXRjaEFsbCA9IHZvaWQgMDtcbnZhciBzd2l0Y2hNYXBfMSA9IHJlcXVpcmUoXCIuL3N3aXRjaE1hcFwiKTtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBzd2l0Y2hBbGwoKSB7XG4gICAgcmV0dXJuIHN3aXRjaE1hcF8xLnN3aXRjaE1hcChpZGVudGl0eV8xLmlkZW50aXR5KTtcbn1cbmV4cG9ydHMuc3dpdGNoQWxsID0gc3dpdGNoQWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoQWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zd2l0Y2hNYXAgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbmZ1bmN0aW9uIHN3aXRjaE1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3Rvcikge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbm5lclN1YnNjcmliZXIgPSBudWxsO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICB2YXIgaXNDb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzQ29tcGxldGUgJiYgIWlubmVyU3Vic2NyaWJlciAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID09PSBudWxsIHx8IGlubmVyU3Vic2NyaWJlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5uZXJTdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB2YXIgaW5uZXJJbmRleCA9IDA7XG4gICAgICAgICAgICB2YXIgb3V0ZXJJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgICBpbm5lckZyb21fMS5pbm5lckZyb20ocHJvamVjdCh2YWx1ZSwgb3V0ZXJJbmRleCkpLnN1YnNjcmliZSgoaW5uZXJTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uIChpbm5lclZhbHVlKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQocmVzdWx0U2VsZWN0b3IgPyByZXN1bHRTZWxlY3Rvcih2YWx1ZSwgaW5uZXJWYWx1ZSwgb3V0ZXJJbmRleCwgaW5uZXJJbmRleCsrKSA6IGlubmVyVmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaW5uZXJTdWJzY3JpYmVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICB9KSkpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNoZWNrQ29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zd2l0Y2hNYXAgPSBzd2l0Y2hNYXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hNYXAuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN3aXRjaE1hcFRvID0gdm9pZCAwO1xudmFyIHN3aXRjaE1hcF8xID0gcmVxdWlyZShcIi4vc3dpdGNoTWFwXCIpO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBzd2l0Y2hNYXBUbyhpbm5lck9ic2VydmFibGUsIHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKHJlc3VsdFNlbGVjdG9yKSA/IHN3aXRjaE1hcF8xLnN3aXRjaE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0sIHJlc3VsdFNlbGVjdG9yKSA6IHN3aXRjaE1hcF8xLnN3aXRjaE1hcChmdW5jdGlvbiAoKSB7IHJldHVybiBpbm5lck9ic2VydmFibGU7IH0pO1xufVxuZXhwb3J0cy5zd2l0Y2hNYXBUbyA9IHN3aXRjaE1hcFRvO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3dpdGNoTWFwVG8uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN3aXRjaFNjYW4gPSB2b2lkIDA7XG52YXIgc3dpdGNoTWFwXzEgPSByZXF1aXJlKFwiLi9zd2l0Y2hNYXBcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbmZ1bmN0aW9uIHN3aXRjaFNjYW4oYWNjdW11bGF0b3IsIHNlZWQpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgc3RhdGUgPSBzZWVkO1xuICAgICAgICBzd2l0Y2hNYXBfMS5zd2l0Y2hNYXAoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkgeyByZXR1cm4gYWNjdW11bGF0b3Ioc3RhdGUsIHZhbHVlLCBpbmRleCk7IH0sIGZ1bmN0aW9uIChfLCBpbm5lclZhbHVlKSB7IHJldHVybiAoKHN0YXRlID0gaW5uZXJWYWx1ZSksIGlubmVyVmFsdWUpOyB9KShzb3VyY2UpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0YXRlID0gbnVsbDtcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3dpdGNoU2NhbiA9IHN3aXRjaFNjYW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zd2l0Y2hTY2FuLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50YWtlID0gdm9pZCAwO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9lbXB0eVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gdGFrZShjb3VudCkge1xuICAgIHJldHVybiBjb3VudCA8PSAwXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtcHR5XzEuRU1QVFk7IH1cbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgc2VlbiA9IDA7XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKytzZWVuIDw9IGNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA8PSBzZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy50YWtlID0gdGFrZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRha2VMYXN0ID0gdm9pZCAwO1xudmFyIGVtcHR5XzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9lbXB0eVwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xuZnVuY3Rpb24gdGFrZUxhc3QoY291bnQpIHtcbiAgICByZXR1cm4gY291bnQgPD0gMFxuICAgICAgICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVtcHR5XzEuRU1QVFk7IH1cbiAgICAgICAgOiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gW107XG4gICAgICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgY291bnQgPCBidWZmZXIubGVuZ3RoICYmIGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlcl8xID0gX192YWx1ZXMoYnVmZmVyKSwgYnVmZmVyXzFfMSA9IGJ1ZmZlcl8xLm5leHQoKTsgIWJ1ZmZlcl8xXzEuZG9uZTsgYnVmZmVyXzFfMSA9IGJ1ZmZlcl8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYnVmZmVyXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXJfMV8xICYmICFidWZmZXJfMV8xLmRvbmUgJiYgKF9hID0gYnVmZmVyXzEucmV0dXJuKSkgX2EuY2FsbChidWZmZXJfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9LCB1bmRlZmluZWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBudWxsO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbn1cbmV4cG9ydHMudGFrZUxhc3QgPSB0YWtlTGFzdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VMYXN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50YWtlVW50aWwgPSB2b2lkIDA7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xuZnVuY3Rpb24gdGFrZVVudGlsKG5vdGlmaWVyKSB7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgaW5uZXJGcm9tXzEuaW5uZXJGcm9tKG5vdGlmaWVyKS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZXIuY29tcGxldGUoKTsgfSwgbm9vcF8xLm5vb3ApKTtcbiAgICAgICAgIXN1YnNjcmliZXIuY2xvc2VkICYmIHNvdXJjZS5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfSk7XG59XG5leHBvcnRzLnRha2VVbnRpbCA9IHRha2VVbnRpbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRha2VVbnRpbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGFrZVdoaWxlID0gdm9pZCAwO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiB0YWtlV2hpbGUocHJlZGljYXRlLCBpbmNsdXNpdmUpIHtcbiAgICBpZiAoaW5jbHVzaXZlID09PSB2b2lkIDApIHsgaW5jbHVzaXZlID0gZmFsc2U7IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4KyspO1xuICAgICAgICAgICAgKHJlc3VsdCB8fCBpbmNsdXNpdmUpICYmIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAhcmVzdWx0ICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50YWtlV2hpbGUgPSB0YWtlV2hpbGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10YWtlV2hpbGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRhcCA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0Z1bmN0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lkZW50aXR5XCIpO1xuZnVuY3Rpb24gdGFwKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICB2YXIgdGFwT2JzZXJ2ZXIgPSBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkgfHwgZXJyb3IgfHwgY29tcGxldGVcbiAgICAgICAgP1xuICAgICAgICAgICAgeyBuZXh0OiBvYnNlcnZlck9yTmV4dCwgZXJyb3I6IGVycm9yLCBjb21wbGV0ZTogY29tcGxldGUgfVxuICAgICAgICA6IG9ic2VydmVyT3JOZXh0O1xuICAgIHJldHVybiB0YXBPYnNlcnZlclxuICAgICAgICA/IGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLnN1YnNjcmliZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgdmFyIGlzVW5zdWIgPSB0cnVlO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLm5leHQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaXNVbnN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpc1Vuc3ViID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgKF9hID0gdGFwT2JzZXJ2ZXIuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyLCBlcnIpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIGlmIChpc1Vuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLnVuc3Vic2NyaWJlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChfYiA9IHRhcE9ic2VydmVyLmZpbmFsaXplKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5XzEuaWRlbnRpdHk7XG59XG5leHBvcnRzLnRhcCA9IHRhcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhcC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGhyb3R0bGUgPSBleHBvcnRzLmRlZmF1bHRUaHJvdHRsZUNvbmZpZyA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZXhwb3J0cy5kZWZhdWx0VGhyb3R0bGVDb25maWcgPSB7XG4gICAgbGVhZGluZzogdHJ1ZSxcbiAgICB0cmFpbGluZzogZmFsc2UsXG59O1xuZnVuY3Rpb24gdGhyb3R0bGUoZHVyYXRpb25TZWxlY3RvciwgY29uZmlnKSB7XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7IGNvbmZpZyA9IGV4cG9ydHMuZGVmYXVsdFRocm90dGxlQ29uZmlnOyB9XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGxlYWRpbmcgPSBjb25maWcubGVhZGluZywgdHJhaWxpbmcgPSBjb25maWcudHJhaWxpbmc7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgc2VuZFZhbHVlID0gbnVsbDtcbiAgICAgICAgdmFyIHRocm90dGxlZCA9IG51bGw7XG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBlbmRUaHJvdHRsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3R0bGVkID09PSBudWxsIHx8IHRocm90dGxlZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aHJvdHRsZWQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRyYWlsaW5nKSB7XG4gICAgICAgICAgICAgICAgc2VuZCgpO1xuICAgICAgICAgICAgICAgIGlzQ29tcGxldGUgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY2xlYW51cFRocm90dGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdHRsZWQgPSBudWxsO1xuICAgICAgICAgICAgaXNDb21wbGV0ZSAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdGFydFRocm90dGxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRocm90dGxlZCA9IGlubmVyRnJvbV8xLmlubmVyRnJvbShkdXJhdGlvblNlbGVjdG9yKHZhbHVlKSkuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBlbmRUaHJvdHRsaW5nLCBjbGVhbnVwVGhyb3R0bGluZykpKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHNlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNlbmRWYWx1ZTtcbiAgICAgICAgICAgICAgICBzZW5kVmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgIWlzQ29tcGxldGUgJiYgc3RhcnRUaHJvdHRsZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgc2VuZFZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAhKHRocm90dGxlZCAmJiAhdGhyb3R0bGVkLmNsb3NlZCkgJiYgKGxlYWRpbmcgPyBzZW5kKCkgOiBzdGFydFRocm90dGxlKHZhbHVlKSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgISh0cmFpbGluZyAmJiBoYXNWYWx1ZSAmJiB0aHJvdHRsZWQgJiYgIXRocm90dGxlZC5jbG9zZWQpICYmIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50aHJvdHRsZSA9IHRocm90dGxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3R0bGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRocm90dGxlVGltZSA9IHZvaWQgMDtcbnZhciBhc3luY18xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci9hc3luY1wiKTtcbnZhciB0aHJvdHRsZV8xID0gcmVxdWlyZShcIi4vdGhyb3R0bGVcIik7XG52YXIgdGltZXJfMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL3RpbWVyXCIpO1xuZnVuY3Rpb24gdGhyb3R0bGVUaW1lKGR1cmF0aW9uLCBzY2hlZHVsZXIsIGNvbmZpZykge1xuICAgIGlmIChzY2hlZHVsZXIgPT09IHZvaWQgMCkgeyBzY2hlZHVsZXIgPSBhc3luY18xLmFzeW5jU2NoZWR1bGVyOyB9XG4gICAgaWYgKGNvbmZpZyA9PT0gdm9pZCAwKSB7IGNvbmZpZyA9IHRocm90dGxlXzEuZGVmYXVsdFRocm90dGxlQ29uZmlnOyB9XG4gICAgdmFyIGR1cmF0aW9uJCA9IHRpbWVyXzEudGltZXIoZHVyYXRpb24sIHNjaGVkdWxlcik7XG4gICAgcmV0dXJuIHRocm90dGxlXzEudGhyb3R0bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gZHVyYXRpb24kOyB9LCBjb25maWcpO1xufVxuZXhwb3J0cy50aHJvdHRsZVRpbWUgPSB0aHJvdHRsZVRpbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZVRpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRocm93SWZFbXB0eSA9IHZvaWQgMDtcbnZhciBFbXB0eUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9FbXB0eUVycm9yXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiB0aHJvd0lmRW1wdHkoZXJyb3JGYWN0b3J5KSB7XG4gICAgaWYgKGVycm9yRmFjdG9yeSA9PT0gdm9pZCAwKSB7IGVycm9yRmFjdG9yeSA9IGRlZmF1bHRFcnJvckZhY3Rvcnk7IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiAoaGFzVmFsdWUgPyBzdWJzY3JpYmVyLmNvbXBsZXRlKCkgOiBzdWJzY3JpYmVyLmVycm9yKGVycm9yRmFjdG9yeSgpKSk7IH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMudGhyb3dJZkVtcHR5ID0gdGhyb3dJZkVtcHR5O1xuZnVuY3Rpb24gZGVmYXVsdEVycm9yRmFjdG9yeSgpIHtcbiAgICByZXR1cm4gbmV3IEVtcHR5RXJyb3JfMS5FbXB0eUVycm9yKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd0lmRW1wdHkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRpbWVJbnRlcnZhbCA9IGV4cG9ydHMudGltZUludGVydmFsID0gdm9pZCAwO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiB0aW1lSW50ZXJ2YWwoc2NoZWR1bGVyKSB7XG4gICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7IH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgbGFzdCA9IHNjaGVkdWxlci5ub3coKTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbm93ID0gc2NoZWR1bGVyLm5vdygpO1xuICAgICAgICAgICAgdmFyIGludGVydmFsID0gbm93IC0gbGFzdDtcbiAgICAgICAgICAgIGxhc3QgPSBub3c7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQobmV3IFRpbWVJbnRlcnZhbCh2YWx1ZSwgaW50ZXJ2YWwpKTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50aW1lSW50ZXJ2YWwgPSB0aW1lSW50ZXJ2YWw7XG52YXIgVGltZUludGVydmFsID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUaW1lSW50ZXJ2YWwodmFsdWUsIGludGVydmFsKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IGludGVydmFsO1xuICAgIH1cbiAgICByZXR1cm4gVGltZUludGVydmFsO1xufSgpKTtcbmV4cG9ydHMuVGltZUludGVydmFsID0gVGltZUludGVydmFsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZUludGVydmFsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50aW1lb3V0ID0gZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSB2b2lkIDA7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgaXNEYXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc0RhdGVcIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBjcmVhdGVFcnJvckNsYXNzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9jcmVhdGVFcnJvckNsYXNzXCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGV4ZWN1dGVTY2hlZHVsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlXCIpO1xuZXhwb3J0cy5UaW1lb3V0RXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFRpbWVvdXRFcnJvckltcGwoaW5mbykge1xuICAgICAgICBpZiAoaW5mbyA9PT0gdm9pZCAwKSB7IGluZm8gPSBudWxsOyB9XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ1RpbWVvdXQgaGFzIG9jY3VycmVkJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1RpbWVvdXRFcnJvcic7XG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87XG4gICAgfTtcbn0pO1xuZnVuY3Rpb24gdGltZW91dChjb25maWcsIHNjaGVkdWxlckFyZykge1xuICAgIHZhciBfYSA9IChpc0RhdGVfMS5pc1ZhbGlkRGF0ZShjb25maWcpID8geyBmaXJzdDogY29uZmlnIH0gOiB0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJyA/IHsgZWFjaDogY29uZmlnIH0gOiBjb25maWcpLCBmaXJzdCA9IF9hLmZpcnN0LCBlYWNoID0gX2EuZWFjaCwgX2IgPSBfYS53aXRoLCBfd2l0aCA9IF9iID09PSB2b2lkIDAgPyB0aW1lb3V0RXJyb3JGYWN0b3J5IDogX2IsIF9jID0gX2Euc2NoZWR1bGVyLCBzY2hlZHVsZXIgPSBfYyA9PT0gdm9pZCAwID8gc2NoZWR1bGVyQXJnICE9PSBudWxsICYmIHNjaGVkdWxlckFyZyAhPT0gdm9pZCAwID8gc2NoZWR1bGVyQXJnIDogYXN5bmNfMS5hc3luY1NjaGVkdWxlciA6IF9jLCBfZCA9IF9hLm1ldGEsIG1ldGEgPSBfZCA9PT0gdm9pZCAwID8gbnVsbCA6IF9kO1xuICAgIGlmIChmaXJzdCA9PSBudWxsICYmIGVhY2ggPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdObyB0aW1lb3V0IHByb3ZpZGVkLicpO1xuICAgIH1cbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb3JpZ2luYWxTb3VyY2VTdWJzY3JpcHRpb247XG4gICAgICAgIHZhciB0aW1lclN1YnNjcmlwdGlvbjtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IG51bGw7XG4gICAgICAgIHZhciBzZWVuID0gMDtcbiAgICAgICAgdmFyIHN0YXJ0VGltZXIgPSBmdW5jdGlvbiAoZGVsYXkpIHtcbiAgICAgICAgICAgIHRpbWVyU3Vic2NyaXB0aW9uID0gZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsU291cmNlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShfd2l0aCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhOiBtZXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFZhbHVlOiBsYXN0VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWVuOiBzZWVuLFxuICAgICAgICAgICAgICAgICAgICB9KSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIH07XG4gICAgICAgIG9yaWdpbmFsU291cmNlU3Vic2NyaXB0aW9uID0gc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aW1lclN1YnNjcmlwdGlvbiA9PT0gbnVsbCB8fCB0aW1lclN1YnNjcmlwdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGltZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHNlZW4rKztcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCgobGFzdFZhbHVlID0gdmFsdWUpKTtcbiAgICAgICAgICAgIGVhY2ggPiAwICYmIHN0YXJ0VGltZXIoZWFjaCk7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoISh0aW1lclN1YnNjcmlwdGlvbiA9PT0gbnVsbCB8fCB0aW1lclN1YnNjcmlwdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGltZXJTdWJzY3JpcHRpb24uY2xvc2VkKSkge1xuICAgICAgICAgICAgICAgIHRpbWVyU3Vic2NyaXB0aW9uID09PSBudWxsIHx8IHRpbWVyU3Vic2NyaXB0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aW1lclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdFZhbHVlID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgICAgICBzdGFydFRpbWVyKGZpcnN0ICE9IG51bGwgPyAodHlwZW9mIGZpcnN0ID09PSAnbnVtYmVyJyA/IGZpcnN0IDogK2ZpcnN0IC0gc2NoZWR1bGVyLm5vdygpKSA6IGVhY2gpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50aW1lb3V0ID0gdGltZW91dDtcbmZ1bmN0aW9uIHRpbWVvdXRFcnJvckZhY3RvcnkoaW5mbykge1xuICAgIHRocm93IG5ldyBleHBvcnRzLlRpbWVvdXRFcnJvcihpbmZvKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRpbWVvdXRXaXRoID0gdm9pZCAwO1xudmFyIGFzeW5jXzEgPSByZXF1aXJlKFwiLi4vc2NoZWR1bGVyL2FzeW5jXCIpO1xudmFyIGlzRGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNEYXRlXCIpO1xudmFyIHRpbWVvdXRfMSA9IHJlcXVpcmUoXCIuL3RpbWVvdXRcIik7XG5mdW5jdGlvbiB0aW1lb3V0V2l0aChkdWUsIHdpdGhPYnNlcnZhYmxlLCBzY2hlZHVsZXIpIHtcbiAgICB2YXIgZmlyc3Q7XG4gICAgdmFyIGVhY2g7XG4gICAgdmFyIF93aXRoO1xuICAgIHNjaGVkdWxlciA9IHNjaGVkdWxlciAhPT0gbnVsbCAmJiBzY2hlZHVsZXIgIT09IHZvaWQgMCA/IHNjaGVkdWxlciA6IGFzeW5jXzEuYXN5bmM7XG4gICAgaWYgKGlzRGF0ZV8xLmlzVmFsaWREYXRlKGR1ZSkpIHtcbiAgICAgICAgZmlyc3QgPSBkdWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGVhY2ggPSBkdWU7XG4gICAgfVxuICAgIGlmICh3aXRoT2JzZXJ2YWJsZSkge1xuICAgICAgICBfd2l0aCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHdpdGhPYnNlcnZhYmxlOyB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTm8gb2JzZXJ2YWJsZSBwcm92aWRlZCB0byBzd2l0Y2ggdG8nKTtcbiAgICB9XG4gICAgaWYgKGZpcnN0ID09IG51bGwgJiYgZWFjaCA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIHRpbWVvdXQgcHJvdmlkZWQuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aW1lb3V0XzEudGltZW91dCh7XG4gICAgICAgIGZpcnN0OiBmaXJzdCxcbiAgICAgICAgZWFjaDogZWFjaCxcbiAgICAgICAgc2NoZWR1bGVyOiBzY2hlZHVsZXIsXG4gICAgICAgIHdpdGg6IF93aXRoLFxuICAgIH0pO1xufVxuZXhwb3J0cy50aW1lb3V0V2l0aCA9IHRpbWVvdXRXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFdpdGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRpbWVzdGFtcCA9IHZvaWQgMDtcbnZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyXCIpO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4vbWFwXCIpO1xuZnVuY3Rpb24gdGltZXN0YW1wKHRpbWVzdGFtcFByb3ZpZGVyKSB7XG4gICAgaWYgKHRpbWVzdGFtcFByb3ZpZGVyID09PSB2b2lkIDApIHsgdGltZXN0YW1wUHJvdmlkZXIgPSBkYXRlVGltZXN0YW1wUHJvdmlkZXJfMS5kYXRlVGltZXN0YW1wUHJvdmlkZXI7IH1cbiAgICByZXR1cm4gbWFwXzEubWFwKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gKHsgdmFsdWU6IHZhbHVlLCB0aW1lc3RhbXA6IHRpbWVzdGFtcFByb3ZpZGVyLm5vdygpIH0pOyB9KTtcbn1cbmV4cG9ydHMudGltZXN0YW1wID0gdGltZXN0YW1wO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZXN0YW1wLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy50b0FycmF5ID0gdm9pZCAwO1xudmFyIHJlZHVjZV8xID0gcmVxdWlyZShcIi4vcmVkdWNlXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgYXJyUmVkdWNlciA9IGZ1bmN0aW9uIChhcnIsIHZhbHVlKSB7IHJldHVybiAoYXJyLnB1c2godmFsdWUpLCBhcnIpOyB9O1xuZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICByZWR1Y2VfMS5yZWR1Y2UoYXJyUmVkdWNlciwgW10pKHNvdXJjZSkuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH0pO1xufVxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvQXJyYXkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpbmRvdyA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIG5vb3BfMSA9IHJlcXVpcmUoXCIuLi91dGlsL25vb3BcIik7XG5mdW5jdGlvbiB3aW5kb3cod2luZG93Qm91bmRhcmllcykge1xuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciB3aW5kb3dTdWJqZWN0ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgIHN1YnNjcmliZXIubmV4dCh3aW5kb3dTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpKTtcbiAgICAgICAgdmFyIGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHdpbmRvd1N1YmplY3QuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgfTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB3aW5kb3dTdWJqZWN0ID09PSBudWxsIHx8IHdpbmRvd1N1YmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvd1N1YmplY3QubmV4dCh2YWx1ZSk7IH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvd1N1YmplY3QuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgZXJyb3JIYW5kbGVyKSk7XG4gICAgICAgIHdpbmRvd0JvdW5kYXJpZXMuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3dTdWJqZWN0LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoKHdpbmRvd1N1YmplY3QgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKSkpO1xuICAgICAgICB9LCBub29wXzEubm9vcCwgZXJyb3JIYW5kbGVyKSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3dTdWJqZWN0ID09PSBudWxsIHx8IHdpbmRvd1N1YmplY3QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbmRvd1N1YmplY3QudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHdpbmRvd1N1YmplY3QgPSBudWxsO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3cgPSB3aW5kb3c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5kb3cuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpbmRvd0NvdW50ID0gdm9pZCAwO1xudmFyIFN1YmplY3RfMSA9IHJlcXVpcmUoXCIuLi9TdWJqZWN0XCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG5mdW5jdGlvbiB3aW5kb3dDb3VudCh3aW5kb3dTaXplLCBzdGFydFdpbmRvd0V2ZXJ5KSB7XG4gICAgaWYgKHN0YXJ0V2luZG93RXZlcnkgPT09IHZvaWQgMCkgeyBzdGFydFdpbmRvd0V2ZXJ5ID0gMDsgfVxuICAgIHZhciBzdGFydEV2ZXJ5ID0gc3RhcnRXaW5kb3dFdmVyeSA+IDAgPyBzdGFydFdpbmRvd0V2ZXJ5IDogd2luZG93U2l6ZTtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2luZG93cyA9IFtuZXcgU3ViamVjdF8xLlN1YmplY3QoKV07XG4gICAgICAgIHZhciBzdGFydHMgPSBbXTtcbiAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgc3Vic2NyaWJlci5uZXh0KHdpbmRvd3NbMF0uYXNPYnNlcnZhYmxlKCkpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB3aW5kb3dzXzEgPSBfX3ZhbHVlcyh3aW5kb3dzKSwgd2luZG93c18xXzEgPSB3aW5kb3dzXzEubmV4dCgpOyAhd2luZG93c18xXzEuZG9uZTsgd2luZG93c18xXzEgPSB3aW5kb3dzXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dfMSA9IHdpbmRvd3NfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3dfMS5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpbmRvd3NfMV8xICYmICF3aW5kb3dzXzFfMS5kb25lICYmIChfYSA9IHdpbmRvd3NfMS5yZXR1cm4pKSBfYS5jYWxsKHdpbmRvd3NfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjID0gY291bnQgLSB3aW5kb3dTaXplICsgMTtcbiAgICAgICAgICAgIGlmIChjID49IDAgJiYgYyAlIHN0YXJ0RXZlcnkgPT09IDApIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dzLnNoaWZ0KCkuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgrK2NvdW50ICUgc3RhcnRFdmVyeSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciB3aW5kb3dfMiA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICAgICAgICAgIHdpbmRvd3MucHVzaCh3aW5kb3dfMik7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHdpbmRvd18yLmFzT2JzZXJ2YWJsZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKHdpbmRvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICB3aGlsZSAod2luZG93cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN0YXJ0cyA9IG51bGw7XG4gICAgICAgICAgICB3aW5kb3dzID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3dDb3VudCA9IHdpbmRvd0NvdW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2luZG93Q291bnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpbmRvd1RpbWUgPSB2b2lkIDA7XG52YXIgU3ViamVjdF8xID0gcmVxdWlyZShcIi4uL1N1YmplY3RcIik7XG52YXIgYXN5bmNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlZHVsZXIvYXN5bmNcIik7XG52YXIgU3Vic2NyaXB0aW9uXzEgPSByZXF1aXJlKFwiLi4vU3Vic2NyaXB0aW9uXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG52YXIgT3BlcmF0b3JTdWJzY3JpYmVyXzEgPSByZXF1aXJlKFwiLi9PcGVyYXRvclN1YnNjcmliZXJcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcnJSZW1vdmVcIik7XG52YXIgYXJnc18xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJnc1wiKTtcbnZhciBleGVjdXRlU2NoZWR1bGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZVwiKTtcbmZ1bmN0aW9uIHdpbmRvd1RpbWUod2luZG93VGltZVNwYW4pIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHZhciBvdGhlckFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDE7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBvdGhlckFyZ3NbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBzY2hlZHVsZXIgPSAoX2EgPSBhcmdzXzEucG9wU2NoZWR1bGVyKG90aGVyQXJncykpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGFzeW5jXzEuYXN5bmNTY2hlZHVsZXI7XG4gICAgdmFyIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPSAoX2IgPSBvdGhlckFyZ3NbMF0pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGw7XG4gICAgdmFyIG1heFdpbmRvd1NpemUgPSBvdGhlckFyZ3NbMV0gfHwgSW5maW5pdHk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIHdpbmRvd1JlY29yZHMgPSBbXTtcbiAgICAgICAgdmFyIHJlc3RhcnRPbkNsb3NlID0gZmFsc2U7XG4gICAgICAgIHZhciBjbG9zZVdpbmRvdyA9IGZ1bmN0aW9uIChyZWNvcmQpIHtcbiAgICAgICAgICAgIHZhciB3aW5kb3cgPSByZWNvcmQud2luZG93LCBzdWJzID0gcmVjb3JkLnN1YnM7XG4gICAgICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHN1YnMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZSh3aW5kb3dSZWNvcmRzLCByZWNvcmQpO1xuICAgICAgICAgICAgcmVzdGFydE9uQ2xvc2UgJiYgc3RhcnRXaW5kb3coKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHN0YXJ0V2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHdpbmRvd1JlY29yZHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3VicyA9IG5ldyBTdWJzY3JpcHRpb25fMS5TdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChzdWJzKTtcbiAgICAgICAgICAgICAgICB2YXIgd2luZG93XzEgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVjb3JkXzEgPSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdzogd2luZG93XzEsXG4gICAgICAgICAgICAgICAgICAgIHN1YnM6IHN1YnMsXG4gICAgICAgICAgICAgICAgICAgIHNlZW46IDAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB3aW5kb3dSZWNvcmRzLnB1c2gocmVjb3JkXzEpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh3aW5kb3dfMS5hc09ic2VydmFibGUoKSk7XG4gICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnMsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gY2xvc2VXaW5kb3cocmVjb3JkXzEpOyB9LCB3aW5kb3dUaW1lU3Bhbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh3aW5kb3dDcmVhdGlvbkludGVydmFsICE9PSBudWxsICYmIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwgPj0gMCkge1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgc3RhcnRXaW5kb3csIHdpbmRvd0NyZWF0aW9uSW50ZXJ2YWwsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdGFydE9uQ2xvc2UgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0V2luZG93KCk7XG4gICAgICAgIHZhciBsb29wID0gZnVuY3Rpb24gKGNiKSB7IHJldHVybiB3aW5kb3dSZWNvcmRzLnNsaWNlKCkuZm9yRWFjaChjYik7IH07XG4gICAgICAgIHZhciB0ZXJtaW5hdGUgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgIGxvb3AoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdpbmRvdyA9IF9hLndpbmRvdztcbiAgICAgICAgICAgICAgICByZXR1cm4gY2Iod2luZG93KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2Ioc3Vic2NyaWJlcik7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgbG9vcChmdW5jdGlvbiAocmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLndpbmRvdy5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBtYXhXaW5kb3dTaXplIDw9ICsrcmVjb3JkLnNlZW4gJiYgY2xvc2VXaW5kb3cocmVjb3JkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiB0ZXJtaW5hdGUoZnVuY3Rpb24gKGNvbnN1bWVyKSB7IHJldHVybiBjb25zdW1lci5jb21wbGV0ZSgpOyB9KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gdGVybWluYXRlKGZ1bmN0aW9uIChjb25zdW1lcikgeyByZXR1cm4gY29uc3VtZXIuZXJyb3IoZXJyKTsgfSk7IH0pKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvd1JlY29yZHMgPSBudWxsO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3dUaW1lID0gd2luZG93VGltZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RpbWUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX192YWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fdmFsdWVzKSB8fCBmdW5jdGlvbihvKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChvICYmIGkgPj0gby5sZW5ndGgpIG8gPSB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpbmRvd1RvZ2dsZSA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBTdWJzY3JpcHRpb25fMSA9IHJlcXVpcmUoXCIuLi9TdWJzY3JpcHRpb25cIik7XG52YXIgbGlmdF8xID0gcmVxdWlyZShcIi4uL3V0aWwvbGlmdFwiKTtcbnZhciBpbm5lckZyb21fMSA9IHJlcXVpcmUoXCIuLi9vYnNlcnZhYmxlL2lubmVyRnJvbVwiKTtcbnZhciBPcGVyYXRvclN1YnNjcmliZXJfMSA9IHJlcXVpcmUoXCIuL09wZXJhdG9yU3Vic2NyaWJlclwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIGFyclJlbW92ZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvYXJyUmVtb3ZlXCIpO1xuZnVuY3Rpb24gd2luZG93VG9nZ2xlKG9wZW5pbmdzLCBjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2luZG93cyA9IFtdO1xuICAgICAgICB2YXIgaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICB3aGlsZSAoMCA8IHdpbmRvd3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgd2luZG93cy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgIH07XG4gICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShvcGVuaW5ncykuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAob3BlblZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgd2luZG93ID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgICAgICB3aW5kb3dzLnB1c2god2luZG93KTtcbiAgICAgICAgICAgIHZhciBjbG9zaW5nU3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbl8xLlN1YnNjcmlwdGlvbigpO1xuICAgICAgICAgICAgdmFyIGNsb3NlV2luZG93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGFyclJlbW92ZV8xLmFyclJlbW92ZSh3aW5kb3dzLCB3aW5kb3cpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgY2xvc2luZ05vdGlmaWVyO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjbG9zaW5nTm90aWZpZXIgPSBpbm5lckZyb21fMS5pbm5lckZyb20oY2xvc2luZ1NlbGVjdG9yKG9wZW5WYWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHdpbmRvdy5hc09ic2VydmFibGUoKSk7XG4gICAgICAgICAgICBjbG9zaW5nU3Vic2NyaXB0aW9uLmFkZChjbG9zaW5nTm90aWZpZXIuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBjbG9zZVdpbmRvdywgbm9vcF8xLm5vb3AsIGhhbmRsZUVycm9yKSkpO1xuICAgICAgICB9LCBub29wXzEubm9vcCkpO1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKE9wZXJhdG9yU3Vic2NyaWJlcl8xLmNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICAgICAgdmFyIHdpbmRvd3NDb3B5ID0gd2luZG93cy5zbGljZSgpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB3aW5kb3dzQ29weV8xID0gX192YWx1ZXMod2luZG93c0NvcHkpLCB3aW5kb3dzQ29weV8xXzEgPSB3aW5kb3dzQ29weV8xLm5leHQoKTsgIXdpbmRvd3NDb3B5XzFfMS5kb25lOyB3aW5kb3dzQ29weV8xXzEgPSB3aW5kb3dzQ29weV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2luZG93XzEgPSB3aW5kb3dzQ29weV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd18xLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93c0NvcHlfMV8xICYmICF3aW5kb3dzQ29weV8xXzEuZG9uZSAmJiAoX2EgPSB3aW5kb3dzQ29weV8xLnJldHVybikpIF9hLmNhbGwod2luZG93c0NvcHlfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKDAgPCB3aW5kb3dzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2hpbGUgKDAgPCB3aW5kb3dzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHdpbmRvd3Muc2hpZnQoKS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG5leHBvcnRzLndpbmRvd1RvZ2dsZSA9IHdpbmRvd1RvZ2dsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1RvZ2dsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2luZG93V2hlbiA9IHZvaWQgMDtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwiLi4vU3ViamVjdFwiKTtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xuZnVuY3Rpb24gd2luZG93V2hlbihjbG9zaW5nU2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbGlmdF8xLm9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgd2luZG93O1xuICAgICAgICB2YXIgY2xvc2luZ1N1YnNjcmliZXI7XG4gICAgICAgIHZhciBoYW5kbGVFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICB9O1xuICAgICAgICB2YXIgb3BlbldpbmRvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpYmVyID09PSBudWxsIHx8IGNsb3NpbmdTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zaW5nU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgd2luZG93ID09PSBudWxsIHx8IHdpbmRvdyA9PT0gdm9pZCAwID8gdm9pZCAwIDogd2luZG93LmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB3aW5kb3cgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh3aW5kb3cuYXNPYnNlcnZhYmxlKCkpO1xuICAgICAgICAgICAgdmFyIGNsb3NpbmdOb3RpZmllcjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2xvc2luZ05vdGlmaWVyID0gaW5uZXJGcm9tXzEuaW5uZXJGcm9tKGNsb3NpbmdTZWxlY3RvcigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVFcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsb3NpbmdOb3RpZmllci5zdWJzY3JpYmUoKGNsb3NpbmdTdWJzY3JpYmVyID0gT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG9wZW5XaW5kb3csIG9wZW5XaW5kb3csIGhhbmRsZUVycm9yKSkpO1xuICAgICAgICB9O1xuICAgICAgICBvcGVuV2luZG93KCk7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gd2luZG93Lm5leHQodmFsdWUpOyB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB3aW5kb3cuY29tcGxldGUoKTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsb3NpbmdTdWJzY3JpYmVyID09PSBudWxsIHx8IGNsb3NpbmdTdWJzY3JpYmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjbG9zaW5nU3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgd2luZG93ID0gbnVsbDtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZXhwb3J0cy53aW5kb3dXaGVuID0gd2luZG93V2hlbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpbmRvd1doZW4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aXRoTGF0ZXN0RnJvbSA9IHZvaWQgMDtcbnZhciBsaWZ0XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9saWZ0XCIpO1xudmFyIE9wZXJhdG9yU3Vic2NyaWJlcl8xID0gcmVxdWlyZShcIi4vT3BlcmF0b3JTdWJzY3JpYmVyXCIpO1xudmFyIGlubmVyRnJvbV8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvaW5uZXJGcm9tXCIpO1xudmFyIGlkZW50aXR5XzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pZGVudGl0eVwiKTtcbnZhciBub29wXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9ub29wXCIpO1xudmFyIGFyZ3NfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2FyZ3NcIik7XG5mdW5jdGlvbiB3aXRoTGF0ZXN0RnJvbSgpIHtcbiAgICB2YXIgaW5wdXRzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgaW5wdXRzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHZhciBwcm9qZWN0ID0gYXJnc18xLnBvcFJlc3VsdFNlbGVjdG9yKGlucHV0cyk7XG4gICAgcmV0dXJuIGxpZnRfMS5vcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGxlbiA9IGlucHV0cy5sZW5ndGg7XG4gICAgICAgIHZhciBvdGhlclZhbHVlcyA9IG5ldyBBcnJheShsZW4pO1xuICAgICAgICB2YXIgaGFzVmFsdWUgPSBpbnB1dHMubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9KTtcbiAgICAgICAgdmFyIHJlYWR5ID0gZmFsc2U7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIGlubmVyRnJvbV8xLmlubmVyRnJvbShpbnB1dHNbaV0pLnN1YnNjcmliZShPcGVyYXRvclN1YnNjcmliZXJfMS5jcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb3RoZXJWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlYWR5ICYmICFoYXNWYWx1ZVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBoYXNWYWx1ZVtpXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIChyZWFkeSA9IGhhc1ZhbHVlLmV2ZXJ5KGlkZW50aXR5XzEuaWRlbnRpdHkpKSAmJiAoaGFzVmFsdWUgPSBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBub29wXzEubm9vcCkpO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoT3BlcmF0b3JTdWJzY3JpYmVyXzEuY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHJlYWR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IF9fc3ByZWFkQXJyYXkoW3ZhbHVlXSwgX19yZWFkKG90aGVyVmFsdWVzKSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QgPyBwcm9qZWN0LmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKHZhbHVlcykpKSA6IHZhbHVlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMud2l0aExhdGVzdEZyb20gPSB3aXRoTGF0ZXN0RnJvbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdpdGhMYXRlc3RGcm9tLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuemlwID0gdm9pZCAwO1xudmFyIHppcF8xID0gcmVxdWlyZShcIi4uL29ic2VydmFibGUvemlwXCIpO1xudmFyIGxpZnRfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2xpZnRcIik7XG5mdW5jdGlvbiB6aXAoKSB7XG4gICAgdmFyIHNvdXJjZXMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBsaWZ0XzEub3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHppcF8xLnppcC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW3NvdXJjZV0sIF9fcmVhZChzb3VyY2VzKSkpLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuemlwID0gemlwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy56aXBBbGwgPSB2b2lkIDA7XG52YXIgemlwXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS96aXBcIik7XG52YXIgam9pbkFsbEludGVybmFsc18xID0gcmVxdWlyZShcIi4vam9pbkFsbEludGVybmFsc1wiKTtcbmZ1bmN0aW9uIHppcEFsbChwcm9qZWN0KSB7XG4gICAgcmV0dXJuIGpvaW5BbGxJbnRlcm5hbHNfMS5qb2luQWxsSW50ZXJuYWxzKHppcF8xLnppcCwgcHJvamVjdCk7XG59XG5leHBvcnRzLnppcEFsbCA9IHppcEFsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcEFsbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3JlYWQgPSAodGhpcyAmJiB0aGlzLl9fcmVhZCkgfHwgZnVuY3Rpb24gKG8sIG4pIHtcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XG4gICAgaWYgKCFtKSByZXR1cm4gbztcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgICB0cnkge1xuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgICB9XG4gICAgcmV0dXJuIGFyO1xufTtcbnZhciBfX3NwcmVhZEFycmF5ID0gKHRoaXMgJiYgdGhpcy5fX3NwcmVhZEFycmF5KSB8fCBmdW5jdGlvbiAodG8sIGZyb20pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcbiAgICAgICAgdG9bal0gPSBmcm9tW2ldO1xuICAgIHJldHVybiB0bztcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnppcFdpdGggPSB2b2lkIDA7XG52YXIgemlwXzEgPSByZXF1aXJlKFwiLi96aXBcIik7XG5mdW5jdGlvbiB6aXBXaXRoKCkge1xuICAgIHZhciBvdGhlcklucHV0cyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIG90aGVySW5wdXRzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiB6aXBfMS56aXAuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQob3RoZXJJbnB1dHMpKSk7XG59XG5leHBvcnRzLnppcFdpdGggPSB6aXBXaXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9emlwV2l0aC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc2NoZWR1bGVBcnJheSA9IHZvaWQgMDtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKFwiLi4vT2JzZXJ2YWJsZVwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVBcnJheSA9IHNjaGVkdWxlQXJyYXk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFycmF5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZUFzeW5jSXRlcmFibGUgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgZXhlY3V0ZVNjaGVkdWxlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9leGVjdXRlU2NoZWR1bGVcIik7XG5mdW5jdGlvbiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVfMS5PYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGV4ZWN1dGVTY2hlZHVsZV8xLmV4ZWN1dGVTY2hlZHVsZShzdWJzY3JpYmVyLCBzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlXzEuZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLm5leHQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocmVzdWx0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgMCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zY2hlZHVsZUFzeW5jSXRlcmFibGUgPSBzY2hlZHVsZUFzeW5jSXRlcmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjaGVkdWxlSXRlcmFibGUgPSB2b2lkIDA7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL09ic2VydmFibGVcIik7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvaXRlcmF0b3JcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNGdW5jdGlvblwiKTtcbnZhciBleGVjdXRlU2NoZWR1bGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZVwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yO1xuICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpdGVyYXRvciA9IGlucHV0W2l0ZXJhdG9yXzEuaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGVfMS5leGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihpdGVyYXRvciA9PT0gbnVsbCB8fCBpdGVyYXRvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogaXRlcmF0b3IucmV0dXJuKSAmJiBpdGVyYXRvci5yZXR1cm4oKTsgfTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVJdGVyYWJsZSA9IHNjaGVkdWxlSXRlcmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUl0ZXJhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZU9ic2VydmFibGUgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL29ic2VydmVPblwiKTtcbnZhciBzdWJzY3JpYmVPbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9zdWJzY3JpYmVPblwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlT2JzZXJ2YWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbV8xLmlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbl8xLnN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbl8xLm9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVPYnNlcnZhYmxlID0gc2NoZWR1bGVPYnNlcnZhYmxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZVByb21pc2UgPSB2b2lkIDA7XG52YXIgaW5uZXJGcm9tXzEgPSByZXF1aXJlKFwiLi4vb2JzZXJ2YWJsZS9pbm5lckZyb21cIik7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKFwiLi4vb3BlcmF0b3JzL29ic2VydmVPblwiKTtcbnZhciBzdWJzY3JpYmVPbl8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9zdWJzY3JpYmVPblwiKTtcbmZ1bmN0aW9uIHNjaGVkdWxlUHJvbWlzZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIGlubmVyRnJvbV8xLmlubmVyRnJvbShpbnB1dCkucGlwZShzdWJzY3JpYmVPbl8xLnN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbl8xLm9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVQcm9taXNlID0gc2NoZWR1bGVQcm9taXNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVQcm9taXNlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSA9IHZvaWQgMDtcbnZhciBzY2hlZHVsZUFzeW5jSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZVwiKTtcbnZhciBpc1JlYWRhYmxlU3RyZWFtTGlrZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2VcIik7XG5mdW5jdGlvbiBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQXN5bmNJdGVyYWJsZV8xLnNjaGVkdWxlQXN5bmNJdGVyYWJsZShpc1JlYWRhYmxlU3RyZWFtTGlrZV8xLnJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IoaW5wdXQpLCBzY2hlZHVsZXIpO1xufVxuZXhwb3J0cy5zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSA9IHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNjaGVkdWxlZCA9IHZvaWQgMDtcbnZhciBzY2hlZHVsZU9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlT2JzZXJ2YWJsZVwiKTtcbnZhciBzY2hlZHVsZVByb21pc2VfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlUHJvbWlzZVwiKTtcbnZhciBzY2hlZHVsZUFycmF5XzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZUFycmF5XCIpO1xudmFyIHNjaGVkdWxlSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuL3NjaGVkdWxlSXRlcmFibGVcIik7XG52YXIgc2NoZWR1bGVBc3luY0l0ZXJhYmxlXzEgPSByZXF1aXJlKFwiLi9zY2hlZHVsZUFzeW5jSXRlcmFibGVcIik7XG52YXIgaXNJbnRlcm9wT2JzZXJ2YWJsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZVwiKTtcbnZhciBpc1Byb21pc2VfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzUHJvbWlzZVwiKTtcbnZhciBpc0FycmF5TGlrZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNBcnJheUxpa2VcIik7XG52YXIgaXNJdGVyYWJsZV8xID0gcmVxdWlyZShcIi4uL3V0aWwvaXNJdGVyYWJsZVwiKTtcbnZhciBpc0FzeW5jSXRlcmFibGVfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2lzQXN5bmNJdGVyYWJsZVwiKTtcbnZhciB0aHJvd1Vub2JzZXJ2YWJsZUVycm9yXzEgPSByZXF1aXJlKFwiLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yXCIpO1xudmFyIGlzUmVhZGFibGVTdHJlYW1MaWtlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZVwiKTtcbnZhciBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZV8xID0gcmVxdWlyZShcIi4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2VcIik7XG5mdW5jdGlvbiBzY2hlZHVsZWQoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlXzEuaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZU9ic2VydmFibGVfMS5zY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlXzEuaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBcnJheV8xLnNjaGVkdWxlQXJyYXkoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZV8xLmlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZVByb21pc2VfMS5zY2hlZHVsZVByb21pc2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZV8xLmlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGVfMS5zY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGVfMS5pc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGVfMS5zY2hlZHVsZUl0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZV8xLmlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlXzEuc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgdGhyb3dVbm9ic2VydmFibGVFcnJvcl8xLmNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbmV4cG9ydHMuc2NoZWR1bGVkID0gc2NoZWR1bGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWN0aW9uID0gdm9pZCAwO1xudmFyIFN1YnNjcmlwdGlvbl8xID0gcmVxdWlyZShcIi4uL1N1YnNjcmlwdGlvblwiKTtcbnZhciBBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICB9XG4gICAgQWN0aW9uLnByb3RvdHlwZS5zY2hlZHVsZSA9IGZ1bmN0aW9uIChzdGF0ZSwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFjdGlvbjtcbn0oU3Vic2NyaXB0aW9uXzEuU3Vic2NyaXB0aW9uKSk7XG5leHBvcnRzLkFjdGlvbiA9IEFjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzeW5jQWN0aW9uID0gdm9pZCAwO1xudmFyIEFjdGlvbl8xID0gcmVxdWlyZShcIi4vQWN0aW9uXCIpO1xudmFyIGludGVydmFsUHJvdmlkZXJfMSA9IHJlcXVpcmUoXCIuL2ludGVydmFsUHJvdmlkZXJcIik7XG52YXIgYXJyUmVtb3ZlXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9hcnJSZW1vdmVcIik7XG52YXIgQXN5bmNBY3Rpb24gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3luY0FjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3luY0FjdGlvbihzY2hlZHVsZXIsIHdvcmspIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgc2NoZWR1bGVyLCB3b3JrKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XG4gICAgICAgIF90aGlzLndvcmsgPSB3b3JrO1xuICAgICAgICBfdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHZhciBpZCA9IHRoaXMuaWQ7XG4gICAgICAgIHZhciBzY2hlZHVsZXIgPSB0aGlzLnNjaGVkdWxlcjtcbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIGRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlbGF5ID0gZGVsYXk7XG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmlkIHx8IHRoaXMucmVxdWVzdEFzeW5jSWQoc2NoZWR1bGVyLCB0aGlzLmlkLCBkZWxheSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQXN5bmNBY3Rpb24ucHJvdG90eXBlLnJlcXVlc3RBc3luY0lkID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgX2lkLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIGludGVydmFsUHJvdmlkZXJfMS5pbnRlcnZhbFByb3ZpZGVyLnNldEludGVydmFsKHNjaGVkdWxlci5mbHVzaC5iaW5kKHNjaGVkdWxlciwgdGhpcyksIGRlbGF5KTtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5yZWN5Y2xlQXN5bmNJZCA9IGZ1bmN0aW9uIChfc2NoZWR1bGVyLCBpZCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgICAgIGlmIChkZWxheSAhPSBudWxsICYmIHRoaXMuZGVsYXkgPT09IGRlbGF5ICYmIHRoaXMucGVuZGluZyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcnZhbFByb3ZpZGVyXzEuaW50ZXJ2YWxQcm92aWRlci5jbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhIGNhbmNlbGxlZCBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIF9kZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9IGUgPyBlIDogbmV3IEVycm9yKCdTY2hlZHVsZWQgYWN0aW9uIHRocmV3IGZhbHN5IGVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLndvcmsgPSB0aGlzLnN0YXRlID0gdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcnJSZW1vdmVfMS5hcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uXzEuQWN0aW9uKSk7XG5leHBvcnRzLkFzeW5jQWN0aW9uID0gQXN5bmNBY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc3luY0FjdGlvbi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFzeW5jU2NoZWR1bGVyID0gdm9pZCAwO1xudmFyIFNjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4uL1NjaGVkdWxlclwiKTtcbnZhciBBc3luY1NjaGVkdWxlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jU2NoZWR1bGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jU2NoZWR1bGVyKFNjaGVkdWxlckFjdGlvbiwgbm93KSB7XG4gICAgICAgIGlmIChub3cgPT09IHZvaWQgMCkgeyBub3cgPSBTY2hlZHVsZXJfMS5TY2hlZHVsZXIubm93OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFNjaGVkdWxlckFjdGlvbiwgbm93KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3Rpb25zID0gW107XG4gICAgICAgIF90aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuX3NjaGVkdWxlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY1NjaGVkdWxlci5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goYWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICgoZXJyb3IgPSBhY3Rpb24uZXhlY3V0ZShhY3Rpb24uc3RhdGUsIGFjdGlvbi5kZWxheSkpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKTtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgd2hpbGUgKChhY3Rpb24gPSBhY3Rpb25zLnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgICAgYWN0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIEFzeW5jU2NoZWR1bGVyO1xufShTY2hlZHVsZXJfMS5TY2hlZHVsZXIpKTtcbmV4cG9ydHMuQXN5bmNTY2hlZHVsZXIgPSBBc3luY1NjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3luYyA9IGV4cG9ydHMuYXN5bmNTY2hlZHVsZXIgPSB2b2lkIDA7XG52YXIgQXN5bmNBY3Rpb25fMSA9IHJlcXVpcmUoXCIuL0FzeW5jQWN0aW9uXCIpO1xudmFyIEFzeW5jU2NoZWR1bGVyXzEgPSByZXF1aXJlKFwiLi9Bc3luY1NjaGVkdWxlclwiKTtcbmV4cG9ydHMuYXN5bmNTY2hlZHVsZXIgPSBuZXcgQXN5bmNTY2hlZHVsZXJfMS5Bc3luY1NjaGVkdWxlcihBc3luY0FjdGlvbl8xLkFzeW5jQWN0aW9uKTtcbmV4cG9ydHMuYXN5bmMgPSBleHBvcnRzLmFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRhdGVUaW1lc3RhbXBQcm92aWRlciA9IHZvaWQgMDtcbmV4cG9ydHMuZGF0ZVRpbWVzdGFtcFByb3ZpZGVyID0ge1xuICAgIG5vdzogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gKGV4cG9ydHMuZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IERhdGUpLm5vdygpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbnRlcnZhbFByb3ZpZGVyID0gdm9pZCAwO1xuZXhwb3J0cy5pbnRlcnZhbFByb3ZpZGVyID0ge1xuICAgIHNldEludGVydmFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gZXhwb3J0cy5pbnRlcnZhbFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0SW50ZXJ2YWwpIHx8IHNldEludGVydmFsKS5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgIH0sXG4gICAgY2xlYXJJbnRlcnZhbDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBleHBvcnRzLmludGVydmFsUHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhckludGVydmFsKSB8fCBjbGVhckludGVydmFsKShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcnZhbFByb3ZpZGVyLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpbCA9IGZyb20ubGVuZ3RoLCBqID0gdG8ubGVuZ3RoOyBpIDwgaWw7IGkrKywgaisrKVxuICAgICAgICB0b1tqXSA9IGZyb21baV07XG4gICAgcmV0dXJuIHRvO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudGltZW91dFByb3ZpZGVyID0gdm9pZCAwO1xuZXhwb3J0cy50aW1lb3V0UHJvdmlkZXIgPSB7XG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGV4cG9ydHMudGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkgfHwgc2V0VGltZW91dCkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBleHBvcnRzLnRpbWVvdXRQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFyVGltZW91dCkgfHwgY2xlYXJUaW1lb3V0KShoYW5kbGUpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lb3V0UHJvdmlkZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLml0ZXJhdG9yID0gZXhwb3J0cy5nZXRTeW1ib2xJdGVyYXRvciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydHMuZ2V0U3ltYm9sSXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcjtcbmV4cG9ydHMuaXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9ic2VydmFibGUgPSB2b2lkIDA7XG5leHBvcnRzLm9ic2VydmFibGUgPSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUpIHx8ICdAQG9ic2VydmFibGUnOyB9KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgPSB2b2lkIDA7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4vY3JlYXRlRXJyb3JDbGFzc1wiKTtcbmV4cG9ydHMuQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIEFyZ3VtZW50T3V0T2ZSYW5nZUVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnQXJndW1lbnRPdXRPZlJhbmdlRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnYXJndW1lbnQgb3V0IG9mIHJhbmdlJztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bcmd1bWVudE91dE9mUmFuZ2VFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRW1wdHlFcnJvciA9IHZvaWQgMDtcbnZhciBjcmVhdGVFcnJvckNsYXNzXzEgPSByZXF1aXJlKFwiLi9jcmVhdGVFcnJvckNsYXNzXCIpO1xuZXhwb3J0cy5FbXB0eUVycm9yID0gY3JlYXRlRXJyb3JDbGFzc18xLmNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikgeyByZXR1cm4gZnVuY3Rpb24gRW1wdHlFcnJvckltcGwoKSB7XG4gICAgX3N1cGVyKHRoaXMpO1xuICAgIHRoaXMubmFtZSA9ICdFbXB0eUVycm9yJztcbiAgICB0aGlzLm1lc3NhZ2UgPSAnbm8gZWxlbWVudHMgaW4gc2VxdWVuY2UnO1xufTsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FbXB0eUVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ob3RGb3VuZEVycm9yID0gdm9pZCAwO1xudmFyIGNyZWF0ZUVycm9yQ2xhc3NfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUVycm9yQ2xhc3NcIik7XG5leHBvcnRzLk5vdEZvdW5kRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE5vdEZvdW5kRXJyb3JJbXBsKG1lc3NhZ2UpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnTm90Rm91bmRFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90Rm91bmRFcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSB2b2lkIDA7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4vY3JlYXRlRXJyb3JDbGFzc1wiKTtcbmV4cG9ydHMuT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIE9iamVjdFVuc3Vic2NyaWJlZEVycm9ySW1wbCgpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm5hbWUgPSAnT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSAnb2JqZWN0IHVuc3Vic2NyaWJlZCc7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNlcXVlbmNlRXJyb3IgPSB2b2lkIDA7XG52YXIgY3JlYXRlRXJyb3JDbGFzc18xID0gcmVxdWlyZShcIi4vY3JlYXRlRXJyb3JDbGFzc1wiKTtcbmV4cG9ydHMuU2VxdWVuY2VFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3NfMS5jcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gU2VxdWVuY2VFcnJvckltcGwobWVzc2FnZSkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdTZXF1ZW5jZUVycm9yJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TZXF1ZW5jZUVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VbnN1YnNjcmlwdGlvbkVycm9yID0gdm9pZCAwO1xudmFyIGNyZWF0ZUVycm9yQ2xhc3NfMSA9IHJlcXVpcmUoXCIuL2NyZWF0ZUVycm9yQ2xhc3NcIik7XG5leHBvcnRzLlVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzXzEuY3JlYXRlRXJyb3JDbGFzcyhmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIFVuc3Vic2NyaXB0aW9uRXJyb3JJbXBsKGVycm9ycykge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yc1xuICAgICAgICAgICAgPyBlcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkIGR1cmluZyB1bnN1YnNjcmlwdGlvbjpcXG5cIiArIGVycm9ycy5tYXAoZnVuY3Rpb24gKGVyciwgaSkgeyByZXR1cm4gaSArIDEgKyBcIikgXCIgKyBlcnIudG9TdHJpbmcoKTsgfSkuam9pbignXFxuICAnKVxuICAgICAgICAgICAgOiAnJztcbiAgICAgICAgdGhpcy5uYW1lID0gJ1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnN1YnNjcmlwdGlvbkVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wb3BOdW1iZXIgPSBleHBvcnRzLnBvcFNjaGVkdWxlciA9IGV4cG9ydHMucG9wUmVzdWx0U2VsZWN0b3IgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbnZhciBpc1NjaGVkdWxlcl8xID0gcmVxdWlyZShcIi4vaXNTY2hlZHVsZXJcIik7XG5mdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuZnVuY3Rpb24gcG9wUmVzdWx0U2VsZWN0b3IoYXJncykge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnRzLnBvcFJlc3VsdFNlbGVjdG9yID0gcG9wUmVzdWx0U2VsZWN0b3I7XG5mdW5jdGlvbiBwb3BTY2hlZHVsZXIoYXJncykge1xuICAgIHJldHVybiBpc1NjaGVkdWxlcl8xLmlzU2NoZWR1bGVyKGxhc3QoYXJncykpID8gYXJncy5wb3AoKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydHMucG9wU2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyO1xuZnVuY3Rpb24gcG9wTnVtYmVyKGFyZ3MsIGRlZmF1bHRWYWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgbGFzdChhcmdzKSA9PT0gJ251bWJlcicgPyBhcmdzLnBvcCgpIDogZGVmYXVsdFZhbHVlO1xufVxuZXhwb3J0cy5wb3BOdW1iZXIgPSBwb3BOdW1iZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hcmdzQXJnQXJyYXlPck9iamVjdCA9IHZvaWQgMDtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiwgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBnZXRLZXlzID0gT2JqZWN0LmtleXM7XG5mdW5jdGlvbiBhcmdzQXJnQXJyYXlPck9iamVjdChhcmdzKSB7XG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBmaXJzdF8xID0gYXJnc1swXTtcbiAgICAgICAgaWYgKGlzQXJyYXkoZmlyc3RfMSkpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGFyZ3M6IGZpcnN0XzEsIGtleXM6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQT0pPKGZpcnN0XzEpKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IGdldEtleXMoZmlyc3RfMSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFyZ3M6IGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZpcnN0XzFba2V5XTsgfSksXG4gICAgICAgICAgICAgICAga2V5czoga2V5cyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgYXJnczogYXJncywga2V5czogbnVsbCB9O1xufVxuZXhwb3J0cy5hcmdzQXJnQXJyYXlPck9iamVjdCA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0O1xuZnVuY3Rpb24gaXNQT0pPKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gb2JqZWN0UHJvdG87XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcmdzQXJnQXJyYXlPck9iamVjdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXJnc09yQXJnQXJyYXkgPSB2b2lkIDA7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBhcmdzT3JBcmdBcnJheShhcmdzKSB7XG4gICAgcmV0dXJuIGFyZ3MubGVuZ3RoID09PSAxICYmIGlzQXJyYXkoYXJnc1swXSkgPyBhcmdzWzBdIDogYXJncztcbn1cbmV4cG9ydHMuYXJnc09yQXJnQXJyYXkgPSBhcmdzT3JBcmdBcnJheTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3NPckFyZ0FycmF5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hcnJSZW1vdmUgPSB2b2lkIDA7XG5mdW5jdGlvbiBhcnJSZW1vdmUoYXJyLCBpdGVtKSB7XG4gICAgaWYgKGFycikge1xuICAgICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgMCA8PSBpbmRleCAmJiBhcnIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG59XG5leHBvcnRzLmFyclJlbW92ZSA9IGFyclJlbW92ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRXJyb3JDbGFzcyA9IHZvaWQgMDtcbmZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbmV4cG9ydHMuY3JlYXRlRXJyb3JDbGFzcyA9IGNyZWF0ZUVycm9yQ2xhc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVFcnJvckNsYXNzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVPYmplY3QgPSB2b2lkIDA7XG5mdW5jdGlvbiBjcmVhdGVPYmplY3Qoa2V5cywgdmFsdWVzKSB7XG4gICAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGtleSwgaSkgeyByZXR1cm4gKChyZXN1bHRba2V5XSA9IHZhbHVlc1tpXSksIHJlc3VsdCk7IH0sIHt9KTtcbn1cbmV4cG9ydHMuY3JlYXRlT2JqZWN0ID0gY3JlYXRlT2JqZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlT2JqZWN0LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jYXB0dXJlRXJyb3IgPSBleHBvcnRzLmVycm9yQ29udGV4dCA9IHZvaWQgMDtcbnZhciBjb25maWdfMSA9IHJlcXVpcmUoXCIuLi9jb25maWdcIik7XG52YXIgY29udGV4dCA9IG51bGw7XG5mdW5jdGlvbiBlcnJvckNvbnRleHQoY2IpIHtcbiAgICBpZiAoY29uZmlnXzEuY29uZmlnLnVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmcpIHtcbiAgICAgICAgdmFyIGlzUm9vdCA9ICFjb250ZXh0O1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICBjb250ZXh0ID0geyBlcnJvclRocm93bjogZmFsc2UsIGVycm9yOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgY2IoKTtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgdmFyIF9hID0gY29udGV4dCwgZXJyb3JUaHJvd24gPSBfYS5lcnJvclRocm93biwgZXJyb3IgPSBfYS5lcnJvcjtcbiAgICAgICAgICAgIGNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNiKCk7XG4gICAgfVxufVxuZXhwb3J0cy5lcnJvckNvbnRleHQgPSBlcnJvckNvbnRleHQ7XG5mdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZ18xLmNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuZXhwb3J0cy5jYXB0dXJlRXJyb3IgPSBjYXB0dXJlRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvckNvbnRleHQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4ZWN1dGVTY2hlZHVsZSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGV4ZWN1dGVTY2hlZHVsZShwYXJlbnRTdWJzY3JpcHRpb24sIHNjaGVkdWxlciwgd29yaywgZGVsYXksIHJlcGVhdCkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIGlmIChyZXBlYXQgPT09IHZvaWQgMCkgeyByZXBlYXQgPSBmYWxzZTsgfVxuICAgIHZhciBzY2hlZHVsZVN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdvcmsoKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZCh0aGlzLnNjaGVkdWxlKG51bGwsIGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZVN1YnNjcmlwdGlvbik7XG4gICAgaWYgKCFyZXBlYXQpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlU3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cbmV4cG9ydHMuZXhlY3V0ZVNjaGVkdWxlID0gZXhlY3V0ZVNjaGVkdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhlY3V0ZVNjaGVkdWxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pZGVudGl0eSA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbmV4cG9ydHMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0FycmF5TGlrZSA9IHZvaWQgMDtcbmV4cG9ydHMuaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNBc3luY0l0ZXJhYmxlID0gdm9pZCAwO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pO1xufVxuZXhwb3J0cy5pc0FzeW5jSXRlcmFibGUgPSBpc0FzeW5jSXRlcmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzVmFsaWREYXRlID0gdm9pZCAwO1xuZnVuY3Rpb24gaXNWYWxpZERhdGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmICFpc05hTih2YWx1ZSk7XG59XG5leHBvcnRzLmlzVmFsaWREYXRlID0gaXNWYWxpZERhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0RhdGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzRnVuY3Rpb24gPSB2b2lkIDA7XG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0Z1bmN0aW9uLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc0ludGVyb3BPYnNlcnZhYmxlID0gdm9pZCAwO1xudmFyIG9ic2VydmFibGVfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvb2JzZXJ2YWJsZVwiKTtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbihpbnB1dFtvYnNlcnZhYmxlXzEub2JzZXJ2YWJsZV0pO1xufVxuZXhwb3J0cy5pc0ludGVyb3BPYnNlcnZhYmxlID0gaXNJbnRlcm9wT2JzZXJ2YWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzSXRlcmFibGUgPSB2b2lkIDA7XG52YXIgaXRlcmF0b3JfMSA9IHJlcXVpcmUoXCIuLi9zeW1ib2wvaXRlcmF0b3JcIik7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oaW5wdXQgPT09IG51bGwgfHwgaW5wdXQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0W2l0ZXJhdG9yXzEuaXRlcmF0b3JdKTtcbn1cbmV4cG9ydHMuaXNJdGVyYWJsZSA9IGlzSXRlcmFibGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1Byb21pc2UgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG5leHBvcnRzLmlzUHJvbWlzZSA9IGlzUHJvbWlzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9fYXdhaXQgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXQpIHx8IGZ1bmN0aW9uICh2KSB7IHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpOyB9XG52YXIgX19hc3luY0dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19hc3luY0dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxuICAgIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNSZWFkYWJsZVN0cmVhbUxpa2UgPSBleHBvcnRzLnJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgPSB2b2lkIDA7XG52YXIgaXNGdW5jdGlvbl8xID0gcmVxdWlyZShcIi4vaXNGdW5jdGlvblwiKTtcbmZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgPSByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yO1xuZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb25fMS5pc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5nZXRSZWFkZXIpO1xufVxuZXhwb3J0cy5pc1JlYWRhYmxlU3RyZWFtTGlrZSA9IGlzUmVhZGFibGVTdHJlYW1MaWtlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzU2NoZWR1bGVyID0gdm9pZCAwO1xudmFyIGlzRnVuY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2lzRnVuY3Rpb25cIik7XG5mdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uXzEuaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG5leHBvcnRzLmlzU2NoZWR1bGVyID0gaXNTY2hlZHVsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3BlcmF0ZSA9IGV4cG9ydHMuaGFzTGlmdCA9IHZvaWQgMDtcbnZhciBpc0Z1bmN0aW9uXzEgPSByZXF1aXJlKFwiLi9pc0Z1bmN0aW9uXCIpO1xuZnVuY3Rpb24gaGFzTGlmdChzb3VyY2UpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbl8xLmlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0cy5oYXNMaWZ0ID0gaGFzTGlmdDtcbmZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuZXhwb3J0cy5vcGVyYXRlID0gb3BlcmF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGlsID0gZnJvbS5sZW5ndGgsIGogPSB0by5sZW5ndGg7IGkgPCBpbDsgaSsrLCBqKyspXG4gICAgICAgIHRvW2pdID0gZnJvbVtpXTtcbiAgICByZXR1cm4gdG87XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYXBPbmVPck1hbnlBcmdzID0gdm9pZCAwO1xudmFyIG1hcF8xID0gcmVxdWlyZShcIi4uL29wZXJhdG9ycy9tYXBcIik7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYWxsT3JBcHBseShmbiwgYXJncykge1xuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xufVxuZnVuY3Rpb24gbWFwT25lT3JNYW55QXJncyhmbikge1xuICAgIHJldHVybiBtYXBfMS5tYXAoZnVuY3Rpb24gKGFyZ3MpIHsgcmV0dXJuIGNhbGxPckFwcGx5KGZuLCBhcmdzKTsgfSk7XG59XG5leHBvcnRzLm1hcE9uZU9yTWFueUFyZ3MgPSBtYXBPbmVPck1hbnlBcmdzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwT25lT3JNYW55QXJncy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubm9vcCA9IHZvaWQgMDtcbmZ1bmN0aW9uIG5vb3AoKSB7IH1cbmV4cG9ydHMubm9vcCA9IG5vb3A7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ub3QgPSB2b2lkIDA7XG5mdW5jdGlvbiBub3QocHJlZCwgdGhpc0FyZykge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7IHJldHVybiAhcHJlZC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCk7IH07XG59XG5leHBvcnRzLm5vdCA9IG5vdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGlwZUZyb21BcnJheSA9IGV4cG9ydHMucGlwZSA9IHZvaWQgMDtcbnZhciBpZGVudGl0eV8xID0gcmVxdWlyZShcIi4vaWRlbnRpdHlcIik7XG5mdW5jdGlvbiBwaXBlKCkge1xuICAgIHZhciBmbnMgPSBbXTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICBmbnNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICB9XG4gICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkoZm5zKTtcbn1cbmV4cG9ydHMucGlwZSA9IHBpcGU7XG5mdW5jdGlvbiBwaXBlRnJvbUFycmF5KGZucykge1xuICAgIGlmIChmbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eV8xLmlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG5leHBvcnRzLnBpcGVGcm9tQXJyYXkgPSBwaXBlRnJvbUFycmF5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGlwZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVwb3J0VW5oYW5kbGVkRXJyb3IgPSB2b2lkIDA7XG52YXIgY29uZmlnXzEgPSByZXF1aXJlKFwiLi4vY29uZmlnXCIpO1xudmFyIHRpbWVvdXRQcm92aWRlcl8xID0gcmVxdWlyZShcIi4uL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXJcIik7XG5mdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXJfMS50aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnXzEuY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMucmVwb3J0VW5oYW5kbGVkRXJyb3IgPSByZXBvcnRVbmhhbmRsZWRFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciA9IHZvaWQgMDtcbmZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG5leHBvcnRzLmNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yID0gY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZUFsbCA9IGV4cG9ydHMubWVyZ2UgPSBleHBvcnRzLm1heCA9IGV4cG9ydHMubWF0ZXJpYWxpemUgPSBleHBvcnRzLm1hcFRvID0gZXhwb3J0cy5tYXAgPSBleHBvcnRzLmxhc3QgPSBleHBvcnRzLmlzRW1wdHkgPSBleHBvcnRzLmlnbm9yZUVsZW1lbnRzID0gZXhwb3J0cy5ncm91cEJ5ID0gZXhwb3J0cy5maXJzdCA9IGV4cG9ydHMuZmluZEluZGV4ID0gZXhwb3J0cy5maW5kID0gZXhwb3J0cy5maW5hbGl6ZSA9IGV4cG9ydHMuZmlsdGVyID0gZXhwb3J0cy5leHBhbmQgPSBleHBvcnRzLmV4aGF1c3RNYXAgPSBleHBvcnRzLmV4aGF1c3RBbGwgPSBleHBvcnRzLmV4aGF1c3QgPSBleHBvcnRzLmV2ZXJ5ID0gZXhwb3J0cy5lbmRXaXRoID0gZXhwb3J0cy5lbGVtZW50QXQgPSBleHBvcnRzLmRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkID0gZXhwb3J0cy5kaXN0aW5jdFVudGlsQ2hhbmdlZCA9IGV4cG9ydHMuZGlzdGluY3QgPSBleHBvcnRzLmRlbWF0ZXJpYWxpemUgPSBleHBvcnRzLmRlbGF5V2hlbiA9IGV4cG9ydHMuZGVsYXkgPSBleHBvcnRzLmRlZmF1bHRJZkVtcHR5ID0gZXhwb3J0cy5kZWJvdW5jZVRpbWUgPSBleHBvcnRzLmRlYm91bmNlID0gZXhwb3J0cy5jb3VudCA9IGV4cG9ydHMuY29ubmVjdCA9IGV4cG9ydHMuY29uY2F0V2l0aCA9IGV4cG9ydHMuY29uY2F0TWFwVG8gPSBleHBvcnRzLmNvbmNhdE1hcCA9IGV4cG9ydHMuY29uY2F0QWxsID0gZXhwb3J0cy5jb25jYXQgPSBleHBvcnRzLmNvbWJpbmVMYXRlc3RXaXRoID0gZXhwb3J0cy5jb21iaW5lTGF0ZXN0ID0gZXhwb3J0cy5jb21iaW5lTGF0ZXN0QWxsID0gZXhwb3J0cy5jb21iaW5lQWxsID0gZXhwb3J0cy5jYXRjaEVycm9yID0gZXhwb3J0cy5idWZmZXJXaGVuID0gZXhwb3J0cy5idWZmZXJUb2dnbGUgPSBleHBvcnRzLmJ1ZmZlclRpbWUgPSBleHBvcnRzLmJ1ZmZlckNvdW50ID0gZXhwb3J0cy5idWZmZXIgPSBleHBvcnRzLmF1ZGl0VGltZSA9IGV4cG9ydHMuYXVkaXQgPSB2b2lkIDA7XG5leHBvcnRzLnRpbWVJbnRlcnZhbCA9IGV4cG9ydHMudGhyb3dJZkVtcHR5ID0gZXhwb3J0cy50aHJvdHRsZVRpbWUgPSBleHBvcnRzLnRocm90dGxlID0gZXhwb3J0cy50YXAgPSBleHBvcnRzLnRha2VXaGlsZSA9IGV4cG9ydHMudGFrZVVudGlsID0gZXhwb3J0cy50YWtlTGFzdCA9IGV4cG9ydHMudGFrZSA9IGV4cG9ydHMuc3dpdGNoU2NhbiA9IGV4cG9ydHMuc3dpdGNoTWFwVG8gPSBleHBvcnRzLnN3aXRjaE1hcCA9IGV4cG9ydHMuc3dpdGNoQWxsID0gZXhwb3J0cy5zdWJzY3JpYmVPbiA9IGV4cG9ydHMuc3RhcnRXaXRoID0gZXhwb3J0cy5za2lwV2hpbGUgPSBleHBvcnRzLnNraXBVbnRpbCA9IGV4cG9ydHMuc2tpcExhc3QgPSBleHBvcnRzLnNraXAgPSBleHBvcnRzLnNpbmdsZSA9IGV4cG9ydHMuc2hhcmVSZXBsYXkgPSBleHBvcnRzLnNoYXJlID0gZXhwb3J0cy5zZXF1ZW5jZUVxdWFsID0gZXhwb3J0cy5zY2FuID0gZXhwb3J0cy5zYW1wbGVUaW1lID0gZXhwb3J0cy5zYW1wbGUgPSBleHBvcnRzLnJlZkNvdW50ID0gZXhwb3J0cy5yZXRyeVdoZW4gPSBleHBvcnRzLnJldHJ5ID0gZXhwb3J0cy5yZXBlYXRXaGVuID0gZXhwb3J0cy5yZXBlYXQgPSBleHBvcnRzLnJlZHVjZSA9IGV4cG9ydHMucmFjZVdpdGggPSBleHBvcnRzLnJhY2UgPSBleHBvcnRzLnB1Ymxpc2hSZXBsYXkgPSBleHBvcnRzLnB1Ymxpc2hMYXN0ID0gZXhwb3J0cy5wdWJsaXNoQmVoYXZpb3IgPSBleHBvcnRzLnB1Ymxpc2ggPSBleHBvcnRzLnBsdWNrID0gZXhwb3J0cy5wYXJ0aXRpb24gPSBleHBvcnRzLnBhaXJ3aXNlID0gZXhwb3J0cy5vbkVycm9yUmVzdW1lTmV4dCA9IGV4cG9ydHMub2JzZXJ2ZU9uID0gZXhwb3J0cy5tdWx0aWNhc3QgPSBleHBvcnRzLm1pbiA9IGV4cG9ydHMubWVyZ2VXaXRoID0gZXhwb3J0cy5tZXJnZVNjYW4gPSBleHBvcnRzLm1lcmdlTWFwVG8gPSBleHBvcnRzLm1lcmdlTWFwID0gZXhwb3J0cy5mbGF0TWFwID0gdm9pZCAwO1xuZXhwb3J0cy56aXBXaXRoID0gZXhwb3J0cy56aXBBbGwgPSBleHBvcnRzLnppcCA9IGV4cG9ydHMud2l0aExhdGVzdEZyb20gPSBleHBvcnRzLndpbmRvd1doZW4gPSBleHBvcnRzLndpbmRvd1RvZ2dsZSA9IGV4cG9ydHMud2luZG93VGltZSA9IGV4cG9ydHMud2luZG93Q291bnQgPSBleHBvcnRzLndpbmRvdyA9IGV4cG9ydHMudG9BcnJheSA9IGV4cG9ydHMudGltZXN0YW1wID0gZXhwb3J0cy50aW1lb3V0V2l0aCA9IGV4cG9ydHMudGltZW91dCA9IHZvaWQgMDtcbnZhciBhdWRpdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9hdWRpdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImF1ZGl0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBhdWRpdF8xLmF1ZGl0OyB9IH0pO1xudmFyIGF1ZGl0VGltZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9hdWRpdFRpbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhdWRpdFRpbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGF1ZGl0VGltZV8xLmF1ZGl0VGltZTsgfSB9KTtcbnZhciBidWZmZXJfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVmZmVyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJfMS5idWZmZXI7IH0gfSk7XG52YXIgYnVmZmVyQ291bnRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyQ291bnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWZmZXJDb3VudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnVmZmVyQ291bnRfMS5idWZmZXJDb3VudDsgfSB9KTtcbnZhciBidWZmZXJUaW1lXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2J1ZmZlclRpbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJidWZmZXJUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJUaW1lXzEuYnVmZmVyVGltZTsgfSB9KTtcbnZhciBidWZmZXJUb2dnbGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvYnVmZmVyVG9nZ2xlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVmZmVyVG9nZ2xlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBidWZmZXJUb2dnbGVfMS5idWZmZXJUb2dnbGU7IH0gfSk7XG52YXIgYnVmZmVyV2hlbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9idWZmZXJXaGVuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYnVmZmVyV2hlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYnVmZmVyV2hlbl8xLmJ1ZmZlcldoZW47IH0gfSk7XG52YXIgY2F0Y2hFcnJvcl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9jYXRjaEVycm9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2F0Y2hFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2F0Y2hFcnJvcl8xLmNhdGNoRXJyb3I7IH0gfSk7XG52YXIgY29tYmluZUFsbF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9jb21iaW5lQWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tYmluZUFsbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tYmluZUFsbF8xLmNvbWJpbmVBbGw7IH0gfSk7XG52YXIgY29tYmluZUxhdGVzdEFsbF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9jb21iaW5lTGF0ZXN0QWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tYmluZUxhdGVzdEFsbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tYmluZUxhdGVzdEFsbF8xLmNvbWJpbmVMYXRlc3RBbGw7IH0gfSk7XG52YXIgY29tYmluZUxhdGVzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9jb21iaW5lTGF0ZXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tYmluZUxhdGVzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tYmluZUxhdGVzdF8xLmNvbWJpbmVMYXRlc3Q7IH0gfSk7XG52YXIgY29tYmluZUxhdGVzdFdpdGhfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29tYmluZUxhdGVzdFdpdGhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21iaW5lTGF0ZXN0V2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tYmluZUxhdGVzdFdpdGhfMS5jb21iaW5lTGF0ZXN0V2l0aDsgfSB9KTtcbnZhciBjb25jYXRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29uY2F0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25jYXRfMS5jb25jYXQ7IH0gfSk7XG52YXIgY29uY2F0QWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvbmNhdEFsbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbmNhdEFsbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29uY2F0QWxsXzEuY29uY2F0QWxsOyB9IH0pO1xudmFyIGNvbmNhdE1hcF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb25jYXRNYXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmNhdE1hcF8xLmNvbmNhdE1hcDsgfSB9KTtcbnZhciBjb25jYXRNYXBUb18xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9jb25jYXRNYXBUb1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbmNhdE1hcFRvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25jYXRNYXBUb18xLmNvbmNhdE1hcFRvOyB9IH0pO1xudmFyIGNvbmNhdFdpdGhfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29uY2F0V2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbmNhdFdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmNhdFdpdGhfMS5jb25jYXRXaXRoOyB9IH0pO1xudmFyIGNvbm5lY3RfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvY29ubmVjdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbm5lY3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbm5lY3RfMS5jb25uZWN0OyB9IH0pO1xudmFyIGNvdW50XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2NvdW50XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY291bnRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvdW50XzEuY291bnQ7IH0gfSk7XG52YXIgZGVib3VuY2VfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWJvdW5jZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVib3VuY2VfMS5kZWJvdW5jZTsgfSB9KTtcbnZhciBkZWJvdW5jZVRpbWVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVib3VuY2VUaW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVib3VuY2VUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWJvdW5jZVRpbWVfMS5kZWJvdW5jZVRpbWU7IH0gfSk7XG52YXIgZGVmYXVsdElmRW1wdHlfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGVmYXVsdElmRW1wdHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0SWZFbXB0eVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGVmYXVsdElmRW1wdHlfMS5kZWZhdWx0SWZFbXB0eTsgfSB9KTtcbnZhciBkZWxheV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9kZWxheVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlbGF5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZWxheV8xLmRlbGF5OyB9IH0pO1xudmFyIGRlbGF5V2hlbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9kZWxheVdoZW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWxheVdoZW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRlbGF5V2hlbl8xLmRlbGF5V2hlbjsgfSB9KTtcbnZhciBkZW1hdGVyaWFsaXplXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2RlbWF0ZXJpYWxpemVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZW1hdGVyaWFsaXplXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkZW1hdGVyaWFsaXplXzEuZGVtYXRlcmlhbGl6ZTsgfSB9KTtcbnZhciBkaXN0aW5jdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRpc3RpbmN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkaXN0aW5jdF8xLmRpc3RpbmN0OyB9IH0pO1xudmFyIGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGlzdGluY3RVbnRpbENoYW5nZWRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRpc3RpbmN0VW50aWxDaGFuZ2VkXzEuZGlzdGluY3RVbnRpbENoYW5nZWQ7IH0gfSk7XG52YXIgZGlzdGluY3RVbnRpbEtleUNoYW5nZWRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbEtleUNoYW5nZWRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGlzdGluY3RVbnRpbEtleUNoYW5nZWRfMS5kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZDsgfSB9KTtcbnZhciBlbGVtZW50QXRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZWxlbWVudEF0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZWxlbWVudEF0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBlbGVtZW50QXRfMS5lbGVtZW50QXQ7IH0gfSk7XG52YXIgZW5kV2l0aF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9lbmRXaXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZW5kV2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZW5kV2l0aF8xLmVuZFdpdGg7IH0gfSk7XG52YXIgZXZlcnlfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZXZlcnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJldmVyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXZlcnlfMS5ldmVyeTsgfSB9KTtcbnZhciBleGhhdXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleGhhdXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGhhdXN0XzEuZXhoYXVzdDsgfSB9KTtcbnZhciBleGhhdXN0QWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RBbGxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleGhhdXN0QWxsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGhhdXN0QWxsXzEuZXhoYXVzdEFsbDsgfSB9KTtcbnZhciBleGhhdXN0TWFwXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2V4aGF1c3RNYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleGhhdXN0TWFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleGhhdXN0TWFwXzEuZXhoYXVzdE1hcDsgfSB9KTtcbnZhciBleHBhbmRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvZXhwYW5kXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXhwYW5kXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBleHBhbmRfMS5leHBhbmQ7IH0gfSk7XG52YXIgZmlsdGVyXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZpbHRlclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmlsdGVyXzEuZmlsdGVyOyB9IH0pO1xudmFyIGZpbmFsaXplXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmFsaXplXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmluYWxpemVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpbmFsaXplXzEuZmluYWxpemU7IH0gfSk7XG52YXIgZmluZF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9maW5kXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmluZFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmluZF8xLmZpbmQ7IH0gfSk7XG52YXIgZmluZEluZGV4XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbmRJbmRleFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImZpbmRJbmRleFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmluZEluZGV4XzEuZmluZEluZGV4OyB9IH0pO1xudmFyIGZpcnN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2ZpcnN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmlyc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZpcnN0XzEuZmlyc3Q7IH0gfSk7XG52YXIgZ3JvdXBCeV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9ncm91cEJ5XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ3JvdXBCeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ3JvdXBCeV8xLmdyb3VwQnk7IH0gfSk7XG52YXIgaWdub3JlRWxlbWVudHNfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvaWdub3JlRWxlbWVudHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpZ25vcmVFbGVtZW50c1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaWdub3JlRWxlbWVudHNfMS5pZ25vcmVFbGVtZW50czsgfSB9KTtcbnZhciBpc0VtcHR5XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2lzRW1wdHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0VtcHR5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0VtcHR5XzEuaXNFbXB0eTsgfSB9KTtcbnZhciBsYXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL2xhc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJsYXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBsYXN0XzEubGFzdDsgfSB9KTtcbnZhciBtYXBfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXBfMS5tYXA7IH0gfSk7XG52YXIgbWFwVG9fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwVG9cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYXBUb1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFwVG9fMS5tYXBUbzsgfSB9KTtcbnZhciBtYXRlcmlhbGl6ZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9tYXRlcmlhbGl6ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1hdGVyaWFsaXplXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXRlcmlhbGl6ZV8xLm1hdGVyaWFsaXplOyB9IH0pO1xudmFyIG1heF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9tYXhcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYXhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1heF8xLm1heDsgfSB9KTtcbnZhciBtZXJnZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9tZXJnZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1lcmdlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZV8xLm1lcmdlOyB9IH0pO1xudmFyIG1lcmdlQWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlQWxsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWVyZ2VBbGxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1lcmdlQWxsXzEubWVyZ2VBbGw7IH0gfSk7XG52YXIgZmxhdE1hcF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9mbGF0TWFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmxhdE1hcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmxhdE1hcF8xLmZsYXRNYXA7IH0gfSk7XG52YXIgbWVyZ2VNYXBfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtZXJnZU1hcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVyZ2VNYXBfMS5tZXJnZU1hcDsgfSB9KTtcbnZhciBtZXJnZU1hcFRvXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlTWFwVG9cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtZXJnZU1hcFRvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZU1hcFRvXzEubWVyZ2VNYXBUbzsgfSB9KTtcbnZhciBtZXJnZVNjYW5fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VTY2FuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWVyZ2VTY2FuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtZXJnZVNjYW5fMS5tZXJnZVNjYW47IH0gfSk7XG52YXIgbWVyZ2VXaXRoXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL21lcmdlV2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1lcmdlV2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVyZ2VXaXRoXzEubWVyZ2VXaXRoOyB9IH0pO1xudmFyIG1pbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9taW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtaW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1pbl8xLm1pbjsgfSB9KTtcbnZhciBtdWx0aWNhc3RfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvbXVsdGljYXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibXVsdGljYXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBtdWx0aWNhc3RfMS5tdWx0aWNhc3Q7IH0gfSk7XG52YXIgb2JzZXJ2ZU9uXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL29ic2VydmVPblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm9ic2VydmVPblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gb2JzZXJ2ZU9uXzEub2JzZXJ2ZU9uOyB9IH0pO1xudmFyIG9uRXJyb3JSZXN1bWVOZXh0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL29uRXJyb3JSZXN1bWVOZXh0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwib25FcnJvclJlc3VtZU5leHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9uRXJyb3JSZXN1bWVOZXh0XzEub25FcnJvclJlc3VtZU5leHQ7IH0gfSk7XG52YXIgcGFpcndpc2VfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcGFpcndpc2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwYWlyd2lzZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGFpcndpc2VfMS5wYWlyd2lzZTsgfSB9KTtcbnZhciBwYXJ0aXRpb25fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcGFydGl0aW9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicGFydGl0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwYXJ0aXRpb25fMS5wYXJ0aXRpb247IH0gfSk7XG52YXIgcGx1Y2tfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcGx1Y2tcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwbHVja1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcGx1Y2tfMS5wbHVjazsgfSB9KTtcbnZhciBwdWJsaXNoXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwdWJsaXNoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJsaXNoXzEucHVibGlzaDsgfSB9KTtcbnZhciBwdWJsaXNoQmVoYXZpb3JfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaEJlaGF2aW9yXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHVibGlzaEJlaGF2aW9yXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJsaXNoQmVoYXZpb3JfMS5wdWJsaXNoQmVoYXZpb3I7IH0gfSk7XG52YXIgcHVibGlzaExhc3RfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcHVibGlzaExhc3RcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwdWJsaXNoTGFzdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcHVibGlzaExhc3RfMS5wdWJsaXNoTGFzdDsgfSB9KTtcbnZhciBwdWJsaXNoUmVwbGF5XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3B1Ymxpc2hSZXBsYXlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwdWJsaXNoUmVwbGF5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwdWJsaXNoUmVwbGF5XzEucHVibGlzaFJlcGxheTsgfSB9KTtcbnZhciByYWNlXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3JhY2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyYWNlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByYWNlXzEucmFjZTsgfSB9KTtcbnZhciByYWNlV2l0aF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9yYWNlV2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJhY2VXaXRoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByYWNlV2l0aF8xLnJhY2VXaXRoOyB9IH0pO1xudmFyIHJlZHVjZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9yZWR1Y2VcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWR1Y2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZHVjZV8xLnJlZHVjZTsgfSB9KTtcbnZhciByZXBlYXRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVwZWF0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVwZWF0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXBlYXRfMS5yZXBlYXQ7IH0gfSk7XG52YXIgcmVwZWF0V2hlbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9yZXBlYXRXaGVuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVwZWF0V2hlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVwZWF0V2hlbl8xLnJlcGVhdFdoZW47IH0gfSk7XG52YXIgcmV0cnlfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXRyeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmV0cnlfMS5yZXRyeTsgfSB9KTtcbnZhciByZXRyeVdoZW5fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnlXaGVuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmV0cnlXaGVuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiByZXRyeVdoZW5fMS5yZXRyeVdoZW47IH0gfSk7XG52YXIgcmVmQ291bnRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvcmVmQ291bnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWZDb3VudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVmQ291bnRfMS5yZWZDb3VudDsgfSB9KTtcbnZhciBzYW1wbGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2FtcGxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2FtcGxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzYW1wbGVfMS5zYW1wbGU7IH0gfSk7XG52YXIgc2FtcGxlVGltZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zYW1wbGVUaW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2FtcGxlVGltZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2FtcGxlVGltZV8xLnNhbXBsZVRpbWU7IH0gfSk7XG52YXIgc2Nhbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zY2FuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2NhblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2Nhbl8xLnNjYW47IH0gfSk7XG52YXIgc2VxdWVuY2VFcXVhbF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zZXF1ZW5jZUVxdWFsXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2VxdWVuY2VFcXVhbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VxdWVuY2VFcXVhbF8xLnNlcXVlbmNlRXF1YWw7IH0gfSk7XG52YXIgc2hhcmVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2hhcmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaGFyZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2hhcmVfMS5zaGFyZTsgfSB9KTtcbnZhciBzaGFyZVJlcGxheV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zaGFyZVJlcGxheVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNoYXJlUmVwbGF5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzaGFyZVJlcGxheV8xLnNoYXJlUmVwbGF5OyB9IH0pO1xudmFyIHNpbmdsZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zaW5nbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzaW5nbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNpbmdsZV8xLnNpbmdsZTsgfSB9KTtcbnZhciBza2lwXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3NraXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJza2lwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBza2lwXzEuc2tpcDsgfSB9KTtcbnZhciBza2lwTGFzdF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9za2lwTGFzdFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNraXBMYXN0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBza2lwTGFzdF8xLnNraXBMYXN0OyB9IH0pO1xudmFyIHNraXBVbnRpbF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9za2lwVW50aWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJza2lwVW50aWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNraXBVbnRpbF8xLnNraXBVbnRpbDsgfSB9KTtcbnZhciBza2lwV2hpbGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc2tpcFdoaWxlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2tpcFdoaWxlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBza2lwV2hpbGVfMS5za2lwV2hpbGU7IH0gfSk7XG52YXIgc3RhcnRXaXRoXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N0YXJ0V2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0YXJ0V2l0aFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3RhcnRXaXRoXzEuc3RhcnRXaXRoOyB9IH0pO1xudmFyIHN1YnNjcmliZU9uXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N1YnNjcmliZU9uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3Vic2NyaWJlT25cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN1YnNjcmliZU9uXzEuc3Vic2NyaWJlT247IH0gfSk7XG52YXIgc3dpdGNoQWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3N3aXRjaEFsbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN3aXRjaEFsbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc3dpdGNoQWxsXzEuc3dpdGNoQWxsOyB9IH0pO1xudmFyIHN3aXRjaE1hcF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzd2l0Y2hNYXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN3aXRjaE1hcF8xLnN3aXRjaE1hcDsgfSB9KTtcbnZhciBzd2l0Y2hNYXBUb18xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy9zd2l0Y2hNYXBUb1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN3aXRjaE1hcFRvXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzd2l0Y2hNYXBUb18xLnN3aXRjaE1hcFRvOyB9IH0pO1xudmFyIHN3aXRjaFNjYW5fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoU2NhblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN3aXRjaFNjYW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN3aXRjaFNjYW5fMS5zd2l0Y2hTY2FuOyB9IH0pO1xudmFyIHRha2VfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRha2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRha2VfMS50YWtlOyB9IH0pO1xudmFyIHRha2VMYXN0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VMYXN0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGFrZUxhc3RcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRha2VMYXN0XzEudGFrZUxhc3Q7IH0gfSk7XG52YXIgdGFrZVVudGlsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rha2VVbnRpbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRha2VVbnRpbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGFrZVVudGlsXzEudGFrZVVudGlsOyB9IH0pO1xudmFyIHRha2VXaGlsZV8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy90YWtlV2hpbGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0YWtlV2hpbGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRha2VXaGlsZV8xLnRha2VXaGlsZTsgfSB9KTtcbnZhciB0YXBfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGFwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGFwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0YXBfMS50YXA7IH0gfSk7XG52YXIgdGhyb3R0bGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0aHJvdHRsZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhyb3R0bGVfMS50aHJvdHRsZTsgfSB9KTtcbnZhciB0aHJvdHRsZVRpbWVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGhyb3R0bGVUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aHJvdHRsZVRpbWVfMS50aHJvdHRsZVRpbWU7IH0gfSk7XG52YXIgdGhyb3dJZkVtcHR5XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3Rocm93SWZFbXB0eVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRocm93SWZFbXB0eVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhyb3dJZkVtcHR5XzEudGhyb3dJZkVtcHR5OyB9IH0pO1xudmFyIHRpbWVJbnRlcnZhbF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy90aW1lSW50ZXJ2YWxcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0aW1lSW50ZXJ2YWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRpbWVJbnRlcnZhbF8xLnRpbWVJbnRlcnZhbDsgfSB9KTtcbnZhciB0aW1lb3V0XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RpbWVvdXRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0aW1lb3V0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lb3V0XzEudGltZW91dDsgfSB9KTtcbnZhciB0aW1lb3V0V2l0aF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy90aW1lb3V0V2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRpbWVvdXRXaXRoXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aW1lb3V0V2l0aF8xLnRpbWVvdXRXaXRoOyB9IH0pO1xudmFyIHRpbWVzdGFtcF8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy90aW1lc3RhbXBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0aW1lc3RhbXBcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRpbWVzdGFtcF8xLnRpbWVzdGFtcDsgfSB9KTtcbnZhciB0b0FycmF5XzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3RvQXJyYXlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0FycmF5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0b0FycmF5XzEudG9BcnJheTsgfSB9KTtcbnZhciB3aW5kb3dfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2luZG93XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3dfMS53aW5kb3c7IH0gfSk7XG52YXIgd2luZG93Q291bnRfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93Q291bnRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aW5kb3dDb3VudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93Q291bnRfMS53aW5kb3dDb3VudDsgfSB9KTtcbnZhciB3aW5kb3dUaW1lXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3dpbmRvd1RpbWVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aW5kb3dUaW1lXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3dUaW1lXzEud2luZG93VGltZTsgfSB9KTtcbnZhciB3aW5kb3dUb2dnbGVfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2luZG93VG9nZ2xlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2luZG93VG9nZ2xlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3dUb2dnbGVfMS53aW5kb3dUb2dnbGU7IH0gfSk7XG52YXIgd2luZG93V2hlbl8xID0gcmVxdWlyZShcIi4uL2ludGVybmFsL29wZXJhdG9ycy93aW5kb3dXaGVuXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2luZG93V2hlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93V2hlbl8xLndpbmRvd1doZW47IH0gfSk7XG52YXIgd2l0aExhdGVzdEZyb21fMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvd2l0aExhdGVzdEZyb21cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ3aXRoTGF0ZXN0RnJvbVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gd2l0aExhdGVzdEZyb21fMS53aXRoTGF0ZXN0RnJvbTsgfSB9KTtcbnZhciB6aXBfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvemlwXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiemlwXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB6aXBfMS56aXA7IH0gfSk7XG52YXIgemlwQWxsXzEgPSByZXF1aXJlKFwiLi4vaW50ZXJuYWwvb3BlcmF0b3JzL3ppcEFsbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInppcEFsbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gemlwQWxsXzEuemlwQWxsOyB9IH0pO1xudmFyIHppcFdpdGhfMSA9IHJlcXVpcmUoXCIuLi9pbnRlcm5hbC9vcGVyYXRvcnMvemlwV2l0aFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInppcFdpdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHppcFdpdGhfMS56aXBXaXRoOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGVudW0gRUNsYWltVHlwZSB7XG4gICAgU0lHTkVEX0NPTlRFTlQgPSAxMDAwLFxuICAgIENPTVBBTllfSU5GTyA9IDIwMDAsXG4gICAgVkFMSURBVE9SUyA9IDIwMDEsXG4gICAgVVNFUlMgPSAyMDAyXG59IiwiZXhwb3J0IGVudW0gRURJREFjY2Vzc0xldmVsIHtcbiAgICBOT05FPSBcIjBcIixcbiAgICBNQU5BR0VNRU5UX0tFWT0gXCIxXCIsXG4gICAgQUNUSU9OX0tFWSA9IFwiMlwiLFxuICAgIENMQUlNX1NJR05FUl9LRVkgPSBcIjNcIixcbiAgICBFTkNSWVBUSU9OX0tFWSA9IFwiNFwiXG59IiwiZXhwb3J0IGVudW0gRU1pbWVUeXBlIHtcbiAgICBBQUMgPSBcImF1ZGlvL2FhY1wiLFxuICAgIEFCVyA9IFwiYXBwbGljYXRpb24veC1hYml3b3JkXCIsXG4gICAgQVJDID0gXCJhcHBsaWNhdGlvbi94LWZyZWVhcmNcIixcbiAgICBBVkkgPSBcInZpZGVvL3gtbXN2aWRlb1wiLFxuICAgIEFaVyA9IFwiYXBwbGljYXRpb24vdm5kLmFtYXpvbi5lYm9va1wiLFxuICAgIEJJTiA9IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsXG4gICAgQk1QID0gXCJpbWFnZS9ibXBcIixcbiAgICBCWiA9IFwiYXBwbGljYXRpb24veC1iemlwXCIsXG4gICAgQloyID0gXCJhcHBsaWNhdGlvbi94LWJ6aXAyXCIsXG4gICAgQ1NIID0gXCJhcHBsaWNhdGlvbi94LWNzaFwiLFxuICAgIENTUyA9IFwidGV4dC9jc3NcIixcbiAgICBDU1YgPSBcInRleHQvY3N2XCIsXG4gICAgRE9DID0gXCJhcHBsaWNhdGlvbi9tc3dvcmRcIixcbiAgICBET0NYID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudFwiLFxuICAgIEVPVCA9IFwiYXBwbGljYXRpb24vdm5kLm1zLWZvbnRvYmplY3RcIixcbiAgICBFUFVCID0gXCJhcHBsaWNhdGlvbi9lcHViK3ppcFwiLFxuICAgIEdaID0gXCJhcHBsaWNhdGlvbi9nemlwXCIsXG4gICAgR0lGID0gXCJpbWFnZS9naWZcIixcbiAgICBIVE0gPSBcInRleHQvaHRtbFwiLFxuICAgIEhUTUwgPSBcInRleHQvaHRtbFwiLFxuICAgIElDTyA9IFwiaW1hZ2Uvdm5kLm1pY3Jvc29mdC5pY29uXCIsXG4gICAgSUNTID0gXCJ0ZXh0L2NhbGVuZGFyXCIsXG4gICAgSkFSID0gXCJhcHBsaWNhdGlvbi9qYXZhLWFyY2hpdmVcIixcbiAgICBKUEVHID0gXCIuanBnXCIsXG4gICAgSlMgPSBcInRleHQvamF2YXNjcmlwdFwiLFxuICAgIEpTT04gPSBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICBKU09OTEQgPSBcImFwcGxpY2F0aW9uL2xkK2pzb25cIixcbiAgICBNSUQgPSBcIi5taWRpXCIsXG4gICAgTUpTID0gXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICBNUDMgPSBcImF1ZGlvL21wZWdcIixcbiAgICBNUEVHID0gXCJ2aWRlby9tcGVnXCIsXG4gICAgTVBLRyA9IFwiYXBwbGljYXRpb24vdm5kLmFwcGxlLmluc3RhbGxlcit4bWxcIixcbiAgICBPRFAgPSBcImFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uXCIsXG4gICAgT0RTID0gXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnNwcmVhZHNoZWV0XCIsXG4gICAgT0RUID0gXCJhcHBsaWNhdGlvbi92bmQub2FzaXMub3BlbmRvY3VtZW50LnRleHRcIixcbiAgICBPR0EgPSBcImF1ZGlvL29nZ1wiLFxuICAgIE9HViA9IFwidmlkZW8vb2dnXCIsXG4gICAgT0dYID0gXCJhcHBsaWNhdGlvbi9vZ2dcIixcbiAgICBPUFVTID0gXCJhdWRpby9vcHVzXCIsXG4gICAgT1RGID0gXCJmb250L290ZlwiLFxuICAgIFBORyA9IFwiaW1hZ2UvcG5nXCIsXG4gICAgUERGID0gXCJhcHBsaWNhdGlvbi9wZGZcIixcbiAgICBQSFAgPSBcImFwcGxpY2F0aW9uL3BocFwiLFxuICAgIFBQVCA9IFwiYXBwbGljYXRpb24vdm5kLm1zLXBvd2VycG9pbnRcIixcbiAgICBQUFRYID0gXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uXCIsXG4gICAgUkFSID0gXCJhcHBsaWNhdGlvbi92bmQucmFyXCIsXG4gICAgUlRGID0gXCJhcHBsaWNhdGlvbi9ydGZcIixcbiAgICBTSCA9IFwiYXBwbGljYXRpb24veC1zaFwiLFxuICAgIFNWRyA9IFwiaW1hZ2Uvc3ZnK3htbFwiLFxuICAgIFNXRiA9IFwiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIixcbiAgICBUQVIgPSBcImFwcGxpY2F0aW9uL3gtdGFyXCIsXG4gICAgVElGID0gXCJpbWFnZS90aWZmXCIsXG4gICAgVElGRiA9IFwiaW1hZ2UvdGlmZlwiLFxuICAgIFRTID0gXCJ2aWRlby9tcDJ0XCIsXG4gICAgVFRGID0gXCJmb250L3R0ZlwiLFxuICAgIFRYVCA9IFwidGV4dC9wbGFpblwiLFxuICAgIFVSSSA9IFwidGV4dC94LXVyaVwiLFxuICAgIFZTRCA9IFwiYXBwbGljYXRpb24vdm5kLnZpc2lvXCIsXG4gICAgV0FWID0gXCJhdWRpby93YXZcIixcbiAgICBXRUJBID0gXCJhdWRpby93ZWJtXCIsXG4gICAgV0VCTSA9IFwidmlkZW8vd2VibVwiLFxuICAgIFdFQlAgPSBcImltYWdlL3dlYnBcIixcbiAgICBXT0ZGID0gXCJmb250L3dvZmZcIixcbiAgICBXT0ZGMiA9IFwiZm9udC93b2ZmMlwiLFxuICAgIFhIVE1MID0gXCJhcHBsaWNhdGlvbi94aHRtbCt4bWxcIixcbiAgICBYTFMgPSBcImFwcGxpY2F0aW9uL3ZuZC5tcy1leGNlbFwiLFxuICAgIFhMU1ggPSBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0XCIsXG4gICAgWE1MID0gXCJYTUxcIixcbiAgICBYVUwgPSBcImFwcGxpY2F0aW9uL3ZuZC5tb3ppbGxhLnh1bCt4bWxcIixcbiAgICBaSVAgPSBcImFwcGxpY2F0aW9uL3ppcFwiLFxuICAgIEdQMyA9IFwidmlkZW8vM2dwcFwiLFxuICAgIEcyMyA9IFwidmlkZW8vM2dwcDJcIixcbiAgICBaNyA9IFwiYXBwbGljYXRpb24veC03ei1jb21wcmVzc2VkXCJcbn0iLCJleHBvcnQgZW51bSBFUHJvb2ZtZURhdGFQdXJwb3NlIHtcbiAgICBBR0VfVkVSSUZJQ0FUSU9OID0gXCJBR0VfVkVSSUZJQ0FUSU9OXCIsXG4gICAgS1lDX1ZFUklGSUNBVElPTiA9IFwiS1lDX1ZFUklGSUNBVElPTlwiLFxuICAgIEFDQ0VTU19DT05UUk9MID0gXCJBQ0NFU1NfQ09OVFJPTFwiLFxuICAgIE9OTElORV9WRVJJRklDQVRJT04gPSBcIk9OTElORV9WRVJJRklDQVRJT05cIixcbiAgICBJREVOVElGSUNBVElPTiA9IFwiSURFTlRJRklDQVRJT05cIlxufSIsImV4cG9ydCBlbnVtIEVQcm9vZm1lRGF0YVN0b3JhZ2Uge1xuICAgIERBVEFCQVNFID0gXCJEQVRBQkFTRVwiLFxuICAgIENFUlRJRklDQVRFID0gXCJDRVJUSUZJQ0FURVwiLFxuICAgIE5PVF9TVE9SRUQgPSBcIk5PVF9TVE9SRURcIlxufSIsImV4cG9ydCBlbnVtIEVTaWduYXR1cmVUeXBlcyB7XG4gICAgRUNEU0EgPSBcIkVDRFNBXCIsXG4gICAgUlNBID0gXCJSU0FcIixcbiAgICBITUFDID0gXCJITUFDXCJcbn0iLCJpbXBvcnQgeyBJQ29ubmVjdGlvbkRldGFpbHMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb25uZWN0aW9uRGV0YWlsc1wiO1xuaW1wb3J0IGNyeXB0byBmcm9tIFwiY3J5cHRvXCI7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBjaGFubmVsSWQgaXMgdmFsaWQgYW5kIGV4aXN0c1xuICogQHBhcmFtIGNoYW5uZWxJZFxuICogQHBhcmFtIGNvbm5lY3Rpb25zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZENoYW5uZWxJZChjaGFubmVsSWQ6IHN0cmluZywgY29ubmVjdGlvbnM6IElDb25uZWN0aW9uRGV0YWlsc1tdKTogYm9vbGVhbiB7XG4gICAgLy8gQ2hlY2sgaWYgY2hhbm5lbElkIGlzIHByZXNlbnQgaW4gY29ubmVjdGlvbnNcbiAgICAvLyBDaGVjayBpZiBjaGFubmVsSWQgaXMgbm90IGFscmVhZHkgY29ubmVjdGVkXG4gICAgY29uc3QgaG9zdHMgPSBjb25uZWN0aW9ucy5maWx0ZXIoKGNsaWVudDogSUNvbm5lY3Rpb25EZXRhaWxzKSA9PiB7XG4gICAgICAgIHJldHVybiBjbGllbnQudXVpZCA9PT0gY2hhbm5lbElkICYmIGNsaWVudC5jaGFubmVsID09PSBudWxsICYmIGNsaWVudC5ob3N0ID09PSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhvc3RzLmxlbmd0aCA9PT0gMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb25maWd1cmF0aW9uIGZvciB0aGUgUlRDIHBlZXJjb25uZWN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRSVENDb25uZWN0aW9uQ29uZmlnKHR5cGU6IHN0cmluZywgdHVybkV4cGlyYXRpb246IG51bWJlciwgdHVyblNlY3JldDogc3RyaW5nLCB0dXJuVXJsOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFJUQ0NvbmZpZ3VyYXRpb24ge1xuICAgIGNvbnN0IHRpbWUgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcbiAgICBjb25zdCB1c2VybmFtZSA9IGAke3RpbWUgKyB0dXJuRXhwaXJhdGlvbn06JHt0eXBlfWA7XG4gICAgY29uc3QgY3JlZGVudGlhbCA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMVwiLCB0dXJuU2VjcmV0KS51cGRhdGUodXNlcm5hbWUudG9TdHJpbmcoKSkuZGlnZXN0KFwiYmFzZTY0XCIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGljZUNhbmRpZGF0ZVBvb2xTaXplOiA1LFxuICAgICAgICBpY2VTZXJ2ZXJzOiBbe1xuICAgICAgICAgICAgdXJsczogdHVyblVybCxcbiAgICAgICAgICAgIGNyZWRlbnRpYWwsXG4gICAgICAgICAgICB1c2VybmFtZSxcbiAgICAgICAgfV0sXG4gICAgfSBhcyBSVENDb25maWd1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBJVmFsaWRhdGVkQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3ZhbGlkYXRlZENyZWRlbnRpYWxzLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSUNyZWRlbnRpYWxPYmplY3QgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL2NyZWRlbnRpYWxzT2JqZWN0LmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSVJlcXVlc3RlZENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFscy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IElSZXF1ZXN0ZWRDcmVkZW50aWFsc0NoZWNrUmVzdWx0IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFsc0NoZWNrUmVzdWx0XCI7XG5pbXBvcnQgeyBQcm9vZm1lVXRpbHMgfSBmcm9tIFwiLi9wcm9vZm1lLXV0aWxzXCI7XG5pbXBvcnQgeyBJQ2hhbGxlbmdlIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9jaGFsbGVuZ2UuaW50ZXJmYWNlXCI7XG5pbXBvcnQgeyBFQ2xhaW1UeXBlIH0gZnJvbSBcIi4vZW51bXMvY2xhaW1UeXBlcy5lbnVtXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQcm9vZm1lVXRpbHNQcm92aWRlciB7XG5cbiAgICBwcm9vZm1lVXRpbHMgPSBuZXcgUHJvb2ZtZVV0aWxzKCk7XG5cblx0YXN5bmMgaXNWYWxpZENyZWRlbnRpYWxzKGNyZWRlbnRpYWxPYmplY3Q6IElDcmVkZW50aWFsT2JqZWN0LCB3ZWIzVXJsOiBzdHJpbmcsIHJlcXVlc3RlZENyZWRlbnRpYWxzOiBJUmVxdWVzdGVkQ3JlZGVudGlhbHMsIHRydXN0ZWREaWRzOiBzdHJpbmdbXSwgY2hlY2tVc2VyTm9uY2U6IGJvb2xlYW4sIGxpdmVuZXNzQ2hlY2tSZXF1aXJlZD86IGJvb2xlYW4pOiBQcm9taXNlPElWYWxpZGF0ZWRDcmVkZW50aWFscyB8IElSZXF1ZXN0ZWRDcmVkZW50aWFsc0NoZWNrUmVzdWx0PiAge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9vZm1lVXRpbHMuaXNWYWxpZENyZWRlbnRpYWxzKGNyZWRlbnRpYWxPYmplY3QsIHdlYjNVcmwsIHJlcXVlc3RlZENyZWRlbnRpYWxzLCB0cnVzdGVkRGlkcywgY2hlY2tVc2VyTm9uY2UsIGxpdmVuZXNzQ2hlY2tSZXF1aXJlZCk7XG4gICAgfVxuXG4gICAgZ2V0U2lnbmF0dXJlKG1lc3NhZ2U6IGFueSwgcHJpdmF0ZUtleTogc3RyaW5nKTogc3RyaW5nICB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb29mbWVVdGlscy5nZXRTaWduYXR1cmUobWVzc2FnZSwgcHJpdmF0ZUtleSk7XG4gICAgfVxuXG4gICAgc2lnbkNyZWRlbnRpYWxPYmplY3QoY3JlZGVudGlhbDogSUNyZWRlbnRpYWxPYmplY3QsIHByaXZhdGVLZXk6IHN0cmluZyk6IHN0cmluZyAge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9vZm1lVXRpbHMuc2lnbkNyZWRlbnRpYWxPYmplY3QoY3JlZGVudGlhbCwgcHJpdmF0ZUtleSk7XG4gICAgfVxuXG4gICAgc2lnblJlcXVlc3RlZENyZWRlbnRpYWxzKHJlcXVlc3RlZENyZWRlbnRpYWxzOiBJUmVxdWVzdGVkQ3JlZGVudGlhbHMsIGRpZDogc3RyaW5nLCBwcml2YXRlS2V5OiBzdHJpbmcpOiBJUmVxdWVzdGVkQ3JlZGVudGlhbHMgIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvb2ZtZVV0aWxzLnNpZ25SZXF1ZXN0ZWRDcmVkZW50aWFscyhyZXF1ZXN0ZWRDcmVkZW50aWFscywgZGlkLCBwcml2YXRlS2V5KTtcbiAgICB9XG5cbiAgICBhc3luYyBpc1ZhbGlkUmVxdWVzdGVkQ3JlZGVudGlhbHMocmVxdWVzdGVkQ3JlZGVudGlhbHM6IElSZXF1ZXN0ZWRDcmVkZW50aWFscywgd2ViM1VybDogc3RyaW5nLCBjbGFpbWhvbGRlckFiaTogYW55KTogUHJvbWlzZTxib29sZWFuPiAge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9vZm1lVXRpbHMuaXNWYWxpZFJlcXVlc3RlZENyZWRlbnRpYWxzKHJlcXVlc3RlZENyZWRlbnRpYWxzLCB3ZWIzVXJsLCBjbGFpbWhvbGRlckFiaSk7XG4gICAgfVxuXG4gICAgYXN5bmMgaXNWYWxpZExpY2Vuc2UocmVxdWVzdGVkQ3JlZGVudGlhbHM6IElSZXF1ZXN0ZWRDcmVkZW50aWFscywgd2ViM1VybDogc3RyaW5nLCBjbGFpbUhvbGRlckFiaTogYW55KTogUHJvbWlzZTxib29sZWFuPiAge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9vZm1lVXRpbHMuaXNWYWxpZExpY2Vuc2UocmVxdWVzdGVkQ3JlZGVudGlhbHMsIHdlYjNVcmwsIGNsYWltSG9sZGVyQWJpKTtcbiAgICB9XG5cbiAgICBnZW5lcmF0ZUNoYWxsZW5nZShwdWJsaWNLZXk6IHN0cmluZywgZGlkOiBzdHJpbmcsIGhvc3Q6IHN0cmluZywgcHJpdmF0ZUtleTogc3RyaW5nKTogSUNoYWxsZW5nZSAge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9vZm1lVXRpbHMuZ2VuZXJhdGVDaGFsbGVuZ2UocHVibGljS2V5LCBkaWQsIGhvc3QsIHByaXZhdGVLZXkpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldENsYWltKGNsYWltVHlwZTogRUNsYWltVHlwZSwgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsIHdlYjNVcmw6IHN0cmluZywgY2xhaW1Ib2xkZXJBYmk6IGFueSk6IFByb21pc2U8YW55PiAge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9vZm1lVXRpbHMuZ2V0Q2xhaW0oY2xhaW1UeXBlLCBjb250cmFjdEFkZHJlc3MsIHdlYjNVcmwsIGNsYWltSG9sZGVyQWJpKTtcbiAgICB9XG5cbiAgICBnZXRDb250cmFjdEFkZHJlc3NGcm9tRGlkKGRpZDogc3RyaW5nKTogc3RyaW5nICB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb29mbWVVdGlscy5nZXRDb250cmFjdEFkZHJlc3NGcm9tRGlkKGRpZCk7XG4gICAgfVxufSIsImltcG9ydCBXZWIzIGZyb20gXCJ3ZWIzXCI7XG5pbXBvcnQgeyBFQ2xhaW1UeXBlIH0gZnJvbSBcIi4vZW51bXMvY2xhaW1UeXBlcy5lbnVtXCI7XG5pbXBvcnQgeyBFRElEQWNjZXNzTGV2ZWwgfSBmcm9tIFwiLi9lbnVtcy9kaWRBY2Nlc3NMZXZlbC5lbnVtXCI7XG5pbXBvcnQgeyBFU2lnbmF0dXJlVHlwZXMgfSBmcm9tIFwiLi9lbnVtcy9zaWduYXR1cmVUeXBlcy5lbnVtXCI7XG5pbXBvcnQgeyBJQWRkaXRpb25hbEluZm8gfSBmcm9tIFwiLi9pbnRlcmZhY2VzL2FkZGl0aW9uYWwtaW5mby5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IElDaGFsbGVuZ2UgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL2NoYWxsZW5nZS5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IElDaGVja2VkRGlkIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9jaGVja2VkRGlkLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSVNpZ25lZENvbnRlbnQgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL2NsYWltcy9zaWduZWRDb250ZW50LmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSUNvbXBhbnlJbmZvIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9jb21wYW55SW5mby5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IElDcmVkZW50aWFsIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9jcmVkZW50aWFsLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSUNyZWRlbnRpYWxPYmplY3QgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL2NyZWRlbnRpYWxzT2JqZWN0LmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSVByb29mIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9wcm9vZi5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IElSZXF1ZXN0ZWRDcmVkZW50aWFsS2V5IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFsS2V5LmludGVyZmFjZVwiO1xuaW1wb3J0IHsgSVJlcXVlc3RlZENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFscy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IElSZXF1ZXN0ZWRDcmVkZW50aWFsc0NoZWNrUmVzdWx0IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFsc0NoZWNrUmVzdWx0XCI7XG5pbXBvcnQgeyBJVmFsaWRhdGVkQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3ZhbGlkYXRlZENyZWRlbnRpYWxzLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgY2xhaW1Ib2xkZXJBYmkgfSBmcm9tIFwiLi9zbWFydGNvbnRyYWN0cy9jbGFpbUhvbGRlckFiaVwiO1xuXG5leHBvcnQgY2xhc3MgUHJvb2ZtZVV0aWxzIHtcblxuICAgIGV4Y2x1ZGVkQ3JlZGVudGlhbEtleXMgPSBbXCJPV05cIiwgXCJBRERJVElPTkFMX0lORk9cIiwgXCJTSUdOQVRVUkVcIl07XG5cbiAgICBhc3luYyBpc1ZhbGlkQ3JlZGVudGlhbHMoXG4gICAgICAgIGNyZWRlbnRpYWxPYmplY3Q6IElDcmVkZW50aWFsT2JqZWN0LFxuICAgICAgICB3ZWIzVXJsOiBzdHJpbmcsXG4gICAgICAgIHJlcXVlc3RlZENyZWRlbnRpYWxzOiBJUmVxdWVzdGVkQ3JlZGVudGlhbHMsXG4gICAgICAgIHRydXN0ZWREaWRzOiBzdHJpbmdbXSxcbiAgICAgICAgY2hlY2tVc2VyTm9uY2U6IGJvb2xlYW4sXG4gICAgICAgIGxpdmVuZXNzQ2hlY2tSZXF1aXJlZD86IGJvb2xlYW5cbiAgICApOiBQcm9taXNlPElWYWxpZGF0ZWRDcmVkZW50aWFscyB8IElSZXF1ZXN0ZWRDcmVkZW50aWFsc0NoZWNrUmVzdWx0PiB7XG4gICAgICAgIGNvbnN0IHdlYjMgPSBuZXcgV2ViMyh3ZWIzVXJsKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlcXVlc3RlZENoZWNrUmVzdWx0ID0gdGhpcy5yZXF1ZXN0ZWRDcmVkZW50aWFsc0NvcnJlY3QoY3JlZGVudGlhbE9iamVjdCwgcmVxdWVzdGVkQ3JlZGVudGlhbHMpO1xuICAgICAgICBpZiAoIXJlcXVlc3RlZENoZWNrUmVzdWx0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIHJlcXVlc3RlZENoZWNrUmVzdWx0LmNyZWRlbnRpYWxzID0gY3JlZGVudGlhbE9iamVjdDtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0ZWRDaGVja1Jlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmNoZWNrQ3JlZGVudGlhbHMoY3JlZGVudGlhbE9iamVjdCwgd2ViM1VybCwgY2hlY2tVc2VyTm9uY2UsIGxpdmVuZXNzQ2hlY2tSZXF1aXJlZCk7XG4gICAgICAgIC8vIElmIHRoZSBcIm5vcm1hbFwiIGNoZWNrIHdhcyBub3QgdmFsaWQsIGRvbid0IGNoZWNrIHRoZSB0cnVzdGVkIHBhcnRpZXMgYnV0IHJldHVybiB0aGUgcmVzdWx0XG4gICAgICAgIGlmICghcmVzdWx0LnZhbGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSB0cnVzdGVkIGFkZHJlc3NlcyBhcmUgYWRkcmVzc2VzXG4gICAgICAgIGZvciAoY29uc3QgZGlkIG9mIHRydXN0ZWREaWRzKSB7XG4gICAgICAgICAgICBpZiAoIXdlYjMudXRpbHMuaXNBZGRyZXNzKGRpZCkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBUcnVzdGVkIHBhcnR5IGRpZCAke2RpZH0gaXMgTk9UIGEgdmFsaWQgYWRkcmVzcyBhbmQgaXMgcmVtb3ZlZC5gKTtcbiAgICAgICAgICAgICAgICB0cnVzdGVkRGlkcyA9IHRydXN0ZWREaWRzLmZpbHRlcih4ID0+IHggIT09IGRpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRydXN0ZWREaWRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrZWREaWQgPSBbXTtcbiAgICAgICAgICAgIGxldCB2YWxpZENyZWRlbnRpYWxzQW1vdW50ID0gMDtcbiAgICAgICAgICAgIGxldCBjcmVkZW50aWFsc0Ftb3VudCA9IDA7XG4gICAgICAgICAgICBjb25zdCBpbnZhbGlkQ3JlZGVudGlhbHMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW3Byb3ZpZGVyLF0gb2YgT2JqZWN0LmVudHJpZXMoY3JlZGVudGlhbE9iamVjdC5jcmVkZW50aWFscykpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBjaGVjayBvd24gcHJvdmlkZWQgY3JlZGVudGlhbHNcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5leGNsdWRlZENyZWRlbnRpYWxLZXlzLmluY2x1ZGVzKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbY3VycmVudENyZWRlbnRpYWxLZXksIGNyZWRlbnRpYWxdIG9mIE9iamVjdC5lbnRyaWVzKGNyZWRlbnRpYWxPYmplY3QuY3JlZGVudGlhbHNbcHJvdmlkZXJdLmNyZWRlbnRpYWxzKSkge1xuICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsc0Ftb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc3N1ZXJEaWRDb250cmFjdEFkZHJlc3MgPSAoY3JlZGVudGlhbCBhcyBJQ3JlZGVudGlhbCkuaXNzdWVyLmlkLnNwbGl0KFwiOlwiKVsyXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvdW5kVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGludmFsaWRLZXlQcm92aWRlciA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnZhbGlkS2V5UHJvdmlkZXJBbGxvd2VkS2V5cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGxldCBub1RydXN0ZWRDbGFpbUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBkaWQgb2YgdHJ1c3RlZERpZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kRW50cnkgPSBjaGVja2VkRGlkLmZpbmQoeCA9PiB4Lmlzc3VlckRpZENvbnRyYWN0QWRkcmVzcyA9PT0gaXNzdWVyRGlkQ29udHJhY3RBZGRyZXNzICYmIHguZGlkID09PSBkaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNsYWltID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZEVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhaW0gPSBmb3VuZEVudHJ5LmNsYWltO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFpbSA9IGF3YWl0IHRoaXMuZ2V0Q2xhaW1zKGlzc3VlckRpZENvbnRyYWN0QWRkcmVzcywgZGlkLCB3ZWIzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkRGlkLnB1c2goeyBpc3N1ZXJEaWRDb250cmFjdEFkZHJlc3MsIGRpZCwgY2xhaW0gfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGFpbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vVHJ1c3RlZENsYWltRm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGFpbUV4cGlyYXRpb25EYXRlID0gbmV3IERhdGUoY2xhaW0uZXhwaXJhdGlvbkRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGFpbUV4cGlyYXRpb25EYXRlID4gbmV3IERhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGFpbUFsbG93ZWRDcmVkZW50aWFsS2V5cyA9IGNsYWltLmtleXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRLZXlQcm92aWRlckFsbG93ZWRLZXlzID0gY2xhaW1BbGxvd2VkQ3JlZGVudGlhbEtleXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyQ3JlZGVudGlhbEtleSA9IGAkeyhjcmVkZW50aWFsIGFzIElDcmVkZW50aWFsKS5wcm92aWRlcn1fJHtjdXJyZW50Q3JlZGVudGlhbEtleX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNsYWltQWxsb3dlZENyZWRlbnRpYWxLZXlzLmluY2x1ZGVzKHByb3ZpZGVyQ3JlZGVudGlhbEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRLZXlQcm92aWRlciA9IHByb3ZpZGVyQ3JlZGVudGlhbEtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW52YWxpZEtleVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZENyZWRlbnRpYWxzQW1vdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZFZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZENyZWRlbnRpYWxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IDE0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJDbGFpbSBleHBpcmVkLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobm9UcnVzdGVkQ2xhaW1Gb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZENyZWRlbnRpYWxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IDEzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBObyBjbGFpbXMgZm91bmQgdG8gY2hlY2suIENoZWNrZWQgZGlkcyAke3RydXN0ZWREaWRzfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGludmFsaWRLZXlQcm92aWRlciAmJiAhZm91bmRWYWxpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZENyZWRlbnRpYWxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IDEyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBUcmllZCB0byB2YWxpZGF0ZSBhdHRyaWJ1dGUgJHtpbnZhbGlkS2V5UHJvdmlkZXJ9IGJ1dCBwcm92aWRlciB3YXMgbm90IGFsbG93ZWQgdG8gaXNzdWUuIEFsbG93ZWQgYXR0cmlidXRlczogJHtpbnZhbGlkS2V5UHJvdmlkZXJBbGxvd2VkS2V5cy5qb2luKFwiLCBcIil9YFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWxpZENyZWRlbnRpYWxzQW1vdW50ID09PSBjcmVkZW50aWFsc0Ftb3VudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzIGFzIGFueSxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IDAsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiVmFsaWQgY3JlZGVudGlhbFwiLFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRDaGVja1Jlc3VsdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAxLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkludmFsaWQgY3JlZGVudGlhbHNcIixcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZENyZWRlbnRpYWxzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29kZTogMTAsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJObyB0cnVzdGVkIHBhcnRpZXMgdG8gY2hlY2suXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgYXN5bmMgY2hlY2tDcmVkZW50aWFscyhjcmVkZW50aWFsT2JqZWN0OiBJQ3JlZGVudGlhbE9iamVjdCwgd2ViM1VybDogc3RyaW5nLCBjaGVja1VzZXJOb25jZTogYm9vbGVhbiwgbGl2ZW5lc3NDaGVja1JlcXVpcmVkPzogYm9vbGVhbik6IFByb21pc2U8SVZhbGlkYXRlZENyZWRlbnRpYWxzPiB7XG4gICAgICAgIC8vIElmIHRoZSBvYmplY3QgaXMgc3RyaW5naWZpZWRcbiAgICAgICAgaWYgKHR5cGVvZiBjcmVkZW50aWFsT2JqZWN0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjcmVkZW50aWFsT2JqZWN0ID0gSlNPTi5wYXJzZShjcmVkZW50aWFsT2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBjcmVkZW50aWFsT2JqZWN0ID0gdGhpcy5yZU9yZGVyQ3JlZGVudGlhbE9iamVjdChjcmVkZW50aWFsT2JqZWN0KTtcbiAgICAgICAgY29uc3Qgd2ViM05vZGUgPSBuZXcgV2ViMyh3ZWIzVXJsKTtcbiAgICAgICAgY29uc3QgY2hlY2tlZERpZDogSUNoZWNrZWREaWRbXSA9IFtdO1xuICAgICAgICBsZXQgdmFsaWRDcmVkZW50aWFsc0Ftb3VudCA9IDA7XG4gICAgICAgIGxldCBjcmVkZW50aWFsc0Ftb3VudCA9IDA7XG4gICAgICAgIGNvbnN0IGludmFsaWRDcmVkZW50aWFscyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtwcm92aWRlcixdIG9mIE9iamVjdC5lbnRyaWVzKGNyZWRlbnRpYWxPYmplY3QuY3JlZGVudGlhbHMpKSB7XG4gICAgICAgICAgICAvLyBXZSBkb24ndCBjaGVjayBPV04gcHJvdmlkZXJzXG4gICAgICAgICAgICBpZiAodGhpcy5leGNsdWRlZENyZWRlbnRpYWxLZXlzLmluY2x1ZGVzKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIHVzZXIgY3JlZGVudGlhbHMgKGZvciBlYWNoIHByb3ZpZGVyKTogUmVjb25zdHJ1Y3QgaXQgc28gd2Ugb25seSBoYXZlIHRoZSBjcmVkZW50aWFsT2JqZWN0IG9mIFxuICAgICAgICAgICAgLy8gdGhhdCBzcGVjaWZpYyBwcm92aWRlciAod2hpY2ggd2UgZ2VuZXJhdGVkIHRoZSBzaWduYXR1cmUgb3ZlcilcbiAgICAgICAgICAgIGNvbnN0IGNyZWRlbnRpYWxPYmplY3RXaXRob3V0UHJvb2ZTaWduYXR1cmU6IElDcmVkZW50aWFsT2JqZWN0ID0ge1xuICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIFtwcm92aWRlcl06IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY3JlZGVudGlhbE9iamVjdC5jcmVkZW50aWFsc1twcm92aWRlcl0pKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZSBjcmVkZW50aWFsT2JqZWN0V2l0aG91dFByb29mU2lnbmF0dXJlLmNyZWRlbnRpYWxzW3Byb3ZpZGVyXS5wcm9vZi5zaWduYXR1cmU7XG4gICAgICAgICAgICBjb25zdCB1c2VyUmVjb3ZlcmVkQWRkcmVzcyA9IHdlYjNOb2RlLmV0aC5hY2NvdW50cy5yZWNvdmVyKEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWxPYmplY3RXaXRob3V0UHJvb2ZTaWduYXR1cmUpLCBjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzW3Byb3ZpZGVyXS5wcm9vZi5zaWduYXR1cmUpO1xuICAgICAgICAgICAgY29uc3QgY29ycmVjdFVzZXJTaWduYXR1cmUgPSB0aGlzLnVzZXJDcmVkZW50aWFsU2lnbmF0dXJlV3JvbmcoY3JlZGVudGlhbE9iamVjdC5jcmVkZW50aWFsc1twcm92aWRlcl0ucHJvb2YuaG9sZGVyLCB1c2VyUmVjb3ZlcmVkQWRkcmVzcyk7XG4gICAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgdXNlciAoSWRlbnRpdHkgQXBwKSBkaWQgc2lnbiBpdCBjb3JyZWN0OyBvdGhlcndoaXNlIHNraXAgdGhpcyBwcm92aWRlclxuICAgICAgICAgICAgaWYgKGNvcnJlY3RVc2VyU2lnbmF0dXJlKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbLCBjcmVkZW50aWFsXSBvZiBPYmplY3QuZW50cmllcyhjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzW3Byb3ZpZGVyXS5jcmVkZW50aWFscykpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHNBbW91bnQrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY3JlZGVudGlhbCBhcyBJQ3JlZGVudGlhbCkudmVyc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZENyZWRlbnRpYWxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogOCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkluY29ycmVjdCBjcmVkZW50aWFsIHZlcnNpb24uIFJlbmV3IHlvdXIgY3JlZGVudGlhbHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjcmVkZW50aWFsRXhwaXJhdGlvbkRhdGUgPSBuZXcgRGF0ZSgoY3JlZGVudGlhbCBhcyBJQ3JlZGVudGlhbCkuZXhwaXJhdGlvbkRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID4gY3JlZGVudGlhbEV4cGlyYXRpb25EYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQ3JlZGVudGlhbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiA3LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBZb3VyIGNyZWRlbnRpYWwgZXhwaXJlZCBvbiAke2NyZWRlbnRpYWxFeHBpcmF0aW9uRGF0ZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRoZW4gPSBuZXcgRGF0ZShjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzW3Byb3ZpZGVyXS5wcm9vZi5ub25jZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1pbnV0ZXNEaWZmZXJlbmNlID0gdGhpcy5jYWxjdWxhdGVNaW51dGVzRGlmZmVyZW5jZShub3csIHRoZW4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWludXRlc0RpZmZlcmVuY2UgPiA1ICYmIGNoZWNrVXNlck5vbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQ3JlZGVudGlhbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiTm9uY2UgdG9vIG9sZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBzZW50IGNyZWRlbnRpYWxzIHdlcmUgcHJvdmlkZWQgYnkgdGhlIGRpZCBvZiB0aGUgY3JlZGVudGlhbCAoY2hlY2sgdGhlIHNpZ25hdHVyZSBvZiBlYWNoIGNyZWRlbnRpYWwpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvcnJlY3RJc3N1ZXJTaWduYXR1cmUgPSB0aGlzLmlzc3VlckNyZWRlbnRpYWxTaWduYXR1cmVXcm9uZyhjcmVkZW50aWFsLCB3ZWIzTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb3JyZWN0SXNzdWVyU2lnbmF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBldmVyeSBjcmVkZW50aWFsIERJRCBjb250cmFjdCBpZiB0aGUgaG9sZGVyIGJlbG9uZ3MgdG8gdGhhdCBESURcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzc3VlckhvbGRlcktleSA9IChjcmVkZW50aWFsIGFzIElDcmVkZW50aWFsKS5wcm9vZi5ob2xkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc3N1ZXJEaWRDb250cmFjdEFkZHJlc3MgPSAoY3JlZGVudGlhbCBhcyBJQ3JlZGVudGlhbCkuaXNzdWVyLmlkLnNwbGl0KFwiOlwiKVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzc3VlckNvcnJlY3REaWQgPSBhd2FpdCB0aGlzLmRpZENvbnRyYWN0S2V5V3Jvbmcod2ViM05vZGUsIHdlYjNVcmwsIGNsYWltSG9sZGVyQWJpLCBpc3N1ZXJIb2xkZXJLZXksIGlzc3VlckRpZENvbnRyYWN0QWRkcmVzcywgY2hlY2tlZERpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzdWVyQ29ycmVjdERpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZXJIb2xkZXJLZXkgPSBjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzW3Byb3ZpZGVyXS5wcm9vZi5ob2xkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlckRpZENvbnRyYWN0QWRkcmVzcyA9IChjcmVkZW50aWFsIGFzIElDcmVkZW50aWFsKS5pZC5zcGxpdChcIjpcIilbMl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXNlckNvcnJlY3REaWQgPSBhd2FpdCB0aGlzLmRpZENvbnRyYWN0S2V5V3Jvbmcod2ViM05vZGUsIHdlYjNVcmwsIGNsYWltSG9sZGVyQWJpLCB1c2VySG9sZGVyS2V5LCB1c2VyRGlkQ29udHJhY3RBZGRyZXNzLCBjaGVja2VkRGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlckNvcnJlY3REaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaXZlbmVzc0NoZWNrUmVxdWlyZWQgfHwgKChjcmVkZW50aWFsIGFzIElDcmVkZW50aWFsKS52ZXJpZmllZCA9PT0gdW5kZWZpbmVkIHx8IChjcmVkZW50aWFsIGFzIElDcmVkZW50aWFsKS52ZXJpZmllZCA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkQ3JlZGVudGlhbHNBbW91bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRDcmVkZW50aWFscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IDE1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiTGl2ZW5lc3MgY2hlY2sgcmVxdWlyZWQgYnV0IGNyZWRlbnRpYWwgbm90IHZlcmlmaWVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZENyZWRlbnRpYWxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IDYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlVzZXIgZGlkIGluY29ycmVjdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52YWxpZENyZWRlbnRpYWxzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIklzc3VlciBkaWQgaW5jb3JyZWN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRDcmVkZW50aWFscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJJc3N1ZXIgc2lnbmF0dXJlIGluY29ycmVjdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnZhbGlkQ3JlZGVudGlhbHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWw6IGNyZWRlbnRpYWxPYmplY3QuY3JlZGVudGlhbHNbcHJvdmlkZXJdLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiAzLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlVzZXIgc2lnbmF0dXJlIGluY29ycmVjdFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2hlbiB0aGUgdXNlciBzaWduYXR1cmUgaXMgaW5jb3JyZWN0IHdlIGRvbid0IHZhbGlkYXRlIGFueSBtb3JlIHdoZW4gdGhlcmUgaXMgMSBwcm92aWRlciBzbyBjcmVkZW50aWFsc2Ftb3VudCBzaG91bGQgYmUgbW9yZSB0aGFuIDBcbiAgICAgICAgaWYgKGNyZWRlbnRpYWxzQW1vdW50ID4gMCAmJiB2YWxpZENyZWRlbnRpYWxzQW1vdW50ID09PSBjcmVkZW50aWFsc0Ftb3VudCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogY3JlZGVudGlhbE9iamVjdC5jcmVkZW50aWFscyBhcyBhbnksXG4gICAgICAgICAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgY29kZTogMCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlZhbGlkIGNyZWRlbnRpYWxcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgY29kZTogMSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkludmFsaWQgY3JlZGVudGlhbFwiLFxuICAgICAgICAgICAgICAgIGludmFsaWRDcmVkZW50aWFsc1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICB1c2VyQ3JlZGVudGlhbFNpZ25hdHVyZVdyb25nKGhvbGRlcktleTogYW55LCByZWNvdmVyZWRBZGRyZXNzOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKGhvbGRlcktleSAhPT0gcmVjb3ZlcmVkQWRkcmVzcykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgVXNlciBzaWduYXR1cmUgb2YgY3JlZGVudGlhbCAke2hvbGRlcktleX0gZG9lcyBub3QgbWF0Y2ggcmVjb3ZlcmVkQWRkcmVzcyAke3JlY292ZXJlZEFkZHJlc3N9YCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgICBpc3N1ZXJDcmVkZW50aWFsU2lnbmF0dXJlV3JvbmcoY3JlZGVudGlhbDogYW55LCB3ZWIzTm9kZTogYW55KSB7XG4gICAgICAgIGNvbnN0IGlzc3VlclNpZ25hdHVyZSA9IGNyZWRlbnRpYWwucHJvb2Yuc2lnbmF0dXJlO1xuICAgICAgICBjb25zdCBjcmVkZW50aWFsSXNzdWVyS2V5ID0gY3JlZGVudGlhbC5wcm9vZi5ob2xkZXI7XG4gICAgICAgIGNvbnN0IGNyZWRlbnRpYWxXaXRob3V0SXNzdWVyUHJvb2YgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNyZWRlbnRpYWwpKTtcbiAgICAgICAgZGVsZXRlIGNyZWRlbnRpYWxXaXRob3V0SXNzdWVyUHJvb2YucHJvb2Yuc2lnbmF0dXJlO1xuICAgICAgICBjb25zdCByZWNvdmVyZWRBZGRyZXNzID0gd2ViM05vZGUuZXRoLmFjY291bnRzLnJlY292ZXIoSlNPTi5zdHJpbmdpZnkoY3JlZGVudGlhbFdpdGhvdXRJc3N1ZXJQcm9vZiksIGlzc3VlclNpZ25hdHVyZSk7XG4gICAgICAgIGlmIChjcmVkZW50aWFsSXNzdWVyS2V5ICE9PSByZWNvdmVyZWRBZGRyZXNzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBJc3N1ZXIgc2lnbmF0dXJlIG9mIGNyZWRlbnRpYWwgJHtjcmVkZW50aWFsSXNzdWVyS2V5fSBkb2VzIG5vdCBtYXRjaCByZWNvdmVyZWRBZGRyZXNzICR7cmVjb3ZlcmVkQWRkcmVzc31gKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBhc3luYyBkaWRDb250cmFjdEtleVdyb25nKHdlYjNOb2RlOiBhbnksIHdlYjNVcmw6IHN0cmluZywgY2xhaW1Ib2xkZXJBYmk6IGFueSwgaG9sZGVyS2V5OiBzdHJpbmcsIGRpZEFkZHJlc3M6IHN0cmluZywgY2hlY2tlZERpZDogSUNoZWNrZWREaWRbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCBmb3VuZEVudHJ5ID0gY2hlY2tlZERpZC5maW5kKHggPT4geC5kaWQgPT0gZGlkQWRkcmVzcyAmJiB4LmhvbGRlcktleSA9PT0gaG9sZGVyS2V5KTtcbiAgICAgICAgaWYgKGZvdW5kRW50cnkpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3VuZEVudHJ5LnJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGtub3duQWRkcmVzc2VzID0gW107XG5cbiAgICAgICAgICAgIGlmIChkaWRBZGRyZXNzID09PSBob2xkZXJLZXkpIHtcbiAgICAgICAgICAgICAgICBjaGVja2VkRGlkLnB1c2goeyBkaWQ6IGRpZEFkZHJlc3MsIGhvbGRlcktleSwgcmVzdWx0OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaGEzS2V5ID0gdGhpcy5nZXRTaGEzS2V5KGhvbGRlcktleSwgd2ViM05vZGUpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdlYjMgPSBuZXcgV2ViMyh3ZWIzVXJsKTtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlNYW5hZ2VyQ29udHJhY3QgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoXG4gICAgICAgICAgICAgICAgICAgIGNsYWltSG9sZGVyQWJpLFxuICAgICAgICAgICAgICAgICAgICBkaWRBZGRyZXNzXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMua25vd25BZGRyZXNzZXNDb250YWlucyhrbm93bkFkZHJlc3Nlcywgc2hhM0tleSwgZGlkQWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5UHVycG9zZSA9IHBhcnNlSW50KGF3YWl0IHRoaXMuZ2V0S2V5UHVycG9zZShrZXlNYW5hZ2VyQ29udHJhY3QsIHNoYTNLZXkpLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGtleVB1cnBvc2UgMSA9IE93bmVyXG4gICAgICAgICAgICAgICAgICAgIC8vIGtleVB1cnBvc2UgMiA9IEFjdGlvbiBLZXlcbiAgICAgICAgICAgICAgICAgICAgLy8ga2V5UHVycG9zZSAzID0gQ2xhaW0gU2lnbmVyIEtleSBcbiAgICAgICAgICAgICAgICAgICAgLy8ga2V5UHVycG9zZSA0ID0gRW5jcnlwdGlvbiBrZXlcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleVB1cnBvc2UgPT09IDAgfHwga2V5UHVycG9zZSA+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWREaWQucHVzaCh7IGRpZDogZGlkQWRkcmVzcywgaG9sZGVyS2V5LCByZXN1bHQ6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGtub3duQWRkcmVzc2VzLnB1c2goeyBzaGEzS2V5LCBkaWRBZGRyZXNzIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGVja2VkRGlkLnB1c2goeyBkaWQ6IGRpZEFkZHJlc3MsIGhvbGRlcktleSwgcmVzdWx0OiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAga25vd25BZGRyZXNzZXNDb250YWlucyhsaXN0OiBhbnlbXSwgc2hhM0tleTogc3RyaW5nLCBkaWRDb250cmFjdEFkZHJlc3M6IHN0cmluZykge1xuICAgICAgICBmb3IgKGNvbnN0IGxpc3RJdGVtIG9mIGxpc3QpIHtcbiAgICAgICAgICAgIGlmIChsaXN0SXRlbS5zaGEzS2V5ID09PSBzaGEzS2V5ICYmIGxpc3RJdGVtLmRpZENvbnRyYWN0QWRkcmVzcyA9PT0gZGlkQ29udHJhY3RBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRTaGEzS2V5KGtleTogc3RyaW5nLCB3ZWIzOiBXZWIzKSB7XG4gICAgICAgIHJldHVybiB3ZWIzLnV0aWxzLmtlY2NhazI1NihrZXkpO1xuICAgIH1cblxuICAgIGFzeW5jIGdldEtleVB1cnBvc2Uoa2V5TWFuYWdlckNvbnRyYWN0OiBhbnksIGtleTogc3RyaW5nKTogUHJvbWlzZTxFRElEQWNjZXNzTGV2ZWw+IHtcbiAgICAgICAgLy8gR2V0IEV2ZW50c1xuICAgICAgICBpZiAoa2V5TWFuYWdlckNvbnRyYWN0Lm9wdGlvbnMuYWRkcmVzcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBrZXlNYW5hZ2VyQ29udHJhY3QubWV0aG9kcy5nZXRLZXlQdXJwb3NlKGtleSkuY2FsbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlTWludXRlc0RpZmZlcmVuY2UoZHQyOiBEYXRlLCBkdDE6IERhdGUpOiBudW1iZXIge1xuICAgICAgICBsZXQgZGlmZiA9IChkdDIuZ2V0VGltZSgpIC0gZHQxLmdldFRpbWUoKSkgLyAxMDAwO1xuICAgICAgICBkaWZmIC89IDYwO1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMoTWF0aC5yb3VuZChkaWZmKSk7XG4gICAgfVxuXG4gICAgcmVPcmRlckNyZWRlbnRpYWxPYmplY3QoY3JlZGVudGlhbE9iamVjdDogSUNyZWRlbnRpYWxPYmplY3QpOiBJQ3JlZGVudGlhbE9iamVjdCB7XG4gICAgICAgIC8vIExvb3AgZXZlcnkgcHJvdmlkZXJcbiAgICAgICAgZm9yIChjb25zdCBwcm92aWRlciBvZiBPYmplY3Qua2V5cyhjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzKSkge1xuICAgICAgICAgICAgY29uc3QgY3JlZGVudGlhbEtleXMgPSBbXTtcbiAgICAgICAgICAgIC8vIEdldCBhbGwgY3JlZGVudGlhbCBrZXlzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNyZWRlbnRpYWxLZXkgb2YgT2JqZWN0LmtleXMoY3JlZGVudGlhbE9iamVjdC5jcmVkZW50aWFsc1twcm92aWRlcl0uY3JlZGVudGlhbHMpKSB7XG4gICAgICAgICAgICAgICAgY3JlZGVudGlhbEtleXMucHVzaChjcmVkZW50aWFsS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNyZWRlbnRpYWxLZXlzLnNvcnQoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlT3JkZXJlZENyZWRlbnRpYWxzID0ge307XG4gICAgICAgICAgICAvLyBMb29wIHRoZSBjcmVkZW50aWFsIGtleXMgb25lIGJ5IG9uZSBhbmQgcmUgb3JkZXIgdGhlIGNyZWRlbnRpYWxzIHNvIGl0cyBhbHBoYWJldGljYWxcbiAgICAgICAgICAgIGZvciAoY29uc3QgY3JlZGVudGlhbEtleSBvZiBjcmVkZW50aWFsS2V5cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlT3JkZXJlZENyZWRlbnRpYWwgPSB0aGlzLnJlT3JkZXJDcmVkZW50aWFsKGNyZWRlbnRpYWxPYmplY3QuY3JlZGVudGlhbHNbcHJvdmlkZXJdLmNyZWRlbnRpYWxzW2NyZWRlbnRpYWxLZXldIGFzIElDcmVkZW50aWFsKTtcbiAgICAgICAgICAgICAgICByZU9yZGVyZWRDcmVkZW50aWFsc1tjcmVkZW50aWFsS2V5XSA9IHJlT3JkZXJlZENyZWRlbnRpYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzW3Byb3ZpZGVyXS5wcm9vZiA9IHRoaXMucmVPcmRlckNyZWRlbnRpYWxQcm9vZihjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzW3Byb3ZpZGVyXS5wcm9vZik7XG4gICAgICAgICAgICBjcmVkZW50aWFsT2JqZWN0LmNyZWRlbnRpYWxzW3Byb3ZpZGVyXSA9IHtcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogcmVPcmRlcmVkQ3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgcHJvb2Y6IGNyZWRlbnRpYWxPYmplY3QuY3JlZGVudGlhbHNbcHJvdmlkZXJdLnByb29mXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWRlbnRpYWxPYmplY3Q7XG4gICAgfVxuXG4gICAgcmVPcmRlckNyZWRlbnRpYWwoY3JlZGVudGlhbDogSUNyZWRlbnRpYWwpOiBJQ3JlZGVudGlhbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRPYmplY3RBbHBoYWJldGljYWxseShjcmVkZW50aWFsKTtcbiAgICB9XG5cbiAgICBzb3J0T2JqZWN0QWxwaGFiZXRpY2FsbHkob2JqZWN0OiBhbnkpOiBhbnkge1xuICAgICAgICBjb25zdCBzb3J0ZWRPYmogPSB7fTtcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgICAgICAga2V5cy5zb3J0KChrZXkxLCBrZXkyKSA9PiB7XG4gICAgICAgICAgICBrZXkxID0ga2V5MS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAga2V5MiA9IGtleTIudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChrZXkxIDwga2V5Mikge1xuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChrZXkxID4ga2V5Mikge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgaXQncyB0aGUgc2FtZVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAoY29uc3QgaW5kZXggaW4ga2V5cykge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpbmRleF07XG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIG5lc3RlZCBvYmplY3RzLCB3ZSBuZWVkIHRvIGRpZyBkZWVwZXJcbiAgICAgICAgICAgIGlmIChvYmplY3Rba2V5XSAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0W2tleV0gPT0gXCJvYmplY3RcIiAmJiAhKG9iamVjdFtrZXldIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgc29ydGVkT2JqW2tleV0gPSB0aGlzLnNvcnRPYmplY3RBbHBoYWJldGljYWxseShvYmplY3Rba2V5XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvcnRlZE9ialtrZXldID0gb2JqZWN0W2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc29ydGVkT2JqO1xuICAgIH1cblxuICAgIHJlT3JkZXJDcmVkZW50aWFsUHJvb2YocHJvb2Y6IElQcm9vZik6IElQcm9vZiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBob2xkZXI6IHByb29mLmhvbGRlcixcbiAgICAgICAgICAgIG5vbmNlOiBwcm9vZi5ub25jZSxcbiAgICAgICAgICAgIHNpZ25hdHVyZTogcHJvb2Yuc2lnbmF0dXJlLFxuICAgICAgICAgICAgdHlwZTogcHJvb2YudHlwZVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gc2lnbiAoY2FuIGJlIGFueXRoaW5nLCBvYmplY3QsIHN0cmluZywgZXRjLikgXG4gICAgICogQHBhcmFtIHByaXZhdGVLZXkgLSBUaGUgcHJpdmF0ZSBrZXkgdG8gc2lnbiB3aXRoXG4gICAgICogQHJldHVybnMgXG4gICAgICovXG4gICAgZ2V0U2lnbmF0dXJlKG1lc3NhZ2U6IGFueSwgcHJpdmF0ZUtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBpcyBzdHJpbmdpZmllZFxuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBKU09OLnBhcnNlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UgPSB0aGlzLnJlT3JkZXJPYmplY3QobWVzc2FnZSk7XG4gICAgICAgIGNvbnN0IHdlYjMgPSBuZXcgV2ViMygpO1xuICAgICAgICByZXR1cm4gd2ViMy5ldGguYWNjb3VudHMuc2lnbihKU09OLnN0cmluZ2lmeShtZXNzYWdlKSwgcHJpdmF0ZUtleSkuc2lnbmF0dXJlXG4gICAgfVxuXG4gICAgcmVPcmRlck9iamVjdChjb250ZW50VG9TaWduOiBJU2lnbmVkQ29udGVudCk6IElTaWduZWRDb250ZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc29ydE9iamVjdEFscGhhYmV0aWNhbGx5KGNvbnRlbnRUb1NpZ24pO1xuICAgIH1cblxuICAgIHNpZ25DcmVkZW50aWFsT2JqZWN0KGNyZWRlbnRpYWxPYmplY3Q6IElDcmVkZW50aWFsT2JqZWN0LCBwcml2YXRlS2V5OiBzdHJpbmcpIHtcbiAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBpcyBzdHJpbmdpZmllZFxuICAgICAgICBpZiAodHlwZW9mIGNyZWRlbnRpYWxPYmplY3QgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNyZWRlbnRpYWxPYmplY3QgPSBKU09OLnBhcnNlKGNyZWRlbnRpYWxPYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIGNyZWRlbnRpYWxPYmplY3QgPSB0aGlzLnJlT3JkZXJDcmVkZW50aWFsT2JqZWN0KGNyZWRlbnRpYWxPYmplY3QpO1xuICAgICAgICBjb25zdCB3ZWIzID0gbmV3IFdlYjMoKTtcbiAgICAgICAgcmV0dXJuIHdlYjMuZXRoLmFjY291bnRzLnNpZ24oSlNPTi5zdHJpbmdpZnkoY3JlZGVudGlhbE9iamVjdCksIHByaXZhdGVLZXkpLnNpZ25hdHVyZVxuICAgIH1cblxuICAgIGFzeW5jIGdldENsYWltcyhjbGFpbVR5cGU6IG51bWJlciB8IHN0cmluZywgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsIHdlYjM6IFdlYjMpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCBjb250cmFjdCA9IG5ldyB3ZWIzLmV0aC5Db250cmFjdChjbGFpbUhvbGRlckFiaSwgY29udHJhY3RBZGRyZXNzKTtcbiAgICAgICAgY29uc3QgY2xhaW1JZHMgPSBhd2FpdCBjb250cmFjdC5tZXRob2RzLmdldENsYWltSWRzQnlUeXBlKGNsYWltVHlwZSkuY2FsbCgpO1xuICAgICAgICBpZiAoY2xhaW1JZHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgYWxsIHJhdyBjbGFpbXNcbiAgICAgICAgICAgICAgICBjb25zdCByYXdDbGFpbXMgPSBhd2FpdCBjb250cmFjdC5tZXRob2RzLmdldENsYWltKGNsYWltSWRzW2NsYWltSWRzLmxlbmd0aCAtIDFdKS5jYWxsKCk7XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGRhdGFcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRDbGFpbXMgPSBKU09OLnBhcnNlKHdlYjMudXRpbHMudG9Bc2NpaShyYXdDbGFpbXMuZGF0YSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocGFyc2VkQ2xhaW1zKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBnZXRDbGFpbShjbGFpbVR5cGU6IEVDbGFpbVR5cGUsIGNvbnRyYWN0QWRkcmVzczogc3RyaW5nLCB3ZWIzVXJsOiBzdHJpbmcsIGNsYWltSG9sZGVyQWJpOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgICAgICBjb25zdCB3ZWIzID0gbmV3IFdlYjMod2ViM1VybCk7XG4gICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KGNsYWltSG9sZGVyQWJpLCBjb250cmFjdEFkZHJlc3MpO1xuICAgICAgICBjb25zdCBjbGFpbUlkcyA9IGF3YWl0IGNvbnRyYWN0Lm1ldGhvZHMuZ2V0Q2xhaW1JZHNCeVR5cGUoY2xhaW1UeXBlKS5jYWxsKCk7XG4gICAgICAgIGlmIChjbGFpbUlkcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhd0NsYWltcyA9IGF3YWl0IGNvbnRyYWN0Lm1ldGhvZHMuZ2V0Q2xhaW0oY2xhaW1JZHNbY2xhaW1JZHMubGVuZ3RoIC0gMV0pLmNhbGwoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gd2ViMy51dGlscy50b0FzY2lpKHJhd0NsYWltcy5kYXRhKVxuXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRDbGFpbXMgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHBhcnNlZENsYWltcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3I6IFwiLCBlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlcXVlc3RlZENyZWRlbnRpYWxzQ29ycmVjdChjcmVkZW50aWFsczogSUNyZWRlbnRpYWxPYmplY3QsIHJlcXVlc3RlZENyZWRlbnRpYWxzOiBJUmVxdWVzdGVkQ3JlZGVudGlhbHMpOiBJUmVxdWVzdGVkQ3JlZGVudGlhbHNDaGVja1Jlc3VsdCB7XG4gICAgICAgIGNvbnN0IGNoZWNrUmVzdWx0OiBJUmVxdWVzdGVkQ3JlZGVudGlhbHNDaGVja1Jlc3VsdCA9IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBtaXNzaW5nS2V5czogW11cbiAgICAgICAgfVxuICAgICAgICAvLyBMb29wIGFsbCByZXF1ZXN0ZWQgY3JlZGVudGlhbHNcbiAgICAgICAgZm9yIChjb25zdCByZXF1ZXN0ZWRDcmVkZW50aWFsIG9mIHJlcXVlc3RlZENyZWRlbnRpYWxzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICBpZiAocmVxdWVzdGVkQ3JlZGVudGlhbC5yZXF1aXJlZCAmJiByZXF1ZXN0ZWRDcmVkZW50aWFsLnByb3ZpZGVyID09PSBcIkFERElUSU9OQUxfSU5GT1wiKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzKGNyZWRlbnRpYWxzLmNyZWRlbnRpYWxzW3JlcXVlc3RlZENyZWRlbnRpYWwucHJvdmlkZXJdLmNyZWRlbnRpYWxzKTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBvYmplY3RLZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFkZGl0aW9uYWxJbmZvID0gY3JlZGVudGlhbHMuY3JlZGVudGlhbHNbcmVxdWVzdGVkQ3JlZGVudGlhbC5wcm92aWRlcl0uY3JlZGVudGlhbHNba2V5XSBhcyBJUmVxdWVzdGVkQ3JlZGVudGlhbEtleTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFkZGl0aW9uYWxJbmZvLnJlcXVpcmVkICYmIChhZGRpdGlvbmFsSW5mby5rZXkgYXMgSUFkZGl0aW9uYWxJbmZvW10pLmZpbmQoeCA9PiAheC5hbnN3ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Jlc3VsdC5zdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Jlc3VsdC5taXNzaW5nS2V5cy5wdXNoKGFkZGl0aW9uYWxJbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgb25seSByZXF1aXJlZCBrZXlzXG4gICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RlZENyZWRlbnRpYWwucmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlcXVlc3RlZENyZWRlbnRpYWwucHJvdmlkZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0ZWRDcmVkZW50aWFsLnByb3ZpZGVyID0gW3JlcXVlc3RlZENyZWRlbnRpYWwucHJvdmlkZXJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHJlcXVlc3RlZENyZWRlbnRpYWwucHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVkZW50aWFscy5jcmVkZW50aWFsc1twcm92aWRlcl0gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFscy5jcmVkZW50aWFsc1twcm92aWRlcl0uY3JlZGVudGlhbHMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFscy5jcmVkZW50aWFsc1twcm92aWRlcl0uY3JlZGVudGlhbHNbcmVxdWVzdGVkQ3JlZGVudGlhbC5rZXkgYXMgc3RyaW5nXVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWxsIGdvb2QsIGZvdW5kIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Jlc3VsdC5zdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1Jlc3VsdC5taXNzaW5nS2V5cy5wdXNoKHJlcXVlc3RlZENyZWRlbnRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGVja1Jlc3VsdDtcbiAgICB9XG5cbiAgICByZWNvdmVyQWRkcmVzc0Zyb21TaWduYXR1cmUobWVzc2FnZTogc3RyaW5nLCBzaWduYXR1cmU6IHN0cmluZywgc29ydEFscGhhYmV0aWNhbGx5PzogYm9vbGVhbikge1xuICAgICAgICBjb25zdCB3ZWIzID0gbmV3IFdlYjMoKTtcbiAgICAgICAgaWYgKHNvcnRBbHBoYWJldGljYWxseSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgbWVzc2FnZSA9IHRoaXMuc29ydE9iamVjdEFscGhhYmV0aWNhbGx5KEpTT04ucGFyc2UobWVzc2FnZSkpO1xuICAgICAgICAgICAgcmV0dXJuIHdlYjMuZXRoLmFjY291bnRzLnJlY292ZXIoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSksIHNpZ25hdHVyZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gd2ViMy5ldGguYWNjb3VudHMucmVjb3ZlcihtZXNzYWdlLCBzaWduYXR1cmUpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIHNpZ25SZXF1ZXN0ZWRDcmVkZW50aWFscyhyZXF1ZXN0ZWRDcmVkZW50aWFsczogSVJlcXVlc3RlZENyZWRlbnRpYWxzLCBwdWJsaWNLZXk6IHN0cmluZywgcHJpdmF0ZUtleTogc3RyaW5nKTogSVJlcXVlc3RlZENyZWRlbnRpYWxzIHtcbiAgICAgICAgcmVxdWVzdGVkQ3JlZGVudGlhbHMucHJvb2YgPSB7XG4gICAgICAgICAgICBob2xkZXI6IHB1YmxpY0tleSxcbiAgICAgICAgICAgIG5vbmNlOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgdHlwZTogRVNpZ25hdHVyZVR5cGVzLkVDRFNBXG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gdGhpcy5nZXRTaWduYXR1cmUocmVxdWVzdGVkQ3JlZGVudGlhbHMsIHByaXZhdGVLZXkpO1xuICAgICAgICByZXF1ZXN0ZWRDcmVkZW50aWFscy5wcm9vZi5zaWduYXR1cmUgPSBzaWduYXR1cmU7XG4gICAgICAgIHJldHVybiByZXF1ZXN0ZWRDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICBhc3luYyBpc1ZhbGlkUmVxdWVzdGVkQ3JlZGVudGlhbHMocmVxdWVzdGVkQ3JlZGVudGlhbHM6IElSZXF1ZXN0ZWRDcmVkZW50aWFscywgd2ViM1VybDogc3RyaW5nLCBjbGFpbWhvbGRlckFiaTogYW55KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmIChyZXF1ZXN0ZWRDcmVkZW50aWFscz8ucHJvb2Y/LnNpZ25hdHVyZSkge1xuICAgICAgICAgICAgLy8gTWFrZSBhIGNvcHkgc2luY2Ugd2UgZGVsZXRlIHRoZSBzaWduYXR1cmUgb2YgdGhlIG9iamVjdDsgb3RoZXJ3aGlzZSB3ZSBjYW4gb25seSBjaGVjayBpdCBvbmNlIGFuZCBpdCdzIGdvbmUgZm9yZXZlclxuICAgICAgICAgICAgY29uc3QgcmVxdWVzdGVkQ3JlZGVudGlhbHNDb3B5OiBJUmVxdWVzdGVkQ3JlZGVudGlhbHMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlcXVlc3RlZENyZWRlbnRpYWxzKSk7XG4gICAgICAgICAgICBkZWxldGUgcmVxdWVzdGVkQ3JlZGVudGlhbHNDb3B5LnByb29mLnNpZ25hdHVyZTtcblxuICAgICAgICAgICAgLy8gUmVjb3ZlciB0aGUgcHVibGljIGtleVxuICAgICAgICAgICAgY29uc3QgcHVibGljS2V5ID0gdGhpcy5yZWNvdmVyQWRkcmVzc0Zyb21TaWduYXR1cmUoSlNPTi5zdHJpbmdpZnkocmVxdWVzdGVkQ3JlZGVudGlhbHNDb3B5KSwgcmVxdWVzdGVkQ3JlZGVudGlhbHMucHJvb2Yuc2lnbmF0dXJlLCB0cnVlKTtcbiAgICAgICAgICAgIGNvbnN0IHdlYjMgPSBuZXcgV2ViMyh3ZWIzVXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZCA9IHJlcXVlc3RlZENyZWRlbnRpYWxzLmlkXG4gICAgICAgICAgICBpZiAocHVibGljS2V5ICE9PSByZXF1ZXN0ZWRDcmVkZW50aWFscy5wcm9vZi5ob2xkZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBSZWNvdmVyZWQgYWRkcmVzcyAke3B1YmxpY0tleX0gZG9lcyBub3QgbWF0Y2ggaG9sZGVyIGFkZHJlc3MgJHtyZXF1ZXN0ZWRDcmVkZW50aWFscy5wcm9vZi5ob2xkZXJ9YCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGFjY2VzcyBsZXZlbCBvbiB0aGUgY29udHJhY3RcbiAgICAgICAgICAgIGNvbnN0IGNsYWltSG9sZGVyQ29udHJhY3QgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoY2xhaW1ob2xkZXJBYmksIHRoaXMuZ2V0Q29udHJhY3RBZGRyZXNzRnJvbURpZChkaWQpKTtcbiAgICAgICAgICAgIGNvbnN0IGtlY2NhazI1Nk9yZ2FuaXNhdGlvbktleSA9IHRoaXMuZ2V0U2hhM0tleShwdWJsaWNLZXksIHdlYjMpO1xuICAgICAgICAgICAgY29uc3Qga2V5UHVycG9zZSA9IGF3YWl0IHRoaXMuZ2V0S2V5UHVycG9zZShjbGFpbUhvbGRlckNvbnRyYWN0LCBrZWNjYWsyNTZPcmdhbmlzYXRpb25LZXkpIGFzIEVESURBY2Nlc3NMZXZlbDtcbiAgICAgICAgICAgIHJldHVybiAoa2V5UHVycG9zZSA9PT0gRURJREFjY2Vzc0xldmVsLk1BTkFHRU1FTlRfS0VZIHx8IGtleVB1cnBvc2UgPT09IEVESURBY2Nlc3NMZXZlbC5BQ1RJT05fS0VZKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJSZXF1ZXN0ZWQgQ3JlZGVudGlhbHMgZG9lc24ndCBoYXZlIGEgc2lnbmF0dXJlIGluIHRoZSBwcm9vZi4gTm90IGNoZWNraW5nXCIpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGFzeW5jIGlzVmFsaWRMaWNlbnNlKHJlcXVlc3RlZENyZWRlbnRpYWxzOiBJUmVxdWVzdGVkQ3JlZGVudGlhbHMsIHdlYjNVcmw6IHN0cmluZywgY2xhaW1Ib2xkZXJBYmk6IGFueSkge1xuICAgICAgICBjb25zdCBvcmdhbmlzYXRpb25EaWQgPSByZXF1ZXN0ZWRDcmVkZW50aWFscy5pZDtcbiAgICAgICAgY29uc3QgY3JlZGVudGlhbHM6IElDcmVkZW50aWFsID0gYXdhaXQgdGhpcy5nZXRDbGFpbShFQ2xhaW1UeXBlLkNPTVBBTllfSU5GTywgdGhpcy5nZXRDb250cmFjdEFkZHJlc3NGcm9tRGlkKG9yZ2FuaXNhdGlvbkRpZCksIHdlYjNVcmwsIGNsYWltSG9sZGVyQWJpKTtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gKGNyZWRlbnRpYWxzPy5jcmVkZW50aWFsU3ViamVjdD8uY3JlZGVudGlhbD8udmFsdWUgYXMgSUNvbXBhbnlJbmZvKT8uc3RhdHVzO1xuICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RhdHVzID09PSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZUtleVRvUHVibGljS2V5KHByaXZhdGVLZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHdlYjMgPSBuZXcgV2ViMygpO1xuICAgICAgICByZXR1cm4gd2ViMy5ldGguYWNjb3VudHMucHJpdmF0ZUtleVRvQWNjb3VudChwcml2YXRlS2V5KS5hZGRyZXNzO1xuICAgIH1cblxuICAgIGdlbmVyYXRlQ2hhbGxlbmdlKHB1YmxpY0tleTogc3RyaW5nLCBkaWQ6IHN0cmluZywgaG9zdDogc3RyaW5nLCBwcml2YXRlS2V5OiBzdHJpbmcpOiBJQ2hhbGxlbmdlIHtcbiAgICAgICAgY29uc3Qgd2ViMyA9IG5ldyBXZWIzKCk7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IGNoYWxsZW5nZSA9IGAke3B1YmxpY0tleX0tJHtkaWR9LSR7aG9zdH0tJHt0aW1lc3RhbXB9YDtcbiAgICAgICAgY29uc3Qgc2lnbmF0dXJlID0gd2ViMy5ldGguYWNjb3VudHMuc2lnbihjaGFsbGVuZ2UsIHByaXZhdGVLZXkpLnNpZ25hdHVyZVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGlkLFxuICAgICAgICAgICAgcHVibGljS2V5LFxuICAgICAgICAgICAgZW5kcG9pbnQ6IGhvc3QsXG4gICAgICAgICAgICB0aW1lc3RhbXAsXG4gICAgICAgICAgICBjaGFsbGVuZ2UsXG4gICAgICAgICAgICBzaWduYXR1cmVcbiAgICAgICAgfSBhcyBJQ2hhbGxlbmdlXG4gICAgfVxuXG4gICAgZ2V0Q29udHJhY3RBZGRyZXNzRnJvbURpZChkaWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGxldCBjb250cmFjdEFkZHJlc3MgPSBkaWQ7XG4gICAgICAgIGNvbnN0IHNwbGl0dGVkRGlkID0gZGlkLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgaWYgKHNwbGl0dGVkRGlkLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuc3VwcG9ydGVkIGRpZDpcIiwgZGlkKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKHNwbGl0dGVkRGlkLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgaWYgKHNwbGl0dGVkRGlkWzBdICE9PSBcImRpZFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuc3VwcG9ydGVkIGRpZDpcIiwgZGlkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3BsaXR0ZWREaWRbMV0gIT09IFwiZGlkdXhcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJVbnN1cHBvcnRlZCBjaGFpbjpcIiwgc3BsaXR0ZWREaWRbMV0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250cmFjdEFkZHJlc3MgPSBzcGxpdHRlZERpZFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udHJhY3RBZGRyZXNzO1xuICAgIH1cbn0iLCJpbXBvcnQgKiBhcyBodHRwIGZyb20gXCJodHRwXCI7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IHJlcXVlc3QsIHNlcnZlciBhcyBXZWJTb2NrZXRTZXJ2ZXIgfSBmcm9tIFwid2Vic29ja2V0XCI7XG5pbXBvcnQgeyBnZXRSVENDb25uZWN0aW9uQ29uZmlnIH0gZnJvbSBcIi4uL2hlbHBlcnMvc2lnbmFsSGVscGVyc1wiO1xuaW1wb3J0IHsgSUNvbm5lY3Rpb25EYXRhIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY29ubmVjdGlvbkRhdGFcIjtcbmltcG9ydCB7IElDb25uZWN0aW9uRGV0YWlscyB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2Nvbm5lY3Rpb25EZXRhaWxzXCI7XG5pbXBvcnQgeyBJUmVxdWVzdGVkQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFscy5pbnRlcmZhY2VcIjtcbmltcG9ydCB7IFdlYlJUQ0NsaWVudFYyIH0gZnJvbSBcIi4uL3dlYlJ0Y0NsaWVudFYyXCI7XG5cbmV4cG9ydCBjbGFzcyBTaWduYWxTZXJ2ZXJWMiB7XG4gICAgd3NTZXJ2ZXI6IFdlYlNvY2tldFNlcnZlcjtcbiAgICB3c1JlcXVlc3QkID0gbmV3IFN1YmplY3Q8YW55PigpO1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaHR0cFNlcnZlclxuICAgICAqL1xuXG4gICAgcHVibGljIHN0YXJ0U2lnbmFsKFxuICAgICAgICBodHRwU2VydmVyOiBodHRwLlNlcnZlclxuICAgICk6IHZvaWQge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXR1cCB3ZWJzb2NrZXQgc2VydmVyXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLndzU2VydmVyID0gbmV3IFdlYlNvY2tldFNlcnZlcih7XG4gICAgICAgICAgICBodHRwU2VydmVyOiBodHRwU2VydmVyLFxuICAgICAgICAgICAgYXV0b0FjY2VwdENvbm5lY3Rpb25zOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogV2Vic29ja2V0IGV2ZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53c1NlcnZlci5vbihcInJlcXVlc3RcIiwgYXN5bmMgKHJlcXVlc3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMud3NSZXF1ZXN0JC5uZXh0KHJlcXVlc3QpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIFVURkRhdGEgdG8gY29ubmVjdGlvbi5cbiAgICAgKiBAcGFyYW0gY2hhbm5lbFxuICAgICAqIEBwYXJhbSBtZXNzYWdlXG4gICAgICovXG4gICAgcHVibGljIHNlbmRUbyhjb25uZWN0aW9uOiBJQ29ubmVjdGlvbkRldGFpbHMsIG1lc3NhZ2U6IGFueSkge1xuICAgICAgICBpZiAoY29ubmVjdGlvbikge1xuICAgICAgICAgICAgY29ubmVjdGlvbi5zZW5kVVRGKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJUcmllZCB0byBzZW5kIHRoaXMgb3ZlciB1bmRlZmluZWQgY29ubmVjdGlvbjpcIiwgbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZW5kIGVycm9yXG4gICAgICogQHBhcmFtIHJlYXNvblxuICAgICAqIEBwYXJhbVxuICAgICAqL1xuICAgIHB1YmxpYyByZWplY3RDb25uZWN0aW9uKHJlYXNvbjogc3RyaW5nLCByZXF1ZXN0OiBhbnkpIHtcbiAgICAgICAgcmVxdWVzdC5yZWplY3QoKTtcbiAgICAgICAgY29uc29sZS5lcnJvcigobmV3IERhdGUoKS50b0lTT1N0cmluZygpKSArIFwiIFwiICsgcmVhc29uKTtcbiAgICAgICAgY29uc29sZS5lcnJvcigobmV3IERhdGUoKS50b0lTT1N0cmluZygpKSArIFwiIENvbm5lY3Rpb24gZnJvbSByZW1vdGVBZGRyZXNzIFwiICsgcmVxdWVzdC5yZW1vdGVBZGRyZXNzZXMgKyBcIiByZWplY3RlZC5cIik7XG4gICAgfVxuXG4gICAgYXN5bmMgc2V0dXBQMlBDb25uZWN0aW9uKFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0LFxuICAgICAgICB2YWxpZFNpZ246IGJvb2xlYW4sXG4gICAgICAgIGNoYW5uZWw6IHN0cmluZyxcbiAgICAgICAgb3JpZ2luQWxsb3dlZDogYm9vbGVhbixcbiAgICAgICAgdHVybkV4cGlyYXRpb246IG51bWJlcixcbiAgICAgICAgdHVyblVybDogc3RyaW5nLFxuICAgICAgICB0dXJuU2VjcmV0OiBzdHJpbmcsXG4gICAgICAgIHNpZ25hbFNlcnZlcjogc3RyaW5nLFxuICAgICAgICByZXF1ZXN0ZWRDcmVkZW50aWFsczogSVJlcXVlc3RlZENyZWRlbnRpYWxzLFxuICAgICAgICBhY3Rpb25UeXBlOiBzdHJpbmcsXG4gICAgICAgIGRhdGE6IGFueSxcbiAgICAgICAgb3JpZ2luOiBzdHJpbmdcbiAgICApOiBQcm9taXNlPGFueT4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2luY2UgYWxsIGlzIHdlbGwsIHdlIGFjY2VwdCB0aGUgY29ubmVjdGlvblxuICAgICAgICAgKiBBY2NlcHQgY29ubmVjdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3QgY29ubmVjdGlvbjogSUNvbm5lY3Rpb25EZXRhaWxzID0gcmVxdWVzdC5hY2NlcHQobnVsbCwgcmVxdWVzdC5vcmlnaW4pO1xuICAgICAgICBjb25zb2xlLmxvZyhgTGlicmFyeSAtIEFjY2VwdGVkICR7cmVxdWVzdC5vcmlnaW59IHZhbGlkIHNpZ25lZCAke3ZhbGlkU2lnbn1gKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0dXAgZGVmYXVsdCB2YWx1ZXMgdXBvbiBjb25uZWN0XG4gICAgICAgICAqL1xuICAgICAgICBjb25uZWN0aW9uLnV1aWQgPSB1dWlkdjQoKTsgLy8gVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjbGllbnRcbiAgICAgICAgY29ubmVjdGlvbi5kaWQgPSB2YWxpZFNpZ24gPyAocmVxdWVzdD8ucmVzb3VyY2VVUkw/LnF1ZXJ5IGFzIGFueSk/LmRpZD8udG9TdHJpbmcoKSA6IG51bGw7IC8vIFdoZW4gYXV0aGVudGljYXRlZDogZGlkQWRkcmVzc1xuICAgICAgICBjb25uZWN0aW9uLnB1YmxpY0tleSA9IHZhbGlkU2lnbiA/IChyZXF1ZXN0Py5yZXNvdXJjZVVSTD8ucXVlcnkgYXMgYW55KT8ucHVibGlja2V5Py50b1N0cmluZygpIDogbnVsbDsgLy8gV2hlbiBhdXRoZW50aWNhdGVkOiBwdWJsaWNLZXlcbiAgICAgICAgY29ubmVjdGlvbi5hdXRoZW50aWNhdGVkID0gdmFsaWRTaWduOyAvLyB0cnVlIG9yIGZhbHNlXG4gICAgICAgIGNvbm5lY3Rpb24uY2hhbm5lbCA9IGNoYW5uZWw7IC8vIGNvbm5lY3Rpb24gb3IgY2xpZW50LnV1aWQgY29ubmVjdGVkIHRvXG5cbiAgICAgICAgdGhpcy5zZXR1cFdlYnNvY2tldExpc3RlbmVycyhjb25uZWN0aW9uKTtcblxuICAgICAgICAvLyBIb3N0XG4gICAgICAgIGlmICgob3JpZ2luID09PSBcInZhbGlkYXRvclwiICYmIHZhbGlkU2lnbiAmJiBjaGFubmVsID09PSBudWxsKSB8fCAob3JpZ2luQWxsb3dlZCAmJiBjaGFubmVsID09PSBudWxsKSkge1xuICAgICAgICAgICAgLy8gY29ubmVjdGlvbiBpcyB2ZXJpZmllZCFcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uaG9zdCA9IHRydWU7XG4gICAgICAgICAgICBjb25uZWN0aW9uLm9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgICAgIGNvbnN0IHdlYlJ0Y0NvbmZpZyA9IGdldFJUQ0Nvbm5lY3Rpb25Db25maWcoXCJob3N0XCIsIHR1cm5FeHBpcmF0aW9uLCB0dXJuU2VjcmV0LCB0dXJuVXJsKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTGlicmFyeSAtIEhvc3Qgd2FpdGluZyBmb3IgY29ubmVjdGlvblwiKTtcbiAgICAgICAgICAgIHRoaXMuc2VuZFRvKGNvbm5lY3Rpb24sIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImhvc3RcIixcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBIb3N0IGluaXRpYWxpc2VkICR7Y29ubmVjdGlvbi51dWlkfWAsXG4gICAgICAgICAgICAgICAgY2hhbm5lbElkOiBjb25uZWN0aW9uLnV1aWQsXG4gICAgICAgICAgICAgICAgc2lnbmFsU2VydmVyLFxuICAgICAgICAgICAgICAgIC4uLihvcmlnaW4gPT09IFwidmFsaWRhdG9yXCIgJiYgeyB3ZWJSdGNDb25uZWN0aW9uQ29uZmlnOiB3ZWJSdGNDb25maWcgfSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG9yaWdpbiAhPT0gXCJ2YWxpZGF0b3JcIikge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24ud2ViUnRjQ2xpZW50ID0gbmV3IFdlYlJUQ0NsaWVudFYyKHdlYlJ0Y0NvbmZpZywgcmVxdWVzdGVkQ3JlZGVudGlhbHMsIGNvbm5lY3Rpb24sIGFjdGlvblR5cGUsIGRhdGEpO1xuICAgICAgICAgICAgICAgIGF3YWl0IGNvbm5lY3Rpb24ud2ViUnRjQ2xpZW50LnNldHVwUGVlcmNvbm5lY3Rpb24oY29ubmVjdGlvbi51dWlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIENsaWVudFxuICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIExldCdzIGZpbmQgdGhlIGhvc3QgdG8gY29ubmVjdCB0bywgYW5kIGNvbm5lY3RcbiAgICAgICAgICAgIGNvbnN0IGhvc3RDaGFubmVsOiBJQ29ubmVjdGlvbkRldGFpbHMgPSB0aGlzLndzU2VydmVyLmNvbm5lY3Rpb25zLmZpbmQoKGNvbm46IElDb25uZWN0aW9uRGV0YWlscykgPT4gY29ubi51dWlkID09PSBjaGFubmVsICYmIGNvbm4uY2hhbm5lbCA9PT0gbnVsbCAmJiBjb25uLmhvc3QgPT09IHRydWUpO1xuICAgICAgICAgICAgaWYgKGhvc3RDaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgLy8gTGV0J3MgY29ubmVjdFxuICAgICAgICAgICAgICAgIGhvc3RDaGFubmVsLmNoYW5uZWwgPSBjb25uZWN0aW9uLnV1aWQ7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jaGFubmVsID0gaG9zdENoYW5uZWwudXVpZDtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBMaWJyYXJ5IC0gQ2xpZW50IGNvbm5lY3RpbmcgdG8gJHtjaGFubmVsfWApO1xuICAgICAgICAgICAgICAgIGNvbnN0IHdlYlJ0Y0NvbmZpZyA9IGdldFJUQ0Nvbm5lY3Rpb25Db25maWcoXCJjbGllbnRcIiwgdHVybkV4cGlyYXRpb24sIHR1cm5TZWNyZXQsIHR1cm5VcmwpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2VuZFRvKGNvbm5lY3Rpb24sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjbGllbnRcIixcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYENsaWVudCBpbml0aWFsaXNlZCAke2Nvbm5lY3Rpb24udXVpZH1gLFxuICAgICAgICAgICAgICAgICAgICBjaGFubmVsSWQ6IGNoYW5uZWwsXG4gICAgICAgICAgICAgICAgICAgIHdlYlJ0Y0Nvbm5lY3Rpb25Db25maWc6IHdlYlJ0Y0NvbmZpZ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChob3N0Q2hhbm5lbC5vcmlnaW4gIT09IFwidmFsaWRhdG9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9zdENoYW5uZWwud2ViUnRjQ2xpZW50LmNsaWVudENoYW5uZWwgPSBjb25uZWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICBob3N0Q2hhbm5lbC53ZWJSdGNDbGllbnQuZGF0YSA9IHsgLi4uaG9zdENoYW5uZWwud2ViUnRjQ2xpZW50LmRhdGEsIGNsaWVudERhdGE6IGRhdGEgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJMaWJyYXJ5IC0gTm90IGEgY2xpZW50IG9yIGhvc3RcIik7XG4gICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb247XG4gICAgfVxuXG4gICAgc2V0dXBXZWJzb2NrZXRMaXN0ZW5lcnMoY29ubmVjdGlvbjogSUNvbm5lY3Rpb25EZXRhaWxzKTogdm9pZCB7XG4gICAgICAgIGNvbm5lY3Rpb24ub24oXCJtZXNzYWdlXCIsIGFzeW5jIChtZXNzYWdlKSA9PiB7XG5cbiAgICAgICAgICAgIGxldCBkYXRhOiBJQ29ubmVjdGlvbkRhdGE7XG5cbiAgICAgICAgICAgIC8vIGFjY2VwdGluZyBvbmx5IEpTT04gbWVzc2FnZXNcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKFwidXRmOERhdGFcIiBpbiBtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG1lc3NhZ2UudXRmOERhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTGlicmFyeSAtIFdlYnNvY2tldCBjb25uZWN0aW9uIGludmFsaWQgSlNPTlwiLCBlKTtcbiAgICAgICAgICAgICAgICBkYXRhID0geyB0eXBlOiBudWxsIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB7IHR5cGUsIG9mZmVyLCBhbnN3ZXIsIGNhbmRpZGF0ZSB9ID0gZGF0YTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTaW5jZSB2YWxpZGF0aW9uIGhhcHBlbnMgb24gY29ubmVjdGlvbiwgd2Ugb25seSBleHBlY3QgMyB0eXBlIG9mIG1lc3NhZ2VzXG4gICAgICAgICAgICAgKiBJbiB0aGlzIG9yZGVyOlxuICAgICAgICAgICAgICogLSBPZmZlclxuICAgICAgICAgICAgICogICBUaGUgaG9zdCBzZW5kcyBhbiBvZmZlciB0byB0aGUgY2xpZW50LlxuICAgICAgICAgICAgICogLSBBbnN3ZXJcbiAgICAgICAgICAgICAqICAgVGhlIENsaWVudCByZXNwb25zZSB3aXRoIGFuIEFuc3dlclxuICAgICAgICAgICAgICogLSBDYW5kaWRhdGVzXG4gICAgICAgICAgICAgKiAgIENsaWVudC9Ib3N0IHNoYXJlIGNhbmRpZGF0ZXNcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBXaGVuIG9mZmVyIGFuZCBhbnN3ZXIgaXMgc2VuZCwgdGhleSBjYW4gc3RhcnQgdG8gY29ubmVjdCBvdmVyIHdlYlJ0Yy5cbiAgICAgICAgICAgICAqIEV4dHJhIGNhbmRpZGF0ZXMgaGVscHMgdG8gY29ubmVjdCBmYXN0ZXIvYmV0dGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvZmZlclwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgY2xpZW50IHNlbmRzIGFuIG9mZmVyIHRvIHRoZSBob3N0LlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbm5lY3Rpb24uaG9zdCAmJiBjb25uZWN0aW9uLmNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RDaGFubmVsOiBJQ29ubmVjdGlvbkRldGFpbHMgPSB0aGlzLndzU2VydmVyLmNvbm5lY3Rpb25zLmZpbmQoKGNvbm46IElDb25uZWN0aW9uRGV0YWlscykgPT4gY29ubi5jaGFubmVsID09PSBjb25uZWN0aW9uLnV1aWQgJiYgY29ubi5ob3N0ID09PSB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3N0Q2hhbm5lbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3N0Q2hhbm5lbC5vcmlnaW4gPT09IFwidmFsaWRhdG9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kVG8oaG9zdENoYW5uZWwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib2ZmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNsaWVudCBzaGFyZWQgYW4gb2ZmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGhvc3RDaGFubmVsLndlYlJ0Y0NsaWVudC5zZXRSZW1vdGVEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGhvc3RDaGFubmVsLndlYlJ0Y0NsaWVudC5zZW5kQW5zd2VyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ291bGRuJ3QgZmluZCBjb25uZWN0aW9uIG9uIHV1aWQ6XCIsIGNvbm5lY3Rpb24udXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiYW5zd2VyXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBob3N0IHJlc3BvbmRzIHdpdGggYW4gYW5zd2VyIGZvciB0aGUgY2xpZW50LlxuICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdGlvbi5ob3N0ICYmIGNvbm5lY3Rpb24uY2hhbm5lbCAmJiBjb25uZWN0aW9uLm9yaWdpbiA9PT0gXCJ2YWxpZGF0b3JcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpZW50Q2hhbm5lbDogSUNvbm5lY3Rpb25EZXRhaWxzID0gdGhpcy53c1NlcnZlci5jb25uZWN0aW9ucy5maW5kKChjb25uOiBJQ29ubmVjdGlvbkRldGFpbHMpID0+IGNvbm4uY2hhbm5lbCA9PT0gY29ubmVjdGlvbi51dWlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGllbnRDaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW5kVG8oY2xpZW50Q2hhbm5lbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFuc3dlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNsaWVudCBzaGFyZWQgYW4gYW5zd2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ291bGRuJ3QgZmluZCBjb25uZWN0aW9uIG9uIHV1aWQ6XCIsIGNvbm5lY3Rpb24udXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uLmNsb3NlKClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiY2FuZGlkYXRlXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIEhvc3QgYW5kIENsaWVudCBzaGFyZSBjYW5kaWRhdGUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25uZWN0aW9uLmNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5uZWw6IElDb25uZWN0aW9uRGV0YWlscyA9IHRoaXMud3NTZXJ2ZXIuY29ubmVjdGlvbnMuZmluZCgoY29ubjogSUNvbm5lY3Rpb25EZXRhaWxzKSA9PiBjb25uLmNoYW5uZWwgPT09IGNvbm5lY3Rpb24udXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVsLm9yaWdpbiA9PT0gXCJ2YWxpZGF0b3JcIiB8fCBjb25uZWN0aW9uLm9yaWdpbiA9PT0gXCJ2YWxpZGF0b3JcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRUbyhjaGFubmVsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNhbmRpZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQ2FuZGlkYXRlIHNoYXJlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuZGlkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5uZWwud2ViUnRjQ2xpZW50LmFkZENhbmRpZGF0ZShjYW5kaWRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkbid0IGZpbmQgY29ubmVjdGlvbiBvbiB1dWlkOlwiLCBjb25uZWN0aW9uLnV1aWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGNhbiBhbHNvIGxpc3RlbiB0byB3ZWJzb2NrZXQgZXZlbnRzIG9uIHRoZSBob3N0IHNvIHdlIGRvbid0IHdhbnQgdG8gdGhyb3cgYW55IGVycm9yIGhlcmU7IGN1c3RvbSBpbXBsZW1lbnRhdGlvbiBpcyBiZWluZyBtYWRlIG9uIHRoZSBhcHBsaWNhdGlvbiBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIGNvbm5lY3Rpb24gaXMgY2xvc2VkXG4gICAgICAgICAqL1xuICAgICAgICBjb25uZWN0aW9uLm9uKFwiY2xvc2VcIiwgKHJlYXNvbkNvZGUsIGRlc2NyaXB0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgTGlicmFyeSAtICR7KG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSl9IC0gUGVlciAke2Nvbm5lY3Rpb24ucmVtb3RlQWRkcmVzc30gZGlzY29ubmVjdGVkLCBSZWFzb24gJHtyZWFzb25Db2RlfSwgZGVzY3JpcHRpb24gJHtkZXNjcmlwdGlvbn1gKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgV2ViU29ja2V0IGZyb20gXCJ3c1wiO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCAqIGFzIGNyeXB0byBmcm9tIFwiY3J5cHRvXCI7XG5pbXBvcnQgeyBJUlRDQ29ubmVjdGlvbkNvbmZpZyB9IGZyb20gXCIuL2ludGVyZmFjZXMvcnRjQ29ubmVjdGlvbkNvbmZpZy5pbnRlcmZhY2VcIjtcbmltcG9ydCAqIGFzIGh0dHAgZnJvbSBcImh0dHBcIjtcblxuZXhwb3J0IGNsYXNzIFNpZ25hbGluZ1NlcnZlciB7XG4gICAgd3NTZXJ2ZXI6IGFueTtcbiAgICBydGNDb25uZWN0aW9uQ29uZmlnOiBJUlRDQ29ubmVjdGlvbkNvbmZpZzsgXG5cbiAgICAvKipcbiAgICAgKiBXZWIgUlRDIGNvbm5lY3Rpb24gY29uZmlnXG4gICAgICogQHBhcmFtIHJ0Y0Nvbm5lY3Rpb25Db25maWcgXG4gICAgICovXG4gICAgc2V0UlRDQ29ubmVjdGlvbkNvbmZpZyhydGNDb25uZWN0aW9uQ29uZmlnOiBJUlRDQ29ubmVjdGlvbkNvbmZpZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnJ0Y0Nvbm5lY3Rpb25Db25maWcgPSBydGNDb25uZWN0aW9uQ29uZmlnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBSVEMgcGVlcmNvbm5lY3Rpb25cbiAgICAgKi9cbiAgICBnZXRSVENDb25uZWN0aW9uQ29uZmlnKHR5cGU6IHN0cmluZyk6IFJUQ0NvbmZpZ3VyYXRpb24ge1xuICAgICAgICBpZiAodGhpcy5ydGNDb25uZWN0aW9uQ29uZmlnLnR1cm5FbmFibGVkKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgICAgICBjb25zdCBleHBpcmF0aW9uID0gdGhpcy5ydGNDb25uZWN0aW9uQ29uZmlnLnR1cm5FeHBpcmF0aW9uO1xuICAgICAgICAgICAgY29uc3QgdXNlcm5hbWUgPSBgJHt0aW1lICsgZXhwaXJhdGlvbn06JHt0eXBlfWA7XG4gICAgICAgICAgICBjb25zdCBjcmVkZW50aWFsID0gY3J5cHRvLmNyZWF0ZUhtYWMoXCJzaGExXCIsIHRoaXMucnRjQ29ubmVjdGlvbkNvbmZpZy50dXJuU2VjcmV0KS51cGRhdGUodXNlcm5hbWUudG9TdHJpbmcoKSkuZGlnZXN0KFwiYmFzZTY0XCIpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBpY2VDYW5kaWRhdGVQb29sU2l6ZTogNSxcbiAgICAgICAgICAgICAgICBpY2VTZXJ2ZXJzOiBbe1xuICAgICAgICAgICAgICAgICAgICB1cmxzOiB0aGlzLnJ0Y0Nvbm5lY3Rpb25Db25maWcudHVyblVybCxcbiAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbCxcbiAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUsXG4gICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICB9IGFzIFJUQ0NvbmZpZ3VyYXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ydGNDb25uZWN0aW9uQ29uZmlnLnN0dW5FbmFibGVkKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGljZVNlcnZlcnM6IFt7XG4gICAgICAgICAgICAgICAgICAgIHVybHM6IHRoaXMucnRjQ29ubmVjdGlvbkNvbmZpZy5zdHVuVXJsLFxuICAgICAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgfSBhcyBSVENDb25maWd1cmF0aW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHNlcnZlciBcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhcnRTaWduYWwoc2VydmVyOiBodHRwLlNlcnZlcik6IHZvaWQge1xuICAgICAgICB0aGlzLndzU2VydmVyID0gbmV3IFdlYlNvY2tldC5TZXJ2ZXIoeyBzZXJ2ZXIgfSk7XG5cbiAgICAgICAgY29uc3Qgc2VuZFRvID0gKGRhdGFjaGFubmVsOiBSVENEYXRhQ2hhbm5lbCwgbWVzc2FnZTogYW55KSA9PiB7XG4gICAgICAgICAgICBkYXRhY2hhbm5lbC5zZW5kKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLndzU2VydmVyLm9uKFwiY29ubmVjdGlvblwiLCAod3M6IGFueSkgPT4ge1xuICAgICAgICAgICAgd3MudXVpZCA9IHV1aWR2NCgpOyAvLyBVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIGNsaWVudFxuICAgICAgICAgICAgd3MuZGlkID0gbnVsbDsgLy8gV2hlbiBhdXRoZW50aWNhdGVkOiBwdWJsaWNLZXkgb3IgZGlkQWRkcmVzc1xuICAgICAgICAgICAgd3MuaG9zdCA9IGZhbHNlOyAvLyBJcyBhIGhvc3QsIHRydWUgb3IgZmFsc2VcbiAgICAgICAgICAgIHdzLmF1dGhlbnRpY2F0ZWQgPSBmYWxzZTsgLy8gdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgICAgd3MuY29ubmVjdGVkID0gbnVsbDsgLy8gbnVsbCBvciBjbGllbnQudXVpZCBjb25uZWN0ZWQgdG9cblxuICAgICAgICAgICAgd3Mub24oXCJlcnJvclwiLCAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBFQ09OTlJFU0VUIGNhbiBnZXQgdGhyb3duIHdoZW4gdGhlIGNsaWVudCBkaXNjb25uZWN0cy4gVGhpcyBhcHBsaWNhdGlvblxuICAgICAgICAgICAgICAgIC8vIHdpbGwgY3Jhc2guIElnbm9yZSB0aGlzIGVycm9yLlxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHdzLm9uKFwibWVzc2FnZVwiLCAobXNnOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZGF0YTogYW55O1xuXG4gICAgICAgICAgICAgICAgLy8gYWNjZXB0aW5nIG9ubHkgSlNPTiBtZXNzYWdlc1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKG1zZyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0ge307XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdHlwZSwgdG9rZW4sIGhvc3QsIG9mZmVyLCBhbnN3ZXIsIGNhbmRpZGF0ZSB9ID0gZGF0YTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBhIHVzZXIgdHJpZXMgdG8gbG9naW5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImF1dGhcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHVzZXJuYW1lIGlzIGF2YWlsYWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRUbyh3cywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImF1dGhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQ291bGQgbm90IHZhbGlkYXRlIHRva2VuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmFsaWRhdGUgdG9rZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cy5hdXRoZW50aWNhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8od3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJBVVRIXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQXV0aGVudGljYXRpb24gc3VjY2Vzc2Z1bFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImhvc3RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIGEgY2hhbm5lbCAoSG9zdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHdzLmhvc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKHdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJob3N0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkhvc3QgaW5pdGlhbGlzZWQgXCIgKyB3cy51dWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV1aWQ6IHdzLnV1aWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2ViUnRjQ29ubmVjdGlvbkNvbmZpZzogdGhpcy5nZXRSVENDb25uZWN0aW9uQ29uZmlnKFwiaG9zdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInBpbmdcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNldHVwIGEgY2hhbm5lbCAoSG9zdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRUbyh3cywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicG9uZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY29ubmVjdFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25uZWN0IHRvIGEgY2hhbm5lbCAoSG9zdClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RzID0gWy4uLnRoaXMud3NTZXJ2ZXIuY2xpZW50c10uZmlsdGVyKChjbGllbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LnV1aWQgPT09IGhvc3QgJiYgY2xpZW50LmNvbm5lY3RlZCA9PT0gbnVsbCAmJiBjbGllbnQuaG9zdCA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG9zdHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG9zdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRUbyhob3N0c1swXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNvbm5lY3RlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNsaWVudCBjb25uZWN0ZWQgXCIgKyB3cy51dWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dWlkOiB3cy51dWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJSdGNDb25uZWN0aW9uQ29uZmlnOiB0aGlzLmdldFJUQ0Nvbm5lY3Rpb25Db25maWcoXCJob3N0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGllbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8od3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjb25uZWN0ZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJDb25uZWN0ZWQgdG8gXCIgKyBob3N0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJSdGNDb25uZWN0aW9uQ29uZmlnOiB0aGlzLmdldFJUQ0Nvbm5lY3Rpb25Db25maWcoXCJjbGllbnRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExpbmsgdGhlbSB0b2dldGhlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdzLmNvbm5lY3RlZCA9IGhvc3RzWzBdLnV1aWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9zdHNbMF0uY29ubmVjdGVkID0gd3MudXVpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKHdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY29ubmVjdGVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNvdWxkIG5vdCBjb25uZWN0IHRvIFwiICsgaG9zdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJvZmZlclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgQ2xpZW50IGV4aXN0cyB0aGVuIHNlbmQgaGltIG9mZmVyIGRldGFpbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cy5jb25uZWN0ZWQgIT0gbnVsbCAmJiB0aGlzLndzU2VydmVyLmNsaWVudHMuc2l6ZSA+IDApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RzT2ZmZXIgPSBbLi4udGhpcy53c1NlcnZlci5jbGllbnRzXS5maWx0ZXIoKGNsaWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmNvbm5lY3RlZCA9PT0gd3MudXVpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3N0c09mZmVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8oaG9zdHNPZmZlclswXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJvZmZlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8od3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib2ZmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8od3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib2ZmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNvbm5lY3Rpb24gbm90IGZvdW5kLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKHdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib2ZmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIlRvbyBzb29uLi4uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYW5zd2VyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBDbGllbnQgcmVzcG9uc2UgdG8gYW4gb2ZmZXIgd2l0aCBhbiBhbnN3ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cy5jb25uZWN0ZWQgIT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaG9zdHNPZmZlciA9IFsuLi50aGlzLndzU2VydmVyLmNsaWVudHNdLmZpbHRlcigoY2xpZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQuY29ubmVjdGVkID09PSB3cy51dWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhvc3RzT2ZmZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRUbyhob3N0c09mZmVyWzBdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFuc3dlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKHdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFuc3dlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8od3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYW5zd2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQ29ubmVjdGlvbiBub3QgZm91bmQuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8od3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhbnN3ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuc3dlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJUb28gc29vbi4uLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNhbmRpZGF0ZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgQ2xpZW50IHJlc3BvbnNlIHRvIGFuIG9mZmVyIHdpdGggYW4gYW5zd2VyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAod3MuY29ubmVjdGVkICE9IG51bGwpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RzT2ZmZXIgPSBbLi4udGhpcy53c1NlcnZlci5jbGllbnRzXS5maWx0ZXIoKGNsaWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmNvbm5lY3RlZCA9PT0gd3MudXVpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3N0c09mZmVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8oaG9zdHNPZmZlclswXSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjYW5kaWRhdGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKHdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNhbmRpZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNvbm5lY3Rpb24gbm90IGZvdW5kLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKHdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY2FuZGlkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5kaWRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiVG9vIHNvb24uLi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJsZWF2ZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdzLmNvbm5lY3RlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2xpZW50cyA9IFsuLi50aGlzLndzU2VydmVyLmNsaWVudHNdLmZpbHRlcigoY2xpZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQuY29ubmVjdGVkID09PSB3cy51dWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3MudXVpZCA9IHV1aWR2NCgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRUbyhjbGllbnRzWzBdLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxlYXZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJDb25uZWN0aW9uIGxlZnQgb24gcmVjZWl2ZSBsZWF2ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudHNbMF0uY29ubmVjdGVkID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8od3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibGVhdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNvbm5lY3Rpb24gbGVmdC5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV1aWQ6IHdzLnV1aWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKHdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxlYXZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiQ29ubmVjdGlvbiBub3QgZm91bmQuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dWlkOiB3cy51dWlkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cy5jb25uZWN0ZWQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cy51dWlkID0gdXVpZHY0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKHdzLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwibGVhdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwiTm90IGNvbm5lY3RlZCB0byBob3N0L2NsaWVudC5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXVpZDogd3MudXVpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kVG8od3MsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImVycm9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCJDb21tYW5kIG5vdCBmb3VuZDogXCIgKyB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3cy5vbihcImNsb3NlXCIsICh3c0FyZzogYW55LCByZXF1ZXN0OiBhbnksIGNsaWVudDogYW55KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHdzQXJnLmNvbm5lY3RlZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudHMgPSBbLi4udGhpcy53c1NlcnZlci5jbGllbnRzXS5maWx0ZXIoKGNsaWVudEFyZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudEFyZy5jb25uZWN0ZWQgPT09IHdzQXJnLnV1aWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGllbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRvKGNsaWVudHNbMF0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImxlYXZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkNvbm5lY3Rpb24gbGVmdCBvbiB3ZWJzb2NrZXQgY2xvc2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRzWzBdLmNvbm5lY3RlZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgd3NBcmcuY29ubmVjdGVkID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIHNlbmQgaW1tZWRpYXRlbHkgYSBmZWVkYmFjayB0byB0aGUgaW5jb21pbmcgY29ubmVjdGlvblxuICAgICAgICAgICAgd3Muc2VuZChcbiAgICAgICAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY29ubmVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIldlbGwgaGVsbG8gdGhlcmUsIEkgYW0gdGhlIFNpZ25hbGluZyBTZXJ2ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQWJpSXRlbSB9IGZyb20gXCJ3ZWIzLXV0aWxzL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBjbGFpbUhvbGRlckFiaTogQWJpSXRlbVtdID0gW1xuICAgIHtcbiAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2tleVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiZ2V0S2V5UHVycG9zZVwiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJwdXJwb3NlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcGF5YWJsZTogZmFsc2UsXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJfa2V5XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlczMyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJnZXRLZXlcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwicHVycG9zZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwia2V5VHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwia2V5XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlczMyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcGF5YWJsZTogZmFsc2UsXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBjb25zdGFudDogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2tleVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX3B1cnBvc2VcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl90eXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJhZGRLZXlcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBheWFibGU6IGZhbHNlLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2NsYWltVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiZ2V0Q2xhaW1JZHNCeVR5cGVcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiY2xhaW1JZHNcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzMzJbXVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBheWFibGU6IGZhbHNlLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29uc3RhbnQ6IGZhbHNlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9jbGFpbUlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlczMyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJyZW1vdmVDbGFpbVwiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcGF5YWJsZTogZmFsc2UsXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBjb25zdGFudDogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2lkXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJfYXBwcm92ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYm9vbFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiYXBwcm92ZVwiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcGF5YWJsZTogZmFsc2UsXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBjb25zdGFudDogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2tleVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwicmVtb3ZlS2V5XCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9wdXJwb3NlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJnZXRLZXlzQnlQdXJwb3NlXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9rZXlzXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlczMyW11cIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBwYXlhYmxlOiBmYWxzZSxcbiAgICAgICAgc3RhdGVNdXRhYmlsaXR5OiBcInZpZXdcIixcbiAgICAgICAgdHlwZTogXCJmdW5jdGlvblwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGNvbnN0YW50OiBmYWxzZSxcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJfY2xhaW1UeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJfc2NoZW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJfaXNzdWVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJfc2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2RhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJfdXJpXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcImFkZENsYWltXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImNsYWltUmVxdWVzdElkXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlczMyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcGF5YWJsZTogZmFsc2UsXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJub25wYXlhYmxlXCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBjb25zdGFudDogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX3RvXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJfdmFsdWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIl9kYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiZXhlY3V0ZVwiLFxuICAgICAgICBvdXRwdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJleGVjdXRpb25JZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBheWFibGU6IGZhbHNlLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwibm9ucGF5YWJsZVwiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2NsYWltSWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcImdldENsYWltXCIsXG4gICAgICAgIG91dHB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImNsYWltVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwic2NoZW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJpc3N1ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJ1cmlcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHBheWFibGU6IGZhbHNlLFxuICAgICAgICBzdGF0ZU11dGFiaWxpdHk6IFwidmlld1wiLFxuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgY29uc3RhbnQ6IHRydWUsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX2tleVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiX3B1cnBvc2VcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcImtleUhhc1B1cnBvc2VcIixcbiAgICAgICAgb3V0cHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwicmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJib29sXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcGF5YWJsZTogZmFsc2UsXG4gICAgICAgIHN0YXRlTXV0YWJpbGl0eTogXCJ2aWV3XCIsXG4gICAgICAgIHR5cGU6IFwiZnVuY3Rpb25cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiY2xhaW1SZXF1ZXN0SWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiY2xhaW1UeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzY2hlbWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiaXNzdWVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidXJpXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIkNsYWltUmVxdWVzdGVkXCIsXG4gICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiY2xhaW1JZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJjbGFpbVR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiaXNzdWVyXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImNsYWltXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidXJpXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIkNsYWltQWRkZWRcIixcbiAgICAgICAgdHlwZTogXCJldmVudFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGFub255bW91czogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJjbGFpbUlkXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlczMyXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImNsYWltVHlwZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2NoZW1lXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImlzc3VlclwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcInVyaVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJDbGFpbUFkZGVkXCIsXG4gICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiY2xhaW1JZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJjbGFpbVR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNjaGVtZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJpc3N1ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ1cmlcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiQ2xhaW1SZW1vdmVkXCIsXG4gICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiY2xhaW1JZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJjbGFpbVR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNjaGVtZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJpc3N1ZXJcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ1cmlcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiQ2xhaW1DaGFuZ2VkXCIsXG4gICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgIH0sXG4gICAge1xuICAgICAgICBhbm9ueW1vdXM6IGZhbHNlLFxuICAgICAgICBpbnB1dHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZXhlY3V0aW9uSWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidG9cIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImFkZHJlc3NcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImRhdGFcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJFeGVjdXRpb25GYWlsZWRcIixcbiAgICAgICAgdHlwZTogXCJldmVudFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGFub255bW91czogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJrZXlcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJ5dGVzMzJcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbmRleGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwicHVycG9zZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJrZXlUeXBlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbmFtZTogXCJLZXlBZGRlZFwiLFxuICAgICAgICB0eXBlOiBcImV2ZW50XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImtleVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJwdXJwb3NlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImtleVR5cGVcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIktleVJlbW92ZWRcIixcbiAgICAgICAgdHlwZTogXCJldmVudFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGFub255bW91czogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleGVjdXRpb25JZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ0b1wiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYWRkcmVzc1wiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZGF0YVwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIkV4ZWN1dGlvblJlcXVlc3RlZFwiLFxuICAgICAgICB0eXBlOiBcImV2ZW50XCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgYW5vbnltb3VzOiBmYWxzZSxcbiAgICAgICAgaW5wdXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcImV4ZWN1dGlvbklkXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRvXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaW5kZXhlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJkYXRhXCIsXG4gICAgICAgICAgICAgICAgdHlwZTogXCJieXRlc1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIG5hbWU6IFwiRXhlY3V0ZWRcIixcbiAgICAgICAgdHlwZTogXCJldmVudFwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGFub255bW91czogZmFsc2UsXG4gICAgICAgIGlucHV0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJleGVjdXRpb25JZFwiLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidWludDI1NlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluZGV4ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXBwcm92ZWRcIixcbiAgICAgICAgICAgICAgICB0eXBlOiBcImJvb2xcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBuYW1lOiBcIkFwcHJvdmVkXCIsXG4gICAgICAgIHR5cGU6IFwiZXZlbnRcIlxuICAgIH1cbl07XG4iLCJpbXBvcnQgeyBBYmlJdGVtIH0gZnJvbSBcIndlYjMtdXRpbHMvdHlwZXNcIjtcbmV4cG9ydCBjb25zdCBJZGVudGl0eSA9IHtcbiAgICBhYmk6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX2tleVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ2V0S2V5UHVycG9zZVwiLFxuICAgICAgICAgICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInB1cnBvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGF5YWJsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwidmlld1wiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnN0YW50XCI6IHRydWUsXG4gICAgICAgICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJfa2V5XCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJnZXRLZXlcIixcbiAgICAgICAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJwdXJwb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJrZXlUeXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJrZXlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGF5YWJsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwidmlld1wiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX2tleVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX3B1cnBvc2VcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl90eXBlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJhZGRLZXlcIixcbiAgICAgICAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInN0YXRlTXV0YWJpbGl0eVwiOiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX2NsYWltVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ2V0Q2xhaW1JZHNCeVR5cGVcIixcbiAgICAgICAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjbGFpbUlkc1wiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlczMyW11cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInN0YXRlTXV0YWJpbGl0eVwiOiBcInZpZXdcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJjb25zdGFudFwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9jbGFpbUlkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJyZW1vdmVDbGFpbVwiLFxuICAgICAgICAgICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGF5YWJsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwibm9ucGF5YWJsZVwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnN0YW50XCI6IHRydWUsXG4gICAgICAgICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJfc3RyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX29mZnNldFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX2xlbmd0aFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ2V0Qnl0ZXNcIixcbiAgICAgICAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInN0YXRlTXV0YWJpbGl0eVwiOiBcInZpZXdcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJjb25zdGFudFwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9pZFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX2FwcHJvdmVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImFwcHJvdmVcIixcbiAgICAgICAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInN0YXRlTXV0YWJpbGl0eVwiOiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJjb25zdGFudFwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9rZXlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcInJlbW92ZUtleVwiLFxuICAgICAgICAgICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGF5YWJsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwibm9ucGF5YWJsZVwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnN0YW50XCI6IHRydWUsXG4gICAgICAgICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJfcHVycG9zZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiZ2V0S2V5c0J5UHVycG9zZVwiLFxuICAgICAgICAgICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9rZXlzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJbXVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwicGF5YWJsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwidmlld1wiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnN0YW50XCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX2NsYWltVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX3NjaGVtZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX2lzc3VlclwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX3NpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9kYXRhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX3VyaVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJhZGRDbGFpbVwiLFxuICAgICAgICAgICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNsYWltUmVxdWVzdElkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInN0YXRlTXV0YWJpbGl0eVwiOiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJjb25zdGFudFwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl90b1wiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX3ZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJfZGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcImV4ZWN1dGVcIixcbiAgICAgICAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJleGVjdXRpb25JZFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJwYXlhYmxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzdGF0ZU11dGFiaWxpdHlcIjogXCJub25wYXlhYmxlXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiY29uc3RhbnRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9jbGFpbUlkXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJnZXRDbGFpbVwiLFxuICAgICAgICAgICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNsYWltVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2NoZW1lXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpc3N1ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ1cmlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJwYXlhYmxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzdGF0ZU11dGFiaWxpdHlcIjogXCJ2aWV3XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiY29uc3RhbnRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9rZXlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9wdXJwb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJrZXlIYXNQdXJwb3NlXCIsXG4gICAgICAgICAgICBcIm91dHB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInN0YXRlTXV0YWJpbGl0eVwiOiBcInZpZXdcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImZ1bmN0aW9uXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJjb25zdGFudFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX3N0clwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJfb2Zmc2V0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJfbGVuZ3RoXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJnZXRTdHJpbmdcIixcbiAgICAgICAgICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJwYXlhYmxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJzdGF0ZU11dGFiaWxpdHlcIjogXCJ2aWV3XCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9jbGFpbVR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NltdXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX3NjaGVtZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2W11cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJfaXNzdWVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NbXVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl9zaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJfZGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIl91cmlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiX3NpZ1NpemVzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZbXVwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGFTaXplc1wiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2W11cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ1cmlTaXplc1wiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2W11cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInBheWFibGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcInN0YXRlTXV0YWJpbGl0eVwiOiBcIm5vbnBheWFibGVcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImNvbnN0cnVjdG9yXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgICAgICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2xhaW1SZXF1ZXN0SWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjbGFpbVR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2NoZW1lXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaXNzdWVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidXJpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkNsYWltUmVxdWVzdGVkXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJldmVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYW5vbnltb3VzXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNsYWltSWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjbGFpbVR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpc3N1ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2lnbmF0dXJlVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzaWduYXR1cmVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2xhaW1cIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInVyaVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJDbGFpbUFkZGVkXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJldmVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYW5vbnltb3VzXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNsYWltSWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjbGFpbVR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2NoZW1lXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaXNzdWVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidXJpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkNsYWltQWRkZWRcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImV2ZW50XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgICAgICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY2xhaW1JZFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlczMyXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNsYWltVHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJzY2hlbWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJpc3N1ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYWRkcmVzc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2lnbmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJkYXRhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ1cmlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiQ2xhaW1SZW1vdmVkXCIsXG4gICAgICAgICAgICBcInR5cGVcIjogXCJldmVudFwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYW5vbnltb3VzXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJpbnB1dHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImNsYWltSWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJjbGFpbVR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic2NoZW1lXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiaXNzdWVyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInNpZ25hdHVyZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidXJpXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkNsYWltQ2hhbmdlZFwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZXZlbnRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImFub255bW91c1wiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJleGVjdXRpb25JZFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInRvXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImFkZHJlc3NcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZGF0YVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJieXRlc1wiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIkV4ZWN1dGlvbkZhaWxlZFwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZXZlbnRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImFub255bW91c1wiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJrZXlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXMzMlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJwdXJwb3NlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwia2V5VHlwZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiS2V5QWRkZWRcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImV2ZW50XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgICAgICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwia2V5XCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJ5dGVzMzJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicHVycG9zZVwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImtleVR5cGVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibmFtZVwiOiBcIktleVJlbW92ZWRcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImV2ZW50XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgICAgICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZXhlY3V0aW9uSWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0b1wiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJFeGVjdXRpb25SZXF1ZXN0ZWRcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImV2ZW50XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJhbm9ueW1vdXNcIjogZmFsc2UsXG4gICAgICAgICAgICBcImlucHV0c1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZXhlY3V0aW9uSWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWludDI1NlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ0b1wiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJhZGRyZXNzXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpbnQyNTZcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcImluZGV4ZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRhdGFcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYnl0ZXNcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIm5hbWVcIjogXCJFeGVjdXRlZFwiLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiZXZlbnRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImFub255bW91c1wiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwiaW5kZXhlZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJleGVjdXRpb25JZFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aW50MjU2XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJpbmRleGVkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJhcHByb3ZlZFwiLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwiQXBwcm92ZWRcIixcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImV2ZW50XCJcbiAgICAgICAgfVxuICAgIF0gYXMgQWJpSXRlbVtdLFxuICAgIGRhdGE6IFwiNjA4MDYwNDA1MjM0ODAxNTYyMDAwMDExNTc2MDAwODBmZDViNTA2MDQwNTE2MjAwMzMzMzM4MDM4MDYyMDAzMzMzODMzOTgxMDE4MDYwNDA1MjgxMDE5MDgwODA1MTgyMDE5MjkxOTA2MDIwMDE4MDUxODIwMTkyOTE5MDYwMjAwMTgwNTE4MjAxOTI5MTkwNjAyMDAxODA1MTgyMDE5MjkxOTA2MDIwMDE4MDUxODIwMTkyOTE5MDYwMjAwMTgwNTE4MjAxOTI5MTkwNjAyMDAxODA1MTgyMDE5MjkxOTA2MDIwMDE4MDUxODIwMTkyOTE5MDYwMjAwMTgwNTE4MjAxOTI5MTkwNTA1MDUwNjAwMDgwNjAwMDgwNjAwMDgwMzM2MDQwNTE4MDgyNzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjZjMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjgxNTI2MDE0MDE5MTUwNTA2MDQwNTE4MDkxMDM5MDIwOTA1MDgwNjAwMTYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxODE2MDAwMTkxNjkwNTU1MDYwMDE4MDYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDAxODE5MDU1NTA2MDAxODA2MDAwODM2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDEwMTgxOTA1NTUwNjAwMjYwMDA2MDAxODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDgxOTA4MDYwMDE4MTU0MDE4MDgyNTU4MDkxNTA1MDkwNjAwMTgyMDM5MDYwMDA1MjYwMjA2MDAwMjAwMTYwMDA5MDkxOTI5MDkxOTA5MTUwOTA2MDAwMTkxNjkwNTU1MDYwMDE4MDYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDAxNTQ4MjYwMDAxOTE2N2Y0ODAwMDBiYjFlZGFkOGNhMTQ3MDM4MWNjMzM0YjE5MTdmYmQ1MWM2NTMxZjNhNjIzZWE4ZTBlYzdlMzhhNmU5NjA0MDUxNjA0MDUxODA5MTAzOTBhNDUwNjAwMDkzNTA2MDAwOTI1MDYwMDA5MTUwNjAwMDkwNTA1YjhkNTE4MTEwMTU2MjAwMDdiYTU3OGI4MTgxNTE4MTEwMTUxNTYyMDAwMjBmNTdmZTViOTA2MDIwMDE5MDYwMjAwMjAxNTE4ZTgyODE1MTgxMTAxNTE1NjIwMDAyMjg1N2ZlNWI5MDYwMjAwMTkwNjAyMDAyMDE1MTYwNDA1MTgwODM3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NmMwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyODE1MjYwMTQwMTgyODE1MjYwMjAwMTkyNTA1MDUwNjA0MDUxODA5MTAzOTAyMDk0NTA2MGMwNjA0MDUxOTA4MTAxNjA0MDUyODA4ZjgzODE1MTgxMTAxNTE1NjIwMDAyYTY1N2ZlNWI5MDYwMjAwMTkwNjAyMDAyMDE1MTgxNTI2MDIwMDE4ZTgzODE1MTgxMTAxNTE1NjIwMDAyYzQ1N2ZlNWI5MDYwMjAwMTkwNjAyMDAyMDE1MTgxNTI2MDIwMDE4ZDgzODE1MTgxMTAxNTE1NjIwMDAyZTI1N2ZlNWI5MDYwMjAwMTkwNjAyMDAyMDE1MTczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2ODE1MjYwMjAwMTYyMDAwMzNiOGQ4NzhjODY4MTUxODExMDE1MTU2MjAwMDMxYzU3ZmU1YjkwNjAyMDAxOTA2MDIwMDIwMTUxNjIwMDA3Y2U2NDAxMDAwMDAwMDAwMjY0MDEwMDAwMDAwMDkwMDQ1NjViODE1MjYwMjAwMTYyMDAwMzc0OGM4NThiODY4MTUxODExMDE1MTU2MjAwMDM1NTU3ZmU1YjkwNjAyMDAxOTA2MDIwMDIwMTUxNjIwMDA3Y2U2NDAxMDAwMDAwMDAwMjY0MDEwMDAwMDAwMDkwMDQ1NjViODE1MjYwMjAwMTYyMDAwM2FkOGI4NjhhODY4MTUxODExMDE1MTU2MjAwMDM4ZTU3ZmU1YjkwNjAyMDAxOTA2MDIwMDIwMTUxNjIwMDA4ZGE2NDAxMDAwMDAwMDAwMjY0MDEwMDAwMDAwMDkwMDQ1NjViODE1MjUwNjAwNDYwMDA4NzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDgyMDE1MTgxNjAwMDAxNTU2MDIwODIwMTUxODE2MDAxMDE1NTYwNDA4MjAxNTE4MTYwMDIwMTYwMDA2MTAxMDAwYTgxNTQ4MTczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjAyMTkxNjkwODM3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjAyMTc5MDU1NTA2MDYwODIwMTUxODE2MDAzMDE5MDgwNTE5MDYwMjAwMTkwNjIwMDA0NDQ5MjkxOTA2MjAwMDllYzU2NWI1MDYwODA4MjAxNTE4MTYwMDQwMTkwODA1MTkwNjAyMDAxOTA2MjAwMDQ2MzkyOTE5MDYyMDAwOWVjNTY1YjUwNjBhMDgyMDE1MTgxNjAwNTAxOTA4MDUxOTA2MDIwMDE5MDYyMDAwNDgyOTI5MTkwNjIwMDBhNzM1NjViNTA5MDUwNTA4NzgxODE1MTgxMTAxNTE1NjIwMDA0OTU1N2ZlNWI5MDYwMjAwMTkwNjAyMDAyMDE1MTg0MDE5MzUwODU4MTgxNTE4MTEwMTUxNTYyMDAwNGIyNTdmZTViOTA2MDIwMDE5MDYwMjAwMjAxNTE4MzAxOTI1MDg2ODE4MTUxODExMDE1MTU2MjAwMDRjZjU3ZmU1YjkwNjAyMDAxOTA2MDIwMDIwMTUxODIwMTkxNTA2MDA0NjAwMDg2NjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAyMDE2MDAwOTA1NDkwNjEwMTAwMGE5MDA0NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjYwMDQ2MDAwODc2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDAwMTU0ODY2MDAwMTkxNjdmNDYxNDliMThhYTA4NDUwMmMzZjEyYmM3NWUxOWVkYThiZGE4ZDEwMmI4MmNjZTg0NzQ2NzdhNmQwZDVmNDNjNTYwMDQ2MDAwOGE2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDEwMTU0NjAwNDYwMDA4YjYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMzAxNjAwNDYwMDA4YzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwNDAxNjAwNDYwMDA4ZDYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwNTAxNjA0MDUxODA4NTgxNTI2MDIwMDE4MDYwMjAwMTgwNjAyMDAxODA2MDIwMDE4NDgxMDM4NDUyODc4MTgxNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODE1MjYwMjAwMTkxNTA4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDgwMTU2MjAwMDY4YjU3ODA2MDFmMTA2MjAwMDY1ZjU3NjEwMTAwODA4MzU0MDQwMjgzNTI5MTYwMjAwMTkxNjIwMDA2OGI1NjViODIwMTkxOTA2MDAwNTI2MDIwNjAwMDIwOTA1YjgxNTQ4MTUyOTA2MDAxMDE5MDYwMjAwMTgwODMxMTYyMDAwNjZkNTc4MjkwMDM2MDFmMTY4MjAxOTE1YjUwNTA4NDgxMDM4MzUyODY4MTgxNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODE1MjYwMjAwMTkxNTA4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDgwMTU2MjAwMDcxMjU3ODA2MDFmMTA2MjAwMDZlNjU3NjEwMTAwODA4MzU0MDQwMjgzNTI5MTYwMjAwMTkxNjIwMDA3MTI1NjViODIwMTkxOTA2MDAwNTI2MDIwNjAwMDIwOTA1YjgxNTQ4MTUyOTA2MDAxMDE5MDYwMjAwMTgwODMxMTYyMDAwNmY0NTc4MjkwMDM2MDFmMTY4MjAxOTE1YjUwNTA4NDgxMDM4MjUyODU4MTgxNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODE1MjYwMjAwMTkxNTA4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDgwMTU2MjAwMDc5OTU3ODA2MDFmMTA2MjAwMDc2ZDU3NjEwMTAwODA4MzU0MDQwMjgzNTI5MTYwMjAwMTkxNjIwMDA3OTk1NjViODIwMTkxOTA2MDAwNTI2MDIwNjAwMDIwOTA1YjgxNTQ4MTUyOTA2MDAxMDE5MDYwMjAwMTgwODMxMTYyMDAwNzdiNTc4MjkwMDM2MDFmMTY4MjAxOTE1YjUwNTA5NzUwNTA1MDUwNTA1MDUwNTA2MDQwNTE4MDkxMDM5MGE0ODA4MDYwMDEwMTkxNTA1MDYyMDAwMWY2NTY1YjUwNTA1MDUwNTA1MDUwNTA1MDUwNTA1MDUwNTA2MjAwMGIyMjU2NWI2MDYwODA2MDAwODA4NDYwNDA1MTkwODA4MjUyODA2MDFmMDE2MDFmMTkxNjYwMjAwMTgyMDE2MDQwNTI4MDE1NjIwMDA4MDg1NzgxNjAyMDAxNjAyMDgyMDI4MDM4ODMzOTgwODIwMTkxNTA1MDkwNTA1YjUwOTI1MDYwMDA5MTUwODU5MDUwNWI4NDg2MDE4MTEwMTU2MjAwMDhjZDU3ODY4MTgxNTE4MTEwMTUxNTYyMDAwODJkNTdmZTViOTA2MDIwMDEwMTUxN2YwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOTAwNDdmMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyODM4MzgxNTE4MTEwMTUxNTYyMDAwODg3NTdmZTViOTA2MDIwMDEwMTkwN2VmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE5MTY5MDgxNjAwMDFhOTA1MzUwODE4MDYwMDEwMTkyNTA1MDgwODA2MDAxMDE5MTUwNTA2MjAwMDgxMzU2NWI4MjkzNTA1MDUwNTA5MzkyNTA1MDUwNTY1YjYwNjA4MDYwNjA2MDAwODA4NzkzNTA4NTYwNDA1MTkwODA4MjUyODA2MDFmMDE2MDFmMTkxNjYwMjAwMTgyMDE2MDQwNTI4MDE1NjIwMDA5MTk1NzgxNjAyMDAxNjAyMDgyMDI4MDM4ODMzOTgwODIwMTkxNTA1MDkwNTA1YjUwOTI1MDYwMDA5MTUwODY5MDUwNWI4NTg3MDE4MTEwMTU2MjAwMDlkZTU3ODM4MTgxNTE4MTEwMTUxNTYyMDAwOTNlNTdmZTViOTA2MDIwMDEwMTUxN2YwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOTAwNDdmMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyODM4MzgxNTE4MTEwMTUxNTYyMDAwOTk4NTdmZTViOTA2MDIwMDEwMTkwN2VmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE5MTY5MDgxNjAwMDFhOTA1MzUwODE4MDYwMDEwMTkyNTA1MDgwODA2MDAxMDE5MTUwNTA2MjAwMDkyNDU2NWI4Mjk0NTA1MDUwNTA1MDkzOTI1MDUwNTA1NjViODI4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDkwNjAwMDUyNjAyMDYwMDAyMDkwNjAxZjAxNjAyMDkwMDQ4MTAxOTI4MjYwMWYxMDYyMDAwYTJmNTc4MDUxNjBmZjE5MTY4MzgwMDExNzg1NTU2MjAwMGE2MDU2NWI4MjgwMDE2MDAxMDE4NTU1ODIxNTYyMDAwYTYwNTc5MTgyMDE1YjgyODExMTE1NjIwMDBhNWY1NzgyNTE4MjU1OTE2MDIwMDE5MTkwNjAwMTAxOTA2MjAwMGE0MjU2NWI1YjUwOTA1MDYyMDAwYTZmOTE5MDYyMDAwYWZhNTY1YjUwOTA1NjViODI4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDkwNjAwMDUyNjAyMDYwMDAyMDkwNjAxZjAxNjAyMDkwMDQ4MTAxOTI4MjYwMWYxMDYyMDAwYWI2NTc4MDUxNjBmZjE5MTY4MzgwMDExNzg1NTU2MjAwMGFlNzU2NWI4MjgwMDE2MDAxMDE4NTU1ODIxNTYyMDAwYWU3NTc5MTgyMDE1YjgyODExMTE1NjIwMDBhZTY1NzgyNTE4MjU1OTE2MDIwMDE5MTkwNjAwMTAxOTA2MjAwMGFjOTU2NWI1YjUwOTA1MDYyMDAwYWY2OTE5MDYyMDAwYWZhNTY1YjUwOTA1NjViNjIwMDBiMWY5MTkwNWI4MDgyMTExNTYyMDAwYjFiNTc2MDAwODE2MDAwOTA1NTUwNjAwMTAxNjIwMDBiMDE1NjViNTA5MDU2NWI5MDU2NWI2MTI4MDE4MDYyMDAwYjMyNjAwMDM5NjAwMGYzMDA2MDgwNjA0MDUyNjAwNDM2MTA2MTAwZDA1NzYwMDAzNTdjMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDkwMDQ2M2ZmZmZmZmZmMTY4MDYzMDMyYzFhOGExNDYxMDBkNTU3ODA2MzEyYWFhYzcwMTQ2MTAxMWE1NzgwNjMxZDM4MTI0MDE0NjEwMTc1NTc4MDYzMjYyYjU0ZjUxNDYxMDFkMjU3ODA2MzRlZWU0MjRhMTQ2MTAyNTQ1NzgwNjM1ZDJjZmQ2MTE0NjEwMjlkNTc4MDYzNzQ3NDQyZDMxNDYxMDM5MzU3ODA2Mzg2MjY0MmY1MTQ2MTAzZTQ1NzgwNjM5MDEwZjcyNjE0NjEwNDJkNTc4MDYzYjFhMzRlMGQxNDYxMDRhZjU3ODA2M2I2MWQyN2Y2MTQ2MTA1ZjQ1NzgwNjNjOTEwMGJjYjE0NjEwNjliNTc4MDYzZDIwMjE1OGQxNDYxMDg1ZTU3ODA2M2RmOTMxOWJlMTQ2MTA4YjE1NzViNjAwMDgwZmQ1YjM0ODAxNTYxMDBlMTU3NjAwMDgwZmQ1YjUwNjEwMTA0NjAwNDgwMzYwMzgxMDE5MDgwODAzNTYwMDAxOTE2OTA2MDIwMDE5MDkyOTE5MDUwNTA1MDYxMDlhNzU2NWI2MDQwNTE4MDgyODE1MjYwMjAwMTkxNTA1MDYwNDA1MTgwOTEwMzkwZjM1YjM0ODAxNTYxMDEyNjU3NjAwMDgwZmQ1YjUwNjEwMTQ5NjAwNDgwMzYwMzgxMDE5MDgwODAzNTYwMDAxOTE2OTA2MDIwMDE5MDkyOTE5MDUwNTA1MDYxMDljZjU2NWI2MDQwNTE4MDg0ODE1MjYwMjAwMTgzODE1MjYwMjAwMTgyNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MzUwNTA1MDUwNjA0MDUxODA5MTAzOTBmMzViMzQ4MDE1NjEwMTgxNTc2MDAwODBmZDViNTA2MTAxYjg2MDA0ODAzNjAzODEwMTkwODA4MDM1NjAwMDE5MTY5MDYwMjAwMTkwOTI5MTkwODAzNTkwNjAyMDAxOTA5MjkxOTA4MDM1OTA2MDIwMDE5MDkyOTE5MDUwNTA1MDYxMGEzZTU2NWI2MDQwNTE4MDgyMTUxNTE1MTU4MTUyNjAyMDAxOTE1MDUwNjA0MDUxODA5MTAzOTBmMzViMzQ4MDE1NjEwMWRlNTc2MDAwODBmZDViNTA2MTAxZmQ2MDA0ODAzNjAzODEwMTkwODA4MDM1OTA2MDIwMDE5MDkyOTE5MDUwNTA1MDYxMGNmNzU2NWI2MDQwNTE4MDgwNjAyMDAxODI4MTAzODI1MjgzODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDYwMjAwMjgwODM4MzYwMDA1YjgzODExMDE1NjEwMjQwNTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjEwMjI1NTY1YjUwNTA1MDUwOTA1MDAxOTI1MDUwNTA2MDQwNTE4MDkxMDM5MGYzNWIzNDgwMTU2MTAyNjA1NzYwMDA4MGZkNWI1MDYxMDI4MzYwMDQ4MDM2MDM4MTAxOTA4MDgwMzU2MDAwMTkxNjkwNjAyMDAxOTA5MjkxOTA1MDUwNTA2MTBkNjY1NjViNjA0MDUxODA4MjE1MTUxNTE1ODE1MjYwMjAwMTkxNTA1MDYwNDA1MTgwOTEwMzkwZjM1YjM0ODAxNTYxMDJhOTU3NjAwMDgwZmQ1YjUwNjEwMzE4NjAwNDgwMzYwMzgxMDE5MDgwODAzNTkwNjAyMDAxOTA4MjAxODAzNTkwNjAyMDAxOTA4MDgwNjAxZjAxNjAyMDgwOTEwNDAyNjAyMDAxNjA0MDUxOTA4MTAxNjA0MDUyODA5MzkyOTE5MDgxODE1MjYwMjAwMTgzODM4MDgyODQzNzgyMDE5MTUwNTA1MDUwNTA1MDkxOTI5MTkyOTA4MDM1OTA2MDIwMDE5MDkyOTE5MDgwMzU5MDYwMjAwMTkwOTI5MTkwNTA1MDUwNjExMWU0NTY1YjYwNDA1MTgwODA2MDIwMDE4MjgxMDM4MjUyODM4MTgxNTE4MTUyNjAyMDAxOTE1MDgwNTE5MDYwMjAwMTkwODA4MzgzNjAwMDViODM4MTEwMTU2MTAzNTg1NzgwODIwMTUxODE4NDAxNTI2MDIwODEwMTkwNTA2MTAzM2Q1NjViNTA1MDUwNTA5MDUwOTA4MTAxOTA2MDFmMTY4MDE1NjEwMzg1NTc4MDgyMDM4MDUxNjAwMTgzNjAyMDAzNjEwMTAwMGEwMzE5MTY4MTUyNjAyMDAxOTE1MDViNTA5MjUwNTA1MDYwNDA1MTgwOTEwMzkwZjM1YjM0ODAxNTYxMDM5ZjU3NjAwMDgwZmQ1YjUwNjEwM2NhNjAwNDgwMzYwMzgxMDE5MDgwODAzNTkwNjAyMDAxOTA5MjkxOTA4MDM1MTUxNTkwNjAyMDAxOTA5MjkxOTA1MDUwNTA2MTEyZWI1NjViNjA0MDUxODA4MjE1MTUxNTE1ODE1MjYwMjAwMTkxNTA1MDYwNDA1MTgwOTEwMzkwZjM1YjM0ODAxNTYxMDNmMDU3NjAwMDgwZmQ1YjUwNjEwNDEzNjAwNDgwMzYwMzgxMDE5MDgwODAzNTYwMDAxOTE2OTA2MDIwMDE5MDkyOTE5MDUwNTA1MDYxMTdmZjU2NWI2MDQwNTE4MDgyMTUxNTE1MTU4MTUyNjAyMDAxOTE1MDUwNjA0MDUxODA5MTAzOTBmMzViMzQ4MDE1NjEwNDM5NTc2MDAwODBmZDViNTA2MTA0NTg2MDA0ODAzNjAzODEwMTkwODA4MDM1OTA2MDIwMDE5MDkyOTE5MDUwNTA1MDYxMTk2YTU2NWI2MDQwNTE4MDgwNjAyMDAxODI4MTAzODI1MjgzODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDYwMjAwMjgwODM4MzYwMDA1YjgzODExMDE1NjEwNDliNTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjEwNDgwNTY1YjUwNTA1MDUwOTA1MDAxOTI1MDUwNTA2MDQwNTE4MDkxMDM5MGYzNWIzNDgwMTU2MTA0YmI1NzYwMDA4MGZkNWI1MDYxMDVkNjYwMDQ4MDM2MDM4MTAxOTA4MDgwMzU5MDYwMjAwMTkwOTI5MTkwODAzNTkwNjAyMDAxOTA5MjkxOTA4MDM1NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY5MDYwMjAwMTkwOTI5MTkwODAzNTkwNjAyMDAxOTA4MjAxODAzNTkwNjAyMDAxOTA4MDgwNjAxZjAxNjAyMDgwOTEwNDAyNjAyMDAxNjA0MDUxOTA4MTAxNjA0MDUyODA5MzkyOTE5MDgxODE1MjYwMjAwMTgzODM4MDgyODQzNzgyMDE5MTUwNTA1MDUwNTA1MDkxOTI5MTkyOTA4MDM1OTA2MDIwMDE5MDgyMDE4MDM1OTA2MDIwMDE5MDgwODA2MDFmMDE2MDIwODA5MTA0MDI2MDIwMDE2MDQwNTE5MDgxMDE2MDQwNTI4MDkzOTI5MTkwODE4MTUyNjAyMDAxODM4MzgwODI4NDM3ODIwMTkxNTA1MDUwNTA1MDUwOTE5MjkxOTI5MDgwMzU5MDYwMjAwMTkwODIwMTgwMzU5MDYwMjAwMTkwODA4MDYwMWYwMTYwMjA4MDkxMDQwMjYwMjAwMTYwNDA1MTkwODEwMTYwNDA1MjgwOTM5MjkxOTA4MTgxNTI2MDIwMDE4MzgzODA4Mjg0Mzc4MjAxOTE1MDUwNTA1MDUwNTA5MTkyOTE5MjkwNTA1MDUwNjExOWQ5NTY1YjYwNDA1MTgwODI2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkxNTA1MDYwNDA1MTgwOTEwMzkwZjM1YjM0ODAxNTYxMDYwMDU3NjAwMDgwZmQ1YjUwNjEwNjg1NjAwNDgwMzYwMzgxMDE5MDgwODAzNTczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2OTA2MDIwMDE5MDkyOTE5MDgwMzU5MDYwMjAwMTkwOTI5MTkwODAzNTkwNjAyMDAxOTA4MjAxODAzNTkwNjAyMDAxOTA4MDgwNjAxZjAxNjAyMDgwOTEwNDAyNjAyMDAxNjA0MDUxOTA4MTAxNjA0MDUyODA5MzkyOTE5MDgxODE1MjYwMjAwMTgzODM4MDgyODQzNzgyMDE5MTUwNTA1MDUwNTA1MDkxOTI5MTkyOTA1MDUwNTA2MTFlZmU1NjViNjA0MDUxODA4MjgxNTI2MDIwMDE5MTUwNTA2MDQwNTE4MDkxMDM5MGYzNWIzNDgwMTU2MTA2YTc1NzYwMDA4MGZkNWI1MDYxMDZjYTYwMDQ4MDM2MDM4MTAxOTA4MDgwMzU2MDAwMTkxNjkwNjAyMDAxOTA5MjkxOTA1MDUwNTA2MTIxZTA1NjViNjA0MDUxODA4NzgxNTI2MDIwMDE4NjgxNTI2MDIwMDE4NTczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY4MTUyNjAyMDAxODA2MDIwMDE4MDYwMjAwMTgwNjAyMDAxODQ4MTAzODQ1Mjg3ODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDgwODM4MzYwMDA1YjgzODExMDE1NjEwNzUwNTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjEwNzM1NTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMDc3ZDU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwODQ4MTAzODM1Mjg2ODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDgwODM4MzYwMDA1YjgzODExMDE1NjEwN2I2NTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjEwNzliNTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMDdlMzU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwODQ4MTAzODI1Mjg1ODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDgwODM4MzYwMDA1YjgzODExMDE1NjEwODFjNTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjEwODAxNTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMDg0OTU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwOTk1MDUwNTA1MDUwNTA1MDUwNTA1MDYwNDA1MTgwOTEwMzkwZjM1YjM0ODAxNTYxMDg2YTU3NjAwMDgwZmQ1YjUwNjEwODk3NjAwNDgwMzYwMzgxMDE5MDgwODAzNTYwMDAxOTE2OTA2MDIwMDE5MDkyOTE5MDgwMzU5MDYwMjAwMTkwOTI5MTkwNTA1MDUwNjEyNGFhNTY1YjYwNDA1MTgwODIxNTE1MTUxNTgxNTI2MDIwMDE5MTUwNTA2MDQwNTE4MDkxMDM5MGYzNWIzNDgwMTU2MTA4YmQ1NzYwMDA4MGZkNWI1MDYxMDkyYzYwMDQ4MDM2MDM4MTAxOTA4MDgwMzU5MDYwMjAwMTkwODIwMTgwMzU5MDYwMjAwMTkwODA4MDYwMWYwMTYwMjA4MDkxMDQwMjYwMjAwMTYwNDA1MTkwODEwMTYwNDA1MjgwOTM5MjkxOTA4MTgxNTI2MDIwMDE4MzgzODA4Mjg0Mzc4MjAxOTE1MDUwNTA1MDUwNTA5MTkyOTE5MjkwODAzNTkwNjAyMDAxOTA5MjkxOTA4MDM1OTA2MDIwMDE5MDkyOTE5MDUwNTA1MDYxMjUxMzU2NWI2MDQwNTE4MDgwNjAyMDAxODI4MTAzODI1MjgzODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDgwODM4MzYwMDA1YjgzODExMDE1NjEwOTZjNTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjEwOTUxNTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMDk5OTU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwOTI1MDUwNTA2MDQwNTE4MDkxMDM5MGYzNWI2MDAwNjAwMTYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDAxNTQ5MDUwOTE5MDUwNTY1YjYwMDA4MDYwMDA2MDAxNjAwMDg1NjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAwMDE1NDYwMDE2MDAwODY2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDEwMTU0NjAwMTYwMDA4NzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxNTQ5MjUwOTI1MDkyNTA5MTkzOTA5MjUwNTY1YjYwMDA4MzYwMDAxOTE2NjAwMTYwMDA4NjYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxNTQ2MDAwMTkxNjE0MTUxNTE1NjEwYWRlNTc2MDQwNTE3ZjA4YzM3OWEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MTUyNjAwNDAxODA4MDYwMjAwMTgyODEwMzgyNTI2MDEyODE1MjYwMjAwMTgwN2Y0YjY1NzkyMDYxNmM3MjY1NjE2NDc5MjA2NTc4Njk3Mzc0NzMwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODE1MjUwNjAyMDAxOTE1MDUwNjA0MDUxODA5MTAzOTBmZDViMzA3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjMzNzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTYxNDE1MTU2MTBjMDk1NzYxMGI2ZTMzNjA0MDUxODA4MjczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY2YzAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI4MTUyNjAxNDAxOTE1MDUwNjA0MDUxODA5MTAzOTAyMDYwMDE2MTI0YWE1NjViMTUxNTYxMGMwODU3NjA0MDUxN2YwOGMzNzlhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODE1MjYwMDQwMTgwODA2MDIwMDE4MjgxMDM4MjUyNjAyMzgxNTI2MDIwMDE4MDdmNTM2NTZlNjQ2NTcyMjA2NDZmNjU3MzIwNmU2Zjc0MjA2ODYxNzY2NTIwNmQ2MTZlNjE2NzY1NmQ2NTZlNzQyMDgxNTI2MDIwMDE3ZjZiNjU3OTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MTUyNTA2MDQwMDE5MTUwNTA2MDQwNTE4MDkxMDM5MGZkNWI1YjgzNjAwMTYwMDA4NjYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxODE2MDAwMTkxNjkwNTU1MDgyNjAwMTYwMDA4NjYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDAxODE5MDU1NTA4MTYwMDE2MDAwODY2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDEwMTgxOTA1NTUwNjAwMjYwMDA4NDgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA4NDkwODA2MDAxODE1NDAxODA4MjU1ODA5MTUwNTA5MDYwMDE4MjAzOTA2MDAwNTI2MDIwNjAwMDIwMDE2MDAwOTA5MTkyOTA5MTkwOTE1MDkwNjAwMDE5MTY5MDU1NTA4MTgzODU2MDAwMTkxNjdmNDgwMDAwYmIxZWRhZDhjYTE0NzAzODFjYzMzNGIxOTE3ZmJkNTFjNjUzMWYzYTYyM2VhOGUwZWM3ZTM4YTZlOTYwNDA1MTYwNDA1MTgwOTEwMzkwYTQ2MDAxOTA1MDkzOTI1MDUwNTA1NjViNjA2MDYwMDU2MDAwODM4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwODA1NDgwNjAyMDAyNjAyMDAxNjA0MDUxOTA4MTAxNjA0MDUyODA5MjkxOTA4MTgxNTI2MDIwMDE4MjgwNTQ4MDE1NjEwZDVhNTc2MDIwMDI4MjAxOTE5MDYwMDA1MjYwMjA2MDAwMjA5MDViODE1NDYwMDAxOTE2ODE1MjYwMjAwMTkwNjAwMTAxOTA4MDgzMTE2MTBkNDI1NzViNTA1MDUwNTA1MDkwNTA5MTkwNTA1NjViNjAwMDMwNzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTYzMzczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2MTQxNTE1NjEwZTkzNTc2MTBkZjgzMzYwNDA1MTgwODI3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NmMwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyODE1MjYwMTQwMTkxNTA1MDYwNDA1MTgwOTEwMzkwMjA2MDAxNjEyNGFhNTY1YjE1MTU2MTBlOTI1NzYwNDA1MTdmMDhjMzc5YTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgxNTI2MDA0MDE4MDgwNjAyMDAxODI4MTAzODI1MjYwMjM4MTUyNjAyMDAxODA3ZjUzNjU2ZTY0NjU3MjIwNjQ2ZjY1NzMyMDZlNmY3NDIwNjg2MTc2NjUyMDZkNjE2ZTYxNjc2NTZkNjU2ZTc0MjA4MTUyNjAyMDAxN2Y2YjY1NzkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODE1MjUwNjA0MDAxOTE1MDUwNjA0MDUxODA5MTAzOTBmZDViNWI2MDA0NjAwMDgzNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAyMDE2MDAwOTA1NDkwNjEwMTAwMGE5MDA0NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjYwMDQ2MDAwODQ2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDAwMTU0ODM2MDAwMTkxNjdmM2NmNTc4NjNhODk0MzJjNjFjNGEyNzA3M2M2ZWUzOWU4YTc2NGJmZjVhMDVhZWJmYmNkY2RjODBiMmU2MTMwYTYwMDQ2MDAwODc2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDEwMTU0NjAwNDYwMDA4ODYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMzAxNjAwNDYwMDA4OTYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwNDAxNjAwNDYwMDA4YTYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwNTAxNjA0MDUxODA4NTgxNTI2MDIwMDE4MDYwMjAwMTgwNjAyMDAxODA2MDIwMDE4NDgxMDM4NDUyODc4MTgxNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODE1MjYwMjAwMTkxNTA4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDgwMTU2MTEwM2Q1NzgwNjAxZjEwNjExMDEyNTc2MTAxMDA4MDgzNTQwNDAyODM1MjkxNjAyMDAxOTE2MTEwM2Q1NjViODIwMTkxOTA2MDAwNTI2MDIwNjAwMDIwOTA1YjgxNTQ4MTUyOTA2MDAxMDE5MDYwMjAwMTgwODMxMTYxMTAyMDU3ODI5MDAzNjAxZjE2ODIwMTkxNWI1MDUwODQ4MTAzODM1Mjg2ODE4MTU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDgxNTI2MDIwMDE5MTUwODA1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ4MDE1NjExMGMwNTc4MDYwMWYxMDYxMTA5NTU3NjEwMTAwODA4MzU0MDQwMjgzNTI5MTYwMjAwMTkxNjExMGMwNTY1YjgyMDE5MTkwNjAwMDUyNjAyMDYwMDAyMDkwNWI4MTU0ODE1MjkwNjAwMTAxOTA2MDIwMDE4MDgzMTE2MTEwYTM1NzgyOTAwMzYwMWYxNjgyMDE5MTViNTA1MDg0ODEwMzgyNTI4NTgxODE1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ4MTUyNjAyMDAxOTE1MDgwNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODAxNTYxMTE0MzU3ODA2MDFmMTA2MTExMTg1NzYxMDEwMDgwODM1NDA0MDI4MzUyOTE2MDIwMDE5MTYxMTE0MzU2NWI4MjAxOTE5MDYwMDA1MjYwMjA2MDAwMjA5MDViODE1NDgxNTI5MDYwMDEwMTkwNjAyMDAxODA4MzExNjExMTI2NTc4MjkwMDM2MDFmMTY4MjAxOTE1YjUwNTA5NzUwNTA1MDUwNTA1MDUwNTA2MDQwNTE4MDkxMDM5MGE0NjAwNDYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDgwODIwMTYwMDA5MDU1NjAwMTgyMDE2MDAwOTA1NTYwMDI4MjAxNjAwMDYxMDEwMDBhODE1NDkwNzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMDIxOTE2OTA1NTYwMDM4MjAxNjAwMDYxMTFiOTkxOTA2MTI2MjA1NjViNjAwNDgyMDE2MDAwNjExMWM5OTE5MDYxMjYyMDU2NWI2MDA1ODIwMTYwMDA2MTExZDk5MTkwNjEyNjY4NTY1YjUwNTA2MDAxOTA1MDkxOTA1MDU2NWI2MDYwODA2MDAwODA4NDYwNDA1MTkwODA4MjUyODA2MDFmMDE2MDFmMTkxNjYwMjAwMTgyMDE2MDQwNTI4MDE1NjExMjFkNTc4MTYwMjAwMTYwMjA4MjAyODAzODgzMzk4MDgyMDE5MTUwNTA5MDUwNWI1MDkyNTA2MDAwOTE1MDg1OTA1MDViODQ4NjAxODExMDE1NjExMmRlNTc4NjgxODE1MTgxMTAxNTE1NjExMjQwNTdmZTViOTA2MDIwMDEwMTUxN2YwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwOTAwNDdmMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyODM4MzgxNTE4MTEwMTUxNTYxMTI5OTU3ZmU1YjkwNjAyMDAxMDE5MDdlZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxOTE2OTA4MTYwMDAxYTkwNTM1MDgxODA2MDAxMDE5MjUwNTA4MDgwNjAwMTAxOTE1MDUwNjExMjI4NTY1YjgyOTM1MDUwNTA1MDkzOTI1MDUwNTA1NjViNjAwMDYxMTM0ODMzNjA0MDUxODA4MjczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY2YzAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI4MTUyNjAxNDAxOTE1MDUwNjA0MDUxODA5MTAzOTAyMDYwMDI2MTI0YWE1NjViMTUxNTYxMTNiYzU3NjA0MDUxN2YwOGMzNzlhMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODE1MjYwMDQwMTgwODA2MDIwMDE4MjgxMDM4MjUyNjAxZjgxNTI2MDIwMDE4MDdmNTM2NTZlNjQ2NTcyMjA2NDZmNjU3MzIwNmU2Zjc0MjA2ODYxNzY2NTIwNjE2Mzc0Njk2ZjZlMjA2YjY1NzkwMDgxNTI1MDYwMjAwMTkxNTA1MDYwNDA1MTgwOTEwMzkwZmQ1YjgyN2ZiMzkzMmRhNDc3ZmU1ZDZjOGZmMmVhZmVmMDUwYzBmM2ExYWYxOGZjMDcxMjEwMDE0ODI2MDBmMzZmMzcxNWQ4ODM2MDQwNTE4MDgyMTUxNTE1MTU4MTUyNjAyMDAxOTE1MDUwNjA0MDUxODA5MTAzOTBhMjYwMDExNTE1ODIxNTE1MTQxNTYxMTdjNTU3NjAwMTYwMDM2MDAwODU4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMzAxNjAwMDYxMDEwMDBhODE1NDgxNjBmZjAyMTkxNjkwODMxNTE1MDIxNzkwNTU1MDYwMDM2MDAwODQ4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDAxNjAwMDkwNTQ5MDYxMDEwMDBhOTAwNDczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY2MDAzNjAwMDg1ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDIwMTYwMDA2MDQwNTE4MDgzODA1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ4MDE1NjExNGZlNTc4MDYwMWYxMDYxMTRkMzU3NjEwMTAwODA4MzU0MDQwMjgzNTI5MTYwMjAwMTkxNjExNGZlNTY1YjgyMDE5MTkwNjAwMDUyNjAyMDYwMDAyMDkwNWI4MTU0ODE1MjkwNjAwMTAxOTA2MDIwMDE4MDgzMTE2MTE0ZTE1NzgyOTAwMzYwMWYxNjgyMDE5MTViNTA1MDgyNjBmZjE2ODE1MjYwMjAwMTkyNTA1MDUwNjAwMDYwNDA1MTgwODMwMzgxNjAwMDg2NWFmMTkxNTA1MDkwNTA4MDE1NjExNjhkNTc2MDAxNjAwMzYwMDA4NTgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAzMDE2MDAxNjEwMTAwMGE4MTU0ODE2MGZmMDIxOTE2OTA4MzE1MTUwMjE3OTA1NTUwNjAwMzYwMDA4NDgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAxMDE1NDYwMDM2MDAwODU4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDAxNjAwMDkwNTQ5MDYxMDEwMDBhOTAwNDczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY4NDdmMWY5MjBkYmRhNTk3ZDdiZjk1MDM1NDY0MTcwZmE1OGQwYTRiNTdmMTNhMWMzMTVhY2U2NzkzYjlmNjM2ODhiODYwMDM2MDAwODg4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxNjA0MDUxODA4MDYwMjAwMTgyODEwMzgyNTI4MzgxODE1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ4MTUyNjAyMDAxOTE1MDgwNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODAxNTYxMTY3YTU3ODA2MDFmMTA2MTE2NGY1NzYxMDEwMDgwODM1NDA0MDI4MzUyOTE2MDIwMDE5MTYxMTY3YTU2NWI4MjAxOTE5MDYwMDA1MjYwMjA2MDAwMjA5MDViODE1NDgxNTI5MDYwMDEwMTkwNjAyMDAxODA4MzExNjExNjVkNTc4MjkwMDM2MDFmMTY4MjAxOTE1YjUwNTA5MjUwNTA1MDYwNDA1MTgwOTEwMzkwYTQ2MTE3Zjk1NjViNjAwMzYwMDA4NDgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAxMDE1NDYwMDM2MDAwODU4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDAxNjAwMDkwNTQ5MDYxMDEwMDBhOTAwNDczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY4NDdmZTEwYzQ5ZDlmN2M3MWRhMjMyNjIzNjcwMTM0MzQ3NjNjZmRiMjMzMjI2NzY0MTcyOGQyNWNkNzEyYzVjNmE2ODYwMDM2MDAwODg4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxNjA0MDUxODA4MDYwMjAwMTgyODEwMzgyNTI4MzgxODE1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ4MTUyNjAyMDAxOTE1MDgwNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODAxNTYxMTdiMjU3ODA2MDFmMTA2MTE3ODc1NzYxMDEwMDgwODM1NDA0MDI4MzUyOTE2MDIwMDE5MTYxMTdiMjU2NWI4MjAxOTE5MDYwMDA1MjYwMjA2MDAwMjA5MDViODE1NDgxNTI5MDYwMDEwMTkwNjAyMDAxODA4MzExNjExNzk1NTc4MjkwMDM2MDFmMTY4MjAxOTE1YjUwNTA5MjUwNTA1MDYwNDA1MTgwOTEwMzkwYTQ2MTE3Zjk1NjViNjAwMDYwMDM2MDAwODU4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMzAxNjAwMDYxMDEwMDBhODE1NDgxNjBmZjAyMTkxNjkwODMxNTE1MDIxNzkwNTU1MDYwMDE5MDUwNWI5MjkxNTA1MDU2NWI2MDAwODE2MDAwMTkxNjYwMDE2MDAwODQ2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDIwMTU0NjAwMDE5MTYxNDE1MTU2MTE4OWU1NzYwNDA1MTdmMDhjMzc5YTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgxNTI2MDA0MDE4MDgwNjAyMDAxODI4MTAzODI1MjYwMGI4MTUyNjAyMDAxODA3ZjRlNmYyMDczNzU2MzY4MjA2YjY1NzkwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MTUyNTA2MDIwMDE5MTUwNTA2MDQwNTE4MDkxMDM5MGZkNWI2MDAxNjAwMDgzNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAxMDE1NDYwMDE2MDAwODQ2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDAwMTU0NjAwMTYwMDA4NTYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxNTQ2MDAwMTkxNjdmNTg1YTRhZWY1MGY4MjY3YTkyYjMyNDEyYjMzMWIyMGY3ZjhiOTZmMjI0NWIyNTNiOWNjNTBkY2M2MjFkMzM5NzYwNDA1MTYwNDA1MTgwOTEwMzkwYTQ2MDAxNjAwMDgzNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAwODA4MjAxNjAwMDkwNTU2MDAxODIwMTYwMDA5MDU1NjAwMjgyMDE2MDAwOTA1NTUwNTA2MDAxOTA1MDkxOTA1MDU2NWI2MDYwNjAwMjYwMDA4MzgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA4MDU0ODA2MDIwMDI2MDIwMDE2MDQwNTE5MDgxMDE2MDQwNTI4MDkyOTE5MDgxODE1MjYwMjAwMTgyODA1NDgwMTU2MTE5Y2Q1NzYwMjAwMjgyMDE5MTkwNjAwMDUyNjAyMDYwMDAyMDkwNWI4MTU0NjAwMDE5MTY4MTUyNjAyMDAxOTA2MDAxMDE5MDgwODMxMTYxMTliNTU3NWI1MDUwNTA1MDUwOTA1MDkxOTA1MDU2NWI2MDAwODA4NTg4NjA0MDUxODA4MzczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY2YzAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDI4MTUyNjAxNDAxODI4MTUyNjAyMDAxOTI1MDUwNTA2MDQwNTE4MDkxMDM5MDIwOTA1MDMwNzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTYzMzczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2MTQxNTE1NjExYjYyNTc2MTFhYzczMzYwNDA1MTgwODI3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NmMwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyODE1MjYwMTQwMTkxNTA1MDYwNDA1MTgwOTEwMzkwMjA2MDAzNjEyNGFhNTY1YjE1MTU2MTFiNjE1NzYwNDA1MTdmMDhjMzc5YTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgxNTI2MDA0MDE4MDgwNjAyMDAxODI4MTAzODI1MjYwMjU4MTUyNjAyMDAxODA3ZjUzNjU2ZTY0NjU3MjIwNjQ2ZjY1NzMyMDZlNmY3NDIwNjg2MTc2NjUyMDYzNmM2MTY5NmQyMDczNjk2NzZlNjU4MTUyNjAyMDAxN2Y3MjIwNmI2NTc5MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwODE1MjUwNjA0MDAxOTE1MDUwNjA0MDUxODA5MTAzOTBmZDViNWI4NTczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NjAwNDYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxNjAwMDkwNTQ5MDYxMDEwMDBhOTAwNDczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTYxNDE1MTU2MTFjMTk1NzYwMDU2MDAwODk4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwODE5MDgwNjAwMTgxNTQwMTgwODI1NTgwOTE1MDUwOTA2MDAxODIwMzkwNjAwMDUyNjAyMDYwMDAyMDAxNjAwMDkwOTE5MjkwOTE5MDkxNTA5MDYwMDAxOTE2OTA1NTUwNWI4NzYwMDQ2MDAwODM2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDAwMTgxOTA1NTUwODY2MDA0NjAwMDgzNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAxMDE4MTkwNTU1MDg1NjAwNDYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxNjAwMDYxMDEwMDBhODE1NDgxNzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMDIxOTE2OTA4MzczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2MDIxNzkwNTU1MDg0NjAwNDYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMzAxOTA4MDUxOTA2MDIwMDE5MDYxMWNlZTkyOTE5MDYxMjZiMDU2NWI1MDgzNjAwNDYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwNDAxOTA4MDUxOTA2MDIwMDE5MDYxMWQyMTkyOTE5MDYxMjZiMDU2NWI1MDgyNjAwNDYwMDA4MzYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwNTAxOTA4MDUxOTA2MDIwMDE5MDYxMWQ1NDkyOTE5MDYxMjczMDU2NWI1MDg1NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY4ODgyNjAwMDE5MTY3ZjQ2MTQ5YjE4YWEwODQ1MDJjM2YxMmJjNzVlMTllZGE4YmRhOGQxMDJiODJjY2U4NDc0Njc3YTZkMGQ1ZjQzYzU4YTg5ODk4OTYwNDA1MTgwODU4MTUyNjAyMDAxODA2MDIwMDE4MDYwMjAwMTgwNjAyMDAxODQ4MTAzODQ1Mjg3ODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDgwODM4MzYwMDA1YjgzODExMDE1NjExZGU1NTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjExZGNhNTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMWUxMjU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwODQ4MTAzODM1Mjg2ODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDgwODM4MzYwMDA1YjgzODExMDE1NjExZTRiNTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjExZTMwNTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMWU3ODU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwODQ4MTAzODI1Mjg1ODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDgwODM4MzYwMDA1YjgzODExMDE1NjExZWIxNTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjExZTk2NTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMWVkZTU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwOTc1MDUwNTA1MDUwNTA1MDUwNjA0MDUxODA5MTAzOTBhNDgwOTE1MDUwOTY5NTUwNTA1MDUwNTA1MDU2NWI2MDAwNjAwMzYwMDA4MDU0ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDMwMTYwMDE5MDU0OTA2MTAxMDAwYTkwMDQ2MGZmMTYxNTE1MTU2MTFmOWE1NzYwNDA1MTdmMDhjMzc5YTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDgxNTI2MDA0MDE4MDgwNjAyMDAxODI4MTAzODI1MjYwMTA4MTUyNjAyMDAxODA3ZjQxNmM3MjY1NjE2NDc5MjA2NTc4NjU2Mzc1NzQ2NTY0MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA4MTUyNTA2MDIwMDE5MTUwNTA2MDQwNTE4MDkxMDM5MGZkNWI4MzYwMDM2MDAwODA1NDgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAwMDE2MDAwNjEwMTAwMGE4MTU0ODE3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYwMjE5MTY5MDgzNzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTYwMjE3OTA1NTUwODI2MDAzNjAwMDgwNTQ4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMTAxODE5MDU1NTA4MTYwMDM2MDAwODA1NDgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAyMDE5MDgwNTE5MDYwMjAwMTkwNjEyMDM3OTI5MTkwNjEyNmIwNTY1YjUwODI4NDczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NjAwMDU0N2Y4YWZjZmFiY2IwMGU0N2E1M2E4ZmMzZTlmMjNmZjQ3ZWUxOTI2MTk0YmIxMzUwZGQwMDdjNTBiNDEyYTZjZWU4ODU2MDQwNTE4MDgwNjAyMDAxODI4MTAzODI1MjgzODE4MTUxODE1MjYwMjAwMTkxNTA4MDUxOTA2MDIwMDE5MDgwODM4MzYwMDA1YjgzODExMDE1NjEyMGI1NTc4MDgyMDE1MTgxODQwMTUyNjAyMDgxMDE5MDUwNjEyMDlhNTY1YjUwNTA1MDUwOTA1MDkwODEwMTkwNjAxZjE2ODAxNTYxMjBlMjU3ODA4MjAzODA1MTYwMDE4MzYwMjAwMzYxMDEwMDBhMDMxOTE2ODE1MjYwMjAwMTkxNTA1YjUwOTI1MDUwNTA2MDQwNTE4MDkxMDM5MGE0NjEyMTRhMzM2MDQwNTE4MDgyNzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjZjMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjgxNTI2MDE0MDE5MTUwNTA2MDQwNTE4MDkxMDM5MDIwNjAwMTYxMjRhYTU2NWI4MDYxMjFhYzU3NTA2MTIxYWIzMzYwNDA1MTgwODI3M2ZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYxNjczZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZjE2NmMwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAyODE1MjYwMTQwMTkxNTA1MDYwNDA1MTgwOTEwMzkwMjA2MDAyNjEyNGFhNTY1YjViMTU2MTIxYzA1NzYxMjFiZTYwMDA1NDYwMDE2MTEyZWI1NjViNTA1YjYwMDA4MDgxNTQ4MDkyOTE5MDYwMDEwMTkxOTA1MDU1NTA2MDAxNjAwMDU0MDM5MDUwOTM5MjUwNTA1MDU2NWI2MDAwODA2MDAwNjA2MDgwNjA2MDYwMDQ2MDAwODg2MDAwMTkxNjYwMDAxOTE2ODE1MjYwMjAwMTkwODE1MjYwMjAwMTYwMDAyMDYwMDAwMTU0NjAwNDYwMDA4OTYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMTAxNTQ2MDA0NjAwMDhhNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAyMDE2MDAwOTA1NDkwNjEwMTAwMGE5MDA0NzNmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTY2MDA0NjAwMDhiNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDAzMDE2MDA0NjAwMDhjNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDA0MDE2MDA0NjAwMDhkNjAwMDE5MTY2MDAwMTkxNjgxNTI2MDIwMDE5MDgxNTI2MDIwMDE2MDAwMjA2MDA1MDE4MjgwNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODA2MDFmMDE2MDIwODA5MTA0MDI2MDIwMDE2MDQwNTE5MDgxMDE2MDQwNTI4MDkyOTE5MDgxODE1MjYwMjAwMTgyODA1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ4MDE1NjEyMzU2NTc4MDYwMWYxMDYxMjMyYjU3NjEwMTAwODA4MzU0MDQwMjgzNTI5MTYwMjAwMTkxNjEyMzU2NTY1YjgyMDE5MTkwNjAwMDUyNjAyMDYwMDAyMDkwNWI4MTU0ODE1MjkwNjAwMTAxOTA2MDIwMDE4MDgzMTE2MTIzMzk1NzgyOTAwMzYwMWYxNjgyMDE5MTViNTA1MDUwNTA1MDkyNTA4MTgwNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODA2MDFmMDE2MDIwODA5MTA0MDI2MDIwMDE2MDQwNTE5MDgxMDE2MDQwNTI4MDkyOTE5MDgxODE1MjYwMjAwMTgyODA1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ4MDE1NjEyM2YyNTc4MDYwMWYxMDYxMjNjNzU3NjEwMTAwODA4MzU0MDQwMjgzNTI5MTYwMjAwMTkxNjEyM2YyNTY1YjgyMDE5MTkwNjAwMDUyNjAyMDYwMDAyMDkwNWI4MTU0ODE1MjkwNjAwMTAxOTA2MDIwMDE4MDgzMTE2MTIzZDU1NzgyOTAwMzYwMWYxNjgyMDE5MTViNTA1MDUwNTA1MDkxNTA4MDgwNTQ2MDAxODE2MDAxMTYxNTYxMDEwMDAyMDMxNjYwMDI5MDA0ODA2MDFmMDE2MDIwODA5MTA0MDI2MDIwMDE2MDQwNTE5MDgxMDE2MDQwNTI4MDkyOTE5MDgxODE1MjYwMjAwMTgyODA1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ4MDE1NjEyNDhlNTc4MDYwMWYxMDYxMjQ2MzU3NjEwMTAwODA4MzU0MDQwMjgzNTI5MTYwMjAwMTkxNjEyNDhlNTY1YjgyMDE5MTkwNjAwMDUyNjAyMDYwMDAyMDkwNWI4MTU0ODE1MjkwNjAwMTAxOTA2MDIwMDE4MDgzMTE2MTI0NzE1NzgyOTAwMzYwMWYxNjgyMDE5MTViNTA1MDUwNTA1MDkwNTA5NTUwOTU1MDk1NTA5NTUwOTU1MDk1NTA5MTkzOTU1MDkxOTM5NTU2NWI2MDAwODA2MDAwNjAwMTAyNjAwMTYwMDA4NjYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMjAxNTQ2MDAwMTkxNjE0MTU2MTI0ZTQ1NzYwMDA5MTUwNjEyNTBjNTY1YjgyNjAwMTYwMDA4NjYwMDAxOTE2NjAwMDE5MTY4MTUyNjAyMDAxOTA4MTUyNjAyMDAxNjAwMDIwNjAwMDAxNTQxMTE1OTA1MDgwOTE1MDViNTA5MjkxNTA1MDU2NWI2MDYwODA2MDYwNjAwMDgwODc5MzUwODU2MDQwNTE5MDgwODI1MjgwNjAxZjAxNjAxZjE5MTY2MDIwMDE4MjAxNjA0MDUyODAxNTYxMjU1MTU3ODE2MDIwMDE2MDIwODIwMjgwMzg4MzM5ODA4MjAxOTE1MDUwOTA1MDViNTA5MjUwNjAwMDkxNTA4NjkwNTA1Yjg1ODcwMTgxMTAxNTYxMjYxMjU3ODM4MTgxNTE4MTEwMTUxNTYxMjU3NDU3ZmU1YjkwNjAyMDAxMDE1MTdmMDEwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDkwMDQ3ZjAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMjgzODM4MTUxODExMDE1MTU2MTI1Y2Q1N2ZlNWI5MDYwMjAwMTAxOTA3ZWZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmMTkxNjkwODE2MDAwMWE5MDUzNTA4MTgwNjAwMTAxOTI1MDUwODA4MDYwMDEwMTkxNTA1MDYxMjU1YzU2NWI4Mjk0NTA1MDUwNTA1MDkzOTI1MDUwNTA1NjViNTA4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDYwMDA4MjU1ODA2MDFmMTA2MTI2NDY1NzUwNjEyNjY1NTY1YjYwMWYwMTYwMjA5MDA0OTA2MDAwNTI2MDIwNjAwMDIwOTA4MTAxOTA2MTI2NjQ5MTkwNjEyN2IwNTY1YjViNTA1NjViNTA4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDYwMDA4MjU1ODA2MDFmMTA2MTI2OGU1NzUwNjEyNmFkNTY1YjYwMWYwMTYwMjA5MDA0OTA2MDAwNTI2MDIwNjAwMDIwOTA4MTAxOTA2MTI2YWM5MTkwNjEyN2IwNTY1YjViNTA1NjViODI4MDU0NjAwMTgxNjAwMTE2MTU2MTAxMDAwMjAzMTY2MDAyOTAwNDkwNjAwMDUyNjAyMDYwMDAyMDkwNjAxZjAxNjAyMDkwMDQ4MTAxOTI4MjYwMWYxMDYxMjZmMTU3ODA1MTYwZmYxOTE2ODM4MDAxMTc4NTU1NjEyNzFmNTY1YjgyODAwMTYwMDEwMTg1NTU4MjE1NjEyNzFmNTc5MTgyMDE1YjgyODExMTE1NjEyNzFlNTc4MjUxODI1NTkxNjAyMDAxOTE5MDYwMDEwMTkwNjEyNzAzNTY1YjViNTA5MDUwNjEyNzJjOTE5MDYxMjdiMDU2NWI1MDkwNTY1YjgyODA1NDYwMDE4MTYwMDExNjE1NjEwMTAwMDIwMzE2NjAwMjkwMDQ5MDYwMDA1MjYwMjA2MDAwMjA5MDYwMWYwMTYwMjA5MDA0ODEwMTkyODI2MDFmMTA2MTI3NzE1NzgwNTE2MGZmMTkxNjgzODAwMTE3ODU1NTYxMjc5ZjU2NWI4MjgwMDE2MDAxMDE4NTU1ODIxNTYxMjc5ZjU3OTE4MjAxNWI4MjgxMTExNTYxMjc5ZTU3ODI1MTgyNTU5MTYwMjAwMTkxOTA2MDAxMDE5MDYxMjc4MzU2NWI1YjUwOTA1MDYxMjdhYzkxOTA2MTI3YjA1NjViNTA5MDU2NWI2MTI3ZDI5MTkwNWI4MDgyMTExNTYxMjdjZTU3NjAwMDgxNjAwMDkwNTU1MDYwMDEwMTYxMjdiNjU2NWI1MDkwNTY1YjkwNTYwMGExNjU2MjdhN2E3MjMwNTgyMDAwMTc2MzRlNjJjODU2MTk4YzljOGQyMDQ3NTZiZDllZDVlMTJjYTk3YjIzMDY4MmM2Y2M5NDFlODEzYjgxMzMwMDI5XCJcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ViRG9tYWluKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBSZXBsYWNlIGh0dHAsIGh0dHBzIGFuZCByZW1vdmUgdGhlIHBvcnRcbiAgICByZXR1cm4gdXJsPy5yZXBsYWNlKFwiaHR0cDovL1wiLCBcIlwiKS5yZXBsYWNlKFwiaHR0cHM6Ly9cIiwgXCJcIikuc3BsaXQoXCI6XCIpWzBdO1xufSIsImltcG9ydCB7IEVESURBY2Nlc3NMZXZlbCB9IGZyb20gXCIuLi8uLi9lbnVtcy9kaWRBY2Nlc3NMZXZlbC5lbnVtXCI7XG5pbXBvcnQgeyBJZGVudGl0eSB9IGZyb20gXCIuLi8uLi9zbWFydGNvbnRyYWN0cy9pZGVudGl0eVwiO1xuaW1wb3J0IFdlYjMgZnJvbSBcIndlYjNcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNoZWNrS2V5Rm9yRGlkKHdlYjNVcmw6IHN0cmluZywgY29udHJhY3RBZGRyZXNzOiBzdHJpbmcsIHB1YmxpY0tleTogc3RyaW5nLCBrZXlUb0NoZWNrOiBFRElEQWNjZXNzTGV2ZWwpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB3ZWIzID0gbmV3IFdlYjMod2ViM1VybCk7XG4gICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KElkZW50aXR5LmFiaSwgY29udHJhY3RBZGRyZXNzKTtcbiAgICAgICAgY29uc3Qgc2hhQWRkcmVzcyA9IHdlYjMudXRpbHMuc2hhMyhwdWJsaWNLZXkpO1xuICAgICAgICByZXR1cm4gYXdhaXQgY29udHJhY3QubWV0aG9kcy5rZXlIYXNQdXJwb3NlKHNoYUFkZHJlc3MsIGtleVRvQ2hlY2spLmNhbGwoKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkxpYnJhcnkgLSBTb21ldGhpbmcgd2VudCB3cm9uZzogXCIgKyBlcnJvcik7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59IiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgSVdlYlJUQ0NvbmZpZyB9IGZyb20gXCIuL2ludGVyZmFjZXMvd2ViUnRjQ29uZmlnLmludGVyZmFjZVwiO1xuaW1wb3J0IHsgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uLCBSVENJY2VDYW5kaWRhdGUgfSBmcm9tIFwid3J0Y1wiO1xuaW1wb3J0IHsgdzNjd2Vic29ja2V0IH0gZnJvbSBcIndlYnNvY2tldFwiO1xuaW1wb3J0IHsgT3V0Z29pbmdIdHRwSGVhZGVycyB9IGZyb20gXCJodHRwXCI7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXZWJSdGNQcm92aWRlciB7XG4gICAgd2ViUnRjQ29uZmlnOiBJV2ViUlRDQ29uZmlnO1xuICAgIGhvc3RVdWlkOiBzdHJpbmc7IC8vIFRoZSBob3N0IFVVSUQgdG8gY29ubmVjdCB0byBmcm9tIHRoZSBjbGllbnRcbiAgICBwZWVyQ29ubmVjdGlvbjogUlRDUGVlckNvbm5lY3Rpb24gPSBudWxsOyAvLyBUaGUgcGVlciBjb25uZWN0aW9uIGJldHdlZW4gY2xpZW50IGFuZCBob3N0XG4gICAgZGF0YUNoYW5uZWw6IFJUQ0RhdGFDaGFubmVsID0gbnVsbDsgLy8gVGhlIGRhdGEgY2hhbm5lbCBiZXR3ZWVuIGNsaWVudCBhbmQgaG9zdFxuICAgIHdzQ2xpZW50OiB3M2N3ZWJzb2NrZXQgPSBudWxsOyAvLyBUaGUgd2Vic29ja2V0IGNvbm5lY3Rpb24gYmV0d2VlbiBjbGllbnQgYW5kIHNpZ25hbGluZyBzZXJ2ZXIgb3IgaG9zdCBhbmQgc2lnbmFsaW5nIHNlcnZlclxuICAgIHJlY2VpdmVkQWN0aW9ucyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpOyAvLyBXaGVuZXZlciBhbiBhY3Rpb24gaXMgcmVjZWl2ZWQsIHRoaXMgb2JzZXJ2YWJsZSB3aWxsIGVtaXQgYW4gZXZlbnRcbiAgICB1dWlkJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPihudWxsKTsgLy8gV2hlbmV2ZXIgdGhlIFVVSUQgaXMgc2V0LCBpdCB3aWxsIGVtaXQgYW4gZXZlbnQgKHNvIHRoYXQgdGhlIGhvc3QgY2FuIHNldCBpdCBzb21ld2hlcmUgaW4gbGlrZSBhIFFSKVxuICAgIHdlYnNvY2tldE1lc3NhZ2UkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KG51bGwpOyAvLyBXaGVuZXZlciB0aGVyZSBpcyBhbiBldmVudCBvbiB0aGUgd2Vic29ja2V0LCB0aGlzIG9ic2VydmFibGUgd2lsbCBlbWl0XG4gICAgd2Vic29ja2V0Q29ubmVjdGlvbkNsb3NlZCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KG51bGwpOyAvLyBXaGVuZXZlciB0aGVyZSBpcyBhbiBldmVudCBvbiB0aGUgd2Vic29ja2V0LCB0aGlzIG9ic2VydmFibGUgd2lsbCBlbWl0XG4gICAgd2Vic29ja2V0Q29ubmVjdGlvbk9wZW4kID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihudWxsKTsgLy8gV2hlbmV2ZXIgdGhlcmUgaXMgYW4gZXZlbnQgb24gdGhlIHdlYnNvY2tldCwgdGhpcyBvYnNlcnZhYmxlIHdpbGwgZW1pdFxuICAgIHdlYnNvY2tldENvbm5lY3Rpb25FcnJvciQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KG51bGwpOyAvLyBXaGVuZXZlciB0aGVyZSBpcyBhbiBlcnJvciBldmVudCBvbiB0aGUgd2Vic29ja2V0LCB0aGlzIG9ic2VydmFibGUgd2lsbCBlbWl0XG4gICAgd2ViUnRjQ29ubmVjdGlvbkNvbmZpZzogUlRDQ29uZmlndXJhdGlvbjtcbiAgICBjb25uZWN0aW9uVGltZW91dDogTm9kZUpTLlRpbWVvdXQgPSBudWxsO1xuICAgIHBvbmdDaGVja0ludGVydmFsOiBOb2RlSlMuVGltZW91dCA9IG51bGw7XG4gICAgcGluZ1RpbWVvdXQ6IE5vZGVKUy5UaW1lb3V0ID0gbnVsbDtcbiAgICBXRUJTT0NLRVRfUElOR19BTlNXRVJfREVMQVkgPSAxMDAwO1xuICAgIC8vIFRoZSBhbGxvd2VkIHRpbWUgYmVmb3JlIGEgcGluZyBwb25nIGlzIG1pc3NpbmcgYW5kIHRodXMgZGlzY29ubmVjdGluZyB0aGUgY29ubmVjdGlvblxuICAgIFdFQlNPQ0tFVF9QSU5HX1BPTkdfQUxMT1dFRF9USU1FID0gMzAwMDtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFdlYlJUQyBjb25maWd1cmF0aW9uXG4gICAgICovXG4gICAgZ2V0Q29uZmlnKCk6IElXZWJSVENDb25maWcge1xuICAgICAgICByZXR1cm4gdGhpcy53ZWJSdGNDb25maWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGNsaWVudCBuZWVkcyB0byBzZXQgdGhlIGhvc3QgVVVJRCB0byBjb25uZWN0IHRvIGJlZm9yZSBzZXR0aW5nIHVwIHRoZSB3ZWJzb2NrZXQgY29ubmVjdGlvblxuICAgICAqIEBwYXJhbSBob3N0VXVpZCBUaGUgVVVJRCBvZiB0aGUgaG9zdFxuICAgICAqL1xuICAgIHNldEhvc3RVdWlkKGhvc3RVdWlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ob3N0VXVpZCA9IGhvc3RVdWlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBvdmVyIHRoZSBQMlAgZGF0YSBjaGFubmVsXG4gICAgICogQHBhcmFtIGFjdGlvbiBBcyBhIHN0cmluZywgd2hpY2ggYWN0aW9uIHR5cGUgZG8geW91IHdhbnQgdG8gc2VuZD9cbiAgICAgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBzZW5kIGFzIGFuIG9iamVjdFxuICAgICAqL1xuICAgIHNlbmRQMlBEYXRhKGFjdGlvbjogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YUNoYW5uZWwgJiYgdGhpcy5kYXRhQ2hhbm5lbC5yZWFkeVN0YXRlID09PSBcIm9wZW5cIikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYExpYnJhcnkgLSBTZW5kaW5nIGFjdGlvbiAnJHthY3Rpb259J2ApO1xuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5zZW5kKEpTT04uc3RyaW5naWZ5KHsgYWN0aW9uLCAuLi5kYXRhIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFdlYnNvY2tldCAtIEF0dGVtcHRlZCB0byBzZW5kIGRhdGEgd2l0aCBhY3Rpb24gJHthY3Rpb259IGJ1dCBkYXRhIGNoYW5uZWwgaXMgbm90IG9wZW5gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNlbmQgZGF0YSBvdmVyIHRoZSBkYXRhIGNoYW5uZWxcbiAgICAgKiBAcGFyYW0gYWN0aW9uIEFzIGEgc3RyaW5nLCB3aGljaCBhY3Rpb24gdHlwZSBkbyB5b3Ugd2FudCB0byBzZW5kP1xuICAgICAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIHNlbmQgYXMgYW4gb2JqZWN0XG4gICAgICovXG4gICAgc2VuZFdlYnNvY2tldERhdGEoYWN0aW9uOiBzdHJpbmcsIGRhdGE6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy53c0NsaWVudCAmJiB0aGlzLndzQ2xpZW50LnJlYWR5U3RhdGUgPT09IHRoaXMud3NDbGllbnQuT1BFTikge1xuICAgICAgICAgICAgdGhpcy53c0NsaWVudC5zZW5kKEpTT04uc3RyaW5naWZ5KHsgYWN0aW9uLCAuLi5kYXRhIH0pKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgV2Vic29ja2V0IC0gQXR0ZW1wdGVkIHRvIHNlbmQgZGF0YSB3aXRoIGFjdGlvbiAke2FjdGlvbn0gYnV0IHdlYnNvY2tldCBjaGFubmVsIGlzIG5vdCBvcGVuYCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRXZWJzb2NrZXQoKTogdzNjd2Vic29ja2V0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3NDbGllbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hlbmV2ZXIgdGhlIFVVSUQgaXMgc2V0IGZyb20gdGhlIGhvc3QgdGhpcyBvYnNlcnZhYmxlIGVtaXRzXG4gICAgICogQHBhcmFtIHV1aWQgVGhlIFVVSUQgdG8gYWxsb3cgY2xpZW50cyBjb25uZWMgdG9cbiAgICAgKi9cbiAgICBzZXRVdWlkKHV1aWQ6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLnV1aWQkLm5leHQodXVpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT25seSBkaXNjb25uZWN0IG9uIHRoaXMgYXBwbGljYXRpb24gYW5kIHNlbmQgbm8gZGlzY29ubmVjdCBvdmVyIHRoZSBkYXRhIGNoYW5uZWxcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCk6IHZvaWQge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wb25nQ2hlY2tJbnRlcnZhbCk7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0KTtcbiAgICAgICAgaWYgKHRoaXMucGVlckNvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMucGVlckNvbm5lY3Rpb24uY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kYXRhQ2hhbm5lbCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLndzQ2xpZW50KSB7XG5cbiAgICAgICAgICAgIHRoaXMud3NDbGllbnQuY2xvc2UoKTtcbiAgICAgICAgICAgIHRoaXMud3NDbGllbnQub25jbG9zZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IG51bGw7XG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwgPSBudWxsO1xuICAgICAgICB0aGlzLndzQ2xpZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy53ZWJzb2NrZXRDb25uZWN0aW9uQ2xvc2VkJC5uZXh0KHRydWUpO1xuICAgICAgICB0aGlzLndlYnNvY2tldENvbm5lY3Rpb25PcGVuJC5uZXh0KGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNjb25uZWN0IG9uIHRoaXMgYXBwbGljYXRpb24gYW5kIHNlbmQgYSBkaXNjb25uZWN0IGV2ZW50IG92ZXIgdGhlIGRhdGFjaGFubmVsXG4gICAgICovXG4gICAgcmVtb3RlRGlzY29ubmVjdCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YUNoYW5uZWwgJiYgdGhpcy5kYXRhQ2hhbm5lbC5yZWFkeVN0YXRlID09PSBcIm9wZW5cIikge1xuICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbC5zZW5kKEpTT04uc3RyaW5naWZ5KHsgYWN0aW9uOiBcImRpc2Nvbm5lY3RcIiB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVE9ETzogSXMgb25lIHNlY29uZCBlbm91Z2g/XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0sIDEwMDApXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGhvc3Qgd2lsbCBzZW5kIGFuIG9mZmVyIHdoZW4gYSBjbGllbnQgY29ubmVjdHMgdG8gaGlzIFVVSURcbiAgICAgKiBAcGFyYW0gcGVlckNvbm5lY3Rpb24gVGhlIHBlZXIgY29ubmVjdGlvbiB0byBzZXQgdGhlIGxvY2FsIGRlc2NyaXB0aW9uXG4gICAgICogQHBhcmFtIHdzQ2xpZW50IFRoZSB3ZWJzb2NrZXQgdG8gc2VuZCB0aGUgb2ZmZXIgdG9cbiAgICAgKi9cbiAgICBhc3luYyBzZW5kT2ZmZXIocGVlckNvbm5lY3Rpb246IFJUQ1BlZXJDb25uZWN0aW9uLCB3c0NsaWVudDogdzNjd2Vic29ja2V0KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgcGVlckNvbm5lY3Rpb24uY3JlYXRlT2ZmZXIoKTtcbiAgICAgICAgYXdhaXQgcGVlckNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihvZmZlcik7XG4gICAgICAgIHdzQ2xpZW50LnNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgdHlwZTogXCJvZmZlclwiLFxuICAgICAgICAgICAgb2ZmZXJcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgbGF1bmNoIHRoZSB3ZWJzb2NrZXQgYW5kIGxpc3RlbiB0byBldmVudHNcbiAgICAgKi9cbiAgICBhc3luYyBsYXVuY2hXZWJzb2NrZXRDbGllbnQod2ViUnRjQ29uZmlnOiBJV2ViUlRDQ29uZmlnLCBoZWFkZXJzPzogT3V0Z29pbmdIdHRwSGVhZGVycyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0aGlzLndlYlJ0Y0NvbmZpZyA9IHdlYlJ0Y0NvbmZpZztcblxuICAgICAgICBsZXQgY29ubmVjdGlvblN1Y2Nlc3MgPSBudWxsO1xuICAgICAgICB0aGlzLnJlY2VpdmVkQWN0aW9ucyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY29ubmVjdGlvblRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXVpZCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpO1xuICAgICAgICB0aGlzLndlYnNvY2tldE1lc3NhZ2UkID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcbiAgICAgICAgdGhpcy53ZWJzb2NrZXRDb25uZWN0aW9uQ2xvc2VkJCA9IG5ldyBCZWhhdmlvclN1YmplY3QobnVsbCk7XG4gICAgICAgIHRoaXMud2Vic29ja2V0Q29ubmVjdGlvbk9wZW4kID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcbiAgICAgICAgdGhpcy53ZWJzb2NrZXRDb25uZWN0aW9uRXJyb3IkID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcblxuICAgICAgICBsZXQgc2lnbmFsaW5nVXJsID0gdGhpcy53ZWJSdGNDb25maWcuc2lnbmFsaW5nVXJsO1xuICAgICAgICBpZiAoIXNpZ25hbGluZ1VybCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJMYXVuY2ggd2Vic29ja2V0IC0gVVJMIHVuZGVmaW5lZCwgZmFsbGluZyBiYWNrIHRvIGRlZmF1bHRcIik7XG4gICAgICAgICAgICBzaWduYWxpbmdVcmwgPSBcIndzczovL2F1dGgucHJvb2ZtZS5pZFwiO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTGF1bmNoIHdlYnNvY2tldCAtIENsaWVudCBVUkw6XCIsIHNpZ25hbGluZ1VybCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTGF1bmNoIHdlYnNvY2tldCAtIENoYW5uZWw6XCIsIHdlYlJ0Y0NvbmZpZy5jaGFubmVsKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJMYXVuY2ggd2Vic29ja2V0IC0gSGVhZGVyczpcIiwgaGVhZGVycyk7XG4gICAgICAgIGxldCB1cmwgPSBudWxsO1xuICAgICAgICAvLyBJZiBpdCBhbHJlYWR5IGhhcyBxdWVyaWVzLCBhcHBlbmRcbiAgICAgICAgaWYgKHNpZ25hbGluZ1VybC5pbmNsdWRlcyhcIj9cIikpIHtcbiAgICAgICAgICAgIHVybCA9IGAke3NpZ25hbGluZ1VybH0mY2hhbm5lbD0ke3dlYlJ0Y0NvbmZpZy5jaGFubmVsfWA7XG4gICAgICAgIC8vIElmIGl0IGRvZXMgbm90IHlldCBoYXZlIHF1ZXJpZXMsIHN0YXJ0IHdpdGggaXRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybCA9IGAke3NpZ25hbGluZ1VybH0/Y2hhbm5lbD0ke3dlYlJ0Y0NvbmZpZy5jaGFubmVsfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdlYlJ0Y0NvbmZpZy5kYXRhKSB7XG4gICAgICAgICAgICB1cmwgPSBgJHt1cmx9JmRhdGE9JHt3ZWJSdGNDb25maWcuZGF0YX1gO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3ZWJSdGNDb25maWcua2VlcGFsaXZlKSB7XG4gICAgICAgICAgICB1cmwgPSBgJHt1cmx9JmtlZXBhbGl2ZT0ke3dlYlJ0Y0NvbmZpZy5rZWVwYWxpdmV9YDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndzQ2xpZW50ID0gbmV3IHczY3dlYnNvY2tldCh1cmwsIG51bGwsIG51bGwsIGhlYWRlcnMpO1xuICAgICAgICAvLyBTbyBpZiB0aGVyZSBpcyBub3QgYSBzdWNjZXNzIGNvbm5lY3Rpb24gYWZ0ZXIgMTAgc2Vjb25kcywgY2xvc2UgdGhlIHNvY2tldCBhbmQgc2VuZCBhbiBlcnJvclxuICAgICAgICB0aGlzLmNvbm5lY3Rpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29ubmVjdGlvblN1Y2Nlc3MgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndlYnNvY2tldENvbm5lY3Rpb25FcnJvciQubmV4dCh0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53c0NsaWVudCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndzQ2xpZW50LmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDAwMCk7XG4gICAgICAgIHRoaXMud3NDbGllbnQub25lcnJvciA9IChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIldlYnNvY2tldCAtIEVycm9yOiBcIiArIGVycm9yLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgY29ubmVjdGlvblN1Y2Nlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMud2Vic29ja2V0Q29ubmVjdGlvbkNsb3NlZCQubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMud2Vic29ja2V0Q29ubmVjdGlvbk9wZW4kLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy53ZWJzb2NrZXRDb25uZWN0aW9uRXJyb3IkLm5leHQodHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLndzQ2xpZW50Lm9uY2xvc2UgPSAoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJXZWJzb2NrZXQgLSBDb25uZWN0aW9uIGNsb3NlZFwiKTtcbiAgICAgICAgICAgIHRoaXMud2Vic29ja2V0Q29ubmVjdGlvbkNsb3NlZCQubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMud2Vic29ja2V0Q29ubmVjdGlvbk9wZW4kLm5leHQoZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy53c0NsaWVudC5vbm9wZW4gPSAoKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJXZWJzb2NrZXQgLSBDb25uZWN0aW9uIG9wZW5cIik7XG4gICAgICAgICAgICBjb25uZWN0aW9uU3VjY2VzcyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLndlYnNvY2tldENvbm5lY3Rpb25DbG9zZWQkLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgdGhpcy53ZWJzb2NrZXRDb25uZWN0aW9uT3BlbiQubmV4dCh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMud3NDbGllbnQub25tZXNzYWdlID0gKGFzeW5jIG1zZyA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIldlYnNvY2tldCAtIE1lc3NhZ2U6XCIsIG1zZyk7XG4gICAgICAgICAgICB0aGlzLndlYnNvY2tldE1lc3NhZ2UkLm5leHQobXNnKTtcbiAgICAgICAgICAgIGlmIChtc2cuZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgbGV0IGRhdGE6IGFueTtcbiAgICAgICAgICAgICAgICAvLyBhY2NlcHRpbmcgb25seSBKU09OIG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UobXNnLmRhdGEgYXMgc3RyaW5nKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJXZWJzb2NrZXQgLSBNZXNzYWdlIHdhcyBub3QgSlNPTlwiKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7IHR5cGUsIG1lc3NhZ2UsIHN1Y2Nlc3MsIGNoYW5uZWxJZCwgb2ZmZXIsIGFuc3dlciwgY2FuZGlkYXRlLCB3ZWJSdGNDb25uZWN0aW9uQ29uZmlnIH0gPSBkYXRhO1xuXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT24gYW4gZXJyb3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiV2Vic29ja2V0IC0gRXJyb3IgbWVzc2FnZTpcIiwgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZSA9PSBcIkNvbW1hbmQgbm90IGZvdW5kOiBwaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wb25nQ2hlY2tJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb25nQ2hlY2tJbnRlcnZhbCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgV2Vic29ja2V0IC0gUGluZyBwb25nIHRvb2sgbW9yZSB0aGFuICR7dGhpcy5XRUJTT0NLRVRfUElOR19QT05HX0FMTE9XRURfVElNRX1tcy4gRGlzY29ubmVjdGluZ2ApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLldFQlNPQ0tFVF9QSU5HX1BPTkdfQUxMT1dFRF9USU1FKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRQaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNvbm5lY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gY29ubmVjdGVkIHRvIHRoZSBTaWduYWxpbmcgc2VydmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy53ZWJSdGNDb25maWcuaXNIb3N0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFRyaWVzID0gNTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJpZXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy53c0NsaWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud3NDbGllbnQgJiYgdGhpcy53c0NsaWVudC5yZWFkeVN0YXRlID09PSAxICYmIHRyaWVzIDwgbWF4VHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgYXBwbGljYXRpb24gaXMgdGhlIGhvc3QsIHNlbmQgYSBob3N0IHJlcXVlc3QgdG8gcmVjZWl2ZSBhIFVVSURcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzQ2xpZW50LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiBcImhvc3RcIiB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJpZXMgPj0gbWF4VHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWVzKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heFRyaWVzID0gNTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdHJpZXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IHNldEludGVydmFsKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy53c0NsaWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud3NDbGllbnQgJiYgdGhpcy53c0NsaWVudC5yZWFkeVN0YXRlID09PSAxICYmIHRyaWVzIDwgbWF4VHJpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYXBwbGljYXRpb24gaXMgbm90IHRoZSBob3N0LCBzZW5kIGEgY29ubmVjdCByZXF1ZXN0IHdpdGggdGhlIGhvc3QgVVVJRFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud3NDbGllbnQuc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6IFwiY29ubmVjdFwiLCBob3N0OiB0aGlzLmhvc3RVdWlkIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmllcyA+PSBtYXhUcmllcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZXMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb25uZWN0ZWRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHN1Y2Nlc3NmdWxseSBjb25uZWN0ZWQgc28gbm8gbmVlZCB0byBjaGVjayBvbiB0aGUgcGluZyBwb25nIGFueW1vcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBvbmdDaGVja0ludGVydmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3ZWJSdGNDb25uZWN0aW9uQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWJSdGNDb25uZWN0aW9uQ29uZmlnID0gd2ViUnRjQ29ubmVjdGlvbkNvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2ViUnRjQ29uZmlnLmlzSG9zdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldHVwUGVlcmNvbm5lY3Rpb24odGhpcy5ob3N0VXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgaG9zdCByZWNlaXZlZCBhbiBVVUlEXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbm5lbElkICYmIHRoaXMud2ViUnRjQ29uZmlnLmlzSG9zdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZE9mZmVyKHRoaXMucGVlckNvbm5lY3Rpb24sIHRoaXMud3NDbGllbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJwb25nXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5wb25nQ2hlY2tJbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvbmdDaGVja0ludGVydmFsID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLldFQlNPQ0tFVF9QSU5HX1BPTkdfQUxMT1dFRF9USU1FKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VuZFBpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwib2ZmZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhcHBsaWNhdGlvbiBpcyBub3QgdGhlIGhvc3QsIGl0IHJlY2VpdmVzIGFuIG9mZmVyIHdoZW5ldmVyIGEgY2xpZW50IGNvbm5lY3RzLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGNsaWVudCB3aWxsIHNlbmQgYW4gYW5zd2VyIGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihvZmZlcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RBbnN3ZXIgPSBhd2FpdCB0aGlzLnBlZXJDb25uZWN0aW9uLmNyZWF0ZUFuc3dlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGVlckNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihob3N0QW5zd2VyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndzQ2xpZW50LnNlbmQoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFuc3dlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXI6IGhvc3RBbnN3ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImhvc3RcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdoZW5ldmVyIHRoZSBob3N0IHJlY2VpdmVzIGEgaG9zdCByZXF1ZXN0IGJhY2ssIHNldCB0aGUgVVVJRCBwcm92aWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5uZWxJZCAmJiB0aGlzLndlYlJ0Y0NvbmZpZy5pc0hvc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFV1aWQoY2hhbm5lbElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2ViUnRjQ29ubmVjdGlvbkNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndlYlJ0Y0Nvbm5lY3Rpb25Db25maWcgPSB3ZWJSdGNDb25uZWN0aW9uQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldHVwUGVlcmNvbm5lY3Rpb24oY2hhbm5lbElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRQaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImxlYXZlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXaGVuZXZlciB0aGUgaG9zdCBvciBjbGllbnQgbGVhdmVzIHNldHVwIGEgbmV3IGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VXVpZChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbnN3ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBjbGllbnQgd2lsbCBzZW5kIGFuIGFuc3dlciBhbmQgdGhlIGhvc3Qgd2lsbCBzZXQgaXQgYXMgYSBkZXNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFuc3dlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGVlckNvbm5lY3Rpb24uc2V0UmVtb3RlRGVzY3JpcHRpb24obmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbihhbnN3ZXIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY2FuZGlkYXRlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbiByZWNlaXZpbmcgYW4gY2FuZGlkYXRlIGZyb20gdGhlIGNsaWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaWVudENhbmRpZGF0ZSA9IG5ldyBSVENJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShjbGllbnRDYW5kaWRhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjbGllbnRcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3ZWJSdGNDb25uZWN0aW9uQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53ZWJSdGNDb25uZWN0aW9uQ29uZmlnID0gd2ViUnRjQ29ubmVjdGlvbkNvbmZpZztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMud2ViUnRjQ29uZmlnLmlzSG9zdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldHVwUGVlcmNvbm5lY3Rpb24odGhpcy5ob3N0VXVpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2VuZE9mZmVyKHRoaXMucGVlckNvbm5lY3Rpb24sIHRoaXMud3NDbGllbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUuZXJyb3IoXCJXZWJzb2NrZXQgb25tZXNzYWdlIGRlZmF1bHRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNlbmRQaW5nKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnBpbmdUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBSZWFkeSBzdGF0ZSAxID0gb3BlblxuICAgICAgICAgICAgaWYgKHRoaXMud3NDbGllbnQucmVhZHlTdGF0ZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMud3NDbGllbnQuc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGluZ1wiXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCB0aGlzLldFQlNPQ0tFVF9QSU5HX0FOU1dFUl9ERUxBWSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBzZXR1cCB0aGUgcGVlcmNvbm5lY3Rpb24gYW5kIGRhdGFjaGFubmVsXG4gICAgICogSXQgd2lsbCBhbHNvIGVtaXQgcmVjZWl2ZWQgYWN0aW9ucyBvdmVyIGFuIG9ic2VydmFibGVcbiAgICAgKiBAcGFyYW0gdXVpZCBUaGUgVVVJRCB0byBjb25uZWN0IHRvXG4gICAgICovXG4gICAgYXN5bmMgc2V0dXBQZWVyY29ubmVjdGlvbih1dWlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih0aGlzLndlYlJ0Y0Nvbm5lY3Rpb25Db25maWcpO1xuXG4gICAgICAgIHRoaXMuZGF0YUNoYW5uZWwgPSB0aGlzLnBlZXJDb25uZWN0aW9uLmNyZWF0ZURhdGFDaGFubmVsKHV1aWQpO1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJkYXRhY2hhbm5lbFwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5jaGFubmVsLm9ubWVzc2FnZSA9IChhc3luYyBldmVudE1lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhOiBhbnk7XG5cbiAgICAgICAgICAgICAgICAvLyBhY2NlcHRpbmcgb25seSBKU09OIG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZXZlbnRNZXNzYWdlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAvLyBCeSBkZWZhdWx0IHRoaXMgY2xhc3Mgd2lsbCBvbmx5IGhhbmRsZSB0aGUgZGlzY29ubmVjdCBldmVudC4gQ2xvc2UgdGhlIHdlYnNvY2tldCBvbiB0aGlzIHNpZGUuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZGF0YS5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkaXNjb25uZWN0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEFjdGlvbnMkLm5leHQoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJQMlAgLSBNZXNzYWdlIGludmFsaWQgSlNPTjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnQuY2hhbm5lbC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEFjdGlvbnMkLm5leHQoeyBhY3Rpb246IFwicDJwQ29ubmVjdGVkXCIsIHAycENvbm5lY3RlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRQMlBEYXRhKFwiY2xpZW50Y29ubmVjdGVkXCIsIHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLndzQ2xpZW50LmNsb3NlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucGVlckNvbm5lY3Rpb24uaWNlQ29ubmVjdGlvblN0YXRlID09PSBcImRpc2Nvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEFjdGlvbnMkLm5leHQoeyBhY3Rpb246IFwicDJwQ29ubmVjdGVkXCIsIHAycENvbm5lY3RlZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMud3NDbGllbnQuc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6IFwibGVhdmVcIiB9KSk7XG4gICAgICAgICAgICAgICAgdGhpcy53c0NsaWVudC5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJpY2VjYW5kaWRhdGVcIiwgYXN5bmMgZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IG5ldyBSVENJY2VDYW5kaWRhdGUoZXZlbnQuY2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wZWVyQ29ubmVjdGlvbi5hZGRJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaWxlbmNlIGVycm9yIGJlY2F1c2UgaXQgY2Fubm90IGFkZCBpdHNlbGYsIGl0IHdpbGwgc2VuZCBvdmVyIHdlYnNvY2tldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLndzQ2xpZW50LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiBcImNhbmRpZGF0ZVwiLCBjYW5kaWRhdGU6IGV2ZW50LmNhbmRpZGF0ZSB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgc2V0dXAgdGhlIHBlZXJjb25uZWN0aW9uIGFuZCBkYXRhY2hhbm5lbFxuICAgICAqIEl0IHdpbGwgYWxzbyBlbWl0IHJlY2VpdmVkIGFjdGlvbnMgb3ZlciBhbiBvYnNlcnZhYmxlXG4gICAgICogQHBhcmFtIHV1aWQgVGhlIFVVSUQgdG8gY29ubmVjdCB0b1xuICAgICAqL1xuICAgIGFzeW5jIHNldHVwQ2xpZW50UGVlcmNvbm5lY3Rpb24oKTogUHJvbWlzZTx2b2lkPiB7XG5cbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih0aGlzLndlYlJ0Y0Nvbm5lY3Rpb25Db25maWcpO1xuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJkYXRhY2hhbm5lbFwiLCBldmVudCA9PiB7XG4gICAgICAgICAgICBldmVudC5jaGFubmVsLm9ubWVzc2FnZSA9IChhc3luYyBldmVudE1lc3NhZ2UgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhOiBhbnk7XG5cbiAgICAgICAgICAgICAgICAvLyBhY2NlcHRpbmcgb25seSBKU09OIG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZXZlbnRNZXNzYWdlLmRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAvLyBCeSBkZWZhdWx0IHRoaXMgY2xhc3Mgd2lsbCBvbmx5IGhhbmRsZSB0aGUgZGlzY29ubmVjdCBldmVudC4gQ2xvc2UgdGhlIHdlYnNvY2tldCBvbiB0aGlzIHNpZGUuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZGF0YS5hY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJkaXNjb25uZWN0XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEFjdGlvbnMkLm5leHQoZGF0YSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJQMlAgLSBNZXNzYWdlIGludmFsaWQgSlNPTjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXZlbnQuY2hhbm5lbC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEFjdGlvbnMkLm5leHQoeyBhY3Rpb246IFwicDJwQ29ubmVjdGVkXCIsIHAycENvbm5lY3RlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRQMlBEYXRhKFwiY2xpZW50Y29ubmVjdGVkXCIsIHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLndzQ2xpZW50LmNsb3NlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIiwgZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucGVlckNvbm5lY3Rpb24uaWNlQ29ubmVjdGlvblN0YXRlID09PSBcImRpc2Nvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNlaXZlZEFjdGlvbnMkLm5leHQoeyBhY3Rpb246IFwicDJwQ29ubmVjdGVkXCIsIHAycENvbm5lY3RlZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMud3NDbGllbnQuc2VuZChKU09OLnN0cmluZ2lmeSh7IHR5cGU6IFwibGVhdmVcIiB9KSk7XG4gICAgICAgICAgICAgICAgdGhpcy53c0NsaWVudC5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJpY2VjYW5kaWRhdGVcIiwgYXN5bmMgZXZlbnQgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmNhbmRpZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbmRpZGF0ZSA9IG5ldyBSVENJY2VDYW5kaWRhdGUoZXZlbnQuY2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wZWVyQ29ubmVjdGlvbi5hZGRJY2VDYW5kaWRhdGUoY2FuZGlkYXRlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaWxlbmNlIGVycm9yIGJlY2F1c2UgaXQgY2Fubm90IGFkZCBpdHNlbGYsIGl0IHdpbGwgc2VuZCBvdmVyIHdlYnNvY2tldFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLndzQ2xpZW50LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlOiBcImNhbmRpZGF0ZVwiLCBjYW5kaWRhdGU6IGV2ZW50LmNhbmRpZGF0ZSB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgUlRDSWNlQ2FuZGlkYXRlLCBSVENQZWVyQ29ubmVjdGlvbiwgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uLCBSVENEYXRhQ2hhbm5lbCB9IGZyb20gXCJ3cnRjXCI7XG5pbXBvcnQgeyBJQ29ubmVjdGlvbkRldGFpbHMgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL2Nvbm5lY3Rpb25EZXRhaWxzXCI7XG5pbXBvcnQgeyBJUmVxdWVzdGVkQ3JlZGVudGlhbHMgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3JlcXVlc3RlZENyZWRlbnRpYWxzLmludGVyZmFjZVwiO1xuXG5leHBvcnQgY2xhc3MgV2ViUlRDQ2xpZW50VjIge1xuXG4gICAgcGVlckNvbm5lY3Rpb246IFJUQ1BlZXJDb25uZWN0aW9uID0gbnVsbDtcbiAgICBkYXRhQ2hhbm5lbDogUlRDRGF0YUNoYW5uZWwgPSBudWxsO1xuICAgIGNsaWVudENoYW5uZWw6IElDb25uZWN0aW9uRGV0YWlscztcbiAgICB3ZWJSdGNDb25uZWN0aW9uQ29uZmlnOiBSVENDb25maWd1cmF0aW9uO1xuICAgIHJlcXVlc3RlZENyZWRlbnRpYWxzOiBJUmVxdWVzdGVkQ3JlZGVudGlhbHM7XG4gICAgaG9zdFdzQ29ubmVjdGlvbjogSUNvbm5lY3Rpb25EZXRhaWxzO1xuICAgIGFjdGlvblR5cGU6IHN0cmluZztcbiAgICBkYXRhQ2hhbm5lbE9wZW4kID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcbiAgICBkYXRhQ2hhbm5lbE1lc3NhZ2UkID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgIGRhdGE6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB3ZWJSdGNDb25uZWN0aW9uQ29uZmlnOiBSVENDb25maWd1cmF0aW9uLFxuICAgICAgICByZXF1ZXN0ZWRDcmVkZW50aWFsczogSVJlcXVlc3RlZENyZWRlbnRpYWxzLFxuICAgICAgICBob3N0V3NDb25uZWN0aW9uOiBJQ29ubmVjdGlvbkRldGFpbHMsXG4gICAgICAgIGFjdGlvblR5cGU6IHN0cmluZyxcbiAgICAgICAgZGF0YTogYW55XG4gICAgKSB7XG4gICAgICAgIHRoaXMud2ViUnRjQ29ubmVjdGlvbkNvbmZpZyA9IHdlYlJ0Y0Nvbm5lY3Rpb25Db25maWc7XG4gICAgICAgIHRoaXMucmVxdWVzdGVkQ3JlZGVudGlhbHMgPSByZXF1ZXN0ZWRDcmVkZW50aWFscztcbiAgICAgICAgdGhpcy5ob3N0V3NDb25uZWN0aW9uID0gaG9zdFdzQ29ubmVjdGlvbjtcbiAgICAgICAgdGhpcy5hY3Rpb25UeXBlID0gYWN0aW9uVHlwZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCB3aWxsIHNldHVwIHRoZSBwZWVyY29ubmVjdGlvbiBhbmQgZGF0YWNoYW5uZWxcbiAgICAgKiBJdCB3aWxsIGFsc28gZW1pdCByZWNlaXZlZCBhY3Rpb25zIG92ZXIgYW4gb2JzZXJ2YWJsZVxuICAgICAqIEBwYXJhbSB1dWlkIFRoZSBVVUlEIHRvIGNvbm5lY3QgdG9cbiAgICAgKi9cbiAgICBhc3luYyBzZXR1cFBlZXJjb25uZWN0aW9uKGNoYW5uZWxVdWlkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbiA9IG5ldyBSVENQZWVyQ29ubmVjdGlvbih0aGlzLndlYlJ0Y0Nvbm5lY3Rpb25Db25maWcpO1xuICAgICAgICB0aGlzLmRhdGFDaGFubmVsID0gdGhpcy5wZWVyQ29ubmVjdGlvbi5jcmVhdGVEYXRhQ2hhbm5lbChjaGFubmVsVXVpZCk7XG5cbiAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5hZGRFdmVudExpc3RlbmVyKFwiaWNlY2FuZGlkYXRlXCIsIGFzeW5jIGV2ZW50ID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5jYW5kaWRhdGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5kaWRhdGUgPSBuZXcgUlRDSWNlQ2FuZGlkYXRlKGV2ZW50LmNhbmRpZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGVlckNvbm5lY3Rpb24uYWRkSWNlQ2FuZGlkYXRlKGNhbmRpZGF0ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaWxlbmNlIHRoaXMgZXJyb3IuIEEgbG90IG9mIGNhbmRpZGF0ZXMgY2FuJ3QgYmUgYWRkZWQgYW5kIHRoYXRzIGZpbmU7IHRoYXQncyB3aHkgd2UgaGF2ZSBtdWx0aXBsZSBjYW5kaWRhdGVzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuY2xpZW50Q2hhbm5lbC5zZW5kVVRGKEpTT04uc3RyaW5naWZ5KHsgdHlwZTogXCJjYW5kaWRhdGVcIiwgY2FuZGlkYXRlOiBldmVudC5jYW5kaWRhdGUgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2VcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMucGVlckNvbm5lY3Rpb24uaWNlQ29ubmVjdGlvblN0YXRlID09PSBcImRpc2Nvbm5lY3RlZFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZWVyQ29ubmVjdGlvbi5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEV2ZW50TGlzdGVuZXIoXCJkYXRhY2hhbm5lbFwiLCBkYXRhQ2hhbm5lbEV2ZW50ID0+IHtcbiAgICAgICAgICAgIGRhdGFDaGFubmVsRXZlbnQuY2hhbm5lbC5vbm1lc3NhZ2UgPSAoYXN5bmMgbWVzc2FnZUV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWRNZXNzYWdlID0gSlNPTi5wYXJzZShtZXNzYWdlRXZlbnQuZGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbE1lc3NhZ2UkLm5leHQocGFyc2VkTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBwYXJzZSBtZXNzYWdlOlwiLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgZGF0YUNoYW5uZWxFdmVudC5jaGFubmVsLm9ub3BlbiA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxpYnJhcnkgLSBEYXRhY2hhbm5lbCBjb25uZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5ob3N0V3NDb25uZWN0aW9uLnNlbmRVVEYoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNsaWVudGNvbm5lY3RlZFwiLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlXG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhQ2hhbm5lbE9wZW4kLm5leHQoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGRhdGFDaGFubmVsRXZlbnQuY2hhbm5lbC5vbmNsb3NlID0gKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxpYnJhcnkgLSBEYXRhY2hhbm5lbCBvbmNsb3NlOlwiLCBkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLmhvc3RXc0Nvbm5lY3Rpb24uc2VuZFVURihKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZGlzY29ubmVjdFwiXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGhvc3Qgd2lsbCBzZW5kIGFuIG9mZmVyIHdoZW4gYSBjbGllbnQgY29ubmVjdHMgdG8gaGlzIFVVSURcbiAgICAgKi9cbiAgICBhc3luYyBzZW5kT2ZmZXIoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IG9mZmVyID0gYXdhaXQgdGhpcy5wZWVyQ29ubmVjdGlvbi5jcmVhdGVPZmZlcigpO1xuICAgICAgICBhd2FpdCB0aGlzLnBlZXJDb25uZWN0aW9uLnNldExvY2FsRGVzY3JpcHRpb24ob2ZmZXIpO1xuICAgICAgICB0aGlzLmNsaWVudENoYW5uZWwuc2VuZFVURihKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICB0eXBlOiBcIm9mZmVyXCIsXG4gICAgICAgICAgICBvZmZlclxuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBkYXRhIG92ZXIgdGhlIGRhdGEgY2hhbm5lbFxuICAgICAqIEBwYXJhbSBhY3Rpb24gQXMgYSBzdHJpbmcsIHdoaWNoIGFjdGlvbiB0eXBlIGRvIHlvdSB3YW50IHRvIHNlbmQ/XG4gICAgICogQHBhcmFtIGRhdGEgVGhlIGRhdGEgdG8gc2VuZCBhcyBhbiBvYmplY3RcbiAgICAgKi9cbiAgICAgc2VuZFAyUERhdGEoYWN0aW9uOiBzdHJpbmcsIGRhdGE6IGFueSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kYXRhQ2hhbm5lbCAmJiB0aGlzLmRhdGFDaGFubmVsLnJlYWR5U3RhdGUgPT09IFwib3BlblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgTGlicmFyeSAtIFNlbmRpbmcgYWN0aW9uICcke2FjdGlvbn0nYCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFDaGFubmVsLnNlbmQoSlNPTi5zdHJpbmdpZnkoeyBhY3Rpb24sIC4uLmRhdGEgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgTGlicmFyeSAtIEF0dGVtcHRlZCB0byBzZW5kIGRhdGEgd2l0aCBhY3Rpb24gJHthY3Rpb259IGJ1dCBkYXRhIGNoYW5uZWwgaXMgbm90IG9wZW5gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHJlbW90ZSBkZXNjcmlwdGlvbiBvZiB0aGUgb3RoZXIgc2lkZVxuICAgICAqIEBwYXJhbSByZW1vdGVEZXNjcmlwdGlvbiBDYW4gYmUgb2ZmZXIgb3IgYW5zd2VyIGRlcGVuZGluZyBvbiB0aGUgY2xpZW50IC8gaG9zdFxuICAgICAqL1xuICAgIGFzeW5jIHNldFJlbW90ZURlc2NyaXB0aW9uKHJlbW90ZURlc2NyaXB0aW9uOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5wZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHJlbW90ZURlc2NyaXB0aW9uKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgYWRkQ2FuZGlkYXRlKGNhbmRpZGF0ZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBjbGllbnRDYW5kaWRhdGUgPSBuZXcgUlRDSWNlQ2FuZGlkYXRlKGNhbmRpZGF0ZSk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBlZXJDb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShjbGllbnRDYW5kaWRhdGUpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBzZW5kQW5zd2VyKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBjb25zdCBob3N0QW5zd2VyID0gYXdhaXQgdGhpcy5wZWVyQ29ubmVjdGlvbi5jcmVhdGVBbnN3ZXIoKTtcbiAgICAgICAgYXdhaXQgdGhpcy5wZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKGhvc3RBbnN3ZXIpO1xuICAgICAgICB0aGlzLmNsaWVudENoYW5uZWwuc2VuZFVURihKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICB0eXBlOiBcImFuc3dlclwiLFxuICAgICAgICAgICAgYW5zd2VyOiBob3N0QW5zd2VyXG4gICAgICAgIH0pKTtcbiAgICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyeGpzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInV1aWRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwid2ViM1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ3ZWJzb2NrZXRcIik7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwid3J0Y1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJ3c1wiKTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJjcnlwdG9cIik7IiwiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFyIHYxMy4yLjZcbiAqIChjKSAyMDEwLTIwMjIgR29vZ2xlIExMQy4gaHR0cHM6Ly9hbmd1bGFyLmlvL1xuICogTGljZW5zZTogTUlUXG4gKi9cblxuaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uLCBPYnNlcnZhYmxlLCBtZXJnZSBhcyBtZXJnZSQxIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzaGFyZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5mdW5jdGlvbiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KG9ialdpdGhQcm9wZXJ0eVRvRXh0cmFjdCkge1xuICAgIGZvciAobGV0IGtleSBpbiBvYmpXaXRoUHJvcGVydHlUb0V4dHJhY3QpIHtcbiAgICAgICAgaWYgKG9ialdpdGhQcm9wZXJ0eVRvRXh0cmFjdFtrZXldID09PSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IEVycm9yKCdDb3VsZCBub3QgZmluZCByZW5hbWVkIHByb3BlcnR5IG9uIHRhcmdldCBvYmplY3QuJyk7XG59XG4vKipcbiAqIFNldHMgcHJvcGVydGllcyBvbiBhIHRhcmdldCBvYmplY3QgZnJvbSBhIHNvdXJjZSBvYmplY3QsIGJ1dCBvbmx5IGlmXG4gKiB0aGUgcHJvcGVydHkgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIHRoZSB0YXJnZXQgb2JqZWN0LlxuICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHRvIHNldCBwcm9wZXJ0aWVzIG9uXG4gKiBAcGFyYW0gc291cmNlIFRoZSBzb3VyY2Ugb2YgdGhlIHByb3BlcnR5IGtleXMgYW5kIHZhbHVlcyB0byBzZXRcbiAqL1xuZnVuY3Rpb24gZmlsbFByb3BlcnRpZXModGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF0YXJnZXQuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnkodG9rZW4pIHtcbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHRva2VuKSkge1xuICAgICAgICByZXR1cm4gJ1snICsgdG9rZW4ubWFwKHN0cmluZ2lmeSkuam9pbignLCAnKSArICddJztcbiAgICB9XG4gICAgaWYgKHRva2VuID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdG9rZW47XG4gICAgfVxuICAgIGlmICh0b2tlbi5vdmVycmlkZGVuTmFtZSkge1xuICAgICAgICByZXR1cm4gYCR7dG9rZW4ub3ZlcnJpZGRlbk5hbWV9YDtcbiAgICB9XG4gICAgaWYgKHRva2VuLm5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGAke3Rva2VuLm5hbWV9YDtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gdG9rZW4udG9TdHJpbmcoKTtcbiAgICBpZiAocmVzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnICsgcmVzO1xuICAgIH1cbiAgICBjb25zdCBuZXdMaW5lSW5kZXggPSByZXMuaW5kZXhPZignXFxuJyk7XG4gICAgcmV0dXJuIG5ld0xpbmVJbmRleCA9PT0gLTEgPyByZXMgOiByZXMuc3Vic3RyaW5nKDAsIG5ld0xpbmVJbmRleCk7XG59XG4vKipcbiAqIENvbmNhdGVuYXRlcyB0d28gc3RyaW5ncyB3aXRoIHNlcGFyYXRvciwgYWxsb2NhdGluZyBuZXcgc3RyaW5ncyBvbmx5IHdoZW4gbmVjZXNzYXJ5LlxuICpcbiAqIEBwYXJhbSBiZWZvcmUgYmVmb3JlIHN0cmluZy5cbiAqIEBwYXJhbSBzZXBhcmF0b3Igc2VwYXJhdG9yIHN0cmluZy5cbiAqIEBwYXJhbSBhZnRlciBhZnRlciBzdHJpbmcuXG4gKiBAcmV0dXJucyBjb25jYXRlbmF0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBjb25jYXRTdHJpbmdzV2l0aFNwYWNlKGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICByZXR1cm4gKGJlZm9yZSA9PSBudWxsIHx8IGJlZm9yZSA9PT0gJycpID9cbiAgICAgICAgKGFmdGVyID09PSBudWxsID8gJycgOiBhZnRlcikgOlxuICAgICAgICAoKGFmdGVyID09IG51bGwgfHwgYWZ0ZXIgPT09ICcnKSA/IGJlZm9yZSA6IGJlZm9yZSArICcgJyArIGFmdGVyKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jb25zdCBfX2ZvcndhcmRfcmVmX18gPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHsgX19mb3J3YXJkX3JlZl9fOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5IH0pO1xuLyoqXG4gKiBBbGxvd3MgdG8gcmVmZXIgdG8gcmVmZXJlbmNlcyB3aGljaCBhcmUgbm90IHlldCBkZWZpbmVkLlxuICpcbiAqIEZvciBpbnN0YW5jZSwgYGZvcndhcmRSZWZgIGlzIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSBuZWVkIHRvIHJlZmVyIHRvIGZvciB0aGUgcHVycG9zZXMgb2ZcbiAqIERJIGlzIGRlY2xhcmVkLCBidXQgbm90IHlldCBkZWZpbmVkLiBJdCBpcyBhbHNvIHVzZWQgd2hlbiB0aGUgYHRva2VuYCB3aGljaCB3ZSB1c2Ugd2hlbiBjcmVhdGluZ1xuICogYSBxdWVyeSBpcyBub3QgeWV0IGRlZmluZWQuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9mb3J3YXJkX3JlZi9mb3J3YXJkX3JlZl9zcGVjLnRzIHJlZ2lvbj0nZm9yd2FyZF9yZWYnfVxuICogQHB1YmxpY0FwaVxuICovXG5mdW5jdGlvbiBmb3J3YXJkUmVmKGZvcndhcmRSZWZGbikge1xuICAgIGZvcndhcmRSZWZGbi5fX2ZvcndhcmRfcmVmX18gPSBmb3J3YXJkUmVmO1xuICAgIGZvcndhcmRSZWZGbi50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeSh0aGlzKCkpO1xuICAgIH07XG4gICAgcmV0dXJuIGZvcndhcmRSZWZGbjtcbn1cbi8qKlxuICogTGF6aWx5IHJldHJpZXZlcyB0aGUgcmVmZXJlbmNlIHZhbHVlIGZyb20gYSBmb3J3YXJkUmVmLlxuICpcbiAqIEFjdHMgYXMgdGhlIGlkZW50aXR5IGZ1bmN0aW9uIHdoZW4gZ2l2ZW4gYSBub24tZm9yd2FyZC1yZWYgdmFsdWUuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICoge0BleGFtcGxlIGNvcmUvZGkvdHMvZm9yd2FyZF9yZWYvZm9yd2FyZF9yZWZfc3BlYy50cyByZWdpb249J3Jlc29sdmVfZm9yd2FyZF9yZWYnfVxuICpcbiAqIEBzZWUgYGZvcndhcmRSZWZgXG4gKiBAcHVibGljQXBpXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGb3J3YXJkUmVmKHR5cGUpIHtcbiAgICByZXR1cm4gaXNGb3J3YXJkUmVmKHR5cGUpID8gdHlwZSgpIDogdHlwZTtcbn1cbi8qKiBDaGVja3Mgd2hldGhlciBhIGZ1bmN0aW9uIGlzIHdyYXBwZWQgYnkgYSBgZm9yd2FyZFJlZmAuICovXG5mdW5jdGlvbiBpc0ZvcndhcmRSZWYoZm4pIHtcbiAgICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIGZuLmhhc093blByb3BlcnR5KF9fZm9yd2FyZF9yZWZfXykgJiZcbiAgICAgICAgZm4uX19mb3J3YXJkX3JlZl9fID09PSBmb3J3YXJkUmVmO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQmFzZSBVUkwgZm9yIHRoZSBlcnJvciBkZXRhaWxzIHBhZ2UuXG4gKlxuICogS2VlcCB0aGUgZmlsZXMgYmVsb3cgaW4gZnVsbCBzeW5jOlxuICogIC0gcGFja2FnZXMvY29tcGlsZXItY2xpL3NyYy9uZ3RzYy9kaWFnbm9zdGljcy9zcmMvZXJyb3JfZGV0YWlsc19iYXNlX3VybC50c1xuICogIC0gcGFja2FnZXMvY29yZS9zcmMvZXJyb3JfZGV0YWlsc19iYXNlX3VybC50c1xuICovXG5jb25zdCBFUlJPUl9ERVRBSUxTX1BBR0VfQkFTRV9VUkwgPSAnaHR0cHM6Ly9hbmd1bGFyLmlvL2Vycm9ycyc7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDbGFzcyB0aGF0IHJlcHJlc2VudHMgYSBydW50aW1lIGVycm9yLlxuICogRm9ybWF0cyBhbmQgb3V0cHV0cyB0aGUgZXJyb3IgbWVzc2FnZSBpbiBhIGNvbnNpc3RlbnQgd2F5LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBcbiAqICB0aHJvdyBuZXcgUnVudGltZUVycm9yKFxuICogICAgUnVudGltZUVycm9yQ29kZS5JTkpFQ1RPUl9BTFJFQURZX0RFU1RST1lFRCxcbiAqICAgIG5nRGV2TW9kZSAmJiAnSW5qZWN0b3IgaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWQuJyk7XG4gKiBgYGBcbiAqXG4gKiBOb3RlOiB0aGUgYG1lc3NhZ2VgIGFyZ3VtZW50IGNvbnRhaW5zIGEgZGVzY3JpcHRpdmUgZXJyb3IgbWVzc2FnZSBhcyBhIHN0cmluZyBpbiBkZXZlbG9wbWVudFxuICogbW9kZSAod2hlbiB0aGUgYG5nRGV2TW9kZWAgaXMgZGVmaW5lZCkuIEluIHByb2R1Y3Rpb24gbW9kZSAoYWZ0ZXIgdHJlZS1zaGFraW5nIHBhc3MpLCB0aGVcbiAqIGBtZXNzYWdlYCBhcmd1bWVudCBiZWNvbWVzIGBmYWxzZWAsIHRodXMgd2UgYWNjb3VudCBmb3IgaXQgaW4gdGhlIHR5cGluZ3MgYW5kIHRoZSBydW50aW1lIGxvZ2ljLlxuICovXG5jbGFzcyBSdW50aW1lRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29kZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcihmb3JtYXRSdW50aW1lRXJyb3IoY29kZSwgbWVzc2FnZSkpO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIH1cbn1cbi8qKlxuICogQ2FsbGVkIHRvIGZvcm1hdCBhIHJ1bnRpbWUgZXJyb3IuXG4gKiBTZWUgYWRkaXRpb25hbCBpbmZvIG9uIHRoZSBgbWVzc2FnZWAgYXJndW1lbnQgdHlwZSBpbiB0aGUgYFJ1bnRpbWVFcnJvcmAgY2xhc3MgZGVzY3JpcHRpb24uXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFJ1bnRpbWVFcnJvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgLy8gRXJyb3IgY29kZSBtaWdodCBiZSBhIG5lZ2F0aXZlIG51bWJlciwgd2hpY2ggaXMgYSBzcGVjaWFsIG1hcmtlciB0aGF0IGluc3RydWN0cyB0aGUgbG9naWMgdG9cbiAgICAvLyBnZW5lcmF0ZSBhIGxpbmsgdG8gdGhlIGVycm9yIGRldGFpbHMgcGFnZSBvbiBhbmd1bGFyLmlvLlxuICAgIGNvbnN0IGZ1bGxDb2RlID0gYE5HMCR7TWF0aC5hYnMoY29kZSl9YDtcbiAgICBsZXQgZXJyb3JNZXNzYWdlID0gYCR7ZnVsbENvZGV9JHttZXNzYWdlID8gJzogJyArIG1lc3NhZ2UgOiAnJ31gO1xuICAgIGlmIChuZ0Rldk1vZGUgJiYgY29kZSA8IDApIHtcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gYCR7ZXJyb3JNZXNzYWdlfS4gRmluZCBtb3JlIGF0ICR7RVJST1JfREVUQUlMU19QQUdFX0JBU0VfVVJMfS8ke2Z1bGxDb2RlfWA7XG4gICAgfVxuICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBVc2VkIGZvciBzdHJpbmdpZnkgcmVuZGVyIG91dHB1dCBpbiBJdnkuXG4gKiBJbXBvcnRhbnQhIFRoaXMgZnVuY3Rpb24gaXMgdmVyeSBwZXJmb3JtYW5jZS1zZW5zaXRpdmUgYW5kIHdlIHNob3VsZFxuICogYmUgZXh0cmEgY2FyZWZ1bCBub3QgdG8gaW50cm9kdWNlIG1lZ2Ftb3JwaGljIHJlYWRzIGluIGl0LlxuICogQ2hlY2sgYGNvcmUvdGVzdC9yZW5kZXIzL3BlcmYvcmVuZGVyX3N0cmluZ2lmeWAgZm9yIGJlbmNobWFya3MgYW5kIGFsdGVybmF0ZSBpbXBsZW1lbnRhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0cmluZ2lmeSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIHJldHVybiAnJztcbiAgICAvLyBVc2UgYFN0cmluZ2Agc28gdGhhdCBpdCBpbnZva2VzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiB0aGUgdmFsdWUuIE5vdGUgdGhhdCB0aGlzXG4gICAgLy8gYXBwZWFycyB0byBiZSBmYXN0ZXIgdGhhbiBjYWxsaW5nIGB2YWx1ZS50b1N0cmluZ2AgKHNlZSBgcmVuZGVyX3N0cmluZ2lmeWAgYmVuY2htYXJrKS5cbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbn1cbi8qKlxuICogVXNlZCB0byBzdHJpbmdpZnkgYSB2YWx1ZSBzbyB0aGF0IGl0IGNhbiBiZSBkaXNwbGF5ZWQgaW4gYW4gZXJyb3IgbWVzc2FnZS5cbiAqIEltcG9ydGFudCEgVGhpcyBmdW5jdGlvbiBjb250YWlucyBhIG1lZ2Ftb3JwaGljIHJlYWQgYW5kIHNob3VsZCBvbmx5IGJlXG4gKiB1c2VkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5Rm9yRXJyb3IodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gdmFsdWUubmFtZSB8fCB2YWx1ZS50b1N0cmluZygpO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnR5cGUubmFtZSB8fCB2YWx1ZS50eXBlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJTdHJpbmdpZnkodmFsdWUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKiBDYWxsZWQgd2hlbiBkaXJlY3RpdmVzIGluamVjdCBlYWNoIG90aGVyIChjcmVhdGluZyBhIGNpcmN1bGFyIGRlcGVuZGVuY3kpICovXG5mdW5jdGlvbiB0aHJvd0N5Y2xpY0RlcGVuZGVuY3lFcnJvcih0b2tlbiwgcGF0aCkge1xuICAgIGNvbnN0IGRlcFBhdGggPSBwYXRoID8gYC4gRGVwZW5kZW5jeSBwYXRoOiAke3BhdGguam9pbignID4gJyl9ID4gJHt0b2tlbn1gIDogJyc7XG4gICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcigtMjAwIC8qIENZQ0xJQ19ESV9ERVBFTkRFTkNZICovLCBgQ2lyY3VsYXIgZGVwZW5kZW5jeSBpbiBESSBkZXRlY3RlZCBmb3IgJHt0b2tlbn0ke2RlcFBhdGh9YCk7XG59XG5mdW5jdGlvbiB0aHJvd01peGVkTXVsdGlQcm92aWRlckVycm9yKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IG1peCBtdWx0aSBwcm92aWRlcnMgYW5kIHJlZ3VsYXIgcHJvdmlkZXJzYCk7XG59XG5mdW5jdGlvbiB0aHJvd0ludmFsaWRQcm92aWRlckVycm9yKG5nTW9kdWxlVHlwZSwgcHJvdmlkZXJzLCBwcm92aWRlcikge1xuICAgIGxldCBuZ01vZHVsZURldGFpbCA9ICcnO1xuICAgIGlmIChuZ01vZHVsZVR5cGUgJiYgcHJvdmlkZXJzKSB7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyRGV0YWlsID0gcHJvdmlkZXJzLm1hcCh2ID0+IHYgPT0gcHJvdmlkZXIgPyAnPycgKyBwcm92aWRlciArICc/JyA6ICcuLi4nKTtcbiAgICAgICAgbmdNb2R1bGVEZXRhaWwgPVxuICAgICAgICAgICAgYCAtIG9ubHkgaW5zdGFuY2VzIG9mIFByb3ZpZGVyIGFuZCBUeXBlIGFyZSBhbGxvd2VkLCBnb3Q6IFske3Byb3ZpZGVyRGV0YWlsLmpvaW4oJywgJyl9XWA7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwcm92aWRlciBmb3IgdGhlIE5nTW9kdWxlICcke3N0cmluZ2lmeShuZ01vZHVsZVR5cGUpfSdgICsgbmdNb2R1bGVEZXRhaWwpO1xufVxuLyoqIFRocm93cyBhbiBlcnJvciB3aGVuIGEgdG9rZW4gaXMgbm90IGZvdW5kIGluIERJLiAqL1xuZnVuY3Rpb24gdGhyb3dQcm92aWRlck5vdEZvdW5kRXJyb3IodG9rZW4sIGluamVjdG9yTmFtZSkge1xuICAgIGNvbnN0IGluamVjdG9yRGV0YWlscyA9IGluamVjdG9yTmFtZSA/IGAgaW4gJHtpbmplY3Rvck5hbWV9YCA6ICcnO1xuICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoLTIwMSAvKiBQUk9WSURFUl9OT1RfRk9VTkQgKi8sIGBObyBwcm92aWRlciBmb3IgJHtzdHJpbmdpZnlGb3JFcnJvcih0b2tlbil9IGZvdW5kJHtpbmplY3RvckRldGFpbHN9YCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKGFjdHVhbCwgbXNnKSB7XG4gICAgaWYgKCEodHlwZW9mIGFjdHVhbCA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgIHRocm93RXJyb3IobXNnLCB0eXBlb2YgYWN0dWFsLCAnbnVtYmVyJywgJz09PScpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydE51bWJlckluUmFuZ2UoYWN0dWFsLCBtaW5JbmNsdXNpdmUsIG1heEluY2x1c2l2ZSkge1xuICAgIGFzc2VydE51bWJlcihhY3R1YWwsICdFeHBlY3RlZCBhIG51bWJlcicpO1xuICAgIGFzc2VydExlc3NUaGFuT3JFcXVhbChhY3R1YWwsIG1heEluY2x1c2l2ZSwgJ0V4cGVjdGVkIG51bWJlciB0byBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8nKTtcbiAgICBhc3NlcnRHcmVhdGVyVGhhbk9yRXF1YWwoYWN0dWFsLCBtaW5JbmNsdXNpdmUsICdFeHBlY3RlZCBudW1iZXIgdG8gYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvJyk7XG59XG5mdW5jdGlvbiBhc3NlcnRTdHJpbmcoYWN0dWFsLCBtc2cpIHtcbiAgICBpZiAoISh0eXBlb2YgYWN0dWFsID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2csIGFjdHVhbCA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3R1YWwsICdzdHJpbmcnLCAnPT09Jyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0RnVuY3Rpb24oYWN0dWFsLCBtc2cpIHtcbiAgICBpZiAoISh0eXBlb2YgYWN0dWFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICB0aHJvd0Vycm9yKG1zZywgYWN0dWFsID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdHVhbCwgJ2Z1bmN0aW9uJywgJz09PScpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1zZykge1xuICAgIGlmICghKGFjdHVhbCA9PSBleHBlY3RlZCkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2csIGFjdHVhbCwgZXhwZWN0ZWQsICc9PScpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydE5vdEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1zZykge1xuICAgIGlmICghKGFjdHVhbCAhPSBleHBlY3RlZCkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2csIGFjdHVhbCwgZXhwZWN0ZWQsICchPScpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFNhbWUoYWN0dWFsLCBleHBlY3RlZCwgbXNnKSB7XG4gICAgaWYgKCEoYWN0dWFsID09PSBleHBlY3RlZCkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2csIGFjdHVhbCwgZXhwZWN0ZWQsICc9PT0nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NlcnROb3RTYW1lKGFjdHVhbCwgZXhwZWN0ZWQsIG1zZykge1xuICAgIGlmICghKGFjdHVhbCAhPT0gZXhwZWN0ZWQpKSB7XG4gICAgICAgIHRocm93RXJyb3IobXNnLCBhY3R1YWwsIGV4cGVjdGVkLCAnIT09Jyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0TGVzc1RoYW4oYWN0dWFsLCBleHBlY3RlZCwgbXNnKSB7XG4gICAgaWYgKCEoYWN0dWFsIDwgZXhwZWN0ZWQpKSB7XG4gICAgICAgIHRocm93RXJyb3IobXNnLCBhY3R1YWwsIGV4cGVjdGVkLCAnPCcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydExlc3NUaGFuT3JFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtc2cpIHtcbiAgICBpZiAoIShhY3R1YWwgPD0gZXhwZWN0ZWQpKSB7XG4gICAgICAgIHRocm93RXJyb3IobXNnLCBhY3R1YWwsIGV4cGVjdGVkLCAnPD0nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NlcnRHcmVhdGVyVGhhbihhY3R1YWwsIGV4cGVjdGVkLCBtc2cpIHtcbiAgICBpZiAoIShhY3R1YWwgPiBleHBlY3RlZCkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2csIGFjdHVhbCwgZXhwZWN0ZWQsICc+Jyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0R3JlYXRlclRoYW5PckVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQsIG1zZykge1xuICAgIGlmICghKGFjdHVhbCA+PSBleHBlY3RlZCkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2csIGFjdHVhbCwgZXhwZWN0ZWQsICc+PScpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydE5vdERlZmluZWQoYWN0dWFsLCBtc2cpIHtcbiAgICBpZiAoYWN0dWFsICE9IG51bGwpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2csIGFjdHVhbCwgbnVsbCwgJz09Jyk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0RGVmaW5lZChhY3R1YWwsIG1zZykge1xuICAgIGlmIChhY3R1YWwgPT0gbnVsbCkge1xuICAgICAgICB0aHJvd0Vycm9yKG1zZywgYWN0dWFsLCBudWxsLCAnIT0nKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0aHJvd0Vycm9yKG1zZywgYWN0dWFsLCBleHBlY3RlZCwgY29tcGFyaXNvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgQVNTRVJUSU9OIEVSUk9SOiAke21zZ31gICtcbiAgICAgICAgKGNvbXBhcmlzb24gPT0gbnVsbCA/ICcnIDogYCBbRXhwZWN0ZWQ9PiAke2V4cGVjdGVkfSAke2NvbXBhcmlzb259ICR7YWN0dWFsfSA8PUFjdHVhbF1gKSk7XG59XG5mdW5jdGlvbiBhc3NlcnREb21Ob2RlKG5vZGUpIHtcbiAgICAvLyBJZiB3ZSdyZSBpbiBhIHdvcmtlciwgYE5vZGVgIHdpbGwgbm90IGJlIGRlZmluZWQuXG4gICAgaWYgKCEodHlwZW9mIE5vZGUgIT09ICd1bmRlZmluZWQnICYmIG5vZGUgaW5zdGFuY2VvZiBOb2RlKSAmJlxuICAgICAgICAhKHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlICE9IG51bGwgJiZcbiAgICAgICAgICAgIG5vZGUuY29uc3RydWN0b3IubmFtZSA9PT0gJ1dlYldvcmtlclJlbmRlck5vZGUnKSkge1xuICAgICAgICB0aHJvd0Vycm9yKGBUaGUgcHJvdmlkZWQgdmFsdWUgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBhIERPTSBOb2RlIGJ1dCBnb3QgJHtzdHJpbmdpZnkobm9kZSl9YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzZXJ0SW5kZXhJblJhbmdlKGFyciwgaW5kZXgpIHtcbiAgICBhc3NlcnREZWZpbmVkKGFyciwgJ0FycmF5IG11c3QgYmUgZGVmaW5lZC4nKTtcbiAgICBjb25zdCBtYXhMZW4gPSBhcnIubGVuZ3RoO1xuICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gbWF4TGVuKSB7XG4gICAgICAgIHRocm93RXJyb3IoYEluZGV4IGV4cGVjdGVkIHRvIGJlIGxlc3MgdGhhbiAke21heExlbn0gYnV0IGdvdCAke2luZGV4fWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydE9uZU9mKHZhbHVlLCAuLi52YWxpZFZhbHVlcykge1xuICAgIGlmICh2YWxpZFZhbHVlcy5pbmRleE9mKHZhbHVlKSAhPT0gLTEpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHRocm93RXJyb3IoYEV4cGVjdGVkIHZhbHVlIHRvIGJlIG9uZSBvZiAke0pTT04uc3RyaW5naWZ5KHZhbGlkVmFsdWVzKX0gYnV0IHdhcyAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX0uYCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDb25zdHJ1Y3QgYW4gaW5qZWN0YWJsZSBkZWZpbml0aW9uIHdoaWNoIGRlZmluZXMgaG93IGEgdG9rZW4gd2lsbCBiZSBjb25zdHJ1Y3RlZCBieSB0aGUgRElcbiAqIHN5c3RlbSwgYW5kIGluIHdoaWNoIGluamVjdG9ycyAoaWYgYW55KSBpdCB3aWxsIGJlIGF2YWlsYWJsZS5cbiAqXG4gKiBUaGlzIHNob3VsZCBiZSBhc3NpZ25lZCB0byBhIHN0YXRpYyBgybVwcm92YCBmaWVsZCBvbiBhIHR5cGUsIHdoaWNoIHdpbGwgdGhlbiBiZSBhblxuICogYEluamVjdGFibGVUeXBlYC5cbiAqXG4gKiBPcHRpb25zOlxuICogKiBgcHJvdmlkZWRJbmAgZGV0ZXJtaW5lcyB3aGljaCBpbmplY3RvcnMgd2lsbCBpbmNsdWRlIHRoZSBpbmplY3RhYmxlLCBieSBlaXRoZXIgYXNzb2NpYXRpbmcgaXRcbiAqICAgd2l0aCBhbiBgQE5nTW9kdWxlYCBvciBvdGhlciBgSW5qZWN0b3JUeXBlYCwgb3IgYnkgc3BlY2lmeWluZyB0aGF0IHRoaXMgaW5qZWN0YWJsZSBzaG91bGQgYmVcbiAqICAgcHJvdmlkZWQgaW4gdGhlIGAncm9vdCdgIGluamVjdG9yLCB3aGljaCB3aWxsIGJlIHRoZSBhcHBsaWNhdGlvbi1sZXZlbCBpbmplY3RvciBpbiBtb3N0IGFwcHMuXG4gKiAqIGBmYWN0b3J5YCBnaXZlcyB0aGUgemVybyBhcmd1bWVudCBmdW5jdGlvbiB3aGljaCB3aWxsIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgaW5qZWN0YWJsZS5cbiAqICAgVGhlIGZhY3RvcnkgY2FuIGNhbGwgYGluamVjdGAgdG8gYWNjZXNzIHRoZSBgSW5qZWN0b3JgIGFuZCByZXF1ZXN0IGluamVjdGlvbiBvZiBkZXBlbmRlbmNpZXMuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqIEBwdWJsaWNBcGkgVGhpcyBpbnN0cnVjdGlvbiBoYXMgYmVlbiBlbWl0dGVkIGJ5IFZpZXdFbmdpbmUgZm9yIHNvbWUgdGltZSBhbmQgaXMgZGVwbG95ZWQgdG8gbnBtLlxuICovXG5mdW5jdGlvbiDJtcm1ZGVmaW5lSW5qZWN0YWJsZShvcHRzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9rZW46IG9wdHMudG9rZW4sXG4gICAgICAgIHByb3ZpZGVkSW46IG9wdHMucHJvdmlkZWRJbiB8fCBudWxsLFxuICAgICAgICBmYWN0b3J5OiBvcHRzLmZhY3RvcnksXG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgfTtcbn1cbi8qKlxuICogQGRlcHJlY2F0ZWQgaW4gdjgsIGRlbGV0ZSBhZnRlciB2MTAuIFRoaXMgQVBJIHNob3VsZCBiZSB1c2VkIG9ubHkgYnkgZ2VuZXJhdGVkIGNvZGUsIGFuZCB0aGF0XG4gKiBjb2RlIHNob3VsZCBub3cgdXNlIMm1ybVkZWZpbmVJbmplY3RhYmxlIGluc3RlYWQuXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IGRlZmluZUluamVjdGFibGUgPSDJtcm1ZGVmaW5lSW5qZWN0YWJsZTtcbi8qKlxuICogQ29uc3RydWN0IGFuIGBJbmplY3RvckRlZmAgd2hpY2ggY29uZmlndXJlcyBhbiBpbmplY3Rvci5cbiAqXG4gKiBUaGlzIHNob3VsZCBiZSBhc3NpZ25lZCB0byBhIHN0YXRpYyBpbmplY3RvciBkZWYgKGDJtWluamApIGZpZWxkIG9uIGEgdHlwZSwgd2hpY2ggd2lsbCB0aGVuIGJlIGFuXG4gKiBgSW5qZWN0b3JUeXBlYC5cbiAqXG4gKiBPcHRpb25zOlxuICpcbiAqICogYHByb3ZpZGVyc2A6IGFuIG9wdGlvbmFsIGFycmF5IG9mIHByb3ZpZGVycyB0byBhZGQgdG8gdGhlIGluamVjdG9yLiBFYWNoIHByb3ZpZGVyIG11c3RcbiAqICAgZWl0aGVyIGhhdmUgYSBmYWN0b3J5IG9yIHBvaW50IHRvIGEgdHlwZSB3aGljaCBoYXMgYSBgybVwcm92YCBzdGF0aWMgcHJvcGVydHkgKHRoZVxuICogICB0eXBlIG11c3QgYmUgYW4gYEluamVjdGFibGVUeXBlYCkuXG4gKiAqIGBpbXBvcnRzYDogYW4gb3B0aW9uYWwgYXJyYXkgb2YgaW1wb3J0cyBvZiBvdGhlciBgSW5qZWN0b3JUeXBlYHMgb3IgYEluamVjdG9yVHlwZVdpdGhNb2R1bGVgc1xuICogICB3aG9zZSBwcm92aWRlcnMgd2lsbCBhbHNvIGJlIGFkZGVkIHRvIHRoZSBpbmplY3Rvci4gTG9jYWxseSBwcm92aWRlZCB0eXBlcyB3aWxsIG92ZXJyaWRlXG4gKiAgIHByb3ZpZGVycyBmcm9tIGltcG9ydHMuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWRlZmluZUluamVjdG9yKG9wdGlvbnMpIHtcbiAgICByZXR1cm4geyBwcm92aWRlcnM6IG9wdGlvbnMucHJvdmlkZXJzIHx8IFtdLCBpbXBvcnRzOiBvcHRpb25zLmltcG9ydHMgfHwgW10gfTtcbn1cbi8qKlxuICogUmVhZCB0aGUgaW5qZWN0YWJsZSBkZWYgKGDJtXByb3ZgKSBmb3IgYHR5cGVgIGluIGEgd2F5IHdoaWNoIGlzIGltbXVuZSB0byBhY2NpZGVudGFsbHkgcmVhZGluZ1xuICogaW5oZXJpdGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB0eXBlIEEgdHlwZSB3aGljaCBtYXkgaGF2ZSBpdHMgb3duIChub24taW5oZXJpdGVkKSBgybVwcm92YC5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5qZWN0YWJsZURlZih0eXBlKSB7XG4gICAgcmV0dXJuIGdldE93bkRlZmluaXRpb24odHlwZSwgTkdfUFJPVl9ERUYpIHx8IGdldE93bkRlZmluaXRpb24odHlwZSwgTkdfSU5KRUNUQUJMRV9ERUYpO1xufVxuLyoqXG4gKiBSZXR1cm4gZGVmaW5pdGlvbiBvbmx5IGlmIGl0IGlzIGRlZmluZWQgZGlyZWN0bHkgb24gYHR5cGVgIGFuZCBpcyBub3QgaW5oZXJpdGVkIGZyb20gYSBiYXNlXG4gKiBjbGFzcyBvZiBgdHlwZWAuXG4gKi9cbmZ1bmN0aW9uIGdldE93bkRlZmluaXRpb24odHlwZSwgZmllbGQpIHtcbiAgICByZXR1cm4gdHlwZS5oYXNPd25Qcm9wZXJ0eShmaWVsZCkgPyB0eXBlW2ZpZWxkXSA6IG51bGw7XG59XG4vKipcbiAqIFJlYWQgdGhlIGluamVjdGFibGUgZGVmIChgybVwcm92YCkgZm9yIGB0eXBlYCBvciByZWFkIHRoZSBgybVwcm92YCBmcm9tIG9uZSBvZiBpdHMgYW5jZXN0b3JzLlxuICpcbiAqIEBwYXJhbSB0eXBlIEEgdHlwZSB3aGljaCBtYXkgaGF2ZSBgybVwcm92YCwgdmlhIGluaGVyaXRhbmNlLlxuICpcbiAqIEBkZXByZWNhdGVkIFdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIEFuZ3VsYXIsIHdoZXJlIGFuIGVycm9yIHdpbGwgb2NjdXIgaW4gdGhlXG4gKiAgICAgc2NlbmFyaW8gaWYgd2UgZmluZCB0aGUgYMm1cHJvdmAgb24gYW4gYW5jZXN0b3Igb25seS5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5oZXJpdGVkSW5qZWN0YWJsZURlZih0eXBlKSB7XG4gICAgY29uc3QgZGVmID0gdHlwZSAmJiAodHlwZVtOR19QUk9WX0RFRl0gfHwgdHlwZVtOR19JTkpFQ1RBQkxFX0RFRl0pO1xuICAgIGlmIChkZWYpIHtcbiAgICAgICAgY29uc3QgdHlwZU5hbWUgPSBnZXRUeXBlTmFtZSh0eXBlKTtcbiAgICAgICAgLy8gVE9ETyhGVy0xMzA3KTogUmUtYWRkIG5nRGV2TW9kZSB3aGVuIGNsb3N1cmUgY2FuIGhhbmRsZSBpdFxuICAgICAgICAvLyBuZ0Rldk1vZGUgJiZcbiAgICAgICAgY29uc29sZS53YXJuKGBERVBSRUNBVEVEOiBESSBpcyBpbnN0YW50aWF0aW5nIGEgdG9rZW4gXCIke3R5cGVOYW1lfVwiIHRoYXQgaW5oZXJpdHMgaXRzIEBJbmplY3RhYmxlIGRlY29yYXRvciBidXQgZG9lcyBub3QgcHJvdmlkZSBvbmUgaXRzZWxmLlxcbmAgK1xuICAgICAgICAgICAgYFRoaXMgd2lsbCBiZWNvbWUgYW4gZXJyb3IgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBBbmd1bGFyLiBQbGVhc2UgYWRkIEBJbmplY3RhYmxlKCkgdG8gdGhlIFwiJHt0eXBlTmFtZX1cIiBjbGFzcy5gKTtcbiAgICAgICAgcmV0dXJuIGRlZjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8qKiBHZXRzIHRoZSBuYW1lIG9mIGEgdHlwZSwgYWNjb3VudGluZyBmb3Igc29tZSBjcm9zcy1icm93c2VyIGRpZmZlcmVuY2VzLiAqL1xuZnVuY3Rpb24gZ2V0VHlwZU5hbWUodHlwZSkge1xuICAgIC8vIGBGdW5jdGlvbi5wcm90b3R5cGUubmFtZWAgYmVoYXZlcyBkaWZmZXJlbnRseSBiZXR3ZWVuIElFIGFuZCBvdGhlciBicm93c2Vycy4gSW4gbW9zdCBicm93c2Vyc1xuICAgIC8vIGl0J2xsIGFsd2F5cyByZXR1cm4gdGhlIG5hbWUgb2YgdGhlIGZ1bmN0aW9uIGl0c2VsZiwgbm8gbWF0dGVyIGhvdyBtYW55IG90aGVyIGZ1bmN0aW9ucyBpdFxuICAgIC8vIGluaGVyaXRzIGZyb20uIE9uIElFIHRoZSBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgaXRzIG93biBgbmFtZWAgcHJvcGVydHksIGJ1dCBpdCB0YWtlcyBpdCBmcm9tXG4gICAgLy8gdGhlIGxvd2VzdCBsZXZlbCBpbiB0aGUgcHJvdG90eXBlIGNoYWluLiBFLmcuIGlmIHdlIGhhdmUgYGNsYXNzIEZvbyBleHRlbmRzIFBhcmVudGAgbW9zdFxuICAgIC8vIGJyb3dzZXJzIHdpbGwgZXZhbHVhdGUgYEZvby5uYW1lYCB0byBgRm9vYCB3aGlsZSBJRSB3aWxsIHJldHVybiBgUGFyZW50YC4gV2Ugd29yayBhcm91bmRcbiAgICAvLyB0aGUgaXNzdWUgYnkgY29udmVydGluZyB0aGUgZnVuY3Rpb24gdG8gYSBzdHJpbmcgYW5kIHBhcnNpbmcgaXRzIG5hbWUgb3V0IHRoYXQgd2F5IHZpYSBhIHJlZ2V4LlxuICAgIGlmICh0eXBlLmhhc093blByb3BlcnR5KCduYW1lJykpIHtcbiAgICAgICAgcmV0dXJuIHR5cGUubmFtZTtcbiAgICB9XG4gICAgY29uc3QgbWF0Y2ggPSAoJycgKyB0eXBlKS5tYXRjaCgvXmZ1bmN0aW9uXFxzKihbXlxccyhdKykvKTtcbiAgICByZXR1cm4gbWF0Y2ggPT09IG51bGwgPyAnJyA6IG1hdGNoWzFdO1xufVxuLyoqXG4gKiBSZWFkIHRoZSBpbmplY3RvciBkZWYgdHlwZSBpbiBhIHdheSB3aGljaCBpcyBpbW11bmUgdG8gYWNjaWRlbnRhbGx5IHJlYWRpbmcgaW5oZXJpdGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB0eXBlIHR5cGUgd2hpY2ggbWF5IGhhdmUgYW4gaW5qZWN0b3IgZGVmIChgybVpbmpgKVxuICovXG5mdW5jdGlvbiBnZXRJbmplY3RvckRlZih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgJiYgKHR5cGUuaGFzT3duUHJvcGVydHkoTkdfSU5KX0RFRikgfHwgdHlwZS5oYXNPd25Qcm9wZXJ0eShOR19JTkpFQ1RPUl9ERUYpKSA/XG4gICAgICAgIHR5cGVbTkdfSU5KX0RFRl0gOlxuICAgICAgICBudWxsO1xufVxuY29uc3QgTkdfUFJPVl9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHsgybVwcm92OiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5IH0pO1xuY29uc3QgTkdfSU5KX0RFRiA9IGdldENsb3N1cmVTYWZlUHJvcGVydHkoeyDJtWluajogZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSB9KTtcbi8vIFdlIG5lZWQgdG8ga2VlcCB0aGVzZSBhcm91bmQgc28gd2UgY2FuIHJlYWQgb2ZmIG9sZCBkZWZzIGlmIG5ldyBkZWZzIGFyZSB1bmF2YWlsYWJsZVxuY29uc3QgTkdfSU5KRUNUQUJMRV9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHsgbmdJbmplY3RhYmxlRGVmOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5IH0pO1xuY29uc3QgTkdfSU5KRUNUT1JfREVGID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7IG5nSW5qZWN0b3JEZWY6IGdldENsb3N1cmVTYWZlUHJvcGVydHkgfSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBJbmplY3Rpb24gZmxhZ3MgZm9yIERJLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIEluamVjdEZsYWdzO1xuKGZ1bmN0aW9uIChJbmplY3RGbGFncykge1xuICAgIC8vIFRPRE8oYWx4aHViKTogbWFrZSB0aGlzICdjb25zdCcgKGFuZCByZW1vdmUgYEludGVybmFsSW5qZWN0RmxhZ3NgIGVudW0pIHdoZW4gbmdjIG5vIGxvbmdlclxuICAgIC8vIHdyaXRlcyBleHBvcnRzIG9mIGl0IGludG8gbmdmYWN0b3J5IGZpbGVzLlxuICAgIC8qKiBDaGVjayBzZWxmIGFuZCBjaGVjayBwYXJlbnQgaW5qZWN0b3IgaWYgbmVlZGVkICovXG4gICAgSW5qZWN0RmxhZ3NbSW5qZWN0RmxhZ3NbXCJEZWZhdWx0XCJdID0gMF0gPSBcIkRlZmF1bHRcIjtcbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhhdCBhbiBpbmplY3RvciBzaG91bGQgcmV0cmlldmUgYSBkZXBlbmRlbmN5IGZyb20gYW55IGluamVjdG9yIHVudGlsIHJlYWNoaW5nIHRoZVxuICAgICAqIGhvc3QgZWxlbWVudCBvZiB0aGUgY3VycmVudCBjb21wb25lbnQuIChPbmx5IHVzZWQgd2l0aCBFbGVtZW50IEluamVjdG9yKVxuICAgICAqL1xuICAgIEluamVjdEZsYWdzW0luamVjdEZsYWdzW1wiSG9zdFwiXSA9IDFdID0gXCJIb3N0XCI7XG4gICAgLyoqIERvbid0IGFzY2VuZCB0byBhbmNlc3RvcnMgb2YgdGhlIG5vZGUgcmVxdWVzdGluZyBpbmplY3Rpb24uICovXG4gICAgSW5qZWN0RmxhZ3NbSW5qZWN0RmxhZ3NbXCJTZWxmXCJdID0gMl0gPSBcIlNlbGZcIjtcbiAgICAvKiogU2tpcCB0aGUgbm9kZSB0aGF0IGlzIHJlcXVlc3RpbmcgaW5qZWN0aW9uLiAqL1xuICAgIEluamVjdEZsYWdzW0luamVjdEZsYWdzW1wiU2tpcFNlbGZcIl0gPSA0XSA9IFwiU2tpcFNlbGZcIjtcbiAgICAvKiogSW5qZWN0IGBkZWZhdWx0VmFsdWVgIGluc3RlYWQgaWYgdG9rZW4gbm90IGZvdW5kLiAqL1xuICAgIEluamVjdEZsYWdzW0luamVjdEZsYWdzW1wiT3B0aW9uYWxcIl0gPSA4XSA9IFwiT3B0aW9uYWxcIjtcbn0pKEluamVjdEZsYWdzIHx8IChJbmplY3RGbGFncyA9IHt9KSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIGluamVjdC5cbiAqXG4gKiBCeSBkZWZhdWx0LCBpdCBpcyBgaW5qZWN0SW5qZWN0b3JPbmx5YCwgd2hpY2ggbWFrZXMgaXQgYEluamVjdG9yYC1vbmx5IGF3YXJlLiBJdCBjYW4gYmUgY2hhbmdlZFxuICogdG8gYGRpcmVjdGl2ZUluamVjdGAsIHdoaWNoIGJyaW5ncyBpbiB0aGUgYE5vZGVJbmplY3RvcmAgc3lzdGVtIG9mIGl2eS4gSXQgaXMgZGVzaWduZWQgdGhpc1xuICogd2F5IGZvciB0d28gcmVhc29uczpcbiAqICAxLiBgSW5qZWN0b3JgIHNob3VsZCBub3QgZGVwZW5kIG9uIGl2eSBsb2dpYy5cbiAqICAyLiBUbyBtYWludGFpbiB0cmVlIHNoYWtlLWFiaWxpdHkgd2UgZG9uJ3Qgd2FudCB0byBicmluZyBpbiB1bm5lY2Vzc2FyeSBjb2RlLlxuICovXG5sZXQgX2luamVjdEltcGxlbWVudGF0aW9uO1xuZnVuY3Rpb24gZ2V0SW5qZWN0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgcmV0dXJuIF9pbmplY3RJbXBsZW1lbnRhdGlvbjtcbn1cbi8qKlxuICogU2V0cyB0aGUgY3VycmVudCBpbmplY3QgaW1wbGVtZW50YXRpb24uXG4gKi9cbmZ1bmN0aW9uIHNldEluamVjdEltcGxlbWVudGF0aW9uKGltcGwpIHtcbiAgICBjb25zdCBwcmV2aW91cyA9IF9pbmplY3RJbXBsZW1lbnRhdGlvbjtcbiAgICBfaW5qZWN0SW1wbGVtZW50YXRpb24gPSBpbXBsO1xuICAgIHJldHVybiBwcmV2aW91cztcbn1cbi8qKlxuICogSW5qZWN0cyBgcm9vdGAgdG9rZW5zIGluIGxpbXAgbW9kZS5cbiAqXG4gKiBJZiBubyBpbmplY3RvciBleGlzdHMsIHdlIGNhbiBzdGlsbCBpbmplY3QgdHJlZS1zaGFrYWJsZSBwcm92aWRlcnMgd2hpY2ggaGF2ZSBgcHJvdmlkZWRJbmAgc2V0IHRvXG4gKiBgXCJyb290XCJgLiBUaGlzIGlzIGtub3duIGFzIHRoZSBsaW1wIG1vZGUgaW5qZWN0aW9uLiBJbiBzdWNoIGNhc2UgdGhlIHZhbHVlIGlzIHN0b3JlZCBpbiB0aGVcbiAqIGluamVjdGFibGUgZGVmaW5pdGlvbi5cbiAqL1xuZnVuY3Rpb24gaW5qZWN0Um9vdExpbXBNb2RlKHRva2VuLCBub3RGb3VuZFZhbHVlLCBmbGFncykge1xuICAgIGNvbnN0IGluamVjdGFibGVEZWYgPSBnZXRJbmplY3RhYmxlRGVmKHRva2VuKTtcbiAgICBpZiAoaW5qZWN0YWJsZURlZiAmJiBpbmplY3RhYmxlRGVmLnByb3ZpZGVkSW4gPT0gJ3Jvb3QnKSB7XG4gICAgICAgIHJldHVybiBpbmplY3RhYmxlRGVmLnZhbHVlID09PSB1bmRlZmluZWQgPyBpbmplY3RhYmxlRGVmLnZhbHVlID0gaW5qZWN0YWJsZURlZi5mYWN0b3J5KCkgOlxuICAgICAgICAgICAgaW5qZWN0YWJsZURlZi52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGZsYWdzICYgSW5qZWN0RmxhZ3MuT3B0aW9uYWwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGlmIChub3RGb3VuZFZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiBub3RGb3VuZFZhbHVlO1xuICAgIHRocm93UHJvdmlkZXJOb3RGb3VuZEVycm9yKHN0cmluZ2lmeSh0b2tlbiksICdJbmplY3RvcicpO1xufVxuLyoqXG4gKiBBc3NlcnQgdGhhdCBgX2luamVjdEltcGxlbWVudGF0aW9uYCBpcyBub3QgYGZuYC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCwgdG8gcHJldmVudCBpbmZpbml0ZSByZWN1cnNpb24uXG4gKlxuICogQHBhcmFtIGZuIEZ1bmN0aW9uIHdoaWNoIGl0IHNob3VsZCBub3QgZXF1YWwgdG9cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0SW5qZWN0SW1wbGVtZW50YXRpb25Ob3RFcXVhbChmbikge1xuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnROb3RFcXVhbChfaW5qZWN0SW1wbGVtZW50YXRpb24sIGZuLCAnQ2FsbGluZyDJtcm1aW5qZWN0IHdvdWxkIGNhdXNlIGluZmluaXRlIHJlY3Vyc2lvbicpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQ29udmluY2UgY2xvc3VyZSBjb21waWxlciB0aGF0IHRoZSB3cmFwcGVkIGZ1bmN0aW9uIGhhcyBubyBzaWRlLWVmZmVjdHMuXG4gKlxuICogQ2xvc3VyZSBjb21waWxlciBhbHdheXMgYXNzdW1lcyB0aGF0IGB0b1N0cmluZ2AgaGFzIG5vIHNpZGUtZWZmZWN0cy4gV2UgdXNlIHRoaXMgcXVpcmsgdG9cbiAqIGFsbG93IHVzIHRvIGV4ZWN1dGUgYSBmdW5jdGlvbiBidXQgaGF2ZSBjbG9zdXJlIGNvbXBpbGVyIG1hcmsgdGhlIGNhbGwgYXMgbm8tc2lkZS1lZmZlY3RzLlxuICogSXQgaXMgaW1wb3J0YW50IHRoYXQgdGhlIHJldHVybiB2YWx1ZSBmb3IgdGhlIGBub1NpZGVFZmZlY3RzYCBmdW5jdGlvbiBiZSBhc3NpZ25lZFxuICogdG8gc29tZXRoaW5nIHdoaWNoIGlzIHJldGFpbmVkIG90aGVyd2lzZSB0aGUgY2FsbCB0byBgbm9TaWRlRWZmZWN0c2Agd2lsbCBiZSByZW1vdmVkIGJ5IGNsb3N1cmVcbiAqIGNvbXBpbGVyLlxuICovXG5mdW5jdGlvbiBub1NpZGVFZmZlY3RzKGZuKSB7XG4gICAgcmV0dXJuIHsgdG9TdHJpbmc6IGZuIH0udG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoZSBzdHJhdGVneSB0aGF0IHRoZSBkZWZhdWx0IGNoYW5nZSBkZXRlY3RvciB1c2VzIHRvIGRldGVjdCBjaGFuZ2VzLlxuICogV2hlbiBzZXQsIHRha2VzIGVmZmVjdCB0aGUgbmV4dCB0aW1lIGNoYW5nZSBkZXRlY3Rpb24gaXMgdHJpZ2dlcmVkLlxuICpcbiAqIEBzZWUge0BsaW5rIENoYW5nZURldGVjdG9yUmVmI3VzYWdlLW5vdGVzIENoYW5nZSBkZXRlY3Rpb24gdXNhZ2V9XG4gKlxuICogQHB1YmxpY0FwaVxuICovXG52YXIgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3k7XG4oZnVuY3Rpb24gKENoYW5nZURldGVjdGlvblN0cmF0ZWd5KSB7XG4gICAgLyoqXG4gICAgICogVXNlIHRoZSBgQ2hlY2tPbmNlYCBzdHJhdGVneSwgbWVhbmluZyB0aGF0IGF1dG9tYXRpYyBjaGFuZ2UgZGV0ZWN0aW9uIGlzIGRlYWN0aXZhdGVkXG4gICAgICogdW50aWwgcmVhY3RpdmF0ZWQgYnkgc2V0dGluZyB0aGUgc3RyYXRlZ3kgdG8gYERlZmF1bHRgIChgQ2hlY2tBbHdheXNgKS5cbiAgICAgKiBDaGFuZ2UgZGV0ZWN0aW9uIGNhbiBzdGlsbCBiZSBleHBsaWNpdGx5IGludm9rZWQuXG4gICAgICogVGhpcyBzdHJhdGVneSBhcHBsaWVzIHRvIGFsbCBjaGlsZCBkaXJlY3RpdmVzIGFuZCBjYW5ub3QgYmUgb3ZlcnJpZGRlbi5cbiAgICAgKi9cbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVtcIk9uUHVzaFwiXSA9IDBdID0gXCJPblB1c2hcIjtcbiAgICAvKipcbiAgICAgKiBVc2UgdGhlIGRlZmF1bHQgYENoZWNrQWx3YXlzYCBzdHJhdGVneSwgaW4gd2hpY2ggY2hhbmdlIGRldGVjdGlvbiBpcyBhdXRvbWF0aWMgdW50aWxcbiAgICAgKiBleHBsaWNpdGx5IGRlYWN0aXZhdGVkLlxuICAgICAqL1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5W0NoYW5nZURldGVjdGlvblN0cmF0ZWd5W1wiRGVmYXVsdFwiXSA9IDFdID0gXCJEZWZhdWx0XCI7XG59KShDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB8fCAoQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgPSB7fSkpO1xuLyoqXG4gKiBEZWZpbmVzIHRoZSBwb3NzaWJsZSBzdGF0ZXMgb2YgdGhlIGRlZmF1bHQgY2hhbmdlIGRldGVjdG9yLlxuICogQHNlZSBgQ2hhbmdlRGV0ZWN0b3JSZWZgXG4gKi9cbnZhciBDaGFuZ2VEZXRlY3RvclN0YXR1cztcbihmdW5jdGlvbiAoQ2hhbmdlRGV0ZWN0b3JTdGF0dXMpIHtcbiAgICAvKipcbiAgICAgKiBBIHN0YXRlIGluIHdoaWNoLCBhZnRlciBjYWxsaW5nIGBkZXRlY3RDaGFuZ2VzKClgLCB0aGUgY2hhbmdlIGRldGVjdG9yXG4gICAgICogc3RhdGUgYmVjb21lcyBgQ2hlY2tlZGAsIGFuZCBtdXN0IGJlIGV4cGxpY2l0bHkgaW52b2tlZCBvciByZWFjdGl2YXRlZC5cbiAgICAgKi9cbiAgICBDaGFuZ2VEZXRlY3RvclN0YXR1c1tDaGFuZ2VEZXRlY3RvclN0YXR1c1tcIkNoZWNrT25jZVwiXSA9IDBdID0gXCJDaGVja09uY2VcIjtcbiAgICAvKipcbiAgICAgKiBBIHN0YXRlIGluIHdoaWNoIGNoYW5nZSBkZXRlY3Rpb24gaXMgc2tpcHBlZCB1bnRpbCB0aGUgY2hhbmdlIGRldGVjdG9yIG1vZGVcbiAgICAgKiBiZWNvbWVzIGBDaGVja09uY2VgLlxuICAgICAqL1xuICAgIENoYW5nZURldGVjdG9yU3RhdHVzW0NoYW5nZURldGVjdG9yU3RhdHVzW1wiQ2hlY2tlZFwiXSA9IDFdID0gXCJDaGVja2VkXCI7XG4gICAgLyoqXG4gICAgICogQSBzdGF0ZSBpbiB3aGljaCBjaGFuZ2UgZGV0ZWN0aW9uIGNvbnRpbnVlcyBhdXRvbWF0aWNhbGx5IHVudGlsIGV4cGxpY2l0bHlcbiAgICAgKiBkZWFjdGl2YXRlZC5cbiAgICAgKi9cbiAgICBDaGFuZ2VEZXRlY3RvclN0YXR1c1tDaGFuZ2VEZXRlY3RvclN0YXR1c1tcIkNoZWNrQWx3YXlzXCJdID0gMl0gPSBcIkNoZWNrQWx3YXlzXCI7XG4gICAgLyoqXG4gICAgICogQSBzdGF0ZSBpbiB3aGljaCBhIGNoYW5nZSBkZXRlY3RvciBzdWIgdHJlZSBpcyBub3QgYSBwYXJ0IG9mIHRoZSBtYWluIHRyZWUgYW5kXG4gICAgICogc2hvdWxkIGJlIHNraXBwZWQuXG4gICAgICovXG4gICAgQ2hhbmdlRGV0ZWN0b3JTdGF0dXNbQ2hhbmdlRGV0ZWN0b3JTdGF0dXNbXCJEZXRhY2hlZFwiXSA9IDNdID0gXCJEZXRhY2hlZFwiO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IHRoZSBjaGFuZ2UgZGV0ZWN0b3IgZW5jb3VudGVyZWQgYW4gZXJyb3IgY2hlY2tpbmcgYSBiaW5kaW5nXG4gICAgICogb3IgY2FsbGluZyBhIGRpcmVjdGl2ZSBsaWZlY3ljbGUgbWV0aG9kIGFuZCBpcyBub3cgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLiBDaGFuZ2VcbiAgICAgKiBkZXRlY3RvcnMgaW4gdGhpcyBzdGF0ZSBkbyBub3QgZGV0ZWN0IGNoYW5nZXMuXG4gICAgICovXG4gICAgQ2hhbmdlRGV0ZWN0b3JTdGF0dXNbQ2hhbmdlRGV0ZWN0b3JTdGF0dXNbXCJFcnJvcmVkXCJdID0gNF0gPSBcIkVycm9yZWRcIjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCB0aGUgY2hhbmdlIGRldGVjdG9yIGhhcyBiZWVuIGRlc3Ryb3llZC5cbiAgICAgKi9cbiAgICBDaGFuZ2VEZXRlY3RvclN0YXR1c1tDaGFuZ2VEZXRlY3RvclN0YXR1c1tcIkRlc3Ryb3llZFwiXSA9IDVdID0gXCJEZXN0cm95ZWRcIjtcbn0pKENoYW5nZURldGVjdG9yU3RhdHVzIHx8IChDaGFuZ2VEZXRlY3RvclN0YXR1cyA9IHt9KSk7XG4vKipcbiAqIFJlcG9ydHMgd2hldGhlciBhIGdpdmVuIHN0cmF0ZWd5IGlzIGN1cnJlbnRseSB0aGUgZGVmYXVsdCBmb3IgY2hhbmdlIGRldGVjdGlvbi5cbiAqIEBwYXJhbSBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSBUaGUgc3RyYXRlZ3kgdG8gY2hlY2suXG4gKiBAcmV0dXJucyBUcnVlIGlmIHRoZSBnaXZlbiBzdHJhdGVneSBpcyB0aGUgY3VycmVudCBkZWZhdWx0LCBmYWxzZSBvdGhlcndpc2UuXG4gKiBAc2VlIGBDaGFuZ2VEZXRlY3RvclN0YXR1c2BcbiAqIEBzZWUgYENoYW5nZURldGVjdG9yUmVmYFxuICovXG5mdW5jdGlvbiBpc0RlZmF1bHRDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneShjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSkge1xuICAgIHJldHVybiBjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSA9PSBudWxsIHx8XG4gICAgICAgIGNoYW5nZURldGVjdGlvblN0cmF0ZWd5ID09PSBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5EZWZhdWx0O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogRGVmaW5lcyB0aGUgQ1NTIHN0eWxlcyBlbmNhcHN1bGF0aW9uIHBvbGljaWVzIGZvciB0aGUge0BsaW5rIENvbXBvbmVudH0gZGVjb3JhdG9yJ3NcbiAqIGBlbmNhcHN1bGF0aW9uYCBvcHRpb24uXG4gKlxuICogU2VlIHtAbGluayBDb21wb25lbnQjZW5jYXBzdWxhdGlvbiBlbmNhcHN1bGF0aW9ufS5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqXG4gKiB7QGV4YW1wbGUgY29yZS90cy9tZXRhZGF0YS9lbmNhcHN1bGF0aW9uLnRzIHJlZ2lvbj0nbG9uZ2Zvcm0nfVxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xudmFyIFZpZXdFbmNhcHN1bGF0aW9uJDE7XG4oZnVuY3Rpb24gKFZpZXdFbmNhcHN1bGF0aW9uKSB7XG4gICAgLy8gVE9ETzogY29uc2lkZXIgbWFraW5nIGBWaWV3RW5jYXBzdWxhdGlvbmAgYSBgY29uc3QgZW51bWAgaW5zdGVhZC4gU2VlXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvNDQxMTkgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24uXG4gICAgLyoqXG4gICAgICogRW11bGF0ZXMgYSBuYXRpdmUgU2hhZG93IERPTSBlbmNhcHN1bGF0aW9uIGJlaGF2aW9yIGJ5IGFkZGluZyBhIHNwZWNpZmljIGF0dHJpYnV0ZSB0byB0aGVcbiAgICAgKiBjb21wb25lbnQncyBob3N0IGVsZW1lbnQgYW5kIGFwcGx5aW5nIHRoZSBzYW1lIGF0dHJpYnV0ZSB0byBhbGwgdGhlIENTUyBzZWxlY3RvcnMgcHJvdmlkZWRcbiAgICAgKiB2aWEge0BsaW5rIENvbXBvbmVudCNzdHlsZXMgc3R5bGVzfSBvciB7QGxpbmsgQ29tcG9uZW50I3N0eWxlVXJscyBzdHlsZVVybHN9LlxuICAgICAqXG4gICAgICogVGhpcyBpcyB0aGUgZGVmYXVsdCBvcHRpb24uXG4gICAgICovXG4gICAgVmlld0VuY2Fwc3VsYXRpb25bVmlld0VuY2Fwc3VsYXRpb25bXCJFbXVsYXRlZFwiXSA9IDBdID0gXCJFbXVsYXRlZFwiO1xuICAgIC8vIEhpc3RvcmljYWxseSB0aGUgMSB2YWx1ZSB3YXMgZm9yIGBOYXRpdmVgIGVuY2Fwc3VsYXRpb24gd2hpY2ggaGFzIGJlZW4gcmVtb3ZlZCBhcyBvZiB2MTEuXG4gICAgLyoqXG4gICAgICogRG9lc24ndCBwcm92aWRlIGFueSBzb3J0IG9mIENTUyBzdHlsZSBlbmNhcHN1bGF0aW9uLCBtZWFuaW5nIHRoYXQgYWxsIHRoZSBzdHlsZXMgcHJvdmlkZWRcbiAgICAgKiB2aWEge0BsaW5rIENvbXBvbmVudCNzdHlsZXMgc3R5bGVzfSBvciB7QGxpbmsgQ29tcG9uZW50I3N0eWxlVXJscyBzdHlsZVVybHN9IGFyZSBhcHBsaWNhYmxlXG4gICAgICogdG8gYW55IEhUTUwgZWxlbWVudCBvZiB0aGUgYXBwbGljYXRpb24gcmVnYXJkbGVzcyBvZiB0aGVpciBob3N0IENvbXBvbmVudC5cbiAgICAgKi9cbiAgICBWaWV3RW5jYXBzdWxhdGlvbltWaWV3RW5jYXBzdWxhdGlvbltcIk5vbmVcIl0gPSAyXSA9IFwiTm9uZVwiO1xuICAgIC8qKlxuICAgICAqIFVzZXMgdGhlIGJyb3dzZXIncyBuYXRpdmUgU2hhZG93IERPTSBBUEkgdG8gZW5jYXBzdWxhdGUgQ1NTIHN0eWxlcywgbWVhbmluZyB0aGF0IGl0IGNyZWF0ZXNcbiAgICAgKiBhIFNoYWRvd1Jvb3QgZm9yIHRoZSBjb21wb25lbnQncyBob3N0IGVsZW1lbnQgd2hpY2ggaXMgdGhlbiB1c2VkIHRvIGVuY2Fwc3VsYXRlXG4gICAgICogYWxsIHRoZSBDb21wb25lbnQncyBzdHlsaW5nLlxuICAgICAqL1xuICAgIFZpZXdFbmNhcHN1bGF0aW9uW1ZpZXdFbmNhcHN1bGF0aW9uW1wiU2hhZG93RG9tXCJdID0gM10gPSBcIlNoYWRvd0RvbVwiO1xufSkoVmlld0VuY2Fwc3VsYXRpb24kMSB8fCAoVmlld0VuY2Fwc3VsYXRpb24kMSA9IHt9KSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgX19nbG9iYWxUaGlzID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbFRoaXM7XG5jb25zdCBfX3dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdztcbmNvbnN0IF9fc2VsZiA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmIHNlbGY7XG5jb25zdCBfX2dsb2JhbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnICYmIGdsb2JhbDtcbi8vIEFsd2F5cyB1c2UgX19nbG9iYWxUaGlzIGlmIGF2YWlsYWJsZSwgd2hpY2ggaXMgdGhlIHNwZWMtZGVmaW5lZCBnbG9iYWwgdmFyaWFibGUgYWNyb3NzIGFsbFxuLy8gZW52aXJvbm1lbnRzLCB0aGVuIGZhbGxiYWNrIHRvIF9fZ2xvYmFsIGZpcnN0LCBiZWNhdXNlIGluIE5vZGUgdGVzdHMgYm90aCBfX2dsb2JhbCBhbmRcbi8vIF9fd2luZG93IG1heSBiZSBkZWZpbmVkIGFuZCBfZ2xvYmFsIHNob3VsZCBiZSBfX2dsb2JhbCBpbiB0aGF0IGNhc2UuXG5jb25zdCBfZ2xvYmFsID0gX19nbG9iYWxUaGlzIHx8IF9fZ2xvYmFsIHx8IF9fd2luZG93IHx8IF9fc2VsZjtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5mdW5jdGlvbiBuZ0Rldk1vZGVSZXNldFBlcmZDb3VudGVycygpIHtcbiAgICBjb25zdCBsb2NhdGlvblN0cmluZyA9IHR5cGVvZiBsb2NhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgPyBsb2NhdGlvbi50b1N0cmluZygpIDogJyc7XG4gICAgY29uc3QgbmV3Q291bnRlcnMgPSB7XG4gICAgICAgIG5hbWVkQ29uc3RydWN0b3JzOiBsb2NhdGlvblN0cmluZy5pbmRleE9mKCduZ0Rldk1vZGU9bmFtZWRDb25zdHJ1Y3RvcnMnKSAhPSAtMSxcbiAgICAgICAgZmlyc3RDcmVhdGVQYXNzOiAwLFxuICAgICAgICB0Tm9kZTogMCxcbiAgICAgICAgdFZpZXc6IDAsXG4gICAgICAgIHJlbmRlcmVyQ3JlYXRlVGV4dE5vZGU6IDAsXG4gICAgICAgIHJlbmRlcmVyU2V0VGV4dDogMCxcbiAgICAgICAgcmVuZGVyZXJDcmVhdGVFbGVtZW50OiAwLFxuICAgICAgICByZW5kZXJlckFkZEV2ZW50TGlzdGVuZXI6IDAsXG4gICAgICAgIHJlbmRlcmVyU2V0QXR0cmlidXRlOiAwLFxuICAgICAgICByZW5kZXJlclJlbW92ZUF0dHJpYnV0ZTogMCxcbiAgICAgICAgcmVuZGVyZXJTZXRQcm9wZXJ0eTogMCxcbiAgICAgICAgcmVuZGVyZXJTZXRDbGFzc05hbWU6IDAsXG4gICAgICAgIHJlbmRlcmVyQWRkQ2xhc3M6IDAsXG4gICAgICAgIHJlbmRlcmVyUmVtb3ZlQ2xhc3M6IDAsXG4gICAgICAgIHJlbmRlcmVyU2V0U3R5bGU6IDAsXG4gICAgICAgIHJlbmRlcmVyUmVtb3ZlU3R5bGU6IDAsXG4gICAgICAgIHJlbmRlcmVyRGVzdHJveTogMCxcbiAgICAgICAgcmVuZGVyZXJEZXN0cm95Tm9kZTogMCxcbiAgICAgICAgcmVuZGVyZXJNb3ZlTm9kZTogMCxcbiAgICAgICAgcmVuZGVyZXJSZW1vdmVOb2RlOiAwLFxuICAgICAgICByZW5kZXJlckFwcGVuZENoaWxkOiAwLFxuICAgICAgICByZW5kZXJlckluc2VydEJlZm9yZTogMCxcbiAgICAgICAgcmVuZGVyZXJDcmVhdGVDb21tZW50OiAwLFxuICAgIH07XG4gICAgLy8gTWFrZSBzdXJlIHRvIHJlZmVyIHRvIG5nRGV2TW9kZSBhcyBbJ25nRGV2TW9kZSddIGZvciBjbG9zdXJlLlxuICAgIGNvbnN0IGFsbG93TmdEZXZNb2RlVHJ1ZSA9IGxvY2F0aW9uU3RyaW5nLmluZGV4T2YoJ25nRGV2TW9kZT1mYWxzZScpID09PSAtMTtcbiAgICBfZ2xvYmFsWyduZ0Rldk1vZGUnXSA9IGFsbG93TmdEZXZNb2RlVHJ1ZSAmJiBuZXdDb3VudGVycztcbiAgICByZXR1cm4gbmV3Q291bnRlcnM7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2hlY2tzIHRvIHNlZSBpZiB0aGUgYG5nRGV2TW9kZWAgaGFzIGJlZW4gc2V0LiBJZiB5ZXMsXG4gKiB0aGVuIHdlIGhvbm9yIGl0LCBvdGhlcndpc2Ugd2UgZGVmYXVsdCB0byBkZXYgbW9kZSB3aXRoIGFkZGl0aW9uYWwgY2hlY2tzLlxuICpcbiAqIFRoZSBpZGVhIGlzIHRoYXQgdW5sZXNzIHdlIGFyZSBkb2luZyBwcm9kdWN0aW9uIGJ1aWxkIHdoZXJlIHdlIGV4cGxpY2l0bHlcbiAqIHNldCBgbmdEZXZNb2RlID09IGZhbHNlYCB3ZSBzaG91bGQgYmUgaGVscGluZyB0aGUgZGV2ZWxvcGVyIGJ5IHByb3ZpZGluZ1xuICogYXMgbXVjaCBlYXJseSB3YXJuaW5nIGFuZCBlcnJvcnMgYXMgcG9zc2libGUuXG4gKlxuICogYMm1ybVkZWZpbmVDb21wb25lbnRgIGlzIGd1YXJhbnRlZWQgdG8gaGF2ZSBiZWVuIGNhbGxlZCBiZWZvcmUgYW55IGNvbXBvbmVudCB0ZW1wbGF0ZSBmdW5jdGlvbnNcbiAqIChhbmQgdGh1cyBJdnkgaW5zdHJ1Y3Rpb25zKSwgc28gYSBzaW5nbGUgaW5pdGlhbGl6YXRpb24gdGhlcmUgaXMgc3VmZmljaWVudCB0byBlbnN1cmUgbmdEZXZNb2RlXG4gKiBpcyBkZWZpbmVkIGZvciB0aGUgZW50aXJlIGluc3RydWN0aW9uIHNldC5cbiAqXG4gKiBXaGVuIGNoZWNraW5nIGBuZ0Rldk1vZGVgIG9uIHRvcGxldmVsLCBhbHdheXMgaW5pdCBpdCBiZWZvcmUgcmVmZXJlbmNpbmcgaXRcbiAqIChlLmcuIGAoKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkgJiYgaW5pdE5nRGV2TW9kZSgpKWApLCBvdGhlcndpc2UgeW91IGNhblxuICogIGdldCBhIGBSZWZlcmVuY2VFcnJvcmAgbGlrZSBpbiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8zMTU5NS5cbiAqXG4gKiBEZXRhaWxzIG9uIHBvc3NpYmxlIHZhbHVlcyBmb3IgYG5nRGV2TW9kZWAgY2FuIGJlIGZvdW5kIG9uIGl0cyBkb2NzdHJpbmcuXG4gKlxuICogTk9URTpcbiAqIC0gY2hhbmdlcyB0byB0aGUgYG5nRGV2TW9kZWAgbmFtZSBtdXN0IGJlIHN5bmNlZCB3aXRoIGBjb21waWxlci1jbGkvc3JjL3Rvb2xpbmcudHNgLlxuICovXG5mdW5jdGlvbiBpbml0TmdEZXZNb2RlKCkge1xuICAgIC8vIFRoZSBiZWxvdyBjaGVja3MgYXJlIHRvIGVuc3VyZSB0aGF0IGNhbGxpbmcgYGluaXROZ0Rldk1vZGVgIG11bHRpcGxlIHRpbWVzIGRvZXMgbm90XG4gICAgLy8gcmVzZXQgdGhlIGNvdW50ZXJzLlxuICAgIC8vIElmIHRoZSBgbmdEZXZNb2RlYCBpcyBub3QgYW4gb2JqZWN0LCB0aGVuIGl0IG1lYW5zIHdlIGhhdmUgbm90IGNyZWF0ZWQgdGhlIHBlcmYgY291bnRlcnNcbiAgICAvLyB5ZXQuXG4gICAgaWYgKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkge1xuICAgICAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIG5nRGV2TW9kZVJlc2V0UGVyZkNvdW50ZXJzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBuZ0Rldk1vZGUgIT09ICd1bmRlZmluZWQnICYmICEhbmdEZXZNb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgcmV1c2VhYmxlIFwiZW1wdHlcIiBzeW1ib2xzIHRoYXQgY2FuIGJlIHVzZWQgYXMgZGVmYXVsdCByZXR1cm4gdmFsdWVzXG4gKiBpbiBkaWZmZXJlbnQgcGFydHMgb2YgdGhlIHJlbmRlcmluZyBjb2RlLiBCZWNhdXNlIHRoZSBzYW1lIHN5bWJvbHMgYXJlIHJldHVybmVkLCB0aGlzXG4gKiBhbGxvd3MgZm9yIGlkZW50aXR5IGNoZWNrcyBhZ2FpbnN0IHRoZXNlIHZhbHVlcyB0byBiZSBjb25zaXN0ZW50bHkgdXNlZCBieSB0aGUgZnJhbWV3b3JrXG4gKiBjb2RlLlxuICovXG5jb25zdCBFTVBUWV9PQkogPSB7fTtcbmNvbnN0IEVNUFRZX0FSUkFZID0gW107XG4vLyBmcmVlemluZyB0aGUgdmFsdWVzIHByZXZlbnRzIGFueSBjb2RlIGZyb20gYWNjaWRlbnRhbGx5IGluc2VydGluZyBuZXcgdmFsdWVzIGluXG5pZiAoKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkgJiYgaW5pdE5nRGV2TW9kZSgpKSB7XG4gICAgLy8gVGhlc2UgcHJvcGVydHkgYWNjZXNzZXMgY2FuIGJlIGlnbm9yZWQgYmVjYXVzZSBuZ0Rldk1vZGUgd2lsbCBiZSBzZXQgdG8gZmFsc2VcbiAgICAvLyB3aGVuIG9wdGltaXppbmcgY29kZSBhbmQgdGhlIHdob2xlIGlmIHN0YXRlbWVudCB3aWxsIGJlIGRyb3BwZWQuXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXRvcGxldmVsLXByb3BlcnR5LWFjY2Vzc1xuICAgIE9iamVjdC5mcmVlemUoRU1QVFlfT0JKKTtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdG9wbGV2ZWwtcHJvcGVydHktYWNjZXNzXG4gICAgT2JqZWN0LmZyZWV6ZShFTVBUWV9BUlJBWSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgTkdfQ09NUF9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHsgybVjbXA6IGdldENsb3N1cmVTYWZlUHJvcGVydHkgfSk7XG5jb25zdCBOR19ESVJfREVGID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7IMm1ZGlyOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5IH0pO1xuY29uc3QgTkdfUElQRV9ERUYgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHsgybVwaXBlOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5IH0pO1xuY29uc3QgTkdfTU9EX0RFRiA9IGdldENsb3N1cmVTYWZlUHJvcGVydHkoeyDJtW1vZDogZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSB9KTtcbmNvbnN0IE5HX0ZBQ1RPUllfREVGID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7IMm1ZmFjOiBnZXRDbG9zdXJlU2FmZVByb3BlcnR5IH0pO1xuLyoqXG4gKiBJZiBhIGRpcmVjdGl2ZSBpcyBkaVB1YmxpYywgYmxvb21BZGQgc2V0cyBhIHByb3BlcnR5IG9uIHRoZSB0eXBlIHdpdGggdGhpcyBjb25zdGFudCBhc1xuICogdGhlIGtleSBhbmQgdGhlIGRpcmVjdGl2ZSdzIHVuaXF1ZSBJRCBhcyB0aGUgdmFsdWUuIFRoaXMgYWxsb3dzIHVzIHRvIG1hcCBkaXJlY3RpdmVzIHRvIHRoZWlyXG4gKiBibG9vbSBmaWx0ZXIgYml0IGZvciBESS5cbiAqL1xuLy8gVE9ETyhtaXNrbyk6IFRoaXMgaXMgd3JvbmcuIFRoZSBOR19FTEVNRU5UX0lEIHNob3VsZCBuZXZlciBiZSBtaW5pZmllZC5cbmNvbnN0IE5HX0VMRU1FTlRfSUQgPSBnZXRDbG9zdXJlU2FmZVByb3BlcnR5KHsgX19OR19FTEVNRU5UX0lEX186IGdldENsb3N1cmVTYWZlUHJvcGVydHkgfSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xubGV0IF9yZW5kZXJDb21wQ291bnQgPSAwO1xuLyoqXG4gKiBDcmVhdGUgYSBjb21wb25lbnQgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICpcbiAqICMgRXhhbXBsZVxuICogYGBgXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XG4gKiAgIC8vIEdlbmVyYXRlZCBieSBBbmd1bGFyIFRlbXBsYXRlIENvbXBpbGVyXG4gKiAgIC8vIFtTeW1ib2xdIHN5bnRheCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgYnkgVHlwZVNjcmlwdCB1bnRpbCB2Mi43XG4gKiAgIHN0YXRpYyDJtWNtcCA9IGRlZmluZUNvbXBvbmVudCh7XG4gKiAgICAgLi4uXG4gKiAgIH0pO1xuICogfVxuICogYGBgXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1ZGVmaW5lQ29tcG9uZW50KGNvbXBvbmVudERlZmluaXRpb24pIHtcbiAgICByZXR1cm4gbm9TaWRlRWZmZWN0cygoKSA9PiB7XG4gICAgICAgIC8vIEluaXRpYWxpemUgbmdEZXZNb2RlLiBUaGlzIG11c3QgYmUgdGhlIGZpcnN0IHN0YXRlbWVudCBpbiDJtcm1ZGVmaW5lQ29tcG9uZW50LlxuICAgICAgICAvLyBTZWUgdGhlIGBpbml0TmdEZXZNb2RlYCBkb2NzdHJpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpICYmIGluaXROZ0Rldk1vZGUoKTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGNvbXBvbmVudERlZmluaXRpb24udHlwZTtcbiAgICAgICAgY29uc3QgZGVjbGFyZWRJbnB1dHMgPSB7fTtcbiAgICAgICAgY29uc3QgZGVmID0ge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIHByb3ZpZGVyc1Jlc29sdmVyOiBudWxsLFxuICAgICAgICAgICAgZGVjbHM6IGNvbXBvbmVudERlZmluaXRpb24uZGVjbHMsXG4gICAgICAgICAgICB2YXJzOiBjb21wb25lbnREZWZpbml0aW9uLnZhcnMsXG4gICAgICAgICAgICBmYWN0b3J5OiBudWxsLFxuICAgICAgICAgICAgdGVtcGxhdGU6IGNvbXBvbmVudERlZmluaXRpb24udGVtcGxhdGUgfHwgbnVsbCxcbiAgICAgICAgICAgIGNvbnN0czogY29tcG9uZW50RGVmaW5pdGlvbi5jb25zdHMgfHwgbnVsbCxcbiAgICAgICAgICAgIG5nQ29udGVudFNlbGVjdG9yczogY29tcG9uZW50RGVmaW5pdGlvbi5uZ0NvbnRlbnRTZWxlY3RvcnMsXG4gICAgICAgICAgICBob3N0QmluZGluZ3M6IGNvbXBvbmVudERlZmluaXRpb24uaG9zdEJpbmRpbmdzIHx8IG51bGwsXG4gICAgICAgICAgICBob3N0VmFyczogY29tcG9uZW50RGVmaW5pdGlvbi5ob3N0VmFycyB8fCAwLFxuICAgICAgICAgICAgaG9zdEF0dHJzOiBjb21wb25lbnREZWZpbml0aW9uLmhvc3RBdHRycyB8fCBudWxsLFxuICAgICAgICAgICAgY29udGVudFF1ZXJpZXM6IGNvbXBvbmVudERlZmluaXRpb24uY29udGVudFF1ZXJpZXMgfHwgbnVsbCxcbiAgICAgICAgICAgIGRlY2xhcmVkSW5wdXRzOiBkZWNsYXJlZElucHV0cyxcbiAgICAgICAgICAgIGlucHV0czogbnVsbCxcbiAgICAgICAgICAgIG91dHB1dHM6IG51bGwsXG4gICAgICAgICAgICBleHBvcnRBczogY29tcG9uZW50RGVmaW5pdGlvbi5leHBvcnRBcyB8fCBudWxsLFxuICAgICAgICAgICAgb25QdXNoOiBjb21wb25lbnREZWZpbml0aW9uLmNoYW5nZURldGVjdGlvbiA9PT0gQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgICAgICAgICAgZGlyZWN0aXZlRGVmczogbnVsbCxcbiAgICAgICAgICAgIHBpcGVEZWZzOiBudWxsLFxuICAgICAgICAgICAgc2VsZWN0b3JzOiBjb21wb25lbnREZWZpbml0aW9uLnNlbGVjdG9ycyB8fCBFTVBUWV9BUlJBWSxcbiAgICAgICAgICAgIHZpZXdRdWVyeTogY29tcG9uZW50RGVmaW5pdGlvbi52aWV3UXVlcnkgfHwgbnVsbCxcbiAgICAgICAgICAgIGZlYXR1cmVzOiBjb21wb25lbnREZWZpbml0aW9uLmZlYXR1cmVzIHx8IG51bGwsXG4gICAgICAgICAgICBkYXRhOiBjb21wb25lbnREZWZpbml0aW9uLmRhdGEgfHwge30sXG4gICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiBjb21wb25lbnREZWZpbml0aW9uLmVuY2Fwc3VsYXRpb24gfHwgVmlld0VuY2Fwc3VsYXRpb24kMS5FbXVsYXRlZCxcbiAgICAgICAgICAgIGlkOiAnYycsXG4gICAgICAgICAgICBzdHlsZXM6IGNvbXBvbmVudERlZmluaXRpb24uc3R5bGVzIHx8IEVNUFRZX0FSUkFZLFxuICAgICAgICAgICAgXzogbnVsbCxcbiAgICAgICAgICAgIHNldElucHV0OiBudWxsLFxuICAgICAgICAgICAgc2NoZW1hczogY29tcG9uZW50RGVmaW5pdGlvbi5zY2hlbWFzIHx8IG51bGwsXG4gICAgICAgICAgICB0VmlldzogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlVHlwZXMgPSBjb21wb25lbnREZWZpbml0aW9uLmRpcmVjdGl2ZXM7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSBjb21wb25lbnREZWZpbml0aW9uLmZlYXR1cmVzO1xuICAgICAgICBjb25zdCBwaXBlVHlwZXMgPSBjb21wb25lbnREZWZpbml0aW9uLnBpcGVzO1xuICAgICAgICBkZWYuaWQgKz0gX3JlbmRlckNvbXBDb3VudCsrO1xuICAgICAgICBkZWYuaW5wdXRzID0gaW52ZXJ0T2JqZWN0KGNvbXBvbmVudERlZmluaXRpb24uaW5wdXRzLCBkZWNsYXJlZElucHV0cyksXG4gICAgICAgICAgICBkZWYub3V0cHV0cyA9IGludmVydE9iamVjdChjb21wb25lbnREZWZpbml0aW9uLm91dHB1dHMpLFxuICAgICAgICAgICAgZmVhdHVyZSAmJiBmZWF0dXJlLmZvckVhY2goKGZuKSA9PiBmbihkZWYpKTtcbiAgICAgICAgZGVmLmRpcmVjdGl2ZURlZnMgPSBkaXJlY3RpdmVUeXBlcyA/XG4gICAgICAgICAgICAoKSA9PiAodHlwZW9mIGRpcmVjdGl2ZVR5cGVzID09PSAnZnVuY3Rpb24nID8gZGlyZWN0aXZlVHlwZXMoKSA6IGRpcmVjdGl2ZVR5cGVzKVxuICAgICAgICAgICAgICAgIC5tYXAoZXh0cmFjdERpcmVjdGl2ZURlZikgOlxuICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgZGVmLnBpcGVEZWZzID0gcGlwZVR5cGVzID9cbiAgICAgICAgICAgICgpID0+ICh0eXBlb2YgcGlwZVR5cGVzID09PSAnZnVuY3Rpb24nID8gcGlwZVR5cGVzKCkgOiBwaXBlVHlwZXMpLm1hcChleHRyYWN0UGlwZURlZikgOlxuICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgcmV0dXJuIGRlZjtcbiAgICB9KTtcbn1cbi8qKlxuICogR2VuZXJhdGVkIG5leHQgdG8gTmdNb2R1bGVzIHRvIG1vbmtleS1wYXRjaCBkaXJlY3RpdmUgYW5kIHBpcGUgcmVmZXJlbmNlcyBvbnRvIGEgY29tcG9uZW50J3NcbiAqIGRlZmluaXRpb24sIHdoZW4gZ2VuZXJhdGluZyBhIGRpcmVjdCByZWZlcmVuY2UgaW4gdGhlIGNvbXBvbmVudCBmaWxlIHdvdWxkIG90aGVyd2lzZSBjcmVhdGUgYW5cbiAqIGltcG9ydCBjeWNsZS5cbiAqXG4gKiBTZWUgW3RoaXMgZXhwbGFuYXRpb25dKGh0dHBzOi8vaGFja21kLmlvL09kdzgwRDBwUjZ5ZnNPamdfN1hDSmc/dmlldykgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c2V0Q29tcG9uZW50U2NvcGUodHlwZSwgZGlyZWN0aXZlcywgcGlwZXMpIHtcbiAgICBjb25zdCBkZWYgPSB0eXBlLsm1Y21wO1xuICAgIGRlZi5kaXJlY3RpdmVEZWZzID0gKCkgPT4gZGlyZWN0aXZlcy5tYXAoZXh0cmFjdERpcmVjdGl2ZURlZik7XG4gICAgZGVmLnBpcGVEZWZzID0gKCkgPT4gcGlwZXMubWFwKGV4dHJhY3RQaXBlRGVmKTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3REaXJlY3RpdmVEZWYodHlwZSkge1xuICAgIGNvbnN0IGRlZiA9IGdldENvbXBvbmVudERlZih0eXBlKSB8fCBnZXREaXJlY3RpdmVEZWYodHlwZSk7XG4gICAgaWYgKG5nRGV2TW9kZSAmJiAhZGVmKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7dHlwZS5uYW1lfScgaXMgbmVpdGhlciAnQ29tcG9uZW50VHlwZScgb3IgJ0RpcmVjdGl2ZVR5cGUnLmApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmO1xufVxuZnVuY3Rpb24gZXh0cmFjdFBpcGVEZWYodHlwZSkge1xuICAgIGNvbnN0IGRlZiA9IGdldFBpcGVEZWYkMSh0eXBlKTtcbiAgICBpZiAobmdEZXZNb2RlICYmICFkZWYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHt0eXBlLm5hbWV9JyBpcyBub3QgYSAnUGlwZVR5cGUnLmApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmO1xufVxuY29uc3QgYXV0b1JlZ2lzdGVyTW9kdWxlQnlJZCA9IHt9O1xuLyoqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1ZGVmaW5lTmdNb2R1bGUoZGVmKSB7XG4gICAgcmV0dXJuIG5vU2lkZUVmZmVjdHMoKCkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSB7XG4gICAgICAgICAgICB0eXBlOiBkZWYudHlwZSxcbiAgICAgICAgICAgIGJvb3RzdHJhcDogZGVmLmJvb3RzdHJhcCB8fCBFTVBUWV9BUlJBWSxcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogZGVmLmRlY2xhcmF0aW9ucyB8fCBFTVBUWV9BUlJBWSxcbiAgICAgICAgICAgIGltcG9ydHM6IGRlZi5pbXBvcnRzIHx8IEVNUFRZX0FSUkFZLFxuICAgICAgICAgICAgZXhwb3J0czogZGVmLmV4cG9ydHMgfHwgRU1QVFlfQVJSQVksXG4gICAgICAgICAgICB0cmFuc2l0aXZlQ29tcGlsZVNjb3BlczogbnVsbCxcbiAgICAgICAgICAgIHNjaGVtYXM6IGRlZi5zY2hlbWFzIHx8IG51bGwsXG4gICAgICAgICAgICBpZDogZGVmLmlkIHx8IG51bGwsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChkZWYuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgYXV0b1JlZ2lzdGVyTW9kdWxlQnlJZFtkZWYuaWRdID0gZGVmLnR5cGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9KTtcbn1cbi8qKlxuICogQWRkcyB0aGUgbW9kdWxlIG1ldGFkYXRhIHRoYXQgaXMgbmVjZXNzYXJ5IHRvIGNvbXB1dGUgdGhlIG1vZHVsZSdzIHRyYW5zaXRpdmUgc2NvcGUgdG8gYW5cbiAqIGV4aXN0aW5nIG1vZHVsZSBkZWZpbml0aW9uLlxuICpcbiAqIFNjb3BlIG1ldGFkYXRhIG9mIG1vZHVsZXMgaXMgbm90IHVzZWQgaW4gcHJvZHVjdGlvbiBidWlsZHMsIHNvIGNhbGxzIHRvIHRoaXMgZnVuY3Rpb24gY2FuIGJlXG4gKiBtYXJrZWQgcHVyZSB0byB0cmVlLXNoYWtlIGl0IGZyb20gdGhlIGJ1bmRsZSwgYWxsb3dpbmcgZm9yIGFsbCByZWZlcmVuY2VkIGRlY2xhcmF0aW9uc1xuICogdG8gYmVjb21lIGVsaWdpYmxlIGZvciB0cmVlLXNoYWtpbmcgYXMgd2VsbC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c2V0TmdNb2R1bGVTY29wZSh0eXBlLCBzY29wZSkge1xuICAgIHJldHVybiBub1NpZGVFZmZlY3RzKCgpID0+IHtcbiAgICAgICAgY29uc3QgbmdNb2R1bGVEZWYgPSBnZXROZ01vZHVsZURlZih0eXBlLCB0cnVlKTtcbiAgICAgICAgbmdNb2R1bGVEZWYuZGVjbGFyYXRpb25zID0gc2NvcGUuZGVjbGFyYXRpb25zIHx8IEVNUFRZX0FSUkFZO1xuICAgICAgICBuZ01vZHVsZURlZi5pbXBvcnRzID0gc2NvcGUuaW1wb3J0cyB8fCBFTVBUWV9BUlJBWTtcbiAgICAgICAgbmdNb2R1bGVEZWYuZXhwb3J0cyA9IHNjb3BlLmV4cG9ydHMgfHwgRU1QVFlfQVJSQVk7XG4gICAgfSk7XG59XG4vKipcbiAqIEludmVydHMgYW4gaW5wdXRzIG9yIG91dHB1dHMgbG9va3VwIHN1Y2ggdGhhdCB0aGUga2V5cywgd2hpY2ggd2VyZSB0aGVcbiAqIG1pbmlmaWVkIGtleXMsIGFyZSBwYXJ0IG9mIHRoZSB2YWx1ZXMsIGFuZCB0aGUgdmFsdWVzIGFyZSBwYXJzZWQgc28gdGhhdFxuICogdGhlIHB1YmxpY05hbWUgb2YgdGhlIHByb3BlcnR5IGlzIHRoZSBuZXcga2V5XG4gKlxuICogZS5nLiBmb3JcbiAqXG4gKiBgYGBcbiAqIGNsYXNzIENvbXAge1xuICogICBASW5wdXQoKVxuICogICBwcm9wTmFtZTE6IHN0cmluZztcbiAqXG4gKiAgIEBJbnB1dCgncHVibGljTmFtZTInKVxuICogICBkZWNsYXJlZFByb3BOYW1lMjogbnVtYmVyO1xuICogfVxuICogYGBgXG4gKlxuICogd2lsbCBiZSBzZXJpYWxpemVkIGFzXG4gKlxuICogYGBgXG4gKiB7XG4gKiAgIHByb3BOYW1lMTogJ3Byb3BOYW1lMScsXG4gKiAgIGRlY2xhcmVkUHJvcE5hbWUyOiBbJ3B1YmxpY05hbWUyJywgJ2RlY2xhcmVkUHJvcE5hbWUyJ10sXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiB3aGljaCBpcyB0aGFuIHRyYW5zbGF0ZWQgYnkgdGhlIG1pbmlmaWVyIGFzOlxuICpcbiAqIGBgYFxuICoge1xuICogICBtaW5pZmllZFByb3BOYW1lMTogJ3Byb3BOYW1lMScsXG4gKiAgIG1pbmlmaWVkUHJvcE5hbWUyOiBbJ3B1YmxpY05hbWUyJywgJ2RlY2xhcmVkUHJvcE5hbWUyJ10sXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBiZWNvbWVzOiAocHVibGljIG5hbWUgPT4gbWluaWZpZWROYW1lKVxuICpcbiAqIGBgYFxuICoge1xuICogICdwcm9wTmFtZTEnOiAnbWluaWZpZWRQcm9wTmFtZTEnLFxuICogICdwdWJsaWNOYW1lMic6ICdtaW5pZmllZFByb3BOYW1lMicsXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBPcHRpb25hbGx5IHRoZSBmdW5jdGlvbiBjYW4gdGFrZSBgc2Vjb25kYXJ5YCB3aGljaCB3aWxsIHJlc3VsdCBpbjogKHB1YmxpYyBuYW1lID0+IGRlY2xhcmVkIG5hbWUpXG4gKlxuICogYGBgXG4gKiB7XG4gKiAgJ3Byb3BOYW1lMSc6ICdwcm9wTmFtZTEnLFxuICogICdwdWJsaWNOYW1lMic6ICdkZWNsYXJlZFByb3BOYW1lMicsXG4gKiB9XG4gKiBgYGBcbiAqXG5cbiAqL1xuZnVuY3Rpb24gaW52ZXJ0T2JqZWN0KG9iaiwgc2Vjb25kYXJ5KSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKVxuICAgICAgICByZXR1cm4gRU1QVFlfT0JKO1xuICAgIGNvbnN0IG5ld0xvb2t1cCA9IHt9O1xuICAgIGZvciAoY29uc3QgbWluaWZpZWRLZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkobWluaWZpZWRLZXkpKSB7XG4gICAgICAgICAgICBsZXQgcHVibGljTmFtZSA9IG9ialttaW5pZmllZEtleV07XG4gICAgICAgICAgICBsZXQgZGVjbGFyZWROYW1lID0gcHVibGljTmFtZTtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHB1YmxpY05hbWUpKSB7XG4gICAgICAgICAgICAgICAgZGVjbGFyZWROYW1lID0gcHVibGljTmFtZVsxXTtcbiAgICAgICAgICAgICAgICBwdWJsaWNOYW1lID0gcHVibGljTmFtZVswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld0xvb2t1cFtwdWJsaWNOYW1lXSA9IG1pbmlmaWVkS2V5O1xuICAgICAgICAgICAgaWYgKHNlY29uZGFyeSkge1xuICAgICAgICAgICAgICAgIChzZWNvbmRhcnlbcHVibGljTmFtZV0gPSBkZWNsYXJlZE5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdMb29rdXA7XG59XG4vKipcbiAqIENyZWF0ZSBhIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdC5cbiAqXG4gKiAjIEV4YW1wbGVcbiAqIGBgYHRzXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XG4gKiAgIC8vIEdlbmVyYXRlZCBieSBBbmd1bGFyIFRlbXBsYXRlIENvbXBpbGVyXG4gKiAgIC8vIFtTeW1ib2xdIHN5bnRheCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgYnkgVHlwZVNjcmlwdCB1bnRpbCB2Mi43XG4gKiAgIHN0YXRpYyDJtWRpciA9IMm1ybVkZWZpbmVEaXJlY3RpdmUoe1xuICogICAgIC4uLlxuICogICB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmNvbnN0IMm1ybVkZWZpbmVEaXJlY3RpdmUgPSDJtcm1ZGVmaW5lQ29tcG9uZW50O1xuLyoqXG4gKiBDcmVhdGUgYSBwaXBlIGRlZmluaXRpb24gb2JqZWN0LlxuICpcbiAqICMgRXhhbXBsZVxuICogYGBgXG4gKiBjbGFzcyBNeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAqICAgLy8gR2VuZXJhdGVkIGJ5IEFuZ3VsYXIgVGVtcGxhdGUgQ29tcGlsZXJcbiAqICAgc3RhdGljIMm1cGlwZSA9IGRlZmluZVBpcGUoe1xuICogICAgIC4uLlxuICogICB9KTtcbiAqIH1cbiAqIGBgYFxuICogQHBhcmFtIHBpcGVEZWYgUGlwZSBkZWZpbml0aW9uIGdlbmVyYXRlZCBieSB0aGUgY29tcGlsZXJcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1ZGVmaW5lUGlwZShwaXBlRGVmKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogcGlwZURlZi50eXBlLFxuICAgICAgICBuYW1lOiBwaXBlRGVmLm5hbWUsXG4gICAgICAgIGZhY3Rvcnk6IG51bGwsXG4gICAgICAgIHB1cmU6IHBpcGVEZWYucHVyZSAhPT0gZmFsc2UsXG4gICAgICAgIG9uRGVzdHJveTogcGlwZURlZi50eXBlLnByb3RvdHlwZS5uZ09uRGVzdHJveSB8fCBudWxsXG4gICAgfTtcbn1cbi8qKlxuICogVGhlIGZvbGxvd2luZyBnZXR0ZXIgbWV0aG9kcyByZXRyaWV2ZSB0aGUgZGVmaW5pdGlvbiBmcm9tIHRoZSB0eXBlLiBDdXJyZW50bHkgdGhlIHJldHJpZXZhbFxuICogaG9ub3JzIGluaGVyaXRhbmNlLCBidXQgaW4gdGhlIGZ1dHVyZSB3ZSBtYXkgY2hhbmdlIHRoZSBydWxlIHRvIHJlcXVpcmUgdGhhdCBkZWZpbml0aW9ucyBhcmVcbiAqIGV4cGxpY2l0LiBUaGlzIHdvdWxkIHJlcXVpcmUgc29tZSBzb3J0IG9mIG1pZ3JhdGlvbiBzdHJhdGVneS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50RGVmKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZVtOR19DT01QX0RFRl0gfHwgbnVsbDtcbn1cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZURlZih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGVbTkdfRElSX0RFRl0gfHwgbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFBpcGVEZWYkMSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGVbTkdfUElQRV9ERUZdIHx8IG51bGw7XG59XG5mdW5jdGlvbiBnZXROZ01vZHVsZURlZih0eXBlLCB0aHJvd05vdEZvdW5kKSB7XG4gICAgY29uc3QgbmdNb2R1bGVEZWYgPSB0eXBlW05HX01PRF9ERUZdIHx8IG51bGw7XG4gICAgaWYgKCFuZ01vZHVsZURlZiAmJiB0aHJvd05vdEZvdW5kID09PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVHlwZSAke3N0cmluZ2lmeSh0eXBlKX0gZG9lcyBub3QgaGF2ZSAnybVtb2QnIHByb3BlcnR5LmApO1xuICAgIH1cbiAgICByZXR1cm4gbmdNb2R1bGVEZWY7XG59XG5cbi8qKlxuICogU3BlY2lhbCBsb2NhdGlvbiB3aGljaCBhbGxvd3MgZWFzeSBpZGVudGlmaWNhdGlvbiBvZiB0eXBlLiBJZiB3ZSBoYXZlIGFuIGFycmF5IHdoaWNoIHdhc1xuICogcmV0cmlldmVkIGZyb20gdGhlIGBMVmlld2AgYW5kIHRoYXQgYXJyYXkgaGFzIGB0cnVlYCBhdCBgVFlQRWAgbG9jYXRpb24sIHdlIGtub3cgaXQgaXNcbiAqIGBMQ29udGFpbmVyYC5cbiAqL1xuY29uc3QgVFlQRSA9IDE7XG4vKipcbiAqIEJlbG93IGFyZSBjb25zdGFudHMgZm9yIExDb250YWluZXIgaW5kaWNlcyB0byBoZWxwIHVzIGxvb2sgdXAgTENvbnRhaW5lciBtZW1iZXJzXG4gKiB3aXRob3V0IGhhdmluZyB0byByZW1lbWJlciB0aGUgc3BlY2lmaWMgaW5kaWNlcy5cbiAqIFVnbGlmeSB3aWxsIGlubGluZSB0aGVzZSB3aGVuIG1pbmlmeWluZyBzbyB0aGVyZSBzaG91bGRuJ3QgYmUgYSBjb3N0LlxuICovXG4vKipcbiAqIEZsYWcgdG8gc2lnbmlmeSB0aGF0IHRoaXMgYExDb250YWluZXJgIG1heSBoYXZlIHRyYW5zcGxhbnRlZCB2aWV3cyB3aGljaCBuZWVkIHRvIGJlIGNoYW5nZVxuICogZGV0ZWN0ZWQuIChzZWU6IGBMVmlld1tERUNMQVJBVElPTl9DT01QT05FTlRfVklFV10pYC5cbiAqXG4gKiBUaGlzIGZsYWcsIG9uY2Ugc2V0LCBpcyBuZXZlciB1bnNldCBmb3IgdGhlIGBMQ29udGFpbmVyYC4gVGhpcyBtZWFucyB0aGF0IHdoZW4gdW5zZXQgd2UgY2FuIHNraXBcbiAqIGEgbG90IG9mIHdvcmsgaW4gYHJlZnJlc2hFbWJlZGRlZFZpZXdzYC4gQnV0IHdoZW4gc2V0IHdlIHN0aWxsIG5lZWQgdG8gdmVyaWZ5XG4gKiB0aGF0IHRoZSBgTU9WRURfVklFV1NgIGFyZSB0cmFuc3BsYW50ZWQgYW5kIG9uLXB1c2guXG4gKi9cbmNvbnN0IEhBU19UUkFOU1BMQU5URURfVklFV1MgPSAyO1xuLy8gUEFSRU5ULCBORVhULCBUUkFOU1BMQU5URURfVklFV1NfVE9fUkVGUkVTSCBhcmUgaW5kaWNlcyAzLCA0LCBhbmQgNVxuLy8gQXMgd2UgYWxyZWFkeSBoYXZlIHRoZXNlIGNvbnN0YW50cyBpbiBMVmlldywgd2UgZG9uJ3QgbmVlZCB0byByZS1jcmVhdGUgdGhlbS5cbi8vIFRfSE9TVCBpcyBpbmRleCA2XG4vLyBXZSBhbHJlYWR5IGhhdmUgdGhpcyBjb25zdGFudHMgaW4gTFZpZXcsIHdlIGRvbid0IG5lZWQgdG8gcmUtY3JlYXRlIGl0LlxuY29uc3QgTkFUSVZFID0gNztcbmNvbnN0IFZJRVdfUkVGUyA9IDg7XG5jb25zdCBNT1ZFRF9WSUVXUyA9IDk7XG4vKipcbiAqIFNpemUgb2YgTENvbnRhaW5lcidzIGhlYWRlci4gUmVwcmVzZW50cyB0aGUgaW5kZXggYWZ0ZXIgd2hpY2ggYWxsIHZpZXdzIGluIHRoZVxuICogY29udGFpbmVyIHdpbGwgYmUgaW5zZXJ0ZWQuIFdlIG5lZWQgdG8ga2VlcCBhIHJlY29yZCBvZiBjdXJyZW50IHZpZXdzIHNvIHdlIGtub3dcbiAqIHdoaWNoIHZpZXdzIGFyZSBhbHJlYWR5IGluIHRoZSBET00gKGFuZCBkb24ndCBuZWVkIHRvIGJlIHJlLWFkZGVkKSBhbmQgc28gd2UgY2FuXG4gKiByZW1vdmUgdmlld3MgZnJvbSB0aGUgRE9NIHdoZW4gdGhleSBhcmUgbm8gbG9uZ2VyIHJlcXVpcmVkLlxuICovXG5jb25zdCBDT05UQUlORVJfSEVBREVSX09GRlNFVCA9IDEwO1xuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuY29uc3QgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQkOCA9IDE7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gQmVsb3cgYXJlIGNvbnN0YW50cyBmb3IgTFZpZXcgaW5kaWNlcyB0byBoZWxwIHVzIGxvb2sgdXAgTFZpZXcgbWVtYmVyc1xuLy8gd2l0aG91dCBoYXZpbmcgdG8gcmVtZW1iZXIgdGhlIHNwZWNpZmljIGluZGljZXMuXG4vLyBVZ2xpZnkgd2lsbCBpbmxpbmUgdGhlc2Ugd2hlbiBtaW5pZnlpbmcgc28gdGhlcmUgc2hvdWxkbid0IGJlIGEgY29zdC5cbmNvbnN0IEhPU1QgPSAwO1xuY29uc3QgVFZJRVcgPSAxO1xuY29uc3QgRkxBR1MgPSAyO1xuY29uc3QgUEFSRU5UID0gMztcbmNvbnN0IE5FWFQgPSA0O1xuY29uc3QgVFJBTlNQTEFOVEVEX1ZJRVdTX1RPX1JFRlJFU0ggPSA1O1xuY29uc3QgVF9IT1NUID0gNjtcbmNvbnN0IENMRUFOVVAgPSA3O1xuY29uc3QgQ09OVEVYVCA9IDg7XG5jb25zdCBJTkpFQ1RPUiQxID0gOTtcbmNvbnN0IFJFTkRFUkVSX0ZBQ1RPUlkgPSAxMDtcbmNvbnN0IFJFTkRFUkVSID0gMTE7XG5jb25zdCBTQU5JVElaRVIgPSAxMjtcbmNvbnN0IENISUxEX0hFQUQgPSAxMztcbmNvbnN0IENISUxEX1RBSUwgPSAxNDtcbi8vIEZJWE1FKG1pc2tvKTogSW52ZXN0aWdhdGUgaWYgdGhlIHRocmVlIGRlY2xhcmF0aW9ucyBhcmVuJ3QgYWxsIHNhbWUgdGhpbmcuXG5jb25zdCBERUNMQVJBVElPTl9WSUVXID0gMTU7XG5jb25zdCBERUNMQVJBVElPTl9DT01QT05FTlRfVklFVyA9IDE2O1xuY29uc3QgREVDTEFSQVRJT05fTENPTlRBSU5FUiA9IDE3O1xuY29uc3QgUFJFT1JERVJfSE9PS19GTEFHUyA9IDE4O1xuY29uc3QgUVVFUklFUyA9IDE5O1xuLyoqXG4gKiBTaXplIG9mIExWaWV3J3MgaGVhZGVyLiBOZWNlc3NhcnkgdG8gYWRqdXN0IGZvciBpdCB3aGVuIHNldHRpbmcgc2xvdHMuXG4gKlxuICogSU1QT1JUQU5UOiBgSEVBREVSX09GRlNFVGAgc2hvdWxkIG9ubHkgYmUgcmVmZXJyZWQgdG8gdGhlIGluIHRoZSBgybXJtSpgIGluc3RydWN0aW9ucyB0byB0cmFuc2xhdGVcbiAqIGluc3RydWN0aW9uIGluZGV4IGludG8gYExWaWV3YCBpbmRleC4gQWxsIG90aGVyIGluZGV4ZXMgc2hvdWxkIGJlIGluIHRoZSBgTFZpZXdgIGluZGV4IHNwYWNlIGFuZFxuICogdGhlcmUgc2hvdWxkIGJlIG5vIG5lZWQgdG8gcmVmZXIgdG8gYEhFQURFUl9PRkZTRVRgIGFueXdoZXJlIGVsc2UuXG4gKi9cbmNvbnN0IEhFQURFUl9PRkZTRVQgPSAyMDtcbi8qKlxuICogQ29udmVydHMgYFRWaWV3VHlwZWAgaW50byBodW1hbiByZWFkYWJsZSB0ZXh0LlxuICogTWFrZSBzdXJlIHRoaXMgbWF0Y2hlcyB3aXRoIGBUVmlld1R5cGVgXG4gKi9cbmNvbnN0IFRWaWV3VHlwZUFzU3RyaW5nID0gW1xuICAgICdSb290JyxcbiAgICAnQ29tcG9uZW50JyxcbiAgICAnRW1iZWRkZWQnLCAvLyAyXG5dO1xuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuY29uc3QgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQkNyA9IDE7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUcnVlIGlmIGB2YWx1ZWAgaXMgYExWaWV3YC5cbiAqIEBwYXJhbSB2YWx1ZSB3cmFwcGVkIHZhbHVlIG9mIGBSTm9kZWAsIGBMVmlld2AsIGBMQ29udGFpbmVyYFxuICovXG5mdW5jdGlvbiBpc0xWaWV3KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZVtUWVBFXSA9PT0gJ29iamVjdCc7XG59XG4vKipcbiAqIFRydWUgaWYgYHZhbHVlYCBpcyBgTENvbnRhaW5lcmAuXG4gKiBAcGFyYW0gdmFsdWUgd3JhcHBlZCB2YWx1ZSBvZiBgUk5vZGVgLCBgTFZpZXdgLCBgTENvbnRhaW5lcmBcbiAqL1xuZnVuY3Rpb24gaXNMQ29udGFpbmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlW1RZUEVdID09PSB0cnVlO1xufVxuZnVuY3Rpb24gaXNDb250ZW50UXVlcnlIb3N0KHROb2RlKSB7XG4gICAgcmV0dXJuICh0Tm9kZS5mbGFncyAmIDggLyogaGFzQ29udGVudFF1ZXJ5ICovKSAhPT0gMDtcbn1cbmZ1bmN0aW9uIGlzQ29tcG9uZW50SG9zdCh0Tm9kZSkge1xuICAgIHJldHVybiAodE5vZGUuZmxhZ3MgJiAyIC8qIGlzQ29tcG9uZW50SG9zdCAqLykgPT09IDIgLyogaXNDb21wb25lbnRIb3N0ICovO1xufVxuZnVuY3Rpb24gaXNEaXJlY3RpdmVIb3N0KHROb2RlKSB7XG4gICAgcmV0dXJuICh0Tm9kZS5mbGFncyAmIDEgLyogaXNEaXJlY3RpdmVIb3N0ICovKSA9PT0gMSAvKiBpc0RpcmVjdGl2ZUhvc3QgKi87XG59XG5mdW5jdGlvbiBpc0NvbXBvbmVudERlZihkZWYpIHtcbiAgICByZXR1cm4gZGVmLnRlbXBsYXRlICE9PSBudWxsO1xufVxuZnVuY3Rpb24gaXNSb290Vmlldyh0YXJnZXQpIHtcbiAgICByZXR1cm4gKHRhcmdldFtGTEFHU10gJiA1MTIgLyogSXNSb290ICovKSAhPT0gMDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBbQXNzZXJ0IGZ1bmN0aW9ucyBkbyBub3QgY29uc3RyYWludCB0eXBlIHdoZW4gdGhleSBhcmUgZ3VhcmRlZCBieSBhIHRydXRoeVxuLy8gZXhwcmVzc2lvbi5dKGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzcyOTUpXG5mdW5jdGlvbiBhc3NlcnRUTm9kZUZvckxWaWV3KHROb2RlLCBsVmlldykge1xuICAgIGFzc2VydFROb2RlRm9yVFZpZXcodE5vZGUsIGxWaWV3W1RWSUVXXSk7XG59XG5mdW5jdGlvbiBhc3NlcnRUTm9kZUZvclRWaWV3KHROb2RlLCB0Vmlldykge1xuICAgIGFzc2VydFROb2RlKHROb2RlKTtcbiAgICB0Tm9kZS5oYXNPd25Qcm9wZXJ0eSgndFZpZXdfJykgJiZcbiAgICAgICAgYXNzZXJ0RXF1YWwodE5vZGUudFZpZXdfLCB0VmlldywgJ1RoaXMgVE5vZGUgZG9lcyBub3QgYmVsb25nIHRvIHRoaXMgVFZpZXcuJyk7XG59XG5mdW5jdGlvbiBhc3NlcnRUTm9kZSh0Tm9kZSkge1xuICAgIGFzc2VydERlZmluZWQodE5vZGUsICdUTm9kZSBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICBpZiAoISh0Tm9kZSAmJiB0eXBlb2YgdE5vZGUgPT09ICdvYmplY3QnICYmIHROb2RlLmhhc093blByb3BlcnR5KCdkaXJlY3RpdmVTdHlsaW5nTGFzdCcpKSkge1xuICAgICAgICB0aHJvd0Vycm9yKCdOb3Qgb2YgdHlwZSBUTm9kZSwgZ290OiAnICsgdE5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFRJY3UodEljdSkge1xuICAgIGFzc2VydERlZmluZWQodEljdSwgJ0V4cGVjdGVkIFRJY3UgdG8gYmUgZGVmaW5lZCcpO1xuICAgIGlmICghKHR5cGVvZiB0SWN1LmN1cnJlbnRDYXNlTFZpZXdJbmRleCA9PT0gJ251bWJlcicpKSB7XG4gICAgICAgIHRocm93RXJyb3IoJ09iamVjdCBpcyBub3Qgb2YgVEljdSB0eXBlLicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydENvbXBvbmVudFR5cGUoYWN0dWFsLCBtc2cgPSAnVHlwZSBwYXNzZWQgaW4gaXMgbm90IENvbXBvbmVudFR5cGUsIGl0IGRvZXMgbm90IGhhdmUgXFwnybVjbXBcXCcgcHJvcGVydHkuJykge1xuICAgIGlmICghZ2V0Q29tcG9uZW50RGVmKGFjdHVhbCkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydE5nTW9kdWxlVHlwZShhY3R1YWwsIG1zZyA9ICdUeXBlIHBhc3NlZCBpbiBpcyBub3QgTmdNb2R1bGVUeXBlLCBpdCBkb2VzIG5vdCBoYXZlIFxcJ8m1bW9kXFwnIHByb3BlcnR5LicpIHtcbiAgICBpZiAoIWdldE5nTW9kdWxlRGVmKGFjdHVhbCkpIHtcbiAgICAgICAgdGhyb3dFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydEN1cnJlbnRUTm9kZUlzUGFyZW50KGlzUGFyZW50KSB7XG4gICAgYXNzZXJ0RXF1YWwoaXNQYXJlbnQsIHRydWUsICdjdXJyZW50VE5vZGUgc2hvdWxkIGJlIGEgcGFyZW50Jyk7XG59XG5mdW5jdGlvbiBhc3NlcnRIYXNQYXJlbnQodE5vZGUpIHtcbiAgICBhc3NlcnREZWZpbmVkKHROb2RlLCAnY3VycmVudFROb2RlIHNob3VsZCBleGlzdCEnKTtcbiAgICBhc3NlcnREZWZpbmVkKHROb2RlLnBhcmVudCwgJ2N1cnJlbnRUTm9kZSBzaG91bGQgaGF2ZSBhIHBhcmVudCcpO1xufVxuZnVuY3Rpb24gYXNzZXJ0RGF0YU5leHQobFZpZXcsIGluZGV4LCBhcnIpIHtcbiAgICBpZiAoYXJyID09IG51bGwpXG4gICAgICAgIGFyciA9IGxWaWV3O1xuICAgIGFzc2VydEVxdWFsKGFyci5sZW5ndGgsIGluZGV4LCBgaW5kZXggJHtpbmRleH0gZXhwZWN0ZWQgdG8gYmUgYXQgdGhlIGVuZCBvZiBhcnIgKGxlbmd0aCAke2Fyci5sZW5ndGh9KWApO1xufVxuZnVuY3Rpb24gYXNzZXJ0TENvbnRhaW5lcih2YWx1ZSkge1xuICAgIGFzc2VydERlZmluZWQodmFsdWUsICdMQ29udGFpbmVyIG11c3QgYmUgZGVmaW5lZCcpO1xuICAgIGFzc2VydEVxdWFsKGlzTENvbnRhaW5lcih2YWx1ZSksIHRydWUsICdFeHBlY3RpbmcgTENvbnRhaW5lcicpO1xufVxuZnVuY3Rpb24gYXNzZXJ0TFZpZXdPclVuZGVmaW5lZCh2YWx1ZSkge1xuICAgIHZhbHVlICYmIGFzc2VydEVxdWFsKGlzTFZpZXcodmFsdWUpLCB0cnVlLCAnRXhwZWN0aW5nIExWaWV3IG9yIHVuZGVmaW5lZCBvciBudWxsJyk7XG59XG5mdW5jdGlvbiBhc3NlcnRMVmlldyh2YWx1ZSkge1xuICAgIGFzc2VydERlZmluZWQodmFsdWUsICdMVmlldyBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICBhc3NlcnRFcXVhbChpc0xWaWV3KHZhbHVlKSwgdHJ1ZSwgJ0V4cGVjdGluZyBMVmlldycpO1xufVxuZnVuY3Rpb24gYXNzZXJ0Rmlyc3RDcmVhdGVQYXNzKHRWaWV3LCBlcnJNZXNzYWdlKSB7XG4gICAgYXNzZXJ0RXF1YWwodFZpZXcuZmlyc3RDcmVhdGVQYXNzLCB0cnVlLCBlcnJNZXNzYWdlIHx8ICdTaG91bGQgb25seSBiZSBjYWxsZWQgaW4gZmlyc3QgY3JlYXRlIHBhc3MuJyk7XG59XG5mdW5jdGlvbiBhc3NlcnRGaXJzdFVwZGF0ZVBhc3ModFZpZXcsIGVyck1lc3NhZ2UpIHtcbiAgICBhc3NlcnRFcXVhbCh0Vmlldy5maXJzdFVwZGF0ZVBhc3MsIHRydWUsIGVyck1lc3NhZ2UgfHwgJ1Nob3VsZCBvbmx5IGJlIGNhbGxlZCBpbiBmaXJzdCB1cGRhdGUgcGFzcy4nKTtcbn1cbi8qKlxuICogVGhpcyBpcyBhIGJhc2ljIHNhbml0eSBjaGVjayB0aGF0IGFuIG9iamVjdCBpcyBwcm9iYWJseSBhIGRpcmVjdGl2ZSBkZWYuIERpcmVjdGl2ZURlZiBpc1xuICogYW4gaW50ZXJmYWNlLCBzbyB3ZSBjYW4ndCBkbyBhIGRpcmVjdCBpbnN0YW5jZW9mIGNoZWNrLlxuICovXG5mdW5jdGlvbiBhc3NlcnREaXJlY3RpdmVEZWYob2JqKSB7XG4gICAgaWYgKG9iai50eXBlID09PSB1bmRlZmluZWQgfHwgb2JqLnNlbGVjdG9ycyA9PSB1bmRlZmluZWQgfHwgb2JqLmlucHV0cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93RXJyb3IoYEV4cGVjdGVkIGEgRGlyZWN0aXZlRGVmL0NvbXBvbmVudERlZiBhbmQgdGhpcyBvYmplY3QgZG9lcyBub3Qgc2VlbSB0byBoYXZlIHRoZSBleHBlY3RlZCBzaGFwZS5gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NlcnRJbmRleEluRGVjbFJhbmdlKGxWaWV3LCBpbmRleCkge1xuICAgIGNvbnN0IHRWaWV3ID0gbFZpZXdbMV07XG4gICAgYXNzZXJ0QmV0d2VlbihIRUFERVJfT0ZGU0VULCB0Vmlldy5iaW5kaW5nU3RhcnRJbmRleCwgaW5kZXgpO1xufVxuZnVuY3Rpb24gYXNzZXJ0SW5kZXhJblZhcnNSYW5nZShsVmlldywgaW5kZXgpIHtcbiAgICBjb25zdCB0VmlldyA9IGxWaWV3WzFdO1xuICAgIGFzc2VydEJldHdlZW4odFZpZXcuYmluZGluZ1N0YXJ0SW5kZXgsIHRWaWV3LmV4cGFuZG9TdGFydEluZGV4LCBpbmRleCk7XG59XG5mdW5jdGlvbiBhc3NlcnRJbmRleEluRXhwYW5kb1JhbmdlKGxWaWV3LCBpbmRleCkge1xuICAgIGNvbnN0IHRWaWV3ID0gbFZpZXdbMV07XG4gICAgYXNzZXJ0QmV0d2Vlbih0Vmlldy5leHBhbmRvU3RhcnRJbmRleCwgbFZpZXcubGVuZ3RoLCBpbmRleCk7XG59XG5mdW5jdGlvbiBhc3NlcnRCZXR3ZWVuKGxvd2VyLCB1cHBlciwgaW5kZXgpIHtcbiAgICBpZiAoIShsb3dlciA8PSBpbmRleCAmJiBpbmRleCA8IHVwcGVyKSkge1xuICAgICAgICB0aHJvd0Vycm9yKGBJbmRleCBvdXQgb2YgcmFuZ2UgKGV4cGVjdGluZyAke2xvd2VyfSA8PSAke2luZGV4fSA8ICR7dXBwZXJ9KWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydFByb2plY3Rpb25TbG90cyhsVmlldywgZXJyTWVzc2FnZSkge1xuICAgIGFzc2VydERlZmluZWQobFZpZXdbREVDTEFSQVRJT05fQ09NUE9ORU5UX1ZJRVddLCAnQ29tcG9uZW50IHZpZXdzIHNob3VsZCBleGlzdC4nKTtcbiAgICBhc3NlcnREZWZpbmVkKGxWaWV3W0RFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXXVtUX0hPU1RdLnByb2plY3Rpb24sIGVyck1lc3NhZ2UgfHxcbiAgICAgICAgJ0NvbXBvbmVudHMgd2l0aCBwcm9qZWN0aW9uIG5vZGVzICg8bmctY29udGVudD4pIG11c3QgaGF2ZSBwcm9qZWN0aW9uIHNsb3RzIGRlZmluZWQuJyk7XG59XG5mdW5jdGlvbiBhc3NlcnRQYXJlbnRWaWV3KGxWaWV3LCBlcnJNZXNzYWdlKSB7XG4gICAgYXNzZXJ0RGVmaW5lZChsVmlldywgZXJyTWVzc2FnZSB8fCAnQ29tcG9uZW50IHZpZXdzIHNob3VsZCBhbHdheXMgaGF2ZSBhIHBhcmVudCB2aWV3IChjb21wb25lbnRcXCdzIGhvc3QgdmlldyknKTtcbn1cbi8qKlxuICogVGhpcyBpcyBhIGJhc2ljIHNhbml0eSBjaGVjayB0aGF0IHRoZSBgaW5qZWN0b3JJbmRleGAgc2VlbXMgdG8gcG9pbnQgdG8gd2hhdCBsb29rcyBsaWtlIGFcbiAqIE5vZGVJbmplY3RvciBkYXRhIHN0cnVjdHVyZS5cbiAqXG4gKiBAcGFyYW0gbFZpZXcgYExWaWV3YCB3aGljaCBzaG91bGQgYmUgY2hlY2tlZC5cbiAqIEBwYXJhbSBpbmplY3RvckluZGV4IGluZGV4IGludG8gdGhlIGBMVmlld2Agd2hlcmUgdGhlIGBOb2RlSW5qZWN0b3JgIGlzIGV4cGVjdGVkLlxuICovXG5mdW5jdGlvbiBhc3NlcnROb2RlSW5qZWN0b3IobFZpZXcsIGluamVjdG9ySW5kZXgpIHtcbiAgICBhc3NlcnRJbmRleEluRXhwYW5kb1JhbmdlKGxWaWV3LCBpbmplY3RvckluZGV4KTtcbiAgICBhc3NlcnRJbmRleEluRXhwYW5kb1JhbmdlKGxWaWV3LCBpbmplY3RvckluZGV4ICsgOCAvKiBQQVJFTlQgKi8pO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgMF0sICdpbmplY3RvckluZGV4IHNob3VsZCBwb2ludCB0byBhIGJsb29tIGZpbHRlcicpO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgMV0sICdpbmplY3RvckluZGV4IHNob3VsZCBwb2ludCB0byBhIGJsb29tIGZpbHRlcicpO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgMl0sICdpbmplY3RvckluZGV4IHNob3VsZCBwb2ludCB0byBhIGJsb29tIGZpbHRlcicpO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgM10sICdpbmplY3RvckluZGV4IHNob3VsZCBwb2ludCB0byBhIGJsb29tIGZpbHRlcicpO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgNF0sICdpbmplY3RvckluZGV4IHNob3VsZCBwb2ludCB0byBhIGJsb29tIGZpbHRlcicpO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgNV0sICdpbmplY3RvckluZGV4IHNob3VsZCBwb2ludCB0byBhIGJsb29tIGZpbHRlcicpO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgNl0sICdpbmplY3RvckluZGV4IHNob3VsZCBwb2ludCB0byBhIGJsb29tIGZpbHRlcicpO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgN10sICdpbmplY3RvckluZGV4IHNob3VsZCBwb2ludCB0byBhIGJsb29tIGZpbHRlcicpO1xuICAgIGFzc2VydE51bWJlcihsVmlld1tpbmplY3RvckluZGV4ICsgOCAvKiBQQVJFTlQgKi9dLCAnaW5qZWN0b3JJbmRleCBzaG91bGQgcG9pbnQgdG8gcGFyZW50IGluamVjdG9yJyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gZ2V0RmFjdG9yeURlZih0eXBlLCB0aHJvd05vdEZvdW5kKSB7XG4gICAgY29uc3QgaGFzRmFjdG9yeURlZiA9IHR5cGUuaGFzT3duUHJvcGVydHkoTkdfRkFDVE9SWV9ERUYpO1xuICAgIGlmICghaGFzRmFjdG9yeURlZiAmJiB0aHJvd05vdEZvdW5kID09PSB0cnVlICYmIG5nRGV2TW9kZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGUgJHtzdHJpbmdpZnkodHlwZSl9IGRvZXMgbm90IGhhdmUgJ8m1ZmFjJyBwcm9wZXJ0eS5gKTtcbiAgICB9XG4gICAgcmV0dXJuIGhhc0ZhY3RvcnlEZWYgPyB0eXBlW05HX0ZBQ1RPUllfREVGXSA6IG51bGw7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgYmFzaWMgY2hhbmdlIGZyb20gYSBwcmV2aW91cyB0byBhIG5ldyB2YWx1ZSBmb3IgYSBzaW5nbGVcbiAqIHByb3BlcnR5IG9uIGEgZGlyZWN0aXZlIGluc3RhbmNlLiBQYXNzZWQgYXMgYSB2YWx1ZSBpbiBhXG4gKiB7QGxpbmsgU2ltcGxlQ2hhbmdlc30gb2JqZWN0IHRvIHRoZSBgbmdPbkNoYW5nZXNgIGhvb2suXG4gKlxuICogQHNlZSBgT25DaGFuZ2VzYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgU2ltcGxlQ2hhbmdlIHtcbiAgICBjb25zdHJ1Y3RvcihwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUsIGZpcnN0Q2hhbmdlKSB7XG4gICAgICAgIHRoaXMucHJldmlvdXNWYWx1ZSA9IHByZXZpb3VzVmFsdWU7XG4gICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gY3VycmVudFZhbHVlO1xuICAgICAgICB0aGlzLmZpcnN0Q2hhbmdlID0gZmlyc3RDaGFuZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgdGhlIG5ldyB2YWx1ZSBpcyB0aGUgZmlyc3QgdmFsdWUgYXNzaWduZWQuXG4gICAgICovXG4gICAgaXNGaXJzdENoYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RDaGFuZ2U7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogVGhlIE5nT25DaGFuZ2VzRmVhdHVyZSBkZWNvcmF0ZXMgYSBjb21wb25lbnQgd2l0aCBzdXBwb3J0IGZvciB0aGUgbmdPbkNoYW5nZXNcbiAqIGxpZmVjeWNsZSBob29rLCBzbyBpdCBzaG91bGQgYmUgaW5jbHVkZWQgaW4gYW55IGNvbXBvbmVudCB0aGF0IGltcGxlbWVudHNcbiAqIHRoYXQgaG9vay5cbiAqXG4gKiBJZiB0aGUgY29tcG9uZW50IG9yIGRpcmVjdGl2ZSB1c2VzIGluaGVyaXRhbmNlLCB0aGUgTmdPbkNoYW5nZXNGZWF0dXJlIE1VU1RcbiAqIGJlIGluY2x1ZGVkIGFzIGEgZmVhdHVyZSBBRlRFUiB7QGxpbmsgSW5oZXJpdERlZmluaXRpb25GZWF0dXJlfSwgb3RoZXJ3aXNlXG4gKiBpbmhlcml0ZWQgcHJvcGVydGllcyB3aWxsIG5vdCBiZSBwcm9wYWdhdGVkIHRvIHRoZSBuZ09uQ2hhbmdlcyBsaWZlY3ljbGVcbiAqIGhvb2suXG4gKlxuICogRXhhbXBsZSB1c2FnZTpcbiAqXG4gKiBgYGBcbiAqIHN0YXRpYyDJtWNtcCA9IGRlZmluZUNvbXBvbmVudCh7XG4gKiAgIC4uLlxuICogICBpbnB1dHM6IHtuYW1lOiAncHVibGljTmFtZSd9LFxuICogICBmZWF0dXJlczogW05nT25DaGFuZ2VzRmVhdHVyZV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtU5nT25DaGFuZ2VzRmVhdHVyZSgpIHtcbiAgICByZXR1cm4gTmdPbkNoYW5nZXNGZWF0dXJlSW1wbDtcbn1cbmZ1bmN0aW9uIE5nT25DaGFuZ2VzRmVhdHVyZUltcGwoZGVmaW5pdGlvbikge1xuICAgIGlmIChkZWZpbml0aW9uLnR5cGUucHJvdG90eXBlLm5nT25DaGFuZ2VzKSB7XG4gICAgICAgIGRlZmluaXRpb24uc2V0SW5wdXQgPSBuZ09uQ2hhbmdlc1NldElucHV0O1xuICAgIH1cbiAgICByZXR1cm4gcmVtZW1iZXJDaGFuZ2VIaXN0b3J5QW5kSW52b2tlT25DaGFuZ2VzSG9vaztcbn1cbi8vIFRoaXMgb3B0aW9uIGVuc3VyZXMgdGhhdCB0aGUgbmdPbkNoYW5nZXMgbGlmZWN5Y2xlIGhvb2sgd2lsbCBiZSBpbmhlcml0ZWRcbi8vIGZyb20gc3VwZXJjbGFzc2VzIChpbiBJbmhlcml0RGVmaW5pdGlvbkZlYXR1cmUpLlxuLyoqIEBub2NvbGxhcHNlICovXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tdG9wbGV2ZWwtcHJvcGVydHktYWNjZXNzXG7Jtcm1TmdPbkNoYW5nZXNGZWF0dXJlLm5nSW5oZXJpdCA9IHRydWU7XG4vKipcbiAqIFRoaXMgaXMgYSBzeW50aGV0aWMgbGlmZWN5Y2xlIGhvb2sgd2hpY2ggZ2V0cyBpbnNlcnRlZCBpbnRvIGBUVmlldy5wcmVPcmRlckhvb2tzYCB0byBzaW11bGF0ZVxuICogYG5nT25DaGFuZ2VzYC5cbiAqXG4gKiBUaGUgaG9vayByZWFkcyB0aGUgYE5nU2ltcGxlQ2hhbmdlc1N0b3JlYCBkYXRhIGZyb20gdGhlIGNvbXBvbmVudCBpbnN0YW5jZSBhbmQgaWYgY2hhbmdlcyBhcmVcbiAqIGZvdW5kIGl0IGludm9rZXMgYG5nT25DaGFuZ2VzYCBvbiB0aGUgY29tcG9uZW50IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB0aGlzIENvbXBvbmVudCBpbnN0YW5jZS4gQmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGdldHMgaW5zZXJ0ZWQgaW50byBgVFZpZXcucHJlT3JkZXJIb29rc2AsXG4gKiAgICAgaXQgaXMgZ3VhcmFudGVlZCB0byBiZSBjYWxsZWQgd2l0aCBjb21wb25lbnQgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHJlbWVtYmVyQ2hhbmdlSGlzdG9yeUFuZEludm9rZU9uQ2hhbmdlc0hvb2soKSB7XG4gICAgY29uc3Qgc2ltcGxlQ2hhbmdlc1N0b3JlID0gZ2V0U2ltcGxlQ2hhbmdlc1N0b3JlKHRoaXMpO1xuICAgIGNvbnN0IGN1cnJlbnQgPSBzaW1wbGVDaGFuZ2VzU3RvcmUgPT09IG51bGwgfHwgc2ltcGxlQ2hhbmdlc1N0b3JlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzaW1wbGVDaGFuZ2VzU3RvcmUuY3VycmVudDtcbiAgICBpZiAoY3VycmVudCkge1xuICAgICAgICBjb25zdCBwcmV2aW91cyA9IHNpbXBsZUNoYW5nZXNTdG9yZS5wcmV2aW91cztcbiAgICAgICAgaWYgKHByZXZpb3VzID09PSBFTVBUWV9PQkopIHtcbiAgICAgICAgICAgIHNpbXBsZUNoYW5nZXNTdG9yZS5wcmV2aW91cyA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBOZXcgY2hhbmdlcyBhcmUgY29waWVkIHRvIHRoZSBwcmV2aW91cyBzdG9yZSwgc28gdGhhdCB3ZSBkb24ndCBsb3NlIGhpc3RvcnkgZm9yIGlucHV0c1xuICAgICAgICAgICAgLy8gd2hpY2ggd2VyZSBub3QgY2hhbmdlZCB0aGlzIHRpbWVcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNba2V5XSA9IGN1cnJlbnRba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaW1wbGVDaGFuZ2VzU3RvcmUuY3VycmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMubmdPbkNoYW5nZXMoY3VycmVudCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbmdPbkNoYW5nZXNTZXRJbnB1dChpbnN0YW5jZSwgdmFsdWUsIHB1YmxpY05hbWUsIHByaXZhdGVOYW1lKSB7XG4gICAgY29uc3Qgc2ltcGxlQ2hhbmdlc1N0b3JlID0gZ2V0U2ltcGxlQ2hhbmdlc1N0b3JlKGluc3RhbmNlKSB8fFxuICAgICAgICBzZXRTaW1wbGVDaGFuZ2VzU3RvcmUoaW5zdGFuY2UsIHsgcHJldmlvdXM6IEVNUFRZX09CSiwgY3VycmVudDogbnVsbCB9KTtcbiAgICBjb25zdCBjdXJyZW50ID0gc2ltcGxlQ2hhbmdlc1N0b3JlLmN1cnJlbnQgfHwgKHNpbXBsZUNoYW5nZXNTdG9yZS5jdXJyZW50ID0ge30pO1xuICAgIGNvbnN0IHByZXZpb3VzID0gc2ltcGxlQ2hhbmdlc1N0b3JlLnByZXZpb3VzO1xuICAgIGNvbnN0IGRlY2xhcmVkTmFtZSA9IHRoaXMuZGVjbGFyZWRJbnB1dHNbcHVibGljTmFtZV07XG4gICAgY29uc3QgcHJldmlvdXNDaGFuZ2UgPSBwcmV2aW91c1tkZWNsYXJlZE5hbWVdO1xuICAgIGN1cnJlbnRbZGVjbGFyZWROYW1lXSA9IG5ldyBTaW1wbGVDaGFuZ2UocHJldmlvdXNDaGFuZ2UgJiYgcHJldmlvdXNDaGFuZ2UuY3VycmVudFZhbHVlLCB2YWx1ZSwgcHJldmlvdXMgPT09IEVNUFRZX09CSik7XG4gICAgaW5zdGFuY2VbcHJpdmF0ZU5hbWVdID0gdmFsdWU7XG59XG5jb25zdCBTSU1QTEVfQ0hBTkdFU19TVE9SRSA9ICdfX25nU2ltcGxlQ2hhbmdlc19fJztcbmZ1bmN0aW9uIGdldFNpbXBsZUNoYW5nZXNTdG9yZShpbnN0YW5jZSkge1xuICAgIHJldHVybiBpbnN0YW5jZVtTSU1QTEVfQ0hBTkdFU19TVE9SRV0gfHwgbnVsbDtcbn1cbmZ1bmN0aW9uIHNldFNpbXBsZUNoYW5nZXNTdG9yZShpbnN0YW5jZSwgc3RvcmUpIHtcbiAgICByZXR1cm4gaW5zdGFuY2VbU0lNUExFX0NIQU5HRVNfU1RPUkVdID0gc3RvcmU7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xubGV0IHByb2ZpbGVyQ2FsbGJhY2sgPSBudWxsO1xuLyoqXG4gKiBTZXRzIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCB3aWxsIGJlIGludm9rZWQgYmVmb3JlIGFuZCBhZnRlciBwZXJmb3JtaW5nIGNlcnRhaW4gYWN0aW9ucyBhdFxuICogcnVudGltZSAoZm9yIGV4YW1wbGUsIGJlZm9yZSBhbmQgYWZ0ZXIgcnVubmluZyBjaGFuZ2UgZGV0ZWN0aW9uKS5cbiAqXG4gKiBXYXJuaW5nOiB0aGlzIGZ1bmN0aW9uIGlzICpJTlRFUk5BTCogYW5kIHNob3VsZCBub3QgYmUgcmVsaWVkIHVwb24gaW4gYXBwbGljYXRpb24ncyBjb2RlLlxuICogVGhlIGNvbnRyYWN0IG9mIHRoZSBmdW5jdGlvbiBtaWdodCBiZSBjaGFuZ2VkIGluIGFueSByZWxlYXNlIGFuZC9vciB0aGUgZnVuY3Rpb24gY2FuIGJlIHJlbW92ZWRcbiAqIGNvbXBsZXRlbHkuXG4gKlxuICogQHBhcmFtIHByb2ZpbGVyIGZ1bmN0aW9uIHByb3ZpZGVkIGJ5IHRoZSBjYWxsZXIgb3IgbnVsbCB2YWx1ZSB0byBkaXNhYmxlIHByb2ZpbGluZy5cbiAqL1xuY29uc3Qgc2V0UHJvZmlsZXIgPSAocHJvZmlsZXIpID0+IHtcbiAgICBwcm9maWxlckNhbGxiYWNrID0gcHJvZmlsZXI7XG59O1xuLyoqXG4gKiBQcm9maWxlciBmdW5jdGlvbiB3aGljaCB3cmFwcyB1c2VyIGNvZGUgZXhlY3V0ZWQgYnkgdGhlIHJ1bnRpbWUuXG4gKlxuICogQHBhcmFtIGV2ZW50IFByb2ZpbGVyRXZlbnQgY29ycmVzcG9uZGluZyB0byB0aGUgZXhlY3V0aW9uIGNvbnRleHRcbiAqIEBwYXJhbSBpbnN0YW5jZSBjb21wb25lbnQgaW5zdGFuY2VcbiAqIEBwYXJhbSBob29rT3JMaXN0ZW5lciBsaWZlY3ljbGUgaG9vayBmdW5jdGlvbiBvciBvdXRwdXQgbGlzdGVuZXIuIFRoZSB2YWx1ZSBkZXBlbmRzIG9uIHRoZVxuICogIGV4ZWN1dGlvbiBjb250ZXh0XG4gKiBAcmV0dXJuc1xuICovXG5jb25zdCBwcm9maWxlciA9IGZ1bmN0aW9uIChldmVudCwgaW5zdGFuY2UsIGhvb2tPckxpc3RlbmVyKSB7XG4gICAgaWYgKHByb2ZpbGVyQ2FsbGJhY2sgIT0gbnVsbCAvKiBib3RoIGBudWxsYCBhbmQgYHVuZGVmaW5lZGAgKi8pIHtcbiAgICAgICAgcHJvZmlsZXJDYWxsYmFjayhldmVudCwgaW5zdGFuY2UsIGhvb2tPckxpc3RlbmVyKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmNvbnN0IFNWR19OQU1FU1BBQ0UgPSAnc3ZnJztcbmNvbnN0IFNWR19OQU1FU1BBQ0VfVVJJID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbmNvbnN0IE1BVEhfTUxfTkFNRVNQQUNFID0gJ21hdGgnO1xuY29uc3QgTUFUSF9NTF9OQU1FU1BBQ0VfVVJJID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aE1MLyc7XG5mdW5jdGlvbiBnZXROYW1lc3BhY2VVcmkobmFtZXNwYWNlKSB7XG4gICAgY29uc3QgbmFtZSA9IG5hbWVzcGFjZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBuYW1lID09PSBTVkdfTkFNRVNQQUNFID8gU1ZHX05BTUVTUEFDRV9VUkkgOlxuICAgICAgICAobmFtZSA9PT0gTUFUSF9NTF9OQU1FU1BBQ0UgPyBNQVRIX01MX05BTUVTUEFDRV9VUkkgOiBudWxsKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIE1vc3Qgb2YgdGhlIHVzZSBvZiBgZG9jdW1lbnRgIGluIEFuZ3VsYXIgaXMgZnJvbSB3aXRoaW4gdGhlIERJIHN5c3RlbSBzbyBpdCBpcyBwb3NzaWJsZSB0byBzaW1wbHlcbiAqIGluamVjdCB0aGUgYERPQ1VNRU5UYCB0b2tlbiBhbmQgYXJlIGRvbmUuXG4gKlxuICogSXZ5IGlzIHNwZWNpYWwgYmVjYXVzZSBpdCBkb2VzIG5vdCByZWx5IHVwb24gdGhlIERJIGFuZCBtdXN0IGdldCBob2xkIG9mIHRoZSBkb2N1bWVudCBzb21lIG90aGVyXG4gKiB3YXkuXG4gKlxuICogVGhlIHNvbHV0aW9uIGlzIHRvIGRlZmluZSBgZ2V0RG9jdW1lbnQoKWAgYW5kIGBzZXREb2N1bWVudCgpYCB0b3AtbGV2ZWwgZnVuY3Rpb25zIGZvciBpdnkuXG4gKiBXaGVyZXZlciBpdnkgbmVlZHMgdGhlIGdsb2JhbCBkb2N1bWVudCwgaXQgY2FsbHMgYGdldERvY3VtZW50KClgIGluc3RlYWQuXG4gKlxuICogV2hlbiBydW5uaW5nIGl2eSBvdXRzaWRlIG9mIGEgYnJvd3NlciBlbnZpcm9ubWVudCwgaXQgaXMgbmVjZXNzYXJ5IHRvIGNhbGwgYHNldERvY3VtZW50KClgIHRvXG4gKiB0ZWxsIGl2eSB3aGF0IHRoZSBnbG9iYWwgYGRvY3VtZW50YCBpcy5cbiAqXG4gKiBBbmd1bGFyIGRvZXMgdGhpcyBmb3IgdXMgaW4gZWFjaCBvZiB0aGUgc3RhbmRhcmQgcGxhdGZvcm1zIChgQnJvd3NlcmAsIGBTZXJ2ZXJgLCBhbmQgYFdlYldvcmtlcmApXG4gKiBieSBjYWxsaW5nIGBzZXREb2N1bWVudCgpYCB3aGVuIHByb3ZpZGluZyB0aGUgYERPQ1VNRU5UYCB0b2tlbi5cbiAqL1xubGV0IERPQ1VNRU5UID0gdW5kZWZpbmVkO1xuLyoqXG4gKiBUZWxsIGl2eSB3aGF0IHRoZSBgZG9jdW1lbnRgIGlzIGZvciB0aGlzIHBsYXRmb3JtLlxuICpcbiAqIEl0IGlzIG9ubHkgbmVjZXNzYXJ5IHRvIGNhbGwgdGhpcyBpZiB0aGUgY3VycmVudCBwbGF0Zm9ybSBpcyBub3QgYSBicm93c2VyLlxuICpcbiAqIEBwYXJhbSBkb2N1bWVudCBUaGUgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgZ2xvYmFsIGBkb2N1bWVudGAgaW4gdGhpcyBlbnZpcm9ubWVudC5cbiAqL1xuZnVuY3Rpb24gc2V0RG9jdW1lbnQoZG9jdW1lbnQpIHtcbiAgICBET0NVTUVOVCA9IGRvY3VtZW50O1xufVxuLyoqXG4gKiBBY2Nlc3MgdGhlIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIGBkb2N1bWVudGAgZm9yIHRoaXMgcGxhdGZvcm0uXG4gKlxuICogSXZ5IGNhbGxzIHRoaXMgd2hlbmV2ZXIgaXQgbmVlZHMgdG8gYWNjZXNzIHRoZSBgZG9jdW1lbnRgIG9iamVjdC5cbiAqIEZvciBleGFtcGxlIHRvIGNyZWF0ZSB0aGUgcmVuZGVyZXIgb3IgdG8gZG8gc2FuaXRpemF0aW9uLlxuICovXG5mdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgICBpZiAoRE9DVU1FTlQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gRE9DVU1FTlQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIH1cbiAgICAvLyBObyBcImRvY3VtZW50XCIgY2FuIGJlIGZvdW5kLiBUaGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpZiB3ZSBhcmUgcnVubmluZyBpdnkgb3V0c2lkZSBBbmd1bGFyIGFuZFxuICAgIC8vIHRoZSBjdXJyZW50IHBsYXRmb3JtIGlzIG5vdCBhIGJyb3dzZXIuIFNpbmNlIHRoaXMgaXMgbm90IGEgc3VwcG9ydGVkIHNjZW5hcmlvIGF0IHRoZSBtb21lbnRcbiAgICAvLyB0aGlzIHNob3VsZCBub3QgaGFwcGVuIGluIEFuZ3VsYXIgYXBwcy5cbiAgICAvLyBPbmNlIHdlIHN1cHBvcnQgcnVubmluZyBpdnkgb3V0c2lkZSBvZiBBbmd1bGFyIHdlIHdpbGwgbmVlZCB0byBwdWJsaXNoIGBzZXREb2N1bWVudCgpYCBhcyBhXG4gICAgLy8gcHVibGljIEFQSS4gTWVhbndoaWxlIHdlIGp1c3QgcmV0dXJuIGB1bmRlZmluZWRgIGFuZCBsZXQgdGhlIGFwcGxpY2F0aW9uIGZhaWwuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBUT0RPOiBjbGVhbnVwIG9uY2UgdGhlIGNvZGUgaXMgbWVyZ2VkIGluIGFuZ3VsYXIvYW5ndWxhclxudmFyIFJlbmRlcmVyU3R5bGVGbGFnczM7XG4oZnVuY3Rpb24gKFJlbmRlcmVyU3R5bGVGbGFnczMpIHtcbiAgICBSZW5kZXJlclN0eWxlRmxhZ3MzW1JlbmRlcmVyU3R5bGVGbGFnczNbXCJJbXBvcnRhbnRcIl0gPSAxXSA9IFwiSW1wb3J0YW50XCI7XG4gICAgUmVuZGVyZXJTdHlsZUZsYWdzM1tSZW5kZXJlclN0eWxlRmxhZ3MzW1wiRGFzaENhc2VcIl0gPSAyXSA9IFwiRGFzaENhc2VcIjtcbn0pKFJlbmRlcmVyU3R5bGVGbGFnczMgfHwgKFJlbmRlcmVyU3R5bGVGbGFnczMgPSB7fSkpO1xuLyoqIFJldHVybnMgd2hldGhlciB0aGUgYHJlbmRlcmVyYCBpcyBhIGBQcm9jZWR1cmFsUmVuZGVyZXIzYCAqL1xuZnVuY3Rpb24gaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpIHtcbiAgICByZXR1cm4gISEocmVuZGVyZXIubGlzdGVuKTtcbn1cbmNvbnN0IGRvbVJlbmRlcmVyRmFjdG9yeTMgPSB7XG4gICAgY3JlYXRlUmVuZGVyZXI6IChob3N0RWxlbWVudCwgcmVuZGVyZXJUeXBlKSA9PiB7XG4gICAgICAgIHJldHVybiBnZXREb2N1bWVudCgpO1xuICAgIH1cbn07XG4vLyBOb3RlOiBUaGlzIGhhY2sgaXMgbmVjZXNzYXJ5IHNvIHdlIGRvbid0IGVycm9uZW91c2x5IGdldCBhIGNpcmN1bGFyIGRlcGVuZGVuY3lcbi8vIGZhaWx1cmUgYmFzZWQgb24gdHlwZXMuXG5jb25zdCB1bnVzZWRWYWx1ZUV4cG9ydFRvUGxhY2F0ZUFqZCQ2ID0gMTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEZvciBlZmZpY2llbmN5IHJlYXNvbnMgd2Ugb2Z0ZW4gcHV0IHNldmVyYWwgZGlmZmVyZW50IGRhdGEgdHlwZXMgKGBSTm9kZWAsIGBMVmlld2AsIGBMQ29udGFpbmVyYClcbiAqIGluIHNhbWUgbG9jYXRpb24gaW4gYExWaWV3YC4gVGhpcyBpcyBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdG8gcHJlLWFsbG9jYXRlIHNwYWNlIGZvciBpdFxuICogYmVjYXVzZSB0aGUgc3RvcmFnZSBpcyBzcGFyc2UuIFRoaXMgZmlsZSBjb250YWlucyB1dGlsaXRpZXMgZm9yIGRlYWxpbmcgd2l0aCBzdWNoIGRhdGEgdHlwZXMuXG4gKlxuICogSG93IGRvIHdlIGtub3cgd2hhdCBpcyBzdG9yZWQgYXQgYSBnaXZlbiBsb2NhdGlvbiBpbiBgTFZpZXdgLlxuICogLSBgQXJyYXkuaXNBcnJheSh2YWx1ZSkgPT09IGZhbHNlYCA9PiBgUk5vZGVgIChUaGUgbm9ybWFsIHN0b3JhZ2UgdmFsdWUpXG4gKiAtIGBBcnJheS5pc0FycmF5KHZhbHVlKSA9PT0gdHJ1ZWAgPT4gdGhlbiB0aGUgYHZhbHVlWzBdYCByZXByZXNlbnRzIHRoZSB3cmFwcGVkIHZhbHVlLlxuICogICAtIGB0eXBlb2YgdmFsdWVbVFlQRV0gPT09ICdvYmplY3QnYCA9PiBgTFZpZXdgXG4gKiAgICAgIC0gVGhpcyBoYXBwZW5zIHdoZW4gd2UgaGF2ZSBhIGNvbXBvbmVudCBhdCBhIGdpdmVuIGxvY2F0aW9uXG4gKiAgIC0gYHR5cGVvZiB2YWx1ZVtUWVBFXSA9PT0gdHJ1ZWAgPT4gYExDb250YWluZXJgXG4gKiAgICAgIC0gVGhpcyBoYXBwZW5zIHdoZW4gd2UgaGF2ZSBgTENvbnRhaW5lcmAgYmluZGluZyBhdCBhIGdpdmVuIGxvY2F0aW9uLlxuICpcbiAqXG4gKiBOT1RFOiBpdCBpcyBhc3N1bWVkIHRoYXQgYEFycmF5LmlzQXJyYXlgIGFuZCBgdHlwZW9mYCBvcGVyYXRpb25zIGFyZSB2ZXJ5IGVmZmljaWVudC5cbiAqL1xuLyoqXG4gKiBSZXR1cm5zIGBSTm9kZWAuXG4gKiBAcGFyYW0gdmFsdWUgd3JhcHBlZCB2YWx1ZSBvZiBgUk5vZGVgLCBgTFZpZXdgLCBgTENvbnRhaW5lcmBcbiAqL1xuZnVuY3Rpb24gdW53cmFwUk5vZGUodmFsdWUpIHtcbiAgICB3aGlsZSAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZVtIT1NUXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGBMVmlld2Agb3IgYG51bGxgIGlmIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSB2YWx1ZSB3cmFwcGVkIHZhbHVlIG9mIGBSTm9kZWAsIGBMVmlld2AsIGBMQ29udGFpbmVyYFxuICovXG5mdW5jdGlvbiB1bndyYXBMVmlldyh2YWx1ZSkge1xuICAgIHdoaWxlIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAvLyBUaGlzIGNoZWNrIGlzIHNhbWUgYXMgYGlzTFZpZXcoKWAgYnV0IHdlIGRvbid0IGNhbGwgYXQgYXMgd2UgZG9uJ3Qgd2FudCB0byBjYWxsXG4gICAgICAgIC8vIGBBcnJheS5pc0FycmF5KClgIHR3aWNlIGFuZCBnaXZlIEpJVGVyIG1vcmUgd29yayBmb3IgaW5saW5pbmcuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWVbVFlQRV0gPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlW0hPU1RdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmV0dXJucyBgTENvbnRhaW5lcmAgb3IgYG51bGxgIGlmIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSB2YWx1ZSB3cmFwcGVkIHZhbHVlIG9mIGBSTm9kZWAsIGBMVmlld2AsIGBMQ29udGFpbmVyYFxuICovXG5mdW5jdGlvbiB1bndyYXBMQ29udGFpbmVyKHZhbHVlKSB7XG4gICAgd2hpbGUgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIC8vIFRoaXMgY2hlY2sgaXMgc2FtZSBhcyBgaXNMQ29udGFpbmVyKClgIGJ1dCB3ZSBkb24ndCBjYWxsIGF0IGFzIHdlIGRvbid0IHdhbnQgdG8gY2FsbFxuICAgICAgICAvLyBgQXJyYXkuaXNBcnJheSgpYCB0d2ljZSBhbmQgZ2l2ZSBKSVRlciBtb3JlIHdvcmsgZm9yIGlubGluaW5nLlxuICAgICAgICBpZiAodmFsdWVbVFlQRV0gPT09IHRydWUpXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gdmFsdWVbSE9TVF07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgYW4gZWxlbWVudCB2YWx1ZSBmcm9tIHRoZSBwcm92aWRlZCBgdmlld0RhdGFgLCBieSB1bndyYXBwaW5nXG4gKiBmcm9tIGFueSBjb250YWluZXJzLCBjb21wb25lbnQgdmlld3MsIG9yIHN0eWxlIGNvbnRleHRzLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmVCeUluZGV4KGluZGV4LCBsVmlldykge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXcsIGluZGV4KTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0R3JlYXRlclRoYW5PckVxdWFsKGluZGV4LCBIRUFERVJfT0ZGU0VULCAnRXhwZWN0ZWQgdG8gYmUgcGFzdCBIRUFERVJfT0ZGU0VUJyk7XG4gICAgcmV0dXJuIHVud3JhcFJOb2RlKGxWaWV3W2luZGV4XSk7XG59XG4vKipcbiAqIFJldHJpZXZlIGFuIGBSTm9kZWAgZm9yIGEgZ2l2ZW4gYFROb2RlYCBhbmQgYExWaWV3YC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGd1YXJhbnRlZXMgaW4gZGV2IG1vZGUgdG8gcmV0cmlldmUgYSBub24tbnVsbCBgUk5vZGVgLlxuICpcbiAqIEBwYXJhbSB0Tm9kZVxuICogQHBhcmFtIGxWaWV3XG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZUJ5VE5vZGUodE5vZGUsIGxWaWV3KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlRm9yTFZpZXcodE5vZGUsIGxWaWV3KTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SW5kZXhJblJhbmdlKGxWaWV3LCB0Tm9kZS5pbmRleCk7XG4gICAgY29uc3Qgbm9kZSA9IHVud3JhcFJOb2RlKGxWaWV3W3ROb2RlLmluZGV4XSk7XG4gICAgbmdEZXZNb2RlICYmICFpc1Byb2NlZHVyYWxSZW5kZXJlcihsVmlld1tSRU5ERVJFUl0pICYmIGFzc2VydERvbU5vZGUobm9kZSk7XG4gICAgcmV0dXJuIG5vZGU7XG59XG4vKipcbiAqIFJldHJpZXZlIGFuIGBSTm9kZWAgb3IgYG51bGxgIGZvciBhIGdpdmVuIGBUTm9kZWAgYW5kIGBMVmlld2AuXG4gKlxuICogU29tZSBgVE5vZGVgcyBkb24ndCBoYXZlIGFzc29jaWF0ZWQgYFJOb2RlYHMuIEZvciBleGFtcGxlIGBQcm9qZWN0aW9uYFxuICpcbiAqIEBwYXJhbSB0Tm9kZVxuICogQHBhcmFtIGxWaWV3XG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZUJ5VE5vZGVPck51bGwodE5vZGUsIGxWaWV3KSB7XG4gICAgY29uc3QgaW5kZXggPSB0Tm9kZSA9PT0gbnVsbCA/IC0xIDogdE5vZGUuaW5kZXg7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0VE5vZGVGb3JMVmlldyh0Tm9kZSwgbFZpZXcpO1xuICAgICAgICBjb25zdCBub2RlID0gdW53cmFwUk5vZGUobFZpZXdbaW5kZXhdKTtcbiAgICAgICAgbmdEZXZNb2RlICYmIG5vZGUgIT09IG51bGwgJiYgIWlzUHJvY2VkdXJhbFJlbmRlcmVyKGxWaWV3W1JFTkRFUkVSXSkgJiYgYXNzZXJ0RG9tTm9kZShub2RlKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLy8gZml4bWUobWlza28pOiBUaGUgcmV0dXJuIFR5cGUgc2hvdWxkIGJlIGBUTm9kZXxudWxsYFxuZnVuY3Rpb24gZ2V0VE5vZGUodFZpZXcsIGluZGV4KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEdyZWF0ZXJUaGFuKGluZGV4LCAtMSwgJ3dyb25nIGluZGV4IGZvciBUTm9kZScpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRMZXNzVGhhbihpbmRleCwgdFZpZXcuZGF0YS5sZW5ndGgsICd3cm9uZyBpbmRleCBmb3IgVE5vZGUnKTtcbiAgICBjb25zdCB0Tm9kZSA9IHRWaWV3LmRhdGFbaW5kZXhdO1xuICAgIG5nRGV2TW9kZSAmJiB0Tm9kZSAhPT0gbnVsbCAmJiBhc3NlcnRUTm9kZSh0Tm9kZSk7XG4gICAgcmV0dXJuIHROb2RlO1xufVxuLyoqIFJldHJpZXZlcyBhIHZhbHVlIGZyb20gYW55IGBMVmlld2Agb3IgYFREYXRhYC4gKi9cbmZ1bmN0aW9uIGxvYWQodmlldywgaW5kZXgpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SW5kZXhJblJhbmdlKHZpZXcsIGluZGV4KTtcbiAgICByZXR1cm4gdmlld1tpbmRleF07XG59XG5mdW5jdGlvbiBnZXRDb21wb25lbnRMVmlld0J5SW5kZXgobm9kZUluZGV4LCBob3N0Vmlldykge1xuICAgIC8vIENvdWxkIGJlIGFuIExWaWV3IG9yIGFuIExDb250YWluZXIuIElmIExDb250YWluZXIsIHVud3JhcCB0byBmaW5kIExWaWV3LlxuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UoaG9zdFZpZXcsIG5vZGVJbmRleCk7XG4gICAgY29uc3Qgc2xvdFZhbHVlID0gaG9zdFZpZXdbbm9kZUluZGV4XTtcbiAgICBjb25zdCBsVmlldyA9IGlzTFZpZXcoc2xvdFZhbHVlKSA/IHNsb3RWYWx1ZSA6IHNsb3RWYWx1ZVtIT1NUXTtcbiAgICByZXR1cm4gbFZpZXc7XG59XG4vKiogQ2hlY2tzIHdoZXRoZXIgYSBnaXZlbiB2aWV3IGlzIGluIGNyZWF0aW9uIG1vZGUgKi9cbmZ1bmN0aW9uIGlzQ3JlYXRpb25Nb2RlKHZpZXcpIHtcbiAgICByZXR1cm4gKHZpZXdbRkxBR1NdICYgNCAvKiBDcmVhdGlvbk1vZGUgKi8pID09PSA0IC8qIENyZWF0aW9uTW9kZSAqLztcbn1cbi8qKlxuICogUmV0dXJucyBhIGJvb2xlYW4gZm9yIHdoZXRoZXIgdGhlIHZpZXcgaXMgYXR0YWNoZWQgdG8gdGhlIGNoYW5nZSBkZXRlY3Rpb24gdHJlZS5cbiAqXG4gKiBOb3RlOiBUaGlzIGRldGVybWluZXMgd2hldGhlciBhIHZpZXcgc2hvdWxkIGJlIGNoZWNrZWQsIG5vdCB3aGV0aGVyIGl0J3MgaW5zZXJ0ZWRcbiAqIGludG8gYSBjb250YWluZXIuIEZvciB0aGF0LCB5b3UnbGwgd2FudCBgdmlld0F0dGFjaGVkVG9Db250YWluZXJgIGJlbG93LlxuICovXG5mdW5jdGlvbiB2aWV3QXR0YWNoZWRUb0NoYW5nZURldGVjdG9yKHZpZXcpIHtcbiAgICByZXR1cm4gKHZpZXdbRkxBR1NdICYgMTI4IC8qIEF0dGFjaGVkICovKSA9PT0gMTI4IC8qIEF0dGFjaGVkICovO1xufVxuLyoqIFJldHVybnMgYSBib29sZWFuIGZvciB3aGV0aGVyIHRoZSB2aWV3IGlzIGF0dGFjaGVkIHRvIGEgY29udGFpbmVyLiAqL1xuZnVuY3Rpb24gdmlld0F0dGFjaGVkVG9Db250YWluZXIodmlldykge1xuICAgIHJldHVybiBpc0xDb250YWluZXIodmlld1tQQVJFTlRdKTtcbn1cbmZ1bmN0aW9uIGdldENvbnN0YW50KGNvbnN0cywgaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPT09IG51bGwgfHwgaW5kZXggPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEluZGV4SW5SYW5nZShjb25zdHMsIGluZGV4KTtcbiAgICByZXR1cm4gY29uc3RzW2luZGV4XTtcbn1cbi8qKlxuICogUmVzZXRzIHRoZSBwcmUtb3JkZXIgaG9vayBmbGFncyBvZiB0aGUgdmlldy5cbiAqIEBwYXJhbSBsVmlldyB0aGUgTFZpZXcgb24gd2hpY2ggdGhlIGZsYWdzIGFyZSByZXNldFxuICovXG5mdW5jdGlvbiByZXNldFByZU9yZGVySG9va0ZsYWdzKGxWaWV3KSB7XG4gICAgbFZpZXdbUFJFT1JERVJfSE9PS19GTEFHU10gPSAwO1xufVxuLyoqXG4gKiBVcGRhdGVzIHRoZSBgVFJBTlNQTEFOVEVEX1ZJRVdTX1RPX1JFRlJFU0hgIGNvdW50ZXIgb24gdGhlIGBMQ29udGFpbmVyYCBhcyB3ZWxsIGFzIHRoZSBwYXJlbnRzXG4gKiB3aG9zZVxuICogIDEuIGNvdW50ZXIgZ29lcyBmcm9tIDAgdG8gMSwgaW5kaWNhdGluZyB0aGF0IHRoZXJlIGlzIGEgbmV3IGNoaWxkIHRoYXQgaGFzIGEgdmlldyB0byByZWZyZXNoXG4gKiAgb3JcbiAqICAyLiBjb3VudGVyIGdvZXMgZnJvbSAxIHRvIDAsIGluZGljYXRpbmcgdGhlcmUgYXJlIG5vIG1vcmUgZGVzY2VuZGFudCB2aWV3cyB0byByZWZyZXNoXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZVRyYW5zcGxhbnRlZFZpZXdDb3VudChsQ29udGFpbmVyLCBhbW91bnQpIHtcbiAgICBsQ29udGFpbmVyW1RSQU5TUExBTlRFRF9WSUVXU19UT19SRUZSRVNIXSArPSBhbW91bnQ7XG4gICAgbGV0IHZpZXdPckNvbnRhaW5lciA9IGxDb250YWluZXI7XG4gICAgbGV0IHBhcmVudCA9IGxDb250YWluZXJbUEFSRU5UXTtcbiAgICB3aGlsZSAocGFyZW50ICE9PSBudWxsICYmXG4gICAgICAgICgoYW1vdW50ID09PSAxICYmIHZpZXdPckNvbnRhaW5lcltUUkFOU1BMQU5URURfVklFV1NfVE9fUkVGUkVTSF0gPT09IDEpIHx8XG4gICAgICAgICAgICAoYW1vdW50ID09PSAtMSAmJiB2aWV3T3JDb250YWluZXJbVFJBTlNQTEFOVEVEX1ZJRVdTX1RPX1JFRlJFU0hdID09PSAwKSkpIHtcbiAgICAgICAgcGFyZW50W1RSQU5TUExBTlRFRF9WSUVXU19UT19SRUZSRVNIXSArPSBhbW91bnQ7XG4gICAgICAgIHZpZXdPckNvbnRhaW5lciA9IHBhcmVudDtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50W1BBUkVOVF07XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmNvbnN0IGluc3RydWN0aW9uU3RhdGUgPSB7XG4gICAgbEZyYW1lOiBjcmVhdGVMRnJhbWUobnVsbCksXG4gICAgYmluZGluZ3NFbmFibGVkOiB0cnVlLFxuICAgIGlzSW5DaGVja05vQ2hhbmdlc01vZGU6IGZhbHNlLFxufTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBpbnN0cnVjdGlvbiBzdGF0ZSBzdGFjayBpcyBlbXB0eS5cbiAqXG4gKiBJbnRlbmRlZCB0byBiZSBjYWxsZWQgZnJvbSB0ZXN0cyBvbmx5ICh0cmVlIHNoYWtlbiBvdGhlcndpc2UpLlxuICovXG5mdW5jdGlvbiBzcGVjT25seUlzSW5zdHJ1Y3Rpb25TdGF0ZUVtcHR5KCkge1xuICAgIHJldHVybiBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5wYXJlbnQgPT09IG51bGw7XG59XG5mdW5jdGlvbiBnZXRFbGVtZW50RGVwdGhDb3VudCgpIHtcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUuZWxlbWVudERlcHRoQ291bnQ7XG59XG5mdW5jdGlvbiBpbmNyZWFzZUVsZW1lbnREZXB0aENvdW50KCkge1xuICAgIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmVsZW1lbnREZXB0aENvdW50Kys7XG59XG5mdW5jdGlvbiBkZWNyZWFzZUVsZW1lbnREZXB0aENvdW50KCkge1xuICAgIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmVsZW1lbnREZXB0aENvdW50LS07XG59XG5mdW5jdGlvbiBnZXRCaW5kaW5nc0VuYWJsZWQoKSB7XG4gICAgcmV0dXJuIGluc3RydWN0aW9uU3RhdGUuYmluZGluZ3NFbmFibGVkO1xufVxuLyoqXG4gKiBFbmFibGVzIGRpcmVjdGl2ZSBtYXRjaGluZyBvbiBlbGVtZW50cy5cbiAqXG4gKiAgKiBFeGFtcGxlOlxuICogYGBgXG4gKiA8bXktY29tcCBteS1kaXJlY3RpdmU+XG4gKiAgIFNob3VsZCBtYXRjaCBjb21wb25lbnQgLyBkaXJlY3RpdmUuXG4gKiA8L215LWNvbXA+XG4gKiA8ZGl2IG5nTm9uQmluZGFibGU+XG4gKiAgIDwhLS0gybXJtWRpc2FibGVCaW5kaW5ncygpIC0tPlxuICogICA8bXktY29tcCBteS1kaXJlY3RpdmU+XG4gKiAgICAgU2hvdWxkIG5vdCBtYXRjaCBjb21wb25lbnQgLyBkaXJlY3RpdmUgYmVjYXVzZSB3ZSBhcmUgaW4gbmdOb25CaW5kYWJsZS5cbiAqICAgPC9teS1jb21wPlxuICogICA8IS0tIMm1ybVlbmFibGVCaW5kaW5ncygpIC0tPlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1ZW5hYmxlQmluZGluZ3MoKSB7XG4gICAgaW5zdHJ1Y3Rpb25TdGF0ZS5iaW5kaW5nc0VuYWJsZWQgPSB0cnVlO1xufVxuLyoqXG4gKiBEaXNhYmxlcyBkaXJlY3RpdmUgbWF0Y2hpbmcgb24gZWxlbWVudC5cbiAqXG4gKiAgKiBFeGFtcGxlOlxuICogYGBgXG4gKiA8bXktY29tcCBteS1kaXJlY3RpdmU+XG4gKiAgIFNob3VsZCBtYXRjaCBjb21wb25lbnQgLyBkaXJlY3RpdmUuXG4gKiA8L215LWNvbXA+XG4gKiA8ZGl2IG5nTm9uQmluZGFibGU+XG4gKiAgIDwhLS0gybXJtWRpc2FibGVCaW5kaW5ncygpIC0tPlxuICogICA8bXktY29tcCBteS1kaXJlY3RpdmU+XG4gKiAgICAgU2hvdWxkIG5vdCBtYXRjaCBjb21wb25lbnQgLyBkaXJlY3RpdmUgYmVjYXVzZSB3ZSBhcmUgaW4gbmdOb25CaW5kYWJsZS5cbiAqICAgPC9teS1jb21wPlxuICogICA8IS0tIMm1ybVlbmFibGVCaW5kaW5ncygpIC0tPlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1ZGlzYWJsZUJpbmRpbmdzKCkge1xuICAgIGluc3RydWN0aW9uU3RhdGUuYmluZGluZ3NFbmFibGVkID0gZmFsc2U7XG59XG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCBgTFZpZXdgLlxuICovXG5mdW5jdGlvbiBnZXRMVmlldygpIHtcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUubFZpZXc7XG59XG4vKipcbiAqIFJldHVybiB0aGUgY3VycmVudCBgVFZpZXdgLlxuICovXG5mdW5jdGlvbiBnZXRUVmlldygpIHtcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUudFZpZXc7XG59XG4vKipcbiAqIFJlc3RvcmVzIGBjb250ZXh0Vmlld0RhdGFgIHRvIHRoZSBnaXZlbiBPcGFxdWVWaWV3U3RhdGUgaW5zdGFuY2UuXG4gKlxuICogVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHRoZSBnZXRDdXJyZW50VmlldygpIGluc3RydWN0aW9uIHRvIHNhdmUgYSBzbmFwc2hvdFxuICogb2YgdGhlIGN1cnJlbnQgdmlldyBhbmQgcmVzdG9yZSBpdCB3aGVuIGxpc3RlbmVycyBhcmUgaW52b2tlZC4gVGhpcyBhbGxvd3NcbiAqIHdhbGtpbmcgdGhlIGRlY2xhcmF0aW9uIHZpZXcgdHJlZSBpbiBsaXN0ZW5lcnMgdG8gZ2V0IHZhcnMgZnJvbSBwYXJlbnQgdmlld3MuXG4gKlxuICogQHBhcmFtIHZpZXdUb1Jlc3RvcmUgVGhlIE9wYXF1ZVZpZXdTdGF0ZSBpbnN0YW5jZSB0byByZXN0b3JlLlxuICogQHJldHVybnMgQ29udGV4dCBvZiB0aGUgcmVzdG9yZWQgT3BhcXVlVmlld1N0YXRlIGluc3RhbmNlLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVyZXN0b3JlVmlldyh2aWV3VG9SZXN0b3JlKSB7XG4gICAgaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUuY29udGV4dExWaWV3ID0gdmlld1RvUmVzdG9yZTtcbiAgICByZXR1cm4gdmlld1RvUmVzdG9yZVtDT05URVhUXTtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRUTm9kZSgpIHtcbiAgICBsZXQgY3VycmVudFROb2RlID0gZ2V0Q3VycmVudFROb2RlUGxhY2Vob2xkZXJPaygpO1xuICAgIHdoaWxlIChjdXJyZW50VE5vZGUgIT09IG51bGwgJiYgY3VycmVudFROb2RlLnR5cGUgPT09IDY0IC8qIFBsYWNlaG9sZGVyICovKSB7XG4gICAgICAgIGN1cnJlbnRUTm9kZSA9IGN1cnJlbnRUTm9kZS5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50VE5vZGU7XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50VE5vZGVQbGFjZWhvbGRlck9rKCkge1xuICAgIHJldHVybiBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5jdXJyZW50VE5vZGU7XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50UGFyZW50VE5vZGUoKSB7XG4gICAgY29uc3QgbEZyYW1lID0gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWU7XG4gICAgY29uc3QgY3VycmVudFROb2RlID0gbEZyYW1lLmN1cnJlbnRUTm9kZTtcbiAgICByZXR1cm4gbEZyYW1lLmlzUGFyZW50ID8gY3VycmVudFROb2RlIDogY3VycmVudFROb2RlLnBhcmVudDtcbn1cbmZ1bmN0aW9uIHNldEN1cnJlbnRUTm9kZSh0Tm9kZSwgaXNQYXJlbnQpIHtcbiAgICBuZ0Rldk1vZGUgJiYgdE5vZGUgJiYgYXNzZXJ0VE5vZGVGb3JUVmlldyh0Tm9kZSwgaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUudFZpZXcpO1xuICAgIGNvbnN0IGxGcmFtZSA9IGluc3RydWN0aW9uU3RhdGUubEZyYW1lO1xuICAgIGxGcmFtZS5jdXJyZW50VE5vZGUgPSB0Tm9kZTtcbiAgICBsRnJhbWUuaXNQYXJlbnQgPSBpc1BhcmVudDtcbn1cbmZ1bmN0aW9uIGlzQ3VycmVudFROb2RlUGFyZW50KCkge1xuICAgIHJldHVybiBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5pc1BhcmVudDtcbn1cbmZ1bmN0aW9uIHNldEN1cnJlbnRUTm9kZUFzTm90UGFyZW50KCkge1xuICAgIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmlzUGFyZW50ID0gZmFsc2U7XG59XG5mdW5jdGlvbiBzZXRDdXJyZW50VE5vZGVBc1BhcmVudCgpIHtcbiAgICBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5pc1BhcmVudCA9IHRydWU7XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0TFZpZXcoKSB7XG4gICAgcmV0dXJuIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmNvbnRleHRMVmlldztcbn1cbmZ1bmN0aW9uIGlzSW5DaGVja05vQ2hhbmdlc01vZGUoKSB7XG4gICAgLy8gVE9ETyhtaXNrbyk6IHJlbW92ZSB0aGlzIGZyb20gdGhlIExWaWV3IHNpbmNlIGl0IGlzIG5nRGV2TW9kZT10cnVlIG1vZGUgb25seS5cbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25TdGF0ZS5pc0luQ2hlY2tOb0NoYW5nZXNNb2RlO1xufVxuZnVuY3Rpb24gc2V0SXNJbkNoZWNrTm9DaGFuZ2VzTW9kZShtb2RlKSB7XG4gICAgaW5zdHJ1Y3Rpb25TdGF0ZS5pc0luQ2hlY2tOb0NoYW5nZXNNb2RlID0gbW9kZTtcbn1cbi8vIHRvcCBsZXZlbCB2YXJpYWJsZXMgc2hvdWxkIG5vdCBiZSBleHBvcnRlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyAoUEVSRl9OT1RFUy5tZClcbmZ1bmN0aW9uIGdldEJpbmRpbmdSb290KCkge1xuICAgIGNvbnN0IGxGcmFtZSA9IGluc3RydWN0aW9uU3RhdGUubEZyYW1lO1xuICAgIGxldCBpbmRleCA9IGxGcmFtZS5iaW5kaW5nUm9vdEluZGV4O1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgaW5kZXggPSBsRnJhbWUuYmluZGluZ1Jvb3RJbmRleCA9IGxGcmFtZS50Vmlldy5iaW5kaW5nU3RhcnRJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuZnVuY3Rpb24gZ2V0QmluZGluZ0luZGV4KCkge1xuICAgIHJldHVybiBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5iaW5kaW5nSW5kZXg7XG59XG5mdW5jdGlvbiBzZXRCaW5kaW5nSW5kZXgodmFsdWUpIHtcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUuYmluZGluZ0luZGV4ID0gdmFsdWU7XG59XG5mdW5jdGlvbiBuZXh0QmluZGluZ0luZGV4KCkge1xuICAgIHJldHVybiBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5iaW5kaW5nSW5kZXgrKztcbn1cbmZ1bmN0aW9uIGluY3JlbWVudEJpbmRpbmdJbmRleChjb3VudCkge1xuICAgIGNvbnN0IGxGcmFtZSA9IGluc3RydWN0aW9uU3RhdGUubEZyYW1lO1xuICAgIGNvbnN0IGluZGV4ID0gbEZyYW1lLmJpbmRpbmdJbmRleDtcbiAgICBsRnJhbWUuYmluZGluZ0luZGV4ID0gbEZyYW1lLmJpbmRpbmdJbmRleCArIGNvdW50O1xuICAgIHJldHVybiBpbmRleDtcbn1cbmZ1bmN0aW9uIGlzSW5JMThuQmxvY2soKSB7XG4gICAgcmV0dXJuIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmluSTE4bjtcbn1cbmZ1bmN0aW9uIHNldEluSTE4bkJsb2NrKGlzSW5JMThuQmxvY2spIHtcbiAgICBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5pbkkxOG4gPSBpc0luSTE4bkJsb2NrO1xufVxuLyoqXG4gKiBTZXQgYSBuZXcgYmluZGluZyByb290IGluZGV4IHNvIHRoYXQgaG9zdCB0ZW1wbGF0ZSBmdW5jdGlvbnMgY2FuIGV4ZWN1dGUuXG4gKlxuICogQmluZGluZ3MgaW5zaWRlIHRoZSBob3N0IHRlbXBsYXRlIGFyZSAwIGluZGV4LiBCdXQgYmVjYXVzZSB3ZSBkb24ndCBrbm93IGFoZWFkIG9mIHRpbWVcbiAqIGhvdyBtYW55IGhvc3QgYmluZGluZ3Mgd2UgaGF2ZSB3ZSBjYW4ndCBwcmUtY29tcHV0ZSB0aGVtLiBGb3IgdGhpcyByZWFzb24gdGhleSBhcmUgYWxsXG4gKiAwIGluZGV4IGFuZCB3ZSBqdXN0IHNoaWZ0IHRoZSByb290IHNvIHRoYXQgdGhleSBtYXRjaCBuZXh0IGF2YWlsYWJsZSBsb2NhdGlvbiBpbiB0aGUgTFZpZXcuXG4gKlxuICogQHBhcmFtIGJpbmRpbmdSb290SW5kZXggUm9vdCBpbmRleCBmb3IgYGhvc3RCaW5kaW5nc2BcbiAqIEBwYXJhbSBjdXJyZW50RGlyZWN0aXZlSW5kZXggYFREYXRhW2N1cnJlbnREaXJlY3RpdmVJbmRleF1gIHdpbGwgcG9pbnQgdG8gdGhlIGN1cnJlbnQgZGlyZWN0aXZlXG4gKiAgICAgICAgd2hvc2UgYGhvc3RCaW5kaW5nc2AgYXJlIGJlaW5nIHByb2Nlc3NlZC5cbiAqL1xuZnVuY3Rpb24gc2V0QmluZGluZ1Jvb3RGb3JIb3N0QmluZGluZ3MoYmluZGluZ1Jvb3RJbmRleCwgY3VycmVudERpcmVjdGl2ZUluZGV4KSB7XG4gICAgY29uc3QgbEZyYW1lID0gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWU7XG4gICAgbEZyYW1lLmJpbmRpbmdJbmRleCA9IGxGcmFtZS5iaW5kaW5nUm9vdEluZGV4ID0gYmluZGluZ1Jvb3RJbmRleDtcbiAgICBzZXRDdXJyZW50RGlyZWN0aXZlSW5kZXgoY3VycmVudERpcmVjdGl2ZUluZGV4KTtcbn1cbi8qKlxuICogV2hlbiBob3N0IGJpbmRpbmcgaXMgZXhlY3V0aW5nIHRoaXMgcG9pbnRzIHRvIHRoZSBkaXJlY3RpdmUgaW5kZXguXG4gKiBgVFZpZXcuZGF0YVtnZXRDdXJyZW50RGlyZWN0aXZlSW5kZXgoKV1gIGlzIGBEaXJlY3RpdmVEZWZgXG4gKiBgTFZpZXdbZ2V0Q3VycmVudERpcmVjdGl2ZUluZGV4KCldYCBpcyBkaXJlY3RpdmUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldEN1cnJlbnREaXJlY3RpdmVJbmRleCgpIHtcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUuY3VycmVudERpcmVjdGl2ZUluZGV4O1xufVxuLyoqXG4gKiBTZXRzIGFuIGluZGV4IG9mIGEgZGlyZWN0aXZlIHdob3NlIGBob3N0QmluZGluZ3NgIGFyZSBiZWluZyBwcm9jZXNzZWQuXG4gKlxuICogQHBhcmFtIGN1cnJlbnREaXJlY3RpdmVJbmRleCBgVERhdGFgIGluZGV4IHdoZXJlIGN1cnJlbnQgZGlyZWN0aXZlIGluc3RhbmNlIGNhbiBiZSBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gc2V0Q3VycmVudERpcmVjdGl2ZUluZGV4KGN1cnJlbnREaXJlY3RpdmVJbmRleCkge1xuICAgIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmN1cnJlbnREaXJlY3RpdmVJbmRleCA9IGN1cnJlbnREaXJlY3RpdmVJbmRleDtcbn1cbi8qKlxuICogUmV0cmlldmUgdGhlIGN1cnJlbnQgYERpcmVjdGl2ZURlZmAgd2hpY2ggaXMgYWN0aXZlIHdoZW4gYGhvc3RCaW5kaW5nc2AgaW5zdHJ1Y3Rpb24gaXMgYmVpbmdcbiAqIGV4ZWN1dGVkLlxuICpcbiAqIEBwYXJhbSB0RGF0YSBDdXJyZW50IGBURGF0YWAgd2hlcmUgdGhlIGBEaXJlY3RpdmVEZWZgIHdpbGwgYmUgbG9va2VkIHVwIGF0LlxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50RGlyZWN0aXZlRGVmKHREYXRhKSB7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGl2ZUluZGV4ID0gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUuY3VycmVudERpcmVjdGl2ZUluZGV4O1xuICAgIHJldHVybiBjdXJyZW50RGlyZWN0aXZlSW5kZXggPT09IC0xID8gbnVsbCA6IHREYXRhW2N1cnJlbnREaXJlY3RpdmVJbmRleF07XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50UXVlcnlJbmRleCgpIHtcbiAgICByZXR1cm4gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUuY3VycmVudFF1ZXJ5SW5kZXg7XG59XG5mdW5jdGlvbiBzZXRDdXJyZW50UXVlcnlJbmRleCh2YWx1ZSkge1xuICAgIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmN1cnJlbnRRdWVyeUluZGV4ID0gdmFsdWU7XG59XG4vKipcbiAqIFJldHVybnMgYSBgVE5vZGVgIG9mIHRoZSBsb2NhdGlvbiB3aGVyZSB0aGUgY3VycmVudCBgTFZpZXdgIGlzIGRlY2xhcmVkIGF0LlxuICpcbiAqIEBwYXJhbSBsVmlldyBhbiBgTFZpZXdgIHRoYXQgd2Ugd2FudCB0byBmaW5kIHBhcmVudCBgVE5vZGVgIGZvci5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25UTm9kZShsVmlldykge1xuICAgIGNvbnN0IHRWaWV3ID0gbFZpZXdbVFZJRVddO1xuICAgIC8vIFJldHVybiB0aGUgZGVjbGFyYXRpb24gcGFyZW50IGZvciBlbWJlZGRlZCB2aWV3c1xuICAgIGlmICh0Vmlldy50eXBlID09PSAyIC8qIEVtYmVkZGVkICovKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHRWaWV3LmRlY2xUTm9kZSwgJ0VtYmVkZGVkIFROb2RlcyBzaG91bGQgaGF2ZSBkZWNsYXJhdGlvbiBwYXJlbnRzLicpO1xuICAgICAgICByZXR1cm4gdFZpZXcuZGVjbFROb2RlO1xuICAgIH1cbiAgICAvLyBDb21wb25lbnRzIGRvbid0IGhhdmUgYFRWaWV3LmRlY2xUTm9kZWAgYmVjYXVzZSBlYWNoIGluc3RhbmNlIG9mIGNvbXBvbmVudCBjb3VsZCBiZVxuICAgIC8vIGluc2VydGVkIGluIGRpZmZlcmVudCBsb2NhdGlvbiwgaGVuY2UgYFRWaWV3LmRlY2xUTm9kZWAgaXMgbWVhbmluZ2xlc3MuXG4gICAgLy8gRmFsbGluZyBiYWNrIHRvIGBUX0hPU1RgIGluIGNhc2Ugd2UgY3Jvc3MgY29tcG9uZW50IGJvdW5kYXJ5LlxuICAgIGlmICh0Vmlldy50eXBlID09PSAxIC8qIENvbXBvbmVudCAqLykge1xuICAgICAgICByZXR1cm4gbFZpZXdbVF9IT1NUXTtcbiAgICB9XG4gICAgLy8gUmVtYWluaW5nIFROb2RlIHR5cGUgaXMgYFRWaWV3VHlwZS5Sb290YCB3aGljaCBkb2Vzbid0IGhhdmUgYSBwYXJlbnQgVE5vZGUuXG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFRoaXMgaXMgYSBsaWdodCB3ZWlnaHQgdmVyc2lvbiBvZiB0aGUgYGVudGVyVmlld2Agd2hpY2ggaXMgbmVlZGVkIGJ5IHRoZSBESSBzeXN0ZW0uXG4gKlxuICogQHBhcmFtIGxWaWV3IGBMVmlld2AgbG9jYXRpb24gb2YgdGhlIERJIGNvbnRleHQuXG4gKiBAcGFyYW0gdE5vZGUgYFROb2RlYCBmb3IgREkgY29udGV4dFxuICogQHBhcmFtIGZsYWdzIERJIGNvbnRleHQgZmxhZ3MuIGlmIGBTa2lwU2VsZmAgZmxhZyBpcyBzZXQgdGhhbiB3ZSB3YWxrIHVwIHRoZSBkZWNsYXJhdGlvblxuICogICAgIHRyZWUgZnJvbSBgdE5vZGVgICB1bnRpbCB3ZSBmaW5kIHBhcmVudCBkZWNsYXJlZCBgVEVsZW1lbnROb2RlYC5cbiAqIEByZXR1cm5zIGB0cnVlYCBpZiB3ZSBoYXZlIHN1Y2Nlc3NmdWxseSBlbnRlcmVkIERJIGFzc29jaWF0ZWQgd2l0aCBgdE5vZGVgIChvciB3aXRoIGRlY2xhcmVkXG4gKiAgICAgYFROb2RlYCBpZiBgZmxhZ3NgIGhhcyAgYFNraXBTZWxmYCkuIEZhaWxpbmcgdG8gZW50ZXIgREkgaW1wbGllcyB0aGF0IG5vIGFzc29jaWF0ZWRcbiAqICAgICBgTm9kZUluamVjdG9yYCBjYW4gYmUgZm91bmQgYW5kIHdlIHNob3VsZCBpbnN0ZWFkIHVzZSBgTW9kdWxlSW5qZWN0b3JgLlxuICogICAgIC0gSWYgYHRydWVgIHRoYW4gdGhpcyBjYWxsIG11c3QgYmUgZmFsbG93ZWQgYnkgYGxlYXZlRElgXG4gKiAgICAgLSBJZiBgZmFsc2VgIHRoYW4gdGhpcyBjYWxsIGZhaWxlZCBhbmQgd2Ugc2hvdWxkIE5PVCBjYWxsIGBsZWF2ZURJYFxuICovXG5mdW5jdGlvbiBlbnRlckRJKGxWaWV3LCB0Tm9kZSwgZmxhZ3MpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TFZpZXdPclVuZGVmaW5lZChsVmlldyk7XG4gICAgaWYgKGZsYWdzICYgSW5qZWN0RmxhZ3MuU2tpcFNlbGYpIHtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlRm9yVFZpZXcodE5vZGUsIGxWaWV3W1RWSUVXXSk7XG4gICAgICAgIGxldCBwYXJlbnRUTm9kZSA9IHROb2RlO1xuICAgICAgICBsZXQgcGFyZW50TFZpZXcgPSBsVmlldztcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHBhcmVudFROb2RlLCAnUGFyZW50IFROb2RlIHNob3VsZCBiZSBkZWZpbmVkJyk7XG4gICAgICAgICAgICBwYXJlbnRUTm9kZSA9IHBhcmVudFROb2RlLnBhcmVudDtcbiAgICAgICAgICAgIGlmIChwYXJlbnRUTm9kZSA9PT0gbnVsbCAmJiAhKGZsYWdzICYgSW5qZWN0RmxhZ3MuSG9zdCkpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRUTm9kZSA9IGdldERlY2xhcmF0aW9uVE5vZGUocGFyZW50TFZpZXcpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRUTm9kZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgLy8gSW4gdGhpcyBjYXNlLCBhIHBhcmVudCBleGlzdHMgYW5kIGlzIGRlZmluaXRlbHkgYW4gZWxlbWVudC4gU28gaXQgd2lsbCBkZWZpbml0ZWx5XG4gICAgICAgICAgICAgICAgLy8gaGF2ZSBhbiBleGlzdGluZyBsVmlldyBhcyB0aGUgZGVjbGFyYXRpb24gdmlldywgd2hpY2ggaXMgd2h5IHdlIGNhbiBhc3N1bWUgaXQncyBkZWZpbmVkLlxuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHBhcmVudExWaWV3LCAnUGFyZW50IExWaWV3IHNob3VsZCBiZSBkZWZpbmVkJyk7XG4gICAgICAgICAgICAgICAgcGFyZW50TFZpZXcgPSBwYXJlbnRMVmlld1tERUNMQVJBVElPTl9WSUVXXTtcbiAgICAgICAgICAgICAgICAvLyBJbiBJdnkgdGhlcmUgYXJlIENvbW1lbnQgbm9kZXMgdGhhdCBjb3JyZXNwb25kIHRvIG5nSWYgYW5kIE5nRm9yIGVtYmVkZGVkIGRpcmVjdGl2ZXNcbiAgICAgICAgICAgICAgICAvLyBXZSB3YW50IHRvIHNraXAgdGhvc2UgYW5kIGxvb2sgb25seSBhdCBFbGVtZW50cyBhbmQgRWxlbWVudENvbnRhaW5lcnMgdG8gZW5zdXJlXG4gICAgICAgICAgICAgICAgLy8gd2UncmUgbG9va2luZyBhdCB0cnVlIHBhcmVudCBub2RlcywgYW5kIG5vdCBjb250ZW50IG9yIG90aGVyIHR5cGVzLlxuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRUTm9kZS50eXBlICYgKDIgLyogRWxlbWVudCAqLyB8IDggLyogRWxlbWVudENvbnRhaW5lciAqLykpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudFROb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBmYWlsZWQgdG8gZmluZCBhIHBhcmVudCBUTm9kZSB0aGlzIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIHVzZSBtb2R1bGUgaW5qZWN0b3IuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0Tm9kZSA9IHBhcmVudFROb2RlO1xuICAgICAgICAgICAgbFZpZXcgPSBwYXJlbnRMVmlldztcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0VE5vZGVGb3JMVmlldyh0Tm9kZSwgbFZpZXcpO1xuICAgIGNvbnN0IGxGcmFtZSA9IGluc3RydWN0aW9uU3RhdGUubEZyYW1lID0gYWxsb2NMRnJhbWUoKTtcbiAgICBsRnJhbWUuY3VycmVudFROb2RlID0gdE5vZGU7XG4gICAgbEZyYW1lLmxWaWV3ID0gbFZpZXc7XG4gICAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIFN3YXAgdGhlIGN1cnJlbnQgbFZpZXcgd2l0aCBhIG5ldyBsVmlldy5cbiAqXG4gKiBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucyB3ZSBzdG9yZSB0aGUgbFZpZXcgaW4gdGhlIHRvcCBsZXZlbCBvZiB0aGUgbW9kdWxlLlxuICogVGhpcyB3YXkgd2UgbWluaW1pemUgdGhlIG51bWJlciBvZiBwcm9wZXJ0aWVzIHRvIHJlYWQuIFdoZW5ldmVyIGEgbmV3IHZpZXdcbiAqIGlzIGVudGVyZWQgd2UgaGF2ZSB0byBzdG9yZSB0aGUgbFZpZXcgZm9yIGxhdGVyLCBhbmQgd2hlbiB0aGUgdmlldyBpc1xuICogZXhpdGVkIHRoZSBzdGF0ZSBoYXMgdG8gYmUgcmVzdG9yZWRcbiAqXG4gKiBAcGFyYW0gbmV3VmlldyBOZXcgbFZpZXcgdG8gYmVjb21lIGFjdGl2ZVxuICogQHJldHVybnMgdGhlIHByZXZpb3VzbHkgYWN0aXZlIGxWaWV3O1xuICovXG5mdW5jdGlvbiBlbnRlclZpZXcobmV3Vmlldykge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnROb3RFcXVhbChuZXdWaWV3WzBdLCBuZXdWaWV3WzFdLCAnPz8/PycpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRMVmlld09yVW5kZWZpbmVkKG5ld1ZpZXcpO1xuICAgIGNvbnN0IG5ld0xGcmFtZSA9IGFsbG9jTEZyYW1lKCk7XG4gICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICBhc3NlcnRFcXVhbChuZXdMRnJhbWUuaXNQYXJlbnQsIHRydWUsICdFeHBlY3RlZCBjbGVhbiBMRnJhbWUnKTtcbiAgICAgICAgYXNzZXJ0RXF1YWwobmV3TEZyYW1lLmxWaWV3LCBudWxsLCAnRXhwZWN0ZWQgY2xlYW4gTEZyYW1lJyk7XG4gICAgICAgIGFzc2VydEVxdWFsKG5ld0xGcmFtZS50VmlldywgbnVsbCwgJ0V4cGVjdGVkIGNsZWFuIExGcmFtZScpO1xuICAgICAgICBhc3NlcnRFcXVhbChuZXdMRnJhbWUuc2VsZWN0ZWRJbmRleCwgLTEsICdFeHBlY3RlZCBjbGVhbiBMRnJhbWUnKTtcbiAgICAgICAgYXNzZXJ0RXF1YWwobmV3TEZyYW1lLmVsZW1lbnREZXB0aENvdW50LCAwLCAnRXhwZWN0ZWQgY2xlYW4gTEZyYW1lJyk7XG4gICAgICAgIGFzc2VydEVxdWFsKG5ld0xGcmFtZS5jdXJyZW50RGlyZWN0aXZlSW5kZXgsIC0xLCAnRXhwZWN0ZWQgY2xlYW4gTEZyYW1lJyk7XG4gICAgICAgIGFzc2VydEVxdWFsKG5ld0xGcmFtZS5jdXJyZW50TmFtZXNwYWNlLCBudWxsLCAnRXhwZWN0ZWQgY2xlYW4gTEZyYW1lJyk7XG4gICAgICAgIGFzc2VydEVxdWFsKG5ld0xGcmFtZS5iaW5kaW5nUm9vdEluZGV4LCAtMSwgJ0V4cGVjdGVkIGNsZWFuIExGcmFtZScpO1xuICAgICAgICBhc3NlcnRFcXVhbChuZXdMRnJhbWUuY3VycmVudFF1ZXJ5SW5kZXgsIDAsICdFeHBlY3RlZCBjbGVhbiBMRnJhbWUnKTtcbiAgICB9XG4gICAgY29uc3QgdFZpZXcgPSBuZXdWaWV3W1RWSUVXXTtcbiAgICBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZSA9IG5ld0xGcmFtZTtcbiAgICBuZ0Rldk1vZGUgJiYgdFZpZXcuZmlyc3RDaGlsZCAmJiBhc3NlcnRUTm9kZUZvclRWaWV3KHRWaWV3LmZpcnN0Q2hpbGQsIHRWaWV3KTtcbiAgICBuZXdMRnJhbWUuY3VycmVudFROb2RlID0gdFZpZXcuZmlyc3RDaGlsZDtcbiAgICBuZXdMRnJhbWUubFZpZXcgPSBuZXdWaWV3O1xuICAgIG5ld0xGcmFtZS50VmlldyA9IHRWaWV3O1xuICAgIG5ld0xGcmFtZS5jb250ZXh0TFZpZXcgPSBuZXdWaWV3O1xuICAgIG5ld0xGcmFtZS5iaW5kaW5nSW5kZXggPSB0Vmlldy5iaW5kaW5nU3RhcnRJbmRleDtcbiAgICBuZXdMRnJhbWUuaW5JMThuID0gZmFsc2U7XG59XG4vKipcbiAqIEFsbG9jYXRlcyBuZXh0IGZyZWUgTEZyYW1lLiBUaGlzIGZ1bmN0aW9uIHRyaWVzIHRvIHJldXNlIHRoZSBgTEZyYW1lYHMgdG8gbG93ZXIgbWVtb3J5IHByZXNzdXJlLlxuICovXG5mdW5jdGlvbiBhbGxvY0xGcmFtZSgpIHtcbiAgICBjb25zdCBjdXJyZW50TEZyYW1lID0gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWU7XG4gICAgY29uc3QgY2hpbGRMRnJhbWUgPSBjdXJyZW50TEZyYW1lID09PSBudWxsID8gbnVsbCA6IGN1cnJlbnRMRnJhbWUuY2hpbGQ7XG4gICAgY29uc3QgbmV3TEZyYW1lID0gY2hpbGRMRnJhbWUgPT09IG51bGwgPyBjcmVhdGVMRnJhbWUoY3VycmVudExGcmFtZSkgOiBjaGlsZExGcmFtZTtcbiAgICByZXR1cm4gbmV3TEZyYW1lO1xufVxuZnVuY3Rpb24gY3JlYXRlTEZyYW1lKHBhcmVudCkge1xuICAgIGNvbnN0IGxGcmFtZSA9IHtcbiAgICAgICAgY3VycmVudFROb2RlOiBudWxsLFxuICAgICAgICBpc1BhcmVudDogdHJ1ZSxcbiAgICAgICAgbFZpZXc6IG51bGwsXG4gICAgICAgIHRWaWV3OiBudWxsLFxuICAgICAgICBzZWxlY3RlZEluZGV4OiAtMSxcbiAgICAgICAgY29udGV4dExWaWV3OiBudWxsLFxuICAgICAgICBlbGVtZW50RGVwdGhDb3VudDogMCxcbiAgICAgICAgY3VycmVudE5hbWVzcGFjZTogbnVsbCxcbiAgICAgICAgY3VycmVudERpcmVjdGl2ZUluZGV4OiAtMSxcbiAgICAgICAgYmluZGluZ1Jvb3RJbmRleDogLTEsXG4gICAgICAgIGJpbmRpbmdJbmRleDogLTEsXG4gICAgICAgIGN1cnJlbnRRdWVyeUluZGV4OiAwLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgY2hpbGQ6IG51bGwsXG4gICAgICAgIGluSTE4bjogZmFsc2UsXG4gICAgfTtcbiAgICBwYXJlbnQgIT09IG51bGwgJiYgKHBhcmVudC5jaGlsZCA9IGxGcmFtZSk7IC8vIGxpbmsgdGhlIG5ldyBMRnJhbWUgZm9yIHJldXNlLlxuICAgIHJldHVybiBsRnJhbWU7XG59XG4vKipcbiAqIEEgbGlnaHR3ZWlnaHQgdmVyc2lvbiBvZiBsZWF2ZSB3aGljaCBpcyB1c2VkIHdpdGggREkuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBvbmx5IHJlc2V0cyBgY3VycmVudFROb2RlYCBhbmQgYExWaWV3YCBhcyB0aG9zZSBhcmUgdGhlIG9ubHkgcHJvcGVydGllc1xuICogdXNlZCB3aXRoIERJIChgZW50ZXJESSgpYCkuXG4gKlxuICogTk9URTogVGhpcyBmdW5jdGlvbiBpcyByZWV4cG9ydGVkIGFzIGBsZWF2ZURJYC4gSG93ZXZlciBgbGVhdmVESWAgaGFzIHJldHVybiB0eXBlIG9mIGB2b2lkYCB3aGVyZVxuICogYXMgYGxlYXZlVmlld0xpZ2h0YCBoYXMgYExGcmFtZWAuIFRoaXMgaXMgc28gdGhhdCBgbGVhdmVWaWV3TGlnaHRgIGNhbiBiZSB1c2VkIGluIGBsZWF2ZVZpZXdgLlxuICovXG5mdW5jdGlvbiBsZWF2ZVZpZXdMaWdodCgpIHtcbiAgICBjb25zdCBvbGRMRnJhbWUgPSBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZTtcbiAgICBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZSA9IG9sZExGcmFtZS5wYXJlbnQ7XG4gICAgb2xkTEZyYW1lLmN1cnJlbnRUTm9kZSA9IG51bGw7XG4gICAgb2xkTEZyYW1lLmxWaWV3ID0gbnVsbDtcbiAgICByZXR1cm4gb2xkTEZyYW1lO1xufVxuLyoqXG4gKiBUaGlzIGlzIGEgbGlnaHR3ZWlnaHQgdmVyc2lvbiBvZiB0aGUgYGxlYXZlVmlld2Agd2hpY2ggaXMgbmVlZGVkIGJ5IHRoZSBESSBzeXN0ZW0uXG4gKlxuICogTk9URTogdGhpcyBmdW5jdGlvbiBpcyBhbiBhbGlhcyBzbyB0aGF0IHdlIGNhbiBjaGFuZ2UgdGhlIHR5cGUgb2YgdGhlIGZ1bmN0aW9uIHRvIGhhdmUgYHZvaWRgXG4gKiByZXR1cm4gdHlwZS5cbiAqL1xuY29uc3QgbGVhdmVESSA9IGxlYXZlVmlld0xpZ2h0O1xuLyoqXG4gKiBMZWF2ZSB0aGUgY3VycmVudCBgTFZpZXdgXG4gKlxuICogVGhpcyBwb3BzIHRoZSBgTEZyYW1lYCB3aXRoIHRoZSBhc3NvY2lhdGVkIGBMVmlld2AgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogSU1QT1JUQU5UOiBXZSBtdXN0IHplcm8gb3V0IHRoZSBgTEZyYW1lYCB2YWx1ZXMgaGVyZSBvdGhlcndpc2UgdGhleSB3aWxsIGJlIHJldGFpbmVkLiBUaGlzIGlzXG4gKiBiZWNhdXNlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zIHdlIGRvbid0IHJlbGVhc2UgYExGcmFtZWAgYnV0IHJhdGhlciBrZWVwIGl0IGZvciBuZXh0IHVzZS5cbiAqL1xuZnVuY3Rpb24gbGVhdmVWaWV3KCkge1xuICAgIGNvbnN0IG9sZExGcmFtZSA9IGxlYXZlVmlld0xpZ2h0KCk7XG4gICAgb2xkTEZyYW1lLmlzUGFyZW50ID0gdHJ1ZTtcbiAgICBvbGRMRnJhbWUudFZpZXcgPSBudWxsO1xuICAgIG9sZExGcmFtZS5zZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgb2xkTEZyYW1lLmNvbnRleHRMVmlldyA9IG51bGw7XG4gICAgb2xkTEZyYW1lLmVsZW1lbnREZXB0aENvdW50ID0gMDtcbiAgICBvbGRMRnJhbWUuY3VycmVudERpcmVjdGl2ZUluZGV4ID0gLTE7XG4gICAgb2xkTEZyYW1lLmN1cnJlbnROYW1lc3BhY2UgPSBudWxsO1xuICAgIG9sZExGcmFtZS5iaW5kaW5nUm9vdEluZGV4ID0gLTE7XG4gICAgb2xkTEZyYW1lLmJpbmRpbmdJbmRleCA9IC0xO1xuICAgIG9sZExGcmFtZS5jdXJyZW50UXVlcnlJbmRleCA9IDA7XG59XG5mdW5jdGlvbiBuZXh0Q29udGV4dEltcGwobGV2ZWwpIHtcbiAgICBjb25zdCBjb250ZXh0TFZpZXcgPSBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5jb250ZXh0TFZpZXcgPVxuICAgICAgICB3YWxrVXBWaWV3cyhsZXZlbCwgaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUuY29udGV4dExWaWV3KTtcbiAgICByZXR1cm4gY29udGV4dExWaWV3W0NPTlRFWFRdO1xufVxuZnVuY3Rpb24gd2Fsa1VwVmlld3MobmVzdGluZ0xldmVsLCBjdXJyZW50Vmlldykge1xuICAgIHdoaWxlIChuZXN0aW5nTGV2ZWwgPiAwKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgYXNzZXJ0RGVmaW5lZChjdXJyZW50Vmlld1tERUNMQVJBVElPTl9WSUVXXSwgJ0RlY2xhcmF0aW9uIHZpZXcgc2hvdWxkIGJlIGRlZmluZWQgaWYgbmVzdGluZyBsZXZlbCBpcyBncmVhdGVyIHRoYW4gMC4nKTtcbiAgICAgICAgY3VycmVudFZpZXcgPSBjdXJyZW50Vmlld1tERUNMQVJBVElPTl9WSUVXXTtcbiAgICAgICAgbmVzdGluZ0xldmVsLS07XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50Vmlldztcbn1cbi8qKlxuICogR2V0cyB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGVsZW1lbnQgaW5kZXguXG4gKlxuICogVXNlZCB3aXRoIHtAbGluayBwcm9wZXJ0eX0gaW5zdHJ1Y3Rpb24gKGFuZCBtb3JlIGluIHRoZSBmdXR1cmUpIHRvIGlkZW50aWZ5IHRoZSBpbmRleCBpbiB0aGVcbiAqIGN1cnJlbnQgYExWaWV3YCB0byBhY3Qgb24uXG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGVkSW5kZXgoKSB7XG4gICAgcmV0dXJuIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLnNlbGVjdGVkSW5kZXg7XG59XG4vKipcbiAqIFNldHMgdGhlIG1vc3QgcmVjZW50IGluZGV4IHBhc3NlZCB0byB7QGxpbmsgc2VsZWN0fVxuICpcbiAqIFVzZWQgd2l0aCB7QGxpbmsgcHJvcGVydHl9IGluc3RydWN0aW9uIChhbmQgbW9yZSBpbiB0aGUgZnV0dXJlKSB0byBpZGVudGlmeSB0aGUgaW5kZXggaW4gdGhlXG4gKiBjdXJyZW50IGBMVmlld2AgdG8gYWN0IG9uLlxuICpcbiAqIChOb3RlIHRoYXQgaWYgYW4gXCJleGl0IGZ1bmN0aW9uXCIgd2FzIHNldCBlYXJsaWVyICh2aWEgYHNldEVsZW1lbnRFeGl0Rm4oKWApIHRoZW4gdGhhdCB3aWxsIGJlXG4gKiBydW4gaWYgYW5kIHdoZW4gdGhlIHByb3ZpZGVkIGBpbmRleGAgdmFsdWUgaXMgZGlmZmVyZW50IGZyb20gdGhlIGN1cnJlbnQgc2VsZWN0ZWQgaW5kZXggdmFsdWUuKVxuICovXG5mdW5jdGlvbiBzZXRTZWxlY3RlZEluZGV4KGluZGV4KSB7XG4gICAgbmdEZXZNb2RlICYmIGluZGV4ICE9PSAtMSAmJlxuICAgICAgICBhc3NlcnRHcmVhdGVyVGhhbk9yRXF1YWwoaW5kZXgsIEhFQURFUl9PRkZTRVQsICdJbmRleCBtdXN0IGJlIHBhc3QgSEVBREVSX09GRlNFVCAob3IgLTEpLicpO1xuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnRMZXNzVGhhbihpbmRleCwgaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWUubFZpZXcubGVuZ3RoLCAnQ2FuXFwndCBzZXQgaW5kZXggcGFzc2VkIGVuZCBvZiBMVmlldycpO1xuICAgIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbn1cbi8qKlxuICogR2V0cyB0aGUgYHROb2RlYCB0aGF0IHJlcHJlc2VudHMgY3VycmVudGx5IHNlbGVjdGVkIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGVkVE5vZGUoKSB7XG4gICAgY29uc3QgbEZyYW1lID0gaW5zdHJ1Y3Rpb25TdGF0ZS5sRnJhbWU7XG4gICAgcmV0dXJuIGdldFROb2RlKGxGcmFtZS50VmlldywgbEZyYW1lLnNlbGVjdGVkSW5kZXgpO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBuYW1lc3BhY2UgdXNlZCB0byBjcmVhdGUgZWxlbWVudHMgdG8gYCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydgIGluIGdsb2JhbCBzdGF0ZS5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1bmFtZXNwYWNlU1ZHKCkge1xuICAgIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmN1cnJlbnROYW1lc3BhY2UgPSBTVkdfTkFNRVNQQUNFO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBuYW1lc3BhY2UgdXNlZCB0byBjcmVhdGUgZWxlbWVudHMgdG8gYCdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGhNTC8nYCBpbiBnbG9iYWwgc3RhdGUuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtW5hbWVzcGFjZU1hdGhNTCgpIHtcbiAgICBpbnN0cnVjdGlvblN0YXRlLmxGcmFtZS5jdXJyZW50TmFtZXNwYWNlID0gTUFUSF9NTF9OQU1FU1BBQ0U7XG59XG4vKipcbiAqIFNldHMgdGhlIG5hbWVzcGFjZSB1c2VkIHRvIGNyZWF0ZSBlbGVtZW50cyB0byBgbnVsbGAsIHdoaWNoIGZvcmNlcyBlbGVtZW50IGNyZWF0aW9uIHRvIHVzZVxuICogYGNyZWF0ZUVsZW1lbnRgIHJhdGhlciB0aGFuIGBjcmVhdGVFbGVtZW50TlNgLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVuYW1lc3BhY2VIVE1MKCkge1xuICAgIG5hbWVzcGFjZUhUTUxJbnRlcm5hbCgpO1xufVxuLyoqXG4gKiBTZXRzIHRoZSBuYW1lc3BhY2UgdXNlZCB0byBjcmVhdGUgZWxlbWVudHMgdG8gYG51bGxgLCB3aGljaCBmb3JjZXMgZWxlbWVudCBjcmVhdGlvbiB0byB1c2VcbiAqIGBjcmVhdGVFbGVtZW50YCByYXRoZXIgdGhhbiBgY3JlYXRlRWxlbWVudE5TYC5cbiAqL1xuZnVuY3Rpb24gbmFtZXNwYWNlSFRNTEludGVybmFsKCkge1xuICAgIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmN1cnJlbnROYW1lc3BhY2UgPSBudWxsO1xufVxuZnVuY3Rpb24gZ2V0TmFtZXNwYWNlJDEoKSB7XG4gICAgcmV0dXJuIGluc3RydWN0aW9uU3RhdGUubEZyYW1lLmN1cnJlbnROYW1lc3BhY2U7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBZGRzIGFsbCBkaXJlY3RpdmUgbGlmZWN5Y2xlIGhvb2tzIGZyb20gdGhlIGdpdmVuIGBEaXJlY3RpdmVEZWZgIHRvIHRoZSBnaXZlbiBgVFZpZXdgLlxuICpcbiAqIE11c3QgYmUgcnVuICpvbmx5KiBvbiB0aGUgZmlyc3QgdGVtcGxhdGUgcGFzcy5cbiAqXG4gKiBTZXRzIHVwIHRoZSBwcmUtb3JkZXIgaG9va3Mgb24gdGhlIHByb3ZpZGVkIGB0Vmlld2AsXG4gKiBzZWUge0BsaW5rIEhvb2tEYXRhfSBmb3IgZGV0YWlscyBhYm91dCB0aGUgZGF0YSBzdHJ1Y3R1cmUuXG4gKlxuICogQHBhcmFtIGRpcmVjdGl2ZUluZGV4IFRoZSBpbmRleCBvZiB0aGUgZGlyZWN0aXZlIGluIExWaWV3XG4gKiBAcGFyYW0gZGlyZWN0aXZlRGVmIFRoZSBkZWZpbml0aW9uIGNvbnRhaW5pbmcgdGhlIGhvb2tzIHRvIHNldHVwIGluIHRWaWV3XG4gKiBAcGFyYW0gdFZpZXcgVGhlIGN1cnJlbnQgVFZpZXdcbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJQcmVPcmRlckhvb2tzKGRpcmVjdGl2ZUluZGV4LCBkaXJlY3RpdmVEZWYsIHRWaWV3KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEZpcnN0Q3JlYXRlUGFzcyh0Vmlldyk7XG4gICAgY29uc3QgeyBuZ09uQ2hhbmdlcywgbmdPbkluaXQsIG5nRG9DaGVjayB9ID0gZGlyZWN0aXZlRGVmLnR5cGUucHJvdG90eXBlO1xuICAgIGlmIChuZ09uQ2hhbmdlcykge1xuICAgICAgICBjb25zdCB3cmFwcGVkT25DaGFuZ2VzID0gTmdPbkNoYW5nZXNGZWF0dXJlSW1wbChkaXJlY3RpdmVEZWYpO1xuICAgICAgICAodFZpZXcucHJlT3JkZXJIb29rcyB8fCAodFZpZXcucHJlT3JkZXJIb29rcyA9IFtdKSkucHVzaChkaXJlY3RpdmVJbmRleCwgd3JhcHBlZE9uQ2hhbmdlcyk7XG4gICAgICAgICh0Vmlldy5wcmVPcmRlckNoZWNrSG9va3MgfHwgKHRWaWV3LnByZU9yZGVyQ2hlY2tIb29rcyA9IFtdKSlcbiAgICAgICAgICAgIC5wdXNoKGRpcmVjdGl2ZUluZGV4LCB3cmFwcGVkT25DaGFuZ2VzKTtcbiAgICB9XG4gICAgaWYgKG5nT25Jbml0KSB7XG4gICAgICAgICh0Vmlldy5wcmVPcmRlckhvb2tzIHx8ICh0Vmlldy5wcmVPcmRlckhvb2tzID0gW10pKS5wdXNoKDAgLSBkaXJlY3RpdmVJbmRleCwgbmdPbkluaXQpO1xuICAgIH1cbiAgICBpZiAobmdEb0NoZWNrKSB7XG4gICAgICAgICh0Vmlldy5wcmVPcmRlckhvb2tzIHx8ICh0Vmlldy5wcmVPcmRlckhvb2tzID0gW10pKS5wdXNoKGRpcmVjdGl2ZUluZGV4LCBuZ0RvQ2hlY2spO1xuICAgICAgICAodFZpZXcucHJlT3JkZXJDaGVja0hvb2tzIHx8ICh0Vmlldy5wcmVPcmRlckNoZWNrSG9va3MgPSBbXSkpLnB1c2goZGlyZWN0aXZlSW5kZXgsIG5nRG9DaGVjayk7XG4gICAgfVxufVxuLyoqXG4gKlxuICogTG9vcHMgdGhyb3VnaCB0aGUgZGlyZWN0aXZlcyBvbiB0aGUgcHJvdmlkZWQgYHROb2RlYCBhbmQgcXVldWVzIGhvb2tzIHRvIGJlXG4gKiBydW4gdGhhdCBhcmUgbm90IGluaXRpYWxpemF0aW9uIGhvb2tzLlxuICpcbiAqIFNob3VsZCBiZSBleGVjdXRlZCBkdXJpbmcgYGVsZW1lbnRFbmQoKWAgYW5kIHNpbWlsYXIgdG9cbiAqIHByZXNlcnZlIGhvb2sgZXhlY3V0aW9uIG9yZGVyLiBDb250ZW50LCB2aWV3LCBhbmQgZGVzdHJveSBob29rcyBmb3IgcHJvamVjdGVkXG4gKiBjb21wb25lbnRzIGFuZCBkaXJlY3RpdmVzIG11c3QgYmUgY2FsbGVkICpiZWZvcmUqIHRoZWlyIGhvc3RzLlxuICpcbiAqIFNldHMgdXAgdGhlIGNvbnRlbnQsIHZpZXcsIGFuZCBkZXN0cm95IGhvb2tzIG9uIHRoZSBwcm92aWRlZCBgdFZpZXdgLFxuICogc2VlIHtAbGluayBIb29rRGF0YX0gZm9yIGRldGFpbHMgYWJvdXQgdGhlIGRhdGEgc3RydWN0dXJlLlxuICpcbiAqIE5PVEU6IFRoaXMgZG9lcyBub3Qgc2V0IHVwIGBvbkNoYW5nZXNgLCBgb25Jbml0YCBvciBgZG9DaGVja2AsIHRob3NlIGFyZSBzZXQgdXBcbiAqIHNlcGFyYXRlbHkgYXQgYGVsZW1lbnRTdGFydGAuXG4gKlxuICogQHBhcmFtIHRWaWV3IFRoZSBjdXJyZW50IFRWaWV3XG4gKiBAcGFyYW0gdE5vZGUgVGhlIFROb2RlIHdob3NlIGRpcmVjdGl2ZXMgYXJlIHRvIGJlIHNlYXJjaGVkIGZvciBob29rcyB0byBxdWV1ZVxuICovXG5mdW5jdGlvbiByZWdpc3RlclBvc3RPcmRlckhvb2tzKHRWaWV3LCB0Tm9kZSkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRGaXJzdENyZWF0ZVBhc3ModFZpZXcpO1xuICAgIC8vIEl0J3MgbmVjZXNzYXJ5IHRvIGxvb3AgdGhyb3VnaCB0aGUgZGlyZWN0aXZlcyBhdCBlbGVtZW50RW5kKCkgKHJhdGhlciB0aGFuIHByb2Nlc3NpbmcgaW5cbiAgICAvLyBkaXJlY3RpdmVDcmVhdGUpIHNvIHdlIGNhbiBwcmVzZXJ2ZSB0aGUgY3VycmVudCBob29rIG9yZGVyLiBDb250ZW50LCB2aWV3LCBhbmQgZGVzdHJveVxuICAgIC8vIGhvb2tzIGZvciBwcm9qZWN0ZWQgY29tcG9uZW50cyBhbmQgZGlyZWN0aXZlcyBtdXN0IGJlIGNhbGxlZCAqYmVmb3JlKiB0aGVpciBob3N0cy5cbiAgICBmb3IgKGxldCBpID0gdE5vZGUuZGlyZWN0aXZlU3RhcnQsIGVuZCA9IHROb2RlLmRpcmVjdGl2ZUVuZDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZURlZiA9IHRWaWV3LmRhdGFbaV07XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGRpcmVjdGl2ZURlZiwgJ0V4cGVjdGluZyBEaXJlY3RpdmVEZWYnKTtcbiAgICAgICAgY29uc3QgbGlmZWN5Y2xlSG9va3MgPSBkaXJlY3RpdmVEZWYudHlwZS5wcm90b3R5cGU7XG4gICAgICAgIGNvbnN0IHsgbmdBZnRlckNvbnRlbnRJbml0LCBuZ0FmdGVyQ29udGVudENoZWNrZWQsIG5nQWZ0ZXJWaWV3SW5pdCwgbmdBZnRlclZpZXdDaGVja2VkLCBuZ09uRGVzdHJveSB9ID0gbGlmZWN5Y2xlSG9va3M7XG4gICAgICAgIGlmIChuZ0FmdGVyQ29udGVudEluaXQpIHtcbiAgICAgICAgICAgICh0Vmlldy5jb250ZW50SG9va3MgfHwgKHRWaWV3LmNvbnRlbnRIb29rcyA9IFtdKSkucHVzaCgtaSwgbmdBZnRlckNvbnRlbnRJbml0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmdBZnRlckNvbnRlbnRDaGVja2VkKSB7XG4gICAgICAgICAgICAodFZpZXcuY29udGVudEhvb2tzIHx8ICh0Vmlldy5jb250ZW50SG9va3MgPSBbXSkpLnB1c2goaSwgbmdBZnRlckNvbnRlbnRDaGVja2VkKTtcbiAgICAgICAgICAgICh0Vmlldy5jb250ZW50Q2hlY2tIb29rcyB8fCAodFZpZXcuY29udGVudENoZWNrSG9va3MgPSBbXSkpLnB1c2goaSwgbmdBZnRlckNvbnRlbnRDaGVja2VkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmdBZnRlclZpZXdJbml0KSB7XG4gICAgICAgICAgICAodFZpZXcudmlld0hvb2tzIHx8ICh0Vmlldy52aWV3SG9va3MgPSBbXSkpLnB1c2goLWksIG5nQWZ0ZXJWaWV3SW5pdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5nQWZ0ZXJWaWV3Q2hlY2tlZCkge1xuICAgICAgICAgICAgKHRWaWV3LnZpZXdIb29rcyB8fCAodFZpZXcudmlld0hvb2tzID0gW10pKS5wdXNoKGksIG5nQWZ0ZXJWaWV3Q2hlY2tlZCk7XG4gICAgICAgICAgICAodFZpZXcudmlld0NoZWNrSG9va3MgfHwgKHRWaWV3LnZpZXdDaGVja0hvb2tzID0gW10pKS5wdXNoKGksIG5nQWZ0ZXJWaWV3Q2hlY2tlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5nT25EZXN0cm95ICE9IG51bGwpIHtcbiAgICAgICAgICAgICh0Vmlldy5kZXN0cm95SG9va3MgfHwgKHRWaWV3LmRlc3Ryb3lIb29rcyA9IFtdKSkucHVzaChpLCBuZ09uRGVzdHJveSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEV4ZWN1dGluZyBob29rcyByZXF1aXJlcyBjb21wbGV4IGxvZ2ljIGFzIHdlIG5lZWQgdG8gZGVhbCB3aXRoIDIgY29uc3RyYWludHMuXG4gKlxuICogMS4gSW5pdCBob29rcyAobmdPbkluaXQsIG5nQWZ0ZXJDb250ZW50SW5pdCwgbmdBZnRlclZpZXdJbml0KSBtdXN0IGFsbCBiZSBleGVjdXRlZCBvbmNlIGFuZCBvbmx5XG4gKiBvbmNlLCBhY3Jvc3MgbWFueSBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlcy4gVGhpcyBtdXN0IGJlIHRydWUgZXZlbiBpZiBzb21lIGhvb2tzIHRocm93LCBvciBpZlxuICogc29tZSByZWN1cnNpdmVseSB0cmlnZ2VyIGEgY2hhbmdlIGRldGVjdGlvbiBjeWNsZS5cbiAqIFRvIHNvbHZlIHRoYXQsIGl0IGlzIHJlcXVpcmVkIHRvIHRyYWNrIHRoZSBzdGF0ZSBvZiB0aGUgZXhlY3V0aW9uIG9mIHRoZXNlIGluaXQgaG9va3MuXG4gKiBUaGlzIGlzIGRvbmUgYnkgc3RvcmluZyBhbmQgbWFpbnRhaW5pbmcgZmxhZ3MgaW4gdGhlIHZpZXc6IHRoZSB7QGxpbmsgSW5pdFBoYXNlU3RhdGV9LFxuICogYW5kIHRoZSBpbmRleCB3aXRoaW4gdGhhdCBwaGFzZS4gVGhleSBjYW4gYmUgc2VlbiBhcyBhIGN1cnNvciBpbiB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTpcbiAqIFtbb25Jbml0MSwgb25Jbml0Ml0sIFthZnRlckNvbnRlbnRJbml0MV0sIFthZnRlclZpZXdJbml0MSwgYWZ0ZXJWaWV3SW5pdDIsIGFmdGVyVmlld0luaXQzXV1cbiAqIFRoZXkgYXJlIGFyZSBzdG9yZWQgYXMgZmxhZ3MgaW4gTFZpZXdbRkxBR1NdLlxuICpcbiAqIDIuIFByZS1vcmRlciBob29rcyBjYW4gYmUgZXhlY3V0ZWQgaW4gYmF0Y2hlcywgYmVjYXVzZSBvZiB0aGUgc2VsZWN0IGluc3RydWN0aW9uLlxuICogVG8gYmUgYWJsZSB0byBwYXVzZSBhbmQgcmVzdW1lIHRoZWlyIGV4ZWN1dGlvbiwgd2UgYWxzbyBuZWVkIHNvbWUgc3RhdGUgYWJvdXQgdGhlIGhvb2sncyBhcnJheVxuICogdGhhdCBpcyBiZWluZyBwcm9jZXNzZWQ6XG4gKiAtIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBob29rIHRvIGJlIGV4ZWN1dGVkXG4gKiAtIHRoZSBudW1iZXIgb2YgaW5pdCBob29rcyBhbHJlYWR5IGZvdW5kIGluIHRoZSBwcm9jZXNzZWQgcGFydCBvZiB0aGUgIGFycmF5XG4gKiBUaGV5IGFyZSBhcmUgc3RvcmVkIGFzIGZsYWdzIGluIExWaWV3W1BSRU9SREVSX0hPT0tfRkxBR1NdLlxuICovXG4vKipcbiAqIEV4ZWN1dGVzIHByZS1vcmRlciBjaGVjayBob29rcyAoIE9uQ2hhbmdlcywgRG9DaGFuZ2VzKSBnaXZlbiBhIHZpZXcgd2hlcmUgYWxsIHRoZSBpbml0IGhvb2tzIHdlcmVcbiAqIGV4ZWN1dGVkIG9uY2UuIFRoaXMgaXMgYSBsaWdodCB2ZXJzaW9uIG9mIGV4ZWN1dGVJbml0QW5kQ2hlY2tQcmVPcmRlckhvb2tzIHdoZXJlIHdlIGNhbiBza2lwIHJlYWRcbiAqIC8gd3JpdGUgb2YgdGhlIGluaXQtaG9va3MgcmVsYXRlZCBmbGFncy5cbiAqIEBwYXJhbSBsVmlldyBUaGUgTFZpZXcgd2hlcmUgaG9va3MgYXJlIGRlZmluZWRcbiAqIEBwYXJhbSBob29rcyBIb29rcyB0byBiZSBydW5cbiAqIEBwYXJhbSBub2RlSW5kZXggMyBjYXNlcyBkZXBlbmRpbmcgb24gdGhlIHZhbHVlOlxuICogLSB1bmRlZmluZWQ6IGFsbCBob29rcyBmcm9tIHRoZSBhcnJheSBzaG91bGQgYmUgZXhlY3V0ZWQgKHBvc3Qtb3JkZXIgY2FzZSlcbiAqIC0gbnVsbDogZXhlY3V0ZSBob29rcyBvbmx5IGZyb20gdGhlIHNhdmVkIGluZGV4IHVudGlsIHRoZSBlbmQgb2YgdGhlIGFycmF5IChwcmUtb3JkZXIgY2FzZSwgd2hlblxuICogZmx1c2hpbmcgdGhlIHJlbWFpbmluZyBob29rcylcbiAqIC0gbnVtYmVyOiBleGVjdXRlIGhvb2tzIG9ubHkgZnJvbSB0aGUgc2F2ZWQgaW5kZXggdW50aWwgdGhhdCBub2RlIGluZGV4IGV4Y2x1c2l2ZSAocHJlLW9yZGVyXG4gKiBjYXNlLCB3aGVuIGV4ZWN1dGluZyBzZWxlY3QobnVtYmVyKSlcbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZUNoZWNrSG9va3MobFZpZXcsIGhvb2tzLCBub2RlSW5kZXgpIHtcbiAgICBjYWxsSG9va3MobFZpZXcsIGhvb2tzLCAzIC8qIEluaXRQaGFzZUNvbXBsZXRlZCAqLywgbm9kZUluZGV4KTtcbn1cbi8qKlxuICogRXhlY3V0ZXMgcG9zdC1vcmRlciBpbml0IGFuZCBjaGVjayBob29rcyAob25lIG9mIEFmdGVyQ29udGVudEluaXQsIEFmdGVyQ29udGVudENoZWNrZWQsXG4gKiBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkKSBnaXZlbiBhIHZpZXcgd2hlcmUgdGhlcmUgYXJlIHBlbmRpbmcgaW5pdCBob29rcyB0byBiZSBleGVjdXRlZC5cbiAqIEBwYXJhbSBsVmlldyBUaGUgTFZpZXcgd2hlcmUgaG9va3MgYXJlIGRlZmluZWRcbiAqIEBwYXJhbSBob29rcyBIb29rcyB0byBiZSBydW5cbiAqIEBwYXJhbSBpbml0UGhhc2UgQSBwaGFzZSBmb3Igd2hpY2ggaG9va3Mgc2hvdWxkIGJlIHJ1blxuICogQHBhcmFtIG5vZGVJbmRleCAzIGNhc2VzIGRlcGVuZGluZyBvbiB0aGUgdmFsdWU6XG4gKiAtIHVuZGVmaW5lZDogYWxsIGhvb2tzIGZyb20gdGhlIGFycmF5IHNob3VsZCBiZSBleGVjdXRlZCAocG9zdC1vcmRlciBjYXNlKVxuICogLSBudWxsOiBleGVjdXRlIGhvb2tzIG9ubHkgZnJvbSB0aGUgc2F2ZWQgaW5kZXggdW50aWwgdGhlIGVuZCBvZiB0aGUgYXJyYXkgKHByZS1vcmRlciBjYXNlLCB3aGVuXG4gKiBmbHVzaGluZyB0aGUgcmVtYWluaW5nIGhvb2tzKVxuICogLSBudW1iZXI6IGV4ZWN1dGUgaG9va3Mgb25seSBmcm9tIHRoZSBzYXZlZCBpbmRleCB1bnRpbCB0aGF0IG5vZGUgaW5kZXggZXhjbHVzaXZlIChwcmUtb3JkZXJcbiAqIGNhc2UsIHdoZW4gZXhlY3V0aW5nIHNlbGVjdChudW1iZXIpKVxuICovXG5mdW5jdGlvbiBleGVjdXRlSW5pdEFuZENoZWNrSG9va3MobFZpZXcsIGhvb2tzLCBpbml0UGhhc2UsIG5vZGVJbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnROb3RFcXVhbChpbml0UGhhc2UsIDMgLyogSW5pdFBoYXNlQ29tcGxldGVkICovLCAnSW5pdCBwcmUtb3JkZXIgaG9va3Mgc2hvdWxkIG5vdCBiZSBjYWxsZWQgbW9yZSB0aGFuIG9uY2UnKTtcbiAgICBpZiAoKGxWaWV3W0ZMQUdTXSAmIDMgLyogSW5pdFBoYXNlU3RhdGVNYXNrICovKSA9PT0gaW5pdFBoYXNlKSB7XG4gICAgICAgIGNhbGxIb29rcyhsVmlldywgaG9va3MsIGluaXRQaGFzZSwgbm9kZUluZGV4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbmNyZW1lbnRJbml0UGhhc2VGbGFncyhsVmlldywgaW5pdFBoYXNlKSB7XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydE5vdEVxdWFsKGluaXRQaGFzZSwgMyAvKiBJbml0UGhhc2VDb21wbGV0ZWQgKi8sICdJbml0IGhvb2tzIHBoYXNlIHNob3VsZCBub3QgYmUgaW5jcmVtZW50ZWQgYWZ0ZXIgYWxsIGluaXQgaG9va3MgaGF2ZSBiZWVuIHJ1bi4nKTtcbiAgICBsZXQgZmxhZ3MgPSBsVmlld1tGTEFHU107XG4gICAgaWYgKChmbGFncyAmIDMgLyogSW5pdFBoYXNlU3RhdGVNYXNrICovKSA9PT0gaW5pdFBoYXNlKSB7XG4gICAgICAgIGZsYWdzICY9IDIwNDcgLyogSW5kZXhXaXRoaW5Jbml0UGhhc2VSZXNldCAqLztcbiAgICAgICAgZmxhZ3MgKz0gMSAvKiBJbml0UGhhc2VTdGF0ZUluY3JlbWVudGVyICovO1xuICAgICAgICBsVmlld1tGTEFHU10gPSBmbGFncztcbiAgICB9XG59XG4vKipcbiAqIENhbGxzIGxpZmVjeWNsZSBob29rcyB3aXRoIHRoZWlyIGNvbnRleHRzLCBza2lwcGluZyBpbml0IGhvb2tzIGlmIGl0J3Mgbm90XG4gKiB0aGUgZmlyc3QgTFZpZXcgcGFzc1xuICpcbiAqIEBwYXJhbSBjdXJyZW50VmlldyBUaGUgY3VycmVudCB2aWV3XG4gKiBAcGFyYW0gYXJyIFRoZSBhcnJheSBpbiB3aGljaCB0aGUgaG9va3MgYXJlIGZvdW5kXG4gKiBAcGFyYW0gaW5pdFBoYXNlU3RhdGUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGluaXQgcGhhc2VcbiAqIEBwYXJhbSBjdXJyZW50Tm9kZUluZGV4IDMgY2FzZXMgZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZTpcbiAqIC0gdW5kZWZpbmVkOiBhbGwgaG9va3MgZnJvbSB0aGUgYXJyYXkgc2hvdWxkIGJlIGV4ZWN1dGVkIChwb3N0LW9yZGVyIGNhc2UpXG4gKiAtIG51bGw6IGV4ZWN1dGUgaG9va3Mgb25seSBmcm9tIHRoZSBzYXZlZCBpbmRleCB1bnRpbCB0aGUgZW5kIG9mIHRoZSBhcnJheSAocHJlLW9yZGVyIGNhc2UsIHdoZW5cbiAqIGZsdXNoaW5nIHRoZSByZW1haW5pbmcgaG9va3MpXG4gKiAtIG51bWJlcjogZXhlY3V0ZSBob29rcyBvbmx5IGZyb20gdGhlIHNhdmVkIGluZGV4IHVudGlsIHRoYXQgbm9kZSBpbmRleCBleGNsdXNpdmUgKHByZS1vcmRlclxuICogY2FzZSwgd2hlbiBleGVjdXRpbmcgc2VsZWN0KG51bWJlcikpXG4gKi9cbmZ1bmN0aW9uIGNhbGxIb29rcyhjdXJyZW50VmlldywgYXJyLCBpbml0UGhhc2UsIGN1cnJlbnROb2RlSW5kZXgpIHtcbiAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgYXNzZXJ0RXF1YWwoaXNJbkNoZWNrTm9DaGFuZ2VzTW9kZSgpLCBmYWxzZSwgJ0hvb2tzIHNob3VsZCBuZXZlciBiZSBydW4gd2hlbiBpbiBjaGVjayBubyBjaGFuZ2VzIG1vZGUuJyk7XG4gICAgY29uc3Qgc3RhcnRJbmRleCA9IGN1cnJlbnROb2RlSW5kZXggIT09IHVuZGVmaW5lZCA/XG4gICAgICAgIChjdXJyZW50Vmlld1tQUkVPUkRFUl9IT09LX0ZMQUdTXSAmIDY1NTM1IC8qIEluZGV4T2ZUaGVOZXh0UHJlT3JkZXJIb29rTWFza01hc2sgKi8pIDpcbiAgICAgICAgMDtcbiAgICBjb25zdCBub2RlSW5kZXhMaW1pdCA9IGN1cnJlbnROb2RlSW5kZXggIT0gbnVsbCA/IGN1cnJlbnROb2RlSW5kZXggOiAtMTtcbiAgICBjb25zdCBtYXggPSBhcnIubGVuZ3RoIC0gMTsgLy8gU3RvcCB0aGUgbG9vcCBhdCBsZW5ndGggLSAxLCBiZWNhdXNlIHdlIGxvb2sgZm9yIHRoZSBob29rIGF0IGkgKyAxXG4gICAgbGV0IGxhc3ROb2RlSW5kZXhGb3VuZCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0SW5kZXg7IGkgPCBtYXg7IGkrKykge1xuICAgICAgICBjb25zdCBob29rID0gYXJyW2kgKyAxXTtcbiAgICAgICAgaWYgKHR5cGVvZiBob29rID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgbGFzdE5vZGVJbmRleEZvdW5kID0gYXJyW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnROb2RlSW5kZXggIT0gbnVsbCAmJiBsYXN0Tm9kZUluZGV4Rm91bmQgPj0gY3VycmVudE5vZGVJbmRleCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgaXNJbml0SG9vayA9IGFycltpXSA8IDA7XG4gICAgICAgICAgICBpZiAoaXNJbml0SG9vaylcbiAgICAgICAgICAgICAgICBjdXJyZW50Vmlld1tQUkVPUkRFUl9IT09LX0ZMQUdTXSArPSA2NTUzNiAvKiBOdW1iZXJPZkluaXRIb29rc0NhbGxlZEluY3JlbWVudGVyICovO1xuICAgICAgICAgICAgaWYgKGxhc3ROb2RlSW5kZXhGb3VuZCA8IG5vZGVJbmRleExpbWl0IHx8IG5vZGVJbmRleExpbWl0ID09IC0xKSB7XG4gICAgICAgICAgICAgICAgY2FsbEhvb2soY3VycmVudFZpZXcsIGluaXRQaGFzZSwgYXJyLCBpKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50Vmlld1tQUkVPUkRFUl9IT09LX0ZMQUdTXSA9XG4gICAgICAgICAgICAgICAgICAgIChjdXJyZW50Vmlld1tQUkVPUkRFUl9IT09LX0ZMQUdTXSAmIDQyOTQ5MDE3NjAgLyogTnVtYmVyT2ZJbml0SG9va3NDYWxsZWRNYXNrICovKSArIGkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogRXhlY3V0ZSBvbmUgaG9vayBhZ2FpbnN0IHRoZSBjdXJyZW50IGBMVmlld2AuXG4gKlxuICogQHBhcmFtIGN1cnJlbnRWaWV3IFRoZSBjdXJyZW50IHZpZXdcbiAqIEBwYXJhbSBpbml0UGhhc2VTdGF0ZSB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgaW5pdCBwaGFzZVxuICogQHBhcmFtIGFyciBUaGUgYXJyYXkgaW4gd2hpY2ggdGhlIGhvb2tzIGFyZSBmb3VuZFxuICogQHBhcmFtIGkgVGhlIGN1cnJlbnQgaW5kZXggd2l0aGluIHRoZSBob29rIGRhdGEgYXJyYXlcbiAqL1xuZnVuY3Rpb24gY2FsbEhvb2soY3VycmVudFZpZXcsIGluaXRQaGFzZSwgYXJyLCBpKSB7XG4gICAgY29uc3QgaXNJbml0SG9vayA9IGFycltpXSA8IDA7XG4gICAgY29uc3QgaG9vayA9IGFycltpICsgMV07XG4gICAgY29uc3QgZGlyZWN0aXZlSW5kZXggPSBpc0luaXRIb29rID8gLWFycltpXSA6IGFycltpXTtcbiAgICBjb25zdCBkaXJlY3RpdmUgPSBjdXJyZW50Vmlld1tkaXJlY3RpdmVJbmRleF07XG4gICAgaWYgKGlzSW5pdEhvb2spIHtcbiAgICAgICAgY29uc3QgaW5kZXhXaXRoaW50SW5pdFBoYXNlID0gY3VycmVudFZpZXdbRkxBR1NdID4+IDExIC8qIEluZGV4V2l0aGluSW5pdFBoYXNlU2hpZnQgKi87XG4gICAgICAgIC8vIFRoZSBpbml0IHBoYXNlIHN0YXRlIG11c3QgYmUgYWx3YXlzIGNoZWNrZWQgaGVyZSBhcyBpdCBtYXkgaGF2ZSBiZWVuIHJlY3Vyc2l2ZWx5IHVwZGF0ZWQuXG4gICAgICAgIGlmIChpbmRleFdpdGhpbnRJbml0UGhhc2UgPFxuICAgICAgICAgICAgKGN1cnJlbnRWaWV3W1BSRU9SREVSX0hPT0tfRkxBR1NdID4+IDE2IC8qIE51bWJlck9mSW5pdEhvb2tzQ2FsbGVkU2hpZnQgKi8pICYmXG4gICAgICAgICAgICAoY3VycmVudFZpZXdbRkxBR1NdICYgMyAvKiBJbml0UGhhc2VTdGF0ZU1hc2sgKi8pID09PSBpbml0UGhhc2UpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWaWV3W0ZMQUdTXSArPSAyMDQ4IC8qIEluZGV4V2l0aGluSW5pdFBoYXNlSW5jcmVtZW50ZXIgKi87XG4gICAgICAgICAgICBwcm9maWxlcig0IC8qIExpZmVjeWNsZUhvb2tTdGFydCAqLywgZGlyZWN0aXZlLCBob29rKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaG9vay5jYWxsKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBwcm9maWxlcig1IC8qIExpZmVjeWNsZUhvb2tFbmQgKi8sIGRpcmVjdGl2ZSwgaG9vayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHByb2ZpbGVyKDQgLyogTGlmZWN5Y2xlSG9va1N0YXJ0ICovLCBkaXJlY3RpdmUsIGhvb2spO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaG9vay5jYWxsKGRpcmVjdGl2ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBwcm9maWxlcig1IC8qIExpZmVjeWNsZUhvb2tFbmQgKi8sIGRpcmVjdGl2ZSwgaG9vayk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgTk9fUEFSRU5UX0lOSkVDVE9SID0gLTE7XG4vKipcbiAqIEVhY2ggaW5qZWN0b3IgaXMgc2F2ZWQgaW4gOSBjb250aWd1b3VzIHNsb3RzIGluIGBMVmlld2AgYW5kIDkgY29udGlndW91cyBzbG90cyBpblxuICogYFRWaWV3LmRhdGFgLiBUaGlzIGFsbG93cyB1cyB0byBzdG9yZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBub2RlJ3MgdG9rZW5zICh3aGljaFxuICogY2FuIGJlIHNoYXJlZCBpbiBgVFZpZXdgKSBhcyB3ZWxsIGFzIHRoZSB0b2tlbnMgb2YgaXRzIGFuY2VzdG9yIG5vZGVzICh3aGljaCBjYW5ub3QgYmVcbiAqIHNoYXJlZCwgc28gdGhleSBsaXZlIGluIGBMVmlld2ApLlxuICpcbiAqIEVhY2ggb2YgdGhlc2Ugc2xvdHMgKGFzaWRlIGZyb20gdGhlIGxhc3Qgc2xvdCkgY29udGFpbnMgYSBibG9vbSBmaWx0ZXIuIFRoaXMgYmxvb20gZmlsdGVyXG4gKiBkZXRlcm1pbmVzIHdoZXRoZXIgYSBkaXJlY3RpdmUgaXMgYXZhaWxhYmxlIG9uIHRoZSBhc3NvY2lhdGVkIG5vZGUgb3Igbm90LiBUaGlzIHByZXZlbnRzIHVzXG4gKiBmcm9tIHNlYXJjaGluZyB0aGUgZGlyZWN0aXZlcyBhcnJheSBhdCB0aGlzIGxldmVsIHVubGVzcyBpdCdzIHByb2JhYmxlIHRoZSBkaXJlY3RpdmUgaXMgaW4gaXQuXG4gKlxuICogU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CbG9vbV9maWx0ZXIgZm9yIG1vcmUgYWJvdXQgYmxvb20gZmlsdGVycy5cbiAqXG4gKiBCZWNhdXNlIGFsbCBpbmplY3RvcnMgaGF2ZSBiZWVuIGZsYXR0ZW5lZCBpbnRvIGBMVmlld2AgYW5kIGBUVmlld0RhdGFgLCB0aGV5IGNhbm5vdCB0eXBlZFxuICogdXNpbmcgaW50ZXJmYWNlcyBhcyB0aGV5IHdlcmUgcHJldmlvdXNseS4gVGhlIHN0YXJ0IGluZGV4IG9mIGVhY2ggYExJbmplY3RvcmAgYW5kIGBUSW5qZWN0b3JgXG4gKiB3aWxsIGRpZmZlciBiYXNlZCBvbiB3aGVyZSBpdCBpcyBmbGF0dGVuZWQgaW50byB0aGUgbWFpbiBhcnJheSwgc28gaXQncyBub3QgcG9zc2libGUgdG8ga25vd1xuICogdGhlIGluZGljZXMgYWhlYWQgb2YgdGltZSBhbmQgc2F2ZSB0aGVpciB0eXBlcyBoZXJlLiBUaGUgaW50ZXJmYWNlcyBhcmUgc3RpbGwgaW5jbHVkZWQgaGVyZVxuICogZm9yIGRvY3VtZW50YXRpb24gcHVycG9zZXMuXG4gKlxuICogZXhwb3J0IGludGVyZmFjZSBMSW5qZWN0b3IgZXh0ZW5kcyBBcnJheTxhbnk+IHtcbiAqXG4gKiAgICAvLyBDdW11bGF0aXZlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDAtMzEgIChJRHMgYXJlICUgQkxPT01fU0laRSlcbiAqICAgIFswXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIEN1bXVsYXRpdmUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMzItNjNcbiAqICAgIFsxXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIEN1bXVsYXRpdmUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgNjQtOTVcbiAqICAgIFsyXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIEN1bXVsYXRpdmUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgOTYtMTI3XG4gKiAgICBbM106IG51bWJlcjtcbiAqXG4gKiAgICAvLyBDdW11bGF0aXZlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDEyOC0xNTlcbiAqICAgIFs0XTogbnVtYmVyO1xuICpcbiAqICAgIC8vIEN1bXVsYXRpdmUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMTYwIC0gMTkxXG4gKiAgICBbNV06IG51bWJlcjtcbiAqXG4gKiAgICAvLyBDdW11bGF0aXZlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDE5MiAtIDIyM1xuICogICAgWzZdOiBudW1iZXI7XG4gKlxuICogICAgLy8gQ3VtdWxhdGl2ZSBibG9vbSBmb3IgZGlyZWN0aXZlIElEcyAyMjQgLSAyNTVcbiAqICAgIFs3XTogbnVtYmVyO1xuICpcbiAqICAgIC8vIFdlIG5lZWQgdG8gc3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIGluamVjdG9yJ3MgcGFyZW50IHNvIERJIGNhbiBrZWVwIGxvb2tpbmcgdXBcbiAqICAgIC8vIHRoZSBpbmplY3RvciB0cmVlIHVudGlsIGl0IGZpbmRzIHRoZSBkZXBlbmRlbmN5IGl0J3MgbG9va2luZyBmb3IuXG4gKiAgICBbUEFSRU5UX0lOSkVDVE9SXTogbnVtYmVyO1xuICogfVxuICpcbiAqIGV4cG9ydCBpbnRlcmZhY2UgVEluamVjdG9yIGV4dGVuZHMgQXJyYXk8YW55PiB7XG4gKlxuICogICAgLy8gU2hhcmVkIG5vZGUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMC0zMSAgKElEcyBhcmUgJSBCTE9PTV9TSVpFKVxuICogICAgWzBdOiBudW1iZXI7XG4gKlxuICogICAgLy8gU2hhcmVkIG5vZGUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMzItNjNcbiAqICAgIFsxXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIFNoYXJlZCBub2RlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDY0LTk1XG4gKiAgICBbMl06IG51bWJlcjtcbiAqXG4gKiAgICAvLyBTaGFyZWQgbm9kZSBibG9vbSBmb3IgZGlyZWN0aXZlIElEcyA5Ni0xMjdcbiAqICAgIFszXTogbnVtYmVyO1xuICpcbiAqICAgIC8vIFNoYXJlZCBub2RlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDEyOC0xNTlcbiAqICAgIFs0XTogbnVtYmVyO1xuICpcbiAqICAgIC8vIFNoYXJlZCBub2RlIGJsb29tIGZvciBkaXJlY3RpdmUgSURzIDE2MCAtIDE5MVxuICogICAgWzVdOiBudW1iZXI7XG4gKlxuICogICAgLy8gU2hhcmVkIG5vZGUgYmxvb20gZm9yIGRpcmVjdGl2ZSBJRHMgMTkyIC0gMjIzXG4gKiAgICBbNl06IG51bWJlcjtcbiAqXG4gKiAgICAvLyBTaGFyZWQgbm9kZSBibG9vbSBmb3IgZGlyZWN0aXZlIElEcyAyMjQgLSAyNTVcbiAqICAgIFs3XTogbnVtYmVyO1xuICpcbiAqICAgIC8vIE5lY2Vzc2FyeSB0byBmaW5kIGRpcmVjdGl2ZSBpbmRpY2VzIGZvciBhIHBhcnRpY3VsYXIgbm9kZS5cbiAqICAgIFtUTk9ERV06IFRFbGVtZW50Tm9kZXxURWxlbWVudENvbnRhaW5lck5vZGV8VENvbnRhaW5lck5vZGU7XG4gKiAgfVxuICovXG4vKipcbiAqIEZhY3RvcnkgZm9yIGNyZWF0aW5nIGluc3RhbmNlcyBvZiBpbmplY3RvcnMgaW4gdGhlIE5vZGVJbmplY3Rvci5cbiAqXG4gKiBUaGlzIGZhY3RvcnkgaXMgY29tcGxpY2F0ZWQgYnkgdGhlIGZhY3QgdGhhdCBpdCBjYW4gcmVzb2x2ZSBgbXVsdGlgIGZhY3RvcmllcyBhcyB3ZWxsLlxuICpcbiAqIE5PVEU6IFNvbWUgb2YgdGhlIGZpZWxkcyBhcmUgb3B0aW9uYWwgd2hpY2ggbWVhbnMgdGhhdCB0aGlzIGNsYXNzIGhhcyB0d28gaGlkZGVuIGNsYXNzZXMuXG4gKiAtIE9uZSB3aXRob3V0IGBtdWx0aWAgc3VwcG9ydCAobW9zdCBjb21tb24pXG4gKiAtIE9uZSB3aXRoIGBtdWx0aWAgdmFsdWVzLCAocmFyZSkuXG4gKlxuICogU2luY2UgVk1zIGNhbiBjYWNoZSB1cCB0byA0IGlubGluZSBoaWRkZW4gY2xhc3NlcyB0aGlzIGlzIE9LLlxuICpcbiAqIC0gU2luZ2xlIGZhY3Rvcnk6IE9ubHkgYHJlc29sdmluZ2AgYW5kIGBmYWN0b3J5YCBpcyBkZWZpbmVkLlxuICogLSBgcHJvdmlkZXJzYCBmYWN0b3J5OiBgY29tcG9uZW50UHJvdmlkZXJzYCBpcyBhIG51bWJlciBhbmQgYGluZGV4ID0gLTFgLlxuICogLSBgdmlld1Byb3ZpZGVyc2AgZmFjdG9yeTogYGNvbXBvbmVudFByb3ZpZGVyc2AgaXMgYSBudW1iZXIgYW5kIGBpbmRleGAgcG9pbnRzIHRvIGBwcm92aWRlcnNgLlxuICovXG5jbGFzcyBOb2RlSW5qZWN0b3JGYWN0b3J5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBGYWN0b3J5IHRvIGludm9rZSBpbiBvcmRlciB0byBjcmVhdGUgYSBuZXcgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZmFjdG9yeSwgXG4gICAgLyoqXG4gICAgICogU2V0IHRvIGB0cnVlYCBpZiB0aGUgdG9rZW4gaXMgZGVjbGFyZWQgaW4gYHZpZXdQcm92aWRlcnNgIChvciBpZiBpdCBpcyBjb21wb25lbnQpLlxuICAgICAqL1xuICAgIGlzVmlld1Byb3ZpZGVyLCBpbmplY3RJbXBsZW1lbnRhdGlvbikge1xuICAgICAgICB0aGlzLmZhY3RvcnkgPSBmYWN0b3J5O1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFya2VyIHNldCB0byB0cnVlIGR1cmluZyBmYWN0b3J5IGludm9jYXRpb24gdG8gc2VlIGlmIHdlIGdldCBpbnRvIHJlY3Vyc2l2ZSBsb29wLlxuICAgICAgICAgKiBSZWN1cnNpdmUgbG9vcCBjYXVzZXMgYW4gZXJyb3IgdG8gYmUgZGlzcGxheWVkLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXNvbHZpbmcgPSBmYWxzZTtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQoZmFjdG9yeSwgJ0ZhY3Rvcnkgbm90IHNwZWNpZmllZCcpO1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RXF1YWwodHlwZW9mIGZhY3RvcnksICdmdW5jdGlvbicsICdFeHBlY3RlZCBmYWN0b3J5IGZ1bmN0aW9uLicpO1xuICAgICAgICB0aGlzLmNhblNlZVZpZXdQcm92aWRlcnMgPSBpc1ZpZXdQcm92aWRlcjtcbiAgICAgICAgdGhpcy5pbmplY3RJbXBsID0gaW5qZWN0SW1wbGVtZW50YXRpb247XG4gICAgfVxufVxuZnVuY3Rpb24gaXNGYWN0b3J5KG9iaikge1xuICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBOb2RlSW5qZWN0b3JGYWN0b3J5O1xufVxuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuY29uc3QgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQkNSA9IDE7XG5cbi8qKlxuICogQ29udmVydHMgYFROb2RlVHlwZWAgaW50byBodW1hbiByZWFkYWJsZSB0ZXh0LlxuICogTWFrZSBzdXJlIHRoaXMgbWF0Y2hlcyB3aXRoIGBUTm9kZVR5cGVgXG4gKi9cbmZ1bmN0aW9uIHRvVE5vZGVUeXBlQXNTdHJpbmcodE5vZGVUeXBlKSB7XG4gICAgbGV0IHRleHQgPSAnJztcbiAgICAodE5vZGVUeXBlICYgMSAvKiBUZXh0ICovKSAmJiAodGV4dCArPSAnfFRleHQnKTtcbiAgICAodE5vZGVUeXBlICYgMiAvKiBFbGVtZW50ICovKSAmJiAodGV4dCArPSAnfEVsZW1lbnQnKTtcbiAgICAodE5vZGVUeXBlICYgNCAvKiBDb250YWluZXIgKi8pICYmICh0ZXh0ICs9ICd8Q29udGFpbmVyJyk7XG4gICAgKHROb2RlVHlwZSAmIDggLyogRWxlbWVudENvbnRhaW5lciAqLykgJiYgKHRleHQgKz0gJ3xFbGVtZW50Q29udGFpbmVyJyk7XG4gICAgKHROb2RlVHlwZSAmIDE2IC8qIFByb2plY3Rpb24gKi8pICYmICh0ZXh0ICs9ICd8UHJvamVjdGlvbicpO1xuICAgICh0Tm9kZVR5cGUgJiAzMiAvKiBJY3UgKi8pICYmICh0ZXh0ICs9ICd8SWN1Q29udGFpbmVyJyk7XG4gICAgKHROb2RlVHlwZSAmIDY0IC8qIFBsYWNlaG9sZGVyICovKSAmJiAodGV4dCArPSAnfFBsYWNlaG9sZGVyJyk7XG4gICAgcmV0dXJuIHRleHQubGVuZ3RoID4gMCA/IHRleHQuc3Vic3RyaW5nKDEpIDogdGV4dDtcbn1cbi8vIE5vdGU6IFRoaXMgaGFjayBpcyBuZWNlc3Nhcnkgc28gd2UgZG9uJ3QgZXJyb25lb3VzbHkgZ2V0IGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuLy8gZmFpbHVyZSBiYXNlZCBvbiB0eXBlcy5cbmNvbnN0IHVudXNlZFZhbHVlRXhwb3J0VG9QbGFjYXRlQWpkJDQgPSAxO1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYFROb2RlYCBoYXMgYSBkaXJlY3RpdmUgd2hpY2ggaGFzIGBASW5wdXQoKWAgZm9yIGBjbGFzc2AgYmluZGluZy5cbiAqXG4gKiBgYGBcbiAqIDxkaXYgbXktZGlyIFtjbGFzc109XCJleHBcIj48L2Rpdj5cbiAqIGBgYFxuICogYW5kXG4gKiBgYGBcbiAqIEBEaXJlY3RpdmUoe1xuICogfSlcbiAqIGNsYXNzIE15RGlyZWN0aXZlIHtcbiAqICAgQElucHV0KClcbiAqICAgY2xhc3M6IHN0cmluZztcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBjYXNlIGl0IGlzIG5lY2Vzc2FyeSB0byB3cml0ZSB0aGUgcmVjb25jaWxlZCBzdHlsaW5nIGluZm9ybWF0aW9uIGludG8gdGhlXG4gKiBkaXJlY3RpdmUncyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gdE5vZGVcbiAqL1xuZnVuY3Rpb24gaGFzQ2xhc3NJbnB1dCh0Tm9kZSkge1xuICAgIHJldHVybiAodE5vZGUuZmxhZ3MgJiAxNiAvKiBoYXNDbGFzc0lucHV0ICovKSAhPT0gMDtcbn1cbi8qKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGBUTm9kZWAgaGFzIGEgZGlyZWN0aXZlIHdoaWNoIGhhcyBgQElucHV0KClgIGZvciBgc3R5bGVgIGJpbmRpbmcuXG4gKlxuICogYGBgXG4gKiA8ZGl2IG15LWRpciBbc3R5bGVdPVwiZXhwXCI+PC9kaXY+XG4gKiBgYGBcbiAqIGFuZFxuICogYGBgXG4gKiBARGlyZWN0aXZlKHtcbiAqIH0pXG4gKiBjbGFzcyBNeURpcmVjdGl2ZSB7XG4gKiAgIEBJbnB1dCgpXG4gKiAgIGNsYXNzOiBzdHJpbmc7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBJbiB0aGUgYWJvdmUgY2FzZSBpdCBpcyBuZWNlc3NhcnkgdG8gd3JpdGUgdGhlIHJlY29uY2lsZWQgc3R5bGluZyBpbmZvcm1hdGlvbiBpbnRvIHRoZVxuICogZGlyZWN0aXZlJ3MgaW5wdXQuXG4gKlxuICogQHBhcmFtIHROb2RlXG4gKi9cbmZ1bmN0aW9uIGhhc1N0eWxlSW5wdXQodE5vZGUpIHtcbiAgICByZXR1cm4gKHROb2RlLmZsYWdzICYgMzIgLyogaGFzU3R5bGVJbnB1dCAqLykgIT09IDA7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VE5vZGVUeXBlKHROb2RlLCBleHBlY3RlZFR5cGVzLCBtZXNzYWdlKSB7XG4gICAgYXNzZXJ0RGVmaW5lZCh0Tm9kZSwgJ3Nob3VsZCBiZSBjYWxsZWQgd2l0aCBhIFROb2RlJyk7XG4gICAgaWYgKCh0Tm9kZS50eXBlICYgZXhwZWN0ZWRUeXBlcykgPT09IDApIHtcbiAgICAgICAgdGhyb3dFcnJvcihtZXNzYWdlIHx8XG4gICAgICAgICAgICBgRXhwZWN0ZWQgWyR7dG9UTm9kZVR5cGVBc1N0cmluZyhleHBlY3RlZFR5cGVzKX1dIGJ1dCBnb3QgJHt0b1ROb2RlVHlwZUFzU3RyaW5nKHROb2RlLnR5cGUpfS5gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NlcnRQdXJlVE5vZGVUeXBlKHR5cGUpIHtcbiAgICBpZiAoISh0eXBlID09PSAyIC8qIEVsZW1lbnQgKi8gfHwgLy9cbiAgICAgICAgdHlwZSA9PT0gMSAvKiBUZXh0ICovIHx8IC8vXG4gICAgICAgIHR5cGUgPT09IDQgLyogQ29udGFpbmVyICovIHx8IC8vXG4gICAgICAgIHR5cGUgPT09IDggLyogRWxlbWVudENvbnRhaW5lciAqLyB8fCAvL1xuICAgICAgICB0eXBlID09PSAzMiAvKiBJY3UgKi8gfHwgLy9cbiAgICAgICAgdHlwZSA9PT0gMTYgLyogUHJvamVjdGlvbiAqLyB8fCAvL1xuICAgICAgICB0eXBlID09PSA2NCAvKiBQbGFjZWhvbGRlciAqLykpIHtcbiAgICAgICAgdGhyb3dFcnJvcihgRXhwZWN0ZWQgVE5vZGVUeXBlIHRvIGhhdmUgb25seSBhIHNpbmdsZSB0eXBlIHNlbGVjdGVkLCBidXQgZ290ICR7dG9UTm9kZVR5cGVBc1N0cmluZyh0eXBlKX0uYCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEFzc2lnbnMgYWxsIGF0dHJpYnV0ZSB2YWx1ZXMgdG8gdGhlIHByb3ZpZGVkIGVsZW1lbnQgdmlhIHRoZSBpbmZlcnJlZCByZW5kZXJlci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgdHdvIGZvcm1zIG9mIGF0dHJpYnV0ZSBlbnRyaWVzOlxuICpcbiAqIGRlZmF1bHQ6IChrZXksIHZhbHVlKTpcbiAqICBhdHRycyA9IFtrZXkxLCB2YWx1ZTEsIGtleTIsIHZhbHVlMl1cbiAqXG4gKiBuYW1lc3BhY2VkOiAoTkFNRVNQQUNFX01BUktFUiwgdXJpLCBuYW1lLCB2YWx1ZSlcbiAqICBhdHRycyA9IFtOQU1FU1BBQ0VfTUFSS0VSLCB1cmksIG5hbWUsIHZhbHVlLCBOQU1FU1BBQ0VfTUFSS0VSLCB1cmksIG5hbWUsIHZhbHVlXVxuICpcbiAqIFRoZSBgYXR0cnNgIGFycmF5IGNhbiBjb250YWluIGEgbWl4IG9mIGJvdGggdGhlIGRlZmF1bHQgYW5kIG5hbWVzcGFjZWQgZW50cmllcy5cbiAqIFRoZSBcImRlZmF1bHRcIiB2YWx1ZXMgYXJlIHNldCB3aXRob3V0IGEgbWFya2VyLCBidXQgaWYgdGhlIGZ1bmN0aW9uIGNvbWVzIGFjcm9zc1xuICogYSBtYXJrZXIgdmFsdWUgdGhlbiBpdCB3aWxsIGF0dGVtcHQgdG8gc2V0IGEgbmFtZXNwYWNlZCB2YWx1ZS4gSWYgdGhlIG1hcmtlciBpc1xuICogbm90IG9mIGEgbmFtZXNwYWNlZCB2YWx1ZSB0aGVuIHRoZSBmdW5jdGlvbiB3aWxsIHF1aXQgYW5kIHJldHVybiB0aGUgaW5kZXggdmFsdWVcbiAqIHdoZXJlIGl0IHN0b3BwZWQgZHVyaW5nIHRoZSBpdGVyYXRpb24gb2YgdGhlIGF0dHJzIGFycmF5LlxuICpcbiAqIFNlZSBbQXR0cmlidXRlTWFya2VyXSB0byB1bmRlcnN0YW5kIHdoYXQgdGhlIG5hbWVzcGFjZSBtYXJrZXIgdmFsdWUgaXMuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgaW5zdHJ1Y3Rpb24gZG9lcyBub3Qgc3VwcG9ydCBhc3NpZ25pbmcgc3R5bGUgYW5kIGNsYXNzIHZhbHVlcyB0b1xuICogYW4gZWxlbWVudC4gU2VlIGBlbGVtZW50U3RhcnRgIGFuZCBgZWxlbWVudEhvc3RBdHRyc2AgdG8gbGVhcm4gaG93IHN0eWxpbmcgdmFsdWVzXG4gKiBhcmUgYXBwbGllZCB0byBhbiBlbGVtZW50LlxuICogQHBhcmFtIHJlbmRlcmVyIFRoZSByZW5kZXJlciB0byBiZSB1c2VkXG4gKiBAcGFyYW0gbmF0aXZlIFRoZSBlbGVtZW50IHRoYXQgdGhlIGF0dHJpYnV0ZXMgd2lsbCBiZSBhc3NpZ25lZCB0b1xuICogQHBhcmFtIGF0dHJzIFRoZSBhdHRyaWJ1dGUgYXJyYXkgb2YgdmFsdWVzIHRoYXQgd2lsbCBiZSBhc3NpZ25lZCB0byB0aGUgZWxlbWVudFxuICogQHJldHVybnMgdGhlIGluZGV4IHZhbHVlIHRoYXQgd2FzIGxhc3QgYWNjZXNzZWQgaW4gdGhlIGF0dHJpYnV0ZXMgYXJyYXlcbiAqL1xuZnVuY3Rpb24gc2V0VXBBdHRyaWJ1dGVzKHJlbmRlcmVyLCBuYXRpdmUsIGF0dHJzKSB7XG4gICAgY29uc3QgaXNQcm9jID0gaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGF0dHJzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJzW2ldO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgLy8gb25seSBuYW1lc3BhY2VzIGFyZSBzdXBwb3J0ZWQuIE90aGVyIHZhbHVlIHR5cGVzIChzdWNoIGFzIHN0eWxlL2NsYXNzXG4gICAgICAgICAgICAvLyBlbnRyaWVzKSBhcmUgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGZ1bmN0aW9uLlxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSAwIC8qIE5hbWVzcGFjZVVSSSAqLykge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2UganVzdCBsYW5kZWQgb24gdGhlIG1hcmtlciB2YWx1ZSAuLi4gdGhlcmVmb3JlXG4gICAgICAgICAgICAvLyB3ZSBzaG91bGQgc2tpcCB0byB0aGUgbmV4dCBlbnRyeVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgY29uc3QgbmFtZXNwYWNlVVJJID0gYXR0cnNbaSsrXTtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gYXR0cnNbaSsrXTtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJWYWwgPSBhdHRyc1tpKytdO1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlclNldEF0dHJpYnV0ZSsrO1xuICAgICAgICAgICAgaXNQcm9jID9cbiAgICAgICAgICAgICAgICByZW5kZXJlci5zZXRBdHRyaWJ1dGUobmF0aXZlLCBhdHRyTmFtZSwgYXR0clZhbCwgbmFtZXNwYWNlVVJJKSA6XG4gICAgICAgICAgICAgICAgbmF0aXZlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZVVSSSwgYXR0ck5hbWUsIGF0dHJWYWwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gYXR0ck5hbWUgaXMgc3RyaW5nO1xuICAgICAgICAgICAgY29uc3QgYXR0ck5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJWYWwgPSBhdHRyc1srK2ldO1xuICAgICAgICAgICAgLy8gU3RhbmRhcmQgYXR0cmlidXRlc1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlclNldEF0dHJpYnV0ZSsrO1xuICAgICAgICAgICAgaWYgKGlzQW5pbWF0aW9uUHJvcChhdHRyTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcm9jKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnNldFByb3BlcnR5KG5hdGl2ZSwgYXR0ck5hbWUsIGF0dHJWYWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlzUHJvYyA/XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnNldEF0dHJpYnV0ZShuYXRpdmUsIGF0dHJOYW1lLCBhdHRyVmFsKSA6XG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJWYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGFub3RoZXIgcGllY2Ugb2YgY29kZSBtYXkgaXRlcmF0ZSBvdmVyIHRoZSBzYW1lIGF0dHJpYnV0ZXMgYXJyYXkuIFRoZXJlZm9yZVxuICAgIC8vIGl0IG1heSBiZSBoZWxwZnVsIHRvIHJldHVybiB0aGUgZXhhY3Qgc3BvdCB3aGVyZSB0aGUgYXR0cmlidXRlcyBhcnJheSBleGl0ZWRcbiAgICAvLyB3aGV0aGVyIGJ5IHJ1bm5pbmcgaW50byBhbiB1bnN1cHBvcnRlZCBtYXJrZXIgb3IgaWYgYWxsIHRoZSBzdGF0aWMgdmFsdWVzIHdlcmVcbiAgICAvLyBpdGVyYXRlZCBvdmVyLlxuICAgIHJldHVybiBpO1xufVxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgbWFya2VyIHRoYXQgaW5kaWNhdGVzIHRoYXQgdGhlIGZvbGxvd2luZ1xuICogYXR0cmlidXRlIHZhbHVlcyBpbiBhIGBUQXR0cmlidXRlc2AgYXJyYXkgYXJlIG9ubHkgdGhlIG5hbWVzIG9mIGF0dHJpYnV0ZXMsXG4gKiBhbmQgbm90IG5hbWUtdmFsdWUgcGFpcnMuXG4gKiBAcGFyYW0gbWFya2VyIFRoZSBhdHRyaWJ1dGUgbWFya2VyIHRvIHRlc3QuXG4gKiBAcmV0dXJucyB0cnVlIGlmIHRoZSBtYXJrZXIgaXMgYSBcIm5hbWUtb25seVwiIG1hcmtlciAoZS5nLiBgQmluZGluZ3NgLCBgVGVtcGxhdGVgIG9yIGBJMThuYCkuXG4gKi9cbmZ1bmN0aW9uIGlzTmFtZU9ubHlBdHRyaWJ1dGVNYXJrZXIobWFya2VyKSB7XG4gICAgcmV0dXJuIG1hcmtlciA9PT0gMyAvKiBCaW5kaW5ncyAqLyB8fCBtYXJrZXIgPT09IDQgLyogVGVtcGxhdGUgKi8gfHxcbiAgICAgICAgbWFya2VyID09PSA2IC8qIEkxOG4gKi87XG59XG5mdW5jdGlvbiBpc0FuaW1hdGlvblByb3AobmFtZSkge1xuICAgIC8vIFBlcmYgbm90ZTogYWNjZXNzaW5nIGNoYXJDb2RlQXQgdG8gY2hlY2sgZm9yIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzdHJpbmcgaXMgZmFzdGVyIGFzXG4gICAgLy8gY29tcGFyZWQgdG8gYWNjZXNzaW5nIGEgY2hhcmFjdGVyIGF0IGluZGV4IDAgKGV4LiBuYW1lWzBdKS4gVGhlIG1haW4gcmVhc29uIGZvciB0aGlzIGlzIHRoYXRcbiAgICAvLyBjaGFyQ29kZUF0IGRvZXNuJ3QgYWxsb2NhdGUgbWVtb3J5IHRvIHJldHVybiBhIHN1YnN0cmluZy5cbiAgICByZXR1cm4gbmFtZS5jaGFyQ29kZUF0KDApID09PSA2NCAvKiBBVF9TSUdOICovO1xufVxuLyoqXG4gKiBNZXJnZXMgYHNyY2AgYFRBdHRyaWJ1dGVzYCBpbnRvIGBkc3RgIGBUQXR0cmlidXRlc2AgcmVtb3ZpbmcgYW55IGR1cGxpY2F0ZXMgaW4gdGhlIHByb2Nlc3MuXG4gKlxuICogVGhpcyBtZXJnZSBmdW5jdGlvbiBrZWVwcyB0aGUgb3JkZXIgb2YgYXR0cnMgc2FtZS5cbiAqXG4gKiBAcGFyYW0gZHN0IExvY2F0aW9uIG9mIHdoZXJlIHRoZSBtZXJnZWQgYFRBdHRyaWJ1dGVzYCBzaG91bGQgZW5kIHVwLlxuICogQHBhcmFtIHNyYyBgVEF0dHJpYnV0ZXNgIHdoaWNoIHNob3VsZCBiZSBhcHBlbmRlZCB0byBgZHN0YFxuICovXG5mdW5jdGlvbiBtZXJnZUhvc3RBdHRycyhkc3QsIHNyYykge1xuICAgIGlmIChzcmMgPT09IG51bGwgfHwgc3JjLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxuICAgIGVsc2UgaWYgKGRzdCA9PT0gbnVsbCB8fCBkc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgc291cmNlLCBidXQgZHN0IGlzIGVtcHR5LCBqdXN0IG1ha2UgYSBjb3B5LlxuICAgICAgICBkc3QgPSBzcmMuc2xpY2UoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxldCBzcmNNYXJrZXIgPSAtMSAvKiBJbXBsaWNpdEF0dHJpYnV0ZXMgKi87XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3JjLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gc3JjW2ldO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgIHNyY01hcmtlciA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoc3JjTWFya2VyID09PSAwIC8qIE5hbWVzcGFjZVVSSSAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYXNlIHdoZXJlIHdlIG5lZWQgdG8gY29uc3VtZSBga2V5MWAsIGBrZXkyYCwgYHZhbHVlYCBpdGVtcy5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc3JjTWFya2VyID09PSAtMSAvKiBJbXBsaWNpdEF0dHJpYnV0ZXMgKi8gfHxcbiAgICAgICAgICAgICAgICAgICAgc3JjTWFya2VyID09PSAyIC8qIFN0eWxlcyAqLykge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYXNlIHdoZXJlIHdlIGhhdmUgdG8gY29uc3VtZSBga2V5MWAgYW5kIGB2YWx1ZWAgb25seS5cbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VIb3N0QXR0cmlidXRlKGRzdCwgc3JjTWFya2VyLCBpdGVtLCBudWxsLCBzcmNbKytpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBDYXNlIHdoZXJlIHdlIGhhdmUgdG8gY29uc3VtZSBga2V5MWAgb25seS5cbiAgICAgICAgICAgICAgICAgICAgbWVyZ2VIb3N0QXR0cmlidXRlKGRzdCwgc3JjTWFya2VyLCBpdGVtLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRzdDtcbn1cbi8qKlxuICogQXBwZW5kIGBrZXlgL2B2YWx1ZWAgdG8gZXhpc3RpbmcgYFRBdHRyaWJ1dGVzYCB0YWtpbmcgcmVnaW9uIG1hcmtlciBhbmQgZHVwbGljYXRlcyBpbnRvIGFjY291bnQuXG4gKlxuICogQHBhcmFtIGRzdCBgVEF0dHJpYnV0ZXNgIHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSBtYXJrZXIgUmVnaW9uIHdoZXJlIHRoZSBga2V5YC9gdmFsdWVgIHNob3VsZCBiZSBhZGRlZC5cbiAqIEBwYXJhbSBrZXkxIEtleSB0byBhZGQgdG8gYFRBdHRyaWJ1dGVzYFxuICogQHBhcmFtIGtleTIgS2V5IHRvIGFkZCB0byBgVEF0dHJpYnV0ZXNgIChpbiBjYXNlIG9mIGBBdHRyaWJ1dGVNYXJrZXIuTmFtZXNwYWNlVVJJYClcbiAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byBhZGQgb3IgdG8gb3ZlcndyaXRlIHRvIGBUQXR0cmlidXRlc2AgT25seSB1c2VkIGlmIGBtYXJrZXJgIGlzIG5vdCBDbGFzcy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb3N0QXR0cmlidXRlKGRzdCwgbWFya2VyLCBrZXkxLCBrZXkyLCB2YWx1ZSkge1xuICAgIGxldCBpID0gMDtcbiAgICAvLyBBc3N1bWUgdGhhdCBuZXcgbWFya2VycyB3aWxsIGJlIGluc2VydGVkIGF0IHRoZSBlbmQuXG4gICAgbGV0IG1hcmtlckluc2VydFBvc2l0aW9uID0gZHN0Lmxlbmd0aDtcbiAgICAvLyBzY2FuIHVudGlsIGNvcnJlY3QgdHlwZS5cbiAgICBpZiAobWFya2VyID09PSAtMSAvKiBJbXBsaWNpdEF0dHJpYnV0ZXMgKi8pIHtcbiAgICAgICAgbWFya2VySW5zZXJ0UG9zaXRpb24gPSAtMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHdoaWxlIChpIDwgZHN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgZHN0VmFsdWUgPSBkc3RbaSsrXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZHN0VmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRzdFZhbHVlID09PSBtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VySW5zZXJ0UG9zaXRpb24gPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGRzdFZhbHVlID4gbWFya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGlzIGFzIHdlIHdhbnQgdGhlIG1hcmtlcnMgdG8gYmUgaW5zZXJ0ZWQgaW4gc3BlY2lmaWMgb3JkZXIuXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlckluc2VydFBvc2l0aW9uID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBzZWFyY2ggdW50aWwgeW91IGZpbmQgcGxhY2Ugb2YgaW5zZXJ0aW9uXG4gICAgd2hpbGUgKGkgPCBkc3QubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBkc3RbaV07XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIC8vIHNpbmNlIGBpYCBzdGFydGVkIGFzIHRoZSBpbmRleCBhZnRlciB0aGUgbWFya2VyLCB3ZSBkaWQgbm90IGZpbmQgaXQgaWYgd2UgYXJlIGF0IHRoZSBuZXh0XG4gICAgICAgICAgICAvLyBtYXJrZXJcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW0gPT09IGtleTEpIHtcbiAgICAgICAgICAgIC8vIFdlIGFscmVhZHkgaGF2ZSBzYW1lIHRva2VuXG4gICAgICAgICAgICBpZiAoa2V5MiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBkc3RbaSArIDFdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleTIgPT09IGRzdFtpICsgMV0pIHtcbiAgICAgICAgICAgICAgICBkc3RbaSArIDJdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEluY3JlbWVudCBjb3VudGVyLlxuICAgICAgICBpKys7XG4gICAgICAgIGlmIChrZXkyICE9PSBudWxsKVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwpXG4gICAgICAgICAgICBpKys7XG4gICAgfVxuICAgIC8vIGluc2VydCBhdCBsb2NhdGlvbi5cbiAgICBpZiAobWFya2VySW5zZXJ0UG9zaXRpb24gIT09IC0xKSB7XG4gICAgICAgIGRzdC5zcGxpY2UobWFya2VySW5zZXJ0UG9zaXRpb24sIDAsIG1hcmtlcik7XG4gICAgICAgIGkgPSBtYXJrZXJJbnNlcnRQb3NpdGlvbiArIDE7XG4gICAgfVxuICAgIGRzdC5zcGxpY2UoaSsrLCAwLCBrZXkxKTtcbiAgICBpZiAoa2V5MiAhPT0gbnVsbCkge1xuICAgICAgICBkc3Quc3BsaWNlKGkrKywgMCwga2V5Mik7XG4gICAgfVxuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICBkc3Quc3BsaWNlKGkrKywgMCwgdmFsdWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLy8gUGFyZW50IEluamVjdG9yIFV0aWxzIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuZnVuY3Rpb24gaGFzUGFyZW50SW5qZWN0b3IocGFyZW50TG9jYXRpb24pIHtcbiAgICByZXR1cm4gcGFyZW50TG9jYXRpb24gIT09IE5PX1BBUkVOVF9JTkpFQ1RPUjtcbn1cbmZ1bmN0aW9uIGdldFBhcmVudEluamVjdG9ySW5kZXgocGFyZW50TG9jYXRpb24pIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TnVtYmVyKHBhcmVudExvY2F0aW9uLCAnTnVtYmVyIGV4cGVjdGVkJyk7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE5vdEVxdWFsKHBhcmVudExvY2F0aW9uLCAtMSwgJ05vdCBhIHZhbGlkIHN0YXRlLicpO1xuICAgIGNvbnN0IHBhcmVudEluamVjdG9ySW5kZXggPSBwYXJlbnRMb2NhdGlvbiAmIDMyNzY3IC8qIEluamVjdG9ySW5kZXhNYXNrICovO1xuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnRHcmVhdGVyVGhhbihwYXJlbnRJbmplY3RvckluZGV4LCBIRUFERVJfT0ZGU0VULCAnUGFyZW50IGluamVjdG9yIG11c3QgYmUgcG9pbnRpbmcgcGFzdCBIRUFERVJfT0ZGU0VULicpO1xuICAgIHJldHVybiBwYXJlbnRMb2NhdGlvbiAmIDMyNzY3IC8qIEluamVjdG9ySW5kZXhNYXNrICovO1xufVxuZnVuY3Rpb24gZ2V0UGFyZW50SW5qZWN0b3JWaWV3T2Zmc2V0KHBhcmVudExvY2F0aW9uKSB7XG4gICAgcmV0dXJuIHBhcmVudExvY2F0aW9uID4+IDE2IC8qIFZpZXdPZmZzZXRTaGlmdCAqLztcbn1cbi8qKlxuICogVW53cmFwcyBhIHBhcmVudCBpbmplY3RvciBsb2NhdGlvbiBudW1iZXIgdG8gZmluZCB0aGUgdmlldyBvZmZzZXQgZnJvbSB0aGUgY3VycmVudCBpbmplY3RvcixcbiAqIHRoZW4gd2Fsa3MgdXAgdGhlIGRlY2xhcmF0aW9uIHZpZXcgdHJlZSB1bnRpbCB0aGUgdmlldyBpcyBmb3VuZCB0aGF0IGNvbnRhaW5zIHRoZSBwYXJlbnRcbiAqIGluamVjdG9yLlxuICpcbiAqIEBwYXJhbSBsb2NhdGlvbiBUaGUgbG9jYXRpb24gb2YgdGhlIHBhcmVudCBpbmplY3Rvciwgd2hpY2ggY29udGFpbnMgdGhlIHZpZXcgb2Zmc2V0XG4gKiBAcGFyYW0gc3RhcnRWaWV3IFRoZSBMVmlldyBpbnN0YW5jZSBmcm9tIHdoaWNoIHRvIHN0YXJ0IHdhbGtpbmcgdXAgdGhlIHZpZXcgdHJlZVxuICogQHJldHVybnMgVGhlIExWaWV3IGluc3RhbmNlIHRoYXQgY29udGFpbnMgdGhlIHBhcmVudCBpbmplY3RvclxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnRJbmplY3RvclZpZXcobG9jYXRpb24sIHN0YXJ0Vmlldykge1xuICAgIGxldCB2aWV3T2Zmc2V0ID0gZ2V0UGFyZW50SW5qZWN0b3JWaWV3T2Zmc2V0KGxvY2F0aW9uKTtcbiAgICBsZXQgcGFyZW50VmlldyA9IHN0YXJ0VmlldztcbiAgICAvLyBGb3IgbW9zdCBjYXNlcywgdGhlIHBhcmVudCBpbmplY3RvciBjYW4gYmUgZm91bmQgb24gdGhlIGhvc3Qgbm9kZSAoZS5nLiBmb3IgY29tcG9uZW50XG4gICAgLy8gb3IgY29udGFpbmVyKSwgYnV0IHdlIG11c3Qga2VlcCB0aGUgbG9vcCBoZXJlIHRvIHN1cHBvcnQgdGhlIHJhcmVyIGNhc2Ugb2YgZGVlcGx5IG5lc3RlZFxuICAgIC8vIDxuZy10ZW1wbGF0ZT4gdGFncyBvciBpbmxpbmUgdmlld3MsIHdoZXJlIHRoZSBwYXJlbnQgaW5qZWN0b3IgbWlnaHQgbGl2ZSBtYW55IHZpZXdzXG4gICAgLy8gYWJvdmUgdGhlIGNoaWxkIGluamVjdG9yLlxuICAgIHdoaWxlICh2aWV3T2Zmc2V0ID4gMCkge1xuICAgICAgICBwYXJlbnRWaWV3ID0gcGFyZW50Vmlld1tERUNMQVJBVElPTl9WSUVXXTtcbiAgICAgICAgdmlld09mZnNldC0tO1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50Vmlldztcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIERlZmluZXMgaWYgdGhlIGNhbGwgdG8gYGluamVjdGAgc2hvdWxkIGluY2x1ZGUgYHZpZXdQcm92aWRlcnNgIGluIGl0cyByZXNvbHV0aW9uLlxuICpcbiAqIFRoaXMgaXMgc2V0IHRvIHRydWUgd2hlbiB3ZSB0cnkgdG8gaW5zdGFudGlhdGUgYSBjb21wb25lbnQuIFRoaXMgdmFsdWUgaXMgcmVzZXQgaW5cbiAqIGBnZXROb2RlSW5qZWN0YWJsZWAgdG8gYSB2YWx1ZSB3aGljaCBtYXRjaGVzIHRoZSBkZWNsYXJhdGlvbiBsb2NhdGlvbiBvZiB0aGUgdG9rZW4gYWJvdXQgdG8gYmVcbiAqIGluc3RhbnRpYXRlZC4gVGhpcyBpcyBkb25lIHNvIHRoYXQgaWYgd2UgYXJlIGluamVjdGluZyBhIHRva2VuIHdoaWNoIHdhcyBkZWNsYXJlZCBvdXRzaWRlIG9mXG4gKiBgdmlld1Byb3ZpZGVyc2Agd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHB1bGwgYHZpZXdQcm92aWRlcnNgIGluLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgXG4gKiBASW5qZWN0YWJsZSgpXG4gKiBjbGFzcyBNeVNlcnZpY2Uge1xuICogICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWU6IFN0cmluZykge31cbiAqIH1cbiAqXG4gKiBAQ29tcG9uZW50KHtcbiAqICAgcHJvdmlkZXJzOiBbXG4gKiAgICAgTXlTZXJ2aWNlLFxuICogICAgIHtwcm92aWRlOiBTdHJpbmcsIHZhbHVlOiAncHJvdmlkZXJzJyB9XG4gKiAgIF1cbiAqICAgdmlld1Byb3ZpZGVyczogW1xuICogICAgIHtwcm92aWRlOiBTdHJpbmcsIHZhbHVlOiAndmlld1Byb3ZpZGVycyd9XG4gKiAgIF1cbiAqIH0pXG4gKiBjbGFzcyBNeUNvbXBvbmVudCB7XG4gKiAgIGNvbnN0cnVjdG9yKG15U2VydmljZTogTXlTZXJ2aWNlLCB2YWx1ZTogU3RyaW5nKSB7XG4gKiAgICAgLy8gV2UgZXhwZWN0IHRoYXQgQ29tcG9uZW50IGNhbiBzZWUgaW50byBgdmlld1Byb3ZpZGVyc2AuXG4gKiAgICAgZXhwZWN0KHZhbHVlKS50b0VxdWFsKCd2aWV3UHJvdmlkZXJzJyk7XG4gKiAgICAgLy8gYE15U2VydmljZWAgd2FzIG5vdCBkZWNsYXJlZCBpbiBgdmlld1Byb3ZpZGVyc2AgaGVuY2UgaXQgY2FuJ3Qgc2VlIGl0LlxuICogICAgIGV4cGVjdChteVNlcnZpY2UudmFsdWUpLnRvRXF1YWwoJ3Byb3ZpZGVycycpO1xuICogICB9XG4gKiB9XG4gKlxuICogYGBgXG4gKi9cbmxldCBpbmNsdWRlVmlld1Byb3ZpZGVycyA9IHRydWU7XG5mdW5jdGlvbiBzZXRJbmNsdWRlVmlld1Byb3ZpZGVycyh2KSB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSBpbmNsdWRlVmlld1Byb3ZpZGVycztcbiAgICBpbmNsdWRlVmlld1Byb3ZpZGVycyA9IHY7XG4gICAgcmV0dXJuIG9sZFZhbHVlO1xufVxuLyoqXG4gKiBUaGUgbnVtYmVyIG9mIHNsb3RzIGluIGVhY2ggYmxvb20gZmlsdGVyICh1c2VkIGJ5IERJKS4gVGhlIGxhcmdlciB0aGlzIG51bWJlciwgdGhlIGZld2VyXG4gKiBkaXJlY3RpdmVzIHRoYXQgd2lsbCBzaGFyZSBzbG90cywgYW5kIHRodXMsIHRoZSBmZXdlciBmYWxzZSBwb3NpdGl2ZXMgd2hlbiBjaGVja2luZyBmb3JcbiAqIHRoZSBleGlzdGVuY2Ugb2YgYSBkaXJlY3RpdmUuXG4gKi9cbmNvbnN0IEJMT09NX1NJWkUgPSAyNTY7XG5jb25zdCBCTE9PTV9NQVNLID0gQkxPT01fU0laRSAtIDE7XG4vKipcbiAqIFRoZSBudW1iZXIgb2YgYml0cyB0aGF0IGlzIHJlcHJlc2VudGVkIGJ5IGEgc2luZ2xlIGJsb29tIGJ1Y2tldC4gSlMgYml0IG9wZXJhdGlvbnMgYXJlIDMyIGJpdHMsXG4gKiBzbyBlYWNoIGJ1Y2tldCByZXByZXNlbnRzIDMyIGRpc3RpbmN0IHRva2VucyB3aGljaCBhY2NvdW50cyBmb3IgbG9nMigzMikgPSA1IGJpdHMgb2YgYSBibG9vbSBoYXNoXG4gKiBudW1iZXIuXG4gKi9cbmNvbnN0IEJMT09NX0JVQ0tFVF9CSVRTID0gNTtcbi8qKiBDb3VudGVyIHVzZWQgdG8gZ2VuZXJhdGUgdW5pcXVlIElEcyBmb3IgZGlyZWN0aXZlcy4gKi9cbmxldCBuZXh0TmdFbGVtZW50SWQgPSAwO1xuLyoqXG4gKiBSZWdpc3RlcnMgdGhpcyBkaXJlY3RpdmUgYXMgcHJlc2VudCBpbiBpdHMgbm9kZSdzIGluamVjdG9yIGJ5IGZsaXBwaW5nIHRoZSBkaXJlY3RpdmUnc1xuICogY29ycmVzcG9uZGluZyBiaXQgaW4gdGhlIGluamVjdG9yJ3MgYmxvb20gZmlsdGVyLlxuICpcbiAqIEBwYXJhbSBpbmplY3RvckluZGV4IFRoZSBpbmRleCBvZiB0aGUgbm9kZSBpbmplY3RvciB3aGVyZSB0aGlzIHRva2VuIHNob3VsZCBiZSByZWdpc3RlcmVkXG4gKiBAcGFyYW0gdFZpZXcgVGhlIFRWaWV3IGZvciB0aGUgaW5qZWN0b3IncyBibG9vbSBmaWx0ZXJzXG4gKiBAcGFyYW0gdHlwZSBUaGUgZGlyZWN0aXZlIHRva2VuIHRvIHJlZ2lzdGVyXG4gKi9cbmZ1bmN0aW9uIGJsb29tQWRkKGluamVjdG9ySW5kZXgsIHRWaWV3LCB0eXBlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEVxdWFsKHRWaWV3LmZpcnN0Q3JlYXRlUGFzcywgdHJ1ZSwgJ2V4cGVjdGVkIGZpcnN0Q3JlYXRlUGFzcyB0byBiZSB0cnVlJyk7XG4gICAgbGV0IGlkO1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWQgPSB0eXBlLmNoYXJDb2RlQXQoMCkgfHwgMDtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZS5oYXNPd25Qcm9wZXJ0eShOR19FTEVNRU5UX0lEKSkge1xuICAgICAgICBpZCA9IHR5cGVbTkdfRUxFTUVOVF9JRF07XG4gICAgfVxuICAgIC8vIFNldCBhIHVuaXF1ZSBJRCBvbiB0aGUgZGlyZWN0aXZlIHR5cGUsIHNvIGlmIHNvbWV0aGluZyB0cmllcyB0byBpbmplY3QgdGhlIGRpcmVjdGl2ZSxcbiAgICAvLyB3ZSBjYW4gZWFzaWx5IHJldHJpZXZlIHRoZSBJRCBhbmQgaGFzaCBpdCBpbnRvIHRoZSBibG9vbSBiaXQgdGhhdCBzaG91bGQgYmUgY2hlY2tlZC5cbiAgICBpZiAoaWQgPT0gbnVsbCkge1xuICAgICAgICBpZCA9IHR5cGVbTkdfRUxFTUVOVF9JRF0gPSBuZXh0TmdFbGVtZW50SWQrKztcbiAgICB9XG4gICAgLy8gV2Ugb25seSBoYXZlIEJMT09NX1NJWkUgKDI1Nikgc2xvdHMgaW4gb3VyIGJsb29tIGZpbHRlciAoOCBidWNrZXRzICogMzIgYml0cyBlYWNoKSxcbiAgICAvLyBzbyBhbGwgdW5pcXVlIElEcyBtdXN0IGJlIG1vZHVsby1lZCBpbnRvIGEgbnVtYmVyIGZyb20gMCAtIDI1NSB0byBmaXQgaW50byB0aGUgZmlsdGVyLlxuICAgIGNvbnN0IGJsb29tSGFzaCA9IGlkICYgQkxPT01fTUFTSztcbiAgICAvLyBDcmVhdGUgYSBtYXNrIHRoYXQgdGFyZ2V0cyB0aGUgc3BlY2lmaWMgYml0IGFzc29jaWF0ZWQgd2l0aCB0aGUgZGlyZWN0aXZlLlxuICAgIC8vIEpTIGJpdCBvcGVyYXRpb25zIGFyZSAzMiBiaXRzLCBzbyB0aGlzIHdpbGwgYmUgYSBudW1iZXIgYmV0d2VlbiAyXjAgYW5kIDJeMzEsIGNvcnJlc3BvbmRpbmdcbiAgICAvLyB0byBiaXQgcG9zaXRpb25zIDAgLSAzMSBpbiBhIDMyIGJpdCBpbnRlZ2VyLlxuICAgIGNvbnN0IG1hc2sgPSAxIDw8IGJsb29tSGFzaDtcbiAgICAvLyBFYWNoIGJsb29tIGJ1Y2tldCBpbiBgdERhdGFgIHJlcHJlc2VudHMgYEJMT09NX0JVQ0tFVF9CSVRTYCBudW1iZXIgb2YgYml0cyBvZiBgYmxvb21IYXNoYC5cbiAgICAvLyBBbnkgYml0cyBpbiBgYmxvb21IYXNoYCBiZXlvbmQgYEJMT09NX0JVQ0tFVF9CSVRTYCBpbmRpY2F0ZSB0aGUgYnVja2V0IG9mZnNldCB0aGF0IHRoZSBtYXNrXG4gICAgLy8gc2hvdWxkIGJlIHdyaXR0ZW4gdG8uXG4gICAgdFZpZXcuZGF0YVtpbmplY3RvckluZGV4ICsgKGJsb29tSGFzaCA+PiBCTE9PTV9CVUNLRVRfQklUUyldIHw9IG1hc2s7XG59XG4vKipcbiAqIENyZWF0ZXMgKG9yIGdldHMgYW4gZXhpc3RpbmcpIGluamVjdG9yIGZvciBhIGdpdmVuIGVsZW1lbnQgb3IgY29udGFpbmVyLlxuICpcbiAqIEBwYXJhbSB0Tm9kZSBmb3Igd2hpY2ggYW4gaW5qZWN0b3Igc2hvdWxkIGJlIHJldHJpZXZlZCAvIGNyZWF0ZWQuXG4gKiBAcGFyYW0gbFZpZXcgVmlldyB3aGVyZSB0aGUgbm9kZSBpcyBzdG9yZWRcbiAqIEByZXR1cm5zIE5vZGUgaW5qZWN0b3JcbiAqL1xuZnVuY3Rpb24gZ2V0T3JDcmVhdGVOb2RlSW5qZWN0b3JGb3JOb2RlKHROb2RlLCBsVmlldykge1xuICAgIGNvbnN0IGV4aXN0aW5nSW5qZWN0b3JJbmRleCA9IGdldEluamVjdG9ySW5kZXgodE5vZGUsIGxWaWV3KTtcbiAgICBpZiAoZXhpc3RpbmdJbmplY3RvckluZGV4ICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gZXhpc3RpbmdJbmplY3RvckluZGV4O1xuICAgIH1cbiAgICBjb25zdCB0VmlldyA9IGxWaWV3W1RWSUVXXTtcbiAgICBpZiAodFZpZXcuZmlyc3RDcmVhdGVQYXNzKSB7XG4gICAgICAgIHROb2RlLmluamVjdG9ySW5kZXggPSBsVmlldy5sZW5ndGg7XG4gICAgICAgIGluc2VydEJsb29tKHRWaWV3LmRhdGEsIHROb2RlKTsgLy8gZm91bmRhdGlvbiBmb3Igbm9kZSBibG9vbVxuICAgICAgICBpbnNlcnRCbG9vbShsVmlldywgbnVsbCk7IC8vIGZvdW5kYXRpb24gZm9yIGN1bXVsYXRpdmUgYmxvb21cbiAgICAgICAgaW5zZXJ0Qmxvb20odFZpZXcuYmx1ZXByaW50LCBudWxsKTtcbiAgICB9XG4gICAgY29uc3QgcGFyZW50TG9jID0gZ2V0UGFyZW50SW5qZWN0b3JMb2NhdGlvbih0Tm9kZSwgbFZpZXcpO1xuICAgIGNvbnN0IGluamVjdG9ySW5kZXggPSB0Tm9kZS5pbmplY3RvckluZGV4O1xuICAgIC8vIElmIGEgcGFyZW50IGluamVjdG9yIGNhbid0IGJlIGZvdW5kLCBpdHMgbG9jYXRpb24gaXMgc2V0IHRvIC0xLlxuICAgIC8vIEluIHRoYXQgY2FzZSwgd2UgZG9uJ3QgbmVlZCB0byBzZXQgdXAgYSBjdW11bGF0aXZlIGJsb29tXG4gICAgaWYgKGhhc1BhcmVudEluamVjdG9yKHBhcmVudExvYykpIHtcbiAgICAgICAgY29uc3QgcGFyZW50SW5kZXggPSBnZXRQYXJlbnRJbmplY3RvckluZGV4KHBhcmVudExvYyk7XG4gICAgICAgIGNvbnN0IHBhcmVudExWaWV3ID0gZ2V0UGFyZW50SW5qZWN0b3JWaWV3KHBhcmVudExvYywgbFZpZXcpO1xuICAgICAgICBjb25zdCBwYXJlbnREYXRhID0gcGFyZW50TFZpZXdbVFZJRVddLmRhdGE7XG4gICAgICAgIC8vIENyZWF0ZXMgYSBjdW11bGF0aXZlIGJsb29tIGZpbHRlciB0aGF0IG1lcmdlcyB0aGUgcGFyZW50J3MgYmxvb20gZmlsdGVyXG4gICAgICAgIC8vIGFuZCBpdHMgb3duIGN1bXVsYXRpdmUgYmxvb20gKHdoaWNoIGNvbnRhaW5zIHRva2VucyBmb3IgYWxsIGFuY2VzdG9ycylcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4IC8qIEJMT09NX1NJWkUgKi87IGkrKykge1xuICAgICAgICAgICAgbFZpZXdbaW5qZWN0b3JJbmRleCArIGldID0gcGFyZW50TFZpZXdbcGFyZW50SW5kZXggKyBpXSB8IHBhcmVudERhdGFbcGFyZW50SW5kZXggKyBpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsVmlld1tpbmplY3RvckluZGV4ICsgOCAvKiBQQVJFTlQgKi9dID0gcGFyZW50TG9jO1xuICAgIHJldHVybiBpbmplY3RvckluZGV4O1xufVxuZnVuY3Rpb24gaW5zZXJ0Qmxvb20oYXJyLCBmb290ZXIpIHtcbiAgICBhcnIucHVzaCgwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCBmb290ZXIpO1xufVxuZnVuY3Rpb24gZ2V0SW5qZWN0b3JJbmRleCh0Tm9kZSwgbFZpZXcpIHtcbiAgICBpZiAodE5vZGUuaW5qZWN0b3JJbmRleCA9PT0gLTEgfHxcbiAgICAgICAgLy8gSWYgdGhlIGluamVjdG9yIGluZGV4IGlzIHRoZSBzYW1lIGFzIGl0cyBwYXJlbnQncyBpbmplY3RvciBpbmRleCwgdGhlbiB0aGUgaW5kZXggaGFzIGJlZW5cbiAgICAgICAgLy8gY29waWVkIGRvd24gZnJvbSB0aGUgcGFyZW50IG5vZGUuIE5vIGluamVjdG9yIGhhcyBiZWVuIGNyZWF0ZWQgeWV0IG9uIHRoaXMgbm9kZS5cbiAgICAgICAgKHROb2RlLnBhcmVudCAmJiB0Tm9kZS5wYXJlbnQuaW5qZWN0b3JJbmRleCA9PT0gdE5vZGUuaW5qZWN0b3JJbmRleCkgfHxcbiAgICAgICAgLy8gQWZ0ZXIgdGhlIGZpcnN0IHRlbXBsYXRlIHBhc3MsIHRoZSBpbmplY3RvciBpbmRleCBtaWdodCBleGlzdCBidXQgdGhlIHBhcmVudCB2YWx1ZXNcbiAgICAgICAgLy8gbWlnaHQgbm90IGhhdmUgYmVlbiBjYWxjdWxhdGVkIHlldCBmb3IgdGhpcyBpbnN0YW5jZVxuICAgICAgICBsVmlld1t0Tm9kZS5pbmplY3RvckluZGV4ICsgOCAvKiBQQVJFTlQgKi9dID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXcsIHROb2RlLmluamVjdG9ySW5kZXgpO1xuICAgICAgICByZXR1cm4gdE5vZGUuaW5qZWN0b3JJbmRleDtcbiAgICB9XG59XG4vKipcbiAqIEZpbmRzIHRoZSBpbmRleCBvZiB0aGUgcGFyZW50IGluamVjdG9yLCB3aXRoIGEgdmlldyBvZmZzZXQgaWYgYXBwbGljYWJsZS4gVXNlZCB0byBzZXQgdGhlXG4gKiBwYXJlbnQgaW5qZWN0b3IgaW5pdGlhbGx5LlxuICpcbiAqIEByZXR1cm5zIFJldHVybnMgYSBudW1iZXIgdGhhdCBpcyB0aGUgY29tYmluYXRpb24gb2YgdGhlIG51bWJlciBvZiBMVmlld3MgdGhhdCB3ZSBoYXZlIHRvIGdvIHVwXG4gKiB0byBmaW5kIHRoZSBMVmlldyBjb250YWluaW5nIHRoZSBwYXJlbnQgaW5qZWN0IEFORCB0aGUgaW5kZXggb2YgdGhlIGluamVjdG9yIHdpdGhpbiB0aGF0IExWaWV3LlxuICovXG5mdW5jdGlvbiBnZXRQYXJlbnRJbmplY3RvckxvY2F0aW9uKHROb2RlLCBsVmlldykge1xuICAgIGlmICh0Tm9kZS5wYXJlbnQgJiYgdE5vZGUucGFyZW50LmluamVjdG9ySW5kZXggIT09IC0xKSB7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgYSBwYXJlbnQgYFROb2RlYCBhbmQgdGhlcmUgaXMgYW4gaW5qZWN0b3IgYXNzb2NpYXRlZCB3aXRoIGl0IHdlIGFyZSBkb25lLCBiZWNhdXNlXG4gICAgICAgIC8vIHRoZSBwYXJlbnQgaW5qZWN0b3IgaXMgd2l0aGluIHRoZSBjdXJyZW50IGBMVmlld2AuXG4gICAgICAgIHJldHVybiB0Tm9kZS5wYXJlbnQuaW5qZWN0b3JJbmRleDsgLy8gVmlld09mZnNldCBpcyAwXG4gICAgfVxuICAgIC8vIFdoZW4gcGFyZW50IGluamVjdG9yIGxvY2F0aW9uIGlzIGNvbXB1dGVkIGl0IG1heSBiZSBvdXRzaWRlIG9mIHRoZSBjdXJyZW50IHZpZXcuIChpZSBpdCBjb3VsZFxuICAgIC8vIGJlIHBvaW50aW5nIHRvIGEgZGVjbGFyZWQgcGFyZW50IGxvY2F0aW9uKS4gVGhpcyB2YXJpYWJsZSBzdG9yZXMgbnVtYmVyIG9mIGRlY2xhcmF0aW9uIHBhcmVudHNcbiAgICAvLyB3ZSBuZWVkIHRvIHdhbGsgdXAgaW4gb3JkZXIgdG8gZmluZCB0aGUgcGFyZW50IGluamVjdG9yIGxvY2F0aW9uLlxuICAgIGxldCBkZWNsYXJhdGlvblZpZXdPZmZzZXQgPSAwO1xuICAgIGxldCBwYXJlbnRUTm9kZSA9IG51bGw7XG4gICAgbGV0IGxWaWV3Q3Vyc29yID0gbFZpZXc7XG4gICAgLy8gVGhlIHBhcmVudCBpbmplY3RvciBpcyBub3QgaW4gdGhlIGN1cnJlbnQgYExWaWV3YC4gV2Ugd2lsbCBoYXZlIHRvIHdhbGsgdGhlIGRlY2xhcmVkIHBhcmVudFxuICAgIC8vIGBMVmlld2AgaGllcmFyY2h5IGFuZCBsb29rIGZvciBpdC4gSWYgd2Ugd2FsayBvZiB0aGUgdG9wLCB0aGF0IG1lYW5zIHRoYXQgdGhlcmUgaXMgbm8gcGFyZW50XG4gICAgLy8gYE5vZGVJbmplY3RvcmAuXG4gICAgd2hpbGUgKGxWaWV3Q3Vyc29yICE9PSBudWxsKSB7XG4gICAgICAgIC8vIEZpcnN0IGRldGVybWluZSB0aGUgYHBhcmVudFROb2RlYCBsb2NhdGlvbi4gVGhlIHBhcmVudCBwb2ludGVyIGRpZmZlcnMgYmFzZWQgb24gYFRWaWV3LnR5cGVgLlxuICAgICAgICBjb25zdCB0VmlldyA9IGxWaWV3Q3Vyc29yW1RWSUVXXTtcbiAgICAgICAgY29uc3QgdFZpZXdUeXBlID0gdFZpZXcudHlwZTtcbiAgICAgICAgaWYgKHRWaWV3VHlwZSA9PT0gMiAvKiBFbWJlZGRlZCAqLykge1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgYXNzZXJ0RGVmaW5lZCh0Vmlldy5kZWNsVE5vZGUsICdFbWJlZGRlZCBUTm9kZXMgc2hvdWxkIGhhdmUgZGVjbGFyYXRpb24gcGFyZW50cy4nKTtcbiAgICAgICAgICAgIHBhcmVudFROb2RlID0gdFZpZXcuZGVjbFROb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRWaWV3VHlwZSA9PT0gMSAvKiBDb21wb25lbnQgKi8pIHtcbiAgICAgICAgICAgIC8vIENvbXBvbmVudHMgZG9uJ3QgaGF2ZSBgVFZpZXcuZGVjbFROb2RlYCBiZWNhdXNlIGVhY2ggaW5zdGFuY2Ugb2YgY29tcG9uZW50IGNvdWxkIGJlXG4gICAgICAgICAgICAvLyBpbnNlcnRlZCBpbiBkaWZmZXJlbnQgbG9jYXRpb24sIGhlbmNlIGBUVmlldy5kZWNsVE5vZGVgIGlzIG1lYW5pbmdsZXNzLlxuICAgICAgICAgICAgcGFyZW50VE5vZGUgPSBsVmlld0N1cnNvcltUX0hPU1RdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydEVxdWFsKHRWaWV3LnR5cGUsIDAgLyogUm9vdCAqLywgJ1Jvb3QgdHlwZSBleHBlY3RlZCcpO1xuICAgICAgICAgICAgcGFyZW50VE5vZGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRUTm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBubyBwYXJlbnQsIHRoYW4gd2UgYXJlIGRvbmUuXG4gICAgICAgICAgICByZXR1cm4gTk9fUEFSRU5UX0lOSkVDVE9SO1xuICAgICAgICB9XG4gICAgICAgIG5nRGV2TW9kZSAmJiBwYXJlbnRUTm9kZSAmJiBhc3NlcnRUTm9kZUZvckxWaWV3KHBhcmVudFROb2RlLCBsVmlld0N1cnNvcltERUNMQVJBVElPTl9WSUVXXSk7XG4gICAgICAgIC8vIEV2ZXJ5IGl0ZXJhdGlvbiBvZiB0aGUgbG9vcCByZXF1aXJlcyB0aGF0IHdlIGdvIHRvIHRoZSBkZWNsYXJlZCBwYXJlbnQuXG4gICAgICAgIGRlY2xhcmF0aW9uVmlld09mZnNldCsrO1xuICAgICAgICBsVmlld0N1cnNvciA9IGxWaWV3Q3Vyc29yW0RFQ0xBUkFUSU9OX1ZJRVddO1xuICAgICAgICBpZiAocGFyZW50VE5vZGUuaW5qZWN0b3JJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIFdlIGZvdW5kIGEgTm9kZUluamVjdG9yIHdoaWNoIHBvaW50cyB0byBzb21ldGhpbmcuXG4gICAgICAgICAgICByZXR1cm4gKHBhcmVudFROb2RlLmluamVjdG9ySW5kZXggfFxuICAgICAgICAgICAgICAgIChkZWNsYXJhdGlvblZpZXdPZmZzZXQgPDwgMTYgLyogVmlld09mZnNldFNoaWZ0ICovKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE5PX1BBUkVOVF9JTkpFQ1RPUjtcbn1cbi8qKlxuICogTWFrZXMgYSB0eXBlIG9yIGFuIGluamVjdGlvbiB0b2tlbiBwdWJsaWMgdG8gdGhlIERJIHN5c3RlbSBieSBhZGRpbmcgaXQgdG8gYW5cbiAqIGluamVjdG9yJ3MgYmxvb20gZmlsdGVyLlxuICpcbiAqIEBwYXJhbSBkaSBUaGUgbm9kZSBpbmplY3RvciBpbiB3aGljaCBhIGRpcmVjdGl2ZSB3aWxsIGJlIGFkZGVkXG4gKiBAcGFyYW0gdG9rZW4gVGhlIHR5cGUgb3IgdGhlIGluamVjdGlvbiB0b2tlbiB0byBiZSBtYWRlIHB1YmxpY1xuICovXG5mdW5jdGlvbiBkaVB1YmxpY0luSW5qZWN0b3IoaW5qZWN0b3JJbmRleCwgdFZpZXcsIHRva2VuKSB7XG4gICAgYmxvb21BZGQoaW5qZWN0b3JJbmRleCwgdFZpZXcsIHRva2VuKTtcbn1cbi8qKlxuICogSW5qZWN0IHN0YXRpYyBhdHRyaWJ1dGUgdmFsdWUgaW50byBkaXJlY3RpdmUgY29uc3RydWN0b3IuXG4gKlxuICogVGhpcyBtZXRob2QgaXMgdXNlZCB3aXRoIGBmYWN0b3J5YCBmdW5jdGlvbnMgd2hpY2ggYXJlIGdlbmVyYXRlZCBhcyBwYXJ0IG9mXG4gKiBgZGVmaW5lRGlyZWN0aXZlYCBvciBgZGVmaW5lQ29tcG9uZW50YC4gVGhlIG1ldGhvZCByZXRyaWV2ZXMgdGhlIHN0YXRpYyB2YWx1ZVxuICogb2YgYW4gYXR0cmlidXRlLiAoRHluYW1pYyBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkIHNpbmNlIHRoZXkgYXJlIG5vdCByZXNvbHZlZFxuICogIGF0IHRoZSB0aW1lIG9mIGluamVjdGlvbiBhbmQgY2FuIGNoYW5nZSBvdmVyIHRpbWUuKVxuICpcbiAqICMgRXhhbXBsZVxuICogR2l2ZW46XG4gKiBgYGBcbiAqIEBDb21wb25lbnQoLi4uKVxuICogY2xhc3MgTXlDb21wb25lbnQge1xuICogICBjb25zdHJ1Y3RvcihAQXR0cmlidXRlKCd0aXRsZScpIHRpdGxlOiBzdHJpbmcpIHsgLi4uIH1cbiAqIH1cbiAqIGBgYFxuICogV2hlbiBpbnN0YW50aWF0ZWQgd2l0aFxuICogYGBgXG4gKiA8bXktY29tcG9uZW50IHRpdGxlPVwiSGVsbG9cIj48L215LWNvbXBvbmVudD5cbiAqIGBgYFxuICpcbiAqIFRoZW4gZmFjdG9yeSBtZXRob2QgZ2VuZXJhdGVkIGlzOlxuICogYGBgXG4gKiBNeUNvbXBvbmVudC7JtWNtcCA9IGRlZmluZUNvbXBvbmVudCh7XG4gKiAgIGZhY3Rvcnk6ICgpID0+IG5ldyBNeUNvbXBvbmVudChpbmplY3RBdHRyaWJ1dGUoJ3RpdGxlJykpXG4gKiAgIC4uLlxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZnVuY3Rpb24gaW5qZWN0QXR0cmlidXRlSW1wbCh0Tm9kZSwgYXR0ck5hbWVUb0luamVjdCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRUTm9kZVR5cGUodE5vZGUsIDEyIC8qIEFueUNvbnRhaW5lciAqLyB8IDMgLyogQW55Uk5vZGUgKi8pO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHROb2RlLCAnZXhwZWN0aW5nIHROb2RlJyk7XG4gICAgaWYgKGF0dHJOYW1lVG9JbmplY3QgPT09ICdjbGFzcycpIHtcbiAgICAgICAgcmV0dXJuIHROb2RlLmNsYXNzZXM7XG4gICAgfVxuICAgIGlmIChhdHRyTmFtZVRvSW5qZWN0ID09PSAnc3R5bGUnKSB7XG4gICAgICAgIHJldHVybiB0Tm9kZS5zdHlsZXM7XG4gICAgfVxuICAgIGNvbnN0IGF0dHJzID0gdE5vZGUuYXR0cnM7XG4gICAgaWYgKGF0dHJzKSB7XG4gICAgICAgIGNvbnN0IGF0dHJzTGVuZ3RoID0gYXR0cnMubGVuZ3RoO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgYXR0cnNMZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cnNbaV07XG4gICAgICAgICAgICAvLyBJZiB3ZSBoaXQgYSBgQmluZGluZ3NgIG9yIGBUZW1wbGF0ZWAgbWFya2VyIHRoZW4gd2UgYXJlIGRvbmUuXG4gICAgICAgICAgICBpZiAoaXNOYW1lT25seUF0dHJpYnV0ZU1hcmtlcih2YWx1ZSkpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBTa2lwIG5hbWVzcGFjZWQgYXR0cmlidXRlc1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAwIC8qIE5hbWVzcGFjZVVSSSAqLykge1xuICAgICAgICAgICAgICAgIC8vIHdlIHNraXAgdGhlIG5leHQgdHdvIHZhbHVlc1xuICAgICAgICAgICAgICAgIC8vIGFzIG5hbWVzcGFjZWQgYXR0cmlidXRlcyBsb29rcyBsaWtlXG4gICAgICAgICAgICAgICAgLy8gWy4uLiwgQXR0cmlidXRlTWFya2VyLk5hbWVzcGFjZVVSSSwgJ2h0dHA6Ly9zb21ldXJpLmNvbS90ZXN0JywgJ3Rlc3Q6ZXhpc3QnLFxuICAgICAgICAgICAgICAgIC8vICdleGlzdFZhbHVlJywgLi4uXVxuICAgICAgICAgICAgICAgIGkgPSBpICsgMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAvLyBTa2lwIHRvIHRoZSBmaXJzdCB2YWx1ZSBvZiB0aGUgbWFya2VkIGF0dHJpYnV0ZS5cbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgPCBhdHRyc0xlbmd0aCAmJiB0eXBlb2YgYXR0cnNbaV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gYXR0ck5hbWVUb0luamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhdHRyc1tpICsgMV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpID0gaSArIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBub3RGb3VuZFZhbHVlT3JUaHJvdyhub3RGb3VuZFZhbHVlLCB0b2tlbiwgZmxhZ3MpIHtcbiAgICBpZiAoZmxhZ3MgJiBJbmplY3RGbGFncy5PcHRpb25hbCkge1xuICAgICAgICByZXR1cm4gbm90Rm91bmRWYWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93UHJvdmlkZXJOb3RGb3VuZEVycm9yKHRva2VuLCAnTm9kZUluamVjdG9yJyk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHRvIHRoZSBnaXZlbiB0b2tlbiBmcm9tIHRoZSBNb2R1bGVJbmplY3RvciBvciB0aHJvd3MgZXhjZXB0aW9uXG4gKlxuICogQHBhcmFtIGxWaWV3IFRoZSBgTFZpZXdgIHRoYXQgY29udGFpbnMgdGhlIGB0Tm9kZWBcbiAqIEBwYXJhbSB0b2tlbiBUaGUgdG9rZW4gdG8gbG9vayBmb3JcbiAqIEBwYXJhbSBmbGFncyBJbmplY3Rpb24gZmxhZ3NcbiAqIEBwYXJhbSBub3RGb3VuZFZhbHVlIFRoZSB2YWx1ZSB0byByZXR1cm4gd2hlbiB0aGUgaW5qZWN0aW9uIGZsYWdzIGlzIGBJbmplY3RGbGFncy5PcHRpb25hbGBcbiAqIEByZXR1cm5zIHRoZSB2YWx1ZSBmcm9tIHRoZSBpbmplY3RvciBvciB0aHJvd3MgYW4gZXhjZXB0aW9uXG4gKi9cbmZ1bmN0aW9uIGxvb2t1cFRva2VuVXNpbmdNb2R1bGVJbmplY3RvcihsVmlldywgdG9rZW4sIGZsYWdzLCBub3RGb3VuZFZhbHVlKSB7XG4gICAgaWYgKGZsYWdzICYgSW5qZWN0RmxhZ3MuT3B0aW9uYWwgJiYgbm90Rm91bmRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIFRoaXMgbXVzdCBiZSBzZXQgb3IgdGhlIE51bGxJbmplY3RvciB3aWxsIHRocm93IGZvciBvcHRpb25hbCBkZXBzXG4gICAgICAgIG5vdEZvdW5kVmFsdWUgPSBudWxsO1xuICAgIH1cbiAgICBpZiAoKGZsYWdzICYgKEluamVjdEZsYWdzLlNlbGYgfCBJbmplY3RGbGFncy5Ib3N0KSkgPT09IDApIHtcbiAgICAgICAgY29uc3QgbW9kdWxlSW5qZWN0b3IgPSBsVmlld1tJTkpFQ1RPUiQxXTtcbiAgICAgICAgLy8gc3dpdGNoIHRvIGBpbmplY3RJbmplY3Rvck9ubHlgIGltcGxlbWVudGF0aW9uIGZvciBtb2R1bGUgaW5qZWN0b3IsIHNpbmNlIG1vZHVsZSBpbmplY3RvclxuICAgICAgICAvLyBzaG91bGQgbm90IGhhdmUgYWNjZXNzIHRvIENvbXBvbmVudC9EaXJlY3RpdmUgREkgc2NvcGUgKHRoYXQgbWF5IGhhcHBlbiB0aHJvdWdoXG4gICAgICAgIC8vIGBkaXJlY3RpdmVJbmplY3RgIGltcGxlbWVudGF0aW9uKVxuICAgICAgICBjb25zdCBwcmV2aW91c0luamVjdEltcGxlbWVudGF0aW9uID0gc2V0SW5qZWN0SW1wbGVtZW50YXRpb24odW5kZWZpbmVkKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChtb2R1bGVJbmplY3Rvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbmplY3Rvci5nZXQodG9rZW4sIG5vdEZvdW5kVmFsdWUsIGZsYWdzICYgSW5qZWN0RmxhZ3MuT3B0aW9uYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluamVjdFJvb3RMaW1wTW9kZSh0b2tlbiwgbm90Rm91bmRWYWx1ZSwgZmxhZ3MgJiBJbmplY3RGbGFncy5PcHRpb25hbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBzZXRJbmplY3RJbXBsZW1lbnRhdGlvbihwcmV2aW91c0luamVjdEltcGxlbWVudGF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbm90Rm91bmRWYWx1ZU9yVGhyb3cobm90Rm91bmRWYWx1ZSwgdG9rZW4sIGZsYWdzKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgYXNzb2NpYXRlZCB0byB0aGUgZ2l2ZW4gdG9rZW4gZnJvbSB0aGUgTm9kZUluamVjdG9ycyA9PiBNb2R1bGVJbmplY3Rvci5cbiAqXG4gKiBMb29rIGZvciB0aGUgaW5qZWN0b3IgcHJvdmlkaW5nIHRoZSB0b2tlbiBieSB3YWxraW5nIHVwIHRoZSBub2RlIGluamVjdG9yIHRyZWUgYW5kIHRoZW5cbiAqIHRoZSBtb2R1bGUgaW5qZWN0b3IgdHJlZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHBhdGNoZXMgYHRva2VuYCB3aXRoIGBfX05HX0VMRU1FTlRfSURfX2Agd2hpY2ggY29udGFpbnMgdGhlIGlkIGZvciB0aGUgYmxvb21cbiAqIGZpbHRlci4gYC0xYCBpcyByZXNlcnZlZCBmb3IgaW5qZWN0aW5nIGBJbmplY3RvcmAgKGltcGxlbWVudGVkIGJ5IGBOb2RlSW5qZWN0b3JgKVxuICpcbiAqIEBwYXJhbSB0Tm9kZSBUaGUgTm9kZSB3aGVyZSB0aGUgc2VhcmNoIGZvciB0aGUgaW5qZWN0b3Igc2hvdWxkIHN0YXJ0XG4gKiBAcGFyYW0gbFZpZXcgVGhlIGBMVmlld2AgdGhhdCBjb250YWlucyB0aGUgYHROb2RlYFxuICogQHBhcmFtIHRva2VuIFRoZSB0b2tlbiB0byBsb29rIGZvclxuICogQHBhcmFtIGZsYWdzIEluamVjdGlvbiBmbGFnc1xuICogQHBhcmFtIG5vdEZvdW5kVmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiB3aGVuIHRoZSBpbmplY3Rpb24gZmxhZ3MgaXMgYEluamVjdEZsYWdzLk9wdGlvbmFsYFxuICogQHJldHVybnMgdGhlIHZhbHVlIGZyb20gdGhlIGluamVjdG9yLCBgbnVsbGAgd2hlbiBub3QgZm91bmQsIG9yIGBub3RGb3VuZFZhbHVlYCBpZiBwcm92aWRlZFxuICovXG5mdW5jdGlvbiBnZXRPckNyZWF0ZUluamVjdGFibGUodE5vZGUsIGxWaWV3LCB0b2tlbiwgZmxhZ3MgPSBJbmplY3RGbGFncy5EZWZhdWx0LCBub3RGb3VuZFZhbHVlKSB7XG4gICAgaWYgKHROb2RlICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGJsb29tSGFzaCA9IGJsb29tSGFzaEJpdE9yRmFjdG9yeSh0b2tlbik7XG4gICAgICAgIC8vIElmIHRoZSBJRCBzdG9yZWQgaGVyZSBpcyBhIGZ1bmN0aW9uLCB0aGlzIGlzIGEgc3BlY2lhbCBvYmplY3QgbGlrZSBFbGVtZW50UmVmIG9yIFRlbXBsYXRlUmVmXG4gICAgICAgIC8vIHNvIGp1c3QgY2FsbCB0aGUgZmFjdG9yeSBmdW5jdGlvbiB0byBjcmVhdGUgaXQuXG4gICAgICAgIGlmICh0eXBlb2YgYmxvb21IYXNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAoIWVudGVyREkobFZpZXcsIHROb2RlLCBmbGFncykpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWlsZWQgdG8gZW50ZXIgREksIHRyeSBtb2R1bGUgaW5qZWN0b3IgaW5zdGVhZC4gSWYgYSB0b2tlbiBpcyBpbmplY3RlZCB3aXRoIHRoZSBASG9zdFxuICAgICAgICAgICAgICAgIC8vIGZsYWcsIHRoZSBtb2R1bGUgaW5qZWN0b3IgaXMgbm90IHNlYXJjaGVkIGZvciB0aGF0IHRva2VuIGluIEl2eS5cbiAgICAgICAgICAgICAgICByZXR1cm4gKGZsYWdzICYgSW5qZWN0RmxhZ3MuSG9zdCkgP1xuICAgICAgICAgICAgICAgICAgICBub3RGb3VuZFZhbHVlT3JUaHJvdyhub3RGb3VuZFZhbHVlLCB0b2tlbiwgZmxhZ3MpIDpcbiAgICAgICAgICAgICAgICAgICAgbG9va3VwVG9rZW5Vc2luZ01vZHVsZUluamVjdG9yKGxWaWV3LCB0b2tlbiwgZmxhZ3MsIG5vdEZvdW5kVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGJsb29tSGFzaChmbGFncyk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwgJiYgIShmbGFncyAmIEluamVjdEZsYWdzLk9wdGlvbmFsKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvd1Byb3ZpZGVyTm90Rm91bmRFcnJvcih0b2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgbGVhdmVESSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBibG9vbUhhc2ggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAvLyBBIHJlZmVyZW5jZSB0byB0aGUgcHJldmlvdXMgaW5qZWN0b3IgVFZpZXcgdGhhdCB3YXMgZm91bmQgd2hpbGUgY2xpbWJpbmcgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgIC8vIGluamVjdG9yIHRyZWUuIFRoaXMgaXMgdXNlZCB0byBrbm93IGlmIHZpZXdQcm92aWRlcnMgY2FuIGJlIGFjY2Vzc2VkIG9uIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAvLyBpbmplY3Rvci5cbiAgICAgICAgICAgIGxldCBwcmV2aW91c1RWaWV3ID0gbnVsbDtcbiAgICAgICAgICAgIGxldCBpbmplY3RvckluZGV4ID0gZ2V0SW5qZWN0b3JJbmRleCh0Tm9kZSwgbFZpZXcpO1xuICAgICAgICAgICAgbGV0IHBhcmVudExvY2F0aW9uID0gTk9fUEFSRU5UX0lOSkVDVE9SO1xuICAgICAgICAgICAgbGV0IGhvc3RURWxlbWVudE5vZGUgPSBmbGFncyAmIEluamVjdEZsYWdzLkhvc3QgPyBsVmlld1tERUNMQVJBVElPTl9DT01QT05FTlRfVklFV11bVF9IT1NUXSA6IG51bGw7XG4gICAgICAgICAgICAvLyBJZiB3ZSBzaG91bGQgc2tpcCB0aGlzIGluamVjdG9yLCBvciBpZiB0aGVyZSBpcyBubyBpbmplY3RvciBvbiB0aGlzIG5vZGUsIHN0YXJ0IGJ5XG4gICAgICAgICAgICAvLyBzZWFyY2hpbmcgdGhlIHBhcmVudCBpbmplY3Rvci5cbiAgICAgICAgICAgIGlmIChpbmplY3RvckluZGV4ID09PSAtMSB8fCBmbGFncyAmIEluamVjdEZsYWdzLlNraXBTZWxmKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50TG9jYXRpb24gPSBpbmplY3RvckluZGV4ID09PSAtMSA/IGdldFBhcmVudEluamVjdG9yTG9jYXRpb24odE5vZGUsIGxWaWV3KSA6XG4gICAgICAgICAgICAgICAgICAgIGxWaWV3W2luamVjdG9ySW5kZXggKyA4IC8qIFBBUkVOVCAqL107XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudExvY2F0aW9uID09PSBOT19QQVJFTlRfSU5KRUNUT1IgfHwgIXNob3VsZFNlYXJjaFBhcmVudChmbGFncywgZmFsc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGluamVjdG9ySW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzVFZpZXcgPSBsVmlld1tUVklFV107XG4gICAgICAgICAgICAgICAgICAgIGluamVjdG9ySW5kZXggPSBnZXRQYXJlbnRJbmplY3RvckluZGV4KHBhcmVudExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgbFZpZXcgPSBnZXRQYXJlbnRJbmplY3RvclZpZXcocGFyZW50TG9jYXRpb24sIGxWaWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUcmF2ZXJzZSB1cCB0aGUgaW5qZWN0b3IgdHJlZSB1bnRpbCB3ZSBmaW5kIGEgcG90ZW50aWFsIG1hdGNoIG9yIHVudGlsIHdlIGtub3cgdGhlcmVcbiAgICAgICAgICAgIC8vICppc24ndCogYSBtYXRjaC5cbiAgICAgICAgICAgIHdoaWxlIChpbmplY3RvckluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnROb2RlSW5qZWN0b3IobFZpZXcsIGluamVjdG9ySW5kZXgpO1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIHRoZSBjdXJyZW50IGluamVjdG9yLiBJZiBpdCBtYXRjaGVzLCBzZWUgaWYgaXQgY29udGFpbnMgdG9rZW4uXG4gICAgICAgICAgICAgICAgY29uc3QgdFZpZXcgPSBsVmlld1tUVklFV107XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydFROb2RlRm9yTFZpZXcodFZpZXcuZGF0YVtpbmplY3RvckluZGV4ICsgOCAvKiBUTk9ERSAqL10sIGxWaWV3KTtcbiAgICAgICAgICAgICAgICBpZiAoYmxvb21IYXNUb2tlbihibG9vbUhhc2gsIGluamVjdG9ySW5kZXgsIHRWaWV3LmRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgYW4gaW5qZWN0b3Igd2hpY2ggKm1heSogY29udGFpbiB0aGUgdG9rZW4sIHNvIHdlIHN0ZXAgdGhyb3VnaFxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcHJvdmlkZXJzIGFuZCBkaXJlY3RpdmVzIGFzc29jaWF0ZWQgd2l0aCB0aGUgaW5qZWN0b3IncyBjb3JyZXNwb25kaW5nIG5vZGUgdG8gZ2V0XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBpbnN0YW5jZS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBzZWFyY2hUb2tlbnNPbkluamVjdG9yKGluamVjdG9ySW5kZXgsIGxWaWV3LCB0b2tlbiwgcHJldmlvdXNUVmlldywgZmxhZ3MsIGhvc3RURWxlbWVudE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgIT09IE5PVF9GT1VORCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmVudExvY2F0aW9uID0gbFZpZXdbaW5qZWN0b3JJbmRleCArIDggLyogUEFSRU5UICovXTtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50TG9jYXRpb24gIT09IE5PX1BBUkVOVF9JTkpFQ1RPUiAmJlxuICAgICAgICAgICAgICAgICAgICBzaG91bGRTZWFyY2hQYXJlbnQoZmxhZ3MsIGxWaWV3W1RWSUVXXS5kYXRhW2luamVjdG9ySW5kZXggKyA4IC8qIFROT0RFICovXSA9PT0gaG9zdFRFbGVtZW50Tm9kZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgYmxvb21IYXNUb2tlbihibG9vbUhhc2gsIGluamVjdG9ySW5kZXgsIGxWaWV3KSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZGVmIHdhc24ndCBmb3VuZCBhbnl3aGVyZSBvbiB0aGlzIG5vZGUsIHNvIGl0IHdhcyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgICAgICAgICAgICAgICAgICAvLyBUcmF2ZXJzZSB1cCB0aGUgdHJlZSBhbmQgY29udGludWUgc2VhcmNoaW5nLlxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c1RWaWV3ID0gdFZpZXc7XG4gICAgICAgICAgICAgICAgICAgIGluamVjdG9ySW5kZXggPSBnZXRQYXJlbnRJbmplY3RvckluZGV4KHBhcmVudExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgbFZpZXcgPSBnZXRQYXJlbnRJbmplY3RvclZpZXcocGFyZW50TG9jYXRpb24sIGxWaWV3KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIHNob3VsZCBub3Qgc2VhcmNoIHBhcmVudCBPUiBJZiB0aGUgYW5jZXN0b3IgYmxvb20gZmlsdGVyIHZhbHVlIGRvZXMgbm90IGhhdmUgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGJpdCBjb3JyZXNwb25kaW5nIHRvIHRoZSBkaXJlY3RpdmUgd2UgY2FuIGdpdmUgdXAgb24gdHJhdmVyc2luZyB1cCB0byBmaW5kIHRoZSBzcGVjaWZpY1xuICAgICAgICAgICAgICAgICAgICAvLyBpbmplY3Rvci5cbiAgICAgICAgICAgICAgICAgICAgaW5qZWN0b3JJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG9va3VwVG9rZW5Vc2luZ01vZHVsZUluamVjdG9yKGxWaWV3LCB0b2tlbiwgZmxhZ3MsIG5vdEZvdW5kVmFsdWUpO1xufVxuY29uc3QgTk9UX0ZPVU5EID0ge307XG5mdW5jdGlvbiBjcmVhdGVOb2RlSW5qZWN0b3IoKSB7XG4gICAgcmV0dXJuIG5ldyBOb2RlSW5qZWN0b3IoZ2V0Q3VycmVudFROb2RlKCksIGdldExWaWV3KCkpO1xufVxuZnVuY3Rpb24gc2VhcmNoVG9rZW5zT25JbmplY3RvcihpbmplY3RvckluZGV4LCBsVmlldywgdG9rZW4sIHByZXZpb3VzVFZpZXcsIGZsYWdzLCBob3N0VEVsZW1lbnROb2RlKSB7XG4gICAgY29uc3QgY3VycmVudFRWaWV3ID0gbFZpZXdbVFZJRVddO1xuICAgIGNvbnN0IHROb2RlID0gY3VycmVudFRWaWV3LmRhdGFbaW5qZWN0b3JJbmRleCArIDggLyogVE5PREUgKi9dO1xuICAgIC8vIEZpcnN0LCB3ZSBuZWVkIHRvIGRldGVybWluZSBpZiB2aWV3IHByb3ZpZGVycyBjYW4gYmUgYWNjZXNzZWQgYnkgdGhlIHN0YXJ0aW5nIGVsZW1lbnQuXG4gICAgLy8gVGhlcmUgYXJlIHR3byBwb3NzaWJpbGl0aWVzXG4gICAgY29uc3QgY2FuQWNjZXNzVmlld1Byb3ZpZGVycyA9IHByZXZpb3VzVFZpZXcgPT0gbnVsbCA/XG4gICAgICAgIC8vIDEpIFRoaXMgaXMgdGhlIGZpcnN0IGludm9jYXRpb24gYHByZXZpb3VzVFZpZXcgPT0gbnVsbGAgd2hpY2ggbWVhbnMgdGhhdCB3ZSBhcmUgYXQgdGhlXG4gICAgICAgIC8vIGBUTm9kZWAgb2Ygd2hlcmUgaW5qZWN0b3IgaXMgc3RhcnRpbmcgdG8gbG9vay4gSW4gc3VjaCBhIGNhc2UgdGhlIG9ubHkgdGltZSB3ZSBhcmUgYWxsb3dlZFxuICAgICAgICAvLyB0byBsb29rIGludG8gdGhlIFZpZXdQcm92aWRlcnMgaXMgaWY6XG4gICAgICAgIC8vIC0gd2UgYXJlIG9uIGEgY29tcG9uZW50XG4gICAgICAgIC8vIC0gQU5EIHRoZSBpbmplY3RvciBzZXQgYGluY2x1ZGVWaWV3UHJvdmlkZXJzYCB0byB0cnVlIChpbXBseWluZyB0aGF0IHRoZSB0b2tlbiBjYW4gc2VlXG4gICAgICAgIC8vIFZpZXdQcm92aWRlcnMgYmVjYXVzZSBpdCBpcyB0aGUgQ29tcG9uZW50IG9yIGEgU2VydmljZSB3aGljaCBpdHNlbGYgd2FzIGRlY2xhcmVkIGluXG4gICAgICAgIC8vIFZpZXdQcm92aWRlcnMpXG4gICAgICAgIChpc0NvbXBvbmVudEhvc3QodE5vZGUpICYmIGluY2x1ZGVWaWV3UHJvdmlkZXJzKSA6XG4gICAgICAgIC8vIDIpIGBwcmV2aW91c1RWaWV3ICE9IG51bGxgIHdoaWNoIG1lYW5zIHRoYXQgd2UgYXJlIG5vdyB3YWxraW5nIGFjcm9zcyB0aGUgcGFyZW50IG5vZGVzLlxuICAgICAgICAvLyBJbiBzdWNoIGEgY2FzZSB3ZSBhcmUgb25seSBhbGxvd2VkIHRvIGxvb2sgaW50byB0aGUgVmlld1Byb3ZpZGVycyBpZjpcbiAgICAgICAgLy8gLSBXZSBqdXN0IGNyb3NzZWQgZnJvbSBjaGlsZCBWaWV3IHRvIFBhcmVudCBWaWV3IGBwcmV2aW91c1RWaWV3ICE9IGN1cnJlbnRUVmlld2BcbiAgICAgICAgLy8gLSBBTkQgdGhlIHBhcmVudCBUTm9kZSBpcyBhbiBFbGVtZW50LlxuICAgICAgICAvLyBUaGlzIG1lYW5zIHRoYXQgd2UganVzdCBjYW1lIGZyb20gdGhlIENvbXBvbmVudCdzIFZpZXcgYW5kIHRoZXJlZm9yZSBhcmUgYWxsb3dlZCB0byBzZWVcbiAgICAgICAgLy8gaW50byB0aGUgVmlld1Byb3ZpZGVycy5cbiAgICAgICAgKHByZXZpb3VzVFZpZXcgIT0gY3VycmVudFRWaWV3ICYmICgodE5vZGUudHlwZSAmIDMgLyogQW55Uk5vZGUgKi8pICE9PSAwKSk7XG4gICAgLy8gVGhpcyBzcGVjaWFsIGNhc2UgaGFwcGVucyB3aGVuIHRoZXJlIGlzIGEgQGhvc3Qgb24gdGhlIGluamVjdCBhbmQgd2hlbiB3ZSBhcmUgc2VhcmNoaW5nXG4gICAgLy8gb24gdGhlIGhvc3QgZWxlbWVudCBub2RlLlxuICAgIGNvbnN0IGlzSG9zdFNwZWNpYWxDYXNlID0gKGZsYWdzICYgSW5qZWN0RmxhZ3MuSG9zdCkgJiYgaG9zdFRFbGVtZW50Tm9kZSA9PT0gdE5vZGU7XG4gICAgY29uc3QgaW5qZWN0YWJsZUlkeCA9IGxvY2F0ZURpcmVjdGl2ZU9yUHJvdmlkZXIodE5vZGUsIGN1cnJlbnRUVmlldywgdG9rZW4sIGNhbkFjY2Vzc1ZpZXdQcm92aWRlcnMsIGlzSG9zdFNwZWNpYWxDYXNlKTtcbiAgICBpZiAoaW5qZWN0YWJsZUlkeCAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0Tm9kZUluamVjdGFibGUobFZpZXcsIGN1cnJlbnRUVmlldywgaW5qZWN0YWJsZUlkeCwgdE5vZGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIE5PVF9GT1VORDtcbiAgICB9XG59XG4vKipcbiAqIFNlYXJjaGVzIGZvciB0aGUgZ2l2ZW4gdG9rZW4gYW1vbmcgdGhlIG5vZGUncyBkaXJlY3RpdmVzIGFuZCBwcm92aWRlcnMuXG4gKlxuICogQHBhcmFtIHROb2RlIFROb2RlIG9uIHdoaWNoIGRpcmVjdGl2ZXMgYXJlIHByZXNlbnQuXG4gKiBAcGFyYW0gdFZpZXcgVGhlIHRWaWV3IHdlIGFyZSBjdXJyZW50bHkgcHJvY2Vzc2luZ1xuICogQHBhcmFtIHRva2VuIFByb3ZpZGVyIHRva2VuIG9yIHR5cGUgb2YgYSBkaXJlY3RpdmUgdG8gbG9vayBmb3IuXG4gKiBAcGFyYW0gY2FuQWNjZXNzVmlld1Byb3ZpZGVycyBXaGV0aGVyIHZpZXcgcHJvdmlkZXJzIHNob3VsZCBiZSBjb25zaWRlcmVkLlxuICogQHBhcmFtIGlzSG9zdFNwZWNpYWxDYXNlIFdoZXRoZXIgdGhlIGhvc3Qgc3BlY2lhbCBjYXNlIGFwcGxpZXMuXG4gKiBAcmV0dXJucyBJbmRleCBvZiBhIGZvdW5kIGRpcmVjdGl2ZSBvciBwcm92aWRlciwgb3IgbnVsbCB3aGVuIG5vbmUgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIGxvY2F0ZURpcmVjdGl2ZU9yUHJvdmlkZXIodE5vZGUsIHRWaWV3LCB0b2tlbiwgY2FuQWNjZXNzVmlld1Byb3ZpZGVycywgaXNIb3N0U3BlY2lhbENhc2UpIHtcbiAgICBjb25zdCBub2RlUHJvdmlkZXJJbmRleGVzID0gdE5vZGUucHJvdmlkZXJJbmRleGVzO1xuICAgIGNvbnN0IHRJbmplY3RhYmxlcyA9IHRWaWV3LmRhdGE7XG4gICAgY29uc3QgaW5qZWN0YWJsZXNTdGFydCA9IG5vZGVQcm92aWRlckluZGV4ZXMgJiAxMDQ4NTc1IC8qIFByb3ZpZGVyc1N0YXJ0SW5kZXhNYXNrICovO1xuICAgIGNvbnN0IGRpcmVjdGl2ZXNTdGFydCA9IHROb2RlLmRpcmVjdGl2ZVN0YXJ0O1xuICAgIGNvbnN0IGRpcmVjdGl2ZUVuZCA9IHROb2RlLmRpcmVjdGl2ZUVuZDtcbiAgICBjb25zdCBjcHRWaWV3UHJvdmlkZXJzQ291bnQgPSBub2RlUHJvdmlkZXJJbmRleGVzID4+IDIwIC8qIENwdFZpZXdQcm92aWRlcnNDb3VudFNoaWZ0ICovO1xuICAgIGNvbnN0IHN0YXJ0aW5nSW5kZXggPSBjYW5BY2Nlc3NWaWV3UHJvdmlkZXJzID8gaW5qZWN0YWJsZXNTdGFydCA6IGluamVjdGFibGVzU3RhcnQgKyBjcHRWaWV3UHJvdmlkZXJzQ291bnQ7XG4gICAgLy8gV2hlbiB0aGUgaG9zdCBzcGVjaWFsIGNhc2UgYXBwbGllcywgb25seSB0aGUgdmlld1Byb3ZpZGVycyBhbmQgdGhlIGNvbXBvbmVudCBhcmUgdmlzaWJsZVxuICAgIGNvbnN0IGVuZEluZGV4ID0gaXNIb3N0U3BlY2lhbENhc2UgPyBpbmplY3RhYmxlc1N0YXJ0ICsgY3B0Vmlld1Byb3ZpZGVyc0NvdW50IDogZGlyZWN0aXZlRW5kO1xuICAgIGZvciAobGV0IGkgPSBzdGFydGluZ0luZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgICBjb25zdCBwcm92aWRlclRva2VuT3JEZWYgPSB0SW5qZWN0YWJsZXNbaV07XG4gICAgICAgIGlmIChpIDwgZGlyZWN0aXZlc1N0YXJ0ICYmIHRva2VuID09PSBwcm92aWRlclRva2VuT3JEZWYgfHxcbiAgICAgICAgICAgIGkgPj0gZGlyZWN0aXZlc1N0YXJ0ICYmIHByb3ZpZGVyVG9rZW5PckRlZi50eXBlID09PSB0b2tlbikge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzSG9zdFNwZWNpYWxDYXNlKSB7XG4gICAgICAgIGNvbnN0IGRpckRlZiA9IHRJbmplY3RhYmxlc1tkaXJlY3RpdmVzU3RhcnRdO1xuICAgICAgICBpZiAoZGlyRGVmICYmIGlzQ29tcG9uZW50RGVmKGRpckRlZikgJiYgZGlyRGVmLnR5cGUgPT09IHRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlc1N0YXJ0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBSZXRyaWV2ZSBvciBpbnN0YW50aWF0ZSB0aGUgaW5qZWN0YWJsZSBmcm9tIHRoZSBgTFZpZXdgIGF0IHBhcnRpY3VsYXIgYGluZGV4YC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyB0byBzZWUgaWYgdGhlIHZhbHVlIGhhcyBhbHJlYWR5IGJlZW4gaW5zdGFudGlhdGVkIGFuZCBpZiBzbyByZXR1cm5zIHRoZVxuICogY2FjaGVkIGBpbmplY3RhYmxlYC4gT3RoZXJ3aXNlIGlmIGl0IGRldGVjdHMgdGhhdCB0aGUgdmFsdWUgaXMgc3RpbGwgYSBmYWN0b3J5IGl0XG4gKiBpbnN0YW50aWF0ZXMgdGhlIGBpbmplY3RhYmxlYCBhbmQgY2FjaGVzIHRoZSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Tm9kZUluamVjdGFibGUobFZpZXcsIHRWaWV3LCBpbmRleCwgdE5vZGUpIHtcbiAgICBsZXQgdmFsdWUgPSBsVmlld1tpbmRleF07XG4gICAgY29uc3QgdERhdGEgPSB0Vmlldy5kYXRhO1xuICAgIGlmIChpc0ZhY3RvcnkodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGZhY3RvcnkucmVzb2x2aW5nKSB7XG4gICAgICAgICAgICB0aHJvd0N5Y2xpY0RlcGVuZGVuY3lFcnJvcihzdHJpbmdpZnlGb3JFcnJvcih0RGF0YVtpbmRleF0pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2aW91c0luY2x1ZGVWaWV3UHJvdmlkZXJzID0gc2V0SW5jbHVkZVZpZXdQcm92aWRlcnMoZmFjdG9yeS5jYW5TZWVWaWV3UHJvdmlkZXJzKTtcbiAgICAgICAgZmFjdG9yeS5yZXNvbHZpbmcgPSB0cnVlO1xuICAgICAgICBjb25zdCBwcmV2aW91c0luamVjdEltcGxlbWVudGF0aW9uID0gZmFjdG9yeS5pbmplY3RJbXBsID8gc2V0SW5qZWN0SW1wbGVtZW50YXRpb24oZmFjdG9yeS5pbmplY3RJbXBsKSA6IG51bGw7XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBlbnRlckRJKGxWaWV3LCB0Tm9kZSwgSW5qZWN0RmxhZ3MuRGVmYXVsdCk7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgYXNzZXJ0RXF1YWwoc3VjY2VzcywgdHJ1ZSwgJ0JlY2F1c2UgZmxhZ3MgZG8gbm90IGNvbnRhaW4gXFxgU2tpcFNlbGZcXCcgd2UgZXhwZWN0IHRoaXMgdG8gYWx3YXlzIHN1Y2NlZWQuJyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGxWaWV3W2luZGV4XSA9IGZhY3RvcnkuZmFjdG9yeSh1bmRlZmluZWQsIHREYXRhLCBsVmlldywgdE5vZGUpO1xuICAgICAgICAgICAgLy8gVGhpcyBjb2RlIHBhdGggaXMgaGl0IGZvciBib3RoIGRpcmVjdGl2ZXMgYW5kIHByb3ZpZGVycy5cbiAgICAgICAgICAgIC8vIEZvciBwZXJmIHJlYXNvbnMsIHdlIHdhbnQgdG8gYXZvaWQgc2VhcmNoaW5nIGZvciBob29rcyBvbiBwcm92aWRlcnMuXG4gICAgICAgICAgICAvLyBJdCBkb2VzIG5vIGhhcm0gdG8gdHJ5ICh0aGUgaG9va3MganVzdCB3b24ndCBleGlzdCksIGJ1dCB0aGUgZXh0cmFcbiAgICAgICAgICAgIC8vIGNoZWNrcyBhcmUgdW5uZWNlc3NhcnkgYW5kIHRoaXMgaXMgYSBob3QgcGF0aC4gU28gd2UgY2hlY2sgdG8gc2VlXG4gICAgICAgICAgICAvLyBpZiB0aGUgaW5kZXggb2YgdGhlIGRlcGVuZGVuY3kgaXMgaW4gdGhlIGRpcmVjdGl2ZSByYW5nZSBmb3IgdGhpc1xuICAgICAgICAgICAgLy8gdE5vZGUuIElmIGl0J3Mgbm90LCB3ZSBrbm93IGl0J3MgYSBwcm92aWRlciBhbmQgc2tpcCBob29rIHJlZ2lzdHJhdGlvbi5cbiAgICAgICAgICAgIGlmICh0Vmlldy5maXJzdENyZWF0ZVBhc3MgJiYgaW5kZXggPj0gdE5vZGUuZGlyZWN0aXZlU3RhcnQpIHtcbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGlyZWN0aXZlRGVmKHREYXRhW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJQcmVPcmRlckhvb2tzKGluZGV4LCB0RGF0YVtpbmRleF0sIHRWaWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHByZXZpb3VzSW5qZWN0SW1wbGVtZW50YXRpb24gIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBzZXRJbmplY3RJbXBsZW1lbnRhdGlvbihwcmV2aW91c0luamVjdEltcGxlbWVudGF0aW9uKTtcbiAgICAgICAgICAgIHNldEluY2x1ZGVWaWV3UHJvdmlkZXJzKHByZXZpb3VzSW5jbHVkZVZpZXdQcm92aWRlcnMpO1xuICAgICAgICAgICAgZmFjdG9yeS5yZXNvbHZpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGxlYXZlREkoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGJpdCBpbiBhbiBpbmplY3RvcidzIGJsb29tIGZpbHRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdFxuICogdGhlIGRpcmVjdGl2ZSBtaWdodCBiZSBwcm92aWRlZCBieSB0aGUgaW5qZWN0b3IuXG4gKlxuICogV2hlbiBhIGRpcmVjdGl2ZSBpcyBwdWJsaWMsIGl0IGlzIGFkZGVkIHRvIHRoZSBibG9vbSBmaWx0ZXIgYW5kIGdpdmVuIGEgdW5pcXVlIElEIHRoYXQgY2FuIGJlXG4gKiByZXRyaWV2ZWQgb24gdGhlIFR5cGUuIFdoZW4gdGhlIGRpcmVjdGl2ZSBpc24ndCBwdWJsaWMgb3IgdGhlIHRva2VuIGlzIG5vdCBhIGRpcmVjdGl2ZSBgbnVsbGBcbiAqIGlzIHJldHVybmVkIGFzIHRoZSBub2RlIGluamVjdG9yIGNhbiBub3QgcG9zc2libHkgcHJvdmlkZSB0aGF0IHRva2VuLlxuICpcbiAqIEBwYXJhbSB0b2tlbiB0aGUgaW5qZWN0aW9uIHRva2VuXG4gKiBAcmV0dXJucyB0aGUgbWF0Y2hpbmcgYml0IHRvIGNoZWNrIGluIHRoZSBibG9vbSBmaWx0ZXIgb3IgYG51bGxgIGlmIHRoZSB0b2tlbiBpcyBub3Qga25vd24uXG4gKiAgIFdoZW4gdGhlIHJldHVybmVkIHZhbHVlIGlzIG5lZ2F0aXZlIHRoZW4gaXQgcmVwcmVzZW50cyBzcGVjaWFsIHZhbHVlcyBzdWNoIGFzIGBJbmplY3RvcmAuXG4gKi9cbmZ1bmN0aW9uIGJsb29tSGFzaEJpdE9yRmFjdG9yeSh0b2tlbikge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHRva2VuLCAndG9rZW4gbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuLmNoYXJDb2RlQXQoMCkgfHwgMDtcbiAgICB9XG4gICAgY29uc3QgdG9rZW5JZCA9IFxuICAgIC8vIEZpcnN0IGNoZWNrIHdpdGggYGhhc093blByb3BlcnR5YCBzbyB3ZSBkb24ndCBnZXQgYW4gaW5oZXJpdGVkIElELlxuICAgIHRva2VuLmhhc093blByb3BlcnR5KE5HX0VMRU1FTlRfSUQpID8gdG9rZW5bTkdfRUxFTUVOVF9JRF0gOiB1bmRlZmluZWQ7XG4gICAgLy8gTmVnYXRpdmUgdG9rZW4gSURzIGFyZSB1c2VkIGZvciBzcGVjaWFsIG9iamVjdHMgc3VjaCBhcyBgSW5qZWN0b3JgXG4gICAgaWYgKHR5cGVvZiB0b2tlbklkID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAodG9rZW5JZCA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW5JZCAmIEJMT09NX01BU0s7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgICAgICBhc3NlcnRFcXVhbCh0b2tlbklkLCAtMSAvKiBJbmplY3RvciAqLywgJ0V4cGVjdGluZyB0byBnZXQgU3BlY2lhbCBJbmplY3RvciBJZCcpO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGVJbmplY3RvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRva2VuSWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gYmxvb21IYXNUb2tlbihibG9vbUhhc2gsIGluamVjdG9ySW5kZXgsIGluamVjdG9yVmlldykge1xuICAgIC8vIENyZWF0ZSBhIG1hc2sgdGhhdCB0YXJnZXRzIHRoZSBzcGVjaWZpYyBiaXQgYXNzb2NpYXRlZCB3aXRoIHRoZSBkaXJlY3RpdmUgd2UncmUgbG9va2luZyBmb3IuXG4gICAgLy8gSlMgYml0IG9wZXJhdGlvbnMgYXJlIDMyIGJpdHMsIHNvIHRoaXMgd2lsbCBiZSBhIG51bWJlciBiZXR3ZWVuIDJeMCBhbmQgMl4zMSwgY29ycmVzcG9uZGluZ1xuICAgIC8vIHRvIGJpdCBwb3NpdGlvbnMgMCAtIDMxIGluIGEgMzIgYml0IGludGVnZXIuXG4gICAgY29uc3QgbWFzayA9IDEgPDwgYmxvb21IYXNoO1xuICAgIC8vIEVhY2ggYmxvb20gYnVja2V0IGluIGBpbmplY3RvclZpZXdgIHJlcHJlc2VudHMgYEJMT09NX0JVQ0tFVF9CSVRTYCBudW1iZXIgb2YgYml0cyBvZlxuICAgIC8vIGBibG9vbUhhc2hgLiBBbnkgYml0cyBpbiBgYmxvb21IYXNoYCBiZXlvbmQgYEJMT09NX0JVQ0tFVF9CSVRTYCBpbmRpY2F0ZSB0aGUgYnVja2V0IG9mZnNldFxuICAgIC8vIHRoYXQgc2hvdWxkIGJlIHVzZWQuXG4gICAgY29uc3QgdmFsdWUgPSBpbmplY3RvclZpZXdbaW5qZWN0b3JJbmRleCArIChibG9vbUhhc2ggPj4gQkxPT01fQlVDS0VUX0JJVFMpXTtcbiAgICAvLyBJZiB0aGUgYmxvb20gZmlsdGVyIHZhbHVlIGhhcyB0aGUgYml0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGRpcmVjdGl2ZSdzIGJsb29tQml0IGZsaXBwZWQgb24sXG4gICAgLy8gdGhpcyBpbmplY3RvciBpcyBhIHBvdGVudGlhbCBtYXRjaC5cbiAgICByZXR1cm4gISEodmFsdWUgJiBtYXNrKTtcbn1cbi8qKiBSZXR1cm5zIHRydWUgaWYgZmxhZ3MgcHJldmVudCBwYXJlbnQgaW5qZWN0b3IgZnJvbSBiZWluZyBzZWFyY2hlZCBmb3IgdG9rZW5zICovXG5mdW5jdGlvbiBzaG91bGRTZWFyY2hQYXJlbnQoZmxhZ3MsIGlzRmlyc3RIb3N0VE5vZGUpIHtcbiAgICByZXR1cm4gIShmbGFncyAmIEluamVjdEZsYWdzLlNlbGYpICYmICEoZmxhZ3MgJiBJbmplY3RGbGFncy5Ib3N0ICYmIGlzRmlyc3RIb3N0VE5vZGUpO1xufVxuY2xhc3MgTm9kZUluamVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihfdE5vZGUsIF9sVmlldykge1xuICAgICAgICB0aGlzLl90Tm9kZSA9IF90Tm9kZTtcbiAgICAgICAgdGhpcy5fbFZpZXcgPSBfbFZpZXc7XG4gICAgfVxuICAgIGdldCh0b2tlbiwgbm90Rm91bmRWYWx1ZSwgZmxhZ3MpIHtcbiAgICAgICAgcmV0dXJuIGdldE9yQ3JlYXRlSW5qZWN0YWJsZSh0aGlzLl90Tm9kZSwgdGhpcy5fbFZpZXcsIHRva2VuLCBmbGFncywgbm90Rm91bmRWYWx1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Z2V0SW5oZXJpdGVkRmFjdG9yeSh0eXBlKSB7XG4gICAgcmV0dXJuIG5vU2lkZUVmZmVjdHMoKCkgPT4ge1xuICAgICAgICBjb25zdCBvd25Db25zdHJ1Y3RvciA9IHR5cGUucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuICAgICAgICBjb25zdCBvd25GYWN0b3J5ID0gb3duQ29uc3RydWN0b3JbTkdfRkFDVE9SWV9ERUZdIHx8IGdldEZhY3RvcnlPZihvd25Db25zdHJ1Y3Rvcik7XG4gICAgICAgIGNvbnN0IG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG4gICAgICAgIGxldCBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodHlwZS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yO1xuICAgICAgICAvLyBHbyB1cCB0aGUgcHJvdG90eXBlIHVudGlsIHdlIGhpdCBgT2JqZWN0YC5cbiAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IHBhcmVudFtOR19GQUNUT1JZX0RFRl0gfHwgZ2V0RmFjdG9yeU9mKHBhcmVudCk7XG4gICAgICAgICAgICAvLyBJZiB3ZSBoaXQgc29tZXRoaW5nIHRoYXQgaGFzIGEgZmFjdG9yeSBhbmQgdGhlIGZhY3RvcnkgaXNuJ3QgdGhlIHNhbWUgYXMgdGhlIHR5cGUsXG4gICAgICAgICAgICAvLyB3ZSd2ZSBmb3VuZCB0aGUgaW5oZXJpdGVkIGZhY3RvcnkuIE5vdGUgdGhlIGNoZWNrIHRoYXQgdGhlIGZhY3RvcnkgaXNuJ3QgdGhlIHR5cGUnc1xuICAgICAgICAgICAgLy8gb3duIGZhY3RvcnkgaXMgcmVkdW5kYW50IGluIG1vc3QgY2FzZXMsIGJ1dCBpZiB0aGUgdXNlciBoYXMgY3VzdG9tIGRlY29yYXRvcnMgb24gdGhlXG4gICAgICAgICAgICAvLyBjbGFzcywgdGhpcyBsb29rdXAgd2lsbCBzdGFydCBvbmUgbGV2ZWwgZG93biBpbiB0aGUgcHJvdG90eXBlIGNoYWluLCBjYXVzaW5nIHVzIHRvXG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBvd24gZmFjdG9yeSBmaXJzdCBhbmQgcG90ZW50aWFsbHkgdHJpZ2dlcmluZyBhbiBpbmZpbml0ZSBsb29wIGRvd25zdHJlYW0uXG4gICAgICAgICAgICBpZiAoZmFjdG9yeSAmJiBmYWN0b3J5ICE9PSBvd25GYWN0b3J5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGVyZSBpcyBubyBmYWN0b3J5IGRlZmluZWQuIEVpdGhlciB0aGlzIHdhcyBpbXByb3BlciB1c2FnZSBvZiBpbmhlcml0YW5jZVxuICAgICAgICAvLyAobm8gQW5ndWxhciBkZWNvcmF0b3Igb24gdGhlIHN1cGVyY2xhc3MpIG9yIHRoZXJlIGlzIG5vIGNvbnN0cnVjdG9yIGF0IGFsbFxuICAgICAgICAvLyBpbiB0aGUgaW5oZXJpdGFuY2UgY2hhaW4uIFNpbmNlIHRoZSB0d28gY2FzZXMgY2Fubm90IGJlIGRpc3Rpbmd1aXNoZWQsIHRoZVxuICAgICAgICAvLyBsYXR0ZXIgaGFzIHRvIGJlIGFzc3VtZWQuXG4gICAgICAgIHJldHVybiB0ID0+IG5ldyB0KCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRGYWN0b3J5T2YodHlwZSkge1xuICAgIGlmIChpc0ZvcndhcmRSZWYodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSBnZXRGYWN0b3J5T2YocmVzb2x2ZUZvcndhcmRSZWYodHlwZSkpO1xuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkgJiYgZmFjdG9yeSgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZ2V0RmFjdG9yeURlZih0eXBlKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEZhY2FkZSBmb3IgdGhlIGF0dHJpYnV0ZSBpbmplY3Rpb24gZnJvbSBESS5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1aW5qZWN0QXR0cmlidXRlKGF0dHJOYW1lVG9JbmplY3QpIHtcbiAgICByZXR1cm4gaW5qZWN0QXR0cmlidXRlSW1wbChnZXRDdXJyZW50VE5vZGUoKSwgYXR0ck5hbWVUb0luamVjdCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgQU5OT1RBVElPTlMgPSAnX19hbm5vdGF0aW9uc19fJztcbmNvbnN0IFBBUkFNRVRFUlMgPSAnX19wYXJhbWV0ZXJzX18nO1xuY29uc3QgUFJPUF9NRVRBREFUQSA9ICdfX3Byb3BfX21ldGFkYXRhX18nO1xuLyoqXG4gKiBAc3VwcHJlc3Mge2dsb2JhbFRoaXN9XG4gKi9cbmZ1bmN0aW9uIG1ha2VEZWNvcmF0b3IobmFtZSwgcHJvcHMsIHBhcmVudENsYXNzLCBhZGRpdGlvbmFsUHJvY2Vzc2luZywgdHlwZUZuKSB7XG4gICAgcmV0dXJuIG5vU2lkZUVmZmVjdHMoKCkgPT4ge1xuICAgICAgICBjb25zdCBtZXRhQ3RvciA9IG1ha2VNZXRhZGF0YUN0b3IocHJvcHMpO1xuICAgICAgICBmdW5jdGlvbiBEZWNvcmF0b3JGYWN0b3J5KC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgRGVjb3JhdG9yRmFjdG9yeSkge1xuICAgICAgICAgICAgICAgIG1ldGFDdG9yLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhbm5vdGF0aW9uSW5zdGFuY2UgPSBuZXcgRGVjb3JhdG9yRmFjdG9yeSguLi5hcmdzKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBUeXBlRGVjb3JhdG9yKGNscykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlRm4pXG4gICAgICAgICAgICAgICAgICAgIHR5cGVGbihjbHMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgICAgIC8vIFVzZSBvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgaW1wb3J0YW50IHNpbmNlIGl0IGNyZWF0ZXMgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgd2hpY2hcbiAgICAgICAgICAgICAgICAvLyBwcmV2ZW50cyB0aGUgcHJvcGVydHkgaXMgY29waWVkIGR1cmluZyBzdWJjbGFzc2luZy5cbiAgICAgICAgICAgICAgICBjb25zdCBhbm5vdGF0aW9ucyA9IGNscy5oYXNPd25Qcm9wZXJ0eShBTk5PVEFUSU9OUykgP1xuICAgICAgICAgICAgICAgICAgICBjbHNbQU5OT1RBVElPTlNdIDpcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNscywgQU5OT1RBVElPTlMsIHsgdmFsdWU6IFtdIH0pW0FOTk9UQVRJT05TXTtcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9ucy5wdXNoKGFubm90YXRpb25JbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgaWYgKGFkZGl0aW9uYWxQcm9jZXNzaW5nKVxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvY2Vzc2luZyhjbHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjbHM7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRDbGFzcykge1xuICAgICAgICAgICAgRGVjb3JhdG9yRmFjdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudENsYXNzLnByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgRGVjb3JhdG9yRmFjdG9yeS5wcm90b3R5cGUubmdNZXRhZGF0YU5hbWUgPSBuYW1lO1xuICAgICAgICBEZWNvcmF0b3JGYWN0b3J5LmFubm90YXRpb25DbHMgPSBEZWNvcmF0b3JGYWN0b3J5O1xuICAgICAgICByZXR1cm4gRGVjb3JhdG9yRmFjdG9yeTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG1ha2VNZXRhZGF0YUN0b3IocHJvcHMpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY3RvciguLi5hcmdzKSB7XG4gICAgICAgIGlmIChwcm9wcykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gcHJvcHMoLi4uYXJncyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHZhbHVlcykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJvcE5hbWVdID0gdmFsdWVzW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBtYWtlUGFyYW1EZWNvcmF0b3IobmFtZSwgcHJvcHMsIHBhcmVudENsYXNzKSB7XG4gICAgcmV0dXJuIG5vU2lkZUVmZmVjdHMoKCkgPT4ge1xuICAgICAgICBjb25zdCBtZXRhQ3RvciA9IG1ha2VNZXRhZGF0YUN0b3IocHJvcHMpO1xuICAgICAgICBmdW5jdGlvbiBQYXJhbURlY29yYXRvckZhY3RvcnkoLi4uYXJncykge1xuICAgICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBQYXJhbURlY29yYXRvckZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICBtZXRhQ3Rvci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGFubm90YXRpb25JbnN0YW5jZSA9IG5ldyBQYXJhbURlY29yYXRvckZhY3RvcnkoLi4uYXJncyk7XG4gICAgICAgICAgICBQYXJhbURlY29yYXRvci5hbm5vdGF0aW9uID0gYW5ub3RhdGlvbkluc3RhbmNlO1xuICAgICAgICAgICAgcmV0dXJuIFBhcmFtRGVjb3JhdG9yO1xuICAgICAgICAgICAgZnVuY3Rpb24gUGFyYW1EZWNvcmF0b3IoY2xzLCB1bnVzZWRLZXksIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIG9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBpcyBpbXBvcnRhbnQgc2luY2UgaXQgY3JlYXRlcyBub24tZW51bWVyYWJsZSBwcm9wZXJ0eSB3aGljaFxuICAgICAgICAgICAgICAgIC8vIHByZXZlbnRzIHRoZSBwcm9wZXJ0eSBpcyBjb3BpZWQgZHVyaW5nIHN1YmNsYXNzaW5nLlxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBjbHMuaGFzT3duUHJvcGVydHkoUEFSQU1FVEVSUykgP1xuICAgICAgICAgICAgICAgICAgICBjbHNbUEFSQU1FVEVSU10gOlxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xzLCBQQVJBTUVURVJTLCB7IHZhbHVlOiBbXSB9KVtQQVJBTUVURVJTXTtcbiAgICAgICAgICAgICAgICAvLyB0aGVyZSBtaWdodCBiZSBnYXBzIGlmIHNvbWUgaW4gYmV0d2VlbiBwYXJhbWV0ZXJzIGRvIG5vdCBoYXZlIGFubm90YXRpb25zLlxuICAgICAgICAgICAgICAgIC8vIHdlIHBhZCB3aXRoIG51bGxzLlxuICAgICAgICAgICAgICAgIHdoaWxlIChwYXJhbWV0ZXJzLmxlbmd0aCA8PSBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzLnB1c2gobnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChwYXJhbWV0ZXJzW2luZGV4XSA9IHBhcmFtZXRlcnNbaW5kZXhdIHx8IFtdKS5wdXNoKGFubm90YXRpb25JbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyZW50Q2xhc3MpIHtcbiAgICAgICAgICAgIFBhcmFtRGVjb3JhdG9yRmFjdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudENsYXNzLnByb3RvdHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgUGFyYW1EZWNvcmF0b3JGYWN0b3J5LnByb3RvdHlwZS5uZ01ldGFkYXRhTmFtZSA9IG5hbWU7XG4gICAgICAgIFBhcmFtRGVjb3JhdG9yRmFjdG9yeS5hbm5vdGF0aW9uQ2xzID0gUGFyYW1EZWNvcmF0b3JGYWN0b3J5O1xuICAgICAgICByZXR1cm4gUGFyYW1EZWNvcmF0b3JGYWN0b3J5O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gbWFrZVByb3BEZWNvcmF0b3IobmFtZSwgcHJvcHMsIHBhcmVudENsYXNzLCBhZGRpdGlvbmFsUHJvY2Vzc2luZykge1xuICAgIHJldHVybiBub1NpZGVFZmZlY3RzKCgpID0+IHtcbiAgICAgICAgY29uc3QgbWV0YUN0b3IgPSBtYWtlTWV0YWRhdGFDdG9yKHByb3BzKTtcbiAgICAgICAgZnVuY3Rpb24gUHJvcERlY29yYXRvckZhY3RvcnkoLi4uYXJncykge1xuICAgICAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBQcm9wRGVjb3JhdG9yRmFjdG9yeSkge1xuICAgICAgICAgICAgICAgIG1ldGFDdG9yLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGVjb3JhdG9ySW5zdGFuY2UgPSBuZXcgUHJvcERlY29yYXRvckZhY3RvcnkoLi4uYXJncyk7XG4gICAgICAgICAgICBmdW5jdGlvbiBQcm9wRGVjb3JhdG9yKHRhcmdldCwgbmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICAgICAgICAgICAgICAgIC8vIFVzZSBvZiBPYmplY3QuZGVmaW5lUHJvcGVydHkgaXMgaW1wb3J0YW50IGJlY2F1c2UgaXQgY3JlYXRlcyBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggcHJldmVudHMgdGhlIHByb3BlcnR5IGZyb20gYmVpbmcgY29waWVkIGR1cmluZyBzdWJjbGFzc2luZy5cbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0gY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoUFJPUF9NRVRBREFUQSkgP1xuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvcltQUk9QX01FVEFEQVRBXSA6XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb25zdHJ1Y3RvciwgUFJPUF9NRVRBREFUQSwgeyB2YWx1ZToge30gfSlbUFJPUF9NRVRBREFUQV07XG4gICAgICAgICAgICAgICAgbWV0YVtuYW1lXSA9IG1ldGEuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgbWV0YVtuYW1lXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBtZXRhW25hbWVdLnVuc2hpZnQoZGVjb3JhdG9ySW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIGlmIChhZGRpdGlvbmFsUHJvY2Vzc2luZylcbiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb2Nlc3NpbmcodGFyZ2V0LCBuYW1lLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9wRGVjb3JhdG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJlbnRDbGFzcykge1xuICAgICAgICAgICAgUHJvcERlY29yYXRvckZhY3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRDbGFzcy5wcm90b3R5cGUpO1xuICAgICAgICB9XG4gICAgICAgIFByb3BEZWNvcmF0b3JGYWN0b3J5LnByb3RvdHlwZS5uZ01ldGFkYXRhTmFtZSA9IG5hbWU7XG4gICAgICAgIFByb3BEZWNvcmF0b3JGYWN0b3J5LmFubm90YXRpb25DbHMgPSBQcm9wRGVjb3JhdG9yRmFjdG9yeTtcbiAgICAgICAgcmV0dXJuIFByb3BEZWNvcmF0b3JGYWN0b3J5O1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQXR0cmlidXRlIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgQXR0cmlidXRlID0gbWFrZVBhcmFtRGVjb3JhdG9yKCdBdHRyaWJ1dGUnLCAoYXR0cmlidXRlTmFtZSkgPT4gKHsgYXR0cmlidXRlTmFtZSwgX19OR19FTEVNRU5UX0lEX186ICgpID0+IMm1ybVpbmplY3RBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkgfSkpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQ3JlYXRlcyBhIHRva2VuIHRoYXQgY2FuIGJlIHVzZWQgaW4gYSBESSBQcm92aWRlci5cbiAqXG4gKiBVc2UgYW4gYEluamVjdGlvblRva2VuYCB3aGVuZXZlciB0aGUgdHlwZSB5b3UgYXJlIGluamVjdGluZyBpcyBub3QgcmVpZmllZCAoZG9lcyBub3QgaGF2ZSBhXG4gKiBydW50aW1lIHJlcHJlc2VudGF0aW9uKSBzdWNoIGFzIHdoZW4gaW5qZWN0aW5nIGFuIGludGVyZmFjZSwgY2FsbGFibGUgdHlwZSwgYXJyYXkgb3JcbiAqIHBhcmFtZXRlcml6ZWQgdHlwZS5cbiAqXG4gKiBgSW5qZWN0aW9uVG9rZW5gIGlzIHBhcmFtZXRlcml6ZWQgb24gYFRgIHdoaWNoIGlzIHRoZSB0eXBlIG9mIG9iamVjdCB3aGljaCB3aWxsIGJlIHJldHVybmVkIGJ5XG4gKiB0aGUgYEluamVjdG9yYC4gVGhpcyBwcm92aWRlcyBhbiBhZGRpdGlvbmFsIGxldmVsIG9mIHR5cGUgc2FmZXR5LlxuICpcbiAqIGBgYFxuICogaW50ZXJmYWNlIE15SW50ZXJmYWNlIHsuLi59XG4gKiBjb25zdCBteUludGVyZmFjZSA9IGluamVjdG9yLmdldChuZXcgSW5qZWN0aW9uVG9rZW48TXlJbnRlcmZhY2U+KCdTb21lVG9rZW4nKSk7XG4gKiAvLyBteUludGVyZmFjZSBpcyBpbmZlcnJlZCB0byBiZSBNeUludGVyZmFjZS5cbiAqIGBgYFxuICpcbiAqIFdoZW4gY3JlYXRpbmcgYW4gYEluamVjdGlvblRva2VuYCwgeW91IGNhbiBvcHRpb25hbGx5IHNwZWNpZnkgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIHJldHVybnNcbiAqIChwb3NzaWJseSBieSBjcmVhdGluZykgYSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBwYXJhbWV0ZXJpemVkIHR5cGUgYFRgLiBUaGlzIHNldHMgdXAgdGhlXG4gKiBgSW5qZWN0aW9uVG9rZW5gIHVzaW5nIHRoaXMgZmFjdG9yeSBhcyBhIHByb3ZpZGVyIGFzIGlmIGl0IHdhcyBkZWZpbmVkIGV4cGxpY2l0bHkgaW4gdGhlXG4gKiBhcHBsaWNhdGlvbidzIHJvb3QgaW5qZWN0b3IuIElmIHRoZSBmYWN0b3J5IGZ1bmN0aW9uLCB3aGljaCB0YWtlcyB6ZXJvIGFyZ3VtZW50cywgbmVlZHMgdG8gaW5qZWN0XG4gKiBkZXBlbmRlbmNpZXMsIGl0IGNhbiBkbyBzbyB1c2luZyB0aGUgYGluamVjdGAgZnVuY3Rpb24uXG4gKiBBcyB5b3UgY2FuIHNlZSBpbiB0aGUgVHJlZS1zaGFrYWJsZSBJbmplY3Rpb25Ub2tlbiBleGFtcGxlIGJlbG93LlxuICpcbiAqIEFkZGl0aW9uYWxseSwgaWYgYSBgZmFjdG9yeWAgaXMgc3BlY2lmaWVkIHlvdSBjYW4gYWxzbyBzcGVjaWZ5IHRoZSBgcHJvdmlkZWRJbmAgb3B0aW9uLCB3aGljaFxuICogb3ZlcnJpZGVzIHRoZSBhYm92ZSBiZWhhdmlvciBhbmQgbWFya3MgdGhlIHRva2VuIGFzIGJlbG9uZ2luZyB0byBhIHBhcnRpY3VsYXIgYEBOZ01vZHVsZWAuIEFzXG4gKiBtZW50aW9uZWQgYWJvdmUsIGAncm9vdCdgIGlzIHRoZSBkZWZhdWx0IHZhbHVlIGZvciBgcHJvdmlkZWRJbmAuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBCYXNpYyBFeGFtcGxlc1xuICpcbiAqICMjIyBQbGFpbiBJbmplY3Rpb25Ub2tlblxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL2luamVjdG9yX3NwZWMudHMgcmVnaW9uPSdJbmplY3Rpb25Ub2tlbid9XG4gKlxuICogIyMjIFRyZWUtc2hha2FibGUgSW5qZWN0aW9uVG9rZW5cbiAqXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9pbmplY3Rvcl9zcGVjLnRzIHJlZ2lvbj0nU2hha2FibGVJbmplY3Rpb25Ub2tlbid9XG4gKlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgSW5qZWN0aW9uVG9rZW4ge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBfZGVzYyAgIERlc2NyaXB0aW9uIGZvciB0aGUgdG9rZW4sXG4gICAgICogICAgICAgICAgICAgICAgdXNlZCBvbmx5IGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMsXG4gICAgICogICAgICAgICAgICAgICAgaXQgc2hvdWxkIGJ1dCBkb2VzIG5vdCBuZWVkIHRvIGJlIHVuaXF1ZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZm9yIHRoZSB0b2tlbidzIHVzYWdlLCBhcyBkZXNjcmliZWQgYWJvdmVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihfZGVzYywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl9kZXNjID0gX2Rlc2M7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5uZ01ldGFkYXRhTmFtZSA9ICdJbmplY3Rpb25Ub2tlbic7XG4gICAgICAgIHRoaXMuybVwcm92ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpICYmXG4gICAgICAgICAgICAgICAgYXNzZXJ0TGVzc1RoYW4ob3B0aW9ucywgMCwgJ09ubHkgbmVnYXRpdmUgbnVtYmVycyBhcmUgc3VwcG9ydGVkIGhlcmUnKTtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIGhhY2sgdG8gYXNzaWduIF9fTkdfRUxFTUVOVF9JRF9fIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICAgICAgICAvLyBTZWUgYEluamVjdG9yTWFya2Vyc2BcbiAgICAgICAgICAgIHRoaXMuX19OR19FTEVNRU5UX0lEX18gPSBvcHRpb25zO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy7JtXByb3YgPSDJtcm1ZGVmaW5lSW5qZWN0YWJsZSh7XG4gICAgICAgICAgICAgICAgdG9rZW46IHRoaXMsXG4gICAgICAgICAgICAgICAgcHJvdmlkZWRJbjogb3B0aW9ucy5wcm92aWRlZEluIHx8ICdyb290JyxcbiAgICAgICAgICAgICAgICBmYWN0b3J5OiBvcHRpb25zLmZhY3RvcnksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBJbmplY3Rpb25Ub2tlbiAke3RoaXMuX2Rlc2N9YDtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBIERJIHRva2VuIHRoYXQgeW91IGNhbiB1c2UgdG8gY3JlYXRlIGEgdmlydHVhbCBbcHJvdmlkZXJdKGd1aWRlL2dsb3NzYXJ5I3Byb3ZpZGVyKVxuICogdGhhdCB3aWxsIHBvcHVsYXRlIHRoZSBgZW50cnlDb21wb25lbnRzYCBmaWVsZCBvZiBjb21wb25lbnRzIGFuZCBOZ01vZHVsZXNcbiAqIGJhc2VkIG9uIGl0cyBgdXNlVmFsdWVgIHByb3BlcnR5IHZhbHVlLlxuICogQWxsIGNvbXBvbmVudHMgdGhhdCBhcmUgcmVmZXJlbmNlZCBpbiB0aGUgYHVzZVZhbHVlYCB2YWx1ZSAoZWl0aGVyIGRpcmVjdGx5XG4gKiBvciBpbiBhIG5lc3RlZCBhcnJheSBvciBtYXApIGFyZSBhZGRlZCB0byB0aGUgYGVudHJ5Q29tcG9uZW50c2AgcHJvcGVydHkuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRoZSByb3V0ZXIgY2FuIHBvcHVsYXRlIHRoZSBgZW50cnlDb21wb25lbnRzYFxuICogZmllbGQgb2YgYW4gTmdNb2R1bGUgYmFzZWQgb24gYSByb3V0ZXIgY29uZmlndXJhdGlvbiB0aGF0IHJlZmVyc1xuICogdG8gY29tcG9uZW50cy5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiAvLyBoZWxwZXIgZnVuY3Rpb24gaW5zaWRlIHRoZSByb3V0ZXJcbiAqIGZ1bmN0aW9uIHByb3ZpZGVSb3V0ZXMocm91dGVzKSB7XG4gKiAgIHJldHVybiBbXG4gKiAgICAge3Byb3ZpZGU6IFJPVVRFUywgdXNlVmFsdWU6IHJvdXRlc30sXG4gKiAgICAge3Byb3ZpZGU6IEFOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMsIHVzZVZhbHVlOiByb3V0ZXMsIG11bHRpOiB0cnVlfVxuICogICBdO1xuICogfVxuICpcbiAqIC8vIHVzZXIgY29kZVxuICogbGV0IHJvdXRlcyA9IFtcbiAqICAge3BhdGg6ICcvcm9vdCcsIGNvbXBvbmVudDogUm9vdENvbXB9LFxuICogICB7cGF0aDogJy90ZWFtcycsIGNvbXBvbmVudDogVGVhbXNDb21wfVxuICogXTtcbiAqXG4gKiBATmdNb2R1bGUoe1xuICogICBwcm92aWRlcnM6IFtwcm92aWRlUm91dGVzKHJvdXRlcyldXG4gKiB9KVxuICogY2xhc3MgTW9kdWxlV2l0aFJvdXRlcyB7fVxuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICogQGRlcHJlY2F0ZWQgU2luY2UgOS4wLjAuIFdpdGggSXZ5LCB0aGlzIHByb3BlcnR5IGlzIG5vIGxvbmdlciBuZWNlc3NhcnkuXG4gKi9cbmNvbnN0IEFOQUxZWkVfRk9SX0VOVFJZX0NPTVBPTkVOVFMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0FuYWx5emVGb3JFbnRyeUNvbXBvbmVudHMnKTtcbi8vIFN0b3JlcyB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBgZW1pdERpc3RpbmN0Q2hhbmdlc09ubHlgIHdoZW4gdGhlIGBlbWl0RGlzdGluY3RDaGFuZ2VzT25seWAgaXMgbm90XG4vLyBleHBsaWNpdGx5IHNldC5cbmNvbnN0IGVtaXREaXN0aW5jdENoYW5nZXNPbmx5RGVmYXVsdFZhbHVlID0gdHJ1ZTtcbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgcXVlcnkgbWV0YWRhdGEuXG4gKlxuICogQHNlZSBgQ29udGVudENoaWxkcmVuYC5cbiAqIEBzZWUgYENvbnRlbnRDaGlsZGAuXG4gKiBAc2VlIGBWaWV3Q2hpbGRyZW5gLlxuICogQHNlZSBgVmlld0NoaWxkYC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIFF1ZXJ5IHtcbn1cbi8qKlxuICogQ29udGVudENoaWxkcmVuIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICpcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IENvbnRlbnRDaGlsZHJlbiA9IG1ha2VQcm9wRGVjb3JhdG9yKCdDb250ZW50Q2hpbGRyZW4nLCAoc2VsZWN0b3IsIGRhdGEgPSB7fSkgPT4gKE9iamVjdC5hc3NpZ24oeyBzZWxlY3RvciwgZmlyc3Q6IGZhbHNlLCBpc1ZpZXdRdWVyeTogZmFsc2UsIGRlc2NlbmRhbnRzOiBmYWxzZSwgZW1pdERpc3RpbmN0Q2hhbmdlc09ubHk6IGVtaXREaXN0aW5jdENoYW5nZXNPbmx5RGVmYXVsdFZhbHVlIH0sIGRhdGEpKSwgUXVlcnkpO1xuLyoqXG4gKiBDb250ZW50Q2hpbGQgZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKlxuICogQEFubm90YXRpb25cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IENvbnRlbnRDaGlsZCA9IG1ha2VQcm9wRGVjb3JhdG9yKCdDb250ZW50Q2hpbGQnLCAoc2VsZWN0b3IsIGRhdGEgPSB7fSkgPT4gKE9iamVjdC5hc3NpZ24oeyBzZWxlY3RvciwgZmlyc3Q6IHRydWUsIGlzVmlld1F1ZXJ5OiBmYWxzZSwgZGVzY2VuZGFudHM6IHRydWUgfSwgZGF0YSkpLCBRdWVyeSk7XG4vKipcbiAqIFZpZXdDaGlsZHJlbiBkZWNvcmF0b3IgYW5kIG1ldGFkYXRhLlxuICpcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IFZpZXdDaGlsZHJlbiA9IG1ha2VQcm9wRGVjb3JhdG9yKCdWaWV3Q2hpbGRyZW4nLCAoc2VsZWN0b3IsIGRhdGEgPSB7fSkgPT4gKE9iamVjdC5hc3NpZ24oeyBzZWxlY3RvciwgZmlyc3Q6IGZhbHNlLCBpc1ZpZXdRdWVyeTogdHJ1ZSwgZGVzY2VuZGFudHM6IHRydWUsIGVtaXREaXN0aW5jdENoYW5nZXNPbmx5OiBlbWl0RGlzdGluY3RDaGFuZ2VzT25seURlZmF1bHRWYWx1ZSB9LCBkYXRhKSksIFF1ZXJ5KTtcbi8qKlxuICogVmlld0NoaWxkIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgVmlld0NoaWxkID0gbWFrZVByb3BEZWNvcmF0b3IoJ1ZpZXdDaGlsZCcsIChzZWxlY3RvciwgZGF0YSkgPT4gKE9iamVjdC5hc3NpZ24oeyBzZWxlY3RvciwgZmlyc3Q6IHRydWUsIGlzVmlld1F1ZXJ5OiB0cnVlLCBkZXNjZW5kYW50czogdHJ1ZSB9LCBkYXRhKSksIFF1ZXJ5KTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG52YXIgRmFjdG9yeVRhcmdldDtcbihmdW5jdGlvbiAoRmFjdG9yeVRhcmdldCkge1xuICAgIEZhY3RvcnlUYXJnZXRbRmFjdG9yeVRhcmdldFtcIkRpcmVjdGl2ZVwiXSA9IDBdID0gXCJEaXJlY3RpdmVcIjtcbiAgICBGYWN0b3J5VGFyZ2V0W0ZhY3RvcnlUYXJnZXRbXCJDb21wb25lbnRcIl0gPSAxXSA9IFwiQ29tcG9uZW50XCI7XG4gICAgRmFjdG9yeVRhcmdldFtGYWN0b3J5VGFyZ2V0W1wiSW5qZWN0YWJsZVwiXSA9IDJdID0gXCJJbmplY3RhYmxlXCI7XG4gICAgRmFjdG9yeVRhcmdldFtGYWN0b3J5VGFyZ2V0W1wiUGlwZVwiXSA9IDNdID0gXCJQaXBlXCI7XG4gICAgRmFjdG9yeVRhcmdldFtGYWN0b3J5VGFyZ2V0W1wiTmdNb2R1bGVcIl0gPSA0XSA9IFwiTmdNb2R1bGVcIjtcbn0pKEZhY3RvcnlUYXJnZXQgfHwgKEZhY3RvcnlUYXJnZXQgPSB7fSkpO1xudmFyIFZpZXdFbmNhcHN1bGF0aW9uO1xuKGZ1bmN0aW9uIChWaWV3RW5jYXBzdWxhdGlvbikge1xuICAgIFZpZXdFbmNhcHN1bGF0aW9uW1ZpZXdFbmNhcHN1bGF0aW9uW1wiRW11bGF0ZWRcIl0gPSAwXSA9IFwiRW11bGF0ZWRcIjtcbiAgICAvLyBIaXN0b3JpY2FsbHkgdGhlIDEgdmFsdWUgd2FzIGZvciBgTmF0aXZlYCBlbmNhcHN1bGF0aW9uIHdoaWNoIGhhcyBiZWVuIHJlbW92ZWQgYXMgb2YgdjExLlxuICAgIFZpZXdFbmNhcHN1bGF0aW9uW1ZpZXdFbmNhcHN1bGF0aW9uW1wiTm9uZVwiXSA9IDJdID0gXCJOb25lXCI7XG4gICAgVmlld0VuY2Fwc3VsYXRpb25bVmlld0VuY2Fwc3VsYXRpb25bXCJTaGFkb3dEb21cIl0gPSAzXSA9IFwiU2hhZG93RG9tXCI7XG59KShWaWV3RW5jYXBzdWxhdGlvbiB8fCAoVmlld0VuY2Fwc3VsYXRpb24gPSB7fSkpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGdldENvbXBpbGVyRmFjYWRlKHJlcXVlc3QpIHtcbiAgICBjb25zdCBnbG9iYWxOZyA9IF9nbG9iYWxbJ25nJ107XG4gICAgaWYgKGdsb2JhbE5nICYmIGdsb2JhbE5nLsm1Y29tcGlsZXJGYWNhZGUpIHtcbiAgICAgICAgcmV0dXJuIGdsb2JhbE5nLsm1Y29tcGlsZXJGYWNhZGU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpIHtcbiAgICAgICAgLy8gTG9nIHRoZSB0eXBlIGFzIGFuIGVycm9yIHNvIHRoYXQgYSBkZXZlbG9wZXIgY2FuIGVhc2lseSBuYXZpZ2F0ZSB0byB0aGUgdHlwZSBmcm9tIHRoZVxuICAgICAgICAvLyBjb25zb2xlLlxuICAgICAgICBjb25zb2xlLmVycm9yKGBKSVQgY29tcGlsYXRpb24gZmFpbGVkIGZvciAke3JlcXVlc3Qua2luZH1gLCByZXF1ZXN0LnR5cGUpO1xuICAgICAgICBsZXQgbWVzc2FnZSA9IGBUaGUgJHtyZXF1ZXN0LmtpbmR9ICcke3JlcXVlc3RcbiAgICAgICAgICAgIC50eXBlLm5hbWV9JyBuZWVkcyB0byBiZSBjb21waWxlZCB1c2luZyB0aGUgSklUIGNvbXBpbGVyLCBidXQgJ0Bhbmd1bGFyL2NvbXBpbGVyJyBpcyBub3QgYXZhaWxhYmxlLlxcblxcbmA7XG4gICAgICAgIGlmIChyZXF1ZXN0LnVzYWdlID09PSAxIC8qIFBhcnRpYWxEZWNsYXJhdGlvbiAqLykge1xuICAgICAgICAgICAgbWVzc2FnZSArPSBgVGhlICR7cmVxdWVzdC5raW5kfSBpcyBwYXJ0IG9mIGEgbGlicmFyeSB0aGF0IGhhcyBiZWVuIHBhcnRpYWxseSBjb21waWxlZC5cXG5gO1xuICAgICAgICAgICAgbWVzc2FnZSArPVxuICAgICAgICAgICAgICAgIGBIb3dldmVyLCB0aGUgQW5ndWxhciBMaW5rZXIgaGFzIG5vdCBwcm9jZXNzZWQgdGhlIGxpYnJhcnkgc3VjaCB0aGF0IEpJVCBjb21waWxhdGlvbiBpcyB1c2VkIGFzIGZhbGxiYWNrLlxcbmA7XG4gICAgICAgICAgICBtZXNzYWdlICs9ICdcXG4nO1xuICAgICAgICAgICAgbWVzc2FnZSArPVxuICAgICAgICAgICAgICAgIGBJZGVhbGx5LCB0aGUgbGlicmFyeSBpcyBwcm9jZXNzZWQgdXNpbmcgdGhlIEFuZ3VsYXIgTGlua2VyIHRvIGJlY29tZSBmdWxseSBBT1QgY29tcGlsZWQuXFxuYDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UgKz1cbiAgICAgICAgICAgICAgICBgSklUIGNvbXBpbGF0aW9uIGlzIGRpc2NvdXJhZ2VkIGZvciBwcm9kdWN0aW9uIHVzZS1jYXNlcyEgQ29uc2lkZXIgdXNpbmcgQU9UIG1vZGUgaW5zdGVhZC5cXG5gO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UgKz1cbiAgICAgICAgICAgIGBBbHRlcm5hdGl2ZWx5LCB0aGUgSklUIGNvbXBpbGVyIHNob3VsZCBiZSBsb2FkZWQgYnkgYm9vdHN0cmFwcGluZyB1c2luZyAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJyBvciAnQGFuZ3VsYXIvcGxhdGZvcm0tc2VydmVyJyxcXG5gO1xuICAgICAgICBtZXNzYWdlICs9XG4gICAgICAgICAgICBgb3IgbWFudWFsbHkgcHJvdmlkZSB0aGUgY29tcGlsZXIgd2l0aCAnaW1wb3J0IFwiQGFuZ3VsYXIvY29tcGlsZXJcIjsnIGJlZm9yZSBib290c3RyYXBwaW5nLmA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSklUIGNvbXBpbGVyIHVuYXZhaWxhYmxlJyk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVwcmVzZW50cyBhIHR5cGUgdGhhdCBhIENvbXBvbmVudCBvciBvdGhlciBvYmplY3QgaXMgaW5zdGFuY2VzIG9mLlxuICpcbiAqIEFuIGV4YW1wbGUgb2YgYSBgVHlwZWAgaXMgYE15Q3VzdG9tQ29tcG9uZW50YCBjbGFzcywgd2hpY2ggaW4gSmF2YVNjcmlwdCBpcyByZXByZXNlbnRlZCBieVxuICogdGhlIGBNeUN1c3RvbUNvbXBvbmVudGAgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBUeXBlID0gRnVuY3Rpb247XG5mdW5jdGlvbiBpc1R5cGUodikge1xuICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gRVM2IHNwcmVhZCwgYWRkIGVhY2ggaXRlbSB0byBhbiBhcnJheS5cbiAqXG4gKiBAcGFyYW0gaXRlbXMgVGhlIGl0ZW1zIHRvIGFkZFxuICogQHBhcmFtIGFyciBUaGUgYXJyYXkgdG8gd2hpY2ggeW91IHdhbnQgdG8gYWRkIHRoZSBpdGVtc1xuICovXG5mdW5jdGlvbiBhZGRBbGxUb0FycmF5KGl0ZW1zLCBhcnIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFyci5wdXNoKGl0ZW1zW2ldKTtcbiAgICB9XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGNvbnRlbnRzIG9mIHR3byBhcnJheXMgaXMgaWRlbnRpY2FsXG4gKlxuICogQHBhcmFtIGEgZmlyc3QgYXJyYXlcbiAqIEBwYXJhbSBiIHNlY29uZCBhcnJheVxuICogQHBhcmFtIGlkZW50aXR5QWNjZXNzb3IgT3B0aW9uYWwgZnVuY3Rpb24gZm9yIGV4dHJhY3Rpbmcgc3RhYmxlIG9iamVjdCBpZGVudGl0eSBmcm9tIGEgdmFsdWUgaW5cbiAqICAgICB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RXF1YWxzKGEsIGIsIGlkZW50aXR5QWNjZXNzb3IpIHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCB2YWx1ZUEgPSBhW2ldO1xuICAgICAgICBsZXQgdmFsdWVCID0gYltpXTtcbiAgICAgICAgaWYgKGlkZW50aXR5QWNjZXNzb3IpIHtcbiAgICAgICAgICAgIHZhbHVlQSA9IGlkZW50aXR5QWNjZXNzb3IodmFsdWVBKTtcbiAgICAgICAgICAgIHZhbHVlQiA9IGlkZW50aXR5QWNjZXNzb3IodmFsdWVCKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWVCICE9PSB2YWx1ZUEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogRmxhdHRlbnMgYW4gYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW4obGlzdCwgZHN0KSB7XG4gICAgaWYgKGRzdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBkc3QgPSBsaXN0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgaXRlbSA9IGxpc3RbaV07XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGlubGluZSBpdC5cbiAgICAgICAgICAgIGlmIChkc3QgPT09IGxpc3QpIHtcbiAgICAgICAgICAgICAgICAvLyBPdXIgYXNzdW1wdGlvbiB0aGF0IHRoZSBsaXN0IHdhcyBhbHJlYWR5IGZsYXQgd2FzIHdyb25nIGFuZFxuICAgICAgICAgICAgICAgIC8vIHdlIG5lZWQgdG8gY2xvbmUgZmxhdCBzaW5jZSB3ZSBuZWVkIHRvIHdyaXRlIHRvIGl0LlxuICAgICAgICAgICAgICAgIGRzdCA9IGxpc3Quc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmbGF0dGVuKGl0ZW0sIGRzdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHN0ICE9PSBsaXN0KSB7XG4gICAgICAgICAgICBkc3QucHVzaChpdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZHN0O1xufVxuZnVuY3Rpb24gZGVlcEZvckVhY2goaW5wdXQsIGZuKSB7XG4gICAgaW5wdXQuZm9yRWFjaCh2YWx1ZSA9PiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IGRlZXBGb3JFYWNoKHZhbHVlLCBmbikgOiBmbih2YWx1ZSkpO1xufVxuZnVuY3Rpb24gYWRkVG9BcnJheShhcnIsIGluZGV4LCB2YWx1ZSkge1xuICAgIC8vIHBlcmY6IGFycmF5LnB1c2ggaXMgZmFzdGVyIHRoYW4gYXJyYXkuc3BsaWNlIVxuICAgIGlmIChpbmRleCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGFyci5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFyci5zcGxpY2UoaW5kZXgsIDAsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZW1vdmVGcm9tQXJyYXkoYXJyLCBpbmRleCkge1xuICAgIC8vIHBlcmY6IGFycmF5LnBvcCBpcyBmYXN0ZXIgdGhhbiBhcnJheS5zcGxpY2UhXG4gICAgaWYgKGluZGV4ID49IGFyci5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBhcnIucG9wKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlbMF07XG4gICAgfVxufVxuZnVuY3Rpb24gbmV3QXJyYXkoc2l6ZSwgdmFsdWUpIHtcbiAgICBjb25zdCBsaXN0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgbGlzdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59XG4vKipcbiAqIFJlbW92ZSBpdGVtIGZyb20gYXJyYXkgKFNhbWUgYXMgYEFycmF5LnNwbGljZSgpYCBidXQgZmFzdGVyLilcbiAqXG4gKiBgQXJyYXkuc3BsaWNlKClgIGlzIG5vdCBhcyBmYXN0IGJlY2F1c2UgaXQgaGFzIHRvIGFsbG9jYXRlIGFuIGFycmF5IGZvciB0aGUgZWxlbWVudHMgd2hpY2ggd2VyZVxuICogcmVtb3ZlZC4gVGhpcyBjYXVzZXMgbWVtb3J5IHByZXNzdXJlIGFuZCBzbG93cyBkb3duIGNvZGUgd2hlbiBtb3N0IG9mIHRoZSB0aW1lIHdlIGRvbid0XG4gKiBjYXJlIGFib3V0IHRoZSBkZWxldGVkIGl0ZW1zIGFycmF5LlxuICpcbiAqIGh0dHBzOi8vanNwZXJmLmNvbS9mYXN0LWFycmF5LXNwbGljZSAoQWJvdXQgMjB4IGZhc3RlcilcbiAqXG4gKiBAcGFyYW0gYXJyYXkgQXJyYXkgdG8gc3BsaWNlXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgZWxlbWVudCBpbiBhcnJheSB0byByZW1vdmUuXG4gKiBAcGFyYW0gY291bnQgTnVtYmVyIG9mIGl0ZW1zIHRvIHJlbW92ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTcGxpY2UoYXJyYXksIGluZGV4LCBjb3VudCkge1xuICAgIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCAtIGNvdW50O1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBhcnJheVtpbmRleCArIGNvdW50XTtcbiAgICAgICAgaW5kZXgrKztcbiAgICB9XG4gICAgd2hpbGUgKGNvdW50LS0pIHtcbiAgICAgICAgYXJyYXkucG9wKCk7IC8vIHNocmluayB0aGUgYXJyYXlcbiAgICB9XG59XG4vKipcbiAqIFNhbWUgYXMgYEFycmF5LnNwbGljZShpbmRleCwgMCwgdmFsdWUpYCBidXQgZmFzdGVyLlxuICpcbiAqIGBBcnJheS5zcGxpY2UoKWAgaXMgbm90IGZhc3QgYmVjYXVzZSBpdCBoYXMgdG8gYWxsb2NhdGUgYW4gYXJyYXkgZm9yIHRoZSBlbGVtZW50cyB3aGljaCB3ZXJlXG4gKiByZW1vdmVkLiBUaGlzIGNhdXNlcyBtZW1vcnkgcHJlc3N1cmUgYW5kIHNsb3dzIGRvd24gY29kZSB3aGVuIG1vc3Qgb2YgdGhlIHRpbWUgd2UgZG9uJ3RcbiAqIGNhcmUgYWJvdXQgdGhlIGRlbGV0ZWQgaXRlbXMgYXJyYXkuXG4gKlxuICogQHBhcmFtIGFycmF5IEFycmF5IHRvIHNwbGljZS5cbiAqIEBwYXJhbSBpbmRleCBJbmRleCBpbiBhcnJheSB3aGVyZSB0aGUgYHZhbHVlYCBzaG91bGQgYmUgYWRkZWQuXG4gKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gYWRkIHRvIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUluc2VydChhcnJheSwgaW5kZXgsIHZhbHVlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydExlc3NUaGFuT3JFcXVhbChpbmRleCwgYXJyYXkubGVuZ3RoLCAnQ2FuXFwndCBpbnNlcnQgcGFzdCBhcnJheSBlbmQuJyk7XG4gICAgbGV0IGVuZCA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoZW5kID4gaW5kZXgpIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNFbmQgPSBlbmQgLSAxO1xuICAgICAgICBhcnJheVtlbmRdID0gYXJyYXlbcHJldmlvdXNFbmRdO1xuICAgICAgICBlbmQgPSBwcmV2aW91c0VuZDtcbiAgICB9XG4gICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG59XG4vKipcbiAqIFNhbWUgYXMgYEFycmF5LnNwbGljZTIoaW5kZXgsIDAsIHZhbHVlMSwgdmFsdWUyKWAgYnV0IGZhc3Rlci5cbiAqXG4gKiBgQXJyYXkuc3BsaWNlKClgIGlzIG5vdCBmYXN0IGJlY2F1c2UgaXQgaGFzIHRvIGFsbG9jYXRlIGFuIGFycmF5IGZvciB0aGUgZWxlbWVudHMgd2hpY2ggd2VyZVxuICogcmVtb3ZlZC4gVGhpcyBjYXVzZXMgbWVtb3J5IHByZXNzdXJlIGFuZCBzbG93cyBkb3duIGNvZGUgd2hlbiBtb3N0IG9mIHRoZSB0aW1lIHdlIGRvbid0XG4gKiBjYXJlIGFib3V0IHRoZSBkZWxldGVkIGl0ZW1zIGFycmF5LlxuICpcbiAqIEBwYXJhbSBhcnJheSBBcnJheSB0byBzcGxpY2UuXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggaW4gYXJyYXkgd2hlcmUgdGhlIGB2YWx1ZWAgc2hvdWxkIGJlIGFkZGVkLlxuICogQHBhcmFtIHZhbHVlMSBWYWx1ZSB0byBhZGQgdG8gYXJyYXkuXG4gKiBAcGFyYW0gdmFsdWUyIFZhbHVlIHRvIGFkZCB0byBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbnNlcnQyKGFycmF5LCBpbmRleCwgdmFsdWUxLCB2YWx1ZTIpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TGVzc1RoYW5PckVxdWFsKGluZGV4LCBhcnJheS5sZW5ndGgsICdDYW5cXCd0IGluc2VydCBwYXN0IGFycmF5IGVuZC4nKTtcbiAgICBsZXQgZW5kID0gYXJyYXkubGVuZ3RoO1xuICAgIGlmIChlbmQgPT0gaW5kZXgpIHtcbiAgICAgICAgLy8gaW5zZXJ0aW5nIGF0IHRoZSBlbmQuXG4gICAgICAgIGFycmF5LnB1c2godmFsdWUxLCB2YWx1ZTIpO1xuICAgIH1cbiAgICBlbHNlIGlmIChlbmQgPT09IDEpIHtcbiAgICAgICAgLy8gY29ybmVyIGNhc2Ugd2hlbiB3ZSBoYXZlIGxlc3MgaXRlbXMgaW4gYXJyYXkgdGhhbiB3ZSBoYXZlIGl0ZW1zIHRvIGluc2VydC5cbiAgICAgICAgYXJyYXkucHVzaCh2YWx1ZTIsIGFycmF5WzBdKTtcbiAgICAgICAgYXJyYXlbMF0gPSB2YWx1ZTE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBlbmQtLTtcbiAgICAgICAgYXJyYXkucHVzaChhcnJheVtlbmQgLSAxXSwgYXJyYXlbZW5kXSk7XG4gICAgICAgIHdoaWxlIChlbmQgPiBpbmRleCkge1xuICAgICAgICAgICAgY29uc3QgcHJldmlvdXNFbmQgPSBlbmQgLSAyO1xuICAgICAgICAgICAgYXJyYXlbZW5kXSA9IGFycmF5W3ByZXZpb3VzRW5kXTtcbiAgICAgICAgICAgIGVuZC0tO1xuICAgICAgICB9XG4gICAgICAgIGFycmF5W2luZGV4XSA9IHZhbHVlMTtcbiAgICAgICAgYXJyYXlbaW5kZXggKyAxXSA9IHZhbHVlMjtcbiAgICB9XG59XG4vKipcbiAqIEluc2VydCBhIGB2YWx1ZWAgaW50byBhbiBgYXJyYXlgIHNvIHRoYXQgdGhlIGFycmF5IHJlbWFpbnMgc29ydGVkLlxuICpcbiAqIE5PVEU6XG4gKiAtIER1cGxpY2F0ZXMgYXJlIG5vdCBhbGxvd2VkLCBhbmQgYXJlIGlnbm9yZWQuXG4gKiAtIFRoaXMgdXNlcyBiaW5hcnkgc2VhcmNoIGFsZ29yaXRobSBmb3IgZmFzdCBpbnNlcnRzLlxuICpcbiAqIEBwYXJhbSBhcnJheSBBIHNvcnRlZCBhcnJheSB0byBpbnNlcnQgaW50by5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zZXJ0LlxuICogQHJldHVybnMgaW5kZXggb2YgdGhlIGluc2VydGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBhcnJheUluc2VydFNvcnRlZChhcnJheSwgdmFsdWUpIHtcbiAgICBsZXQgaW5kZXggPSBhcnJheUluZGV4T2ZTb3J0ZWQoYXJyYXksIHZhbHVlKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIC8vIGlmIHdlIGRpZCBub3QgZmluZCBpdCBpbnNlcnQgaXQuXG4gICAgICAgIGluZGV4ID0gfmluZGV4O1xuICAgICAgICBhcnJheUluc2VydChhcnJheSwgaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuLyoqXG4gKiBSZW1vdmUgYHZhbHVlYCBmcm9tIGEgc29ydGVkIGBhcnJheWAuXG4gKlxuICogTk9URTpcbiAqIC0gVGhpcyB1c2VzIGJpbmFyeSBzZWFyY2ggYWxnb3JpdGhtIGZvciBmYXN0IHJlbW92YWxzLlxuICpcbiAqIEBwYXJhbSBhcnJheSBBIHNvcnRlZCBhcnJheSB0byByZW1vdmUgZnJvbS5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMgaW5kZXggb2YgdGhlIHJlbW92ZWQgdmFsdWUuXG4gKiAgIC0gcG9zaXRpdmUgaW5kZXggaWYgdmFsdWUgZm91bmQgYW5kIHJlbW92ZWQuXG4gKiAgIC0gbmVnYXRpdmUgaW5kZXggaWYgdmFsdWUgbm90IGZvdW5kLiAoYH5pbmRleGAgdG8gZ2V0IHRoZSB2YWx1ZSB3aGVyZSBpdCBzaG91bGQgaGF2ZSBiZWVuXG4gKiAgICAgaW5zZXJ0ZWQpXG4gKi9cbmZ1bmN0aW9uIGFycmF5UmVtb3ZlU29ydGVkKGFycmF5LCB2YWx1ZSkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyYXlJbmRleE9mU29ydGVkKGFycmF5LCB2YWx1ZSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgYXJyYXlTcGxpY2UoYXJyYXksIGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuLyoqXG4gKiBHZXQgYW4gaW5kZXggb2YgYW4gYHZhbHVlYCBpbiBhIHNvcnRlZCBgYXJyYXlgLlxuICpcbiAqIE5PVEU6XG4gKiAtIFRoaXMgdXNlcyBiaW5hcnkgc2VhcmNoIGFsZ29yaXRobSBmb3IgZmFzdCByZW1vdmFscy5cbiAqXG4gKiBAcGFyYW0gYXJyYXkgQSBzb3J0ZWQgYXJyYXkgdG8gYmluYXJ5IHNlYXJjaC5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gbG9vayBmb3IuXG4gKiBAcmV0dXJucyBpbmRleCBvZiB0aGUgdmFsdWUuXG4gKiAgIC0gcG9zaXRpdmUgaW5kZXggaWYgdmFsdWUgZm91bmQuXG4gKiAgIC0gbmVnYXRpdmUgaW5kZXggaWYgdmFsdWUgbm90IGZvdW5kLiAoYH5pbmRleGAgdG8gZ2V0IHRoZSB2YWx1ZSB3aGVyZSBpdCBzaG91bGQgaGF2ZSBiZWVuXG4gKiAgICAgbG9jYXRlZClcbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmRleE9mU29ydGVkKGFycmF5LCB2YWx1ZSkge1xuICAgIHJldHVybiBfYXJyYXlJbmRleE9mU29ydGVkKGFycmF5LCB2YWx1ZSwgMCk7XG59XG4vKipcbiAqIFNldCBhIGB2YWx1ZWAgZm9yIGEgYGtleWAuXG4gKlxuICogQHBhcmFtIGtleVZhbHVlQXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIGtleSBUaGUga2V5IHRvIGxvY2F0ZSBvciBjcmVhdGUuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldCBmb3IgYSBga2V5YC5cbiAqIEByZXR1cm5zIGluZGV4IChhbHdheXMgZXZlbikgb2Ygd2hlcmUgdGhlIHZhbHVlIHZhcyBzZXQuXG4gKi9cbmZ1bmN0aW9uIGtleVZhbHVlQXJyYXlTZXQoa2V5VmFsdWVBcnJheSwga2V5LCB2YWx1ZSkge1xuICAgIGxldCBpbmRleCA9IGtleVZhbHVlQXJyYXlJbmRleE9mKGtleVZhbHVlQXJyYXksIGtleSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgLy8gaWYgd2UgZm91bmQgaXQgc2V0IGl0LlxuICAgICAgICBrZXlWYWx1ZUFycmF5W2luZGV4IHwgMV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGluZGV4ID0gfmluZGV4O1xuICAgICAgICBhcnJheUluc2VydDIoa2V5VmFsdWVBcnJheSwgaW5kZXgsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG59XG4vKipcbiAqIFJldHJpZXZlIGEgYHZhbHVlYCBmb3IgYSBga2V5YCAob24gYHVuZGVmaW5lZGAgaWYgbm90IGZvdW5kLilcbiAqXG4gKiBAcGFyYW0ga2V5VmFsdWVBcnJheSB0byBzZWFyY2guXG4gKiBAcGFyYW0ga2V5IFRoZSBrZXkgdG8gbG9jYXRlLlxuICogQHJldHVybiBUaGUgYHZhbHVlYCBzdG9yZWQgYXQgdGhlIGBrZXlgIGxvY2F0aW9uIG9yIGB1bmRlZmluZWQgaWYgbm90IGZvdW5kLlxuICovXG5mdW5jdGlvbiBrZXlWYWx1ZUFycmF5R2V0KGtleVZhbHVlQXJyYXksIGtleSkge1xuICAgIGNvbnN0IGluZGV4ID0ga2V5VmFsdWVBcnJheUluZGV4T2Yoa2V5VmFsdWVBcnJheSwga2V5KTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAvLyBpZiB3ZSBmb3VuZCBpdCByZXRyaWV2ZSBpdC5cbiAgICAgICAgcmV0dXJuIGtleVZhbHVlQXJyYXlbaW5kZXggfCAxXTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8qKlxuICogUmV0cmlldmUgYSBga2V5YCBpbmRleCB2YWx1ZSBpbiB0aGUgYXJyYXkgb3IgYC0xYCBpZiBub3QgZm91bmQuXG4gKlxuICogQHBhcmFtIGtleVZhbHVlQXJyYXkgdG8gc2VhcmNoLlxuICogQHBhcmFtIGtleSBUaGUga2V5IHRvIGxvY2F0ZS5cbiAqIEByZXR1cm5zIGluZGV4IG9mIHdoZXJlIHRoZSBrZXkgaXMgKG9yIHNob3VsZCBoYXZlIGJlZW4uKVxuICogICAtIHBvc2l0aXZlIChldmVuKSBpbmRleCBpZiBrZXkgZm91bmQuXG4gKiAgIC0gbmVnYXRpdmUgaW5kZXggaWYga2V5IG5vdCBmb3VuZC4gKGB+aW5kZXhgIChldmVuKSB0byBnZXQgdGhlIGluZGV4IHdoZXJlIGl0IHNob3VsZCBoYXZlXG4gKiAgICAgYmVlbiBpbnNlcnRlZC4pXG4gKi9cbmZ1bmN0aW9uIGtleVZhbHVlQXJyYXlJbmRleE9mKGtleVZhbHVlQXJyYXksIGtleSkge1xuICAgIHJldHVybiBfYXJyYXlJbmRleE9mU29ydGVkKGtleVZhbHVlQXJyYXksIGtleSwgMSk7XG59XG4vKipcbiAqIERlbGV0ZSBhIGBrZXlgIChhbmQgYHZhbHVlYCkgZnJvbSB0aGUgYEtleVZhbHVlQXJyYXlgLlxuICpcbiAqIEBwYXJhbSBrZXlWYWx1ZUFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSBrZXkgVGhlIGtleSB0byBsb2NhdGUgb3IgZGVsZXRlIChpZiBleGlzdCkuXG4gKiBAcmV0dXJucyBpbmRleCBvZiB3aGVyZSB0aGUga2V5IHdhcyAob3Igc2hvdWxkIGhhdmUgYmVlbi4pXG4gKiAgIC0gcG9zaXRpdmUgKGV2ZW4pIGluZGV4IGlmIGtleSBmb3VuZCBhbmQgZGVsZXRlZC5cbiAqICAgLSBuZWdhdGl2ZSBpbmRleCBpZiBrZXkgbm90IGZvdW5kLiAoYH5pbmRleGAgKGV2ZW4pIHRvIGdldCB0aGUgaW5kZXggd2hlcmUgaXQgc2hvdWxkIGhhdmVcbiAqICAgICBiZWVuLilcbiAqL1xuZnVuY3Rpb24ga2V5VmFsdWVBcnJheURlbGV0ZShrZXlWYWx1ZUFycmF5LCBrZXkpIHtcbiAgICBjb25zdCBpbmRleCA9IGtleVZhbHVlQXJyYXlJbmRleE9mKGtleVZhbHVlQXJyYXksIGtleSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgLy8gaWYgd2UgZm91bmQgaXQgcmVtb3ZlIGl0LlxuICAgICAgICBhcnJheVNwbGljZShrZXlWYWx1ZUFycmF5LCBpbmRleCwgMik7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbn1cbi8qKlxuICogSU5URVJOQUw6IEdldCBhbiBpbmRleCBvZiBhbiBgdmFsdWVgIGluIGEgc29ydGVkIGBhcnJheWAgYnkgZ3JvdXBpbmcgc2VhcmNoIGJ5IGBzaGlmdGAuXG4gKlxuICogTk9URTpcbiAqIC0gVGhpcyB1c2VzIGJpbmFyeSBzZWFyY2ggYWxnb3JpdGhtIGZvciBmYXN0IHJlbW92YWxzLlxuICpcbiAqIEBwYXJhbSBhcnJheSBBIHNvcnRlZCBhcnJheSB0byBiaW5hcnkgc2VhcmNoLlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBsb29rIGZvci5cbiAqIEBwYXJhbSBzaGlmdCBncm91cGluZyBzaGlmdC5cbiAqICAgLSBgMGAgbWVhbnMgbG9vayBhdCBldmVyeSBsb2NhdGlvblxuICogICAtIGAxYCBtZWFucyBvbmx5IGxvb2sgYXQgZXZlcnkgb3RoZXIgKGV2ZW4pIGxvY2F0aW9uICh0aGUgb2RkIGxvY2F0aW9ucyBhcmUgdG8gYmUgaWdub3JlZCBhc1xuICogICAgICAgICB0aGV5IGFyZSB2YWx1ZXMuKVxuICogQHJldHVybnMgaW5kZXggb2YgdGhlIHZhbHVlLlxuICogICAtIHBvc2l0aXZlIGluZGV4IGlmIHZhbHVlIGZvdW5kLlxuICogICAtIG5lZ2F0aXZlIGluZGV4IGlmIHZhbHVlIG5vdCBmb3VuZC4gKGB+aW5kZXhgIHRvIGdldCB0aGUgdmFsdWUgd2hlcmUgaXQgc2hvdWxkIGhhdmUgYmVlblxuICogaW5zZXJ0ZWQpXG4gKi9cbmZ1bmN0aW9uIF9hcnJheUluZGV4T2ZTb3J0ZWQoYXJyYXksIHZhbHVlLCBzaGlmdCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbChBcnJheS5pc0FycmF5KGFycmF5KSwgdHJ1ZSwgJ0V4cGVjdGluZyBhbiBhcnJheScpO1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IGFycmF5Lmxlbmd0aCA+PiBzaGlmdDtcbiAgICB3aGlsZSAoZW5kICE9PSBzdGFydCkge1xuICAgICAgICBjb25zdCBtaWRkbGUgPSBzdGFydCArICgoZW5kIC0gc3RhcnQpID4+IDEpOyAvLyBmaW5kIHRoZSBtaWRkbGUuXG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBhcnJheVttaWRkbGUgPDwgc2hpZnRdO1xuICAgICAgICBpZiAodmFsdWUgPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAobWlkZGxlIDw8IHNoaWZ0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50ID4gdmFsdWUpIHtcbiAgICAgICAgICAgIGVuZCA9IG1pZGRsZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gbWlkZGxlICsgMTsgLy8gV2UgYWxyZWFkeSBzZWFyY2hlZCBtaWRkbGUgc28gbWFrZSBpdCBub24taW5jbHVzaXZlIGJ5IGFkZGluZyAxXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIH4oZW5kIDw8IHNoaWZ0KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKlxuICogIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1xuICogQXR0ZW50aW9uOiBUaGVzZSBSZWd1bGFyIGV4cHJlc3Npb25zIGhhdmUgdG8gaG9sZCBldmVuIGlmIHRoZSBjb2RlIGlzIG1pbmlmaWVkIVxuICogIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNcbiAqL1xuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBkZXRlY3RzIHBhc3MtdGhyb3VnaCBjb25zdHJ1Y3RvcnMgZm9yIEVTNSBvdXRwdXQuIFRoaXMgUmVnZXhcbiAqIGludGVuZHMgdG8gY2FwdHVyZSB0aGUgY29tbW9uIGRlbGVnYXRpb24gcGF0dGVybiBlbWl0dGVkIGJ5IFR5cGVTY3JpcHQgYW5kIEJhYmVsLiBBbHNvXG4gKiBpdCBpbnRlbmRzIHRvIGNhcHR1cmUgdGhlIHBhdHRlcm4gd2hlcmUgZXhpc3RpbmcgY29uc3RydWN0b3JzIGhhdmUgYmVlbiBkb3dubGV2ZWxlZCBmcm9tXG4gKiBFUzIwMTUgdG8gRVM1IHVzaW5nIFR5cGVTY3JpcHQgdy8gZG93bmxldmVsIGl0ZXJhdGlvbi4gZS5nLlxuICpcbiAqIGBgYFxuICogICBmdW5jdGlvbiBNeUNsYXNzKCkge1xuICogICAgIHZhciBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gKiBgYGBcbiAqXG4gKiBkb3dubGV2ZWxlZCB0byBFUzUgd2l0aCBgZG93bmxldmVsSXRlcmF0aW9uYCBmb3IgVHlwZVNjcmlwdCA8IDQuMjpcbiAqIGBgYFxuICogICBmdW5jdGlvbiBNeUNsYXNzKCkge1xuICogICAgIHZhciBfdGhpcyA9IF9zdXBlci5hcHBseSh0aGlzLCBfX3NwcmVhZChhcmd1bWVudHMpKSB8fCB0aGlzO1xuICogYGBgXG4gKlxuICogb3IgZG93bmxldmVsZWQgdG8gRVM1IHdpdGggYGRvd25sZXZlbEl0ZXJhdGlvbmAgZm9yIFR5cGVTY3JpcHQgPj0gNC4yOlxuICogYGBgXG4gKiAgIGZ1bmN0aW9uIE15Q2xhc3MoKSB7XG4gKiAgICAgdmFyIF90aGlzID0gX3N1cGVyLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmd1bWVudHMpLCBmYWxzZSkpIHx8IHRoaXM7XG4gKiBgYGBcbiAqXG4gKiBNb3JlIGRldGFpbHMgY2FuIGJlIGZvdW5kIGluOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8zODQ1My5cbiAqL1xuY29uc3QgRVM1X0RFTEVHQVRFX0NUT1IgPSAvXmZ1bmN0aW9uXFxzK1xcUytcXChcXClcXHMqe1tcXHNcXFNdK1xcLmFwcGx5XFwodGhpcyxcXHMqKGFyZ3VtZW50c3woPzpbXigpXStcXChcXFtcXF0sKT9bXigpXStcXChhcmd1bWVudHNcXCkuKilcXCkvO1xuLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGRldGVjdHMgRVMyMDE1IGNsYXNzZXMgd2hpY2ggZXh0ZW5kIGZyb20gb3RoZXIgY2xhc3Nlcy4gKi9cbmNvbnN0IEVTMjAxNV9JTkhFUklURURfQ0xBU1MgPSAvXmNsYXNzXFxzK1tBLVphLXpcXGQkX10qXFxzKmV4dGVuZHNcXHMrW157XSt7Lztcbi8qKlxuICogUmVndWxhciBleHByZXNzaW9uIHRoYXQgZGV0ZWN0cyBFUzIwMTUgY2xhc3NlcyB3aGljaCBleHRlbmQgZnJvbSBvdGhlciBjbGFzc2VzIGFuZFxuICogaGF2ZSBhbiBleHBsaWNpdCBjb25zdHJ1Y3RvciBkZWZpbmVkLlxuICovXG5jb25zdCBFUzIwMTVfSU5IRVJJVEVEX0NMQVNTX1dJVEhfQ1RPUiA9IC9eY2xhc3NcXHMrW0EtWmEtelxcZCRfXSpcXHMqZXh0ZW5kc1xccytbXntdK3tbXFxzXFxTXSpjb25zdHJ1Y3RvclxccypcXCgvO1xuLyoqXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBkZXRlY3RzIEVTMjAxNSBjbGFzc2VzIHdoaWNoIGV4dGVuZCBmcm9tIG90aGVyIGNsYXNzZXNcbiAqIGFuZCBpbmhlcml0IGEgY29uc3RydWN0b3IuXG4gKi9cbmNvbnN0IEVTMjAxNV9JTkhFUklURURfQ0xBU1NfV0lUSF9ERUxFR0FURV9DVE9SID0gL15jbGFzc1xccytbQS1aYS16XFxkJF9dKlxccypleHRlbmRzXFxzK1tee10re1tcXHNcXFNdKmNvbnN0cnVjdG9yXFxzKlxcKFxcKVxccyp7W159XSpzdXBlclxcKFxcLlxcLlxcLmFyZ3VtZW50c1xcKS87XG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIGEgc3RyaW5naWZpZWQgdHlwZSBpcyBhIGNsYXNzIHdoaWNoIGRlbGVnYXRlcyBpdHMgY29uc3RydWN0b3JcbiAqIHRvIGl0cyBwYXJlbnQuXG4gKlxuICogVGhpcyBpcyBub3QgdHJpdmlhbCBzaW5jZSBjb21waWxlZCBjb2RlIGNhbiBhY3R1YWxseSBjb250YWluIGEgY29uc3RydWN0b3IgZnVuY3Rpb25cbiAqIGV2ZW4gaWYgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb2RlIGRpZCBub3QuIEZvciBpbnN0YW5jZSwgd2hlbiB0aGUgY2hpbGQgY2xhc3MgY29udGFpbnNcbiAqIGFuIGluaXRpYWxpemVkIGluc3RhbmNlIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBpc0RlbGVnYXRlQ3Rvcih0eXBlU3RyKSB7XG4gICAgcmV0dXJuIEVTNV9ERUxFR0FURV9DVE9SLnRlc3QodHlwZVN0cikgfHxcbiAgICAgICAgRVMyMDE1X0lOSEVSSVRFRF9DTEFTU19XSVRIX0RFTEVHQVRFX0NUT1IudGVzdCh0eXBlU3RyKSB8fFxuICAgICAgICAoRVMyMDE1X0lOSEVSSVRFRF9DTEFTUy50ZXN0KHR5cGVTdHIpICYmICFFUzIwMTVfSU5IRVJJVEVEX0NMQVNTX1dJVEhfQ1RPUi50ZXN0KHR5cGVTdHIpKTtcbn1cbmNsYXNzIFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMge1xuICAgIGNvbnN0cnVjdG9yKHJlZmxlY3QpIHtcbiAgICAgICAgdGhpcy5fcmVmbGVjdCA9IHJlZmxlY3QgfHwgX2dsb2JhbFsnUmVmbGVjdCddO1xuICAgIH1cbiAgICBpc1JlZmxlY3Rpb25FbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZmFjdG9yeSh0KSB7XG4gICAgICAgIHJldHVybiAoLi4uYXJncykgPT4gbmV3IHQoLi4uYXJncyk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfemlwVHlwZXNBbmRBbm5vdGF0aW9ucyhwYXJhbVR5cGVzLCBwYXJhbUFubm90YXRpb25zKSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGlmICh0eXBlb2YgcGFyYW1UeXBlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ld0FycmF5KHBhcmFtQW5ub3RhdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ld0FycmF5KHBhcmFtVHlwZXMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gVFMgb3V0cHV0cyBPYmplY3QgZm9yIHBhcmFtZXRlcnMgd2l0aG91dCB0eXBlcywgd2hpbGUgVHJhY2V1ciBvbWl0c1xuICAgICAgICAgICAgLy8gdGhlIGFubm90YXRpb25zLiBGb3Igbm93IHdlIHByZXNlcnZlIHRoZSBUcmFjZXVyIGJlaGF2aW9yIHRvIGFpZFxuICAgICAgICAgICAgLy8gbWlncmF0aW9uLCBidXQgdGhpcyBjYW4gYmUgcmV2aXNpdGVkLlxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbVR5cGVzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyYW1UeXBlc1tpXSAmJiBwYXJhbVR5cGVzW2ldICE9IE9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IFtwYXJhbVR5cGVzW2ldXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtpXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtQW5ub3RhdGlvbnMgJiYgcGFyYW1Bbm5vdGF0aW9uc1tpXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gcmVzdWx0W2ldLmNvbmNhdChwYXJhbUFubm90YXRpb25zW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBfb3duUGFyYW1ldGVycyh0eXBlLCBwYXJlbnRDdG9yKSB7XG4gICAgICAgIGNvbnN0IHR5cGVTdHIgPSB0eXBlLnRvU3RyaW5nKCk7XG4gICAgICAgIC8vIElmIHdlIGhhdmUgbm8gZGVjb3JhdG9ycywgd2Ugb25seSBoYXZlIGZ1bmN0aW9uLmxlbmd0aCBhcyBtZXRhZGF0YS5cbiAgICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0byBkZXRlY3Qgd2hldGhlciBhIGNoaWxkIGNsYXNzIGRlY2xhcmVkIGFuIG93biBjb25zdHJ1Y3RvciBvciBub3QsXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gbG9vayBpbnNpZGUgb2YgdGhhdCBjb25zdHJ1Y3RvciB0byBjaGVjayB3aGV0aGVyIGl0IGlzXG4gICAgICAgIC8vIGp1c3QgY2FsbGluZyB0aGUgcGFyZW50LlxuICAgICAgICAvLyBUaGlzIGFsc28gaGVscHMgdG8gd29yayBhcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTI0MzlcbiAgICAgICAgLy8gdGhhdCBzZXRzICdkZXNpZ246cGFyYW10eXBlcycgdG8gW11cbiAgICAgICAgLy8gaWYgYSBjbGFzcyBpbmhlcml0cyBmcm9tIGFub3RoZXIgY2xhc3MgYnV0IGhhcyBubyBjdG9yIGRlY2xhcmVkIGl0c2VsZi5cbiAgICAgICAgaWYgKGlzRGVsZWdhdGVDdG9yKHR5cGVTdHIpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVmZXIgdGhlIGRpcmVjdCBBUEkuXG4gICAgICAgIGlmICh0eXBlLnBhcmFtZXRlcnMgJiYgdHlwZS5wYXJhbWV0ZXJzICE9PSBwYXJlbnRDdG9yLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlLnBhcmFtZXRlcnM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQVBJIG9mIHRzaWNrbGUgZm9yIGxvd2VyaW5nIGRlY29yYXRvcnMgdG8gcHJvcGVydGllcyBvbiB0aGUgY2xhc3MuXG4gICAgICAgIGNvbnN0IHRzaWNrbGVDdG9yUGFyYW1zID0gdHlwZS5jdG9yUGFyYW1ldGVycztcbiAgICAgICAgaWYgKHRzaWNrbGVDdG9yUGFyYW1zICYmIHRzaWNrbGVDdG9yUGFyYW1zICE9PSBwYXJlbnRDdG9yLmN0b3JQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICAvLyBOZXdlciB0c2lja2xlIHVzZXMgYSBmdW5jdGlvbiBjbG9zdXJlXG4gICAgICAgICAgICAvLyBSZXRhaW4gdGhlIG5vbi1mdW5jdGlvbiBjYXNlIGZvciBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgdHNpY2tsZVxuICAgICAgICAgICAgY29uc3QgY3RvclBhcmFtZXRlcnMgPSB0eXBlb2YgdHNpY2tsZUN0b3JQYXJhbXMgPT09ICdmdW5jdGlvbicgPyB0c2lja2xlQ3RvclBhcmFtcygpIDogdHNpY2tsZUN0b3JQYXJhbXM7XG4gICAgICAgICAgICBjb25zdCBwYXJhbVR5cGVzID0gY3RvclBhcmFtZXRlcnMubWFwKChjdG9yUGFyYW0pID0+IGN0b3JQYXJhbSAmJiBjdG9yUGFyYW0udHlwZSk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbUFubm90YXRpb25zID0gY3RvclBhcmFtZXRlcnMubWFwKChjdG9yUGFyYW0pID0+IGN0b3JQYXJhbSAmJiBjb252ZXJ0VHNpY2tsZURlY29yYXRvckludG9NZXRhZGF0YShjdG9yUGFyYW0uZGVjb3JhdG9ycykpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ppcFR5cGVzQW5kQW5ub3RhdGlvbnMocGFyYW1UeXBlcywgcGFyYW1Bbm5vdGF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQVBJIGZvciBtZXRhZGF0YSBjcmVhdGVkIGJ5IGludm9raW5nIHRoZSBkZWNvcmF0b3JzLlxuICAgICAgICBjb25zdCBwYXJhbUFubm90YXRpb25zID0gdHlwZS5oYXNPd25Qcm9wZXJ0eShQQVJBTUVURVJTKSAmJiB0eXBlW1BBUkFNRVRFUlNdO1xuICAgICAgICBjb25zdCBwYXJhbVR5cGVzID0gdGhpcy5fcmVmbGVjdCAmJiB0aGlzLl9yZWZsZWN0LmdldE93bk1ldGFkYXRhICYmXG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0LmdldE93bk1ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIHR5cGUpO1xuICAgICAgICBpZiAocGFyYW1UeXBlcyB8fCBwYXJhbUFubm90YXRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5femlwVHlwZXNBbmRBbm5vdGF0aW9ucyhwYXJhbVR5cGVzLCBwYXJhbUFubm90YXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBhIGNsYXNzIGhhcyBubyBkZWNvcmF0b3JzLCBhdCBsZWFzdCBjcmVhdGUgbWV0YWRhdGFcbiAgICAgICAgLy8gYmFzZWQgb24gZnVuY3Rpb24ubGVuZ3RoLlxuICAgICAgICAvLyBOb3RlOiBXZSBrbm93IHRoYXQgdGhpcyBpcyBhIHJlYWwgY29uc3RydWN0b3IgYXMgd2UgY2hlY2tlZFxuICAgICAgICAvLyB0aGUgY29udGVudCBvZiB0aGUgY29uc3RydWN0b3IgYWJvdmUuXG4gICAgICAgIHJldHVybiBuZXdBcnJheSh0eXBlLmxlbmd0aCk7XG4gICAgfVxuICAgIHBhcmFtZXRlcnModHlwZSkge1xuICAgICAgICAvLyBOb3RlOiBvbmx5IHJlcG9ydCBtZXRhZGF0YSBpZiB3ZSBoYXZlIGF0IGxlYXN0IG9uZSBjbGFzcyBkZWNvcmF0b3JcbiAgICAgICAgLy8gdG8gc3RheSBpbiBzeW5jIHdpdGggdGhlIHN0YXRpYyByZWZsZWN0b3IuXG4gICAgICAgIGlmICghaXNUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50Q3RvciA9IGdldFBhcmVudEN0b3IodHlwZSk7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzID0gdGhpcy5fb3duUGFyYW1ldGVycyh0eXBlLCBwYXJlbnRDdG9yKTtcbiAgICAgICAgaWYgKCFwYXJhbWV0ZXJzICYmIHBhcmVudEN0b3IgIT09IE9iamVjdCkge1xuICAgICAgICAgICAgcGFyYW1ldGVycyA9IHRoaXMucGFyYW1ldGVycyhwYXJlbnRDdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyYW1ldGVycyB8fCBbXTtcbiAgICB9XG4gICAgX293bkFubm90YXRpb25zKHR5cGVPckZ1bmMsIHBhcmVudEN0b3IpIHtcbiAgICAgICAgLy8gUHJlZmVyIHRoZSBkaXJlY3QgQVBJLlxuICAgICAgICBpZiAodHlwZU9yRnVuYy5hbm5vdGF0aW9ucyAmJiB0eXBlT3JGdW5jLmFubm90YXRpb25zICE9PSBwYXJlbnRDdG9yLmFubm90YXRpb25zKSB7XG4gICAgICAgICAgICBsZXQgYW5ub3RhdGlvbnMgPSB0eXBlT3JGdW5jLmFubm90YXRpb25zO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhbm5vdGF0aW9ucyA9PT0gJ2Z1bmN0aW9uJyAmJiBhbm5vdGF0aW9ucy5hbm5vdGF0aW9ucykge1xuICAgICAgICAgICAgICAgIGFubm90YXRpb25zID0gYW5ub3RhdGlvbnMuYW5ub3RhdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYW5ub3RhdGlvbnM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQVBJIG9mIHRzaWNrbGUgZm9yIGxvd2VyaW5nIGRlY29yYXRvcnMgdG8gcHJvcGVydGllcyBvbiB0aGUgY2xhc3MuXG4gICAgICAgIGlmICh0eXBlT3JGdW5jLmRlY29yYXRvcnMgJiYgdHlwZU9yRnVuYy5kZWNvcmF0b3JzICE9PSBwYXJlbnRDdG9yLmRlY29yYXRvcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBjb252ZXJ0VHNpY2tsZURlY29yYXRvckludG9NZXRhZGF0YSh0eXBlT3JGdW5jLmRlY29yYXRvcnMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFQSSBmb3IgbWV0YWRhdGEgY3JlYXRlZCBieSBpbnZva2luZyB0aGUgZGVjb3JhdG9ycy5cbiAgICAgICAgaWYgKHR5cGVPckZ1bmMuaGFzT3duUHJvcGVydHkoQU5OT1RBVElPTlMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZU9yRnVuY1tBTk5PVEFUSU9OU107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGFubm90YXRpb25zKHR5cGVPckZ1bmMpIHtcbiAgICAgICAgaWYgKCFpc1R5cGUodHlwZU9yRnVuYykpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnRDdG9yID0gZ2V0UGFyZW50Q3Rvcih0eXBlT3JGdW5jKTtcbiAgICAgICAgY29uc3Qgb3duQW5ub3RhdGlvbnMgPSB0aGlzLl9vd25Bbm5vdGF0aW9ucyh0eXBlT3JGdW5jLCBwYXJlbnRDdG9yKSB8fCBbXTtcbiAgICAgICAgY29uc3QgcGFyZW50QW5ub3RhdGlvbnMgPSBwYXJlbnRDdG9yICE9PSBPYmplY3QgPyB0aGlzLmFubm90YXRpb25zKHBhcmVudEN0b3IpIDogW107XG4gICAgICAgIHJldHVybiBwYXJlbnRBbm5vdGF0aW9ucy5jb25jYXQob3duQW5ub3RhdGlvbnMpO1xuICAgIH1cbiAgICBfb3duUHJvcE1ldGFkYXRhKHR5cGVPckZ1bmMsIHBhcmVudEN0b3IpIHtcbiAgICAgICAgLy8gUHJlZmVyIHRoZSBkaXJlY3QgQVBJLlxuICAgICAgICBpZiAodHlwZU9yRnVuYy5wcm9wTWV0YWRhdGEgJiZcbiAgICAgICAgICAgIHR5cGVPckZ1bmMucHJvcE1ldGFkYXRhICE9PSBwYXJlbnRDdG9yLnByb3BNZXRhZGF0YSkge1xuICAgICAgICAgICAgbGV0IHByb3BNZXRhZGF0YSA9IHR5cGVPckZ1bmMucHJvcE1ldGFkYXRhO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wTWV0YWRhdGEgPT09ICdmdW5jdGlvbicgJiYgcHJvcE1ldGFkYXRhLnByb3BNZXRhZGF0YSkge1xuICAgICAgICAgICAgICAgIHByb3BNZXRhZGF0YSA9IHByb3BNZXRhZGF0YS5wcm9wTWV0YWRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJvcE1ldGFkYXRhO1xuICAgICAgICB9XG4gICAgICAgIC8vIEFQSSBvZiB0c2lja2xlIGZvciBsb3dlcmluZyBkZWNvcmF0b3JzIHRvIHByb3BlcnRpZXMgb24gdGhlIGNsYXNzLlxuICAgICAgICBpZiAodHlwZU9yRnVuYy5wcm9wRGVjb3JhdG9ycyAmJlxuICAgICAgICAgICAgdHlwZU9yRnVuYy5wcm9wRGVjb3JhdG9ycyAhPT0gcGFyZW50Q3Rvci5wcm9wRGVjb3JhdG9ycykge1xuICAgICAgICAgICAgY29uc3QgcHJvcERlY29yYXRvcnMgPSB0eXBlT3JGdW5jLnByb3BEZWNvcmF0b3JzO1xuICAgICAgICAgICAgY29uc3QgcHJvcE1ldGFkYXRhID0ge307XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wRGVjb3JhdG9ycykuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgICAgICAgICAgICBwcm9wTWV0YWRhdGFbcHJvcF0gPSBjb252ZXJ0VHNpY2tsZURlY29yYXRvckludG9NZXRhZGF0YShwcm9wRGVjb3JhdG9yc1twcm9wXSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwcm9wTWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQVBJIGZvciBtZXRhZGF0YSBjcmVhdGVkIGJ5IGludm9raW5nIHRoZSBkZWNvcmF0b3JzLlxuICAgICAgICBpZiAodHlwZU9yRnVuYy5oYXNPd25Qcm9wZXJ0eShQUk9QX01FVEFEQVRBKSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVPckZ1bmNbUFJPUF9NRVRBREFUQV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHByb3BNZXRhZGF0YSh0eXBlT3JGdW5jKSB7XG4gICAgICAgIGlmICghaXNUeXBlKHR5cGVPckZ1bmMpKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcGFyZW50Q3RvciA9IGdldFBhcmVudEN0b3IodHlwZU9yRnVuYyk7XG4gICAgICAgIGNvbnN0IHByb3BNZXRhZGF0YSA9IHt9O1xuICAgICAgICBpZiAocGFyZW50Q3RvciAhPT0gT2JqZWN0KSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRQcm9wTWV0YWRhdGEgPSB0aGlzLnByb3BNZXRhZGF0YShwYXJlbnRDdG9yKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHBhcmVudFByb3BNZXRhZGF0YSkuZm9yRWFjaCgocHJvcE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICBwcm9wTWV0YWRhdGFbcHJvcE5hbWVdID0gcGFyZW50UHJvcE1ldGFkYXRhW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG93blByb3BNZXRhZGF0YSA9IHRoaXMuX293blByb3BNZXRhZGF0YSh0eXBlT3JGdW5jLCBwYXJlbnRDdG9yKTtcbiAgICAgICAgaWYgKG93blByb3BNZXRhZGF0YSkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMob3duUHJvcE1ldGFkYXRhKS5mb3JFYWNoKChwcm9wTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlY29yYXRvcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcE1ldGFkYXRhLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWNvcmF0b3JzLnB1c2goLi4ucHJvcE1ldGFkYXRhW3Byb3BOYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlY29yYXRvcnMucHVzaCguLi5vd25Qcm9wTWV0YWRhdGFbcHJvcE5hbWVdKTtcbiAgICAgICAgICAgICAgICBwcm9wTWV0YWRhdGFbcHJvcE5hbWVdID0gZGVjb3JhdG9ycztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wTWV0YWRhdGE7XG4gICAgfVxuICAgIG93blByb3BNZXRhZGF0YSh0eXBlT3JGdW5jKSB7XG4gICAgICAgIGlmICghaXNUeXBlKHR5cGVPckZ1bmMpKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX293blByb3BNZXRhZGF0YSh0eXBlT3JGdW5jLCBnZXRQYXJlbnRDdG9yKHR5cGVPckZ1bmMpKSB8fCB7fTtcbiAgICB9XG4gICAgaGFzTGlmZWN5Y2xlSG9vayh0eXBlLCBsY1Byb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiB0eXBlIGluc3RhbmNlb2YgVHlwZSAmJiBsY1Byb3BlcnR5IGluIHR5cGUucHJvdG90eXBlO1xuICAgIH1cbiAgICBndWFyZHModHlwZSkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oJ28nLCAncmV0dXJuIG8uJyArIG5hbWUgKyAnOycpO1xuICAgIH1cbiAgICBzZXR0ZXIobmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdvJywgJ3YnLCAncmV0dXJuIG8uJyArIG5hbWUgKyAnID0gdjsnKTtcbiAgICB9XG4gICAgbWV0aG9kKG5hbWUpIHtcbiAgICAgICAgY29uc3QgZnVuY3Rpb25Cb2R5ID0gYGlmICghby4ke25hbWV9KSB0aHJvdyBuZXcgRXJyb3IoJ1wiJHtuYW1lfVwiIGlzIHVuZGVmaW5lZCcpO1xuICAgICAgICByZXR1cm4gby4ke25hbWV9LmFwcGx5KG8sIGFyZ3MpO2A7XG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oJ28nLCAnYXJncycsIGZ1bmN0aW9uQm9keSk7XG4gICAgfVxuICAgIC8vIFRoZXJlIGlzIG5vdCBhIGNvbmNlcHQgb2YgaW1wb3J0IHVyaSBpbiBKcywgYnV0IHRoaXMgaXMgdXNlZnVsIGluIGRldmVsb3BpbmcgRGFydCBhcHBsaWNhdGlvbnMuXG4gICAgaW1wb3J0VXJpKHR5cGUpIHtcbiAgICAgICAgLy8gU3RhdGljU3ltYm9sXG4gICAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZVsnZmlsZVBhdGgnXSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVbJ2ZpbGVQYXRoJ107XG4gICAgICAgIH1cbiAgICAgICAgLy8gUnVudGltZSB0eXBlXG4gICAgICAgIHJldHVybiBgLi8ke3N0cmluZ2lmeSh0eXBlKX1gO1xuICAgIH1cbiAgICByZXNvdXJjZVVyaSh0eXBlKSB7XG4gICAgICAgIHJldHVybiBgLi8ke3N0cmluZ2lmeSh0eXBlKX1gO1xuICAgIH1cbiAgICByZXNvbHZlSWRlbnRpZmllcihuYW1lLCBtb2R1bGVVcmwsIG1lbWJlcnMsIHJ1bnRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHJ1bnRpbWU7XG4gICAgfVxuICAgIHJlc29sdmVFbnVtKGVudW1JZGVudGlmaWVyLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBlbnVtSWRlbnRpZmllcltuYW1lXTtcbiAgICB9XG59XG5mdW5jdGlvbiBjb252ZXJ0VHNpY2tsZURlY29yYXRvckludG9NZXRhZGF0YShkZWNvcmF0b3JJbnZvY2F0aW9ucykge1xuICAgIGlmICghZGVjb3JhdG9ySW52b2NhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICByZXR1cm4gZGVjb3JhdG9ySW52b2NhdGlvbnMubWFwKGRlY29yYXRvckludm9jYXRpb24gPT4ge1xuICAgICAgICBjb25zdCBkZWNvcmF0b3JUeXBlID0gZGVjb3JhdG9ySW52b2NhdGlvbi50eXBlO1xuICAgICAgICBjb25zdCBhbm5vdGF0aW9uQ2xzID0gZGVjb3JhdG9yVHlwZS5hbm5vdGF0aW9uQ2xzO1xuICAgICAgICBjb25zdCBhbm5vdGF0aW9uQXJncyA9IGRlY29yYXRvckludm9jYXRpb24uYXJncyA/IGRlY29yYXRvckludm9jYXRpb24uYXJncyA6IFtdO1xuICAgICAgICByZXR1cm4gbmV3IGFubm90YXRpb25DbHMoLi4uYW5ub3RhdGlvbkFyZ3MpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0UGFyZW50Q3RvcihjdG9yKSB7XG4gICAgY29uc3QgcGFyZW50UHJvdG8gPSBjdG9yLnByb3RvdHlwZSA/IE9iamVjdC5nZXRQcm90b3R5cGVPZihjdG9yLnByb3RvdHlwZSkgOiBudWxsO1xuICAgIGNvbnN0IHBhcmVudEN0b3IgPSBwYXJlbnRQcm90byA/IHBhcmVudFByb3RvLmNvbnN0cnVjdG9yIDogbnVsbDtcbiAgICAvLyBOb3RlOiBXZSBhbHdheXMgdXNlIGBPYmplY3RgIGFzIHRoZSBudWxsIHZhbHVlXG4gICAgLy8gdG8gc2ltcGxpZnkgY2hlY2tpbmcgbGF0ZXIgb24uXG4gICAgcmV0dXJuIHBhcmVudEN0b3IgfHwgT2JqZWN0O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmNvbnN0IF9USFJPV19JRl9OT1RfRk9VTkQgPSB7fTtcbmNvbnN0IFRIUk9XX0lGX05PVF9GT1VORCA9IF9USFJPV19JRl9OT1RfRk9VTkQ7XG4vKlxuICogTmFtZSBvZiBhIHByb3BlcnR5ICh0aGF0IHdlIHBhdGNoIG9udG8gREkgZGVjb3JhdG9yKSwgd2hpY2ggaXMgdXNlZCBhcyBhbiBhbm5vdGF0aW9uIG9mIHdoaWNoXG4gKiBJbmplY3RGbGFnIHRoaXMgZGVjb3JhdG9yIHJlcHJlc2VudHMuIFRoaXMgYWxsb3dzIHRvIGF2b2lkIGRpcmVjdCByZWZlcmVuY2VzIHRvIHRoZSBESSBkZWNvcmF0b3JzXG4gKiBpbiB0aGUgY29kZSwgdGh1cyBtYWtpbmcgdGhlbSB0cmVlLXNoYWthYmxlLlxuICovXG5jb25zdCBESV9ERUNPUkFUT1JfRkxBRyA9ICdfX05HX0RJX0ZMQUdfXyc7XG5jb25zdCBOR19URU1QX1RPS0VOX1BBVEggPSAnbmdUZW1wVG9rZW5QYXRoJztcbmNvbnN0IE5HX1RPS0VOX1BBVEggPSAnbmdUb2tlblBhdGgnO1xuY29uc3QgTkVXX0xJTkUgPSAvXFxuL2dtO1xuY29uc3QgTk9fTkVXX0xJTkUgPSAnybUnO1xuY29uc3QgU09VUkNFID0gJ19fc291cmNlJztcbmNvbnN0IFVTRV9WQUxVRSQxID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7IHByb3ZpZGU6IFN0cmluZywgdXNlVmFsdWU6IGdldENsb3N1cmVTYWZlUHJvcGVydHkgfSk7XG4vKipcbiAqIEN1cnJlbnQgaW5qZWN0b3IgdmFsdWUgdXNlZCBieSBgaW5qZWN0YC5cbiAqIC0gYHVuZGVmaW5lZGA6IGl0IGlzIGFuIGVycm9yIHRvIGNhbGwgYGluamVjdGBcbiAqIC0gYG51bGxgOiBgaW5qZWN0YCBjYW4gYmUgY2FsbGVkIGJ1dCB0aGVyZSBpcyBubyBpbmplY3RvciAobGltcC1tb2RlKS5cbiAqIC0gSW5qZWN0b3IgaW5zdGFuY2U6IFVzZSB0aGUgaW5qZWN0b3IgZm9yIHJlc29sdXRpb24uXG4gKi9cbmxldCBfY3VycmVudEluamVjdG9yID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gc2V0Q3VycmVudEluamVjdG9yKGluamVjdG9yKSB7XG4gICAgY29uc3QgZm9ybWVyID0gX2N1cnJlbnRJbmplY3RvcjtcbiAgICBfY3VycmVudEluamVjdG9yID0gaW5qZWN0b3I7XG4gICAgcmV0dXJuIGZvcm1lcjtcbn1cbmZ1bmN0aW9uIGluamVjdEluamVjdG9yT25seSh0b2tlbiwgZmxhZ3MgPSBJbmplY3RGbGFncy5EZWZhdWx0KSB7XG4gICAgaWYgKF9jdXJyZW50SW5qZWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSA/XG4gICAgICAgICAgICBgaW5qZWN0KCkgbXVzdCBiZSBjYWxsZWQgZnJvbSBhbiBpbmplY3Rpb24gY29udGV4dGAgOlxuICAgICAgICAgICAgJyc7XG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoMjAzIC8qIE1JU1NJTkdfSU5KRUNUSU9OX0NPTlRFWFQgKi8sIGVycm9yTWVzc2FnZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKF9jdXJyZW50SW5qZWN0b3IgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGluamVjdFJvb3RMaW1wTW9kZSh0b2tlbiwgdW5kZWZpbmVkLCBmbGFncyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gX2N1cnJlbnRJbmplY3Rvci5nZXQodG9rZW4sIGZsYWdzICYgSW5qZWN0RmxhZ3MuT3B0aW9uYWwgPyBudWxsIDogdW5kZWZpbmVkLCBmbGFncyk7XG4gICAgfVxufVxuZnVuY3Rpb24gybXJtWluamVjdCh0b2tlbiwgZmxhZ3MgPSBJbmplY3RGbGFncy5EZWZhdWx0KSB7XG4gICAgcmV0dXJuIChnZXRJbmplY3RJbXBsZW1lbnRhdGlvbigpIHx8IGluamVjdEluamVjdG9yT25seSkocmVzb2x2ZUZvcndhcmRSZWYodG9rZW4pLCBmbGFncyk7XG59XG4vKipcbiAqIFRocm93cyBhbiBlcnJvciBpbmRpY2F0aW5nIHRoYXQgYSBmYWN0b3J5IGZ1bmN0aW9uIGNvdWxkIG5vdCBiZSBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIGZvciBhXG4gKiBwYXJ0aWN1bGFyIGNsYXNzLlxuICpcbiAqIFRoaXMgaW5zdHJ1Y3Rpb24gYWxsb3dzIHRoZSBhY3R1YWwgZXJyb3IgbWVzc2FnZSB0byBiZSBvcHRpbWl6ZWQgYXdheSB3aGVuIG5nRGV2TW9kZSBpcyB0dXJuZWRcbiAqIG9mZiwgc2F2aW5nIGJ5dGVzIG9mIGdlbmVyYXRlZCBjb2RlIHdoaWxlIHN0aWxsIHByb3ZpZGluZyBhIGdvb2QgZXhwZXJpZW5jZSBpbiBkZXYgbW9kZS5cbiAqXG4gKiBUaGUgbmFtZSBvZiB0aGUgY2xhc3MgaXMgbm90IG1lbnRpb25lZCBoZXJlLCBidXQgd2lsbCBiZSBpbiB0aGUgZ2VuZXJhdGVkIGZhY3RvcnkgZnVuY3Rpb24gbmFtZVxuICogYW5kIHRodXMgaW4gdGhlIHN0YWNrIHRyYWNlLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVpbnZhbGlkRmFjdG9yeURlcChpbmRleCkge1xuICAgIGNvbnN0IG1zZyA9IG5nRGV2TW9kZSA/XG4gICAgICAgIGBUaGlzIGNvbnN0cnVjdG9yIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggQW5ndWxhciBEZXBlbmRlbmN5IEluamVjdGlvbiBiZWNhdXNlIGl0cyBkZXBlbmRlbmN5IGF0IGluZGV4ICR7aW5kZXh9IG9mIHRoZSBwYXJhbWV0ZXIgbGlzdCBpcyBpbnZhbGlkLlxuVGhpcyBjYW4gaGFwcGVuIGlmIHRoZSBkZXBlbmRlbmN5IHR5cGUgaXMgYSBwcmltaXRpdmUgbGlrZSBhIHN0cmluZyBvciBpZiBhbiBhbmNlc3RvciBvZiB0aGlzIGNsYXNzIGlzIG1pc3NpbmcgYW4gQW5ndWxhciBkZWNvcmF0b3IuXG5cblBsZWFzZSBjaGVjayB0aGF0IDEpIHRoZSB0eXBlIGZvciB0aGUgcGFyYW1ldGVyIGF0IGluZGV4ICR7aW5kZXh9IGlzIGNvcnJlY3QgYW5kIDIpIHRoZSBjb3JyZWN0IEFuZ3VsYXIgZGVjb3JhdG9ycyBhcmUgZGVmaW5lZCBmb3IgdGhpcyBjbGFzcyBhbmQgaXRzIGFuY2VzdG9ycy5gIDpcbiAgICAgICAgJ2ludmFsaWQnO1xuICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xufVxuLyoqXG4gKiBJbmplY3RzIGEgdG9rZW4gZnJvbSB0aGUgY3VycmVudGx5IGFjdGl2ZSBpbmplY3Rvci5cbiAqXG4gKiBNdXN0IGJlIHVzZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBmYWN0b3J5IGZ1bmN0aW9uIHN1Y2ggYXMgb25lIGRlZmluZWQgZm9yIGFuXG4gKiBgSW5qZWN0aW9uVG9rZW5gLiBUaHJvd3MgYW4gZXJyb3IgaWYgbm90IGNhbGxlZCBmcm9tIHN1Y2ggYSBjb250ZXh0LlxuICpcbiAqIFdpdGhpbiBzdWNoIGEgZmFjdG9yeSBmdW5jdGlvbiwgdXNpbmcgdGhpcyBmdW5jdGlvbiB0byByZXF1ZXN0IGluamVjdGlvbiBvZiBhIGRlcGVuZGVuY3lcbiAqIGlzIGZhc3RlciBhbmQgbW9yZSB0eXBlLXNhZmUgdGhhbiBwcm92aWRpbmcgYW4gYWRkaXRpb25hbCBhcnJheSBvZiBkZXBlbmRlbmNpZXNcbiAqIChhcyBoYXMgYmVlbiBjb21tb24gd2l0aCBgdXNlRmFjdG9yeWAgcHJvdmlkZXJzKS5cbiAqXG4gKiBAcGFyYW0gdG9rZW4gVGhlIGluamVjdGlvbiB0b2tlbiBmb3IgdGhlIGRlcGVuZGVuY3kgdG8gYmUgaW5qZWN0ZWQuXG4gKiBAcGFyYW0gZmxhZ3MgT3B0aW9uYWwgZmxhZ3MgdGhhdCBjb250cm9sIGhvdyBpbmplY3Rpb24gaXMgZXhlY3V0ZWQuXG4gKiBUaGUgZmxhZ3MgY29ycmVzcG9uZCB0byBpbmplY3Rpb24gc3RyYXRlZ2llcyB0aGF0IGNhbiBiZSBzcGVjaWZpZWQgd2l0aFxuICogcGFyYW1ldGVyIGRlY29yYXRvcnMgYEBIb3N0YCwgYEBTZWxmYCwgYEBTa2lwU2VmYCwgYW5kIGBAT3B0aW9uYWxgLlxuICogQHJldHVybnMgdGhlIGluamVjdGVkIHZhbHVlIGlmIGluamVjdGlvbiBpcyBzdWNjZXNzZnVsLCBgbnVsbGAgb3RoZXJ3aXNlLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9pbmplY3Rvcl9zcGVjLnRzIHJlZ2lvbj0nU2hha2FibGVJbmplY3Rpb25Ub2tlbid9XG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBpbmplY3QgPSDJtcm1aW5qZWN0O1xuZnVuY3Rpb24gaW5qZWN0QXJncyh0eXBlcykge1xuICAgIGNvbnN0IGFyZ3MgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGFyZyA9IHJlc29sdmVGb3J3YXJkUmVmKHR5cGVzW2ldKTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuICAgICAgICAgICAgaWYgKGFyZy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSA/XG4gICAgICAgICAgICAgICAgICAgICdBcmd1bWVudHMgYXJyYXkgbXVzdCBoYXZlIGFyZ3VtZW50cy4nIDpcbiAgICAgICAgICAgICAgICAgICAgJyc7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcig5MDAgLyogSU5WQUxJRF9ESUZGRVJfSU5QVVQgKi8sIGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGxldCBmbGFncyA9IEluamVjdEZsYWdzLkRlZmF1bHQ7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFyZy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBhcmdbal07XG4gICAgICAgICAgICAgICAgY29uc3QgZmxhZyA9IGdldEluamVjdEZsYWcobWV0YSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbGFnID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugd2hlbiB3ZSBoYW5kbGUgQEluamVjdCBkZWNvcmF0b3IuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmbGFnID09PSAtMSAvKiBJbmplY3QgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBtZXRhLnRva2VuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ3MgfD0gZmxhZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IG1ldGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJncy5wdXNoKMm1ybVpbmplY3QodHlwZSwgZmxhZ3MpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3MucHVzaCjJtcm1aW5qZWN0KGFyZykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xufVxuLyoqXG4gKiBBdHRhY2hlcyBhIGdpdmVuIEluamVjdEZsYWcgdG8gYSBnaXZlbiBkZWNvcmF0b3IgdXNpbmcgbW9ua2V5LXBhdGNoaW5nLlxuICogU2luY2UgREkgZGVjb3JhdG9ycyBjYW4gYmUgdXNlZCBpbiBwcm92aWRlcnMgYGRlcHNgIGFycmF5ICh3aGVuIHByb3ZpZGVyIGlzIGNvbmZpZ3VyZWQgdXNpbmdcbiAqIGB1c2VGYWN0b3J5YCkgd2l0aG91dCBpbml0aWFsaXphdGlvbiAoZS5nLiBgSG9zdGApIGFuZCBhcyBhbiBpbnN0YW5jZSAoZS5nLiBgbmV3IEhvc3QoKWApLCB3ZVxuICogYXR0YWNoIHRoZSBmbGFnIHRvIG1ha2UgaXQgYXZhaWxhYmxlIGJvdGggYXMgYSBzdGF0aWMgcHJvcGVydHkgYW5kIGFzIGEgZmllbGQgb24gZGVjb3JhdG9yXG4gKiBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gZGVjb3JhdG9yIFByb3ZpZGVkIERJIGRlY29yYXRvci5cbiAqIEBwYXJhbSBmbGFnIEluamVjdEZsYWcgdGhhdCBzaG91bGQgYmUgYXBwbGllZC5cbiAqL1xuZnVuY3Rpb24gYXR0YWNoSW5qZWN0RmxhZyhkZWNvcmF0b3IsIGZsYWcpIHtcbiAgICBkZWNvcmF0b3JbRElfREVDT1JBVE9SX0ZMQUddID0gZmxhZztcbiAgICBkZWNvcmF0b3IucHJvdG90eXBlW0RJX0RFQ09SQVRPUl9GTEFHXSA9IGZsYWc7XG4gICAgcmV0dXJuIGRlY29yYXRvcjtcbn1cbi8qKlxuICogUmVhZHMgbW9ua2V5LXBhdGNoZWQgcHJvcGVydHkgdGhhdCBjb250YWlucyBJbmplY3RGbGFnIGF0dGFjaGVkIHRvIGEgZGVjb3JhdG9yLlxuICpcbiAqIEBwYXJhbSB0b2tlbiBUb2tlbiB0aGF0IG1heSBjb250YWluIG1vbmtleS1wYXRjaGVkIERJIGZsYWdzIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRJbmplY3RGbGFnKHRva2VuKSB7XG4gICAgcmV0dXJuIHRva2VuW0RJX0RFQ09SQVRPUl9GTEFHXTtcbn1cbmZ1bmN0aW9uIGNhdGNoSW5qZWN0b3JFcnJvcihlLCB0b2tlbiwgaW5qZWN0b3JFcnJvck5hbWUsIHNvdXJjZSkge1xuICAgIGNvbnN0IHRva2VuUGF0aCA9IGVbTkdfVEVNUF9UT0tFTl9QQVRIXTtcbiAgICBpZiAodG9rZW5bU09VUkNFXSkge1xuICAgICAgICB0b2tlblBhdGgudW5zaGlmdCh0b2tlbltTT1VSQ0VdKTtcbiAgICB9XG4gICAgZS5tZXNzYWdlID0gZm9ybWF0RXJyb3IoJ1xcbicgKyBlLm1lc3NhZ2UsIHRva2VuUGF0aCwgaW5qZWN0b3JFcnJvck5hbWUsIHNvdXJjZSk7XG4gICAgZVtOR19UT0tFTl9QQVRIXSA9IHRva2VuUGF0aDtcbiAgICBlW05HX1RFTVBfVE9LRU5fUEFUSF0gPSBudWxsO1xuICAgIHRocm93IGU7XG59XG5mdW5jdGlvbiBmb3JtYXRFcnJvcih0ZXh0LCBvYmosIGluamVjdG9yRXJyb3JOYW1lLCBzb3VyY2UgPSBudWxsKSB7XG4gICAgdGV4dCA9IHRleHQgJiYgdGV4dC5jaGFyQXQoMCkgPT09ICdcXG4nICYmIHRleHQuY2hhckF0KDEpID09IE5PX05FV19MSU5FID8gdGV4dC5zdWJzdHIoMikgOiB0ZXh0O1xuICAgIGxldCBjb250ZXh0ID0gc3RyaW5naWZ5KG9iaik7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICBjb250ZXh0ID0gb2JqLm1hcChzdHJpbmdpZnkpLmpvaW4oJyAtPiAnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbGV0IHBhcnRzID0gW107XG4gICAgICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goa2V5ICsgJzonICsgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiBzdHJpbmdpZnkodmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udGV4dCA9IGB7JHtwYXJ0cy5qb2luKCcsICcpfX1gO1xuICAgIH1cbiAgICByZXR1cm4gYCR7aW5qZWN0b3JFcnJvck5hbWV9JHtzb3VyY2UgPyAnKCcgKyBzb3VyY2UgKyAnKScgOiAnJ31bJHtjb250ZXh0fV06ICR7dGV4dC5yZXBsYWNlKE5FV19MSU5FLCAnXFxuICAnKX1gO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogSW5qZWN0IGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgSW5qZWN0ID0gYXR0YWNoSW5qZWN0RmxhZyhcbi8vIERpc2FibGUgdHNsaW50IGJlY2F1c2UgYERlY29yYXRvckZsYWdzYCBpcyBhIGNvbnN0IGVudW0gd2hpY2ggZ2V0cyBpbmxpbmVkLlxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby10b3BsZXZlbC1wcm9wZXJ0eS1hY2Nlc3Ncbm1ha2VQYXJhbURlY29yYXRvcignSW5qZWN0JywgKHRva2VuKSA9PiAoeyB0b2tlbiB9KSksIC0xIC8qIEluamVjdCAqLyk7XG4vKipcbiAqIE9wdGlvbmFsIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgT3B0aW9uYWwgPSBcbi8vIERpc2FibGUgdHNsaW50IGJlY2F1c2UgYEludGVybmFsSW5qZWN0RmxhZ3NgIGlzIGEgY29uc3QgZW51bSB3aGljaCBnZXRzIGlubGluZWQuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXRvcGxldmVsLXByb3BlcnR5LWFjY2Vzc1xuYXR0YWNoSW5qZWN0RmxhZyhtYWtlUGFyYW1EZWNvcmF0b3IoJ09wdGlvbmFsJyksIDggLyogT3B0aW9uYWwgKi8pO1xuLyoqXG4gKiBTZWxmIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgU2VsZiA9IFxuLy8gRGlzYWJsZSB0c2xpbnQgYmVjYXVzZSBgSW50ZXJuYWxJbmplY3RGbGFnc2AgaXMgYSBjb25zdCBlbnVtIHdoaWNoIGdldHMgaW5saW5lZC5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tdG9wbGV2ZWwtcHJvcGVydHktYWNjZXNzXG5hdHRhY2hJbmplY3RGbGFnKG1ha2VQYXJhbURlY29yYXRvcignU2VsZicpLCAyIC8qIFNlbGYgKi8pO1xuLyoqXG4gKiBgU2tpcFNlbGZgIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgU2tpcFNlbGYgPSBcbi8vIERpc2FibGUgdHNsaW50IGJlY2F1c2UgYEludGVybmFsSW5qZWN0RmxhZ3NgIGlzIGEgY29uc3QgZW51bSB3aGljaCBnZXRzIGlubGluZWQuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLXRvcGxldmVsLXByb3BlcnR5LWFjY2Vzc1xuYXR0YWNoSW5qZWN0RmxhZyhtYWtlUGFyYW1EZWNvcmF0b3IoJ1NraXBTZWxmJyksIDQgLyogU2tpcFNlbGYgKi8pO1xuLyoqXG4gKiBIb3N0IGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgSG9zdCA9IFxuLy8gRGlzYWJsZSB0c2xpbnQgYmVjYXVzZSBgSW50ZXJuYWxJbmplY3RGbGFnc2AgaXMgYSBjb25zdCBlbnVtIHdoaWNoIGdldHMgaW5saW5lZC5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tdG9wbGV2ZWwtcHJvcGVydHktYWNjZXNzXG5hdHRhY2hJbmplY3RGbGFnKG1ha2VQYXJhbURlY29yYXRvcignSG9zdCcpLCAxIC8qIEhvc3QgKi8pO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmxldCBfcmVmbGVjdCA9IG51bGw7XG5mdW5jdGlvbiBnZXRSZWZsZWN0KCkge1xuICAgIHJldHVybiAoX3JlZmxlY3QgPSBfcmVmbGVjdCB8fCBuZXcgUmVmbGVjdGlvbkNhcGFiaWxpdGllcygpKTtcbn1cbmZ1bmN0aW9uIHJlZmxlY3REZXBlbmRlbmNpZXModHlwZSkge1xuICAgIHJldHVybiBjb252ZXJ0RGVwZW5kZW5jaWVzKGdldFJlZmxlY3QoKS5wYXJhbWV0ZXJzKHR5cGUpKTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnREZXBlbmRlbmNpZXMoZGVwcykge1xuICAgIHJldHVybiBkZXBzLm1hcChkZXAgPT4gcmVmbGVjdERlcGVuZGVuY3koZGVwKSk7XG59XG5mdW5jdGlvbiByZWZsZWN0RGVwZW5kZW5jeShkZXApIHtcbiAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICB0b2tlbjogbnVsbCxcbiAgICAgICAgYXR0cmlidXRlOiBudWxsLFxuICAgICAgICBob3N0OiBmYWxzZSxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICBzZWxmOiBmYWxzZSxcbiAgICAgICAgc2tpcFNlbGY6IGZhbHNlLFxuICAgIH07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVwKSAmJiBkZXAubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGRlcC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgcGFyYW0gPSBkZXBbal07XG4gICAgICAgICAgICBpZiAocGFyYW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIHBhcmFtIG1heSBiZSB1bmRlZmluZWQgaWYgdHlwZSBvZiBkZXAgaXMgbm90IHNldCBieSBuZ3RzY1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFyYW0pO1xuICAgICAgICAgICAgaWYgKHBhcmFtIGluc3RhbmNlb2YgT3B0aW9uYWwgfHwgcHJvdG8ubmdNZXRhZGF0YU5hbWUgPT09ICdPcHRpb25hbCcpIHtcbiAgICAgICAgICAgICAgICBtZXRhLm9wdGlvbmFsID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmFtIGluc3RhbmNlb2YgU2tpcFNlbGYgfHwgcHJvdG8ubmdNZXRhZGF0YU5hbWUgPT09ICdTa2lwU2VsZicpIHtcbiAgICAgICAgICAgICAgICBtZXRhLnNraXBTZWxmID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmFtIGluc3RhbmNlb2YgU2VsZiB8fCBwcm90by5uZ01ldGFkYXRhTmFtZSA9PT0gJ1NlbGYnKSB7XG4gICAgICAgICAgICAgICAgbWV0YS5zZWxmID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmFtIGluc3RhbmNlb2YgSG9zdCB8fCBwcm90by5uZ01ldGFkYXRhTmFtZSA9PT0gJ0hvc3QnKSB7XG4gICAgICAgICAgICAgICAgbWV0YS5ob3N0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcmFtIGluc3RhbmNlb2YgSW5qZWN0KSB7XG4gICAgICAgICAgICAgICAgbWV0YS50b2tlbiA9IHBhcmFtLnRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGFyYW0gaW5zdGFuY2VvZiBBdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW0uYXR0cmlidXRlTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQXR0cmlidXRlIG5hbWUgbXVzdCBiZSBkZWZpbmVkLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZXRhLmF0dHJpYnV0ZSA9IHBhcmFtLmF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXRhLnRva2VuID0gcGFyYW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoZGVwID09PSB1bmRlZmluZWQgfHwgKEFycmF5LmlzQXJyYXkoZGVwKSAmJiBkZXAubGVuZ3RoID09PSAwKSkge1xuICAgICAgICBtZXRhLnRva2VuID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1ldGEudG9rZW4gPSBkZXA7XG4gICAgfVxuICAgIHJldHVybiBtZXRhO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHJlc291cmNlIFVSTHMgb24gYEBDb21wb25lbnRgIHdoZW4gdXNlZCB3aXRoIEpJVCBjb21waWxhdGlvbi5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgXG4gKiBAQ29tcG9uZW50KHtcbiAqICAgc2VsZWN0b3I6ICdteS1jb21wJyxcbiAqICAgdGVtcGxhdGVVcmw6ICdteS1jb21wLmh0bWwnLCAvLyBUaGlzIHJlcXVpcmVzIGFzeW5jaHJvbm91cyByZXNvbHV0aW9uXG4gKiB9KVxuICogY2xhc3MgTXlDb21wb25lbnR7XG4gKiB9XG4gKlxuICogLy8gQ2FsbGluZyBgcmVuZGVyQ29tcG9uZW50YCB3aWxsIGZhaWwgYmVjYXVzZSBgcmVuZGVyQ29tcG9uZW50YCBpcyBhIHN5bmNocm9ub3VzIHByb2Nlc3NcbiAqIC8vIGFuZCBgTXlDb21wb25lbnRgJ3MgYEBDb21wb25lbnQudGVtcGxhdGVVcmxgIG5lZWRzIHRvIGJlIHJlc29sdmVkIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIC8vIENhbGxpbmcgYHJlc29sdmVDb21wb25lbnRSZXNvdXJjZXMoKWAgd2lsbCByZXNvbHZlIGBAQ29tcG9uZW50LnRlbXBsYXRlVXJsYCBpbnRvXG4gKiAvLyBgQENvbXBvbmVudC50ZW1wbGF0ZWAsIHdoaWNoIGFsbG93cyBgcmVuZGVyQ29tcG9uZW50YCB0byBwcm9jZWVkIGluIGEgc3luY2hyb25vdXMgbWFubmVyLlxuICpcbiAqIC8vIFVzZSBicm93c2VyJ3MgYGZldGNoKClgIGZ1bmN0aW9uIGFzIHRoZSBkZWZhdWx0IHJlc291cmNlIHJlc29sdXRpb24gc3RyYXRlZ3kuXG4gKiByZXNvbHZlQ29tcG9uZW50UmVzb3VyY2VzKGZldGNoKS50aGVuKCgpID0+IHtcbiAqICAgLy8gQWZ0ZXIgcmVzb2x1dGlvbiBhbGwgVVJMcyBoYXZlIGJlZW4gY29udmVydGVkIGludG8gYHRlbXBsYXRlYCBzdHJpbmdzLlxuICogICByZW5kZXJDb21wb25lbnQoTXlDb21wb25lbnQpO1xuICogfSk7XG4gKlxuICogYGBgXG4gKlxuICogTk9URTogSW4gQU9UIHRoZSByZXNvbHV0aW9uIGhhcHBlbnMgZHVyaW5nIGNvbXBpbGF0aW9uLCBhbmQgc28gdGhlcmUgc2hvdWxkIGJlIG5vIG5lZWRcbiAqIHRvIGNhbGwgdGhpcyBtZXRob2Qgb3V0c2lkZSBKSVQgbW9kZS5cbiAqXG4gKiBAcGFyYW0gcmVzb3VyY2VSZXNvbHZlciBhIGZ1bmN0aW9uIHdoaWNoIGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgYSBgUHJvbWlzZWAgdG8gdGhlXG4gKiBjb250ZW50cyBvZiB0aGUgcmVzb2x2ZWQgVVJMLiBCcm93c2VyJ3MgYGZldGNoKClgIG1ldGhvZCBpcyBhIGdvb2QgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudFJlc291cmNlcyhyZXNvdXJjZVJlc29sdmVyKSB7XG4gICAgLy8gU3RvcmUgYWxsIHByb21pc2VzIHdoaWNoIGFyZSBmZXRjaGluZyB0aGUgcmVzb3VyY2VzLlxuICAgIGNvbnN0IGNvbXBvbmVudFJlc29sdmVkID0gW107XG4gICAgLy8gQ2FjaGUgc28gdGhhdCB3ZSBkb24ndCBmZXRjaCB0aGUgc2FtZSByZXNvdXJjZSBtb3JlIHRoYW4gb25jZS5cbiAgICBjb25zdCB1cmxNYXAgPSBuZXcgTWFwKCk7XG4gICAgZnVuY3Rpb24gY2FjaGVkUmVzb3VyY2VSZXNvbHZlKHVybCkge1xuICAgICAgICBsZXQgcHJvbWlzZSA9IHVybE1hcC5nZXQodXJsKTtcbiAgICAgICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgICAgICBjb25zdCByZXNwID0gcmVzb3VyY2VSZXNvbHZlcih1cmwpO1xuICAgICAgICAgICAgdXJsTWFwLnNldCh1cmwsIHByb21pc2UgPSByZXNwLnRoZW4odW53cmFwUmVzcG9uc2UpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgY29tcG9uZW50UmVzb3VyY2VSZXNvbHV0aW9uUXVldWUuZm9yRWFjaCgoY29tcG9uZW50LCB0eXBlKSA9PiB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgICAgIGlmIChjb21wb25lbnQudGVtcGxhdGVVcmwpIHtcbiAgICAgICAgICAgIHByb21pc2VzLnB1c2goY2FjaGVkUmVzb3VyY2VSZXNvbHZlKGNvbXBvbmVudC50ZW1wbGF0ZVVybCkudGhlbigodGVtcGxhdGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnQudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdHlsZVVybHMgPSBjb21wb25lbnQuc3R5bGVVcmxzO1xuICAgICAgICBjb25zdCBzdHlsZXMgPSBjb21wb25lbnQuc3R5bGVzIHx8IChjb21wb25lbnQuc3R5bGVzID0gW10pO1xuICAgICAgICBjb25zdCBzdHlsZU9mZnNldCA9IGNvbXBvbmVudC5zdHlsZXMubGVuZ3RoO1xuICAgICAgICBzdHlsZVVybHMgJiYgc3R5bGVVcmxzLmZvckVhY2goKHN0eWxlVXJsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgc3R5bGVzLnB1c2goJycpOyAvLyBwcmUtYWxsb2NhdGUgYXJyYXkuXG4gICAgICAgICAgICBwcm9taXNlcy5wdXNoKGNhY2hlZFJlc291cmNlUmVzb2x2ZShzdHlsZVVybCkudGhlbigoc3R5bGUpID0+IHtcbiAgICAgICAgICAgICAgICBzdHlsZXNbc3R5bGVPZmZzZXQgKyBpbmRleF0gPSBzdHlsZTtcbiAgICAgICAgICAgICAgICBzdHlsZVVybHMuc3BsaWNlKHN0eWxlVXJscy5pbmRleE9mKHN0eWxlVXJsKSwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlVXJscy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQuc3R5bGVVcmxzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZ1bGx5UmVzb2x2ZWQgPSBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiBjb21wb25lbnREZWZSZXNvbHZlZCh0eXBlKSk7XG4gICAgICAgIGNvbXBvbmVudFJlc29sdmVkLnB1c2goZnVsbHlSZXNvbHZlZCk7XG4gICAgfSk7XG4gICAgY2xlYXJSZXNvbHV0aW9uT2ZDb21wb25lbnRSZXNvdXJjZXNRdWV1ZSgpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChjb21wb25lbnRSZXNvbHZlZCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xufVxubGV0IGNvbXBvbmVudFJlc291cmNlUmVzb2x1dGlvblF1ZXVlID0gbmV3IE1hcCgpO1xuLy8gVHJhY2sgd2hlbiBleGlzdGluZyDJtWNtcCBmb3IgYSBUeXBlIGlzIHdhaXRpbmcgb24gcmVzb3VyY2VzLlxuY29uc3QgY29tcG9uZW50RGVmUGVuZGluZ1Jlc29sdXRpb24gPSBuZXcgU2V0KCk7XG5mdW5jdGlvbiBtYXliZVF1ZXVlUmVzb2x1dGlvbk9mQ29tcG9uZW50UmVzb3VyY2VzKHR5cGUsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGNvbXBvbmVudE5lZWRzUmVzb2x1dGlvbihtZXRhZGF0YSkpIHtcbiAgICAgICAgY29tcG9uZW50UmVzb3VyY2VSZXNvbHV0aW9uUXVldWUuc2V0KHR5cGUsIG1ldGFkYXRhKTtcbiAgICAgICAgY29tcG9uZW50RGVmUGVuZGluZ1Jlc29sdXRpb24uYWRkKHR5cGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzQ29tcG9uZW50RGVmUGVuZGluZ1Jlc29sdXRpb24odHlwZSkge1xuICAgIHJldHVybiBjb21wb25lbnREZWZQZW5kaW5nUmVzb2x1dGlvbi5oYXModHlwZSk7XG59XG5mdW5jdGlvbiBjb21wb25lbnROZWVkc1Jlc29sdXRpb24oY29tcG9uZW50KSB7XG4gICAgcmV0dXJuICEhKChjb21wb25lbnQudGVtcGxhdGVVcmwgJiYgIWNvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgndGVtcGxhdGUnKSkgfHxcbiAgICAgICAgY29tcG9uZW50LnN0eWxlVXJscyAmJiBjb21wb25lbnQuc3R5bGVVcmxzLmxlbmd0aCk7XG59XG5mdW5jdGlvbiBjbGVhclJlc29sdXRpb25PZkNvbXBvbmVudFJlc291cmNlc1F1ZXVlKCkge1xuICAgIGNvbnN0IG9sZCA9IGNvbXBvbmVudFJlc291cmNlUmVzb2x1dGlvblF1ZXVlO1xuICAgIGNvbXBvbmVudFJlc291cmNlUmVzb2x1dGlvblF1ZXVlID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiBvbGQ7XG59XG5mdW5jdGlvbiByZXN0b3JlQ29tcG9uZW50UmVzb2x1dGlvblF1ZXVlKHF1ZXVlKSB7XG4gICAgY29tcG9uZW50RGVmUGVuZGluZ1Jlc29sdXRpb24uY2xlYXIoKTtcbiAgICBxdWV1ZS5mb3JFYWNoKChfLCB0eXBlKSA9PiBjb21wb25lbnREZWZQZW5kaW5nUmVzb2x1dGlvbi5hZGQodHlwZSkpO1xuICAgIGNvbXBvbmVudFJlc291cmNlUmVzb2x1dGlvblF1ZXVlID0gcXVldWU7XG59XG5mdW5jdGlvbiBpc0NvbXBvbmVudFJlc291cmNlUmVzb2x1dGlvblF1ZXVlRW1wdHkoKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudFJlc291cmNlUmVzb2x1dGlvblF1ZXVlLnNpemUgPT09IDA7XG59XG5mdW5jdGlvbiB1bndyYXBSZXNwb25zZShyZXNwb25zZSkge1xuICAgIHJldHVybiB0eXBlb2YgcmVzcG9uc2UgPT0gJ3N0cmluZycgPyByZXNwb25zZSA6IHJlc3BvbnNlLnRleHQoKTtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudERlZlJlc29sdmVkKHR5cGUpIHtcbiAgICBjb21wb25lbnREZWZQZW5kaW5nUmVzb2x1dGlvbi5kZWxldGUodHlwZSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUaGUgVHJ1c3RlZCBUeXBlcyBwb2xpY3ksIG9yIG51bGwgaWYgVHJ1c3RlZCBUeXBlcyBhcmUgbm90XG4gKiBlbmFibGVkL3N1cHBvcnRlZCwgb3IgdW5kZWZpbmVkIGlmIHRoZSBwb2xpY3kgaGFzIG5vdCBiZWVuIGNyZWF0ZWQgeWV0LlxuICovXG5sZXQgcG9saWN5JDE7XG4vKipcbiAqIFJldHVybnMgdGhlIFRydXN0ZWQgVHlwZXMgcG9saWN5LCBvciBudWxsIGlmIFRydXN0ZWQgVHlwZXMgYXJlIG5vdFxuICogZW5hYmxlZC9zdXBwb3J0ZWQuIFRoZSBmaXJzdCBjYWxsIHRvIHRoaXMgZnVuY3Rpb24gd2lsbCBjcmVhdGUgdGhlIHBvbGljeS5cbiAqL1xuZnVuY3Rpb24gZ2V0UG9saWN5JDEoKSB7XG4gICAgaWYgKHBvbGljeSQxID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcG9saWN5JDEgPSBudWxsO1xuICAgICAgICBpZiAoX2dsb2JhbC50cnVzdGVkVHlwZXMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcG9saWN5JDEgPSBfZ2xvYmFsLnRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3koJ2FuZ3VsYXInLCB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUhUTUw6IChzKSA9PiBzLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVTY3JpcHQ6IChzKSA9PiBzLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVTY3JpcHRVUkw6IChzKSA9PiBzLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSB0aHJvd3MgaWYgY2FsbGVkIHdpdGggYSBuYW1lIHRoYXQgaXNcbiAgICAgICAgICAgICAgICAvLyBhbHJlYWR5IHJlZ2lzdGVyZWQsIGV2ZW4gaW4gcmVwb3J0LW9ubHkgbW9kZS4gVW50aWwgdGhlIEFQSSBjaGFuZ2VzLFxuICAgICAgICAgICAgICAgIC8vIGNhdGNoIHRoZSBlcnJvciBub3QgdG8gYnJlYWsgdGhlIGFwcGxpY2F0aW9ucyBmdW5jdGlvbmFsbHkuIEluIHN1Y2hcbiAgICAgICAgICAgICAgICAvLyBjYXNlcywgdGhlIGNvZGUgd2lsbCBmYWxsIGJhY2sgdG8gdXNpbmcgc3RyaW5ncy5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9saWN5JDE7XG59XG4vKipcbiAqIFVuc2FmZWx5IHByb21vdGUgYSBzdHJpbmcgdG8gYSBUcnVzdGVkSFRNTCwgZmFsbGluZyBiYWNrIHRvIHN0cmluZ3Mgd2hlblxuICogVHJ1c3RlZCBUeXBlcyBhcmUgbm90IGF2YWlsYWJsZS5cbiAqIEBzZWN1cml0eSBUaGlzIGlzIGEgc2VjdXJpdHktc2Vuc2l0aXZlIGZ1bmN0aW9uOyBhbnkgdXNlIG9mIHRoaXMgZnVuY3Rpb25cbiAqIG11c3QgZ28gdGhyb3VnaCBzZWN1cml0eSByZXZpZXcuIEluIHBhcnRpY3VsYXIsIGl0IG11c3QgYmUgYXNzdXJlZCB0aGF0IHRoZVxuICogcHJvdmlkZWQgc3RyaW5nIHdpbGwgbmV2ZXIgY2F1c2UgYW4gWFNTIHZ1bG5lcmFiaWxpdHkgaWYgdXNlZCBpbiBhIGNvbnRleHRcbiAqIHRoYXQgd2lsbCBiZSBpbnRlcnByZXRlZCBhcyBIVE1MIGJ5IGEgYnJvd3NlciwgZS5nLiB3aGVuIGFzc2lnbmluZyB0b1xuICogZWxlbWVudC5pbm5lckhUTUwuXG4gKi9cbmZ1bmN0aW9uIHRydXN0ZWRIVE1MRnJvbVN0cmluZyhodG1sKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoKF9hID0gZ2V0UG9saWN5JDEoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNyZWF0ZUhUTUwoaHRtbCkpIHx8IGh0bWw7XG59XG4vKipcbiAqIFVuc2FmZWx5IHByb21vdGUgYSBzdHJpbmcgdG8gYSBUcnVzdGVkU2NyaXB0LCBmYWxsaW5nIGJhY2sgdG8gc3RyaW5ncyB3aGVuXG4gKiBUcnVzdGVkIFR5cGVzIGFyZSBub3QgYXZhaWxhYmxlLlxuICogQHNlY3VyaXR5IEluIHBhcnRpY3VsYXIsIGl0IG11c3QgYmUgYXNzdXJlZCB0aGF0IHRoZSBwcm92aWRlZCBzdHJpbmcgd2lsbFxuICogbmV2ZXIgY2F1c2UgYW4gWFNTIHZ1bG5lcmFiaWxpdHkgaWYgdXNlZCBpbiBhIGNvbnRleHQgdGhhdCB3aWxsIGJlXG4gKiBpbnRlcnByZXRlZCBhbmQgZXhlY3V0ZWQgYXMgYSBzY3JpcHQgYnkgYSBicm93c2VyLCBlLmcuIHdoZW4gY2FsbGluZyBldmFsLlxuICovXG5mdW5jdGlvbiB0cnVzdGVkU2NyaXB0RnJvbVN0cmluZyhzY3JpcHQpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICgoX2EgPSBnZXRQb2xpY3kkMSgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3JlYXRlU2NyaXB0KHNjcmlwdCkpIHx8IHNjcmlwdDtcbn1cbi8qKlxuICogVW5zYWZlbHkgcHJvbW90ZSBhIHN0cmluZyB0byBhIFRydXN0ZWRTY3JpcHRVUkwsIGZhbGxpbmcgYmFjayB0byBzdHJpbmdzXG4gKiB3aGVuIFRydXN0ZWQgVHlwZXMgYXJlIG5vdCBhdmFpbGFibGUuXG4gKiBAc2VjdXJpdHkgVGhpcyBpcyBhIHNlY3VyaXR5LXNlbnNpdGl2ZSBmdW5jdGlvbjsgYW55IHVzZSBvZiB0aGlzIGZ1bmN0aW9uXG4gKiBtdXN0IGdvIHRocm91Z2ggc2VjdXJpdHkgcmV2aWV3LiBJbiBwYXJ0aWN1bGFyLCBpdCBtdXN0IGJlIGFzc3VyZWQgdGhhdCB0aGVcbiAqIHByb3ZpZGVkIHN0cmluZyB3aWxsIG5ldmVyIGNhdXNlIGFuIFhTUyB2dWxuZXJhYmlsaXR5IGlmIHVzZWQgaW4gYSBjb250ZXh0XG4gKiB0aGF0IHdpbGwgY2F1c2UgYSBicm93c2VyIHRvIGxvYWQgYW5kIGV4ZWN1dGUgYSByZXNvdXJjZSwgZS5nLiB3aGVuXG4gKiBhc3NpZ25pbmcgdG8gc2NyaXB0LnNyYy5cbiAqL1xuZnVuY3Rpb24gdHJ1c3RlZFNjcmlwdFVSTEZyb21TdHJpbmcodXJsKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoKF9hID0gZ2V0UG9saWN5JDEoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNyZWF0ZVNjcmlwdFVSTCh1cmwpKSB8fCB1cmw7XG59XG4vKipcbiAqIFVuc2FmZWx5IGNhbGwgdGhlIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIHdpdGggdGhlIGdpdmVuIHN0cmluZyBhcmd1bWVudHMuIEl0XG4gKiBpcyBvbmx5IGF2YWlsYWJsZSBpbiBkZXZlbG9wbWVudCBtb2RlLCBhbmQgc2hvdWxkIGJlIHN0cmlwcGVkIG91dCBvZlxuICogcHJvZHVjdGlvbiBjb2RlLlxuICogQHNlY3VyaXR5IFRoaXMgaXMgYSBzZWN1cml0eS1zZW5zaXRpdmUgZnVuY3Rpb247IGFueSB1c2Ugb2YgdGhpcyBmdW5jdGlvblxuICogbXVzdCBnbyB0aHJvdWdoIHNlY3VyaXR5IHJldmlldy4gSW4gcGFydGljdWxhciwgaXQgbXVzdCBiZSBhc3N1cmVkIHRoYXQgaXRcbiAqIGlzIG9ubHkgY2FsbGVkIGZyb20gZGV2ZWxvcG1lbnQgY29kZSwgYXMgdXNlIGluIHByb2R1Y3Rpb24gY29kZSBjYW4gbGVhZCB0b1xuICogWFNTIHZ1bG5lcmFiaWxpdGllcy5cbiAqL1xuZnVuY3Rpb24gbmV3VHJ1c3RlZEZ1bmN0aW9uRm9yRGV2KC4uLmFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCduZXdUcnVzdGVkRnVuY3Rpb25Gb3JEZXYgc2hvdWxkIG5ldmVyIGJlIGNhbGxlZCBpbiBwcm9kdWN0aW9uJyk7XG4gICAgfVxuICAgIGlmICghX2dsb2JhbC50cnVzdGVkVHlwZXMpIHtcbiAgICAgICAgLy8gSW4gZW52aXJvbm1lbnRzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBUcnVzdGVkIFR5cGVzLCBmYWxsIGJhY2sgdG8gdGhlIG1vc3RcbiAgICAgICAgLy8gc3RyYWlnaHRmb3J3YXJkIGltcGxlbWVudGF0aW9uOlxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKC4uLmFyZ3MpO1xuICAgIH1cbiAgICAvLyBDaHJvbWUgY3VycmVudGx5IGRvZXMgbm90IHN1cHBvcnQgcGFzc2luZyBUcnVzdGVkU2NyaXB0IHRvIHRoZSBGdW5jdGlvblxuICAgIC8vIGNvbnN0cnVjdG9yLiBUaGUgZm9sbG93aW5nIGltcGxlbWVudHMgdGhlIHdvcmthcm91bmQgcHJvcG9zZWQgb24gdGhlIHBhZ2VcbiAgICAvLyBiZWxvdywgd2hlcmUgdGhlIENocm9taXVtIGJ1ZyBpcyBhbHNvIHJlZmVyZW5jZWQ6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3czYy93ZWJhcHBzZWMtdHJ1c3RlZC10eXBlcy93aWtpL1RydXN0ZWQtVHlwZXMtZm9yLWZ1bmN0aW9uLWNvbnN0cnVjdG9yXG4gICAgY29uc3QgZm5BcmdzID0gYXJncy5zbGljZSgwLCAtMSkuam9pbignLCcpO1xuICAgIGNvbnN0IGZuQm9keSA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBib2R5ID0gYChmdW5jdGlvbiBhbm9ueW1vdXMoJHtmbkFyZ3N9XG4pIHsgJHtmbkJvZHl9XG59KWA7XG4gICAgLy8gVXNpbmcgZXZhbCBkaXJlY3RseSBjb25mdXNlcyB0aGUgY29tcGlsZXIgYW5kIHByZXZlbnRzIHRoaXMgbW9kdWxlIGZyb21cbiAgICAvLyBiZWluZyBzdHJpcHBlZCBvdXQgb2YgSlMgYmluYXJpZXMgZXZlbiBpZiBub3QgdXNlZC4gVGhlIGdsb2JhbFsnZXZhbCddXG4gICAgLy8gaW5kaXJlY3Rpb24gZml4ZXMgdGhhdC5cbiAgICBjb25zdCBmbiA9IF9nbG9iYWxbJ2V2YWwnXSh0cnVzdGVkU2NyaXB0RnJvbVN0cmluZyhib2R5KSk7XG4gICAgaWYgKGZuLmJpbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBhIGJyb3dzZXIgYnVnIHRoYXQgb25seSBleGlzdHMgaW4gQ2hyb21lIDgzLCB3aGVyZSBwYXNzaW5nXG4gICAgICAgIC8vIGEgVHJ1c3RlZFNjcmlwdCB0byBldmFsIGp1c3QgcmV0dXJucyB0aGUgVHJ1c3RlZFNjcmlwdCBiYWNrIHdpdGhvdXRcbiAgICAgICAgLy8gZXZhbHVhdGluZyBpdC4gSW4gdGhhdCBjYXNlLCBmYWxsIGJhY2sgdG8gdGhlIG1vc3Qgc3RyYWlnaHRmb3J3YXJkXG4gICAgICAgIC8vIGltcGxlbWVudGF0aW9uOlxuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKC4uLmFyZ3MpO1xuICAgIH1cbiAgICAvLyBUbyBjb21wbGV0ZWx5IG1pbWljIHRoZSBiZWhhdmlvciBvZiBjYWxsaW5nIFwibmV3IEZ1bmN0aW9uXCIsIHR3byBtb3JlXG4gICAgLy8gdGhpbmdzIG5lZWQgdG8gaGFwcGVuOlxuICAgIC8vIDEuIFN0cmluZ2lmeWluZyB0aGUgcmVzdWx0aW5nIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gaXRzIHNvdXJjZSBjb2RlXG4gICAgZm4udG9TdHJpbmcgPSAoKSA9PiBib2R5O1xuICAgIC8vIDIuIFdoZW4gY2FsbGluZyB0aGUgcmVzdWx0aW5nIGZ1bmN0aW9uLCBgdGhpc2Agc2hvdWxkIHJlZmVyIHRvIGBnbG9iYWxgXG4gICAgcmV0dXJuIGZuLmJpbmQoX2dsb2JhbCk7XG4gICAgLy8gV2hlbiBUcnVzdGVkIFR5cGVzIHN1cHBvcnQgaW4gRnVuY3Rpb24gY29uc3RydWN0b3JzIGlzIHdpZGVseSBhdmFpbGFibGUsXG4gICAgLy8gdGhlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHNpbXBsaWZpZWQgdG86XG4gICAgLy8gcmV0dXJuIG5ldyBGdW5jdGlvbiguLi5hcmdzLm1hcChhID0+IHRydXN0ZWRTY3JpcHRGcm9tU3RyaW5nKGEpKSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUaGUgVHJ1c3RlZCBUeXBlcyBwb2xpY3ksIG9yIG51bGwgaWYgVHJ1c3RlZCBUeXBlcyBhcmUgbm90XG4gKiBlbmFibGVkL3N1cHBvcnRlZCwgb3IgdW5kZWZpbmVkIGlmIHRoZSBwb2xpY3kgaGFzIG5vdCBiZWVuIGNyZWF0ZWQgeWV0LlxuICovXG5sZXQgcG9saWN5O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBUcnVzdGVkIFR5cGVzIHBvbGljeSwgb3IgbnVsbCBpZiBUcnVzdGVkIFR5cGVzIGFyZSBub3RcbiAqIGVuYWJsZWQvc3VwcG9ydGVkLiBUaGUgZmlyc3QgY2FsbCB0byB0aGlzIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIHRoZSBwb2xpY3kuXG4gKi9cbmZ1bmN0aW9uIGdldFBvbGljeSgpIHtcbiAgICBpZiAocG9saWN5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcG9saWN5ID0gbnVsbDtcbiAgICAgICAgaWYgKF9nbG9iYWwudHJ1c3RlZFR5cGVzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBvbGljeSA9IF9nbG9iYWwudHJ1c3RlZFR5cGVzXG4gICAgICAgICAgICAgICAgICAgIC5jcmVhdGVQb2xpY3koJ2FuZ3VsYXIjdW5zYWZlLWJ5cGFzcycsIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlSFRNTDogKHMpID0+IHMsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNjcmlwdDogKHMpID0+IHMsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNjcmlwdFVSTDogKHMpID0+IHMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgICAgICAgICAvLyB0cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5IHRocm93cyBpZiBjYWxsZWQgd2l0aCBhIG5hbWUgdGhhdCBpc1xuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgcmVnaXN0ZXJlZCwgZXZlbiBpbiByZXBvcnQtb25seSBtb2RlLiBVbnRpbCB0aGUgQVBJIGNoYW5nZXMsXG4gICAgICAgICAgICAgICAgLy8gY2F0Y2ggdGhlIGVycm9yIG5vdCB0byBicmVhayB0aGUgYXBwbGljYXRpb25zIGZ1bmN0aW9uYWxseS4gSW4gc3VjaFxuICAgICAgICAgICAgICAgIC8vIGNhc2VzLCB0aGUgY29kZSB3aWxsIGZhbGwgYmFjayB0byB1c2luZyBzdHJpbmdzLlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwb2xpY3k7XG59XG4vKipcbiAqIFVuc2FmZWx5IHByb21vdGUgYSBzdHJpbmcgdG8gYSBUcnVzdGVkSFRNTCwgZmFsbGluZyBiYWNrIHRvIHN0cmluZ3Mgd2hlblxuICogVHJ1c3RlZCBUeXBlcyBhcmUgbm90IGF2YWlsYWJsZS5cbiAqIEBzZWN1cml0eSBUaGlzIGlzIGEgc2VjdXJpdHktc2Vuc2l0aXZlIGZ1bmN0aW9uOyBhbnkgdXNlIG9mIHRoaXMgZnVuY3Rpb25cbiAqIG11c3QgZ28gdGhyb3VnaCBzZWN1cml0eSByZXZpZXcuIEluIHBhcnRpY3VsYXIsIGl0IG11c3QgYmUgYXNzdXJlZCB0aGF0IGl0XG4gKiBpcyBvbmx5IHBhc3NlZCBzdHJpbmdzIHRoYXQgY29tZSBkaXJlY3RseSBmcm9tIGN1c3RvbSBzYW5pdGl6ZXJzIG9yIHRoZVxuICogYnlwYXNzU2VjdXJpdHlUcnVzdCogZnVuY3Rpb25zLlxuICovXG5mdW5jdGlvbiB0cnVzdGVkSFRNTEZyb21TdHJpbmdCeXBhc3MoaHRtbCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IGdldFBvbGljeSgpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY3JlYXRlSFRNTChodG1sKSkgfHwgaHRtbDtcbn1cbi8qKlxuICogVW5zYWZlbHkgcHJvbW90ZSBhIHN0cmluZyB0byBhIFRydXN0ZWRTY3JpcHQsIGZhbGxpbmcgYmFjayB0byBzdHJpbmdzIHdoZW5cbiAqIFRydXN0ZWQgVHlwZXMgYXJlIG5vdCBhdmFpbGFibGUuXG4gKiBAc2VjdXJpdHkgVGhpcyBpcyBhIHNlY3VyaXR5LXNlbnNpdGl2ZSBmdW5jdGlvbjsgYW55IHVzZSBvZiB0aGlzIGZ1bmN0aW9uXG4gKiBtdXN0IGdvIHRocm91Z2ggc2VjdXJpdHkgcmV2aWV3LiBJbiBwYXJ0aWN1bGFyLCBpdCBtdXN0IGJlIGFzc3VyZWQgdGhhdCBpdFxuICogaXMgb25seSBwYXNzZWQgc3RyaW5ncyB0aGF0IGNvbWUgZGlyZWN0bHkgZnJvbSBjdXN0b20gc2FuaXRpemVycyBvciB0aGVcbiAqIGJ5cGFzc1NlY3VyaXR5VHJ1c3QqIGZ1bmN0aW9ucy5cbiAqL1xuZnVuY3Rpb24gdHJ1c3RlZFNjcmlwdEZyb21TdHJpbmdCeXBhc3Moc2NyaXB0KSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoKF9hID0gZ2V0UG9saWN5KCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jcmVhdGVTY3JpcHQoc2NyaXB0KSkgfHwgc2NyaXB0O1xufVxuLyoqXG4gKiBVbnNhZmVseSBwcm9tb3RlIGEgc3RyaW5nIHRvIGEgVHJ1c3RlZFNjcmlwdFVSTCwgZmFsbGluZyBiYWNrIHRvIHN0cmluZ3NcbiAqIHdoZW4gVHJ1c3RlZCBUeXBlcyBhcmUgbm90IGF2YWlsYWJsZS5cbiAqIEBzZWN1cml0eSBUaGlzIGlzIGEgc2VjdXJpdHktc2Vuc2l0aXZlIGZ1bmN0aW9uOyBhbnkgdXNlIG9mIHRoaXMgZnVuY3Rpb25cbiAqIG11c3QgZ28gdGhyb3VnaCBzZWN1cml0eSByZXZpZXcuIEluIHBhcnRpY3VsYXIsIGl0IG11c3QgYmUgYXNzdXJlZCB0aGF0IGl0XG4gKiBpcyBvbmx5IHBhc3NlZCBzdHJpbmdzIHRoYXQgY29tZSBkaXJlY3RseSBmcm9tIGN1c3RvbSBzYW5pdGl6ZXJzIG9yIHRoZVxuICogYnlwYXNzU2VjdXJpdHlUcnVzdCogZnVuY3Rpb25zLlxuICovXG5mdW5jdGlvbiB0cnVzdGVkU2NyaXB0VVJMRnJvbVN0cmluZ0J5cGFzcyh1cmwpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICgoX2EgPSBnZXRQb2xpY3koKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNyZWF0ZVNjcmlwdFVSTCh1cmwpKSB8fCB1cmw7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY2xhc3MgU2FmZVZhbHVlSW1wbCB7XG4gICAgY29uc3RydWN0b3IoY2hhbmdpbmdUaGlzQnJlYWtzQXBwbGljYXRpb25TZWN1cml0eSkge1xuICAgICAgICB0aGlzLmNoYW5naW5nVGhpc0JyZWFrc0FwcGxpY2F0aW9uU2VjdXJpdHkgPSBjaGFuZ2luZ1RoaXNCcmVha3NBcHBsaWNhdGlvblNlY3VyaXR5O1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGBTYWZlVmFsdWUgbXVzdCB1c2UgW3Byb3BlcnR5XT1iaW5kaW5nOiAke3RoaXMuY2hhbmdpbmdUaGlzQnJlYWtzQXBwbGljYXRpb25TZWN1cml0eX1gICtcbiAgICAgICAgICAgIGAgKHNlZSBodHRwczovL2cuY28vbmcvc2VjdXJpdHkjeHNzKWA7XG4gICAgfVxufVxuY2xhc3MgU2FmZUh0bWxJbXBsIGV4dGVuZHMgU2FmZVZhbHVlSW1wbCB7XG4gICAgZ2V0VHlwZU5hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIkhUTUxcIiAvKiBIdG1sICovO1xuICAgIH1cbn1cbmNsYXNzIFNhZmVTdHlsZUltcGwgZXh0ZW5kcyBTYWZlVmFsdWVJbXBsIHtcbiAgICBnZXRUeXBlTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiU3R5bGVcIiAvKiBTdHlsZSAqLztcbiAgICB9XG59XG5jbGFzcyBTYWZlU2NyaXB0SW1wbCBleHRlbmRzIFNhZmVWYWx1ZUltcGwge1xuICAgIGdldFR5cGVOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJTY3JpcHRcIiAvKiBTY3JpcHQgKi87XG4gICAgfVxufVxuY2xhc3MgU2FmZVVybEltcGwgZXh0ZW5kcyBTYWZlVmFsdWVJbXBsIHtcbiAgICBnZXRUeXBlTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiVVJMXCIgLyogVXJsICovO1xuICAgIH1cbn1cbmNsYXNzIFNhZmVSZXNvdXJjZVVybEltcGwgZXh0ZW5kcyBTYWZlVmFsdWVJbXBsIHtcbiAgICBnZXRUeXBlTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiUmVzb3VyY2VVUkxcIiAvKiBSZXNvdXJjZVVybCAqLztcbiAgICB9XG59XG5mdW5jdGlvbiB1bndyYXBTYWZlVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBTYWZlVmFsdWVJbXBsID8gdmFsdWUuY2hhbmdpbmdUaGlzQnJlYWtzQXBwbGljYXRpb25TZWN1cml0eSA6XG4gICAgICAgIHZhbHVlO1xufVxuZnVuY3Rpb24gYWxsb3dTYW5pdGl6YXRpb25CeXBhc3NBbmRUaHJvdyh2YWx1ZSwgdHlwZSkge1xuICAgIGNvbnN0IGFjdHVhbFR5cGUgPSBnZXRTYW5pdGl6YXRpb25CeXBhc3NUeXBlKHZhbHVlKTtcbiAgICBpZiAoYWN0dWFsVHlwZSAhPSBudWxsICYmIGFjdHVhbFR5cGUgIT09IHR5cGUpIHtcbiAgICAgICAgLy8gQWxsb3cgUmVzb3VyY2VVUkxzIGluIFVSTCBjb250ZXh0cywgdGhleSBhcmUgc3RyaWN0bHkgbW9yZSB0cnVzdGVkLlxuICAgICAgICBpZiAoYWN0dWFsVHlwZSA9PT0gXCJSZXNvdXJjZVVSTFwiIC8qIFJlc291cmNlVXJsICovICYmIHR5cGUgPT09IFwiVVJMXCIgLyogVXJsICovKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVxdWlyZWQgYSBzYWZlICR7dHlwZX0sIGdvdCBhICR7YWN0dWFsVHlwZX0gKHNlZSBodHRwczovL2cuY28vbmcvc2VjdXJpdHkjeHNzKWApO1xuICAgIH1cbiAgICByZXR1cm4gYWN0dWFsVHlwZSA9PT0gdHlwZTtcbn1cbmZ1bmN0aW9uIGdldFNhbml0aXphdGlvbkJ5cGFzc1R5cGUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBTYWZlVmFsdWVJbXBsICYmIHZhbHVlLmdldFR5cGVOYW1lKCkgfHwgbnVsbDtcbn1cbi8qKlxuICogTWFyayBgaHRtbGAgc3RyaW5nIGFzIHRydXN0ZWQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3cmFwcyB0aGUgdHJ1c3RlZCBzdHJpbmcgaW4gYFN0cmluZ2AgYW5kIGJyYW5kcyBpdCBpbiBhIHdheSB3aGljaCBtYWtlcyBpdFxuICogcmVjb2duaXphYmxlIHRvIHtAbGluayBodG1sU2FuaXRpemVyfSB0byBiZSB0cnVzdGVkIGltcGxpY2l0bHkuXG4gKlxuICogQHBhcmFtIHRydXN0ZWRIdG1sIGBodG1sYCBzdHJpbmcgd2hpY2ggbmVlZHMgdG8gYmUgaW1wbGljaXRseSB0cnVzdGVkLlxuICogQHJldHVybnMgYSBgaHRtbGAgd2hpY2ggaGFzIGJlZW4gYnJhbmRlZCB0byBiZSBpbXBsaWNpdGx5IHRydXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0SHRtbCh0cnVzdGVkSHRtbCkge1xuICAgIHJldHVybiBuZXcgU2FmZUh0bWxJbXBsKHRydXN0ZWRIdG1sKTtcbn1cbi8qKlxuICogTWFyayBgc3R5bGVgIHN0cmluZyBhcyB0cnVzdGVkLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd3JhcHMgdGhlIHRydXN0ZWQgc3RyaW5nIGluIGBTdHJpbmdgIGFuZCBicmFuZHMgaXQgaW4gYSB3YXkgd2hpY2ggbWFrZXMgaXRcbiAqIHJlY29nbml6YWJsZSB0byB7QGxpbmsgc3R5bGVTYW5pdGl6ZXJ9IHRvIGJlIHRydXN0ZWQgaW1wbGljaXRseS5cbiAqXG4gKiBAcGFyYW0gdHJ1c3RlZFN0eWxlIGBzdHlsZWAgc3RyaW5nIHdoaWNoIG5lZWRzIHRvIGJlIGltcGxpY2l0bHkgdHJ1c3RlZC5cbiAqIEByZXR1cm5zIGEgYHN0eWxlYCBoaWNoIGhhcyBiZWVuIGJyYW5kZWQgdG8gYmUgaW1wbGljaXRseSB0cnVzdGVkLlxuICovXG5mdW5jdGlvbiBieXBhc3NTYW5pdGl6YXRpb25UcnVzdFN0eWxlKHRydXN0ZWRTdHlsZSkge1xuICAgIHJldHVybiBuZXcgU2FmZVN0eWxlSW1wbCh0cnVzdGVkU3R5bGUpO1xufVxuLyoqXG4gKiBNYXJrIGBzY3JpcHRgIHN0cmluZyBhcyB0cnVzdGVkLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd3JhcHMgdGhlIHRydXN0ZWQgc3RyaW5nIGluIGBTdHJpbmdgIGFuZCBicmFuZHMgaXQgaW4gYSB3YXkgd2hpY2ggbWFrZXMgaXRcbiAqIHJlY29nbml6YWJsZSB0byB7QGxpbmsgc2NyaXB0U2FuaXRpemVyfSB0byBiZSB0cnVzdGVkIGltcGxpY2l0bHkuXG4gKlxuICogQHBhcmFtIHRydXN0ZWRTY3JpcHQgYHNjcmlwdGAgc3RyaW5nIHdoaWNoIG5lZWRzIHRvIGJlIGltcGxpY2l0bHkgdHJ1c3RlZC5cbiAqIEByZXR1cm5zIGEgYHNjcmlwdGAgd2hpY2ggaGFzIGJlZW4gYnJhbmRlZCB0byBiZSBpbXBsaWNpdGx5IHRydXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0U2NyaXB0KHRydXN0ZWRTY3JpcHQpIHtcbiAgICByZXR1cm4gbmV3IFNhZmVTY3JpcHRJbXBsKHRydXN0ZWRTY3JpcHQpO1xufVxuLyoqXG4gKiBNYXJrIGB1cmxgIHN0cmluZyBhcyB0cnVzdGVkLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd3JhcHMgdGhlIHRydXN0ZWQgc3RyaW5nIGluIGBTdHJpbmdgIGFuZCBicmFuZHMgaXQgaW4gYSB3YXkgd2hpY2ggbWFrZXMgaXRcbiAqIHJlY29nbml6YWJsZSB0byB7QGxpbmsgdXJsU2FuaXRpemVyfSB0byBiZSB0cnVzdGVkIGltcGxpY2l0bHkuXG4gKlxuICogQHBhcmFtIHRydXN0ZWRVcmwgYHVybGAgc3RyaW5nIHdoaWNoIG5lZWRzIHRvIGJlIGltcGxpY2l0bHkgdHJ1c3RlZC5cbiAqIEByZXR1cm5zIGEgYHVybGAgIHdoaWNoIGhhcyBiZWVuIGJyYW5kZWQgdG8gYmUgaW1wbGljaXRseSB0cnVzdGVkLlxuICovXG5mdW5jdGlvbiBieXBhc3NTYW5pdGl6YXRpb25UcnVzdFVybCh0cnVzdGVkVXJsKSB7XG4gICAgcmV0dXJuIG5ldyBTYWZlVXJsSW1wbCh0cnVzdGVkVXJsKTtcbn1cbi8qKlxuICogTWFyayBgdXJsYCBzdHJpbmcgYXMgdHJ1c3RlZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdyYXBzIHRoZSB0cnVzdGVkIHN0cmluZyBpbiBgU3RyaW5nYCBhbmQgYnJhbmRzIGl0IGluIGEgd2F5IHdoaWNoIG1ha2VzIGl0XG4gKiByZWNvZ25pemFibGUgdG8ge0BsaW5rIHJlc291cmNlVXJsU2FuaXRpemVyfSB0byBiZSB0cnVzdGVkIGltcGxpY2l0bHkuXG4gKlxuICogQHBhcmFtIHRydXN0ZWRSZXNvdXJjZVVybCBgdXJsYCBzdHJpbmcgd2hpY2ggbmVlZHMgdG8gYmUgaW1wbGljaXRseSB0cnVzdGVkLlxuICogQHJldHVybnMgYSBgdXJsYCB3aGljaCBoYXMgYmVlbiBicmFuZGVkIHRvIGJlIGltcGxpY2l0bHkgdHJ1c3RlZC5cbiAqL1xuZnVuY3Rpb24gYnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RSZXNvdXJjZVVybCh0cnVzdGVkUmVzb3VyY2VVcmwpIHtcbiAgICByZXR1cm4gbmV3IFNhZmVSZXNvdXJjZVVybEltcGwodHJ1c3RlZFJlc291cmNlVXJsKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoaXMgaGVscGVyIGlzIHVzZWQgdG8gZ2V0IGhvbGQgb2YgYW4gaW5lcnQgdHJlZSBvZiBET00gZWxlbWVudHMgY29udGFpbmluZyBkaXJ0eSBIVE1MXG4gKiB0aGF0IG5lZWRzIHNhbml0aXppbmcuXG4gKiBEZXBlbmRpbmcgdXBvbiBicm93c2VyIHN1cHBvcnQgd2UgdXNlIG9uZSBvZiB0d28gc3RyYXRlZ2llcyBmb3IgZG9pbmcgdGhpcy5cbiAqIERlZmF1bHQ6IERPTVBhcnNlciBzdHJhdGVneVxuICogRmFsbGJhY2s6IEluZXJ0RG9jdW1lbnQgc3RyYXRlZ3lcbiAqL1xuZnVuY3Rpb24gZ2V0SW5lcnRCb2R5SGVscGVyKGRlZmF1bHREb2MpIHtcbiAgICBjb25zdCBpbmVydERvY3VtZW50SGVscGVyID0gbmV3IEluZXJ0RG9jdW1lbnRIZWxwZXIoZGVmYXVsdERvYyk7XG4gICAgcmV0dXJuIGlzRE9NUGFyc2VyQXZhaWxhYmxlKCkgPyBuZXcgRE9NUGFyc2VySGVscGVyKGluZXJ0RG9jdW1lbnRIZWxwZXIpIDogaW5lcnREb2N1bWVudEhlbHBlcjtcbn1cbi8qKlxuICogVXNlcyBET01QYXJzZXIgdG8gY3JlYXRlIGFuZCBmaWxsIGFuIGluZXJ0IGJvZHkgZWxlbWVudC5cbiAqIFRoaXMgaXMgdGhlIGRlZmF1bHQgc3RyYXRlZ3kgdXNlZCBpbiBicm93c2VycyB0aGF0IHN1cHBvcnQgaXQuXG4gKi9cbmNsYXNzIERPTVBhcnNlckhlbHBlciB7XG4gICAgY29uc3RydWN0b3IoaW5lcnREb2N1bWVudEhlbHBlcikge1xuICAgICAgICB0aGlzLmluZXJ0RG9jdW1lbnRIZWxwZXIgPSBpbmVydERvY3VtZW50SGVscGVyO1xuICAgIH1cbiAgICBnZXRJbmVydEJvZHlFbGVtZW50KGh0bWwpIHtcbiAgICAgICAgLy8gV2UgYWRkIHRoZXNlIGV4dHJhIGVsZW1lbnRzIHRvIGVuc3VyZSB0aGF0IHRoZSByZXN0IG9mIHRoZSBjb250ZW50IGlzIHBhcnNlZCBhcyBleHBlY3RlZFxuICAgICAgICAvLyBlLmcuIGxlYWRpbmcgd2hpdGVzcGFjZSBpcyBtYWludGFpbmVkIGFuZCB0YWdzIGxpa2UgYDxtZXRhPmAgZG8gbm90IGdldCBob2lzdGVkIHRvIHRoZVxuICAgICAgICAvLyBgPGhlYWQ+YCB0YWcuIE5vdGUgdGhhdCB0aGUgYDxib2R5PmAgdGFnIGlzIGNsb3NlZCBpbXBsaWNpdGx5IHRvIHByZXZlbnQgdW5jbG9zZWQgdGFnc1xuICAgICAgICAvLyBpbiBgaHRtbGAgZnJvbSBjb25zdW1pbmcgdGhlIG90aGVyd2lzZSBleHBsaWNpdCBgPC9ib2R5PmAgdGFnLlxuICAgICAgICBodG1sID0gJzxib2R5PjxyZW1vdmU+PC9yZW1vdmU+JyArIGh0bWw7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBib2R5ID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKVxuICAgICAgICAgICAgICAgIC5wYXJzZUZyb21TdHJpbmcodHJ1c3RlZEhUTUxGcm9tU3RyaW5nKGh0bWwpLCAndGV4dC9odG1sJylcbiAgICAgICAgICAgICAgICAuYm9keTtcbiAgICAgICAgICAgIGlmIChib2R5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gc29tZSBicm93c2VycyAoZS5nLiBNb3ppbGxhLzUuMCBpUGFkIEFwcGxlV2ViS2l0IE1vYmlsZSkgdGhlIGBib2R5YCBwcm9wZXJ0eSBvbmx5XG4gICAgICAgICAgICAgICAgLy8gYmVjb21lcyBhdmFpbGFibGUgaW4gdGhlIGZvbGxvd2luZyB0aWNrIG9mIHRoZSBKUyBlbmdpbmUuIEluIHRoYXQgY2FzZSB3ZSBmYWxsIGJhY2sgdG9cbiAgICAgICAgICAgICAgICAvLyB0aGUgYGluZXJ0RG9jdW1lbnRIZWxwZXJgIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5lcnREb2N1bWVudEhlbHBlci5nZXRJbmVydEJvZHlFbGVtZW50KGh0bWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZChib2R5LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVXNlIGFuIEhUTUw1IGB0ZW1wbGF0ZWAgZWxlbWVudCwgaWYgc3VwcG9ydGVkLCBvciBhbiBpbmVydCBib2R5IGVsZW1lbnQgY3JlYXRlZCB2aWFcbiAqIGBjcmVhdGVIdG1sRG9jdW1lbnRgIHRvIGNyZWF0ZSBhbmQgZmlsbCBhbiBpbmVydCBET00gZWxlbWVudC5cbiAqIFRoaXMgaXMgdGhlIGZhbGxiYWNrIHN0cmF0ZWd5IGlmIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgRE9NUGFyc2VyLlxuICovXG5jbGFzcyBJbmVydERvY3VtZW50SGVscGVyIHtcbiAgICBjb25zdHJ1Y3RvcihkZWZhdWx0RG9jKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdERvYyA9IGRlZmF1bHREb2M7XG4gICAgICAgIHRoaXMuaW5lcnREb2N1bWVudCA9IHRoaXMuZGVmYXVsdERvYy5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoJ3Nhbml0aXphdGlvbi1pbmVydCcpO1xuICAgICAgICBpZiAodGhpcy5pbmVydERvY3VtZW50LmJvZHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdXN1YWxseSB0aGVyZSBzaG91bGQgYmUgb25seSBvbmUgYm9keSBlbGVtZW50IGluIHRoZSBkb2N1bWVudCwgYnV0IElFIGRvZXNuJ3QgaGF2ZSBhbnksIHNvXG4gICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGNyZWF0ZSBvbmUuXG4gICAgICAgICAgICBjb25zdCBpbmVydEh0bWwgPSB0aGlzLmluZXJ0RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaHRtbCcpO1xuICAgICAgICAgICAgdGhpcy5pbmVydERvY3VtZW50LmFwcGVuZENoaWxkKGluZXJ0SHRtbCk7XG4gICAgICAgICAgICBjb25zdCBpbmVydEJvZHlFbGVtZW50ID0gdGhpcy5pbmVydERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICAgICAgICAgIGluZXJ0SHRtbC5hcHBlbmRDaGlsZChpbmVydEJvZHlFbGVtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRJbmVydEJvZHlFbGVtZW50KGh0bWwpIHtcbiAgICAgICAgLy8gUHJlZmVyIHVzaW5nIDx0ZW1wbGF0ZT4gZWxlbWVudCBpZiBzdXBwb3J0ZWQuXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlRWwgPSB0aGlzLmluZXJ0RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICAgICAgaWYgKCdjb250ZW50JyBpbiB0ZW1wbGF0ZUVsKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZUVsLmlubmVySFRNTCA9IHRydXN0ZWRIVE1MRnJvbVN0cmluZyhodG1sKTtcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZUVsO1xuICAgICAgICB9XG4gICAgICAgIC8vIE5vdGUgdGhhdCBwcmV2aW91c2x5IHdlIHVzZWQgdG8gZG8gc29tZXRoaW5nIGxpa2UgYHRoaXMuaW5lcnREb2N1bWVudC5ib2R5LmlubmVySFRNTCA9IGh0bWxgXG4gICAgICAgIC8vIGFuZCB3ZSByZXR1cm5lZCB0aGUgaW5lcnQgYGJvZHlgIG5vZGUuIFRoaXMgd2FzIGNoYW5nZWQsIGJlY2F1c2UgSUUgc2VlbXMgdG8gdHJlYXQgc2V0dGluZ1xuICAgICAgICAvLyBgaW5uZXJIVE1MYCBvbiBhbiBpbnNlcnRlZCBlbGVtZW50IGRpZmZlcmVudGx5LCBjb21wYXJlZCB0byBvbmUgdGhhdCBoYXNuJ3QgYmVlbiBpbnNlcnRlZFxuICAgICAgICAvLyB5ZXQuIEluIHBhcnRpY3VsYXIsIElFIGFwcGVhcnMgdG8gc3BsaXQgc29tZSBvZiB0aGUgdGV4dCBpbnRvIG11bHRpcGxlIHRleHQgbm9kZXMgcmF0aGVyXG4gICAgICAgIC8vIHRoYW4ga2VlcGluZyB0aGVtIGluIGEgc2luZ2xlIG9uZSB3aGljaCBlbmRzIHVwIG1lc3Npbmcgd2l0aCBJdnkncyBpMThuIHBhcnNpbmcgZnVydGhlclxuICAgICAgICAvLyBkb3duIHRoZSBsaW5lLiBUaGlzIGhhcyBiZWVuIHdvcmtlZCBhcm91bmQgYnkgY3JlYXRpbmcgYSBuZXcgaW5lcnQgYGJvZHlgIGFuZCB1c2luZyBpdCBhc1xuICAgICAgICAvLyB0aGUgcm9vdCBub2RlIGluIHdoaWNoIHdlIGluc2VydCB0aGUgSFRNTC5cbiAgICAgICAgY29uc3QgaW5lcnRCb2R5ID0gdGhpcy5pbmVydERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICAgICAgaW5lcnRCb2R5LmlubmVySFRNTCA9IHRydXN0ZWRIVE1MRnJvbVN0cmluZyhodG1sKTtcbiAgICAgICAgLy8gU3VwcG9ydDogSUUgMTEgb25seVxuICAgICAgICAvLyBzdHJpcCBjdXN0b20tbmFtZXNwYWNlZCBhdHRyaWJ1dGVzIG9uIElFPD0xMVxuICAgICAgICBpZiAodGhpcy5kZWZhdWx0RG9jLmRvY3VtZW50TW9kZSkge1xuICAgICAgICAgICAgdGhpcy5zdHJpcEN1c3RvbU5zQXR0cnMoaW5lcnRCb2R5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5lcnRCb2R5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGVuIElFMTEgY29tZXMgYWNyb3NzIGFuIHVua25vd24gbmFtZXNwYWNlZCBhdHRyaWJ1dGUgZS5nLiAneGxpbms6Zm9vJyBpdCBhZGRzICd4bWxuczpuczEnXG4gICAgICogYXR0cmlidXRlIHRvIGRlY2xhcmUgbnMxIG5hbWVzcGFjZSBhbmQgcHJlZml4ZXMgdGhlIGF0dHJpYnV0ZSB3aXRoICduczEnIChlLmcuXG4gICAgICogJ25zMTp4bGluazpmb28nKS5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdW5kZXNpcmFibGUgc2luY2Ugd2UgZG9uJ3Qgd2FudCB0byBhbGxvdyBhbnkgb2YgdGhlc2UgY3VzdG9tIGF0dHJpYnV0ZXMuIFRoaXMgbWV0aG9kXG4gICAgICogc3RyaXBzIHRoZW0gYWxsLlxuICAgICAqL1xuICAgIHN0cmlwQ3VzdG9tTnNBdHRycyhlbCkge1xuICAgICAgICBjb25zdCBlbEF0dHJzID0gZWwuYXR0cmlidXRlcztcbiAgICAgICAgLy8gbG9vcCBiYWNrd2FyZHMgc28gdGhhdCB3ZSBjYW4gc3VwcG9ydCByZW1vdmFscy5cbiAgICAgICAgZm9yIChsZXQgaSA9IGVsQXR0cnMubGVuZ3RoIC0gMTsgMCA8IGk7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgYXR0cmliID0gZWxBdHRycy5pdGVtKGkpO1xuICAgICAgICAgICAgY29uc3QgYXR0ck5hbWUgPSBhdHRyaWIubmFtZTtcbiAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ3htbG5zOm5zMScgfHwgYXR0ck5hbWUuaW5kZXhPZignbnMxOicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZXQgY2hpbGROb2RlID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgICAgd2hpbGUgKGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpXG4gICAgICAgICAgICAgICAgdGhpcy5zdHJpcEN1c3RvbU5zQXR0cnMoY2hpbGROb2RlKTtcbiAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogV2UgbmVlZCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGUgRE9NUGFyc2VyIGV4aXN0cyBpbiB0aGUgZ2xvYmFsIGNvbnRleHQgYW5kXG4gKiBzdXBwb3J0cyBwYXJzaW5nIEhUTUw7IEhUTUwgcGFyc2luZyBzdXBwb3J0IGlzIG5vdCBhcyB3aWRlIGFzIG90aGVyIGZvcm1hdHMsIHNlZVxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RPTVBhcnNlciNCcm93c2VyX2NvbXBhdGliaWxpdHkuXG4gKlxuICogQHN1cHByZXNzIHt1c2VsZXNzQ29kZX1cbiAqL1xuZnVuY3Rpb24gaXNET01QYXJzZXJBdmFpbGFibGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuICEhbmV3IHdpbmRvdy5ET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcodHJ1c3RlZEhUTUxGcm9tU3RyaW5nKCcnKSwgJ3RleHQvaHRtbCcpO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEEgcGF0dGVybiB0aGF0IHJlY29nbml6ZXMgYSBjb21tb25seSB1c2VmdWwgc3Vic2V0IG9mIFVSTHMgdGhhdCBhcmUgc2FmZS5cbiAqXG4gKiBUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaGVzIGEgc3Vic2V0IG9mIFVSTHMgdGhhdCB3aWxsIG5vdCBjYXVzZSBzY3JpcHRcbiAqIGV4ZWN1dGlvbiBpZiB1c2VkIGluIFVSTCBjb250ZXh0IHdpdGhpbiBhIEhUTUwgZG9jdW1lbnQuIFNwZWNpZmljYWxseSwgdGhpc1xuICogcmVndWxhciBleHByZXNzaW9uIG1hdGNoZXMgaWYgKGNvbW1lbnQgZnJvbSBoZXJlIG9uIGFuZCByZWdleCBjb3BpZWQgZnJvbVxuICogU295J3MgRXNjYXBpbmdDb252ZW50aW9ucyk6XG4gKiAoMSkgRWl0aGVyIGFuIGFsbG93ZWQgcHJvdG9jb2wgKGh0dHAsIGh0dHBzLCBtYWlsdG8gb3IgZnRwKS5cbiAqICgyKSBvciBubyBwcm90b2NvbC4gIEEgcHJvdG9jb2wgbXVzdCBiZSBmb2xsb3dlZCBieSBhIGNvbG9uLiBUaGUgYmVsb3dcbiAqICAgICBhbGxvd3MgdGhhdCBieSBhbGxvd2luZyBjb2xvbnMgb25seSBhZnRlciBvbmUgb2YgdGhlIGNoYXJhY3RlcnMgWy8/I10uXG4gKiAgICAgQSBjb2xvbiBhZnRlciBhIGhhc2ggKCMpIG11c3QgYmUgaW4gdGhlIGZyYWdtZW50LlxuICogICAgIE90aGVyd2lzZSwgYSBjb2xvbiBhZnRlciBhICg/KSBtdXN0IGJlIGluIGEgcXVlcnkuXG4gKiAgICAgT3RoZXJ3aXNlLCBhIGNvbG9uIGFmdGVyIGEgc2luZ2xlIHNvbGlkdXMgKC8pIG11c3QgYmUgaW4gYSBwYXRoLlxuICogICAgIE90aGVyd2lzZSwgYSBjb2xvbiBhZnRlciBhIGRvdWJsZSBzb2xpZHVzICgvLykgbXVzdCBiZSBpbiB0aGUgYXV0aG9yaXR5XG4gKiAgICAgKGJlZm9yZSBwb3J0KS5cbiAqXG4gKiBUaGUgcGF0dGVybiBkaXNhbGxvd3MgJiwgdXNlZCBpbiBIVE1MIGVudGl0eSBkZWNsYXJhdGlvbnMgYmVmb3JlXG4gKiBvbmUgb2YgdGhlIGNoYXJhY3RlcnMgaW4gWy8/I10uIFRoaXMgZGlzYWxsb3dzIEhUTUwgZW50aXRpZXMgdXNlZCBpbiB0aGVcbiAqIHByb3RvY29sIG5hbWUsIHdoaWNoIHNob3VsZCBuZXZlciBoYXBwZW4sIGUuZy4gXCJoJiMxMTY7dHBcIiBmb3IgXCJodHRwXCIuXG4gKiBJdCBhbHNvIGRpc2FsbG93cyBIVE1MIGVudGl0aWVzIGluIHRoZSBmaXJzdCBwYXRoIHBhcnQgb2YgYSByZWxhdGl2ZSBwYXRoLFxuICogZS5nLiBcImZvbyZsdDtiYXIvYmF6XCIuICBPdXIgZXhpc3RpbmcgZXNjYXBpbmcgZnVuY3Rpb25zIHNob3VsZCBub3QgcHJvZHVjZVxuICogdGhhdC4gTW9yZSBpbXBvcnRhbnRseSwgaXQgZGlzYWxsb3dzIG1hc2tpbmcgb2YgYSBjb2xvbixcbiAqIGUuZy4gXCJqYXZhc2NyaXB0JiM1ODsuLi5cIi5cbiAqXG4gKiBUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiB3YXMgdGFrZW4gZnJvbSB0aGUgQ2xvc3VyZSBzYW5pdGl6YXRpb24gbGlicmFyeS5cbiAqL1xuY29uc3QgU0FGRV9VUkxfUEFUVEVSTiA9IC9eKD86KD86aHR0cHM/fG1haWx0b3xmdHB8dGVsfGZpbGV8c21zKTp8W14mOi8/I10qKD86Wy8/I118JCkpL2dpO1xuLyogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBzYWZlIHNyY3NldCB2YWx1ZXMgKi9cbmNvbnN0IFNBRkVfU1JDU0VUX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xmaWxlKTp8W14mOi8/I10qKD86Wy8/I118JCkpL2dpO1xuLyoqIEEgcGF0dGVybiB0aGF0IG1hdGNoZXMgc2FmZSBkYXRhIFVSTHMuIE9ubHkgbWF0Y2hlcyBpbWFnZSwgdmlkZW8gYW5kIGF1ZGlvIHR5cGVzLiAqL1xuY29uc3QgREFUQV9VUkxfUEFUVEVSTiA9IC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFthLXowLTkrXFwvXSs9KiQvaTtcbmZ1bmN0aW9uIF9zYW5pdGl6ZVVybCh1cmwpIHtcbiAgICB1cmwgPSBTdHJpbmcodXJsKTtcbiAgICBpZiAodXJsLm1hdGNoKFNBRkVfVVJMX1BBVFRFUk4pIHx8IHVybC5tYXRjaChEQVRBX1VSTF9QQVRURVJOKSlcbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgV0FSTklORzogc2FuaXRpemluZyB1bnNhZmUgVVJMIHZhbHVlICR7dXJsfSAoc2VlIGh0dHBzOi8vZy5jby9uZy9zZWN1cml0eSN4c3MpYCk7XG4gICAgfVxuICAgIHJldHVybiAndW5zYWZlOicgKyB1cmw7XG59XG5mdW5jdGlvbiBzYW5pdGl6ZVNyY3NldChzcmNzZXQpIHtcbiAgICBzcmNzZXQgPSBTdHJpbmcoc3Jjc2V0KTtcbiAgICByZXR1cm4gc3Jjc2V0LnNwbGl0KCcsJykubWFwKChzcmNzZXQpID0+IF9zYW5pdGl6ZVVybChzcmNzZXQudHJpbSgpKSkuam9pbignLCAnKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5mdW5jdGlvbiB0YWdTZXQodGFncykge1xuICAgIGNvbnN0IHJlcyA9IHt9O1xuICAgIGZvciAoY29uc3QgdCBvZiB0YWdzLnNwbGl0KCcsJykpXG4gICAgICAgIHJlc1t0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIG1lcmdlKC4uLnNldHMpIHtcbiAgICBjb25zdCByZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHMgb2Ygc2V0cykge1xuICAgICAgICBmb3IgKGNvbnN0IHYgaW4gcykge1xuICAgICAgICAgICAgaWYgKHMuaGFzT3duUHJvcGVydHkodikpXG4gICAgICAgICAgICAgICAgcmVzW3ZdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuLy8gR29vZCBzb3VyY2Ugb2YgaW5mbyBhYm91dCBlbGVtZW50cyBhbmQgYXR0cmlidXRlc1xuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc2VtYW50aWNzXG4vLyBodHRwczovL3NpbW9uLmh0bWw1Lm9yZy9odG1sLWVsZW1lbnRzXG4vLyBTYWZlIFZvaWQgRWxlbWVudHMgLSBIVE1MNVxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jdm9pZC1lbGVtZW50c1xuY29uc3QgVk9JRF9FTEVNRU5UUyA9IHRhZ1NldCgnYXJlYSxicixjb2wsaHIsaW1nLHdicicpO1xuLy8gRWxlbWVudHMgdGhhdCB5b3UgY2FuLCBpbnRlbnRpb25hbGx5LCBsZWF2ZSBvcGVuIChhbmQgd2hpY2ggY2xvc2UgdGhlbXNlbHZlcylcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI29wdGlvbmFsLXRhZ3NcbmNvbnN0IE9QVElPTkFMX0VORF9UQUdfQkxPQ0tfRUxFTUVOVFMgPSB0YWdTZXQoJ2NvbGdyb3VwLGRkLGR0LGxpLHAsdGJvZHksdGQsdGZvb3QsdGgsdGhlYWQsdHInKTtcbmNvbnN0IE9QVElPTkFMX0VORF9UQUdfSU5MSU5FX0VMRU1FTlRTID0gdGFnU2V0KCdycCxydCcpO1xuY29uc3QgT1BUSU9OQUxfRU5EX1RBR19FTEVNRU5UUyA9IG1lcmdlKE9QVElPTkFMX0VORF9UQUdfSU5MSU5FX0VMRU1FTlRTLCBPUFRJT05BTF9FTkRfVEFHX0JMT0NLX0VMRU1FTlRTKTtcbi8vIFNhZmUgQmxvY2sgRWxlbWVudHMgLSBIVE1MNVxuY29uc3QgQkxPQ0tfRUxFTUVOVFMgPSBtZXJnZShPUFRJT05BTF9FTkRfVEFHX0JMT0NLX0VMRU1FTlRTLCB0YWdTZXQoJ2FkZHJlc3MsYXJ0aWNsZSwnICtcbiAgICAnYXNpZGUsYmxvY2txdW90ZSxjYXB0aW9uLGNlbnRlcixkZWwsZGV0YWlscyxkaWFsb2csZGlyLGRpdixkbCxmaWd1cmUsZmlnY2FwdGlvbixmb290ZXIsaDEsaDIsaDMsaDQsaDUsJyArXG4gICAgJ2g2LGhlYWRlcixoZ3JvdXAsaHIsaW5zLG1haW4sbWFwLG1lbnUsbmF2LG9sLHByZSxzZWN0aW9uLHN1bW1hcnksdGFibGUsdWwnKSk7XG4vLyBJbmxpbmUgRWxlbWVudHMgLSBIVE1MNVxuY29uc3QgSU5MSU5FX0VMRU1FTlRTID0gbWVyZ2UoT1BUSU9OQUxfRU5EX1RBR19JTkxJTkVfRUxFTUVOVFMsIHRhZ1NldCgnYSxhYmJyLGFjcm9ueW0sYXVkaW8sYiwnICtcbiAgICAnYmRpLGJkbyxiaWcsYnIsY2l0ZSxjb2RlLGRlbCxkZm4sZW0sZm9udCxpLGltZyxpbnMsa2JkLGxhYmVsLG1hcCxtYXJrLHBpY3R1cmUscSxydWJ5LHJwLHJ0LHMsJyArXG4gICAgJ3NhbXAsc21hbGwsc291cmNlLHNwYW4sc3RyaWtlLHN0cm9uZyxzdWIsc3VwLHRpbWUsdHJhY2ssdHQsdSx2YXIsdmlkZW8nKSk7XG5jb25zdCBWQUxJRF9FTEVNRU5UUyA9IG1lcmdlKFZPSURfRUxFTUVOVFMsIEJMT0NLX0VMRU1FTlRTLCBJTkxJTkVfRUxFTUVOVFMsIE9QVElPTkFMX0VORF9UQUdfRUxFTUVOVFMpO1xuLy8gQXR0cmlidXRlcyB0aGF0IGhhdmUgaHJlZiBhbmQgaGVuY2UgbmVlZCB0byBiZSBzYW5pdGl6ZWRcbmNvbnN0IFVSSV9BVFRSUyA9IHRhZ1NldCgnYmFja2dyb3VuZCxjaXRlLGhyZWYsaXRlbXR5cGUsbG9uZ2Rlc2MscG9zdGVyLHNyYyx4bGluazpocmVmJyk7XG4vLyBBdHRyaWJ1dGVzIHRoYXQgaGF2ZSBzcGVjaWFsIGhyZWYgc2V0IGhlbmNlIG5lZWQgdG8gYmUgc2FuaXRpemVkXG5jb25zdCBTUkNTRVRfQVRUUlMgPSB0YWdTZXQoJ3NyY3NldCcpO1xuY29uc3QgSFRNTF9BVFRSUyA9IHRhZ1NldCgnYWJicixhY2Nlc3NrZXksYWxpZ24sYWx0LGF1dG9wbGF5LGF4aXMsYmdjb2xvcixib3JkZXIsY2VsbHBhZGRpbmcsY2VsbHNwYWNpbmcsY2xhc3MsY2xlYXIsY29sb3IsY29scyxjb2xzcGFuLCcgK1xuICAgICdjb21wYWN0LGNvbnRyb2xzLGNvb3JkcyxkYXRldGltZSxkZWZhdWx0LGRpcixkb3dubG9hZCxmYWNlLGhlYWRlcnMsaGVpZ2h0LGhpZGRlbixocmVmbGFuZyxoc3BhY2UsJyArXG4gICAgJ2lzbWFwLGl0ZW1zY29wZSxpdGVtcHJvcCxraW5kLGxhYmVsLGxhbmcsbGFuZ3VhZ2UsbG9vcCxtZWRpYSxtdXRlZCxub2hyZWYsbm93cmFwLG9wZW4scHJlbG9hZCxyZWwscmV2LHJvbGUscm93cyxyb3dzcGFuLHJ1bGVzLCcgK1xuICAgICdzY29wZSxzY3JvbGxpbmcsc2hhcGUsc2l6ZSxzaXplcyxzcGFuLHNyY2xhbmcsc3RhcnQsc3VtbWFyeSx0YWJpbmRleCx0YXJnZXQsdGl0bGUsdHJhbnNsYXRlLHR5cGUsdXNlbWFwLCcgK1xuICAgICd2YWxpZ24sdmFsdWUsdnNwYWNlLHdpZHRoJyk7XG4vLyBBY2Nlc3NpYmlsaXR5IGF0dHJpYnV0ZXMgYXMgcGVyIFdBSS1BUklBIDEuMSAoVzNDIFdvcmtpbmcgRHJhZnQgMTQgRGVjZW1iZXIgMjAxOClcbmNvbnN0IEFSSUFfQVRUUlMgPSB0YWdTZXQoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCxhcmlhLWF0b21pYyxhcmlhLWF1dG9jb21wbGV0ZSxhcmlhLWJ1c3ksYXJpYS1jaGVja2VkLGFyaWEtY29sY291bnQsYXJpYS1jb2xpbmRleCwnICtcbiAgICAnYXJpYS1jb2xzcGFuLGFyaWEtY29udHJvbHMsYXJpYS1jdXJyZW50LGFyaWEtZGVzY3JpYmVkYnksYXJpYS1kZXRhaWxzLGFyaWEtZGlzYWJsZWQsYXJpYS1kcm9wZWZmZWN0LCcgK1xuICAgICdhcmlhLWVycm9ybWVzc2FnZSxhcmlhLWV4cGFuZGVkLGFyaWEtZmxvd3RvLGFyaWEtZ3JhYmJlZCxhcmlhLWhhc3BvcHVwLGFyaWEtaGlkZGVuLGFyaWEtaW52YWxpZCwnICtcbiAgICAnYXJpYS1rZXlzaG9ydGN1dHMsYXJpYS1sYWJlbCxhcmlhLWxhYmVsbGVkYnksYXJpYS1sZXZlbCxhcmlhLWxpdmUsYXJpYS1tb2RhbCxhcmlhLW11bHRpbGluZSwnICtcbiAgICAnYXJpYS1tdWx0aXNlbGVjdGFibGUsYXJpYS1vcmllbnRhdGlvbixhcmlhLW93bnMsYXJpYS1wbGFjZWhvbGRlcixhcmlhLXBvc2luc2V0LGFyaWEtcHJlc3NlZCxhcmlhLXJlYWRvbmx5LCcgK1xuICAgICdhcmlhLXJlbGV2YW50LGFyaWEtcmVxdWlyZWQsYXJpYS1yb2xlZGVzY3JpcHRpb24sYXJpYS1yb3djb3VudCxhcmlhLXJvd2luZGV4LGFyaWEtcm93c3BhbixhcmlhLXNlbGVjdGVkLCcgK1xuICAgICdhcmlhLXNldHNpemUsYXJpYS1zb3J0LGFyaWEtdmFsdWVtYXgsYXJpYS12YWx1ZW1pbixhcmlhLXZhbHVlbm93LGFyaWEtdmFsdWV0ZXh0Jyk7XG4vLyBOQjogVGhpcyBjdXJyZW50bHkgY29uc2Npb3VzbHkgZG9lc24ndCBzdXBwb3J0IFNWRy4gU1ZHIHNhbml0aXphdGlvbiBoYXMgaGFkIHNldmVyYWwgc2VjdXJpdHlcbi8vIGlzc3VlcyBpbiB0aGUgcGFzdCwgc28gaXQgc2VlbXMgc2FmZXIgdG8gbGVhdmUgaXQgb3V0IGlmIHBvc3NpYmxlLiBJZiBzdXBwb3J0IGZvciBiaW5kaW5nIFNWRyB2aWFcbi8vIGlubmVySFRNTCBpcyByZXF1aXJlZCwgU1ZHIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGFkZGVkIGhlcmUuXG4vLyBOQjogU2FuaXRpemF0aW9uIGRvZXMgbm90IGFsbG93IDxmb3JtPiBlbGVtZW50cyBvciBvdGhlciBhY3RpdmUgZWxlbWVudHMgKDxidXR0b24+IGV0YykuIFRob3NlXG4vLyBjYW4gYmUgc2FuaXRpemVkLCBidXQgdGhleSBpbmNyZWFzZSBzZWN1cml0eSBzdXJmYWNlIGFyZWEgd2l0aG91dCBhIGxlZ2l0aW1hdGUgdXNlIGNhc2UsIHNvIHRoZXlcbi8vIGFyZSBsZWZ0IG91dCBoZXJlLlxuY29uc3QgVkFMSURfQVRUUlMgPSBtZXJnZShVUklfQVRUUlMsIFNSQ1NFVF9BVFRSUywgSFRNTF9BVFRSUywgQVJJQV9BVFRSUyk7XG4vLyBFbGVtZW50cyB3aG9zZSBjb250ZW50IHNob3VsZCBub3QgYmUgdHJhdmVyc2VkL3ByZXNlcnZlZCwgaWYgdGhlIGVsZW1lbnRzIHRoZW1zZWx2ZXMgYXJlIGludmFsaWQuXG4vL1xuLy8gVHlwaWNhbGx5LCBgPGludmFsaWQ+U29tZSBjb250ZW50PC9pbnZhbGlkPmAgd291bGQgdHJhdmVyc2UgKGFuZCBpbiB0aGlzIGNhc2UgcHJlc2VydmUpXG4vLyBgU29tZSBjb250ZW50YCwgYnV0IHN0cmlwIGBpbnZhbGlkLWVsZW1lbnRgIG9wZW5pbmcvY2xvc2luZyB0YWdzLiBGb3Igc29tZSBlbGVtZW50cywgdGhvdWdoLCB3ZVxuLy8gZG9uJ3Qgd2FudCB0byBwcmVzZXJ2ZSB0aGUgY29udGVudCwgaWYgdGhlIGVsZW1lbnRzIHRoZW1zZWx2ZXMgYXJlIGdvaW5nIHRvIGJlIHJlbW92ZWQuXG5jb25zdCBTS0lQX1RSQVZFUlNJTkdfQ09OVEVOVF9JRl9JTlZBTElEX0VMRU1FTlRTID0gdGFnU2V0KCdzY3JpcHQsc3R5bGUsdGVtcGxhdGUnKTtcbi8qKlxuICogU2FuaXRpemluZ0h0bWxTZXJpYWxpemVyIHNlcmlhbGl6ZXMgYSBET00gZnJhZ21lbnQsIHN0cmlwcGluZyBvdXQgYW55IHVuc2FmZSBlbGVtZW50cyBhbmQgdW5zYWZlXG4gKiBhdHRyaWJ1dGVzLlxuICovXG5jbGFzcyBTYW5pdGl6aW5nSHRtbFNlcmlhbGl6ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBFeHBsaWNpdGx5IHRyYWNrIGlmIHNvbWV0aGluZyB3YXMgc3RyaXBwZWQsIHRvIGF2b2lkIGFjY2lkZW50YWxseSB3YXJuaW5nIG9mIHNhbml0aXphdGlvbiBqdXN0XG4gICAgICAgIC8vIGJlY2F1c2UgY2hhcmFjdGVycyB3ZXJlIHJlLWVuY29kZWQuXG4gICAgICAgIHRoaXMuc2FuaXRpemVkU29tZXRoaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYnVmID0gW107XG4gICAgfVxuICAgIHNhbml0aXplQ2hpbGRyZW4oZWwpIHtcbiAgICAgICAgLy8gVGhpcyBjYW5ub3QgdXNlIGEgVHJlZVdhbGtlciwgYXMgaXQgaGFzIHRvIHJ1biBvbiBBbmd1bGFyJ3MgdmFyaW91cyBET00gYWRhcHRlcnMuXG4gICAgICAgIC8vIEhvd2V2ZXIgdGhpcyBjb2RlIG5ldmVyIGFjY2Vzc2VzIHByb3BlcnRpZXMgb2ZmIG9mIGBkb2N1bWVudGAgYmVmb3JlIGRlbGV0aW5nIGl0cyBjb250ZW50c1xuICAgICAgICAvLyBhZ2Fpbiwgc28gaXQgc2hvdWxkbid0IGJlIHZ1bG5lcmFibGUgdG8gRE9NIGNsb2JiZXJpbmcuXG4gICAgICAgIGxldCBjdXJyZW50ID0gZWwuZmlyc3RDaGlsZDtcbiAgICAgICAgbGV0IHRyYXZlcnNlQ29udGVudCA9IHRydWU7XG4gICAgICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICB0cmF2ZXJzZUNvbnRlbnQgPSB0aGlzLnN0YXJ0RWxlbWVudChjdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnQubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFycyhjdXJyZW50Lm5vZGVWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBTdHJpcCBub24tZWxlbWVudCwgbm9uLXRleHQgbm9kZXMuXG4gICAgICAgICAgICAgICAgdGhpcy5zYW5pdGl6ZWRTb21ldGhpbmcgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRyYXZlcnNlQ29udGVudCAmJiBjdXJyZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5maXJzdENoaWxkO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBMZWF2aW5nIHRoZSBlbGVtZW50LiBXYWxrIHVwIGFuZCB0byB0aGUgcmlnaHQsIGNsb3NpbmcgdGFncyBhcyB3ZSBnby5cbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRFbGVtZW50KGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbmV4dCA9IHRoaXMuY2hlY2tDbG9iYmVyZWRFbGVtZW50KGN1cnJlbnQsIGN1cnJlbnQubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBuZXh0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuY2hlY2tDbG9iYmVyZWRFbGVtZW50KGN1cnJlbnQsIGN1cnJlbnQucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmLmpvaW4oJycpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYW5pdGl6ZXMgYW4gb3BlbmluZyBlbGVtZW50IHRhZyAoaWYgdmFsaWQpIGFuZCByZXR1cm5zIHdoZXRoZXIgdGhlIGVsZW1lbnQncyBjb250ZW50cyBzaG91bGRcbiAgICAgKiBiZSB0cmF2ZXJzZWQuIEVsZW1lbnQgY29udGVudCBtdXN0IGFsd2F5cyBiZSB0cmF2ZXJzZWQgKGV2ZW4gaWYgdGhlIGVsZW1lbnQgaXRzZWxmIGlzIG5vdFxuICAgICAqIHZhbGlkL3NhZmUpLCB1bmxlc3MgdGhlIGVsZW1lbnQgaXMgb25lIG9mIGBTS0lQX1RSQVZFUlNJTkdfQ09OVEVOVF9JRl9JTlZBTElEX0VMRU1FTlRTYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHRvIHNhbml0aXplLlxuICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZWxlbWVudCdzIGNvbnRlbnRzIHNob3VsZCBiZSB0cmF2ZXJzZWQuXG4gICAgICovXG4gICAgc3RhcnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCFWQUxJRF9FTEVNRU5UUy5oYXNPd25Qcm9wZXJ0eSh0YWdOYW1lKSkge1xuICAgICAgICAgICAgdGhpcy5zYW5pdGl6ZWRTb21ldGhpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuICFTS0lQX1RSQVZFUlNJTkdfQ09OVEVOVF9JRl9JTlZBTElEX0VMRU1FTlRTLmhhc093blByb3BlcnR5KHRhZ05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmLnB1c2goJzwnKTtcbiAgICAgICAgdGhpcy5idWYucHVzaCh0YWdOYW1lKTtcbiAgICAgICAgY29uc3QgZWxBdHRycyA9IGVsZW1lbnQuYXR0cmlidXRlcztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbEF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbEF0dHIgPSBlbEF0dHJzLml0ZW0oaSk7XG4gICAgICAgICAgICBjb25zdCBhdHRyTmFtZSA9IGVsQXR0ci5uYW1lO1xuICAgICAgICAgICAgY29uc3QgbG93ZXIgPSBhdHRyTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgaWYgKCFWQUxJRF9BVFRSUy5oYXNPd25Qcm9wZXJ0eShsb3dlcikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNhbml0aXplZFNvbWV0aGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBlbEF0dHIudmFsdWU7XG4gICAgICAgICAgICAvLyBUT0RPKG1hcnRpbnByb2JzdCk6IFNwZWNpYWwgY2FzZSBpbWFnZSBVUklzIGZvciBkYXRhOmltYWdlLy4uLlxuICAgICAgICAgICAgaWYgKFVSSV9BVFRSU1tsb3dlcl0pXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBfc2FuaXRpemVVcmwodmFsdWUpO1xuICAgICAgICAgICAgaWYgKFNSQ1NFVF9BVFRSU1tsb3dlcl0pXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBzYW5pdGl6ZVNyY3NldCh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLmJ1Zi5wdXNoKCcgJywgYXR0ck5hbWUsICc9XCInLCBlbmNvZGVFbnRpdGllcyh2YWx1ZSksICdcIicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmLnB1c2goJz4nKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVuZEVsZW1lbnQoY3VycmVudCkge1xuICAgICAgICBjb25zdCB0YWdOYW1lID0gY3VycmVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoVkFMSURfRUxFTUVOVFMuaGFzT3duUHJvcGVydHkodGFnTmFtZSkgJiYgIVZPSURfRUxFTUVOVFMuaGFzT3duUHJvcGVydHkodGFnTmFtZSkpIHtcbiAgICAgICAgICAgIHRoaXMuYnVmLnB1c2goJzwvJyk7XG4gICAgICAgICAgICB0aGlzLmJ1Zi5wdXNoKHRhZ05hbWUpO1xuICAgICAgICAgICAgdGhpcy5idWYucHVzaCgnPicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNoYXJzKGNoYXJzKSB7XG4gICAgICAgIHRoaXMuYnVmLnB1c2goZW5jb2RlRW50aXRpZXMoY2hhcnMpKTtcbiAgICB9XG4gICAgY2hlY2tDbG9iYmVyZWRFbGVtZW50KG5vZGUsIG5leHROb2RlKSB7XG4gICAgICAgIGlmIChuZXh0Tm9kZSAmJlxuICAgICAgICAgICAgKG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obmV4dE5vZGUpICZcbiAgICAgICAgICAgICAgICBOb2RlLkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSkgPT09IE5vZGUuRE9DVU1FTlRfUE9TSVRJT05fQ09OVEFJTkVEX0JZKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBzYW5pdGl6ZSBodG1sIGJlY2F1c2UgdGhlIGVsZW1lbnQgaXMgY2xvYmJlcmVkOiAke25vZGUub3V0ZXJIVE1MfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0Tm9kZTtcbiAgICB9XG59XG4vLyBSZWd1bGFyIEV4cHJlc3Npb25zIGZvciBwYXJzaW5nIHRhZ3MgYW5kIGF0dHJpYnV0ZXNcbmNvbnN0IFNVUlJPR0FURV9QQUlSX1JFR0VYUCA9IC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2c7XG4vLyAhIHRvIH4gaXMgdGhlIEFTQ0lJIHJhbmdlLlxuY29uc3QgTk9OX0FMUEhBTlVNRVJJQ19SRUdFWFAgPSAvKFteXFwjLX4gfCFdKS9nO1xuLyoqXG4gKiBFc2NhcGVzIGFsbCBwb3RlbnRpYWxseSBkYW5nZXJvdXMgY2hhcmFjdGVycywgc28gdGhhdCB0aGVcbiAqIHJlc3VsdGluZyBzdHJpbmcgY2FuIGJlIHNhZmVseSBpbnNlcnRlZCBpbnRvIGF0dHJpYnV0ZSBvclxuICogZWxlbWVudCB0ZXh0LlxuICogQHBhcmFtIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGVuY29kZUVudGl0aWVzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcbiAgICAgICAgLnJlcGxhY2UoU1VSUk9HQVRFX1BBSVJfUkVHRVhQLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgY29uc3QgaGkgPSBtYXRjaC5jaGFyQ29kZUF0KDApO1xuICAgICAgICBjb25zdCBsb3cgPSBtYXRjaC5jaGFyQ29kZUF0KDEpO1xuICAgICAgICByZXR1cm4gJyYjJyArICgoKGhpIC0gMHhEODAwKSAqIDB4NDAwKSArIChsb3cgLSAweERDMDApICsgMHgxMDAwMCkgKyAnOyc7XG4gICAgfSlcbiAgICAgICAgLnJlcGxhY2UoTk9OX0FMUEhBTlVNRVJJQ19SRUdFWFAsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICByZXR1cm4gJyYjJyArIG1hdGNoLmNoYXJDb2RlQXQoMCkgKyAnOyc7XG4gICAgfSlcbiAgICAgICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKVxuICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpO1xufVxubGV0IGluZXJ0Qm9keUhlbHBlcjtcbi8qKlxuICogU2FuaXRpemVzIHRoZSBnaXZlbiB1bnNhZmUsIHVudHJ1c3RlZCBIVE1MIGZyYWdtZW50LCBhbmQgcmV0dXJucyBIVE1MIHRleHQgdGhhdCBpcyBzYWZlIHRvIGFkZCB0b1xuICogdGhlIERPTSBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gKi9cbmZ1bmN0aW9uIF9zYW5pdGl6ZUh0bWwoZGVmYXVsdERvYywgdW5zYWZlSHRtbElucHV0KSB7XG4gICAgbGV0IGluZXJ0Qm9keUVsZW1lbnQgPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICAgIGluZXJ0Qm9keUhlbHBlciA9IGluZXJ0Qm9keUhlbHBlciB8fCBnZXRJbmVydEJvZHlIZWxwZXIoZGVmYXVsdERvYyk7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB1bnNhZmVIdG1sIGlzIGFjdHVhbGx5IGEgc3RyaW5nIChUeXBlU2NyaXB0IHR5cGVzIGFyZSBub3QgZW5mb3JjZWQgYXQgcnVudGltZSkuXG4gICAgICAgIGxldCB1bnNhZmVIdG1sID0gdW5zYWZlSHRtbElucHV0ID8gU3RyaW5nKHVuc2FmZUh0bWxJbnB1dCkgOiAnJztcbiAgICAgICAgaW5lcnRCb2R5RWxlbWVudCA9IGluZXJ0Qm9keUhlbHBlci5nZXRJbmVydEJvZHlFbGVtZW50KHVuc2FmZUh0bWwpO1xuICAgICAgICAvLyBtWFNTIHByb3RlY3Rpb24uIFJlcGVhdGVkbHkgcGFyc2UgdGhlIGRvY3VtZW50IHRvIG1ha2Ugc3VyZSBpdCBzdGFiaWxpemVzLCBzbyB0aGF0IGEgYnJvd3NlclxuICAgICAgICAvLyB0cnlpbmcgdG8gYXV0by1jb3JyZWN0IGluY29ycmVjdCBIVE1MIGNhbm5vdCBjYXVzZSBmb3JtZXJseSBpbmVydCBIVE1MIHRvIGJlY29tZSBkYW5nZXJvdXMuXG4gICAgICAgIGxldCBtWFNTQXR0ZW1wdHMgPSA1O1xuICAgICAgICBsZXQgcGFyc2VkSHRtbCA9IHVuc2FmZUh0bWw7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChtWFNTQXR0ZW1wdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBzYW5pdGl6ZSBodG1sIGJlY2F1c2UgdGhlIGlucHV0IGlzIHVuc3RhYmxlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtWFNTQXR0ZW1wdHMtLTtcbiAgICAgICAgICAgIHVuc2FmZUh0bWwgPSBwYXJzZWRIdG1sO1xuICAgICAgICAgICAgcGFyc2VkSHRtbCA9IGluZXJ0Qm9keUVsZW1lbnQuaW5uZXJIVE1MO1xuICAgICAgICAgICAgaW5lcnRCb2R5RWxlbWVudCA9IGluZXJ0Qm9keUhlbHBlci5nZXRJbmVydEJvZHlFbGVtZW50KHVuc2FmZUh0bWwpO1xuICAgICAgICB9IHdoaWxlICh1bnNhZmVIdG1sICE9PSBwYXJzZWRIdG1sKTtcbiAgICAgICAgY29uc3Qgc2FuaXRpemVyID0gbmV3IFNhbml0aXppbmdIdG1sU2VyaWFsaXplcigpO1xuICAgICAgICBjb25zdCBzYWZlSHRtbCA9IHNhbml0aXplci5zYW5pdGl6ZUNoaWxkcmVuKGdldFRlbXBsYXRlQ29udGVudChpbmVydEJvZHlFbGVtZW50KSB8fCBpbmVydEJvZHlFbGVtZW50KTtcbiAgICAgICAgaWYgKCh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpICYmIHNhbml0aXplci5zYW5pdGl6ZWRTb21ldGhpbmcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignV0FSTklORzogc2FuaXRpemluZyBIVE1MIHN0cmlwcGVkIHNvbWUgY29udGVudCwgc2VlIGh0dHBzOi8vZy5jby9uZy9zZWN1cml0eSN4c3MnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1c3RlZEhUTUxGcm9tU3RyaW5nKHNhZmVIdG1sKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIC8vIEluIGNhc2UgYW55dGhpbmcgZ29lcyB3cm9uZywgY2xlYXIgb3V0IGluZXJ0RWxlbWVudCB0byByZXNldCB0aGUgZW50aXJlIERPTSBzdHJ1Y3R1cmUuXG4gICAgICAgIGlmIChpbmVydEJvZHlFbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSBnZXRUZW1wbGF0ZUNvbnRlbnQoaW5lcnRCb2R5RWxlbWVudCkgfHwgaW5lcnRCb2R5RWxlbWVudDtcbiAgICAgICAgICAgIHdoaWxlIChwYXJlbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChwYXJlbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBnZXRUZW1wbGF0ZUNvbnRlbnQoZWwpIHtcbiAgICByZXR1cm4gJ2NvbnRlbnQnIGluIGVsIC8qKiBNaWNyb3NvZnQvVHlwZVNjcmlwdCMyMTUxNyAqLyAmJiBpc1RlbXBsYXRlRWxlbWVudChlbCkgP1xuICAgICAgICBlbC5jb250ZW50IDpcbiAgICAgICAgbnVsbDtcbn1cbmZ1bmN0aW9uIGlzVGVtcGxhdGVFbGVtZW50KGVsKSB7XG4gICAgcmV0dXJuIGVsLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiBlbC5ub2RlTmFtZSA9PT0gJ1RFTVBMQVRFJztcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEEgU2VjdXJpdHlDb250ZXh0IG1hcmtzIGEgbG9jYXRpb24gdGhhdCBoYXMgZGFuZ2Vyb3VzIHNlY3VyaXR5IGltcGxpY2F0aW9ucywgZS5nLiBhIERPTSBwcm9wZXJ0eVxuICogbGlrZSBgaW5uZXJIVE1MYCB0aGF0IGNvdWxkIGNhdXNlIENyb3NzIFNpdGUgU2NyaXB0aW5nIChYU1MpIHNlY3VyaXR5IGJ1Z3Mgd2hlbiBpbXByb3Blcmx5XG4gKiBoYW5kbGVkLlxuICpcbiAqIFNlZSBEb21TYW5pdGl6ZXIgZm9yIG1vcmUgZGV0YWlscyBvbiBzZWN1cml0eSBpbiBBbmd1bGFyIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbnZhciBTZWN1cml0eUNvbnRleHQ7XG4oZnVuY3Rpb24gKFNlY3VyaXR5Q29udGV4dCkge1xuICAgIFNlY3VyaXR5Q29udGV4dFtTZWN1cml0eUNvbnRleHRbXCJOT05FXCJdID0gMF0gPSBcIk5PTkVcIjtcbiAgICBTZWN1cml0eUNvbnRleHRbU2VjdXJpdHlDb250ZXh0W1wiSFRNTFwiXSA9IDFdID0gXCJIVE1MXCI7XG4gICAgU2VjdXJpdHlDb250ZXh0W1NlY3VyaXR5Q29udGV4dFtcIlNUWUxFXCJdID0gMl0gPSBcIlNUWUxFXCI7XG4gICAgU2VjdXJpdHlDb250ZXh0W1NlY3VyaXR5Q29udGV4dFtcIlNDUklQVFwiXSA9IDNdID0gXCJTQ1JJUFRcIjtcbiAgICBTZWN1cml0eUNvbnRleHRbU2VjdXJpdHlDb250ZXh0W1wiVVJMXCJdID0gNF0gPSBcIlVSTFwiO1xuICAgIFNlY3VyaXR5Q29udGV4dFtTZWN1cml0eUNvbnRleHRbXCJSRVNPVVJDRV9VUkxcIl0gPSA1XSA9IFwiUkVTT1VSQ0VfVVJMXCI7XG59KShTZWN1cml0eUNvbnRleHQgfHwgKFNlY3VyaXR5Q29udGV4dCA9IHt9KSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBbiBgaHRtbGAgc2FuaXRpemVyIHdoaWNoIGNvbnZlcnRzIHVudHJ1c3RlZCBgaHRtbGAgKipzdHJpbmcqKiBpbnRvIHRydXN0ZWQgc3RyaW5nIGJ5IHJlbW92aW5nXG4gKiBkYW5nZXJvdXMgY29udGVudC5cbiAqXG4gKiBUaGlzIG1ldGhvZCBwYXJzZXMgdGhlIGBodG1sYCBhbmQgbG9jYXRlcyBwb3RlbnRpYWxseSBkYW5nZXJvdXMgY29udGVudCAoc3VjaCBhcyB1cmxzIGFuZFxuICogamF2YXNjcmlwdCkgYW5kIHJlbW92ZXMgaXQuXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gbWFyayBhIHN0cmluZyBhcyB0cnVzdGVkIGJ5IGNhbGxpbmcge0BsaW5rIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0SHRtbH0uXG4gKlxuICogQHBhcmFtIHVuc2FmZUh0bWwgdW50cnVzdGVkIGBodG1sYCwgdHlwaWNhbGx5IGZyb20gdGhlIHVzZXIuXG4gKiBAcmV0dXJucyBgaHRtbGAgc3RyaW5nIHdoaWNoIGlzIHNhZmUgdG8gZGlzcGxheSB0byB1c2VyLCBiZWNhdXNlIGFsbCBvZiB0aGUgZGFuZ2Vyb3VzIGphdmFzY3JpcHRcbiAqIGFuZCB1cmxzIGhhdmUgYmVlbiByZW1vdmVkLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVzYW5pdGl6ZUh0bWwodW5zYWZlSHRtbCkge1xuICAgIGNvbnN0IHNhbml0aXplciA9IGdldFNhbml0aXplcigpO1xuICAgIGlmIChzYW5pdGl6ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydXN0ZWRIVE1MRnJvbVN0cmluZ0J5cGFzcyhzYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LkhUTUwsIHVuc2FmZUh0bWwpIHx8ICcnKTtcbiAgICB9XG4gICAgaWYgKGFsbG93U2FuaXRpemF0aW9uQnlwYXNzQW5kVGhyb3codW5zYWZlSHRtbCwgXCJIVE1MXCIgLyogSHRtbCAqLykpIHtcbiAgICAgICAgcmV0dXJuIHRydXN0ZWRIVE1MRnJvbVN0cmluZ0J5cGFzcyh1bndyYXBTYWZlVmFsdWUodW5zYWZlSHRtbCkpO1xuICAgIH1cbiAgICByZXR1cm4gX3Nhbml0aXplSHRtbChnZXREb2N1bWVudCgpLCByZW5kZXJTdHJpbmdpZnkodW5zYWZlSHRtbCkpO1xufVxuLyoqXG4gKiBBIGBzdHlsZWAgc2FuaXRpemVyIHdoaWNoIGNvbnZlcnRzIHVudHJ1c3RlZCBgc3R5bGVgICoqc3RyaW5nKiogaW50byB0cnVzdGVkIHN0cmluZyBieSByZW1vdmluZ1xuICogZGFuZ2Vyb3VzIGNvbnRlbnQuXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gbWFyayBhIHN0cmluZyBhcyB0cnVzdGVkIGJ5IGNhbGxpbmcge0BsaW5rIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0U3R5bGV9LlxuICpcbiAqIEBwYXJhbSB1bnNhZmVTdHlsZSB1bnRydXN0ZWQgYHN0eWxlYCwgdHlwaWNhbGx5IGZyb20gdGhlIHVzZXIuXG4gKiBAcmV0dXJucyBgc3R5bGVgIHN0cmluZyB3aGljaCBpcyBzYWZlIHRvIGJpbmQgdG8gdGhlIGBzdHlsZWAgcHJvcGVydGllcy5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c2FuaXRpemVTdHlsZSh1bnNhZmVTdHlsZSkge1xuICAgIGNvbnN0IHNhbml0aXplciA9IGdldFNhbml0aXplcigpO1xuICAgIGlmIChzYW5pdGl6ZXIpIHtcbiAgICAgICAgcmV0dXJuIHNhbml0aXplci5zYW5pdGl6ZShTZWN1cml0eUNvbnRleHQuU1RZTEUsIHVuc2FmZVN0eWxlKSB8fCAnJztcbiAgICB9XG4gICAgaWYgKGFsbG93U2FuaXRpemF0aW9uQnlwYXNzQW5kVGhyb3codW5zYWZlU3R5bGUsIFwiU3R5bGVcIiAvKiBTdHlsZSAqLykpIHtcbiAgICAgICAgcmV0dXJuIHVud3JhcFNhZmVWYWx1ZSh1bnNhZmVTdHlsZSk7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJTdHJpbmdpZnkodW5zYWZlU3R5bGUpO1xufVxuLyoqXG4gKiBBIGB1cmxgIHNhbml0aXplciB3aGljaCBjb252ZXJ0cyB1bnRydXN0ZWQgYHVybGAgKipzdHJpbmcqKiBpbnRvIHRydXN0ZWQgc3RyaW5nIGJ5IHJlbW92aW5nXG4gKiBkYW5nZXJvdXNcbiAqIGNvbnRlbnQuXG4gKlxuICogVGhpcyBtZXRob2QgcGFyc2VzIHRoZSBgdXJsYCBhbmQgbG9jYXRlcyBwb3RlbnRpYWxseSBkYW5nZXJvdXMgY29udGVudCAoc3VjaCBhcyBqYXZhc2NyaXB0KSBhbmRcbiAqIHJlbW92ZXMgaXQuXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gbWFyayBhIHN0cmluZyBhcyB0cnVzdGVkIGJ5IGNhbGxpbmcge0BsaW5rIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0VXJsfS5cbiAqXG4gKiBAcGFyYW0gdW5zYWZlVXJsIHVudHJ1c3RlZCBgdXJsYCwgdHlwaWNhbGx5IGZyb20gdGhlIHVzZXIuXG4gKiBAcmV0dXJucyBgdXJsYCBzdHJpbmcgd2hpY2ggaXMgc2FmZSB0byBiaW5kIHRvIHRoZSBgc3JjYCBwcm9wZXJ0aWVzIHN1Y2ggYXMgYDxpbWcgc3JjPmAsIGJlY2F1c2VcbiAqIGFsbCBvZiB0aGUgZGFuZ2Vyb3VzIGphdmFzY3JpcHQgaGFzIGJlZW4gcmVtb3ZlZC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c2FuaXRpemVVcmwodW5zYWZlVXJsKSB7XG4gICAgY29uc3Qgc2FuaXRpemVyID0gZ2V0U2FuaXRpemVyKCk7XG4gICAgaWYgKHNhbml0aXplcikge1xuICAgICAgICByZXR1cm4gc2FuaXRpemVyLnNhbml0aXplKFNlY3VyaXR5Q29udGV4dC5VUkwsIHVuc2FmZVVybCkgfHwgJyc7XG4gICAgfVxuICAgIGlmIChhbGxvd1Nhbml0aXphdGlvbkJ5cGFzc0FuZFRocm93KHVuc2FmZVVybCwgXCJVUkxcIiAvKiBVcmwgKi8pKSB7XG4gICAgICAgIHJldHVybiB1bndyYXBTYWZlVmFsdWUodW5zYWZlVXJsKTtcbiAgICB9XG4gICAgcmV0dXJuIF9zYW5pdGl6ZVVybChyZW5kZXJTdHJpbmdpZnkodW5zYWZlVXJsKSk7XG59XG4vKipcbiAqIEEgYHVybGAgc2FuaXRpemVyIHdoaWNoIG9ubHkgbGV0cyB0cnVzdGVkIGB1cmxgcyB0aHJvdWdoLlxuICpcbiAqIFRoaXMgcGFzc2VzIG9ubHkgYHVybGBzIG1hcmtlZCB0cnVzdGVkIGJ5IGNhbGxpbmcge0BsaW5rIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0UmVzb3VyY2VVcmx9LlxuICpcbiAqIEBwYXJhbSB1bnNhZmVSZXNvdXJjZVVybCB1bnRydXN0ZWQgYHVybGAsIHR5cGljYWxseSBmcm9tIHRoZSB1c2VyLlxuICogQHJldHVybnMgYHVybGAgc3RyaW5nIHdoaWNoIGlzIHNhZmUgdG8gYmluZCB0byB0aGUgYHNyY2AgcHJvcGVydGllcyBzdWNoIGFzIGA8aW1nIHNyYz5gLCBiZWNhdXNlXG4gKiBvbmx5IHRydXN0ZWQgYHVybGBzIGhhdmUgYmVlbiBhbGxvd2VkIHRvIHBhc3MuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXNhbml0aXplUmVzb3VyY2VVcmwodW5zYWZlUmVzb3VyY2VVcmwpIHtcbiAgICBjb25zdCBzYW5pdGl6ZXIgPSBnZXRTYW5pdGl6ZXIoKTtcbiAgICBpZiAoc2FuaXRpemVyKSB7XG4gICAgICAgIHJldHVybiB0cnVzdGVkU2NyaXB0VVJMRnJvbVN0cmluZ0J5cGFzcyhzYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LlJFU09VUkNFX1VSTCwgdW5zYWZlUmVzb3VyY2VVcmwpIHx8ICcnKTtcbiAgICB9XG4gICAgaWYgKGFsbG93U2FuaXRpemF0aW9uQnlwYXNzQW5kVGhyb3codW5zYWZlUmVzb3VyY2VVcmwsIFwiUmVzb3VyY2VVUkxcIiAvKiBSZXNvdXJjZVVybCAqLykpIHtcbiAgICAgICAgcmV0dXJuIHRydXN0ZWRTY3JpcHRVUkxGcm9tU3RyaW5nQnlwYXNzKHVud3JhcFNhZmVWYWx1ZSh1bnNhZmVSZXNvdXJjZVVybCkpO1xuICAgIH1cbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSA/XG4gICAgICAgICd1bnNhZmUgdmFsdWUgdXNlZCBpbiBhIHJlc291cmNlIFVSTCBjb250ZXh0IChzZWUgaHR0cHM6Ly9nLmNvL25nL3NlY3VyaXR5I3hzcyknIDpcbiAgICAgICAgJyc7XG4gICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcig5MDQgLyogVU5TQUZFX1ZBTFVFX0lOX1JFU09VUkNFX1VSTCAqLywgZXJyb3JNZXNzYWdlKTtcbn1cbi8qKlxuICogQSBgc2NyaXB0YCBzYW5pdGl6ZXIgd2hpY2ggb25seSBsZXRzIHRydXN0ZWQgamF2YXNjcmlwdCB0aHJvdWdoLlxuICpcbiAqIFRoaXMgcGFzc2VzIG9ubHkgYHNjcmlwdGBzIG1hcmtlZCB0cnVzdGVkIGJ5IGNhbGxpbmcge0BsaW5rXG4gKiBieXBhc3NTYW5pdGl6YXRpb25UcnVzdFNjcmlwdH0uXG4gKlxuICogQHBhcmFtIHVuc2FmZVNjcmlwdCB1bnRydXN0ZWQgYHNjcmlwdGAsIHR5cGljYWxseSBmcm9tIHRoZSB1c2VyLlxuICogQHJldHVybnMgYHVybGAgc3RyaW5nIHdoaWNoIGlzIHNhZmUgdG8gYmluZCB0byB0aGUgYDxzY3JpcHQ+YCBlbGVtZW50IHN1Y2ggYXMgYDxpbWcgc3JjPmAsXG4gKiBiZWNhdXNlIG9ubHkgdHJ1c3RlZCBgc2NyaXB0c2AgaGF2ZSBiZWVuIGFsbG93ZWQgdG8gcGFzcy5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c2FuaXRpemVTY3JpcHQodW5zYWZlU2NyaXB0KSB7XG4gICAgY29uc3Qgc2FuaXRpemVyID0gZ2V0U2FuaXRpemVyKCk7XG4gICAgaWYgKHNhbml0aXplcikge1xuICAgICAgICByZXR1cm4gdHJ1c3RlZFNjcmlwdEZyb21TdHJpbmdCeXBhc3Moc2FuaXRpemVyLnNhbml0aXplKFNlY3VyaXR5Q29udGV4dC5TQ1JJUFQsIHVuc2FmZVNjcmlwdCkgfHwgJycpO1xuICAgIH1cbiAgICBpZiAoYWxsb3dTYW5pdGl6YXRpb25CeXBhc3NBbmRUaHJvdyh1bnNhZmVTY3JpcHQsIFwiU2NyaXB0XCIgLyogU2NyaXB0ICovKSkge1xuICAgICAgICByZXR1cm4gdHJ1c3RlZFNjcmlwdEZyb21TdHJpbmdCeXBhc3ModW53cmFwU2FmZVZhbHVlKHVuc2FmZVNjcmlwdCkpO1xuICAgIH1cbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSA/XG4gICAgICAgICd1bnNhZmUgdmFsdWUgdXNlZCBpbiBhIHNjcmlwdCBjb250ZXh0JyA6XG4gICAgICAgICcnO1xuICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoOTA1IC8qIFVOU0FGRV9WQUxVRV9JTl9TQ1JJUFQgKi8sIGVycm9yTWVzc2FnZSk7XG59XG4vKipcbiAqIEEgdGVtcGxhdGUgdGFnIGZ1bmN0aW9uIGZvciBwcm9tb3RpbmcgdGhlIGFzc29jaWF0ZWQgY29uc3RhbnQgbGl0ZXJhbCB0byBhXG4gKiBUcnVzdGVkSFRNTC4gSW50ZXJwb2xhdGlvbiBpcyBleHBsaWNpdGx5IG5vdCBhbGxvd2VkLlxuICpcbiAqIEBwYXJhbSBodG1sIGNvbnN0YW50IHRlbXBsYXRlIGxpdGVyYWwgY29udGFpbmluZyB0cnVzdGVkIEhUTUwuXG4gKiBAcmV0dXJucyBUcnVzdGVkSFRNTCB3cmFwcGluZyBgaHRtbGAuXG4gKlxuICogQHNlY3VyaXR5IFRoaXMgaXMgYSBzZWN1cml0eS1zZW5zaXRpdmUgZnVuY3Rpb24gYW5kIHNob3VsZCBvbmx5IGJlIHVzZWQgdG9cbiAqIGNvbnZlcnQgY29uc3RhbnQgdmFsdWVzIG9mIGF0dHJpYnV0ZXMgYW5kIHByb3BlcnRpZXMgZm91bmQgaW5cbiAqIGFwcGxpY2F0aW9uLXByb3ZpZGVkIEFuZ3VsYXIgdGVtcGxhdGVzIHRvIFRydXN0ZWRIVE1MLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybV0cnVzdENvbnN0YW50SHRtbChodG1sKSB7XG4gICAgLy8gVGhlIGZvbGxvd2luZyBydW50aW1lIGNoZWNrIGVuc3VyZXMgdGhhdCB0aGUgZnVuY3Rpb24gd2FzIGNhbGxlZCBhcyBhXG4gICAgLy8gdGVtcGxhdGUgdGFnIChlLmcuIMm1ybV0cnVzdENvbnN0YW50SHRtbGBjb250ZW50YCksIHdpdGhvdXQgYW55IGludGVycG9sYXRpb25cbiAgICAvLyAoZS5nLiBub3QgybXJtXRydXN0Q29uc3RhbnRIdG1sYGNvbnRlbnQgJHt2YXJpYWJsZX1gKS4gQSBUZW1wbGF0ZVN0cmluZ3NBcnJheVxuICAgIC8vIGlzIGFuIGFycmF5IHdpdGggYSBgcmF3YCBwcm9wZXJ0eSB0aGF0IGlzIGFsc28gYW4gYXJyYXkuIFRoZSBhc3NvY2lhdGVkXG4gICAgLy8gdGVtcGxhdGUgbGl0ZXJhbCBoYXMgbm8gaW50ZXJwb2xhdGlvbiBpZiBhbmQgb25seSBpZiB0aGUgbGVuZ3RoIG9mIHRoZVxuICAgIC8vIFRlbXBsYXRlU3RyaW5nc0FycmF5IGlzIDEuXG4gICAgaWYgKG5nRGV2TW9kZSAmJiAoIUFycmF5LmlzQXJyYXkoaHRtbCkgfHwgIUFycmF5LmlzQXJyYXkoaHRtbC5yYXcpIHx8IGh0bWwubGVuZ3RoICE9PSAxKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgaW50ZXJwb2xhdGlvbiBpbiB0cnVzdGVkIEhUTUwgY29uc3RhbnQ6ICR7aHRtbC5qb2luKCc/Jyl9YCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVzdGVkSFRNTEZyb21TdHJpbmcoaHRtbFswXSk7XG59XG4vKipcbiAqIEEgdGVtcGxhdGUgdGFnIGZ1bmN0aW9uIGZvciBwcm9tb3RpbmcgdGhlIGFzc29jaWF0ZWQgY29uc3RhbnQgbGl0ZXJhbCB0byBhXG4gKiBUcnVzdGVkU2NyaXB0VVJMLiBJbnRlcnBvbGF0aW9uIGlzIGV4cGxpY2l0bHkgbm90IGFsbG93ZWQuXG4gKlxuICogQHBhcmFtIHVybCBjb25zdGFudCB0ZW1wbGF0ZSBsaXRlcmFsIGNvbnRhaW5pbmcgYSB0cnVzdGVkIHNjcmlwdCBVUkwuXG4gKiBAcmV0dXJucyBUcnVzdGVkU2NyaXB0VVJMIHdyYXBwaW5nIGB1cmxgLlxuICpcbiAqIEBzZWN1cml0eSBUaGlzIGlzIGEgc2VjdXJpdHktc2Vuc2l0aXZlIGZ1bmN0aW9uIGFuZCBzaG91bGQgb25seSBiZSB1c2VkIHRvXG4gKiBjb252ZXJ0IGNvbnN0YW50IHZhbHVlcyBvZiBhdHRyaWJ1dGVzIGFuZCBwcm9wZXJ0aWVzIGZvdW5kIGluXG4gKiBhcHBsaWNhdGlvbi1wcm92aWRlZCBBbmd1bGFyIHRlbXBsYXRlcyB0byBUcnVzdGVkU2NyaXB0VVJMLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybV0cnVzdENvbnN0YW50UmVzb3VyY2VVcmwodXJsKSB7XG4gICAgLy8gVGhlIGZvbGxvd2luZyBydW50aW1lIGNoZWNrIGVuc3VyZXMgdGhhdCB0aGUgZnVuY3Rpb24gd2FzIGNhbGxlZCBhcyBhXG4gICAgLy8gdGVtcGxhdGUgdGFnIChlLmcuIMm1ybV0cnVzdENvbnN0YW50UmVzb3VyY2VVcmxgY29udGVudGApLCB3aXRob3V0IGFueVxuICAgIC8vIGludGVycG9sYXRpb24gKGUuZy4gbm90IMm1ybV0cnVzdENvbnN0YW50UmVzb3VyY2VVcmxgY29udGVudCAke3ZhcmlhYmxlfWApLiBBXG4gICAgLy8gVGVtcGxhdGVTdHJpbmdzQXJyYXkgaXMgYW4gYXJyYXkgd2l0aCBhIGByYXdgIHByb3BlcnR5IHRoYXQgaXMgYWxzbyBhblxuICAgIC8vIGFycmF5LiBUaGUgYXNzb2NpYXRlZCB0ZW1wbGF0ZSBsaXRlcmFsIGhhcyBubyBpbnRlcnBvbGF0aW9uIGlmIGFuZCBvbmx5IGlmXG4gICAgLy8gdGhlIGxlbmd0aCBvZiB0aGUgVGVtcGxhdGVTdHJpbmdzQXJyYXkgaXMgMS5cbiAgICBpZiAobmdEZXZNb2RlICYmICghQXJyYXkuaXNBcnJheSh1cmwpIHx8ICFBcnJheS5pc0FycmF5KHVybC5yYXcpIHx8IHVybC5sZW5ndGggIT09IDEpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBpbnRlcnBvbGF0aW9uIGluIHRydXN0ZWQgVVJMIGNvbnN0YW50OiAke3VybC5qb2luKCc/Jyl9YCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVzdGVkU2NyaXB0VVJMRnJvbVN0cmluZyh1cmxbMF0pO1xufVxuLyoqXG4gKiBEZXRlY3RzIHdoaWNoIHNhbml0aXplciB0byB1c2UgZm9yIFVSTCBwcm9wZXJ0eSwgYmFzZWQgb24gdGFnIG5hbWUgYW5kIHByb3AgbmFtZS5cbiAqXG4gKiBUaGUgcnVsZXMgYXJlIGJhc2VkIG9uIHRoZSBSRVNPVVJDRV9VUkwgY29udGV4dCBjb25maWcgZnJvbVxuICogYHBhY2thZ2VzL2NvbXBpbGVyL3NyYy9zY2hlbWEvZG9tX3NlY3VyaXR5X3NjaGVtYS50c2AuXG4gKiBJZiB0YWcgYW5kIHByb3AgbmFtZXMgZG9uJ3QgbWF0Y2ggUmVzb3VyY2UgVVJMIHNjaGVtYSwgdXNlIFVSTCBzYW5pdGl6ZXIuXG4gKi9cbmZ1bmN0aW9uIGdldFVybFNhbml0aXplcih0YWcsIHByb3ApIHtcbiAgICBpZiAoKHByb3AgPT09ICdzcmMnICYmXG4gICAgICAgICh0YWcgPT09ICdlbWJlZCcgfHwgdGFnID09PSAnZnJhbWUnIHx8IHRhZyA9PT0gJ2lmcmFtZScgfHwgdGFnID09PSAnbWVkaWEnIHx8XG4gICAgICAgICAgICB0YWcgPT09ICdzY3JpcHQnKSkgfHxcbiAgICAgICAgKHByb3AgPT09ICdocmVmJyAmJiAodGFnID09PSAnYmFzZScgfHwgdGFnID09PSAnbGluaycpKSkge1xuICAgICAgICByZXR1cm4gybXJtXNhbml0aXplUmVzb3VyY2VVcmw7XG4gICAgfVxuICAgIHJldHVybiDJtcm1c2FuaXRpemVVcmw7XG59XG4vKipcbiAqIFNhbml0aXplcyBVUkwsIHNlbGVjdGluZyBzYW5pdGl6ZXIgZnVuY3Rpb24gYmFzZWQgb24gdGFnIGFuZCBwcm9wZXJ0eSBuYW1lcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgaW4gY2FzZSB3ZSBjYW4ndCBkZWZpbmUgc2VjdXJpdHkgY29udGV4dCBhdCBjb21waWxlIHRpbWUsIHdoZW4gb25seSBwcm9wXG4gKiBuYW1lIGlzIGF2YWlsYWJsZS4gVGhpcyBoYXBwZW5zIHdoZW4gd2UgZ2VuZXJhdGUgaG9zdCBiaW5kaW5ncyBmb3IgRGlyZWN0aXZlcy9Db21wb25lbnRzLiBUaGVcbiAqIGhvc3QgZWxlbWVudCBpcyB1bmtub3duIGF0IGNvbXBpbGUgdGltZSwgc28gd2UgZGVmZXIgY2FsY3VsYXRpb24gb2Ygc3BlY2lmaWMgc2FuaXRpemVyIHRvXG4gKiBydW50aW1lLlxuICpcbiAqIEBwYXJhbSB1bnNhZmVVcmwgdW50cnVzdGVkIGB1cmxgLCB0eXBpY2FsbHkgZnJvbSB0aGUgdXNlci5cbiAqIEBwYXJhbSB0YWcgdGFyZ2V0IGVsZW1lbnQgdGFnIG5hbWUuXG4gKiBAcGFyYW0gcHJvcCBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0aGF0IGNvbnRhaW5zIHRoZSB2YWx1ZS5cbiAqIEByZXR1cm5zIGB1cmxgIHN0cmluZyB3aGljaCBpcyBzYWZlIHRvIGJpbmQuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXNhbml0aXplVXJsT3JSZXNvdXJjZVVybCh1bnNhZmVVcmwsIHRhZywgcHJvcCkge1xuICAgIHJldHVybiBnZXRVcmxTYW5pdGl6ZXIodGFnLCBwcm9wKSh1bnNhZmVVcmwpO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVBZ2FpbnN0RXZlbnRQcm9wZXJ0aWVzKG5hbWUpIHtcbiAgICBpZiAobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gYEJpbmRpbmcgdG8gZXZlbnQgcHJvcGVydHkgJyR7bmFtZX0nIGlzIGRpc2FsbG93ZWQgZm9yIHNlY3VyaXR5IHJlYXNvbnMsIGAgK1xuICAgICAgICAgICAgYHBsZWFzZSB1c2UgKCR7bmFtZS5zbGljZSgyKX0pPS4uLmAgK1xuICAgICAgICAgICAgYFxcbklmICcke25hbWV9JyBpcyBhIGRpcmVjdGl2ZSBpbnB1dCwgbWFrZSBzdXJlIHRoZSBkaXJlY3RpdmUgaXMgaW1wb3J0ZWQgYnkgdGhlYCArXG4gICAgICAgICAgICBgIGN1cnJlbnQgbW9kdWxlLmA7XG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoMzA2IC8qIElOVkFMSURfRVZFTlRfQklORElORyAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZUFnYWluc3RFdmVudEF0dHJpYnV0ZXMobmFtZSkge1xuICAgIGlmIChuYW1lLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aCgnb24nKSkge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgQmluZGluZyB0byBldmVudCBhdHRyaWJ1dGUgJyR7bmFtZX0nIGlzIGRpc2FsbG93ZWQgZm9yIHNlY3VyaXR5IHJlYXNvbnMsIGAgK1xuICAgICAgICAgICAgYHBsZWFzZSB1c2UgKCR7bmFtZS5zbGljZSgyKX0pPS4uLmA7XG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoMzA2IC8qIElOVkFMSURfRVZFTlRfQklORElORyAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRTYW5pdGl6ZXIoKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIHJldHVybiBsVmlldyAmJiBsVmlld1tTQU5JVElaRVJdO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogUmV0dXJucyB0aGUgbWF0Y2hpbmcgYExDb250ZXh0YCBkYXRhIGZvciBhIGdpdmVuIERPTSBub2RlLCBkaXJlY3RpdmUgb3IgY29tcG9uZW50IGluc3RhbmNlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBleGFtaW5lIHRoZSBwcm92aWRlZCBET00gZWxlbWVudCwgY29tcG9uZW50LCBvciBkaXJlY3RpdmUgaW5zdGFuY2VcXCdzXG4gKiBtb25rZXktcGF0Y2hlZCBwcm9wZXJ0eSB0byBkZXJpdmUgdGhlIGBMQ29udGV4dGAgZGF0YS4gT25jZSBjYWxsZWQgdGhlbiB0aGUgbW9ua2V5LXBhdGNoZWRcbiAqIHZhbHVlIHdpbGwgYmUgdGhhdCBvZiB0aGUgbmV3bHkgY3JlYXRlZCBgTENvbnRleHRgLlxuICpcbiAqIElmIHRoZSBtb25rZXktcGF0Y2hlZCB2YWx1ZSBpcyB0aGUgYExWaWV3YCBpbnN0YW5jZSB0aGVuIHRoZSBjb250ZXh0IHZhbHVlIGZvciB0aGF0XG4gKiB0YXJnZXQgd2lsbCBiZSBjcmVhdGVkIGFuZCB0aGUgbW9ua2V5LXBhdGNoIHJlZmVyZW5jZSB3aWxsIGJlIHVwZGF0ZWQuIFRoZXJlZm9yZSB3aGVuIHRoaXNcbiAqIGZ1bmN0aW9uIGlzIGNhbGxlZCBpdCBtYXkgbXV0YXRlIHRoZSBwcm92aWRlZCBlbGVtZW50XFwncywgY29tcG9uZW50XFwncyBvciBhbnkgb2YgdGhlIGFzc29jaWF0ZWRcbiAqIGRpcmVjdGl2ZVxcJ3MgbW9ua2V5LXBhdGNoIHZhbHVlcy5cbiAqXG4gKiBJZiB0aGUgbW9ua2V5LXBhdGNoIHZhbHVlIGlzIG5vdCBkZXRlY3RlZCB0aGVuIHRoZSBjb2RlIHdpbGwgd2FsayB1cCB0aGUgRE9NIHVudGlsIGFuIGVsZW1lbnRcbiAqIGlzIGZvdW5kIHdoaWNoIGNvbnRhaW5zIGEgbW9ua2V5LXBhdGNoIHJlZmVyZW5jZS4gV2hlbiB0aGF0IG9jY3VycyB0aGVuIHRoZSBwcm92aWRlZCBlbGVtZW50XG4gKiB3aWxsIGJlIHVwZGF0ZWQgd2l0aCBhIG5ldyBjb250ZXh0ICh3aGljaCBpcyB0aGVuIHJldHVybmVkKS4gSWYgdGhlIG1vbmtleS1wYXRjaCB2YWx1ZSBpcyBub3RcbiAqIGRldGVjdGVkIGZvciBhIGNvbXBvbmVudC9kaXJlY3RpdmUgaW5zdGFuY2UgdGhlbiBpdCB3aWxsIHRocm93IGFuIGVycm9yIChhbGwgY29tcG9uZW50cyBhbmRcbiAqIGRpcmVjdGl2ZXMgc2hvdWxkIGJlIGF1dG9tYXRpY2FsbHkgbW9ua2V5LXBhdGNoZWQgYnkgaXZ5KS5cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IENvbXBvbmVudCwgRGlyZWN0aXZlIG9yIERPTSBOb2RlLlxuICovXG5mdW5jdGlvbiBnZXRMQ29udGV4dCh0YXJnZXQpIHtcbiAgICBsZXQgbXBWYWx1ZSA9IHJlYWRQYXRjaGVkRGF0YSh0YXJnZXQpO1xuICAgIGlmIChtcFZhbHVlKSB7XG4gICAgICAgIC8vIG9ubHkgd2hlbiBpdCdzIGFuIGFycmF5IGlzIGl0IGNvbnNpZGVyZWQgYW4gTFZpZXcgaW5zdGFuY2VcbiAgICAgICAgLy8gLi4uIG90aGVyd2lzZSBpdCdzIGFuIGFscmVhZHkgY29uc3RydWN0ZWQgTENvbnRleHQgaW5zdGFuY2VcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobXBWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxWaWV3ID0gbXBWYWx1ZTtcbiAgICAgICAgICAgIGxldCBub2RlSW5kZXg7XG4gICAgICAgICAgICBsZXQgY29tcG9uZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGV0IGRpcmVjdGl2ZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoaXNDb21wb25lbnRJbnN0YW5jZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICAgICAgbm9kZUluZGV4ID0gZmluZFZpYUNvbXBvbmVudChsVmlldywgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBpZiAobm9kZUluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIGNvbXBvbmVudCB3YXMgbm90IGZvdW5kIGluIHRoZSBhcHBsaWNhdGlvbicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb21wb25lbnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0RpcmVjdGl2ZUluc3RhbmNlKHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICBub2RlSW5kZXggPSBmaW5kVmlhRGlyZWN0aXZlKGxWaWV3LCB0YXJnZXQpO1xuICAgICAgICAgICAgICAgIGlmIChub2RlSW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgcHJvdmlkZWQgZGlyZWN0aXZlIHdhcyBub3QgZm91bmQgaW4gdGhlIGFwcGxpY2F0aW9uJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXMgPSBnZXREaXJlY3RpdmVzQXROb2RlSW5kZXgobm9kZUluZGV4LCBsVmlldywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZUluZGV4ID0gZmluZFZpYU5hdGl2ZUVsZW1lbnQobFZpZXcsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVJbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGUgZ29hbCBpcyBub3QgdG8gZmlsbCB0aGUgZW50aXJlIGNvbnRleHQgZnVsbCBvZiBkYXRhIGJlY2F1c2UgdGhlIGxvb2t1cHNcbiAgICAgICAgICAgIC8vIGFyZSBleHBlbnNpdmUuIEluc3RlYWQsIG9ubHkgdGhlIHRhcmdldCBkYXRhICh0aGUgZWxlbWVudCwgY29tcG9uZW50LCBjb250YWluZXIsIElDVVxuICAgICAgICAgICAgLy8gZXhwcmVzc2lvbiBvciBkaXJlY3RpdmUgZGV0YWlscykgYXJlIGZpbGxlZCBpbnRvIHRoZSBjb250ZXh0LiBJZiBjYWxsZWQgbXVsdGlwbGUgdGltZXNcbiAgICAgICAgICAgIC8vIHdpdGggZGlmZmVyZW50IHRhcmdldCB2YWx1ZXMgdGhlbiB0aGUgbWlzc2luZyB0YXJnZXQgZGF0YSB3aWxsIGJlIGZpbGxlZCBpbi5cbiAgICAgICAgICAgIGNvbnN0IG5hdGl2ZSA9IHVud3JhcFJOb2RlKGxWaWV3W25vZGVJbmRleF0pO1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdDdHggPSByZWFkUGF0Y2hlZERhdGEobmF0aXZlKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSAoZXhpc3RpbmdDdHggJiYgIUFycmF5LmlzQXJyYXkoZXhpc3RpbmdDdHgpKSA/XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdDdHggOlxuICAgICAgICAgICAgICAgIGNyZWF0ZUxDb250ZXh0KGxWaWV3LCBub2RlSW5kZXgsIG5hdGl2ZSk7XG4gICAgICAgICAgICAvLyBvbmx5IHdoZW4gdGhlIGNvbXBvbmVudCBoYXMgYmVlbiBkaXNjb3ZlcmVkIHRoZW4gdXBkYXRlIHRoZSBtb25rZXktcGF0Y2hcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQgJiYgY29udGV4dC5jb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIGF0dGFjaFBhdGNoRGF0YShjb250ZXh0LmNvbXBvbmVudCwgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBvbmx5IHdoZW4gdGhlIGRpcmVjdGl2ZXMgaGF2ZSBiZWVuIGRpc2NvdmVyZWQgdGhlbiB1cGRhdGUgdGhlIG1vbmtleS1wYXRjaFxuICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZXMgJiYgY29udGV4dC5kaXJlY3RpdmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyZWN0aXZlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBhdHRhY2hQYXRjaERhdGEoZGlyZWN0aXZlc1tpXSwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXR0YWNoUGF0Y2hEYXRhKGNvbnRleHQubmF0aXZlLCBjb250ZXh0KTtcbiAgICAgICAgICAgIG1wVmFsdWUgPSBjb250ZXh0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCByRWxlbWVudCA9IHRhcmdldDtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERvbU5vZGUockVsZW1lbnQpO1xuICAgICAgICAvLyBpZiB0aGUgY29udGV4dCBpcyBub3QgZm91bmQgdGhlbiB3ZSBuZWVkIHRvIHRyYXZlcnNlIHVwd2FyZHMgdXAgdGhlIERPTVxuICAgICAgICAvLyB0byBmaW5kIHRoZSBuZWFyZXN0IGVsZW1lbnQgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIG1vbmtleSBwYXRjaGVkIHdpdGggZGF0YVxuICAgICAgICBsZXQgcGFyZW50ID0gckVsZW1lbnQ7XG4gICAgICAgIHdoaWxlIChwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50Q29udGV4dCA9IHJlYWRQYXRjaGVkRGF0YShwYXJlbnQpO1xuICAgICAgICAgICAgaWYgKHBhcmVudENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbFZpZXc7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyZW50Q29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbFZpZXcgPSBwYXJlbnRDb250ZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbFZpZXcgPSBwYXJlbnRDb250ZXh0LmxWaWV3O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyB0aGUgZWRnZSBvZiB0aGUgYXBwIHdhcyBhbHNvIHJlYWNoZWQgaGVyZSB0aHJvdWdoIGFub3RoZXIgbWVhbnNcbiAgICAgICAgICAgICAgICAvLyAobWF5YmUgYmVjYXVzZSB0aGUgRE9NIHdhcyBjaGFuZ2VkIG1hbnVhbGx5KS5cbiAgICAgICAgICAgICAgICBpZiAoIWxWaWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGZpbmRWaWFOYXRpdmVFbGVtZW50KGxWaWV3LCByRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmF0aXZlID0gdW53cmFwUk5vZGUobFZpZXdbaW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUxDb250ZXh0KGxWaWV3LCBpbmRleCwgbmF0aXZlKTtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoUGF0Y2hEYXRhKG5hdGl2ZSwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIG1wVmFsdWUgPSBjb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1wVmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBlbXB0eSBpbnN0YW5jZSBvZiBhIGBMQ29udGV4dGAgY29udGV4dFxuICovXG5mdW5jdGlvbiBjcmVhdGVMQ29udGV4dChsVmlldywgbm9kZUluZGV4LCBuYXRpdmUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBsVmlldyxcbiAgICAgICAgbm9kZUluZGV4LFxuICAgICAgICBuYXRpdmUsXG4gICAgICAgIGNvbXBvbmVudDogdW5kZWZpbmVkLFxuICAgICAgICBkaXJlY3RpdmVzOiB1bmRlZmluZWQsXG4gICAgICAgIGxvY2FsUmVmczogdW5kZWZpbmVkLFxuICAgIH07XG59XG4vKipcbiAqIFRha2VzIGEgY29tcG9uZW50IGluc3RhbmNlIGFuZCByZXR1cm5zIHRoZSB2aWV3IGZvciB0aGF0IGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50SW5zdGFuY2VcbiAqIEByZXR1cm5zIFRoZSBjb21wb25lbnQncyB2aWV3XG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvbmVudFZpZXdCeUluc3RhbmNlKGNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgbGV0IGxWaWV3ID0gcmVhZFBhdGNoZWREYXRhKGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICBsZXQgdmlldztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShsVmlldykpIHtcbiAgICAgICAgY29uc3Qgbm9kZUluZGV4ID0gZmluZFZpYUNvbXBvbmVudChsVmlldywgY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgICB2aWV3ID0gZ2V0Q29tcG9uZW50TFZpZXdCeUluZGV4KG5vZGVJbmRleCwgbFZpZXcpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gY3JlYXRlTENvbnRleHQobFZpZXcsIG5vZGVJbmRleCwgdmlld1tIT1NUXSk7XG4gICAgICAgIGNvbnRleHQuY29tcG9uZW50ID0gY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIGF0dGFjaFBhdGNoRGF0YShjb21wb25lbnRJbnN0YW5jZSwgY29udGV4dCk7XG4gICAgICAgIGF0dGFjaFBhdGNoRGF0YShjb250ZXh0Lm5hdGl2ZSwgY29udGV4dCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gbFZpZXc7XG4gICAgICAgIHZpZXcgPSBnZXRDb21wb25lbnRMVmlld0J5SW5kZXgoY29udGV4dC5ub2RlSW5kZXgsIGNvbnRleHQubFZpZXcpO1xuICAgIH1cbiAgICByZXR1cm4gdmlldztcbn1cbi8qKlxuICogVGhpcyBwcm9wZXJ0eSB3aWxsIGJlIG1vbmtleS1wYXRjaGVkIG9uIGVsZW1lbnRzLCBjb21wb25lbnRzIGFuZCBkaXJlY3RpdmVzLlxuICovXG5jb25zdCBNT05LRVlfUEFUQ0hfS0VZX05BTUUgPSAnX19uZ0NvbnRleHRfXyc7XG4vKipcbiAqIEFzc2lnbnMgdGhlIGdpdmVuIGRhdGEgdG8gdGhlIGdpdmVuIHRhcmdldCAod2hpY2ggY291bGQgYmUgYSBjb21wb25lbnQsXG4gKiBkaXJlY3RpdmUgb3IgRE9NIG5vZGUgaW5zdGFuY2UpIHVzaW5nIG1vbmtleS1wYXRjaGluZy5cbiAqL1xuZnVuY3Rpb24gYXR0YWNoUGF0Y2hEYXRhKHRhcmdldCwgZGF0YSkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHRhcmdldCwgJ1RhcmdldCBleHBlY3RlZCcpO1xuICAgIHRhcmdldFtNT05LRVlfUEFUQ0hfS0VZX05BTUVdID0gZGF0YTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbW9ua2V5LXBhdGNoIHZhbHVlIGRhdGEgcHJlc2VudCBvbiB0aGUgdGFyZ2V0ICh3aGljaCBjb3VsZCBiZVxuICogYSBjb21wb25lbnQsIGRpcmVjdGl2ZSBvciBhIERPTSBub2RlKS5cbiAqL1xuZnVuY3Rpb24gcmVhZFBhdGNoZWREYXRhKHRhcmdldCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHRhcmdldCwgJ1RhcmdldCBleHBlY3RlZCcpO1xuICAgIHJldHVybiB0YXJnZXRbTU9OS0VZX1BBVENIX0tFWV9OQU1FXSB8fCBudWxsO1xufVxuZnVuY3Rpb24gcmVhZFBhdGNoZWRMVmlldyh0YXJnZXQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHJlYWRQYXRjaGVkRGF0YSh0YXJnZXQpO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlLmxWaWV3O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzQ29tcG9uZW50SW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UgJiYgaW5zdGFuY2UuY29uc3RydWN0b3IgJiYgaW5zdGFuY2UuY29uc3RydWN0b3IuybVjbXA7XG59XG5mdW5jdGlvbiBpc0RpcmVjdGl2ZUluc3RhbmNlKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGluc3RhbmNlICYmIGluc3RhbmNlLmNvbnN0cnVjdG9yICYmIGluc3RhbmNlLmNvbnN0cnVjdG9yLsm1ZGlyO1xufVxuLyoqXG4gKiBMb2NhdGVzIHRoZSBlbGVtZW50IHdpdGhpbiB0aGUgZ2l2ZW4gTFZpZXcgYW5kIHJldHVybnMgdGhlIG1hdGNoaW5nIGluZGV4XG4gKi9cbmZ1bmN0aW9uIGZpbmRWaWFOYXRpdmVFbGVtZW50KGxWaWV3LCB0YXJnZXQpIHtcbiAgICBjb25zdCB0VmlldyA9IGxWaWV3W1RWSUVXXTtcbiAgICBmb3IgKGxldCBpID0gSEVBREVSX09GRlNFVDsgaSA8IHRWaWV3LmJpbmRpbmdTdGFydEluZGV4OyBpKyspIHtcbiAgICAgICAgaWYgKHVud3JhcFJOb2RlKGxWaWV3W2ldKSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG4vKipcbiAqIExvY2F0ZXMgdGhlIG5leHQgdE5vZGUgKGNoaWxkLCBzaWJsaW5nIG9yIHBhcmVudCkuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlTmV4dEVsZW1lbnQodE5vZGUpIHtcbiAgICBpZiAodE5vZGUuY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHROb2RlLmNoaWxkO1xuICAgIH1cbiAgICBlbHNlIGlmICh0Tm9kZS5uZXh0KSB7XG4gICAgICAgIHJldHVybiB0Tm9kZS5uZXh0O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gTGV0J3MgdGFrZSB0aGUgZm9sbG93aW5nIHRlbXBsYXRlOiA8ZGl2PjxzcGFuPnRleHQ8L3NwYW4+PC9kaXY+PGNvbXBvbmVudC8+XG4gICAgICAgIC8vIEFmdGVyIGNoZWNraW5nIHRoZSB0ZXh0IG5vZGUsIHdlIG5lZWQgdG8gZmluZCB0aGUgbmV4dCBwYXJlbnQgdGhhdCBoYXMgYSBcIm5leHRcIiBUTm9kZSxcbiAgICAgICAgLy8gaW4gdGhpcyBjYXNlIHRoZSBwYXJlbnQgYGRpdmAsIHNvIHRoYXQgd2UgY2FuIGZpbmQgdGhlIGNvbXBvbmVudC5cbiAgICAgICAgd2hpbGUgKHROb2RlLnBhcmVudCAmJiAhdE5vZGUucGFyZW50Lm5leHQpIHtcbiAgICAgICAgICAgIHROb2RlID0gdE5vZGUucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0Tm9kZS5wYXJlbnQgJiYgdE5vZGUucGFyZW50Lm5leHQ7XG4gICAgfVxufVxuLyoqXG4gKiBMb2NhdGVzIHRoZSBjb21wb25lbnQgd2l0aGluIHRoZSBnaXZlbiBMVmlldyBhbmQgcmV0dXJucyB0aGUgbWF0Y2hpbmcgaW5kZXhcbiAqL1xuZnVuY3Rpb24gZmluZFZpYUNvbXBvbmVudChsVmlldywgY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICBjb25zdCBjb21wb25lbnRJbmRpY2VzID0gbFZpZXdbVFZJRVddLmNvbXBvbmVudHM7XG4gICAgaWYgKGNvbXBvbmVudEluZGljZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb25lbnRJbmRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50Q29tcG9uZW50SW5kZXggPSBjb21wb25lbnRJbmRpY2VzW2ldO1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50VmlldyA9IGdldENvbXBvbmVudExWaWV3QnlJbmRleChlbGVtZW50Q29tcG9uZW50SW5kZXgsIGxWaWV3KTtcbiAgICAgICAgICAgIGlmIChjb21wb25lbnRWaWV3W0NPTlRFWFRdID09PSBjb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50Q29tcG9uZW50SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHJvb3RDb21wb25lbnRWaWV3ID0gZ2V0Q29tcG9uZW50TFZpZXdCeUluZGV4KEhFQURFUl9PRkZTRVQsIGxWaWV3KTtcbiAgICAgICAgY29uc3Qgcm9vdENvbXBvbmVudCA9IHJvb3RDb21wb25lbnRWaWV3W0NPTlRFWFRdO1xuICAgICAgICBpZiAocm9vdENvbXBvbmVudCA9PT0gY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIC8vIHdlIGFyZSBkZWFsaW5nIHdpdGggdGhlIHJvb3QgZWxlbWVudCBoZXJlIHRoZXJlZm9yZSB3ZSBrbm93IHRoYXQgdGhlXG4gICAgICAgICAgICAvLyBlbGVtZW50IGlzIHRoZSB2ZXJ5IGZpcnN0IGVsZW1lbnQgYWZ0ZXIgdGhlIEhFQURFUiBkYXRhIGluIHRoZSBsVmlld1xuICAgICAgICAgICAgcmV0dXJuIEhFQURFUl9PRkZTRVQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuLyoqXG4gKiBMb2NhdGVzIHRoZSBkaXJlY3RpdmUgd2l0aGluIHRoZSBnaXZlbiBMVmlldyBhbmQgcmV0dXJucyB0aGUgbWF0Y2hpbmcgaW5kZXhcbiAqL1xuZnVuY3Rpb24gZmluZFZpYURpcmVjdGl2ZShsVmlldywgZGlyZWN0aXZlSW5zdGFuY2UpIHtcbiAgICAvLyBpZiBhIGRpcmVjdGl2ZSBpcyBtb25rZXkgcGF0Y2hlZCB0aGVuIGl0IHdpbGwgKGJ5IGRlZmF1bHQpXG4gICAgLy8gaGF2ZSBhIHJlZmVyZW5jZSB0byB0aGUgTFZpZXcgb2YgdGhlIGN1cnJlbnQgdmlldy4gVGhlXG4gICAgLy8gZWxlbWVudCBib3VuZCB0byB0aGUgZGlyZWN0aXZlIGJlaW5nIHNlYXJjaCBsaXZlcyBzb21ld2hlcmVcbiAgICAvLyBpbiB0aGUgdmlldyBkYXRhLiBXZSBsb29wIHRocm91Z2ggdGhlIG5vZGVzIGFuZCBjaGVjayB0aGVpclxuICAgIC8vIGxpc3Qgb2YgZGlyZWN0aXZlcyBmb3IgdGhlIGluc3RhbmNlLlxuICAgIGxldCB0Tm9kZSA9IGxWaWV3W1RWSUVXXS5maXJzdENoaWxkO1xuICAgIHdoaWxlICh0Tm9kZSkge1xuICAgICAgICBjb25zdCBkaXJlY3RpdmVJbmRleFN0YXJ0ID0gdE5vZGUuZGlyZWN0aXZlU3RhcnQ7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZUluZGV4RW5kID0gdE5vZGUuZGlyZWN0aXZlRW5kO1xuICAgICAgICBmb3IgKGxldCBpID0gZGlyZWN0aXZlSW5kZXhTdGFydDsgaSA8IGRpcmVjdGl2ZUluZGV4RW5kOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChsVmlld1tpXSA9PT0gZGlyZWN0aXZlSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdE5vZGUuaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdE5vZGUgPSB0cmF2ZXJzZU5leHRFbGVtZW50KHROb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBkaXJlY3RpdmVzIGV4dHJhY3RlZCBmcm9tIHRoZSBnaXZlbiB2aWV3IGJhc2VkIG9uIHRoZVxuICogcHJvdmlkZWQgbGlzdCBvZiBkaXJlY3RpdmUgaW5kZXggdmFsdWVzLlxuICpcbiAqIEBwYXJhbSBub2RlSW5kZXggVGhlIG5vZGUgaW5kZXhcbiAqIEBwYXJhbSBsVmlldyBUaGUgdGFyZ2V0IHZpZXcgZGF0YVxuICogQHBhcmFtIGluY2x1ZGVDb21wb25lbnRzIFdoZXRoZXIgb3Igbm90IHRvIGluY2x1ZGUgY29tcG9uZW50cyBpbiByZXR1cm5lZCBkaXJlY3RpdmVzXG4gKi9cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZXNBdE5vZGVJbmRleChub2RlSW5kZXgsIGxWaWV3LCBpbmNsdWRlQ29tcG9uZW50cykge1xuICAgIGNvbnN0IHROb2RlID0gbFZpZXdbVFZJRVddLmRhdGFbbm9kZUluZGV4XTtcbiAgICBsZXQgZGlyZWN0aXZlU3RhcnRJbmRleCA9IHROb2RlLmRpcmVjdGl2ZVN0YXJ0O1xuICAgIGlmIChkaXJlY3RpdmVTdGFydEluZGV4ID09IDApXG4gICAgICAgIHJldHVybiBFTVBUWV9BUlJBWTtcbiAgICBjb25zdCBkaXJlY3RpdmVFbmRJbmRleCA9IHROb2RlLmRpcmVjdGl2ZUVuZDtcbiAgICBpZiAoIWluY2x1ZGVDb21wb25lbnRzICYmIHROb2RlLmZsYWdzICYgMiAvKiBpc0NvbXBvbmVudEhvc3QgKi8pXG4gICAgICAgIGRpcmVjdGl2ZVN0YXJ0SW5kZXgrKztcbiAgICByZXR1cm4gbFZpZXcuc2xpY2UoZGlyZWN0aXZlU3RhcnRJbmRleCwgZGlyZWN0aXZlRW5kSW5kZXgpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50QXROb2RlSW5kZXgobm9kZUluZGV4LCBsVmlldykge1xuICAgIGNvbnN0IHROb2RlID0gbFZpZXdbVFZJRVddLmRhdGFbbm9kZUluZGV4XTtcbiAgICBsZXQgZGlyZWN0aXZlU3RhcnRJbmRleCA9IHROb2RlLmRpcmVjdGl2ZVN0YXJ0O1xuICAgIHJldHVybiB0Tm9kZS5mbGFncyAmIDIgLyogaXNDb21wb25lbnRIb3N0ICovID8gbFZpZXdbZGlyZWN0aXZlU3RhcnRJbmRleF0gOiBudWxsO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgbWFwIG9mIGxvY2FsIHJlZmVyZW5jZXMgKGxvY2FsIHJlZmVyZW5jZSBuYW1lID0+IGVsZW1lbnQgb3IgZGlyZWN0aXZlIGluc3RhbmNlKSB0aGF0XG4gKiBleGlzdCBvbiBhIGdpdmVuIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGRpc2NvdmVyTG9jYWxSZWZzKGxWaWV3LCBub2RlSW5kZXgpIHtcbiAgICBjb25zdCB0Tm9kZSA9IGxWaWV3W1RWSUVXXS5kYXRhW25vZGVJbmRleF07XG4gICAgaWYgKHROb2RlICYmIHROb2RlLmxvY2FsTmFtZXMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGxldCBsb2NhbEluZGV4ID0gdE5vZGUuaW5kZXggKyAxO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHROb2RlLmxvY2FsTmFtZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdFt0Tm9kZS5sb2NhbE5hbWVzW2ldXSA9IGxWaWV3W2xvY2FsSW5kZXhdO1xuICAgICAgICAgICAgbG9jYWxJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmNvbnN0IEVSUk9SX09SSUdJTkFMX0VSUk9SID0gJ25nT3JpZ2luYWxFcnJvcic7XG5jb25zdCBFUlJPUl9MT0dHRVIgPSAnbmdFcnJvckxvZ2dlcic7XG5mdW5jdGlvbiB3cmFwcGVkRXJyb3IobWVzc2FnZSwgb3JpZ2luYWxFcnJvcikge1xuICAgIGNvbnN0IG1zZyA9IGAke21lc3NhZ2V9IGNhdXNlZCBieTogJHtvcmlnaW5hbEVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBvcmlnaW5hbEVycm9yLm1lc3NhZ2UgOiBvcmlnaW5hbEVycm9yfWA7XG4gICAgY29uc3QgZXJyb3IgPSBFcnJvcihtc2cpO1xuICAgIGVycm9yW0VSUk9SX09SSUdJTkFMX0VSUk9SXSA9IG9yaWdpbmFsRXJyb3I7XG4gICAgcmV0dXJuIGVycm9yO1xufVxuZnVuY3Rpb24gZ2V0T3JpZ2luYWxFcnJvcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvcltFUlJPUl9PUklHSU5BTF9FUlJPUl07XG59XG5mdW5jdGlvbiBnZXRFcnJvckxvZ2dlcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvciAmJiBlcnJvcltFUlJPUl9MT0dHRVJdIHx8IGRlZmF1bHRFcnJvckxvZ2dlcjtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckxvZ2dlcihjb25zb2xlLCAuLi52YWx1ZXMpIHtcbiAgICBjb25zb2xlLmVycm9yKC4uLnZhbHVlcyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBQcm92aWRlcyBhIGhvb2sgZm9yIGNlbnRyYWxpemVkIGV4Y2VwdGlvbiBoYW5kbGluZy5cbiAqXG4gKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgRXJyb3JIYW5kbGVyYCBwcmludHMgZXJyb3IgbWVzc2FnZXMgdG8gdGhlIGBjb25zb2xlYC4gVG9cbiAqIGludGVyY2VwdCBlcnJvciBoYW5kbGluZywgd3JpdGUgYSBjdXN0b20gZXhjZXB0aW9uIGhhbmRsZXIgdGhhdCByZXBsYWNlcyB0aGlzIGRlZmF1bHQgYXNcbiAqIGFwcHJvcHJpYXRlIGZvciB5b3VyIGFwcC5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIGNsYXNzIE15RXJyb3JIYW5kbGVyIGltcGxlbWVudHMgRXJyb3JIYW5kbGVyIHtcbiAqICAgaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAqICAgICAvLyBkbyBzb21ldGhpbmcgd2l0aCB0aGUgZXhjZXB0aW9uXG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBATmdNb2R1bGUoe1xuICogICBwcm92aWRlcnM6IFt7cHJvdmlkZTogRXJyb3JIYW5kbGVyLCB1c2VDbGFzczogTXlFcnJvckhhbmRsZXJ9XVxuICogfSlcbiAqIGNsYXNzIE15TW9kdWxlIHt9XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIEVycm9ySGFuZGxlciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2NvbnNvbGUgPSBjb25zb2xlO1xuICAgIH1cbiAgICBoYW5kbGVFcnJvcihlcnJvcikge1xuICAgICAgICBjb25zdCBvcmlnaW5hbEVycm9yID0gdGhpcy5fZmluZE9yaWdpbmFsRXJyb3IoZXJyb3IpO1xuICAgICAgICAvLyBOb3RlOiBCcm93c2VyIGNvbnNvbGVzIHNob3cgdGhlIHBsYWNlIGZyb20gd2hlcmUgY29uc29sZS5lcnJvciB3YXMgY2FsbGVkLlxuICAgICAgICAvLyBXZSBjYW4gdXNlIHRoaXMgdG8gZ2l2ZSB1c2VycyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvci5cbiAgICAgICAgY29uc3QgZXJyb3JMb2dnZXIgPSBnZXRFcnJvckxvZ2dlcihlcnJvcik7XG4gICAgICAgIGVycm9yTG9nZ2VyKHRoaXMuX2NvbnNvbGUsIGBFUlJPUmAsIGVycm9yKTtcbiAgICAgICAgaWYgKG9yaWdpbmFsRXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yTG9nZ2VyKHRoaXMuX2NvbnNvbGUsIGBPUklHSU5BTCBFUlJPUmAsIG9yaWdpbmFsRXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfZmluZE9yaWdpbmFsRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgbGV0IGUgPSBlcnJvciAmJiBnZXRPcmlnaW5hbEVycm9yKGVycm9yKTtcbiAgICAgICAgd2hpbGUgKGUgJiYgZ2V0T3JpZ2luYWxFcnJvcihlKSkge1xuICAgICAgICAgICAgZSA9IGdldE9yaWdpbmFsRXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGUgfHwgbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBEZWZpbmVzIGEgc2NoZW1hIHRoYXQgYWxsb3dzIGFuIE5nTW9kdWxlIHRvIGNvbnRhaW4gdGhlIGZvbGxvd2luZzpcbiAqIC0gTm9uLUFuZ3VsYXIgZWxlbWVudHMgbmFtZWQgd2l0aCBkYXNoIGNhc2UgKGAtYCkuXG4gKiAtIEVsZW1lbnQgcHJvcGVydGllcyBuYW1lZCB3aXRoIGRhc2ggY2FzZSAoYC1gKS5cbiAqIERhc2ggY2FzZSBpcyB0aGUgbmFtaW5nIGNvbnZlbnRpb24gZm9yIGN1c3RvbSBlbGVtZW50cy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IENVU1RPTV9FTEVNRU5UU19TQ0hFTUEgPSB7XG4gICAgbmFtZTogJ2N1c3RvbS1lbGVtZW50cydcbn07XG4vKipcbiAqIERlZmluZXMgYSBzY2hlbWEgdGhhdCBhbGxvd3MgYW55IHByb3BlcnR5IG9uIGFueSBlbGVtZW50LlxuICpcbiAqIFRoaXMgc2NoZW1hIGFsbG93cyB5b3UgdG8gaWdub3JlIHRoZSBlcnJvcnMgcmVsYXRlZCB0byBhbnkgdW5rbm93biBlbGVtZW50cyBvciBwcm9wZXJ0aWVzIGluIGFcbiAqIHRlbXBsYXRlLiBUaGUgdXNhZ2Ugb2YgdGhpcyBzY2hlbWEgaXMgZ2VuZXJhbGx5IGRpc2NvdXJhZ2VkIGJlY2F1c2UgaXQgcHJldmVudHMgdXNlZnVsIHZhbGlkYXRpb25cbiAqIGFuZCBtYXkgaGlkZSByZWFsIGVycm9ycyBpbiB5b3VyIHRlbXBsYXRlLiBDb25zaWRlciB1c2luZyB0aGUgYENVU1RPTV9FTEVNRU5UU19TQ0hFTUFgIGluc3RlYWQuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBOT19FUlJPUlNfU0NIRU1BID0ge1xuICAgIG5hbWU6ICduby1lcnJvcnMtc2NoZW1hJ1xufTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIERpc2FsbG93ZWQgc3RyaW5ncyBpbiB0aGUgY29tbWVudC5cbiAqXG4gKiBzZWU6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2NvbW1lbnRzXG4gKi9cbmNvbnN0IENPTU1FTlRfRElTQUxMT1dFRCA9IC9ePnxeLT58PCEtLXwtLT58LS0hPnw8IS0kL2c7XG4vKipcbiAqIERlbGltaXRlciBpbiB0aGUgZGlzYWxsb3dlZCBzdHJpbmdzIHdoaWNoIG5lZWRzIHRvIGJlIHdyYXBwZWQgd2l0aCB6ZXJvIHdpdGggY2hhcmFjdGVyLlxuICovXG5jb25zdCBDT01NRU5UX0RFTElNSVRFUiA9IC8oPHw+KS87XG5jb25zdCBDT01NRU5UX0RFTElNSVRFUl9FU0NBUEVEID0gJ1xcdTIwMEIkMVxcdTIwMEInO1xuLyoqXG4gKiBFc2NhcGUgdGhlIGNvbnRlbnQgb2YgY29tbWVudCBzdHJpbmdzIHNvIHRoYXQgaXQgY2FuIGJlIHNhZmVseSBpbnNlcnRlZCBpbnRvIGEgY29tbWVudCBub2RlLlxuICpcbiAqIFRoZSBpc3N1ZSBpcyB0aGF0IEhUTUwgZG9lcyBub3Qgc3BlY2lmeSBhbnkgd2F5IHRvIGVzY2FwZSBjb21tZW50IGVuZCB0ZXh0IGluc2lkZSB0aGUgY29tbWVudC5cbiAqIENvbnNpZGVyOiBgPCEtLSBUaGUgd2F5IHlvdSBjbG9zZSBhIGNvbW1lbnQgaXMgd2l0aCBcIj5cIiwgYW5kIFwiLT5cIiBhdCB0aGUgYmVnaW5uaW5nIG9yIGJ5IFwiLS0+XCIgb3JcbiAqIFwiLS0hPlwiIGF0IHRoZSBlbmQuIC0tPmAuIEFib3ZlIHRoZSBgXCItLT5cImAgaXMgbWVhbnQgdG8gYmUgdGV4dCBub3QgYW4gZW5kIHRvIHRoZSBjb21tZW50LiBUaGlzXG4gKiBjYW4gYmUgY3JlYXRlZCBwcm9ncmFtbWF0aWNhbGx5IHRocm91Z2ggRE9NIEFQSXMuIChgPCEtLWAgYXJlIGFsc28gZGlzYWxsb3dlZC4pXG4gKlxuICogc2VlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNjb21tZW50c1xuICpcbiAqIGBgYFxuICogZGl2LmlubmVySFRNTCA9IGRpdi5pbm5lckhUTUxcbiAqIGBgYFxuICpcbiAqIE9uZSB3b3VsZCBleHBlY3QgdGhhdCB0aGUgYWJvdmUgY29kZSB3b3VsZCBiZSBzYWZlIHRvIGRvLCBidXQgaXQgdHVybnMgb3V0IHRoYXQgYmVjYXVzZSBjb21tZW50XG4gKiB0ZXh0IGlzIG5vdCBlc2NhcGVkLCB0aGUgY29tbWVudCBtYXkgY29udGFpbiB0ZXh0IHdoaWNoIHdpbGwgcHJlbWF0dXJlbHkgY2xvc2UgdGhlIGNvbW1lbnRcbiAqIG9wZW5pbmcgdXAgdGhlIGFwcGxpY2F0aW9uIGZvciBYU1MgYXR0YWNrLiAoSW4gU1NSIHdlIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlIGNvbW1lbnQgbm9kZXMgd2hpY2hcbiAqIG1heSBjb250YWluIHN1Y2ggdGV4dCBhbmQgZXhwZWN0IHRoZW0gdG8gYmUgc2FmZS4pXG4gKlxuICogVGhpcyBmdW5jdGlvbiBlc2NhcGVzIHRoZSBjb21tZW50IHRleHQgYnkgbG9va2luZyBmb3IgY29tbWVudCBkZWxpbWl0ZXJzIChgPGAgYW5kIGA+YCkgYW5kXG4gKiBzdXJyb3VuZGluZyB0aGVtIHdpdGggYF8+X2Agd2hlcmUgdGhlIGBfYCBpcyBhIHplcm8gd2lkdGggc3BhY2UgYFxcdTIwMEJgLiBUaGUgcmVzdWx0IGlzIHRoYXQgaWYgYVxuICogY29tbWVudCBjb250YWlucyBhbnkgb2YgdGhlIGNvbW1lbnQgc3RhcnQvZW5kIGRlbGltaXRlcnMgKHN1Y2ggYXMgYDwhLS1gLCBgLS0+YCBvciBgLS0hPmApIHRoZVxuICogdGV4dCBpdCB3aWxsIHJlbmRlciBub3JtYWxseSBidXQgaXQgd2lsbCBub3QgY2F1c2UgdGhlIEhUTUwgcGFyc2VyIHRvIGNsb3NlL29wZW4gdGhlIGNvbW1lbnQuXG4gKlxuICogQHBhcmFtIHZhbHVlIHRleHQgdG8gbWFrZSBzYWZlIGZvciBjb21tZW50IG5vZGUgYnkgZXNjYXBpbmcgdGhlIGNvbW1lbnQgb3Blbi9jbG9zZSBjaGFyYWN0ZXJcbiAqICAgICBzZXF1ZW5jZS5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlQ29tbWVudFRleHQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZShDT01NRU5UX0RJU0FMTE9XRUQsICh0ZXh0KSA9PiB0ZXh0LnJlcGxhY2UoQ09NTUVOVF9ERUxJTUlURVIsIENPTU1FTlRfREVMSU1JVEVSX0VTQ0FQRUQpKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEZWJ1Z0JpbmRpbmdOYW1lKG5hbWUpIHtcbiAgICAvLyBBdHRyaWJ1dGUgbmFtZXMgd2l0aCBgJGAgKGVnIGB4LXkkYCkgYXJlIHZhbGlkIHBlciBzcGVjLCBidXQgdW5zdXBwb3J0ZWQgYnkgc29tZSBicm93c2Vyc1xuICAgIG5hbWUgPSBjYW1lbENhc2VUb0Rhc2hDYXNlKG5hbWUucmVwbGFjZSgvWyRAXS9nLCAnXycpKTtcbiAgICByZXR1cm4gYG5nLXJlZmxlY3QtJHtuYW1lfWA7XG59XG5jb25zdCBDQU1FTF9DQVNFX1JFR0VYUCA9IC8oW0EtWl0pL2c7XG5mdW5jdGlvbiBjYW1lbENhc2VUb0Rhc2hDYXNlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0LnJlcGxhY2UoQ0FNRUxfQ0FTRV9SRUdFWFAsICguLi5tKSA9PiAnLScgKyBtWzFdLnRvTG93ZXJDYXNlKCkpO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplRGVidWdCaW5kaW5nVmFsdWUodmFsdWUpIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBMaW1pdCB0aGUgc2l6ZSBvZiB0aGUgdmFsdWUgYXMgb3RoZXJ3aXNlIHRoZSBET00ganVzdCBnZXRzIHBvbGx1dGVkLlxuICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IHZhbHVlLnRvU3RyaW5nKCkuc2xpY2UoMCwgMzApIDogdmFsdWU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAnW0VSUk9SXSBFeGNlcHRpb24gd2hpbGUgdHJ5aW5nIHRvIHNlcmlhbGl6ZSB0aGUgdmFsdWUnO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jb25zdCBkZWZhdWx0U2NoZWR1bGVyID0gKCgpID0+ICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCAvLyBicm93c2VyIG9ubHlcbiAgICBzZXRUaW1lb3V0IC8vIGV2ZXJ5dGhpbmcgZWxzZVxuKVxuICAgIC5iaW5kKF9nbG9iYWwpKSgpO1xuLyoqXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXJlc29sdmVXaW5kb3coZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG59XG4vKipcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cmVzb2x2ZURvY3VtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuLyoqXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXJlc29sdmVCb2R5KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5vd25lckRvY3VtZW50LmJvZHk7XG59XG4vKipcbiAqIFRoZSBzcGVjaWFsIGRlbGltaXRlciB3ZSB1c2UgdG8gc2VwYXJhdGUgcHJvcGVydHkgbmFtZXMsIHByZWZpeGVzLCBhbmQgc3VmZml4ZXNcbiAqIGluIHByb3BlcnR5IGJpbmRpbmcgbWV0YWRhdGEuIFNlZSBzdG9yZUJpbmRpbmdNZXRhZGF0YSgpLlxuICpcbiAqIFdlIGludGVudGlvbmFsbHkgdXNlIHRoZSBVbmljb2RlIFwiUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXCIgKFUrRkZGRCkgYXMgYSBkZWxpbWl0ZXJcbiAqIGJlY2F1c2UgaXQgaXMgYSB2ZXJ5IHVuY29tbW9uIGNoYXJhY3RlciB0aGF0IGlzIHVubGlrZWx5IHRvIGJlIHBhcnQgb2YgYSB1c2VyJ3NcbiAqIHByb3BlcnR5IG5hbWVzIG9yIGludGVycG9sYXRpb24gc3RyaW5ncy4gSWYgaXQgaXMgaW4gZmFjdCB1c2VkIGluIGEgcHJvcGVydHlcbiAqIGJpbmRpbmcsIERlYnVnRWxlbWVudC5wcm9wZXJ0aWVzIHdpbGwgbm90IHJldHVybiB0aGUgY29ycmVjdCB2YWx1ZSBmb3IgdGhhdFxuICogYmluZGluZy4gSG93ZXZlciwgdGhlcmUgc2hvdWxkIGJlIG5vIHJ1bnRpbWUgZWZmZWN0IGZvciByZWFsIGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBUaGlzIGNoYXJhY3RlciBpcyB0eXBpY2FsbHkgcmVuZGVyZWQgYXMgYSBxdWVzdGlvbiBtYXJrIGluc2lkZSBvZiBhIGRpYW1vbmQuXG4gKiBTZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3BlY2lhbHNfKFVuaWNvZGVfYmxvY2spXG4gKlxuICovXG5jb25zdCBJTlRFUlBPTEFUSU9OX0RFTElNSVRFUiA9IGDvv71gO1xuLyoqXG4gKiBVbndyYXAgYSB2YWx1ZSB3aGljaCBtaWdodCBiZSBiZWhpbmQgYSBjbG9zdXJlIChmb3IgZm9yd2FyZCBkZWNsYXJhdGlvbiByZWFzb25zKS5cbiAqL1xuZnVuY3Rpb24gbWF5YmVVbndyYXBGbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKiogQ2FsbGVkIHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGNvbXBvbmVudCBzZWxlY3RvcnMgdGhhdCBtYXRjaCBhIGdpdmVuIG5vZGUgKi9cbmZ1bmN0aW9uIHRocm93TXVsdGlwbGVDb21wb25lbnRFcnJvcih0Tm9kZSkge1xuICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoLTMwMCAvKiBNVUxUSVBMRV9DT01QT05FTlRTX01BVENIICovLCBgTXVsdGlwbGUgY29tcG9uZW50cyBtYXRjaCBub2RlIHdpdGggdGFnbmFtZSAke3ROb2RlLnZhbHVlfWApO1xufVxuLyoqIFRocm93cyBhbiBFeHByZXNzaW9uQ2hhbmdlZEFmdGVyQ2hlY2tlZCBlcnJvciBpZiBjaGVja05vQ2hhbmdlcyBtb2RlIGlzIG9uLiAqL1xuZnVuY3Rpb24gdGhyb3dFcnJvcklmTm9DaGFuZ2VzTW9kZShjcmVhdGlvbk1vZGUsIG9sZFZhbHVlLCBjdXJyVmFsdWUsIHByb3BOYW1lKSB7XG4gICAgY29uc3QgZmllbGQgPSBwcm9wTmFtZSA/IGAgZm9yICcke3Byb3BOYW1lfSdgIDogJyc7XG4gICAgbGV0IG1zZyA9IGBFeHByZXNzaW9uQ2hhbmdlZEFmdGVySXRIYXNCZWVuQ2hlY2tlZEVycm9yOiBFeHByZXNzaW9uIGhhcyBjaGFuZ2VkIGFmdGVyIGl0IHdhcyBjaGVja2VkLiBQcmV2aW91cyB2YWx1ZSR7ZmllbGR9OiAnJHtvbGRWYWx1ZX0nLiBDdXJyZW50IHZhbHVlOiAnJHtjdXJyVmFsdWV9Jy5gO1xuICAgIGlmIChjcmVhdGlvbk1vZGUpIHtcbiAgICAgICAgbXNnICs9XG4gICAgICAgICAgICBgIEl0IHNlZW1zIGxpa2UgdGhlIHZpZXcgaGFzIGJlZW4gY3JlYXRlZCBhZnRlciBpdHMgcGFyZW50IGFuZCBpdHMgY2hpbGRyZW4gaGF2ZSBiZWVuIGRpcnR5IGNoZWNrZWQuYCArXG4gICAgICAgICAgICAgICAgYCBIYXMgaXQgYmVlbiBjcmVhdGVkIGluIGEgY2hhbmdlIGRldGVjdGlvbiBob29rP2A7XG4gICAgfVxuICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoLTEwMCAvKiBFWFBSRVNTSU9OX0NIQU5HRURfQUZURVJfQ0hFQ0tFRCAqLywgbXNnKTtcbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdERldGFpbHNGb3JJbnRlcnBvbGF0aW9uKGxWaWV3LCByb290SW5kZXgsIGV4cHJlc3Npb25JbmRleCwgbWV0YSwgY2hhbmdlZFZhbHVlKSB7XG4gICAgY29uc3QgW3Byb3BOYW1lLCBwcmVmaXgsIC4uLmNodW5rc10gPSBtZXRhLnNwbGl0KElOVEVSUE9MQVRJT05fREVMSU1JVEVSKTtcbiAgICBsZXQgb2xkVmFsdWUgPSBwcmVmaXgsIG5ld1ZhbHVlID0gcHJlZml4O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNsb3RJZHggPSByb290SW5kZXggKyBpO1xuICAgICAgICBvbGRWYWx1ZSArPSBgJHtsVmlld1tzbG90SWR4XX0ke2NodW5rc1tpXX1gO1xuICAgICAgICBuZXdWYWx1ZSArPSBgJHtzbG90SWR4ID09PSBleHByZXNzaW9uSW5kZXggPyBjaGFuZ2VkVmFsdWUgOiBsVmlld1tzbG90SWR4XX0ke2NodW5rc1tpXX1gO1xuICAgIH1cbiAgICByZXR1cm4geyBwcm9wTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlIH07XG59XG4vKipcbiAqIENvbnN0cnVjdHMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgZGV0YWlscyBmb3IgdGhlIEV4cHJlc3Npb25DaGFuZ2VkQWZ0ZXJJdEhhc0JlZW5DaGVja2VkRXJyb3I6XG4gKiAtIHByb3BlcnR5IG5hbWUgKGZvciBwcm9wZXJ0eSBiaW5kaW5ncyBvciBpbnRlcnBvbGF0aW9ucylcbiAqIC0gb2xkIGFuZCBuZXcgdmFsdWVzLCBlbnJpY2hlZCB1c2luZyBpbmZvcm1hdGlvbiBmcm9tIG1ldGFkYXRhXG4gKlxuICogTW9yZSBpbmZvcm1hdGlvbiBvbiB0aGUgbWV0YWRhdGEgc3RvcmFnZSBmb3JtYXQgY2FuIGJlIGZvdW5kIGluIGBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhYFxuICogZnVuY3Rpb24gZGVzY3JpcHRpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEV4cHJlc3Npb25DaGFuZ2VkRXJyb3JEZXRhaWxzKGxWaWV3LCBiaW5kaW5nSW5kZXgsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgIGNvbnN0IHREYXRhID0gbFZpZXdbVFZJRVddLmRhdGE7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0RGF0YVtiaW5kaW5nSW5kZXhdO1xuICAgIGlmICh0eXBlb2YgbWV0YWRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIG1ldGFkYXRhIGZvciBwcm9wZXJ0eSBpbnRlcnBvbGF0aW9uXG4gICAgICAgIGlmIChtZXRhZGF0YS5pbmRleE9mKElOVEVSUE9MQVRJT05fREVMSU1JVEVSKSA+IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc3RydWN0RGV0YWlsc0ZvckludGVycG9sYXRpb24obFZpZXcsIGJpbmRpbmdJbmRleCwgYmluZGluZ0luZGV4LCBtZXRhZGF0YSwgbmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG1ldGFkYXRhIGZvciBwcm9wZXJ0eSBiaW5kaW5nXG4gICAgICAgIHJldHVybiB7IHByb3BOYW1lOiBtZXRhZGF0YSwgb2xkVmFsdWUsIG5ld1ZhbHVlIH07XG4gICAgfVxuICAgIC8vIG1ldGFkYXRhIGlzIG5vdCBhdmFpbGFibGUgZm9yIHRoaXMgZXhwcmVzc2lvbiwgY2hlY2sgaWYgdGhpcyBleHByZXNzaW9uIGlzIGEgcGFydCBvZiB0aGVcbiAgICAvLyBwcm9wZXJ0eSBpbnRlcnBvbGF0aW9uIGJ5IGdvaW5nIGZyb20gdGhlIGN1cnJlbnQgYmluZGluZyBpbmRleCBsZWZ0IGFuZCBsb29rIGZvciBhIHN0cmluZyB0aGF0XG4gICAgLy8gY29udGFpbnMgSU5URVJQT0xBVElPTl9ERUxJTUlURVIsIHRoZSBsYXlvdXQgaW4gdFZpZXcuZGF0YSBmb3IgdGhpcyBjYXNlIHdpbGwgbG9vayBsaWtlIHRoaXM6XG4gICAgLy8gWy4uLiwgJ2lk77+9UHJlZml4IO+/vSBhbmQg77+9IHN1ZmZpeCcsIG51bGwsIG51bGwsIG51bGwsIC4uLl1cbiAgICBpZiAobWV0YWRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgbGV0IGlkeCA9IGJpbmRpbmdJbmRleCAtIDE7XG4gICAgICAgIHdoaWxlICh0eXBlb2YgdERhdGFbaWR4XSAhPT0gJ3N0cmluZycgJiYgdERhdGFbaWR4ICsgMV0gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlkeC0tO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0RGF0YVtpZHhdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zdCBtYXRjaGVzID0gbWV0YS5tYXRjaChuZXcgUmVnRXhwKElOVEVSUE9MQVRJT05fREVMSU1JVEVSLCAnZycpKTtcbiAgICAgICAgICAgIC8vIGZpcnN0IGludGVycG9sYXRpb24gZGVsaW1pdGVyIHNlcGFyYXRlcyBwcm9wZXJ0eSBuYW1lIGZyb20gaW50ZXJwb2xhdGlvbiBwYXJ0cyAoaW4gY2FzZSBvZlxuICAgICAgICAgICAgLy8gcHJvcGVydHkgaW50ZXJwb2xhdGlvbnMpLCBzbyB3ZSBzdWJ0cmFjdCBvbmUgZnJvbSB0b3RhbCBudW1iZXIgb2YgZm91bmQgZGVsaW1pdGVyc1xuICAgICAgICAgICAgaWYgKG1hdGNoZXMgJiYgKG1hdGNoZXMubGVuZ3RoIC0gMSkgPiBiaW5kaW5nSW5kZXggLSBpZHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RydWN0RGV0YWlsc0ZvckludGVycG9sYXRpb24obFZpZXcsIGlkeCwgYmluZGluZ0luZGV4LCBtZXRhLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgcHJvcE5hbWU6IHVuZGVmaW5lZCwgb2xkVmFsdWUsIG5ld1ZhbHVlIH07XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBGbGFncyBmb3IgcmVuZGVyZXItc3BlY2lmaWMgc3R5bGUgbW9kaWZpZXJzLlxuICogQHB1YmxpY0FwaVxuICovXG52YXIgUmVuZGVyZXJTdHlsZUZsYWdzMjtcbihmdW5jdGlvbiAoUmVuZGVyZXJTdHlsZUZsYWdzMikge1xuICAgIC8vIFRPRE8obWlza28pOiBUaGlzIG5lZWRzIHRvIGJlIHJlZmFjdG9yZWQgaW50byBhIHNlcGFyYXRlIGZpbGUgc28gdGhhdCBpdCBjYW4gYmUgaW1wb3J0ZWQgZnJvbVxuICAgIC8vIGBub2RlX21hbmlwdWxhdGlvbi50c2AgQ3VycmVudGx5IGRvaW5nIHRoZSBpbXBvcnQgY2F1c2UgcmVzb2x1dGlvbiBvcmRlciB0byBjaGFuZ2UgYW5kIGZhaWxzXG4gICAgLy8gdGhlIHRlc3RzLiBUaGUgd29yayBhcm91bmQgaXMgdG8gaGF2ZSBoYXJkIGNvZGVkIHZhbHVlIGluIGBub2RlX21hbmlwdWxhdGlvbi50c2AgZm9yIG5vdy5cbiAgICAvKipcbiAgICAgKiBNYXJrcyBhIHN0eWxlIGFzIGltcG9ydGFudC5cbiAgICAgKi9cbiAgICBSZW5kZXJlclN0eWxlRmxhZ3MyW1JlbmRlcmVyU3R5bGVGbGFnczJbXCJJbXBvcnRhbnRcIl0gPSAxXSA9IFwiSW1wb3J0YW50XCI7XG4gICAgLyoqXG4gICAgICogTWFya3MgYSBzdHlsZSBhcyB1c2luZyBkYXNoIGNhc2UgbmFtaW5nICh0aGlzLWlzLWRhc2gtY2FzZSkuXG4gICAgICovXG4gICAgUmVuZGVyZXJTdHlsZUZsYWdzMltSZW5kZXJlclN0eWxlRmxhZ3MyW1wiRGFzaENhc2VcIl0gPSAyXSA9IFwiRGFzaENhc2VcIjtcbn0pKFJlbmRlcmVyU3R5bGVGbGFnczIgfHwgKFJlbmRlcmVyU3R5bGVGbGFnczIgPSB7fSkpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmxldCBfaWN1Q29udGFpbmVySXRlcmF0ZTtcbi8qKlxuICogSXRlcmF0b3Igd2hpY2ggcHJvdmlkZXMgYWJpbGl0eSB0byB2aXNpdCBhbGwgb2YgdGhlIGBUSWN1Q29udGFpbmVyTm9kZWAgcm9vdCBgUk5vZGVgcy5cbiAqL1xuZnVuY3Rpb24gaWN1Q29udGFpbmVySXRlcmF0ZSh0SWN1Q29udGFpbmVyTm9kZSwgbFZpZXcpIHtcbiAgICByZXR1cm4gX2ljdUNvbnRhaW5lckl0ZXJhdGUodEljdUNvbnRhaW5lck5vZGUsIGxWaWV3KTtcbn1cbi8qKlxuICogRW5zdXJlcyB0aGF0IGBJY3VDb250YWluZXJWaXNpdG9yYCdzIGltcGxlbWVudGF0aW9uIGlzIHByZXNlbnQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkIHdoZW4gaTE4biBpbnN0cnVjdGlvbiBjb21lcyBhY3Jvc3MgYW4gSUNVLiBUaGUgcHVycG9zZSBpcyB0byBhbGxvdyB0aGVcbiAqIGJ1bmRsZXIgdG8gdHJlZSBzaGFrZSBJQ1UgbG9naWMgYW5kIG9ubHkgbG9hZCBpdCBpZiBJQ1UgaW5zdHJ1Y3Rpb24gaXMgZXhlY3V0ZWQuXG4gKi9cbmZ1bmN0aW9uIGVuc3VyZUljdUNvbnRhaW5lclZpc2l0b3JMb2FkZWQobG9hZGVyKSB7XG4gICAgaWYgKF9pY3VDb250YWluZXJJdGVyYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gRG8gbm90IGlubGluZSB0aGlzIGZ1bmN0aW9uLiBXZSB3YW50IHRvIGtlZXAgYGVuc3VyZUljdUNvbnRhaW5lclZpc2l0b3JMb2FkZWRgIGxpZ2h0LCBzbyBpdFxuICAgICAgICAvLyBjYW4gYmUgaW5saW5lZCBpbnRvIGNhbGwtc2l0ZS5cbiAgICAgICAgX2ljdUNvbnRhaW5lckl0ZXJhdGUgPSBsb2FkZXIoKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuY29uc3QgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQkMyA9IDE7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBHZXRzIHRoZSBwYXJlbnQgTFZpZXcgb2YgdGhlIHBhc3NlZCBMVmlldywgaWYgdGhlIFBBUkVOVCBpcyBhbiBMQ29udGFpbmVyLCB3aWxsIGdldCB0aGUgcGFyZW50IG9mXG4gKiB0aGF0IExDb250YWluZXIsIHdoaWNoIGlzIGFuIExWaWV3XG4gKiBAcGFyYW0gbFZpZXcgdGhlIGxWaWV3IHdob3NlIHBhcmVudCB0byBnZXRcbiAqL1xuZnVuY3Rpb24gZ2V0TFZpZXdQYXJlbnQobFZpZXcpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TFZpZXcobFZpZXcpO1xuICAgIGNvbnN0IHBhcmVudCA9IGxWaWV3W1BBUkVOVF07XG4gICAgcmV0dXJuIGlzTENvbnRhaW5lcihwYXJlbnQpID8gcGFyZW50W1BBUkVOVF0gOiBwYXJlbnQ7XG59XG4vKipcbiAqIFJldHJpZXZlIHRoZSByb290IHZpZXcgZnJvbSBhbnkgY29tcG9uZW50IG9yIGBMVmlld2AgYnkgd2Fsa2luZyB0aGUgcGFyZW50IGBMVmlld2AgdW50aWxcbiAqIHJlYWNoaW5nIHRoZSByb290IGBMVmlld2AuXG4gKlxuICogQHBhcmFtIGNvbXBvbmVudE9yTFZpZXcgYW55IGNvbXBvbmVudCBvciBgTFZpZXdgXG4gKi9cbmZ1bmN0aW9uIGdldFJvb3RWaWV3KGNvbXBvbmVudE9yTFZpZXcpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChjb21wb25lbnRPckxWaWV3LCAnY29tcG9uZW50Jyk7XG4gICAgbGV0IGxWaWV3ID0gaXNMVmlldyhjb21wb25lbnRPckxWaWV3KSA/IGNvbXBvbmVudE9yTFZpZXcgOiByZWFkUGF0Y2hlZExWaWV3KGNvbXBvbmVudE9yTFZpZXcpO1xuICAgIHdoaWxlIChsVmlldyAmJiAhKGxWaWV3W0ZMQUdTXSAmIDUxMiAvKiBJc1Jvb3QgKi8pKSB7XG4gICAgICAgIGxWaWV3ID0gZ2V0TFZpZXdQYXJlbnQobFZpZXcpO1xuICAgIH1cbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TFZpZXcobFZpZXcpO1xuICAgIHJldHVybiBsVmlldztcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYFJvb3RDb250ZXh0YCBpbnN0YW5jZSB0aGF0IGlzIGFzc29jaWF0ZWQgd2l0aFxuICogdGhlIGFwcGxpY2F0aW9uIHdoZXJlIHRoZSB0YXJnZXQgaXMgc2l0dWF0ZWQuIEl0IGRvZXMgdGhpcyBieSB3YWxraW5nIHRoZSBwYXJlbnQgdmlld3MgdW50aWwgaXRcbiAqIGdldHMgdG8gdGhlIHJvb3QgdmlldywgdGhlbiBnZXR0aW5nIHRoZSBjb250ZXh0IG9mZiBvZiB0aGF0LlxuICpcbiAqIEBwYXJhbSB2aWV3T3JDb21wb25lbnQgdGhlIGBMVmlld2Agb3IgY29tcG9uZW50IHRvIGdldCB0aGUgcm9vdCBjb250ZXh0IGZvci5cbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdENvbnRleHQodmlld09yQ29tcG9uZW50KSB7XG4gICAgY29uc3Qgcm9vdFZpZXcgPSBnZXRSb290Vmlldyh2aWV3T3JDb21wb25lbnQpO1xuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnREZWZpbmVkKHJvb3RWaWV3W0NPTlRFWFRdLCAnUm9vdFZpZXcgaGFzIG5vIGNvbnRleHQuIFBlcmhhcHMgaXQgaXMgZGlzY29ubmVjdGVkPycpO1xuICAgIHJldHVybiByb290Vmlld1tDT05URVhUXTtcbn1cbi8qKlxuICogR2V0cyB0aGUgZmlyc3QgYExDb250YWluZXJgIGluIHRoZSBMVmlldyBvciBgbnVsbGAgaWYgbm9uZSBleGlzdHMuXG4gKi9cbmZ1bmN0aW9uIGdldEZpcnN0TENvbnRhaW5lcihsVmlldykge1xuICAgIHJldHVybiBnZXROZWFyZXN0TENvbnRhaW5lcihsVmlld1tDSElMRF9IRUFEXSk7XG59XG4vKipcbiAqIEdldHMgdGhlIG5leHQgYExDb250YWluZXJgIHRoYXQgaXMgYSBzaWJsaW5nIG9mIHRoZSBnaXZlbiBjb250YWluZXIuXG4gKi9cbmZ1bmN0aW9uIGdldE5leHRMQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgIHJldHVybiBnZXROZWFyZXN0TENvbnRhaW5lcihjb250YWluZXJbTkVYVF0pO1xufVxuZnVuY3Rpb24gZ2V0TmVhcmVzdExDb250YWluZXIodmlld09yQ29udGFpbmVyKSB7XG4gICAgd2hpbGUgKHZpZXdPckNvbnRhaW5lciAhPT0gbnVsbCAmJiAhaXNMQ29udGFpbmVyKHZpZXdPckNvbnRhaW5lcikpIHtcbiAgICAgICAgdmlld09yQ29udGFpbmVyID0gdmlld09yQ29udGFpbmVyW05FWFRdO1xuICAgIH1cbiAgICByZXR1cm4gdmlld09yQ29udGFpbmVyO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmNvbnN0IHVudXNlZFZhbHVlVG9QbGFjYXRlQWpkJDIgPSB1bnVzZWRWYWx1ZUV4cG9ydFRvUGxhY2F0ZUFqZCQ4ICsgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQkNCArIHVudXNlZFZhbHVlRXhwb3J0VG9QbGFjYXRlQWpkJDMgKyB1bnVzZWRWYWx1ZUV4cG9ydFRvUGxhY2F0ZUFqZCQ2ICsgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQkNztcbi8qKlxuICogTk9URTogZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMsIHRoZSBwb3NzaWJsZSBhY3Rpb25zIGFyZSBpbmxpbmVkIHdpdGhpbiB0aGUgZnVuY3Rpb24gaW5zdGVhZCBvZlxuICogYmVpbmcgcGFzc2VkIGFzIGFuIGFyZ3VtZW50LlxuICovXG5mdW5jdGlvbiBhcHBseVRvRWxlbWVudE9yQ29udGFpbmVyKGFjdGlvbiwgcmVuZGVyZXIsIHBhcmVudCwgbE5vZGVUb0hhbmRsZSwgYmVmb3JlTm9kZSkge1xuICAgIC8vIElmIHRoaXMgc2xvdCB3YXMgYWxsb2NhdGVkIGZvciBhIHRleHQgbm9kZSBkeW5hbWljYWxseSBjcmVhdGVkIGJ5IGkxOG4sIHRoZSB0ZXh0IG5vZGUgaXRzZWxmXG4gICAgLy8gd29uJ3QgYmUgY3JlYXRlZCB1bnRpbCBpMThuQXBwbHkoKSBpbiB0aGUgdXBkYXRlIGJsb2NrLCBzbyB0aGlzIG5vZGUgc2hvdWxkIGJlIHNraXBwZWQuXG4gICAgLy8gRm9yIG1vcmUgaW5mbywgc2VlIFwiSUNVIGV4cHJlc3Npb25zIHNob3VsZCB3b3JrIGluc2lkZSBhbiBuZ1RlbXBsYXRlT3V0bGV0IGluc2lkZSBhbiBuZ0ZvclwiXG4gICAgLy8gaW4gYGkxOG5fc3BlYy50c2AuXG4gICAgaWYgKGxOb2RlVG9IYW5kbGUgIT0gbnVsbCkge1xuICAgICAgICBsZXQgbENvbnRhaW5lcjtcbiAgICAgICAgbGV0IGlzQ29tcG9uZW50ID0gZmFsc2U7XG4gICAgICAgIC8vIFdlIGFyZSBleHBlY3RpbmcgYW4gUk5vZGUsIGJ1dCBpbiB0aGUgY2FzZSBvZiBhIGNvbXBvbmVudCBvciBMQ29udGFpbmVyIHRoZSBgUk5vZGVgIGlzXG4gICAgICAgIC8vIHdyYXBwZWQgaW4gYW4gYXJyYXkgd2hpY2ggbmVlZHMgdG8gYmUgdW53cmFwcGVkLiBXZSBuZWVkIHRvIGtub3cgaWYgaXQgaXMgYSBjb21wb25lbnQgYW5kIGlmXG4gICAgICAgIC8vIGl0IGhhcyBMQ29udGFpbmVyIHNvIHRoYXQgd2UgY2FuIHByb2Nlc3MgYWxsIG9mIHRob3NlIGNhc2VzIGFwcHJvcHJpYXRlbHkuXG4gICAgICAgIGlmIChpc0xDb250YWluZXIobE5vZGVUb0hhbmRsZSkpIHtcbiAgICAgICAgICAgIGxDb250YWluZXIgPSBsTm9kZVRvSGFuZGxlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTFZpZXcobE5vZGVUb0hhbmRsZSkpIHtcbiAgICAgICAgICAgIGlzQ29tcG9uZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGxOb2RlVG9IYW5kbGVbSE9TVF0sICdIT1NUIG11c3QgYmUgZGVmaW5lZCBmb3IgYSBjb21wb25lbnQgTFZpZXcnKTtcbiAgICAgICAgICAgIGxOb2RlVG9IYW5kbGUgPSBsTm9kZVRvSGFuZGxlW0hPU1RdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJOb2RlID0gdW53cmFwUk5vZGUobE5vZGVUb0hhbmRsZSk7XG4gICAgICAgIG5nRGV2TW9kZSAmJiAhaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpICYmIGFzc2VydERvbU5vZGUock5vZGUpO1xuICAgICAgICBpZiAoYWN0aW9uID09PSAwIC8qIENyZWF0ZSAqLyAmJiBwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChiZWZvcmVOb2RlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVBcHBlbmRDaGlsZChyZW5kZXJlciwgcGFyZW50LCByTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVJbnNlcnRCZWZvcmUocmVuZGVyZXIsIHBhcmVudCwgck5vZGUsIGJlZm9yZU5vZGUgfHwgbnVsbCwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWN0aW9uID09PSAxIC8qIEluc2VydCAqLyAmJiBwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG5hdGl2ZUluc2VydEJlZm9yZShyZW5kZXJlciwgcGFyZW50LCByTm9kZSwgYmVmb3JlTm9kZSB8fCBudWxsLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhY3Rpb24gPT09IDIgLyogRGV0YWNoICovKSB7XG4gICAgICAgICAgICBuYXRpdmVSZW1vdmVOb2RlKHJlbmRlcmVyLCByTm9kZSwgaXNDb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFjdGlvbiA9PT0gMyAvKiBEZXN0cm95ICovKSB7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyRGVzdHJveU5vZGUrKztcbiAgICAgICAgICAgIHJlbmRlcmVyLmRlc3Ryb3lOb2RlKHJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobENvbnRhaW5lciAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcHBseUNvbnRhaW5lcihyZW5kZXJlciwgYWN0aW9uLCBsQ29udGFpbmVyLCBwYXJlbnQsIGJlZm9yZU5vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUocmVuZGVyZXIsIHZhbHVlKSB7XG4gICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlckNyZWF0ZVRleHROb2RlKys7XG4gICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlclNldFRleHQrKztcbiAgICByZXR1cm4gaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpID8gcmVuZGVyZXIuY3JlYXRlVGV4dCh2YWx1ZSkgOlxuICAgICAgICByZW5kZXJlci5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB1cGRhdGVUZXh0Tm9kZShyZW5kZXJlciwgck5vZGUsIHZhbHVlKSB7XG4gICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlclNldFRleHQrKztcbiAgICBpc1Byb2NlZHVyYWxSZW5kZXJlcihyZW5kZXJlcikgPyByZW5kZXJlci5zZXRWYWx1ZShyTm9kZSwgdmFsdWUpIDogck5vZGUudGV4dENvbnRlbnQgPSB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnROb2RlKHJlbmRlcmVyLCB2YWx1ZSkge1xuICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUucmVuZGVyZXJDcmVhdGVDb21tZW50Kys7XG4gICAgLy8gaXNQcm9jZWR1cmFsUmVuZGVyZXIgY2hlY2sgaXMgbm90IG5lZWRlZCBiZWNhdXNlIGJvdGggYFJlbmRlcmVyMmAgYW5kIGBSZW5kZXJlcjNgIGhhdmUgdGhlIHNhbWVcbiAgICAvLyBtZXRob2QgbmFtZS5cbiAgICByZXR1cm4gcmVuZGVyZXIuY3JlYXRlQ29tbWVudChlc2NhcGVDb21tZW50VGV4dCh2YWx1ZSkpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmF0aXZlIGVsZW1lbnQgZnJvbSBhIHRhZyBuYW1lLCB1c2luZyBhIHJlbmRlcmVyLlxuICogQHBhcmFtIHJlbmRlcmVyIEEgcmVuZGVyZXIgdG8gdXNlXG4gKiBAcGFyYW0gbmFtZSB0aGUgdGFnIG5hbWVcbiAqIEBwYXJhbSBuYW1lc3BhY2UgT3B0aW9uYWwgbmFtZXNwYWNlIGZvciBlbGVtZW50LlxuICogQHJldHVybnMgdGhlIGVsZW1lbnQgY3JlYXRlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50Tm9kZShyZW5kZXJlciwgbmFtZSwgbmFtZXNwYWNlKSB7XG4gICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlckNyZWF0ZUVsZW1lbnQrKztcbiAgICBpZiAoaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpKSB7XG4gICAgICAgIHJldHVybiByZW5kZXJlci5jcmVhdGVFbGVtZW50KG5hbWUsIG5hbWVzcGFjZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBuYW1lc3BhY2VVcmkgPSBuYW1lc3BhY2UgIT09IG51bGwgPyBnZXROYW1lc3BhY2VVcmkobmFtZXNwYWNlKSA6IG51bGw7XG4gICAgICAgIHJldHVybiBuYW1lc3BhY2VVcmkgPT09IG51bGwgPyByZW5kZXJlci5jcmVhdGVFbGVtZW50KG5hbWUpIDpcbiAgICAgICAgICAgIHJlbmRlcmVyLmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVcmksIG5hbWUpO1xuICAgIH1cbn1cbi8qKlxuICogUmVtb3ZlcyBhbGwgRE9NIGVsZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIHZpZXcuXG4gKlxuICogQmVjYXVzZSBzb21lIHJvb3Qgbm9kZXMgb2YgdGhlIHZpZXcgbWF5IGJlIGNvbnRhaW5lcnMsIHdlIHNvbWV0aW1lcyBuZWVkXG4gKiB0byBwcm9wYWdhdGUgZGVlcGx5IGludG8gdGhlIG5lc3RlZCBjb250YWluZXJzIHRvIHJlbW92ZSBhbGwgZWxlbWVudHMgaW4gdGhlXG4gKiB2aWV3cyBiZW5lYXRoIGl0LlxuICpcbiAqIEBwYXJhbSB0VmlldyBUaGUgYFRWaWV3JyBvZiB0aGUgYExWaWV3YCBmcm9tIHdoaWNoIGVsZW1lbnRzIHNob3VsZCBiZSBhZGRlZCBvciByZW1vdmVkXG4gKiBAcGFyYW0gbFZpZXcgVGhlIHZpZXcgZnJvbSB3aGljaCBlbGVtZW50cyBzaG91bGQgYmUgYWRkZWQgb3IgcmVtb3ZlZFxuICovXG5mdW5jdGlvbiByZW1vdmVWaWV3RnJvbUNvbnRhaW5lcih0VmlldywgbFZpZXcpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IGxWaWV3W1JFTkRFUkVSXTtcbiAgICBhcHBseVZpZXcodFZpZXcsIGxWaWV3LCByZW5kZXJlciwgMiAvKiBEZXRhY2ggKi8sIG51bGwsIG51bGwpO1xuICAgIGxWaWV3W0hPU1RdID0gbnVsbDtcbiAgICBsVmlld1tUX0hPU1RdID0gbnVsbDtcbn1cbi8qKlxuICogQWRkcyBhbGwgRE9NIGVsZW1lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIHZpZXcuXG4gKlxuICogQmVjYXVzZSBzb21lIHJvb3Qgbm9kZXMgb2YgdGhlIHZpZXcgbWF5IGJlIGNvbnRhaW5lcnMsIHdlIHNvbWV0aW1lcyBuZWVkXG4gKiB0byBwcm9wYWdhdGUgZGVlcGx5IGludG8gdGhlIG5lc3RlZCBjb250YWluZXJzIHRvIGFkZCBhbGwgZWxlbWVudHMgaW4gdGhlXG4gKiB2aWV3cyBiZW5lYXRoIGl0LlxuICpcbiAqIEBwYXJhbSB0VmlldyBUaGUgYFRWaWV3JyBvZiB0aGUgYExWaWV3YCBmcm9tIHdoaWNoIGVsZW1lbnRzIHNob3VsZCBiZSBhZGRlZCBvciByZW1vdmVkXG4gKiBAcGFyYW0gcGFyZW50VE5vZGUgVGhlIGBUTm9kZWAgd2hlcmUgdGhlIGBMVmlld2Agc2hvdWxkIGJlIGF0dGFjaGVkIHRvLlxuICogQHBhcmFtIHJlbmRlcmVyIEN1cnJlbnQgcmVuZGVyZXIgdG8gdXNlIGZvciBET00gbWFuaXB1bGF0aW9ucy5cbiAqIEBwYXJhbSBsVmlldyBUaGUgdmlldyBmcm9tIHdoaWNoIGVsZW1lbnRzIHNob3VsZCBiZSBhZGRlZCBvciByZW1vdmVkXG4gKiBAcGFyYW0gcGFyZW50TmF0aXZlTm9kZSBUaGUgcGFyZW50IGBSRWxlbWVudGAgd2hlcmUgaXQgc2hvdWxkIGJlIGluc2VydGVkIGludG8uXG4gKiBAcGFyYW0gYmVmb3JlTm9kZSBUaGUgbm9kZSBiZWZvcmUgd2hpY2ggZWxlbWVudHMgc2hvdWxkIGJlIGFkZGVkLCBpZiBpbnNlcnQgbW9kZVxuICovXG5mdW5jdGlvbiBhZGRWaWV3VG9Db250YWluZXIodFZpZXcsIHBhcmVudFROb2RlLCByZW5kZXJlciwgbFZpZXcsIHBhcmVudE5hdGl2ZU5vZGUsIGJlZm9yZU5vZGUpIHtcbiAgICBsVmlld1tIT1NUXSA9IHBhcmVudE5hdGl2ZU5vZGU7XG4gICAgbFZpZXdbVF9IT1NUXSA9IHBhcmVudFROb2RlO1xuICAgIGFwcGx5Vmlldyh0VmlldywgbFZpZXcsIHJlbmRlcmVyLCAxIC8qIEluc2VydCAqLywgcGFyZW50TmF0aXZlTm9kZSwgYmVmb3JlTm9kZSk7XG59XG4vKipcbiAqIERldGFjaCBhIGBMVmlld2AgZnJvbSB0aGUgRE9NIGJ5IGRldGFjaGluZyBpdHMgbm9kZXMuXG4gKlxuICogQHBhcmFtIHRWaWV3IFRoZSBgVFZpZXcnIG9mIHRoZSBgTFZpZXdgIHRvIGJlIGRldGFjaGVkXG4gKiBAcGFyYW0gbFZpZXcgdGhlIGBMVmlld2AgdG8gYmUgZGV0YWNoZWQuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckRldGFjaFZpZXcodFZpZXcsIGxWaWV3KSB7XG4gICAgYXBwbHlWaWV3KHRWaWV3LCBsVmlldywgbFZpZXdbUkVOREVSRVJdLCAyIC8qIERldGFjaCAqLywgbnVsbCwgbnVsbCk7XG59XG4vKipcbiAqIFRyYXZlcnNlcyBkb3duIGFuZCB1cCB0aGUgdHJlZSBvZiB2aWV3cyBhbmQgY29udGFpbmVycyB0byByZW1vdmUgbGlzdGVuZXJzIGFuZFxuICogY2FsbCBvbkRlc3Ryb3kgY2FsbGJhY2tzLlxuICpcbiAqIE5vdGVzOlxuICogIC0gQmVjYXVzZSBpdCdzIHVzZWQgZm9yIG9uRGVzdHJveSBjYWxscywgaXQgbmVlZHMgdG8gYmUgYm90dG9tLXVwLlxuICogIC0gTXVzdCBwcm9jZXNzIGNvbnRhaW5lcnMgaW5zdGVhZCBvZiB0aGVpciB2aWV3cyB0byBhdm9pZCBzcGxpY2luZ1xuICogIHdoZW4gdmlld3MgYXJlIGRlc3Ryb3llZCBhbmQgcmUtYWRkZWQuXG4gKiAgLSBVc2luZyBhIHdoaWxlIGxvb3AgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIHJlY3Vyc2lvblxuICogIC0gRGVzdHJveSBvbmx5IGNhbGxlZCBvbiBtb3ZlbWVudCB0byBzaWJsaW5nIG9yIG1vdmVtZW50IHRvIHBhcmVudCAobGF0ZXJhbGx5IG9yIHVwKVxuICpcbiAqICBAcGFyYW0gcm9vdFZpZXcgVGhlIHZpZXcgdG8gZGVzdHJveVxuICovXG5mdW5jdGlvbiBkZXN0cm95Vmlld1RyZWUocm9vdFZpZXcpIHtcbiAgICAvLyBJZiB0aGUgdmlldyBoYXMgbm8gY2hpbGRyZW4sIHdlIGNhbiBjbGVhbiBpdCB1cCBhbmQgcmV0dXJuIGVhcmx5LlxuICAgIGxldCBsVmlld09yTENvbnRhaW5lciA9IHJvb3RWaWV3W0NISUxEX0hFQURdO1xuICAgIGlmICghbFZpZXdPckxDb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFuVXBWaWV3KHJvb3RWaWV3W1RWSUVXXSwgcm9vdFZpZXcpO1xuICAgIH1cbiAgICB3aGlsZSAobFZpZXdPckxDb250YWluZXIpIHtcbiAgICAgICAgbGV0IG5leHQgPSBudWxsO1xuICAgICAgICBpZiAoaXNMVmlldyhsVmlld09yTENvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIC8vIElmIExWaWV3LCB0cmF2ZXJzZSBkb3duIHRvIGNoaWxkLlxuICAgICAgICAgICAgbmV4dCA9IGxWaWV3T3JMQ29udGFpbmVyW0NISUxEX0hFQURdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydExDb250YWluZXIobFZpZXdPckxDb250YWluZXIpO1xuICAgICAgICAgICAgLy8gSWYgY29udGFpbmVyLCB0cmF2ZXJzZSBkb3duIHRvIGl0cyBmaXJzdCBMVmlldy5cbiAgICAgICAgICAgIGNvbnN0IGZpcnN0VmlldyA9IGxWaWV3T3JMQ29udGFpbmVyW0NPTlRBSU5FUl9IRUFERVJfT0ZGU0VUXTtcbiAgICAgICAgICAgIGlmIChmaXJzdFZpZXcpXG4gICAgICAgICAgICAgICAgbmV4dCA9IGZpcnN0VmlldztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgY2xlYW4gdXAgdmlldyB3aGVuIG1vdmluZyB0byB0aGUgc2lkZSBvciB1cCwgYXMgZGVzdHJveSBob29rc1xuICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGNhbGxlZCBpbiBvcmRlciBmcm9tIHRoZSBib3R0b20gdXAuXG4gICAgICAgICAgICB3aGlsZSAobFZpZXdPckxDb250YWluZXIgJiYgIWxWaWV3T3JMQ29udGFpbmVyW05FWFRdICYmIGxWaWV3T3JMQ29udGFpbmVyICE9PSByb290Vmlldykge1xuICAgICAgICAgICAgICAgIGlmIChpc0xWaWV3KGxWaWV3T3JMQ29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhblVwVmlldyhsVmlld09yTENvbnRhaW5lcltUVklFV10sIGxWaWV3T3JMQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbFZpZXdPckxDb250YWluZXIgPSBsVmlld09yTENvbnRhaW5lcltQQVJFTlRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxWaWV3T3JMQ29udGFpbmVyID09PSBudWxsKVxuICAgICAgICAgICAgICAgIGxWaWV3T3JMQ29udGFpbmVyID0gcm9vdFZpZXc7XG4gICAgICAgICAgICBpZiAoaXNMVmlldyhsVmlld09yTENvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICBjbGVhblVwVmlldyhsVmlld09yTENvbnRhaW5lcltUVklFV10sIGxWaWV3T3JMQ29udGFpbmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSBsVmlld09yTENvbnRhaW5lciAmJiBsVmlld09yTENvbnRhaW5lcltORVhUXTtcbiAgICAgICAgfVxuICAgICAgICBsVmlld09yTENvbnRhaW5lciA9IG5leHQ7XG4gICAgfVxufVxuLyoqXG4gKiBJbnNlcnRzIGEgdmlldyBpbnRvIGEgY29udGFpbmVyLlxuICpcbiAqIFRoaXMgYWRkcyB0aGUgdmlldyB0byB0aGUgY29udGFpbmVyJ3MgYXJyYXkgb2YgYWN0aXZlIHZpZXdzIGluIHRoZSBjb3JyZWN0XG4gKiBwb3NpdGlvbi4gSXQgYWxzbyBhZGRzIHRoZSB2aWV3J3MgZWxlbWVudHMgdG8gdGhlIERPTSBpZiB0aGUgY29udGFpbmVyIGlzbid0IGFcbiAqIHJvb3Qgbm9kZSBvZiBhbm90aGVyIHZpZXcgKGluIHRoYXQgY2FzZSwgdGhlIHZpZXcncyBlbGVtZW50cyB3aWxsIGJlIGFkZGVkIHdoZW5cbiAqIHRoZSBjb250YWluZXIncyBwYXJlbnQgdmlldyBpcyBhZGRlZCBsYXRlcikuXG4gKlxuICogQHBhcmFtIHRWaWV3IFRoZSBgVFZpZXcnIG9mIHRoZSBgTFZpZXdgIHRvIGluc2VydFxuICogQHBhcmFtIGxWaWV3IFRoZSB2aWV3IHRvIGluc2VydFxuICogQHBhcmFtIGxDb250YWluZXIgVGhlIGNvbnRhaW5lciBpbnRvIHdoaWNoIHRoZSB2aWV3IHNob3VsZCBiZSBpbnNlcnRlZFxuICogQHBhcmFtIGluZGV4IFdoaWNoIGluZGV4IGluIHRoZSBjb250YWluZXIgdG8gaW5zZXJ0IHRoZSBjaGlsZCB2aWV3IGludG9cbiAqL1xuZnVuY3Rpb24gaW5zZXJ0Vmlldyh0VmlldywgbFZpZXcsIGxDb250YWluZXIsIGluZGV4KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydExWaWV3KGxWaWV3KTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TENvbnRhaW5lcihsQ29udGFpbmVyKTtcbiAgICBjb25zdCBpbmRleEluQ29udGFpbmVyID0gQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQgKyBpbmRleDtcbiAgICBjb25zdCBjb250YWluZXJMZW5ndGggPSBsQ29udGFpbmVyLmxlbmd0aDtcbiAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBuZXcgdmlldywgd2UgbmVlZCB0byBhZGQgaXQgdG8gdGhlIGNoaWxkcmVuLlxuICAgICAgICBsQ29udGFpbmVyW2luZGV4SW5Db250YWluZXIgLSAxXVtORVhUXSA9IGxWaWV3O1xuICAgIH1cbiAgICBpZiAoaW5kZXggPCBjb250YWluZXJMZW5ndGggLSBDT05UQUlORVJfSEVBREVSX09GRlNFVCkge1xuICAgICAgICBsVmlld1tORVhUXSA9IGxDb250YWluZXJbaW5kZXhJbkNvbnRhaW5lcl07XG4gICAgICAgIGFkZFRvQXJyYXkobENvbnRhaW5lciwgQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQgKyBpbmRleCwgbFZpZXcpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbENvbnRhaW5lci5wdXNoKGxWaWV3KTtcbiAgICAgICAgbFZpZXdbTkVYVF0gPSBudWxsO1xuICAgIH1cbiAgICBsVmlld1tQQVJFTlRdID0gbENvbnRhaW5lcjtcbiAgICAvLyB0cmFjayB2aWV3cyB3aGVyZSBkZWNsYXJhdGlvbiBhbmQgaW5zZXJ0aW9uIHBvaW50cyBhcmUgZGlmZmVyZW50XG4gICAgY29uc3QgZGVjbGFyYXRpb25MQ29udGFpbmVyID0gbFZpZXdbREVDTEFSQVRJT05fTENPTlRBSU5FUl07XG4gICAgaWYgKGRlY2xhcmF0aW9uTENvbnRhaW5lciAhPT0gbnVsbCAmJiBsQ29udGFpbmVyICE9PSBkZWNsYXJhdGlvbkxDb250YWluZXIpIHtcbiAgICAgICAgdHJhY2tNb3ZlZFZpZXcoZGVjbGFyYXRpb25MQ29udGFpbmVyLCBsVmlldyk7XG4gICAgfVxuICAgIC8vIG5vdGlmeSBxdWVyeSB0aGF0IGEgbmV3IHZpZXcgaGFzIGJlZW4gYWRkZWRcbiAgICBjb25zdCBsUXVlcmllcyA9IGxWaWV3W1FVRVJJRVNdO1xuICAgIGlmIChsUXVlcmllcyAhPT0gbnVsbCkge1xuICAgICAgICBsUXVlcmllcy5pbnNlcnRWaWV3KHRWaWV3KTtcbiAgICB9XG4gICAgLy8gU2V0cyB0aGUgYXR0YWNoZWQgZmxhZ1xuICAgIGxWaWV3W0ZMQUdTXSB8PSAxMjggLyogQXR0YWNoZWQgKi87XG59XG4vKipcbiAqIFRyYWNrIHZpZXdzIGNyZWF0ZWQgZnJvbSB0aGUgZGVjbGFyYXRpb24gY29udGFpbmVyIChUZW1wbGF0ZVJlZikgYW5kIGluc2VydGVkIGludG8gYVxuICogZGlmZmVyZW50IExDb250YWluZXIuXG4gKi9cbmZ1bmN0aW9uIHRyYWNrTW92ZWRWaWV3KGRlY2xhcmF0aW9uQ29udGFpbmVyLCBsVmlldykge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGxWaWV3LCAnTFZpZXcgcmVxdWlyZWQnKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TENvbnRhaW5lcihkZWNsYXJhdGlvbkNvbnRhaW5lcik7XG4gICAgY29uc3QgbW92ZWRWaWV3cyA9IGRlY2xhcmF0aW9uQ29udGFpbmVyW01PVkVEX1ZJRVdTXTtcbiAgICBjb25zdCBpbnNlcnRlZExDb250YWluZXIgPSBsVmlld1tQQVJFTlRdO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRMQ29udGFpbmVyKGluc2VydGVkTENvbnRhaW5lcik7XG4gICAgY29uc3QgaW5zZXJ0ZWRDb21wb25lbnRMVmlldyA9IGluc2VydGVkTENvbnRhaW5lcltQQVJFTlRdW0RFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXXTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChpbnNlcnRlZENvbXBvbmVudExWaWV3LCAnTWlzc2luZyBpbnNlcnRlZENvbXBvbmVudExWaWV3Jyk7XG4gICAgY29uc3QgZGVjbGFyZWRDb21wb25lbnRMVmlldyA9IGxWaWV3W0RFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXXTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChkZWNsYXJlZENvbXBvbmVudExWaWV3LCAnTWlzc2luZyBkZWNsYXJlZENvbXBvbmVudExWaWV3Jyk7XG4gICAgaWYgKGRlY2xhcmVkQ29tcG9uZW50TFZpZXcgIT09IGluc2VydGVkQ29tcG9uZW50TFZpZXcpIHtcbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB0aGUgZGVjbGFyYXRpb24tY29tcG9uZW50IGlzIG5vdCBzYW1lIGFzIGluc2VydGlvbi1jb21wb25lbnQ7IHRoaXMgbWVhbnMgdGhhdFxuICAgICAgICAvLyB0aGlzIGlzIGEgdHJhbnNwbGFudGVkIHZpZXcuIE1hcmsgdGhlIGRlY2xhcmVkIGxWaWV3IGFzIGhhdmluZyB0cmFuc3BsYW50ZWQgdmlld3Mgc28gdGhhdFxuICAgICAgICAvLyB0aG9zZSB2aWV3cyBjYW4gcGFydGljaXBhdGUgaW4gQ0QuXG4gICAgICAgIGRlY2xhcmF0aW9uQ29udGFpbmVyW0hBU19UUkFOU1BMQU5URURfVklFV1NdID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG1vdmVkVmlld3MgPT09IG51bGwpIHtcbiAgICAgICAgZGVjbGFyYXRpb25Db250YWluZXJbTU9WRURfVklFV1NdID0gW2xWaWV3XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG1vdmVkVmlld3MucHVzaChsVmlldyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoTW92ZWRWaWV3KGRlY2xhcmF0aW9uQ29udGFpbmVyLCBsVmlldykge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRMQ29udGFpbmVyKGRlY2xhcmF0aW9uQ29udGFpbmVyKTtcbiAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgYXNzZXJ0RGVmaW5lZChkZWNsYXJhdGlvbkNvbnRhaW5lcltNT1ZFRF9WSUVXU10sICdBIHByb2plY3RlZCB2aWV3IHNob3VsZCBiZWxvbmcgdG8gYSBub24tZW1wdHkgcHJvamVjdGVkIHZpZXdzIGNvbGxlY3Rpb24nKTtcbiAgICBjb25zdCBtb3ZlZFZpZXdzID0gZGVjbGFyYXRpb25Db250YWluZXJbTU9WRURfVklFV1NdO1xuICAgIGNvbnN0IGRlY2xhcmF0aW9uVmlld0luZGV4ID0gbW92ZWRWaWV3cy5pbmRleE9mKGxWaWV3KTtcbiAgICBjb25zdCBpbnNlcnRpb25MQ29udGFpbmVyID0gbFZpZXdbUEFSRU5UXTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TENvbnRhaW5lcihpbnNlcnRpb25MQ29udGFpbmVyKTtcbiAgICAvLyBJZiB0aGUgdmlldyB3YXMgbWFya2VkIGZvciByZWZyZXNoIGJ1dCB0aGVuIGRldGFjaGVkIGJlZm9yZSBpdCB3YXMgY2hlY2tlZCAod2hlcmUgdGhlIGZsYWdcbiAgICAvLyB3b3VsZCBiZSBjbGVhcmVkIGFuZCB0aGUgY291bnRlciBkZWNyZW1lbnRlZCksIHdlIG5lZWQgdG8gZGVjcmVtZW50IHRoZSB2aWV3IGNvdW50ZXIgaGVyZVxuICAgIC8vIGluc3RlYWQuXG4gICAgaWYgKGxWaWV3W0ZMQUdTXSAmIDEwMjQgLyogUmVmcmVzaFRyYW5zcGxhbnRlZFZpZXcgKi8pIHtcbiAgICAgICAgbFZpZXdbRkxBR1NdICY9IH4xMDI0IC8qIFJlZnJlc2hUcmFuc3BsYW50ZWRWaWV3ICovO1xuICAgICAgICB1cGRhdGVUcmFuc3BsYW50ZWRWaWV3Q291bnQoaW5zZXJ0aW9uTENvbnRhaW5lciwgLTEpO1xuICAgIH1cbiAgICBtb3ZlZFZpZXdzLnNwbGljZShkZWNsYXJhdGlvblZpZXdJbmRleCwgMSk7XG59XG4vKipcbiAqIERldGFjaGVzIGEgdmlldyBmcm9tIGEgY29udGFpbmVyLlxuICpcbiAqIFRoaXMgbWV0aG9kIHJlbW92ZXMgdGhlIHZpZXcgZnJvbSB0aGUgY29udGFpbmVyJ3MgYXJyYXkgb2YgYWN0aXZlIHZpZXdzLiBJdCBhbHNvXG4gKiByZW1vdmVzIHRoZSB2aWV3J3MgZWxlbWVudHMgZnJvbSB0aGUgRE9NLlxuICpcbiAqIEBwYXJhbSBsQ29udGFpbmVyIFRoZSBjb250YWluZXIgZnJvbSB3aGljaCB0byBkZXRhY2ggYSB2aWV3XG4gKiBAcGFyYW0gcmVtb3ZlSW5kZXggVGhlIGluZGV4IG9mIHRoZSB2aWV3IHRvIGRldGFjaFxuICogQHJldHVybnMgRGV0YWNoZWQgTFZpZXcgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGRldGFjaFZpZXcobENvbnRhaW5lciwgcmVtb3ZlSW5kZXgpIHtcbiAgICBpZiAobENvbnRhaW5lci5sZW5ndGggPD0gQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBpbmRleEluQ29udGFpbmVyID0gQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQgKyByZW1vdmVJbmRleDtcbiAgICBjb25zdCB2aWV3VG9EZXRhY2ggPSBsQ29udGFpbmVyW2luZGV4SW5Db250YWluZXJdO1xuICAgIGlmICh2aWV3VG9EZXRhY2gpIHtcbiAgICAgICAgY29uc3QgZGVjbGFyYXRpb25MQ29udGFpbmVyID0gdmlld1RvRGV0YWNoW0RFQ0xBUkFUSU9OX0xDT05UQUlORVJdO1xuICAgICAgICBpZiAoZGVjbGFyYXRpb25MQ29udGFpbmVyICE9PSBudWxsICYmIGRlY2xhcmF0aW9uTENvbnRhaW5lciAhPT0gbENvbnRhaW5lcikge1xuICAgICAgICAgICAgZGV0YWNoTW92ZWRWaWV3KGRlY2xhcmF0aW9uTENvbnRhaW5lciwgdmlld1RvRGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVtb3ZlSW5kZXggPiAwKSB7XG4gICAgICAgICAgICBsQ29udGFpbmVyW2luZGV4SW5Db250YWluZXIgLSAxXVtORVhUXSA9IHZpZXdUb0RldGFjaFtORVhUXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1vdmVkTFZpZXcgPSByZW1vdmVGcm9tQXJyYXkobENvbnRhaW5lciwgQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQgKyByZW1vdmVJbmRleCk7XG4gICAgICAgIHJlbW92ZVZpZXdGcm9tQ29udGFpbmVyKHZpZXdUb0RldGFjaFtUVklFV10sIHZpZXdUb0RldGFjaCk7XG4gICAgICAgIC8vIG5vdGlmeSBxdWVyeSB0aGF0IGEgdmlldyBoYXMgYmVlbiByZW1vdmVkXG4gICAgICAgIGNvbnN0IGxRdWVyaWVzID0gcmVtb3ZlZExWaWV3W1FVRVJJRVNdO1xuICAgICAgICBpZiAobFF1ZXJpZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGxRdWVyaWVzLmRldGFjaFZpZXcocmVtb3ZlZExWaWV3W1RWSUVXXSk7XG4gICAgICAgIH1cbiAgICAgICAgdmlld1RvRGV0YWNoW1BBUkVOVF0gPSBudWxsO1xuICAgICAgICB2aWV3VG9EZXRhY2hbTkVYVF0gPSBudWxsO1xuICAgICAgICAvLyBVbnNldHMgdGhlIGF0dGFjaGVkIGZsYWdcbiAgICAgICAgdmlld1RvRGV0YWNoW0ZMQUdTXSAmPSB+MTI4IC8qIEF0dGFjaGVkICovO1xuICAgIH1cbiAgICByZXR1cm4gdmlld1RvRGV0YWNoO1xufVxuLyoqXG4gKiBBIHN0YW5kYWxvbmUgZnVuY3Rpb24gd2hpY2ggZGVzdHJveXMgYW4gTFZpZXcsXG4gKiBjb25kdWN0aW5nIGNsZWFuIHVwIChlLmcuIHJlbW92aW5nIGxpc3RlbmVycywgY2FsbGluZyBvbkRlc3Ryb3lzKS5cbiAqXG4gKiBAcGFyYW0gdFZpZXcgVGhlIGBUVmlldycgb2YgdGhlIGBMVmlld2AgdG8gYmUgZGVzdHJveWVkXG4gKiBAcGFyYW0gbFZpZXcgVGhlIHZpZXcgdG8gYmUgZGVzdHJveWVkLlxuICovXG5mdW5jdGlvbiBkZXN0cm95TFZpZXcodFZpZXcsIGxWaWV3KSB7XG4gICAgaWYgKCEobFZpZXdbRkxBR1NdICYgMjU2IC8qIERlc3Ryb3llZCAqLykpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBsVmlld1tSRU5ERVJFUl07XG4gICAgICAgIGlmIChpc1Byb2NlZHVyYWxSZW5kZXJlcihyZW5kZXJlcikgJiYgcmVuZGVyZXIuZGVzdHJveU5vZGUpIHtcbiAgICAgICAgICAgIGFwcGx5Vmlldyh0VmlldywgbFZpZXcsIHJlbmRlcmVyLCAzIC8qIERlc3Ryb3kgKi8sIG51bGwsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGRlc3Ryb3lWaWV3VHJlZShsVmlldyk7XG4gICAgfVxufVxuLyoqXG4gKiBDYWxscyBvbkRlc3Ryb3lzIGhvb2tzIGZvciBhbGwgZGlyZWN0aXZlcyBhbmQgcGlwZXMgaW4gYSBnaXZlbiB2aWV3IGFuZCB0aGVuIHJlbW92ZXMgYWxsXG4gKiBsaXN0ZW5lcnMuIExpc3RlbmVycyBhcmUgcmVtb3ZlZCBhcyB0aGUgbGFzdCBzdGVwIHNvIGV2ZW50cyBkZWxpdmVyZWQgaW4gdGhlIG9uRGVzdHJveXMgaG9va3NcbiAqIGNhbiBiZSBwcm9wYWdhdGVkIHRvIEBPdXRwdXQgbGlzdGVuZXJzLlxuICpcbiAqIEBwYXJhbSB0VmlldyBgVFZpZXdgIGZvciB0aGUgYExWaWV3YCB0byBjbGVhbiB1cC5cbiAqIEBwYXJhbSBsVmlldyBUaGUgTFZpZXcgdG8gY2xlYW4gdXBcbiAqL1xuZnVuY3Rpb24gY2xlYW5VcFZpZXcodFZpZXcsIGxWaWV3KSB7XG4gICAgaWYgKCEobFZpZXdbRkxBR1NdICYgMjU2IC8qIERlc3Ryb3llZCAqLykpIHtcbiAgICAgICAgLy8gVXN1YWxseSB0aGUgQXR0YWNoZWQgZmxhZyBpcyByZW1vdmVkIHdoZW4gdGhlIHZpZXcgaXMgZGV0YWNoZWQgZnJvbSBpdHMgcGFyZW50LCBob3dldmVyXG4gICAgICAgIC8vIGlmIGl0J3MgYSByb290IHZpZXcsIHRoZSBmbGFnIHdvbid0IGJlIHVuc2V0IGhlbmNlIHdoeSB3ZSdyZSBhbHNvIHJlbW92aW5nIG9uIGRlc3Ryb3kuXG4gICAgICAgIGxWaWV3W0ZMQUdTXSAmPSB+MTI4IC8qIEF0dGFjaGVkICovO1xuICAgICAgICAvLyBNYXJrIHRoZSBMVmlldyBhcyBkZXN0cm95ZWQgKmJlZm9yZSogZXhlY3V0aW5nIHRoZSBvbkRlc3Ryb3kgaG9va3MuIEFuIG9uRGVzdHJveSBob29rXG4gICAgICAgIC8vIHJ1bnMgYXJiaXRyYXJ5IHVzZXIgY29kZSwgd2hpY2ggY291bGQgaW5jbHVkZSBpdHMgb3duIGB2aWV3UmVmLmRlc3Ryb3koKWAgKG9yIHNpbWlsYXIpLiBJZlxuICAgICAgICAvLyBXZSBkb24ndCBmbGFnIHRoZSB2aWV3IGFzIGRlc3Ryb3llZCBiZWZvcmUgdGhlIGhvb2tzLCB0aGlzIGNvdWxkIGxlYWQgdG8gYW4gaW5maW5pdGUgbG9vcC5cbiAgICAgICAgLy8gVGhpcyBhbHNvIGFsaWducyB3aXRoIHRoZSBWaWV3RW5naW5lIGJlaGF2aW9yLiBJdCBhbHNvIG1lYW5zIHRoYXQgdGhlIG9uRGVzdHJveSBob29rIGlzXG4gICAgICAgIC8vIHJlYWxseSBtb3JlIG9mIGFuIFwiYWZ0ZXJEZXN0cm95XCIgaG9vayBpZiB5b3UgdGhpbmsgYWJvdXQgaXQuXG4gICAgICAgIGxWaWV3W0ZMQUdTXSB8PSAyNTYgLyogRGVzdHJveWVkICovO1xuICAgICAgICBleGVjdXRlT25EZXN0cm95cyh0VmlldywgbFZpZXcpO1xuICAgICAgICBwcm9jZXNzQ2xlYW51cHModFZpZXcsIGxWaWV3KTtcbiAgICAgICAgLy8gRm9yIGNvbXBvbmVudCB2aWV3cyBvbmx5LCB0aGUgbG9jYWwgcmVuZGVyZXIgaXMgZGVzdHJveWVkIGF0IGNsZWFuIHVwIHRpbWUuXG4gICAgICAgIGlmIChsVmlld1tUVklFV10udHlwZSA9PT0gMSAvKiBDb21wb25lbnQgKi8gJiYgaXNQcm9jZWR1cmFsUmVuZGVyZXIobFZpZXdbUkVOREVSRVJdKSkge1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlckRlc3Ryb3krKztcbiAgICAgICAgICAgIGxWaWV3W1JFTkRFUkVSXS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVjbGFyYXRpb25Db250YWluZXIgPSBsVmlld1tERUNMQVJBVElPTl9MQ09OVEFJTkVSXTtcbiAgICAgICAgLy8gd2UgYXJlIGRlYWxpbmcgd2l0aCBhbiBlbWJlZGRlZCB2aWV3IHRoYXQgaXMgc3RpbGwgaW5zZXJ0ZWQgaW50byBhIGNvbnRhaW5lclxuICAgICAgICBpZiAoZGVjbGFyYXRpb25Db250YWluZXIgIT09IG51bGwgJiYgaXNMQ29udGFpbmVyKGxWaWV3W1BBUkVOVF0pKSB7XG4gICAgICAgICAgICAvLyBhbmQgdGhpcyBpcyBhIHByb2plY3RlZCB2aWV3XG4gICAgICAgICAgICBpZiAoZGVjbGFyYXRpb25Db250YWluZXIgIT09IGxWaWV3W1BBUkVOVF0pIHtcbiAgICAgICAgICAgICAgICBkZXRhY2hNb3ZlZFZpZXcoZGVjbGFyYXRpb25Db250YWluZXIsIGxWaWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZvciBlbWJlZGRlZCB2aWV3cyBzdGlsbCBhdHRhY2hlZCB0byBhIGNvbnRhaW5lcjogcmVtb3ZlIHF1ZXJ5IHJlc3VsdCBmcm9tIHRoaXMgdmlldy5cbiAgICAgICAgICAgIGNvbnN0IGxRdWVyaWVzID0gbFZpZXdbUVVFUklFU107XG4gICAgICAgICAgICBpZiAobFF1ZXJpZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBsUXVlcmllcy5kZXRhY2hWaWV3KHRWaWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKiBSZW1vdmVzIGxpc3RlbmVycyBhbmQgdW5zdWJzY3JpYmVzIGZyb20gb3V0cHV0IHN1YnNjcmlwdGlvbnMgKi9cbmZ1bmN0aW9uIHByb2Nlc3NDbGVhbnVwcyh0VmlldywgbFZpZXcpIHtcbiAgICBjb25zdCB0Q2xlYW51cCA9IHRWaWV3LmNsZWFudXA7XG4gICAgY29uc3QgbENsZWFudXAgPSBsVmlld1tDTEVBTlVQXTtcbiAgICAvLyBgTENsZWFudXBgIGNvbnRhaW5zIGJvdGggc2hhcmUgaW5mb3JtYXRpb24gd2l0aCBgVENsZWFudXBgIGFzIHdlbGwgYXMgaW5zdGFuY2Ugc3BlY2lmaWNcbiAgICAvLyBpbmZvcm1hdGlvbiBhcHBlbmRlZCBhdCB0aGUgZW5kLiBXZSBuZWVkIHRvIGtub3cgd2hlcmUgdGhlIGVuZCBvZiB0aGUgYFRDbGVhbnVwYCBpbmZvcm1hdGlvblxuICAgIC8vIGlzLCBhbmQgd2UgdHJhY2sgdGhpcyB3aXRoIGBsYXN0TENsZWFudXBJbmRleGAuXG4gICAgbGV0IGxhc3RMQ2xlYW51cEluZGV4ID0gLTE7XG4gICAgaWYgKHRDbGVhbnVwICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdENsZWFudXAubGVuZ3RoIC0gMTsgaSArPSAyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHRDbGVhbnVwW2ldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBuYXRpdmUgRE9NIGxpc3RlbmVyXG4gICAgICAgICAgICAgICAgY29uc3QgaWR4T3JUYXJnZXRHZXR0ZXIgPSB0Q2xlYW51cFtpICsgMV07XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdHlwZW9mIGlkeE9yVGFyZ2V0R2V0dGVyID09PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgICAgICAgICAgaWR4T3JUYXJnZXRHZXR0ZXIobFZpZXcpIDpcbiAgICAgICAgICAgICAgICAgICAgdW53cmFwUk5vZGUobFZpZXdbaWR4T3JUYXJnZXRHZXR0ZXJdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IGxDbGVhbnVwW2xhc3RMQ2xlYW51cEluZGV4ID0gdENsZWFudXBbaSArIDJdXTtcbiAgICAgICAgICAgICAgICBjb25zdCB1c2VDYXB0dXJlT3JTdWJJZHggPSB0Q2xlYW51cFtpICsgM107XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB1c2VDYXB0dXJlT3JTdWJJZHggPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBuYXRpdmUgRE9NIGxpc3RlbmVyIHJlZ2lzdGVyZWQgd2l0aCBSZW5kZXJlcjNcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodENsZWFudXBbaV0sIGxpc3RlbmVyLCB1c2VDYXB0dXJlT3JTdWJJZHgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzZUNhcHR1cmVPclN1YklkeCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB1bnJlZ2lzdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICBsQ2xlYW51cFtsYXN0TENsZWFudXBJbmRleCA9IHVzZUNhcHR1cmVPclN1YklkeF0oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN1YnNjcmlwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgbENsZWFudXBbbGFzdExDbGVhbnVwSW5kZXggPSAtdXNlQ2FwdHVyZU9yU3ViSWR4XS51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjbGVhbnVwIGZ1bmN0aW9uIHRoYXQgaXMgZ3JvdXBlZCB3aXRoIHRoZSBpbmRleCBvZiBpdHMgY29udGV4dFxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSBsQ2xlYW51cFtsYXN0TENsZWFudXBJbmRleCA9IHRDbGVhbnVwW2kgKyAxXV07XG4gICAgICAgICAgICAgICAgdENsZWFudXBbaV0uY2FsbChjb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobENsZWFudXAgIT09IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGxhc3RMQ2xlYW51cEluZGV4ICsgMTsgaSA8IGxDbGVhbnVwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZUNsZWFudXBGbiA9IGxDbGVhbnVwW2ldO1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydEZ1bmN0aW9uKGluc3RhbmNlQ2xlYW51cEZuLCAnRXhwZWN0aW5nIGluc3RhbmNlIGNsZWFudXAgZnVuY3Rpb24uJyk7XG4gICAgICAgICAgICBpbnN0YW5jZUNsZWFudXBGbigpO1xuICAgICAgICB9XG4gICAgICAgIGxWaWV3W0NMRUFOVVBdID0gbnVsbDtcbiAgICB9XG59XG4vKiogQ2FsbHMgb25EZXN0cm95IGhvb2tzIGZvciB0aGlzIHZpZXcgKi9cbmZ1bmN0aW9uIGV4ZWN1dGVPbkRlc3Ryb3lzKHRWaWV3LCBsVmlldykge1xuICAgIGxldCBkZXN0cm95SG9va3M7XG4gICAgaWYgKHRWaWV3ICE9IG51bGwgJiYgKGRlc3Ryb3lIb29rcyA9IHRWaWV3LmRlc3Ryb3lIb29rcykgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlc3Ryb3lIb29rcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGxWaWV3W2Rlc3Ryb3lIb29rc1tpXV07XG4gICAgICAgICAgICAvLyBPbmx5IGNhbGwgdGhlIGRlc3Ryb3kgaG9vayBpZiB0aGUgY29udGV4dCBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gICAgICAgICAgICBpZiAoIShjb250ZXh0IGluc3RhbmNlb2YgTm9kZUluamVjdG9yRmFjdG9yeSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b0NhbGwgPSBkZXN0cm95SG9va3NbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRvQ2FsbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0b0NhbGwubGVuZ3RoOyBqICs9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhbGxDb250ZXh0ID0gY29udGV4dFt0b0NhbGxbal1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaG9vayA9IHRvQ2FsbFtqICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlcig0IC8qIExpZmVjeWNsZUhvb2tTdGFydCAqLywgY2FsbENvbnRleHQsIGhvb2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob29rLmNhbGwoY2FsbENvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZXIoNSAvKiBMaWZlY3ljbGVIb29rRW5kICovLCBjYWxsQ29udGV4dCwgaG9vayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByb2ZpbGVyKDQgLyogTGlmZWN5Y2xlSG9va1N0YXJ0ICovLCBjb250ZXh0LCB0b0NhbGwpO1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9DYWxsLmNhbGwoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9maWxlcig1IC8qIExpZmVjeWNsZUhvb2tFbmQgKi8sIGNvbnRleHQsIHRvQ2FsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgYSBuYXRpdmUgZWxlbWVudCBpZiBhIG5vZGUgY2FuIGJlIGluc2VydGVkIGludG8gdGhlIGdpdmVuIHBhcmVudC5cbiAqXG4gKiBUaGVyZSBhcmUgdHdvIHJlYXNvbnMgd2h5IHdlIG1heSBub3QgYmUgYWJsZSB0byBpbnNlcnQgYSBlbGVtZW50IGltbWVkaWF0ZWx5LlxuICogLSBQcm9qZWN0aW9uOiBXaGVuIGNyZWF0aW5nIGEgY2hpbGQgY29udGVudCBlbGVtZW50IG9mIGEgY29tcG9uZW50LCB3ZSBoYXZlIHRvIHNraXAgdGhlXG4gKiAgIGluc2VydGlvbiBiZWNhdXNlIHRoZSBjb250ZW50IG9mIGEgY29tcG9uZW50IHdpbGwgYmUgcHJvamVjdGVkLlxuICogICBgPGNvbXBvbmVudD48Y29udGVudD5kZWxheWVkIGR1ZSB0byBwcm9qZWN0aW9uPC9jb250ZW50PjwvY29tcG9uZW50PmBcbiAqIC0gUGFyZW50IGNvbnRhaW5lciBpcyBkaXNjb25uZWN0ZWQ6IFRoaXMgY2FuIGhhcHBlbiB3aGVuIHdlIGFyZSBpbnNlcnRpbmcgYSB2aWV3IGludG9cbiAqICAgcGFyZW50IGNvbnRhaW5lciwgd2hpY2ggaXRzZWxmIGlzIGRpc2Nvbm5lY3RlZC4gRm9yIGV4YW1wbGUgdGhlIHBhcmVudCBjb250YWluZXIgaXMgcGFydFxuICogICBvZiBhIFZpZXcgd2hpY2ggaGFzIG5vdCBiZSBpbnNlcnRlZCBvciBpcyBtYWRlIGZvciBwcm9qZWN0aW9uIGJ1dCBoYXMgbm90IGJlZW4gaW5zZXJ0ZWRcbiAqICAgaW50byBkZXN0aW5hdGlvbi5cbiAqXG4gKiBAcGFyYW0gdFZpZXc6IEN1cnJlbnQgYFRWaWV3YC5cbiAqIEBwYXJhbSB0Tm9kZTogYFROb2RlYCBmb3Igd2hpY2ggd2Ugd2lzaCB0byByZXRyaWV2ZSByZW5kZXIgcGFyZW50LlxuICogQHBhcmFtIGxWaWV3OiBDdXJyZW50IGBMVmlld2AuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudFJFbGVtZW50KHRWaWV3LCB0Tm9kZSwgbFZpZXcpIHtcbiAgICByZXR1cm4gZ2V0Q2xvc2VzdFJFbGVtZW50KHRWaWV3LCB0Tm9kZS5wYXJlbnQsIGxWaWV3KTtcbn1cbi8qKlxuICogR2V0IGNsb3Nlc3QgYFJFbGVtZW50YCBvciBgbnVsbGAgaWYgaXQgY2FuJ3QgYmUgZm91bmQuXG4gKlxuICogSWYgYFROb2RlYCBpcyBgVE5vZGVUeXBlLkVsZW1lbnRgID0+IHJldHVybiBgUkVsZW1lbnRgIGF0IGBMVmlld1t0Tm9kZS5pbmRleF1gIGxvY2F0aW9uLlxuICogSWYgYFROb2RlYCBpcyBgVE5vZGVUeXBlLkVsZW1lbnRDb250YWluZXJ8SWN1Q29udGFpbmAgPT4gcmV0dXJuIHRoZSBwYXJlbnQgKHJlY3Vyc2l2ZWx5KS5cbiAqIElmIGBUTm9kZWAgaXMgYG51bGxgIHRoZW4gcmV0dXJuIGhvc3QgYFJFbGVtZW50YDpcbiAqICAgLSByZXR1cm4gYG51bGxgIGlmIHByb2plY3Rpb25cbiAqICAgLSByZXR1cm4gYG51bGxgIGlmIHBhcmVudCBjb250YWluZXIgaXMgZGlzY29ubmVjdGVkICh3ZSBoYXZlIG5vIHBhcmVudC4pXG4gKlxuICogQHBhcmFtIHRWaWV3OiBDdXJyZW50IGBUVmlld2AuXG4gKiBAcGFyYW0gdE5vZGU6IGBUTm9kZWAgZm9yIHdoaWNoIHdlIHdpc2ggdG8gcmV0cmlldmUgYFJFbGVtZW50YCAob3IgYG51bGxgIGlmIGhvc3QgZWxlbWVudCBpc1xuICogICAgIG5lZWRlZCkuXG4gKiBAcGFyYW0gbFZpZXc6IEN1cnJlbnQgYExWaWV3YC5cbiAqIEByZXR1cm5zIGBudWxsYCBpZiB0aGUgYFJFbGVtZW50YCBjYW4ndCBiZSBkZXRlcm1pbmVkIGF0IHRoaXMgdGltZSAobm8gcGFyZW50IC8gcHJvamVjdGlvbilcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xvc2VzdFJFbGVtZW50KHRWaWV3LCB0Tm9kZSwgbFZpZXcpIHtcbiAgICBsZXQgcGFyZW50VE5vZGUgPSB0Tm9kZTtcbiAgICAvLyBTa2lwIG92ZXIgZWxlbWVudCBhbmQgSUNVIGNvbnRhaW5lcnMgYXMgdGhvc2UgYXJlIHJlcHJlc2VudGVkIGJ5IGEgY29tbWVudCBub2RlIGFuZFxuICAgIC8vIGNhbid0IGJlIHVzZWQgYXMgYSByZW5kZXIgcGFyZW50LlxuICAgIHdoaWxlIChwYXJlbnRUTm9kZSAhPT0gbnVsbCAmJlxuICAgICAgICAocGFyZW50VE5vZGUudHlwZSAmICg4IC8qIEVsZW1lbnRDb250YWluZXIgKi8gfCAzMiAvKiBJY3UgKi8pKSkge1xuICAgICAgICB0Tm9kZSA9IHBhcmVudFROb2RlO1xuICAgICAgICBwYXJlbnRUTm9kZSA9IHROb2RlLnBhcmVudDtcbiAgICB9XG4gICAgLy8gSWYgdGhlIHBhcmVudCB0Tm9kZSBpcyBudWxsLCB0aGVuIHdlIGFyZSBpbnNlcnRpbmcgYWNyb3NzIHZpZXdzOiBlaXRoZXIgaW50byBhbiBlbWJlZGRlZCB2aWV3XG4gICAgLy8gb3IgYSBjb21wb25lbnQgdmlldy5cbiAgICBpZiAocGFyZW50VE5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gV2UgYXJlIGluc2VydGluZyBhIHJvb3QgZWxlbWVudCBvZiB0aGUgY29tcG9uZW50IHZpZXcgaW50byB0aGUgY29tcG9uZW50IGhvc3QgZWxlbWVudCBhbmRcbiAgICAgICAgLy8gaXQgc2hvdWxkIGFsd2F5cyBiZSBlYWdlci5cbiAgICAgICAgcmV0dXJuIGxWaWV3W0hPU1RdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlVHlwZShwYXJlbnRUTm9kZSwgMyAvKiBBbnlSTm9kZSAqLyB8IDQgLyogQ29udGFpbmVyICovKTtcbiAgICAgICAgaWYgKHBhcmVudFROb2RlLmZsYWdzICYgMiAvKiBpc0NvbXBvbmVudEhvc3QgKi8pIHtcbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRUTm9kZUZvckxWaWV3KHBhcmVudFROb2RlLCBsVmlldyk7XG4gICAgICAgICAgICBjb25zdCBlbmNhcHN1bGF0aW9uID0gdFZpZXcuZGF0YVtwYXJlbnRUTm9kZS5kaXJlY3RpdmVTdGFydF0uZW5jYXBzdWxhdGlvbjtcbiAgICAgICAgICAgIC8vIFdlJ3ZlIGdvdCBhIHBhcmVudCB3aGljaCBpcyBhbiBlbGVtZW50IGluIHRoZSBjdXJyZW50IHZpZXcuIFdlIGp1c3QgbmVlZCB0byB2ZXJpZnkgaWYgdGhlXG4gICAgICAgICAgICAvLyBwYXJlbnQgZWxlbWVudCBpcyBub3QgYSBjb21wb25lbnQuIENvbXBvbmVudCdzIGNvbnRlbnQgbm9kZXMgYXJlIG5vdCBpbnNlcnRlZCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgLy8gYmVjYXVzZSB0aGV5IHdpbGwgYmUgcHJvamVjdGVkLCBhbmQgc28gZG9pbmcgaW5zZXJ0IGF0IHRoaXMgcG9pbnQgd291bGQgYmUgd2FzdGVmdWwuXG4gICAgICAgICAgICAvLyBTaW5jZSB0aGUgcHJvamVjdGlvbiB3b3VsZCB0aGVuIG1vdmUgaXQgdG8gaXRzIGZpbmFsIGRlc3RpbmF0aW9uLiBOb3RlIHRoYXQgd2UgY2FuJ3RcbiAgICAgICAgICAgIC8vIG1ha2UgdGhpcyBhc3N1bXB0aW9uIHdoZW4gdXNpbmcgdGhlIFNoYWRvdyBET00sIGJlY2F1c2UgdGhlIG5hdGl2ZSBwcm9qZWN0aW9uIHBsYWNlaG9sZGVyc1xuICAgICAgICAgICAgLy8gKDxjb250ZW50PiBvciA8c2xvdD4pIGhhdmUgdG8gYmUgaW4gcGxhY2UgYXMgZWxlbWVudHMgYXJlIGJlaW5nIGluc2VydGVkLlxuICAgICAgICAgICAgaWYgKGVuY2Fwc3VsYXRpb24gPT09IFZpZXdFbmNhcHN1bGF0aW9uJDEuTm9uZSB8fFxuICAgICAgICAgICAgICAgIGVuY2Fwc3VsYXRpb24gPT09IFZpZXdFbmNhcHN1bGF0aW9uJDEuRW11bGF0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2V0TmF0aXZlQnlUTm9kZShwYXJlbnRUTm9kZSwgbFZpZXcpO1xuICAgIH1cbn1cbi8qKlxuICogSW5zZXJ0cyBhIG5hdGl2ZSBub2RlIGJlZm9yZSBhbm90aGVyIG5hdGl2ZSBub2RlIGZvciBhIGdpdmVuIHBhcmVudCB1c2luZyB7QGxpbmsgUmVuZGVyZXIzfS5cbiAqIFRoaXMgaXMgYSB1dGlsaXR5IGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQgd2hlbiBuYXRpdmUgbm9kZXMgd2VyZSBkZXRlcm1pbmVkIC0gaXQgYWJzdHJhY3RzIGFuXG4gKiBhY3R1YWwgcmVuZGVyZXIgYmVpbmcgdXNlZC5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlSW5zZXJ0QmVmb3JlKHJlbmRlcmVyLCBwYXJlbnQsIGNoaWxkLCBiZWZvcmVOb2RlLCBpc01vdmUpIHtcbiAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVySW5zZXJ0QmVmb3JlKys7XG4gICAgaWYgKGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSkge1xuICAgICAgICByZW5kZXJlci5pbnNlcnRCZWZvcmUocGFyZW50LCBjaGlsZCwgYmVmb3JlTm9kZSwgaXNNb3ZlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGJlZm9yZU5vZGUsIGlzTW92ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbmF0aXZlQXBwZW5kQ2hpbGQocmVuZGVyZXIsIHBhcmVudCwgY2hpbGQpIHtcbiAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyQXBwZW5kQ2hpbGQrKztcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChwYXJlbnQsICdwYXJlbnQgbm9kZSBtdXN0IGJlIGRlZmluZWQnKTtcbiAgICBpZiAoaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpKSB7XG4gICAgICAgIHJlbmRlcmVyLmFwcGVuZENoaWxkKHBhcmVudCwgY2hpbGQpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICB9XG59XG5mdW5jdGlvbiBuYXRpdmVBcHBlbmRPckluc2VydEJlZm9yZShyZW5kZXJlciwgcGFyZW50LCBjaGlsZCwgYmVmb3JlTm9kZSwgaXNNb3ZlKSB7XG4gICAgaWYgKGJlZm9yZU5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgbmF0aXZlSW5zZXJ0QmVmb3JlKHJlbmRlcmVyLCBwYXJlbnQsIGNoaWxkLCBiZWZvcmVOb2RlLCBpc01vdmUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmF0aXZlQXBwZW5kQ2hpbGQocmVuZGVyZXIsIHBhcmVudCwgY2hpbGQpO1xuICAgIH1cbn1cbi8qKiBSZW1vdmVzIGEgbm9kZSBmcm9tIHRoZSBET00gZ2l2ZW4gaXRzIG5hdGl2ZSBwYXJlbnQuICovXG5mdW5jdGlvbiBuYXRpdmVSZW1vdmVDaGlsZChyZW5kZXJlciwgcGFyZW50LCBjaGlsZCwgaXNIb3N0RWxlbWVudCkge1xuICAgIGlmIChpc1Byb2NlZHVyYWxSZW5kZXJlcihyZW5kZXJlcikpIHtcbiAgICAgICAgcmVuZGVyZXIucmVtb3ZlQ2hpbGQocGFyZW50LCBjaGlsZCwgaXNIb3N0RWxlbWVudCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIG5hdGl2ZSBwYXJlbnQgb2YgYSBnaXZlbiBuYXRpdmUgbm9kZS5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlUGFyZW50Tm9kZShyZW5kZXJlciwgbm9kZSkge1xuICAgIHJldHVybiAoaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpID8gcmVuZGVyZXIucGFyZW50Tm9kZShub2RlKSA6IG5vZGUucGFyZW50Tm9kZSk7XG59XG4vKipcbiAqIFJldHVybnMgYSBuYXRpdmUgc2libGluZyBvZiBhIGdpdmVuIG5hdGl2ZSBub2RlLlxuICovXG5mdW5jdGlvbiBuYXRpdmVOZXh0U2libGluZyhyZW5kZXJlciwgbm9kZSkge1xuICAgIHJldHVybiBpc1Byb2NlZHVyYWxSZW5kZXJlcihyZW5kZXJlcikgPyByZW5kZXJlci5uZXh0U2libGluZyhub2RlKSA6IG5vZGUubmV4dFNpYmxpbmc7XG59XG4vKipcbiAqIEZpbmQgYSBub2RlIGluIGZyb250IG9mIHdoaWNoIGBjdXJyZW50VE5vZGVgIHNob3VsZCBiZSBpbnNlcnRlZC5cbiAqXG4gKiBUaGlzIG1ldGhvZCBkZXRlcm1pbmVzIHRoZSBgUk5vZGVgIGluIGZyb250IG9mIHdoaWNoIHdlIHNob3VsZCBpbnNlcnQgdGhlIGBjdXJyZW50Uk5vZGVgLiBUaGlzXG4gKiB0YWtlcyBgVE5vZGUuaW5zZXJ0QmVmb3JlSW5kZXhgIGludG8gYWNjb3VudCBpZiBpMThuIGNvZGUgaGFzIGJlZW4gaW52b2tlZC5cbiAqXG4gKiBAcGFyYW0gcGFyZW50VE5vZGUgcGFyZW50IGBUTm9kZWBcbiAqIEBwYXJhbSBjdXJyZW50VE5vZGUgY3VycmVudCBgVE5vZGVgIChUaGUgbm9kZSB3aGljaCB3ZSB3b3VsZCBsaWtlIHRvIGluc2VydCBpbnRvIHRoZSBET00pXG4gKiBAcGFyYW0gbFZpZXcgY3VycmVudCBgTFZpZXdgXG4gKi9cbmZ1bmN0aW9uIGdldEluc2VydEluRnJvbnRPZlJOb2RlKHBhcmVudFROb2RlLCBjdXJyZW50VE5vZGUsIGxWaWV3KSB7XG4gICAgcmV0dXJuIF9nZXRJbnNlcnRJbkZyb250T2ZSTm9kZVdpdGhJMThuKHBhcmVudFROb2RlLCBjdXJyZW50VE5vZGUsIGxWaWV3KTtcbn1cbi8qKlxuICogRmluZCBhIG5vZGUgaW4gZnJvbnQgb2Ygd2hpY2ggYGN1cnJlbnRUTm9kZWAgc2hvdWxkIGJlIGluc2VydGVkLiAoRG9lcyBub3QgdGFrZSBpMThuIGludG9cbiAqIGFjY291bnQpXG4gKlxuICogVGhpcyBtZXRob2QgZGV0ZXJtaW5lcyB0aGUgYFJOb2RlYCBpbiBmcm9udCBvZiB3aGljaCB3ZSBzaG91bGQgaW5zZXJ0IHRoZSBgY3VycmVudFJOb2RlYC4gVGhpc1xuICogZG9lcyBub3QgdGFrZSBgVE5vZGUuaW5zZXJ0QmVmb3JlSW5kZXhgIGludG8gYWNjb3VudC5cbiAqXG4gKiBAcGFyYW0gcGFyZW50VE5vZGUgcGFyZW50IGBUTm9kZWBcbiAqIEBwYXJhbSBjdXJyZW50VE5vZGUgY3VycmVudCBgVE5vZGVgIChUaGUgbm9kZSB3aGljaCB3ZSB3b3VsZCBsaWtlIHRvIGluc2VydCBpbnRvIHRoZSBET00pXG4gKiBAcGFyYW0gbFZpZXcgY3VycmVudCBgTFZpZXdgXG4gKi9cbmZ1bmN0aW9uIGdldEluc2VydEluRnJvbnRPZlJOb2RlV2l0aE5vSTE4bihwYXJlbnRUTm9kZSwgY3VycmVudFROb2RlLCBsVmlldykge1xuICAgIGlmIChwYXJlbnRUTm9kZS50eXBlICYgKDggLyogRWxlbWVudENvbnRhaW5lciAqLyB8IDMyIC8qIEljdSAqLykpIHtcbiAgICAgICAgcmV0dXJuIGdldE5hdGl2ZUJ5VE5vZGUocGFyZW50VE5vZGUsIGxWaWV3KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFRyZWUgc2hha2FibGUgYm91bmRhcnkgZm9yIGBnZXRJbnNlcnRJbkZyb250T2ZSTm9kZVdpdGhJMThuYCBmdW5jdGlvbi5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgb25seSBiZSBzZXQgaWYgaTE4biBjb2RlIHJ1bnMuXG4gKi9cbmxldCBfZ2V0SW5zZXJ0SW5Gcm9udE9mUk5vZGVXaXRoSTE4biA9IGdldEluc2VydEluRnJvbnRPZlJOb2RlV2l0aE5vSTE4bjtcbi8qKlxuICogVHJlZSBzaGFrYWJsZSBib3VuZGFyeSBmb3IgYHByb2Nlc3NJMThuSW5zZXJ0QmVmb3JlYCBmdW5jdGlvbi5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgb25seSBiZSBzZXQgaWYgaTE4biBjb2RlIHJ1bnMuXG4gKi9cbmxldCBfcHJvY2Vzc0kxOG5JbnNlcnRCZWZvcmU7XG5mdW5jdGlvbiBzZXRJMThuSGFuZGxpbmcoZ2V0SW5zZXJ0SW5Gcm9udE9mUk5vZGVXaXRoSTE4biwgcHJvY2Vzc0kxOG5JbnNlcnRCZWZvcmUpIHtcbiAgICBfZ2V0SW5zZXJ0SW5Gcm9udE9mUk5vZGVXaXRoSTE4biA9IGdldEluc2VydEluRnJvbnRPZlJOb2RlV2l0aEkxOG47XG4gICAgX3Byb2Nlc3NJMThuSW5zZXJ0QmVmb3JlID0gcHJvY2Vzc0kxOG5JbnNlcnRCZWZvcmU7XG59XG4vKipcbiAqIEFwcGVuZHMgdGhlIGBjaGlsZGAgbmF0aXZlIG5vZGUgKG9yIGEgY29sbGVjdGlvbiBvZiBub2RlcykgdG8gdGhlIGBwYXJlbnRgLlxuICpcbiAqIEBwYXJhbSB0VmlldyBUaGUgYFRWaWV3JyB0byBiZSBhcHBlbmRlZFxuICogQHBhcmFtIGxWaWV3IFRoZSBjdXJyZW50IExWaWV3XG4gKiBAcGFyYW0gY2hpbGRSTm9kZSBUaGUgbmF0aXZlIGNoaWxkIChvciBjaGlsZHJlbikgdGhhdCBzaG91bGQgYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSBjaGlsZFROb2RlIFRoZSBUTm9kZSBvZiB0aGUgY2hpbGQgZWxlbWVudFxuICovXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCh0VmlldywgbFZpZXcsIGNoaWxkUk5vZGUsIGNoaWxkVE5vZGUpIHtcbiAgICBjb25zdCBwYXJlbnRSTm9kZSA9IGdldFBhcmVudFJFbGVtZW50KHRWaWV3LCBjaGlsZFROb2RlLCBsVmlldyk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBsVmlld1tSRU5ERVJFUl07XG4gICAgY29uc3QgcGFyZW50VE5vZGUgPSBjaGlsZFROb2RlLnBhcmVudCB8fCBsVmlld1tUX0hPU1RdO1xuICAgIGNvbnN0IGFuY2hvck5vZGUgPSBnZXRJbnNlcnRJbkZyb250T2ZSTm9kZShwYXJlbnRUTm9kZSwgY2hpbGRUTm9kZSwgbFZpZXcpO1xuICAgIGlmIChwYXJlbnRSTm9kZSAhPSBudWxsKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkUk5vZGUpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkUk5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBuYXRpdmVBcHBlbmRPckluc2VydEJlZm9yZShyZW5kZXJlciwgcGFyZW50Uk5vZGUsIGNoaWxkUk5vZGVbaV0sIGFuY2hvck5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5hdGl2ZUFwcGVuZE9ySW5zZXJ0QmVmb3JlKHJlbmRlcmVyLCBwYXJlbnRSTm9kZSwgY2hpbGRSTm9kZSwgYW5jaG9yTm9kZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9wcm9jZXNzSTE4bkluc2VydEJlZm9yZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIF9wcm9jZXNzSTE4bkluc2VydEJlZm9yZShyZW5kZXJlciwgY2hpbGRUTm9kZSwgbFZpZXcsIGNoaWxkUk5vZGUsIHBhcmVudFJOb2RlKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgbmF0aXZlIG5vZGUgZm9yIGEgZ2l2ZW4gTFZpZXcsIHN0YXJ0aW5nIGZyb20gdGhlIHByb3ZpZGVkIFROb2RlLlxuICpcbiAqIE5hdGl2ZSBub2RlcyBhcmUgcmV0dXJuZWQgaW4gdGhlIG9yZGVyIGluIHdoaWNoIHRob3NlIGFwcGVhciBpbiB0aGUgbmF0aXZlIHRyZWUgKERPTSkuXG4gKi9cbmZ1bmN0aW9uIGdldEZpcnN0TmF0aXZlTm9kZShsVmlldywgdE5vZGUpIHtcbiAgICBpZiAodE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBhc3NlcnRUTm9kZVR5cGUodE5vZGUsIDMgLyogQW55Uk5vZGUgKi8gfCAxMiAvKiBBbnlDb250YWluZXIgKi8gfCAzMiAvKiBJY3UgKi8gfCAxNiAvKiBQcm9qZWN0aW9uICovKTtcbiAgICAgICAgY29uc3QgdE5vZGVUeXBlID0gdE5vZGUudHlwZTtcbiAgICAgICAgaWYgKHROb2RlVHlwZSAmIDMgLyogQW55Uk5vZGUgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXROYXRpdmVCeVROb2RlKHROb2RlLCBsVmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodE5vZGVUeXBlICYgNCAvKiBDb250YWluZXIgKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRCZWZvcmVOb2RlRm9yVmlldygtMSwgbFZpZXdbdE5vZGUuaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0Tm9kZVR5cGUgJiA4IC8qIEVsZW1lbnRDb250YWluZXIgKi8pIHtcbiAgICAgICAgICAgIGNvbnN0IGVsSWN1Q29udGFpbmVyQ2hpbGQgPSB0Tm9kZS5jaGlsZDtcbiAgICAgICAgICAgIGlmIChlbEljdUNvbnRhaW5lckNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEZpcnN0TmF0aXZlTm9kZShsVmlldywgZWxJY3VDb250YWluZXJDaGlsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByTm9kZU9yTENvbnRhaW5lciA9IGxWaWV3W3ROb2RlLmluZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoaXNMQ29udGFpbmVyKHJOb2RlT3JMQ29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QmVmb3JlTm9kZUZvclZpZXcoLTEsIHJOb2RlT3JMQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bndyYXBSTm9kZShyTm9kZU9yTENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHROb2RlVHlwZSAmIDMyIC8qIEljdSAqLykge1xuICAgICAgICAgICAgbGV0IG5leHRSTm9kZSA9IGljdUNvbnRhaW5lckl0ZXJhdGUodE5vZGUsIGxWaWV3KTtcbiAgICAgICAgICAgIGxldCByTm9kZSA9IG5leHRSTm9kZSgpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIElDVSBjb250YWluZXIgaGFzIG5vIG5vZGVzLCB0aGFuIHdlIHVzZSB0aGUgSUNVIGFuY2hvciBhcyB0aGUgbm9kZS5cbiAgICAgICAgICAgIHJldHVybiByTm9kZSB8fCB1bndyYXBSTm9kZShsVmlld1t0Tm9kZS5pbmRleF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcHJvamVjdGlvbk5vZGVzID0gZ2V0UHJvamVjdGlvbk5vZGVzKGxWaWV3LCB0Tm9kZSk7XG4gICAgICAgICAgICBpZiAocHJvamVjdGlvbk5vZGVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvamVjdGlvbk5vZGVzKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvamVjdGlvbk5vZGVzWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRWaWV3ID0gZ2V0TFZpZXdQYXJlbnQobFZpZXdbREVDTEFSQVRJT05fQ09NUE9ORU5UX1ZJRVddKTtcbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0UGFyZW50VmlldyhwYXJlbnRWaWV3KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Rmlyc3ROYXRpdmVOb2RlKHBhcmVudFZpZXcsIHByb2plY3Rpb25Ob2Rlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Rmlyc3ROYXRpdmVOb2RlKGxWaWV3LCB0Tm9kZS5uZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFByb2plY3Rpb25Ob2RlcyhsVmlldywgdE5vZGUpIHtcbiAgICBpZiAodE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgY29tcG9uZW50VmlldyA9IGxWaWV3W0RFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXXTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50SG9zdCA9IGNvbXBvbmVudFZpZXdbVF9IT1NUXTtcbiAgICAgICAgY29uc3Qgc2xvdElkeCA9IHROb2RlLnByb2plY3Rpb247XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRQcm9qZWN0aW9uU2xvdHMobFZpZXcpO1xuICAgICAgICByZXR1cm4gY29tcG9uZW50SG9zdC5wcm9qZWN0aW9uW3Nsb3RJZHhdO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEJlZm9yZU5vZGVGb3JWaWV3KHZpZXdJbmRleEluQ29udGFpbmVyLCBsQ29udGFpbmVyKSB7XG4gICAgY29uc3QgbmV4dFZpZXdJbmRleCA9IENPTlRBSU5FUl9IRUFERVJfT0ZGU0VUICsgdmlld0luZGV4SW5Db250YWluZXIgKyAxO1xuICAgIGlmIChuZXh0Vmlld0luZGV4IDwgbENvbnRhaW5lci5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgbFZpZXcgPSBsQ29udGFpbmVyW25leHRWaWV3SW5kZXhdO1xuICAgICAgICBjb25zdCBmaXJzdFROb2RlT2ZWaWV3ID0gbFZpZXdbVFZJRVddLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChmaXJzdFROb2RlT2ZWaWV3ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0Rmlyc3ROYXRpdmVOb2RlKGxWaWV3LCBmaXJzdFROb2RlT2ZWaWV3KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbENvbnRhaW5lcltOQVRJVkVdO1xufVxuLyoqXG4gKiBSZW1vdmVzIGEgbmF0aXZlIG5vZGUgaXRzZWxmIHVzaW5nIGEgZ2l2ZW4gcmVuZGVyZXIuIFRvIHJlbW92ZSB0aGUgbm9kZSB3ZSBhcmUgbG9va2luZyB1cCBpdHNcbiAqIHBhcmVudCBmcm9tIHRoZSBuYXRpdmUgdHJlZSBhcyBub3QgYWxsIHBsYXRmb3JtcyAvIGJyb3dzZXJzIHN1cHBvcnQgdGhlIGVxdWl2YWxlbnQgb2ZcbiAqIG5vZGUucmVtb3ZlKCkuXG4gKlxuICogQHBhcmFtIHJlbmRlcmVyIEEgcmVuZGVyZXIgdG8gYmUgdXNlZFxuICogQHBhcmFtIHJOb2RlIFRoZSBuYXRpdmUgbm9kZSB0aGF0IHNob3VsZCBiZSByZW1vdmVkXG4gKiBAcGFyYW0gaXNIb3N0RWxlbWVudCBBIGZsYWcgaW5kaWNhdGluZyBpZiBhIG5vZGUgdG8gYmUgcmVtb3ZlZCBpcyBhIGhvc3Qgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIG5hdGl2ZVJlbW92ZU5vZGUocmVuZGVyZXIsIHJOb2RlLCBpc0hvc3RFbGVtZW50KSB7XG4gICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlclJlbW92ZU5vZGUrKztcbiAgICBjb25zdCBuYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnROb2RlKHJlbmRlcmVyLCByTm9kZSk7XG4gICAgaWYgKG5hdGl2ZVBhcmVudCkge1xuICAgICAgICBuYXRpdmVSZW1vdmVDaGlsZChyZW5kZXJlciwgbmF0aXZlUGFyZW50LCByTm9kZSwgaXNIb3N0RWxlbWVudCk7XG4gICAgfVxufVxuLyoqXG4gKiBQZXJmb3JtcyB0aGUgb3BlcmF0aW9uIG9mIGBhY3Rpb25gIG9uIHRoZSBub2RlLiBUeXBpY2FsbHkgdGhpcyBpbnZvbHZlcyBpbnNlcnRpbmcgb3IgcmVtb3ZpbmdcbiAqIG5vZGVzIG9uIHRoZSBMVmlldyBvciBwcm9qZWN0aW9uIGJvdW5kYXJ5LlxuICovXG5mdW5jdGlvbiBhcHBseU5vZGVzKHJlbmRlcmVyLCBhY3Rpb24sIHROb2RlLCBsVmlldywgcGFyZW50UkVsZW1lbnQsIGJlZm9yZU5vZGUsIGlzUHJvamVjdGlvbikge1xuICAgIHdoaWxlICh0Tm9kZSAhPSBudWxsKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRUTm9kZUZvckxWaWV3KHROb2RlLCBsVmlldyk7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgYXNzZXJ0VE5vZGVUeXBlKHROb2RlLCAzIC8qIEFueVJOb2RlICovIHwgMTIgLyogQW55Q29udGFpbmVyICovIHwgMTYgLyogUHJvamVjdGlvbiAqLyB8IDMyIC8qIEljdSAqLyk7XG4gICAgICAgIGNvbnN0IHJhd1Nsb3RWYWx1ZSA9IGxWaWV3W3ROb2RlLmluZGV4XTtcbiAgICAgICAgY29uc3QgdE5vZGVUeXBlID0gdE5vZGUudHlwZTtcbiAgICAgICAgaWYgKGlzUHJvamVjdGlvbikge1xuICAgICAgICAgICAgaWYgKGFjdGlvbiA9PT0gMCAvKiBDcmVhdGUgKi8pIHtcbiAgICAgICAgICAgICAgICByYXdTbG90VmFsdWUgJiYgYXR0YWNoUGF0Y2hEYXRhKHVud3JhcFJOb2RlKHJhd1Nsb3RWYWx1ZSksIGxWaWV3KTtcbiAgICAgICAgICAgICAgICB0Tm9kZS5mbGFncyB8PSA0IC8qIGlzUHJvamVjdGVkICovO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgodE5vZGUuZmxhZ3MgJiA2NCAvKiBpc0RldGFjaGVkICovKSAhPT0gNjQgLyogaXNEZXRhY2hlZCAqLykge1xuICAgICAgICAgICAgaWYgKHROb2RlVHlwZSAmIDggLyogRWxlbWVudENvbnRhaW5lciAqLykge1xuICAgICAgICAgICAgICAgIGFwcGx5Tm9kZXMocmVuZGVyZXIsIGFjdGlvbiwgdE5vZGUuY2hpbGQsIGxWaWV3LCBwYXJlbnRSRWxlbWVudCwgYmVmb3JlTm9kZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGFwcGx5VG9FbGVtZW50T3JDb250YWluZXIoYWN0aW9uLCByZW5kZXJlciwgcGFyZW50UkVsZW1lbnQsIHJhd1Nsb3RWYWx1ZSwgYmVmb3JlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0Tm9kZVR5cGUgJiAzMiAvKiBJY3UgKi8pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Uk5vZGUgPSBpY3VDb250YWluZXJJdGVyYXRlKHROb2RlLCBsVmlldyk7XG4gICAgICAgICAgICAgICAgbGV0IHJOb2RlO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyTm9kZSA9IG5leHRSTm9kZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGx5VG9FbGVtZW50T3JDb250YWluZXIoYWN0aW9uLCByZW5kZXJlciwgcGFyZW50UkVsZW1lbnQsIHJOb2RlLCBiZWZvcmVOb2RlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXBwbHlUb0VsZW1lbnRPckNvbnRhaW5lcihhY3Rpb24sIHJlbmRlcmVyLCBwYXJlbnRSRWxlbWVudCwgcmF3U2xvdFZhbHVlLCBiZWZvcmVOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHROb2RlVHlwZSAmIDE2IC8qIFByb2plY3Rpb24gKi8pIHtcbiAgICAgICAgICAgICAgICBhcHBseVByb2plY3Rpb25SZWN1cnNpdmUocmVuZGVyZXIsIGFjdGlvbiwgbFZpZXcsIHROb2RlLCBwYXJlbnRSRWxlbWVudCwgYmVmb3JlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0VE5vZGVUeXBlKHROb2RlLCAzIC8qIEFueVJOb2RlICovIHwgNCAvKiBDb250YWluZXIgKi8pO1xuICAgICAgICAgICAgICAgIGFwcGx5VG9FbGVtZW50T3JDb250YWluZXIoYWN0aW9uLCByZW5kZXJlciwgcGFyZW50UkVsZW1lbnQsIHJhd1Nsb3RWYWx1ZSwgYmVmb3JlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdE5vZGUgPSBpc1Byb2plY3Rpb24gPyB0Tm9kZS5wcm9qZWN0aW9uTmV4dCA6IHROb2RlLm5leHQ7XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlWaWV3KHRWaWV3LCBsVmlldywgcmVuZGVyZXIsIGFjdGlvbiwgcGFyZW50UkVsZW1lbnQsIGJlZm9yZU5vZGUpIHtcbiAgICBhcHBseU5vZGVzKHJlbmRlcmVyLCBhY3Rpb24sIHRWaWV3LmZpcnN0Q2hpbGQsIGxWaWV3LCBwYXJlbnRSRWxlbWVudCwgYmVmb3JlTm9kZSwgZmFsc2UpO1xufVxuLyoqXG4gKiBgYXBwbHlQcm9qZWN0aW9uYCBwZXJmb3JtcyBvcGVyYXRpb24gb24gdGhlIHByb2plY3Rpb24uXG4gKlxuICogSW5zZXJ0aW5nIGEgcHJvamVjdGlvbiByZXF1aXJlcyB1cyB0byBsb2NhdGUgdGhlIHByb2plY3RlZCBub2RlcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LiBUaGVcbiAqIGNvbXBsaWNhdGlvbiBpcyB0aGF0IHRob3NlIG5vZGVzIHRoZW1zZWx2ZXMgY291bGQgYmUgcmUtcHJvamVjdGVkIGZyb20gdGhlaXIgcGFyZW50IGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0gdFZpZXcgVGhlIGBUVmlld2Agb2YgYExWaWV3YCB3aGljaCBuZWVkcyB0byBiZSBpbnNlcnRlZCwgZGV0YWNoZWQsIGRlc3Ryb3llZFxuICogQHBhcmFtIGxWaWV3IFRoZSBgTFZpZXdgIHdoaWNoIG5lZWRzIHRvIGJlIGluc2VydGVkLCBkZXRhY2hlZCwgZGVzdHJveWVkLlxuICogQHBhcmFtIHRQcm9qZWN0aW9uTm9kZSBub2RlIHRvIHByb2plY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlQcm9qZWN0aW9uKHRWaWV3LCBsVmlldywgdFByb2plY3Rpb25Ob2RlKSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBsVmlld1tSRU5ERVJFUl07XG4gICAgY29uc3QgcGFyZW50Uk5vZGUgPSBnZXRQYXJlbnRSRWxlbWVudCh0VmlldywgdFByb2plY3Rpb25Ob2RlLCBsVmlldyk7XG4gICAgY29uc3QgcGFyZW50VE5vZGUgPSB0UHJvamVjdGlvbk5vZGUucGFyZW50IHx8IGxWaWV3W1RfSE9TVF07XG4gICAgbGV0IGJlZm9yZU5vZGUgPSBnZXRJbnNlcnRJbkZyb250T2ZSTm9kZShwYXJlbnRUTm9kZSwgdFByb2plY3Rpb25Ob2RlLCBsVmlldyk7XG4gICAgYXBwbHlQcm9qZWN0aW9uUmVjdXJzaXZlKHJlbmRlcmVyLCAwIC8qIENyZWF0ZSAqLywgbFZpZXcsIHRQcm9qZWN0aW9uTm9kZSwgcGFyZW50Uk5vZGUsIGJlZm9yZU5vZGUpO1xufVxuLyoqXG4gKiBgYXBwbHlQcm9qZWN0aW9uUmVjdXJzaXZlYCBwZXJmb3JtcyBvcGVyYXRpb24gb24gdGhlIHByb2plY3Rpb24gc3BlY2lmaWVkIGJ5IGBhY3Rpb25gIChpbnNlcnQsXG4gKiBkZXRhY2gsIGRlc3Ryb3kpXG4gKlxuICogSW5zZXJ0aW5nIGEgcHJvamVjdGlvbiByZXF1aXJlcyB1cyB0byBsb2NhdGUgdGhlIHByb2plY3RlZCBub2RlcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LiBUaGVcbiAqIGNvbXBsaWNhdGlvbiBpcyB0aGF0IHRob3NlIG5vZGVzIHRoZW1zZWx2ZXMgY291bGQgYmUgcmUtcHJvamVjdGVkIGZyb20gdGhlaXIgcGFyZW50IGNvbXBvbmVudC5cbiAqXG4gKiBAcGFyYW0gcmVuZGVyZXIgUmVuZGVyIHRvIHVzZVxuICogQHBhcmFtIGFjdGlvbiBhY3Rpb24gdG8gcGVyZm9ybSAoaW5zZXJ0LCBkZXRhY2gsIGRlc3Ryb3kpXG4gKiBAcGFyYW0gbFZpZXcgVGhlIExWaWV3IHdoaWNoIG5lZWRzIHRvIGJlIGluc2VydGVkLCBkZXRhY2hlZCwgZGVzdHJveWVkLlxuICogQHBhcmFtIHRQcm9qZWN0aW9uTm9kZSBub2RlIHRvIHByb2plY3RcbiAqIEBwYXJhbSBwYXJlbnRSRWxlbWVudCBwYXJlbnQgRE9NIGVsZW1lbnQgZm9yIGluc2VydGlvbi9yZW1vdmFsLlxuICogQHBhcmFtIGJlZm9yZU5vZGUgQmVmb3JlIHdoaWNoIG5vZGUgdGhlIGluc2VydGlvbnMgc2hvdWxkIGhhcHBlbi5cbiAqL1xuZnVuY3Rpb24gYXBwbHlQcm9qZWN0aW9uUmVjdXJzaXZlKHJlbmRlcmVyLCBhY3Rpb24sIGxWaWV3LCB0UHJvamVjdGlvbk5vZGUsIHBhcmVudFJFbGVtZW50LCBiZWZvcmVOb2RlKSB7XG4gICAgY29uc3QgY29tcG9uZW50TFZpZXcgPSBsVmlld1tERUNMQVJBVElPTl9DT01QT05FTlRfVklFV107XG4gICAgY29uc3QgY29tcG9uZW50Tm9kZSA9IGNvbXBvbmVudExWaWV3W1RfSE9TVF07XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydEVxdWFsKHR5cGVvZiB0UHJvamVjdGlvbk5vZGUucHJvamVjdGlvbiwgJ251bWJlcicsICdleHBlY3RpbmcgcHJvamVjdGlvbiBpbmRleCcpO1xuICAgIGNvbnN0IG5vZGVUb1Byb2plY3RPclJOb2RlcyA9IGNvbXBvbmVudE5vZGUucHJvamVjdGlvblt0UHJvamVjdGlvbk5vZGUucHJvamVjdGlvbl07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZVRvUHJvamVjdE9yUk5vZGVzKSkge1xuICAgICAgICAvLyBUaGlzIHNob3VsZCBub3QgZXhpc3QsIGl0IGlzIGEgYml0IG9mIGEgaGFjay4gV2hlbiB3ZSBib290c3RyYXAgYSB0b3AgbGV2ZWwgbm9kZSBhbmQgd2VcbiAgICAgICAgLy8gbmVlZCB0byBzdXBwb3J0IHBhc3NpbmcgcHJvamVjdGFibGUgbm9kZXMsIHNvIHdlIGNoZWF0IGFuZCBwdXQgdGhlbSBpbiB0aGUgVE5vZGVcbiAgICAgICAgLy8gb2YgdGhlIEhvc3QgVFZpZXcuIChZZXMgd2UgcHV0IGluc3RhbmNlIGluZm8gYXQgdGhlIFQgTGV2ZWwpLiBXZSBjYW4gZ2V0IGF3YXkgd2l0aCBpdFxuICAgICAgICAvLyBiZWNhdXNlIHdlIGtub3cgdGhhdCB0aGF0IFRWaWV3IGlzIG5vdCBzaGFyZWQgYW5kIHRoZXJlZm9yZSBpdCB3aWxsIG5vdCBiZSBhIHByb2JsZW0uXG4gICAgICAgIC8vIFRoaXMgc2hvdWxkIGJlIHJlZmFjdG9yZWQgYW5kIGNsZWFuZWQgdXAuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZVRvUHJvamVjdE9yUk5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByTm9kZSA9IG5vZGVUb1Byb2plY3RPclJOb2Rlc1tpXTtcbiAgICAgICAgICAgIGFwcGx5VG9FbGVtZW50T3JDb250YWluZXIoYWN0aW9uLCByZW5kZXJlciwgcGFyZW50UkVsZW1lbnQsIHJOb2RlLCBiZWZvcmVOb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IG5vZGVUb1Byb2plY3QgPSBub2RlVG9Qcm9qZWN0T3JSTm9kZXM7XG4gICAgICAgIGNvbnN0IHByb2plY3RlZENvbXBvbmVudExWaWV3ID0gY29tcG9uZW50TFZpZXdbUEFSRU5UXTtcbiAgICAgICAgYXBwbHlOb2RlcyhyZW5kZXJlciwgYWN0aW9uLCBub2RlVG9Qcm9qZWN0LCBwcm9qZWN0ZWRDb21wb25lbnRMVmlldywgcGFyZW50UkVsZW1lbnQsIGJlZm9yZU5vZGUsIHRydWUpO1xuICAgIH1cbn1cbi8qKlxuICogYGFwcGx5Q29udGFpbmVyYCBwZXJmb3JtcyBhbiBvcGVyYXRpb24gb24gdGhlIGNvbnRhaW5lciBhbmQgaXRzIHZpZXdzIGFzIHNwZWNpZmllZCBieVxuICogYGFjdGlvbmAgKGluc2VydCwgZGV0YWNoLCBkZXN0cm95KVxuICpcbiAqIEluc2VydGluZyBhIENvbnRhaW5lciBpcyBjb21wbGljYXRlZCBieSB0aGUgZmFjdCB0aGF0IHRoZSBjb250YWluZXIgbWF5IGhhdmUgVmlld3Mgd2hpY2hcbiAqIHRoZW1zZWx2ZXMgaGF2ZSBjb250YWluZXJzIG9yIHByb2plY3Rpb25zLlxuICpcbiAqIEBwYXJhbSByZW5kZXJlciBSZW5kZXJlciB0byB1c2VcbiAqIEBwYXJhbSBhY3Rpb24gYWN0aW9uIHRvIHBlcmZvcm0gKGluc2VydCwgZGV0YWNoLCBkZXN0cm95KVxuICogQHBhcmFtIGxDb250YWluZXIgVGhlIExDb250YWluZXIgd2hpY2ggbmVlZHMgdG8gYmUgaW5zZXJ0ZWQsIGRldGFjaGVkLCBkZXN0cm95ZWQuXG4gKiBAcGFyYW0gcGFyZW50UkVsZW1lbnQgcGFyZW50IERPTSBlbGVtZW50IGZvciBpbnNlcnRpb24vcmVtb3ZhbC5cbiAqIEBwYXJhbSBiZWZvcmVOb2RlIEJlZm9yZSB3aGljaCBub2RlIHRoZSBpbnNlcnRpb25zIHNob3VsZCBoYXBwZW4uXG4gKi9cbmZ1bmN0aW9uIGFwcGx5Q29udGFpbmVyKHJlbmRlcmVyLCBhY3Rpb24sIGxDb250YWluZXIsIHBhcmVudFJFbGVtZW50LCBiZWZvcmVOb2RlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydExDb250YWluZXIobENvbnRhaW5lcik7XG4gICAgY29uc3QgYW5jaG9yID0gbENvbnRhaW5lcltOQVRJVkVdOyAvLyBMQ29udGFpbmVyIGhhcyBpdHMgb3duIGJlZm9yZSBub2RlLlxuICAgIGNvbnN0IG5hdGl2ZSA9IHVud3JhcFJOb2RlKGxDb250YWluZXIpO1xuICAgIC8vIEFuIExDb250YWluZXIgY2FuIGJlIGNyZWF0ZWQgZHluYW1pY2FsbHkgb24gYW55IG5vZGUgYnkgaW5qZWN0aW5nIFZpZXdDb250YWluZXJSZWYuXG4gICAgLy8gQXNraW5nIGZvciBhIFZpZXdDb250YWluZXJSZWYgb24gYW4gZWxlbWVudCB3aWxsIHJlc3VsdCBpbiBhIGNyZWF0aW9uIG9mIGEgc2VwYXJhdGUgYW5jaG9yXG4gICAgLy8gbm9kZSAoY29tbWVudCBpbiB0aGUgRE9NKSB0aGF0IHdpbGwgYmUgZGlmZmVyZW50IGZyb20gdGhlIExDb250YWluZXIncyBob3N0IG5vZGUuIEluIHRoaXNcbiAgICAvLyBwYXJ0aWN1bGFyIGNhc2Ugd2UgbmVlZCB0byBleGVjdXRlIGFjdGlvbiBvbiAyIG5vZGVzOlxuICAgIC8vIC0gY29udGFpbmVyJ3MgaG9zdCBub2RlICh0aGlzIGlzIGRvbmUgaW4gdGhlIGV4ZWN1dGVBY3Rpb25PbkVsZW1lbnRPckNvbnRhaW5lcilcbiAgICAvLyAtIGNvbnRhaW5lcidzIGhvc3Qgbm9kZSAodGhpcyBpcyBkb25lIGhlcmUpXG4gICAgaWYgKGFuY2hvciAhPT0gbmF0aXZlKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgdmVyeSBzdHJhbmdlIHRvIG1lIChNaXNrbykuIEkgd291bGQgZXhwZWN0IHRoYXQgdGhlIG5hdGl2ZSBpcyBzYW1lIGFzIGFuY2hvci4gSVxuICAgICAgICAvLyBkb24ndCBzZWUgYSByZWFzb24gd2h5IHRoZXkgc2hvdWxkIGJlIGRpZmZlcmVudCwgYnV0IHRoZXkgYXJlLlxuICAgICAgICAvL1xuICAgICAgICAvLyBJZiB0aGV5IGFyZSB3ZSBuZWVkIHRvIHByb2Nlc3MgdGhlIHNlY29uZCBhbmNob3IgYXMgd2VsbC5cbiAgICAgICAgYXBwbHlUb0VsZW1lbnRPckNvbnRhaW5lcihhY3Rpb24sIHJlbmRlcmVyLCBwYXJlbnRSRWxlbWVudCwgYW5jaG9yLCBiZWZvcmVOb2RlKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IENPTlRBSU5FUl9IRUFERVJfT0ZGU0VUOyBpIDwgbENvbnRhaW5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBsVmlldyA9IGxDb250YWluZXJbaV07XG4gICAgICAgIGFwcGx5VmlldyhsVmlld1tUVklFV10sIGxWaWV3LCByZW5kZXJlciwgYWN0aW9uLCBwYXJlbnRSRWxlbWVudCwgYW5jaG9yKTtcbiAgICB9XG59XG4vKipcbiAqIFdyaXRlcyBjbGFzcy9zdHlsZSB0byBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSByZW5kZXJlciBSZW5kZXJlciB0byB1c2UuXG4gKiBAcGFyYW0gaXNDbGFzc0Jhc2VkIGB0cnVlYCBpZiBpdCBzaG91bGQgYmUgd3JpdHRlbiB0byBgY2xhc3NgIChgZmFsc2VgIHRvIHdyaXRlIHRvIGBzdHlsZWApXG4gKiBAcGFyYW0gck5vZGUgVGhlIE5vZGUgdG8gd3JpdGUgdG8uXG4gKiBAcGFyYW0gcHJvcCBQcm9wZXJ0eSB0byB3cml0ZSB0by4gVGhpcyB3b3VsZCBiZSB0aGUgY2xhc3Mvc3R5bGUgbmFtZS5cbiAqIEBwYXJhbSB2YWx1ZSBWYWx1ZSB0byB3cml0ZS4gSWYgYG51bGxgL2B1bmRlZmluZWRgL2BmYWxzZWAgdGhpcyBpcyBjb25zaWRlcmVkIGEgcmVtb3ZlIChzZXQvYWRkXG4gKiAgICAgICAgb3RoZXJ3aXNlKS5cbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsaW5nKHJlbmRlcmVyLCBpc0NsYXNzQmFzZWQsIHJOb2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGNvbnN0IGlzUHJvY2VkdXJhbCA9IGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKTtcbiAgICBpZiAoaXNDbGFzc0Jhc2VkKSB7XG4gICAgICAgIC8vIFdlIGFjdHVhbGx5IHdhbnQgSlMgdHJ1ZS9mYWxzZSBoZXJlIGJlY2F1c2UgYW55IHRydXRoeSB2YWx1ZSBzaG91bGQgYWRkIHRoZSBjbGFzc1xuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyUmVtb3ZlQ2xhc3MrKztcbiAgICAgICAgICAgIGlmIChpc1Byb2NlZHVyYWwpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5yZW1vdmVDbGFzcyhyTm9kZSwgcHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByTm9kZS5jbGFzc0xpc3QucmVtb3ZlKHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlckFkZENsYXNzKys7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZWR1cmFsKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuYWRkQ2xhc3Mock5vZGUsIHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQock5vZGUuY2xhc3NMaXN0LCAnSFRNTEVsZW1lbnQgZXhwZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICByTm9kZS5jbGFzc0xpc3QuYWRkKHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgZmxhZ3MgPSBwcm9wLmluZGV4T2YoJy0nKSA9PT0gLTEgPyB1bmRlZmluZWQgOiBSZW5kZXJlclN0eWxlRmxhZ3MyLkRhc2hDYXNlO1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCAvKiogfHwgdmFsdWUgPT09IHVuZGVmaW5lZCAqLykge1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlclJlbW92ZVN0eWxlKys7XG4gICAgICAgICAgICBpZiAoaXNQcm9jZWR1cmFsKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIucmVtb3ZlU3R5bGUock5vZGUsIHByb3AsIGZsYWdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJOb2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQSB2YWx1ZSBpcyBpbXBvcnRhbnQgaWYgaXQgZW5kcyB3aXRoIGAhaW1wb3J0YW50YC4gVGhlIHN0eWxlXG4gICAgICAgICAgICAvLyBwYXJzZXIgc3RyaXBzIGFueSBzZW1pY29sb25zIGF0IHRoZSBlbmQgb2YgdGhlIHZhbHVlLlxuICAgICAgICAgICAgY29uc3QgaXNJbXBvcnRhbnQgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUuZW5kc1dpdGgoJyFpbXBvcnRhbnQnKSA6IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGlzSW1wb3J0YW50KSB7XG4gICAgICAgICAgICAgICAgLy8gIWltcG9ydGFudCBoYXMgdG8gYmUgc3RyaXBwZWQgZnJvbSB0aGUgdmFsdWUgZm9yIGl0IHRvIGJlIHZhbGlkLlxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgLTEwKTtcbiAgICAgICAgICAgICAgICBmbGFncyB8PSBSZW5kZXJlclN0eWxlRmxhZ3MyLkltcG9ydGFudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUucmVuZGVyZXJTZXRTdHlsZSsrO1xuICAgICAgICAgICAgaWYgKGlzUHJvY2VkdXJhbCkge1xuICAgICAgICAgICAgICAgIHJlbmRlcmVyLnNldFN0eWxlKHJOb2RlLCBwcm9wLCB2YWx1ZSwgZmxhZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQock5vZGUuc3R5bGUsICdIVE1MRWxlbWVudCBleHBlY3RlZCcpO1xuICAgICAgICAgICAgICAgIHJOb2RlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIHZhbHVlLCBpc0ltcG9ydGFudCA/ICdpbXBvcnRhbnQnIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBXcml0ZSBgY3NzVGV4dGAgdG8gYFJFbGVtZW50YC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgZGlyZWN0IHdyaXRlIHdpdGhvdXQgYW55IHJlY29uY2lsaWF0aW9uLiBVc2VkIGZvciB3cml0aW5nIGluaXRpYWwgdmFsdWVzLCBzb1xuICogdGhhdCBzdGF0aWMgc3R5bGluZyB2YWx1ZXMgZG8gbm90IHB1bGwgaW4gdGhlIHN0eWxlIHBhcnNlci5cbiAqXG4gKiBAcGFyYW0gcmVuZGVyZXIgUmVuZGVyZXIgdG8gdXNlXG4gKiBAcGFyYW0gZWxlbWVudCBUaGUgZWxlbWVudCB3aGljaCBuZWVkcyB0byBiZSB1cGRhdGVkLlxuICogQHBhcmFtIG5ld1ZhbHVlIFRoZSBuZXcgY2xhc3MgbGlzdCB0byB3cml0ZS5cbiAqL1xuZnVuY3Rpb24gd3JpdGVEaXJlY3RTdHlsZShyZW5kZXJlciwgZWxlbWVudCwgbmV3VmFsdWUpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0U3RyaW5nKG5ld1ZhbHVlLCAnXFwnbmV3VmFsdWVcXCcgc2hvdWxkIGJlIGEgc3RyaW5nJyk7XG4gICAgaWYgKGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSkge1xuICAgICAgICByZW5kZXJlci5zZXRBdHRyaWJ1dGUoZWxlbWVudCwgJ3N0eWxlJywgbmV3VmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5jc3NUZXh0ID0gbmV3VmFsdWU7XG4gICAgfVxuICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUucmVuZGVyZXJTZXRTdHlsZSsrO1xufVxuLyoqXG4gKiBXcml0ZSBgY2xhc3NOYW1lYCB0byBgUkVsZW1lbnRgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZG9lcyBkaXJlY3Qgd3JpdGUgd2l0aG91dCBhbnkgcmVjb25jaWxpYXRpb24uIFVzZWQgZm9yIHdyaXRpbmcgaW5pdGlhbCB2YWx1ZXMsIHNvXG4gKiB0aGF0IHN0YXRpYyBzdHlsaW5nIHZhbHVlcyBkbyBub3QgcHVsbCBpbiB0aGUgc3R5bGUgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSByZW5kZXJlciBSZW5kZXJlciB0byB1c2VcbiAqIEBwYXJhbSBlbGVtZW50IFRoZSBlbGVtZW50IHdoaWNoIG5lZWRzIHRvIGJlIHVwZGF0ZWQuXG4gKiBAcGFyYW0gbmV3VmFsdWUgVGhlIG5ldyBjbGFzcyBsaXN0IHRvIHdyaXRlLlxuICovXG5mdW5jdGlvbiB3cml0ZURpcmVjdENsYXNzKHJlbmRlcmVyLCBlbGVtZW50LCBuZXdWYWx1ZSkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRTdHJpbmcobmV3VmFsdWUsICdcXCduZXdWYWx1ZVxcJyBzaG91bGQgYmUgYSBzdHJpbmcnKTtcbiAgICBpZiAoaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpKSB7XG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gJycpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGFyZSB0ZXN0cyBpbiBgZ29vZ2xlM2Agd2hpY2ggZXhwZWN0IGBlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKWAgdG8gYmUgYG51bGxgLlxuICAgICAgICAgICAgcmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKGVsZW1lbnQsICdjbGFzcycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsZW1lbnQsICdjbGFzcycsIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBuZXdWYWx1ZTtcbiAgICB9XG4gICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlclNldENsYXNzTmFtZSsrO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogUmV0dXJucyBhbiBpbmRleCBvZiBgY2xhc3NUb1NlYXJjaGAgaW4gYGNsYXNzTmFtZWAgdGFraW5nIHRva2VuIGJvdW5kYXJpZXMgaW50byBhY2NvdW50LlxuICpcbiAqIGBjbGFzc0luZGV4T2YoJ0FCIEEnLCAnQScsIDApYCB3aWxsIGJlIDMgKG5vdCAwIHNpbmNlIGBBQiE9PUFgKVxuICpcbiAqIEBwYXJhbSBjbGFzc05hbWUgQSBzdHJpbmcgY29udGFpbmluZyBjbGFzc2VzICh3aGl0ZXNwYWNlIHNlcGFyYXRlZClcbiAqIEBwYXJhbSBjbGFzc1RvU2VhcmNoIEEgY2xhc3MgbmFtZSB0byBsb2NhdGVcbiAqIEBwYXJhbSBzdGFydGluZ0luZGV4IFN0YXJ0aW5nIGxvY2F0aW9uIG9mIHNlYXJjaFxuICogQHJldHVybnMgYW4gaW5kZXggb2YgdGhlIGxvY2F0ZWQgY2xhc3MgKG9yIC0xIGlmIG5vdCBmb3VuZClcbiAqL1xuZnVuY3Rpb24gY2xhc3NJbmRleE9mKGNsYXNzTmFtZSwgY2xhc3NUb1NlYXJjaCwgc3RhcnRpbmdJbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnROb3RFcXVhbChjbGFzc1RvU2VhcmNoLCAnJywgJ2NhbiBub3QgbG9vayBmb3IgXCJcIiBzdHJpbmcuJyk7XG4gICAgbGV0IGVuZCA9IGNsYXNzTmFtZS5sZW5ndGg7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY29uc3QgZm91bmRJbmRleCA9IGNsYXNzTmFtZS5pbmRleE9mKGNsYXNzVG9TZWFyY2gsIHN0YXJ0aW5nSW5kZXgpO1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gZm91bmRJbmRleDtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IDAgfHwgY2xhc3NOYW1lLmNoYXJDb2RlQXQoZm91bmRJbmRleCAtIDEpIDw9IDMyIC8qIFNQQUNFICovKSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCBpdCBoYXMgbGVhZGluZyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBjbGFzc1RvU2VhcmNoLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChmb3VuZEluZGV4ICsgbGVuZ3RoID09PSBlbmQgfHxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWUuY2hhckNvZGVBdChmb3VuZEluZGV4ICsgbGVuZ3RoKSA8PSAzMiAvKiBTUEFDRSAqLykge1xuICAgICAgICAgICAgICAgIC8vIEVuc3VyZSB0aGF0IGl0IGhhcyB0cmFpbGluZyB3aGl0ZXNwYWNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmFsc2UgcG9zaXRpdmUsIGtlZXAgc2VhcmNoaW5nIGZyb20gd2hlcmUgd2UgbGVmdCBvZmYuXG4gICAgICAgIHN0YXJ0aW5nSW5kZXggPSBmb3VuZEluZGV4ICsgMTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgdW51c2VkVmFsdWVUb1BsYWNhdGVBamQkMSA9IHVudXNlZFZhbHVlRXhwb3J0VG9QbGFjYXRlQWpkJDQgKyB1bnVzZWRWYWx1ZUV4cG9ydFRvUGxhY2F0ZUFqZCQzO1xuY29uc3QgTkdfVEVNUExBVEVfU0VMRUNUT1IgPSAnbmctdGVtcGxhdGUnO1xuLyoqXG4gKiBTZWFyY2ggdGhlIGBUQXR0cmlidXRlc2AgdG8gc2VlIGlmIGl0IGNvbnRhaW5zIGBjc3NDbGFzc1RvTWF0Y2hgIChjYXNlIGluc2Vuc2l0aXZlKVxuICpcbiAqIEBwYXJhbSBhdHRycyBgVEF0dHJpYnV0ZXNgIHRvIHNlYXJjaCB0aHJvdWdoLlxuICogQHBhcmFtIGNzc0NsYXNzVG9NYXRjaCBjbGFzcyB0byBtYXRjaCAobG93ZXJjYXNlKVxuICogQHBhcmFtIGlzUHJvamVjdGlvbk1vZGUgV2hldGhlciBvciBub3QgY2xhc3MgbWF0Y2hpbmcgc2hvdWxkIGxvb2sgaW50byB0aGUgYXR0cmlidXRlIGBjbGFzc2AgaW5cbiAqICAgIGFkZGl0aW9uIHRvIHRoZSBgQXR0cmlidXRlTWFya2VyLkNsYXNzZXNgLlxuICovXG5mdW5jdGlvbiBpc0Nzc0NsYXNzTWF0Y2hpbmcoYXR0cnMsIGNzc0NsYXNzVG9NYXRjaCwgaXNQcm9qZWN0aW9uTW9kZSkge1xuICAgIC8vIFRPRE8obWlza28pOiBUaGUgZmFjdCB0aGF0IHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8ga25vdyBhYm91dCBgaXNQcm9qZWN0aW9uTW9kZWAgc2VlbXMgc3VzcGVjdC5cbiAgICAvLyBJdCBpcyBzdHJhbmdlIHRvIG1lIHRoYXQgc29tZXRpbWVzIHRoZSBjbGFzcyBpbmZvcm1hdGlvbiBjb21lcyBpbiBmb3JtIG9mIGBjbGFzc2AgYXR0cmlidXRlXG4gICAgLy8gYW5kIHNvbWV0aW1lcyBpbiBmb3JtIG9mIGBBdHRyaWJ1dGVNYXJrZXIuQ2xhc3Nlc2AuIFNvbWUgaW52ZXN0aWdhdGlvbiBpcyBuZWVkZWQgdG8gZGV0ZXJtaW5lXG4gICAgLy8gaWYgdGhhdCBpcyB0aGUgcmlnaHQgYmVoYXZpb3IuXG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydEVxdWFsKGNzc0NsYXNzVG9NYXRjaCwgY3NzQ2xhc3NUb01hdGNoLnRvTG93ZXJDYXNlKCksICdDbGFzcyBuYW1lIGV4cGVjdGVkIHRvIGJlIGxvd2VyY2FzZS4nKTtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhdHRycy5sZW5ndGgpIHtcbiAgICAgICAgbGV0IGl0ZW0gPSBhdHRyc1tpKytdO1xuICAgICAgICBpZiAoaXNQcm9qZWN0aW9uTW9kZSAmJiBpdGVtID09PSAnY2xhc3MnKSB7XG4gICAgICAgICAgICBpdGVtID0gYXR0cnNbaV07XG4gICAgICAgICAgICBpZiAoY2xhc3NJbmRleE9mKGl0ZW0udG9Mb3dlckNhc2UoKSwgY3NzQ2xhc3NUb01hdGNoLCAwKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpdGVtID09PSAxIC8qIENsYXNzZXMgKi8pIHtcbiAgICAgICAgICAgIC8vIFdlIGZvdW5kIHRoZSBjbGFzc2VzIHNlY3Rpb24uIFN0YXJ0IHNlYXJjaGluZyBmb3IgdGhlIGNsYXNzLlxuICAgICAgICAgICAgd2hpbGUgKGkgPCBhdHRycy5sZW5ndGggJiYgdHlwZW9mIChpdGVtID0gYXR0cnNbaSsrXSkgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAvLyB3aGlsZSB3ZSBoYXZlIHN0cmluZ3NcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50b0xvd2VyQ2FzZSgpID09PSBjc3NDbGFzc1RvTWF0Y2gpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgdGhlIGB0Tm9kZWAgcmVwcmVzZW50cyBhbiBpbmxpbmUgdGVtcGxhdGUgKGUuZy4gYCpuZ0ZvcmApLlxuICpcbiAqIEBwYXJhbSB0Tm9kZSBjdXJyZW50IFROb2RlXG4gKi9cbmZ1bmN0aW9uIGlzSW5saW5lVGVtcGxhdGUodE5vZGUpIHtcbiAgICByZXR1cm4gdE5vZGUudHlwZSA9PT0gNCAvKiBDb250YWluZXIgKi8gJiYgdE5vZGUudmFsdWUgIT09IE5HX1RFTVBMQVRFX1NFTEVDVE9SO1xufVxuLyoqXG4gKiBGdW5jdGlvbiB0aGF0IGNoZWNrcyB3aGV0aGVyIGEgZ2l2ZW4gdE5vZGUgbWF0Y2hlcyB0YWctYmFzZWQgc2VsZWN0b3IgYW5kIGhhcyBhIHZhbGlkIHR5cGUuXG4gKlxuICogTWF0Y2hpbmcgY2FuIGJlIHBlcmZvcm1lZCBpbiAyIG1vZGVzOiBwcm9qZWN0aW9uIG1vZGUgKHdoZW4gd2UgcHJvamVjdCBub2RlcykgYW5kIHJlZ3VsYXJcbiAqIGRpcmVjdGl2ZSBtYXRjaGluZyBtb2RlOlxuICogLSBpbiB0aGUgXCJkaXJlY3RpdmUgbWF0Y2hpbmdcIiBtb2RlIHdlIGRvIF9ub3RfIHRha2UgVENvbnRhaW5lcidzIHRhZ05hbWUgaW50byBhY2NvdW50IGlmIGl0IGlzXG4gKiBkaWZmZXJlbnQgZnJvbSBOR19URU1QTEFURV9TRUxFQ1RPUiAodmFsdWUgZGlmZmVyZW50IGZyb20gTkdfVEVNUExBVEVfU0VMRUNUT1IgaW5kaWNhdGVzIHRoYXQgYVxuICogdGFnIG5hbWUgd2FzIGV4dHJhY3RlZCBmcm9tICogc3ludGF4IHNvIHdlIHdvdWxkIG1hdGNoIHRoZSBzYW1lIGRpcmVjdGl2ZSB0d2ljZSk7XG4gKiAtIGluIHRoZSBcInByb2plY3Rpb25cIiBtb2RlLCB3ZSB1c2UgYSB0YWcgbmFtZSBwb3RlbnRpYWxseSBleHRyYWN0ZWQgZnJvbSB0aGUgKiBzeW50YXggcHJvY2Vzc2luZ1xuICogKGFwcGxpY2FibGUgdG8gVE5vZGVUeXBlLkNvbnRhaW5lciBvbmx5KS5cbiAqL1xuZnVuY3Rpb24gaGFzVGFnQW5kVHlwZU1hdGNoKHROb2RlLCBjdXJyZW50U2VsZWN0b3IsIGlzUHJvamVjdGlvbk1vZGUpIHtcbiAgICBjb25zdCB0YWdOYW1lVG9Db21wYXJlID0gdE5vZGUudHlwZSA9PT0gNCAvKiBDb250YWluZXIgKi8gJiYgIWlzUHJvamVjdGlvbk1vZGUgPyBOR19URU1QTEFURV9TRUxFQ1RPUiA6IHROb2RlLnZhbHVlO1xuICAgIHJldHVybiBjdXJyZW50U2VsZWN0b3IgPT09IHRhZ05hbWVUb0NvbXBhcmU7XG59XG4vKipcbiAqIEEgdXRpbGl0eSBmdW5jdGlvbiB0byBtYXRjaCBhbiBJdnkgbm9kZSBzdGF0aWMgZGF0YSBhZ2FpbnN0IGEgc2ltcGxlIENTUyBzZWxlY3RvclxuICpcbiAqIEBwYXJhbSBub2RlIHN0YXRpYyBkYXRhIG9mIHRoZSBub2RlIHRvIG1hdGNoXG4gKiBAcGFyYW0gc2VsZWN0b3IgVGhlIHNlbGVjdG9yIHRvIHRyeSBtYXRjaGluZyBhZ2FpbnN0IHRoZSBub2RlLlxuICogQHBhcmFtIGlzUHJvamVjdGlvbk1vZGUgaWYgYHRydWVgIHdlIGFyZSBtYXRjaGluZyBmb3IgY29udGVudCBwcm9qZWN0aW9uLCBvdGhlcndpc2Ugd2UgYXJlIGRvaW5nXG4gKiBkaXJlY3RpdmUgbWF0Y2hpbmcuXG4gKiBAcmV0dXJucyB0cnVlIGlmIG5vZGUgbWF0Y2hlcyB0aGUgc2VsZWN0b3IuXG4gKi9cbmZ1bmN0aW9uIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3IodE5vZGUsIHNlbGVjdG9yLCBpc1Byb2plY3Rpb25Nb2RlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQoc2VsZWN0b3JbMF0sICdTZWxlY3RvciBzaG91bGQgaGF2ZSBhIHRhZyBuYW1lJyk7XG4gICAgbGV0IG1vZGUgPSA0IC8qIEVMRU1FTlQgKi87XG4gICAgY29uc3Qgbm9kZUF0dHJzID0gdE5vZGUuYXR0cnMgfHwgW107XG4gICAgLy8gRmluZCB0aGUgaW5kZXggb2YgZmlyc3QgYXR0cmlidXRlIHRoYXQgaGFzIG5vIHZhbHVlLCBvbmx5IGEgbmFtZS5cbiAgICBjb25zdCBuYW1lT25seU1hcmtlcklkeCA9IGdldE5hbWVPbmx5TWFya2VySW5kZXgobm9kZUF0dHJzKTtcbiAgICAvLyBXaGVuIHByb2Nlc3NpbmcgXCI6bm90XCIgc2VsZWN0b3JzLCB3ZSBza2lwIHRvIHRoZSBuZXh0IFwiOm5vdFwiIGlmIHRoZVxuICAgIC8vIGN1cnJlbnQgb25lIGRvZXNuJ3QgbWF0Y2hcbiAgICBsZXQgc2tpcFRvTmV4dFNlbGVjdG9yID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Rvci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gc2VsZWN0b3JbaV07XG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGZpbmlzaCBwcm9jZXNzaW5nIGEgOm5vdCBzZWxlY3RvciBhbmQgaXQgaGFzbid0IGZhaWxlZCwgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICBpZiAoIXNraXBUb05leHRTZWxlY3RvciAmJiAhaXNQb3NpdGl2ZShtb2RlKSAmJiAhaXNQb3NpdGl2ZShjdXJyZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBza2lwcGluZyB0byB0aGUgbmV4dCA6bm90KCkgYW5kIHRoaXMgbW9kZSBmbGFnIGlzIHBvc2l0aXZlLFxuICAgICAgICAgICAgLy8gaXQncyBhIHBhcnQgb2YgdGhlIGN1cnJlbnQgOm5vdCgpIHNlbGVjdG9yLCBhbmQgd2Ugc2hvdWxkIGtlZXAgc2tpcHBpbmdcbiAgICAgICAgICAgIGlmIChza2lwVG9OZXh0U2VsZWN0b3IgJiYgaXNQb3NpdGl2ZShjdXJyZW50KSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHNraXBUb05leHRTZWxlY3RvciA9IGZhbHNlO1xuICAgICAgICAgICAgbW9kZSA9IGN1cnJlbnQgfCAobW9kZSAmIDEgLyogTk9UICovKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChza2lwVG9OZXh0U2VsZWN0b3IpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKG1vZGUgJiA0IC8qIEVMRU1FTlQgKi8pIHtcbiAgICAgICAgICAgIG1vZGUgPSAyIC8qIEFUVFJJQlVURSAqLyB8IG1vZGUgJiAxIC8qIE5PVCAqLztcbiAgICAgICAgICAgIGlmIChjdXJyZW50ICE9PSAnJyAmJiAhaGFzVGFnQW5kVHlwZU1hdGNoKHROb2RlLCBjdXJyZW50LCBpc1Byb2plY3Rpb25Nb2RlKSB8fFxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPT09ICcnICYmIHNlbGVjdG9yLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1Bvc2l0aXZlKG1vZGUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2tpcFRvTmV4dFNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdG9yQXR0clZhbHVlID0gbW9kZSAmIDggLyogQ0xBU1MgKi8gPyBjdXJyZW50IDogc2VsZWN0b3JbKytpXTtcbiAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgbWF0Y2hpbmcgYWdhaW5zdCBjbGFzc2VzIHdoZW4gYSB0Tm9kZSBoYXMgYmVlbiBpbnN0YW50aWF0ZWQgd2l0aFxuICAgICAgICAgICAgLy8gY2xhc3MgYW5kIHN0eWxlIHZhbHVlcyBhcyBzZXBhcmF0ZSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuIFsndGl0bGUnLCBDTEFTUywgJ2ZvbyddKVxuICAgICAgICAgICAgaWYgKChtb2RlICYgOCAvKiBDTEFTUyAqLykgJiYgdE5vZGUuYXR0cnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzQ3NzQ2xhc3NNYXRjaGluZyh0Tm9kZS5hdHRycywgc2VsZWN0b3JBdHRyVmFsdWUsIGlzUHJvamVjdGlvbk1vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1Bvc2l0aXZlKG1vZGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBza2lwVG9OZXh0U2VsZWN0b3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gKG1vZGUgJiA4IC8qIENMQVNTICovKSA/ICdjbGFzcycgOiBjdXJyZW50O1xuICAgICAgICAgICAgY29uc3QgYXR0ckluZGV4SW5Ob2RlID0gZmluZEF0dHJJbmRleEluTm9kZShhdHRyTmFtZSwgbm9kZUF0dHJzLCBpc0lubGluZVRlbXBsYXRlKHROb2RlKSwgaXNQcm9qZWN0aW9uTW9kZSk7XG4gICAgICAgICAgICBpZiAoYXR0ckluZGV4SW5Ob2RlID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGlmIChpc1Bvc2l0aXZlKG1vZGUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgc2tpcFRvTmV4dFNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3RvckF0dHJWYWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBsZXQgbm9kZUF0dHJWYWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAoYXR0ckluZGV4SW5Ob2RlID4gbmFtZU9ubHlNYXJrZXJJZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUF0dHJWYWx1ZSA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnROb3RFcXVhbChub2RlQXR0cnNbYXR0ckluZGV4SW5Ob2RlXSwgMCAvKiBOYW1lc3BhY2VVUkkgKi8sICdXZSBkbyBub3QgbWF0Y2ggZGlyZWN0aXZlcyBvbiBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gd2UgbG93ZXJjYXNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgdG8gYmUgYWJsZSB0byBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3RvcnMgd2l0aG91dCBjYXNlLXNlbnNpdGl2aXR5XG4gICAgICAgICAgICAgICAgICAgIC8vIChzZWxlY3RvcnMgYXJlIGFscmVhZHkgaW4gbG93ZXJjYXNlIHdoZW4gZ2VuZXJhdGVkKVxuICAgICAgICAgICAgICAgICAgICBub2RlQXR0clZhbHVlID0gbm9kZUF0dHJzW2F0dHJJbmRleEluTm9kZSArIDFdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBhcmVBZ2FpbnN0Q2xhc3NOYW1lID0gbW9kZSAmIDggLyogQ0xBU1MgKi8gPyBub2RlQXR0clZhbHVlIDogbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZUFnYWluc3RDbGFzc05hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NJbmRleE9mKGNvbXBhcmVBZ2FpbnN0Q2xhc3NOYW1lLCBzZWxlY3RvckF0dHJWYWx1ZSwgMCkgIT09IC0xIHx8XG4gICAgICAgICAgICAgICAgICAgIG1vZGUgJiAyIC8qIEFUVFJJQlVURSAqLyAmJiBzZWxlY3RvckF0dHJWYWx1ZSAhPT0gbm9kZUF0dHJWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNQb3NpdGl2ZShtb2RlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgc2tpcFRvTmV4dFNlbGVjdG9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlzUG9zaXRpdmUobW9kZSkgfHwgc2tpcFRvTmV4dFNlbGVjdG9yO1xufVxuZnVuY3Rpb24gaXNQb3NpdGl2ZShtb2RlKSB7XG4gICAgcmV0dXJuIChtb2RlICYgMSAvKiBOT1QgKi8pID09PSAwO1xufVxuLyoqXG4gKiBFeGFtaW5lcyB0aGUgYXR0cmlidXRlJ3MgZGVmaW5pdGlvbiBhcnJheSBmb3IgYSBub2RlIHRvIGZpbmQgdGhlIGluZGV4IG9mIHRoZVxuICogYXR0cmlidXRlIHRoYXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gYG5hbWVgLlxuICpcbiAqIE5PVEU6IFRoaXMgd2lsbCBub3QgbWF0Y2ggbmFtZXNwYWNlZCBhdHRyaWJ1dGVzLlxuICpcbiAqIEF0dHJpYnV0ZSBtYXRjaGluZyBkZXBlbmRzIHVwb24gYGlzSW5saW5lVGVtcGxhdGVgIGFuZCBgaXNQcm9qZWN0aW9uTW9kZWAuXG4gKiBUaGUgZm9sbG93aW5nIHRhYmxlIHN1bW1hcml6ZXMgd2hpY2ggdHlwZXMgb2YgYXR0cmlidXRlcyB3ZSBhdHRlbXB0IHRvIG1hdGNoOlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBNb2RlcyAgICAgICAgICAgICAgICAgICB8IE5vcm1hbCBBdHRyaWJ1dGVzIHwgQmluZGluZ3MgQXR0cmlidXRlcyB8IFRlbXBsYXRlIEF0dHJpYnV0ZXMgfCBJMThuXG4gKiBBdHRyaWJ1dGVzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5saW5lICsgUHJvamVjdGlvbiAgICAgfCBZRVMgICAgICAgICAgICAgICB8IFlFUyAgICAgICAgICAgICAgICAgfCBOTyAgICAgICAgICAgICAgICAgIHwgWUVTXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogSW5saW5lICsgRGlyZWN0aXZlICAgICAgfCBOTyAgICAgICAgICAgICAgICB8IE5PICAgICAgICAgICAgICAgICAgfCBZRVMgICAgICAgICAgICAgICAgIHwgTk9cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBOb24taW5saW5lICsgUHJvamVjdGlvbiB8IFlFUyAgICAgICAgICAgICAgIHwgWUVTICAgICAgICAgICAgICAgICB8IE5PICAgICAgICAgICAgICAgICAgfCBZRVNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBOb24taW5saW5lICsgRGlyZWN0aXZlICB8IFlFUyAgICAgICAgICAgICAgIHwgWUVTICAgICAgICAgICAgICAgICB8IE5PICAgICAgICAgICAgICAgICAgfCBZRVNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKlxuICogQHBhcmFtIG5hbWUgdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBmaW5kXG4gKiBAcGFyYW0gYXR0cnMgdGhlIGF0dHJpYnV0ZSBhcnJheSB0byBleGFtaW5lXG4gKiBAcGFyYW0gaXNJbmxpbmVUZW1wbGF0ZSB0cnVlIGlmIHRoZSBub2RlIGJlaW5nIG1hdGNoZWQgaXMgYW4gaW5saW5lIHRlbXBsYXRlIChlLmcuIGAqbmdGb3JgKVxuICogcmF0aGVyIHRoYW4gYSBtYW51YWxseSBleHBhbmRlZCB0ZW1wbGF0ZSBub2RlIChlLmcgYDxuZy10ZW1wbGF0ZT5gKS5cbiAqIEBwYXJhbSBpc1Byb2plY3Rpb25Nb2RlIHRydWUgaWYgd2UgYXJlIG1hdGNoaW5nIGFnYWluc3QgY29udGVudCBwcm9qZWN0aW9uIG90aGVyd2lzZSB3ZSBhcmVcbiAqIG1hdGNoaW5nIGFnYWluc3QgZGlyZWN0aXZlcy5cbiAqL1xuZnVuY3Rpb24gZmluZEF0dHJJbmRleEluTm9kZShuYW1lLCBhdHRycywgaXNJbmxpbmVUZW1wbGF0ZSwgaXNQcm9qZWN0aW9uTW9kZSkge1xuICAgIGlmIChhdHRycyA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAoaXNQcm9qZWN0aW9uTW9kZSB8fCAhaXNJbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgICBsZXQgYmluZGluZ3NNb2RlID0gZmFsc2U7XG4gICAgICAgIHdoaWxlIChpIDwgYXR0cnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBtYXliZUF0dHJOYW1lID0gYXR0cnNbaV07XG4gICAgICAgICAgICBpZiAobWF5YmVBdHRyTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWF5YmVBdHRyTmFtZSA9PT0gMyAvKiBCaW5kaW5ncyAqLyB8fCBtYXliZUF0dHJOYW1lID09PSA2IC8qIEkxOG4gKi8pIHtcbiAgICAgICAgICAgICAgICBiaW5kaW5nc01vZGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWF5YmVBdHRyTmFtZSA9PT0gMSAvKiBDbGFzc2VzICovIHx8IG1heWJlQXR0ck5hbWUgPT09IDIgLyogU3R5bGVzICovKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlID0gYXR0cnNbKytpXTtcbiAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQgc2tpcCBjbGFzc2VzIGhlcmUgYmVjYXVzZSB3ZSBoYXZlIGEgc2VwYXJhdGUgbWVjaGFuaXNtIGZvclxuICAgICAgICAgICAgICAgIC8vIG1hdGNoaW5nIGNsYXNzZXMgaW4gcHJvamVjdGlvbiBtb2RlLlxuICAgICAgICAgICAgICAgIHdoaWxlICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXR0cnNbKytpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtYXliZUF0dHJOYW1lID09PSA0IC8qIFRlbXBsYXRlICovKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZG8gbm90IGNhcmUgYWJvdXQgVGVtcGxhdGUgYXR0cmlidXRlcyBpbiB0aGlzIHNjZW5hcmlvLlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobWF5YmVBdHRyTmFtZSA9PT0gMCAvKiBOYW1lc3BhY2VVUkkgKi8pIHtcbiAgICAgICAgICAgICAgICAvLyBTa2lwIHRoZSB3aG9sZSBuYW1lc3BhY2VkIGF0dHJpYnV0ZSBhbmQgdmFsdWUuIFRoaXMgaXMgYnkgZGVzaWduLlxuICAgICAgICAgICAgICAgIGkgKz0gNDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEluIGJpbmRpbmcgbW9kZSB0aGVyZSBhcmUgb25seSBuYW1lcywgcmF0aGVyIHRoYW4gbmFtZS12YWx1ZSBwYWlycy5cbiAgICAgICAgICAgIGkgKz0gYmluZGluZ3NNb2RlID8gMSA6IDI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgZGlkIG5vdCBtYXRjaCB0aGUgYXR0cmlidXRlXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXRjaFRlbXBsYXRlQXR0cmlidXRlKGF0dHJzLCBuYW1lKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpc05vZGVNYXRjaGluZ1NlbGVjdG9yTGlzdCh0Tm9kZSwgc2VsZWN0b3IsIGlzUHJvamVjdGlvbk1vZGUgPSBmYWxzZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0b3IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzTm9kZU1hdGNoaW5nU2VsZWN0b3IodE5vZGUsIHNlbGVjdG9yW2ldLCBpc1Byb2plY3Rpb25Nb2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZ2V0UHJvamVjdEFzQXR0clZhbHVlKHROb2RlKSB7XG4gICAgY29uc3Qgbm9kZUF0dHJzID0gdE5vZGUuYXR0cnM7XG4gICAgaWYgKG5vZGVBdHRycyAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IG5nUHJvamVjdEFzQXR0cklkeCA9IG5vZGVBdHRycy5pbmRleE9mKDUgLyogUHJvamVjdEFzICovKTtcbiAgICAgICAgLy8gb25seSBjaGVjayBmb3IgbmdQcm9qZWN0QXMgaW4gYXR0cmlidXRlIG5hbWVzLCBkb24ndCBhY2NpZGVudGFsbHkgbWF0Y2ggYXR0cmlidXRlJ3MgdmFsdWVcbiAgICAgICAgLy8gKGF0dHJpYnV0ZSBuYW1lcyBhcmUgc3RvcmVkIGF0IGV2ZW4gaW5kZXhlcylcbiAgICAgICAgaWYgKChuZ1Byb2plY3RBc0F0dHJJZHggJiAxKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGVBdHRyc1tuZ1Byb2plY3RBc0F0dHJJZHggKyAxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldE5hbWVPbmx5TWFya2VySW5kZXgobm9kZUF0dHJzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlQXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgbm9kZUF0dHIgPSBub2RlQXR0cnNbaV07XG4gICAgICAgIGlmIChpc05hbWVPbmx5QXR0cmlidXRlTWFya2VyKG5vZGVBdHRyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVBdHRycy5sZW5ndGg7XG59XG5mdW5jdGlvbiBtYXRjaFRlbXBsYXRlQXR0cmlidXRlKGF0dHJzLCBuYW1lKSB7XG4gICAgbGV0IGkgPSBhdHRycy5pbmRleE9mKDQgLyogVGVtcGxhdGUgKi8pO1xuICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgaSsrO1xuICAgICAgICB3aGlsZSAoaSA8IGF0dHJzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgYXR0ciA9IGF0dHJzW2ldO1xuICAgICAgICAgICAgLy8gUmV0dXJuIGluIGNhc2Ugd2UgY2hlY2tlZCBhbGwgdGVtcGxhdGUgYXR0cnMgYW5kIGFyZSBzd2l0Y2hpbmcgdG8gdGhlIG5leHQgc2VjdGlvbiBpbiB0aGVcbiAgICAgICAgICAgIC8vIGF0dHJzIGFycmF5ICh0aGF0IHN0YXJ0cyB3aXRoIGEgbnVtYmVyIHRoYXQgcmVwcmVzZW50cyBhbiBhdHRyaWJ1dGUgbWFya2VyKS5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXR0ciA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKGF0dHIgPT09IG5hbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciBhIHNlbGVjdG9yIGlzIGluc2lkZSBhIENzc1NlbGVjdG9yTGlzdFxuICogQHBhcmFtIHNlbGVjdG9yIFNlbGVjdG9yIHRvIGJlIGNoZWNrZWQuXG4gKiBAcGFyYW0gbGlzdCBMaXN0IGluIHdoaWNoIHRvIGxvb2sgZm9yIHRoZSBzZWxlY3Rvci5cbiAqL1xuZnVuY3Rpb24gaXNTZWxlY3RvckluU2VsZWN0b3JMaXN0KHNlbGVjdG9yLCBsaXN0KSB7XG4gICAgc2VsZWN0b3JMaXN0TG9vcDogZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZWxlY3RvckluTGlzdCA9IGxpc3RbaV07XG4gICAgICAgIGlmIChzZWxlY3Rvci5sZW5ndGggIT09IGN1cnJlbnRTZWxlY3RvckluTGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2VsZWN0b3IubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChzZWxlY3RvcltqXSAhPT0gY3VycmVudFNlbGVjdG9ySW5MaXN0W2pdKSB7XG4gICAgICAgICAgICAgICAgY29udGludWUgc2VsZWN0b3JMaXN0TG9vcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gbWF5YmVXcmFwSW5Ob3RTZWxlY3Rvcihpc05lZ2F0aXZlTW9kZSwgY2h1bmspIHtcbiAgICByZXR1cm4gaXNOZWdhdGl2ZU1vZGUgPyAnOm5vdCgnICsgY2h1bmsudHJpbSgpICsgJyknIDogY2h1bms7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlDU1NTZWxlY3RvcihzZWxlY3Rvcikge1xuICAgIGxldCByZXN1bHQgPSBzZWxlY3RvclswXTtcbiAgICBsZXQgaSA9IDE7XG4gICAgbGV0IG1vZGUgPSAyIC8qIEFUVFJJQlVURSAqLztcbiAgICBsZXQgY3VycmVudENodW5rID0gJyc7XG4gICAgbGV0IGlzTmVnYXRpdmVNb2RlID0gZmFsc2U7XG4gICAgd2hpbGUgKGkgPCBzZWxlY3Rvci5sZW5ndGgpIHtcbiAgICAgICAgbGV0IHZhbHVlT3JNYXJrZXIgPSBzZWxlY3RvcltpXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZU9yTWFya2VyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKG1vZGUgJiAyIC8qIEFUVFJJQlVURSAqLykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJWYWx1ZSA9IHNlbGVjdG9yWysraV07XG4gICAgICAgICAgICAgICAgY3VycmVudENodW5rICs9XG4gICAgICAgICAgICAgICAgICAgICdbJyArIHZhbHVlT3JNYXJrZXIgKyAoYXR0clZhbHVlLmxlbmd0aCA+IDAgPyAnPVwiJyArIGF0dHJWYWx1ZSArICdcIicgOiAnJykgKyAnXSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtb2RlICYgOCAvKiBDTEFTUyAqLykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDaHVuayArPSAnLicgKyB2YWx1ZU9yTWFya2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobW9kZSAmIDQgLyogRUxFTUVOVCAqLykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRDaHVuayArPSAnICcgKyB2YWx1ZU9yTWFya2VyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEFwcGVuZCBjdXJyZW50IGNodW5rIHRvIHRoZSBmaW5hbCByZXN1bHQgaW4gY2FzZSB3ZSBjb21lIGFjcm9zcyBTZWxlY3RvckZsYWcsIHdoaWNoXG4gICAgICAgICAgICAvLyBpbmRpY2F0ZXMgdGhhdCB0aGUgcHJldmlvdXMgc2VjdGlvbiBvZiBhIHNlbGVjdG9yIGlzIG92ZXIuIFdlIG5lZWQgdG8gYWNjdW11bGF0ZSBjb250ZW50XG4gICAgICAgICAgICAvLyBiZXR3ZWVuIGZsYWdzIHRvIG1ha2Ugc3VyZSB3ZSB3cmFwIHRoZSBjaHVuayBsYXRlciBpbiA6bm90KCkgc2VsZWN0b3IgaWYgbmVlZGVkLCBlLmcuXG4gICAgICAgICAgICAvLyBgYGBcbiAgICAgICAgICAgIC8vICBbJycsIEZsYWdzLkNMQVNTLCAnLmNsYXNzQScsIEZsYWdzLkNMQVNTIHwgRmxhZ3MuTk9ULCAnLmNsYXNzQicsICcuY2xhc3NDJ11cbiAgICAgICAgICAgIC8vIGBgYFxuICAgICAgICAgICAgLy8gc2hvdWxkIGJlIHRyYW5zZm9ybWVkIHRvIGAuY2xhc3NBIDpub3QoLmNsYXNzQiAuY2xhc3NDKWAuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gTm90ZTogZm9yIG5lZ2F0aXZlIHNlbGVjdG9yIHBhcnQsIHdlIGFjY3VtdWxhdGUgY29udGVudCBiZXR3ZWVuIGZsYWdzIHVudGlsIHdlIGZpbmQgdGhlXG4gICAgICAgICAgICAvLyBuZXh0IG5lZ2F0aXZlIGZsYWcuIFRoaXMgaXMgbmVlZGVkIHRvIHN1cHBvcnQgYSBjYXNlIHdoZXJlIGA6bm90KClgIHJ1bGUgY29udGFpbnMgbW9yZSB0aGFuXG4gICAgICAgICAgICAvLyBvbmUgY2h1bmssIGUuZy4gdGhlIGZvbGxvd2luZyBzZWxlY3RvcjpcbiAgICAgICAgICAgIC8vIGBgYFxuICAgICAgICAgICAgLy8gIFsnJywgRmxhZ3MuRUxFTUVOVCB8IEZsYWdzLk5PVCwgJ3AnLCBGbGFncy5DTEFTUywgJ2ZvbycsIEZsYWdzLkNMQVNTIHwgRmxhZ3MuTk9ULCAnYmFyJ11cbiAgICAgICAgICAgIC8vIGBgYFxuICAgICAgICAgICAgLy8gc2hvdWxkIGJlIHN0cmluZ2lmaWVkIHRvIGA6bm90KHAuZm9vKSA6bm90KC5iYXIpYFxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIGlmIChjdXJyZW50Q2h1bmsgIT09ICcnICYmICFpc1Bvc2l0aXZlKHZhbHVlT3JNYXJrZXIpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IG1heWJlV3JhcEluTm90U2VsZWN0b3IoaXNOZWdhdGl2ZU1vZGUsIGN1cnJlbnRDaHVuayk7XG4gICAgICAgICAgICAgICAgY3VycmVudENodW5rID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtb2RlID0gdmFsdWVPck1hcmtlcjtcbiAgICAgICAgICAgIC8vIEFjY29yZGluZyB0byBDc3NTZWxlY3RvciBzcGVjLCBvbmNlIHdlIGNvbWUgYWNyb3NzIGBTZWxlY3RvckZsYWdzLk5PVGAgZmxhZywgdGhlIG5lZ2F0aXZlXG4gICAgICAgICAgICAvLyBtb2RlIGlzIG1haW50YWluZWQgZm9yIHJlbWFpbmluZyBjaHVua3Mgb2YgYSBzZWxlY3Rvci5cbiAgICAgICAgICAgIGlzTmVnYXRpdmVNb2RlID0gaXNOZWdhdGl2ZU1vZGUgfHwgIWlzUG9zaXRpdmUobW9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICBpZiAoY3VycmVudENodW5rICE9PSAnJykge1xuICAgICAgICByZXN1bHQgKz0gbWF5YmVXcmFwSW5Ob3RTZWxlY3Rvcihpc05lZ2F0aXZlTW9kZSwgY3VycmVudENodW5rKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogR2VuZXJhdGVzIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBDU1Mgc2VsZWN0b3IgaW4gcGFyc2VkIGZvcm0uXG4gKlxuICogQ29tcG9uZW50RGVmIGFuZCBEaXJlY3RpdmVEZWYgYXJlIGdlbmVyYXRlZCB3aXRoIHRoZSBzZWxlY3RvciBpbiBwYXJzZWQgZm9ybSB0byBhdm9pZCBkb2luZ1xuICogYWRkaXRpb25hbCBwYXJzaW5nIGF0IHJ1bnRpbWUgKGZvciBleGFtcGxlLCBmb3IgZGlyZWN0aXZlIG1hdGNoaW5nKS4gSG93ZXZlciBpbiBzb21lIGNhc2VzIChmb3JcbiAqIGV4YW1wbGUsIHdoaWxlIGJvb3RzdHJhcHBpbmcgYSBjb21wb25lbnQpLCBhIHN0cmluZyB2ZXJzaW9uIG9mIHRoZSBzZWxlY3RvciBpcyByZXF1aXJlZCB0byBxdWVyeVxuICogZm9yIHRoZSBob3N0IGVsZW1lbnQgb24gdGhlIHBhZ2UuIFRoaXMgZnVuY3Rpb24gdGFrZXMgdGhlIHBhcnNlZCBmb3JtIG9mIGEgc2VsZWN0b3IgYW5kIHJldHVybnNcbiAqIGl0cyBzdHJpbmcgcmVwcmVzZW50YXRpb24uXG4gKlxuICogQHBhcmFtIHNlbGVjdG9yTGlzdCBzZWxlY3RvciBpbiBwYXJzZWQgZm9ybVxuICogQHJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgZ2l2ZW4gc2VsZWN0b3JcbiAqL1xuZnVuY3Rpb24gc3RyaW5naWZ5Q1NTU2VsZWN0b3JMaXN0KHNlbGVjdG9yTGlzdCkge1xuICAgIHJldHVybiBzZWxlY3Rvckxpc3QubWFwKHN0cmluZ2lmeUNTU1NlbGVjdG9yKS5qb2luKCcsJyk7XG59XG4vKipcbiAqIEV4dHJhY3RzIGF0dHJpYnV0ZXMgYW5kIGNsYXNzZXMgaW5mb3JtYXRpb24gZnJvbSBhIGdpdmVuIENTUyBzZWxlY3Rvci5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgd2hpbGUgY3JlYXRpbmcgYSBjb21wb25lbnQgZHluYW1pY2FsbHkuIEluIHRoaXMgY2FzZSwgdGhlIGhvc3QgZWxlbWVudFxuICogKHRoYXQgaXMgY3JlYXRlZCBkeW5hbWljYWxseSkgc2hvdWxkIGNvbnRhaW4gYXR0cmlidXRlcyBhbmQgY2xhc3NlcyBzcGVjaWZpZWQgaW4gY29tcG9uZW50J3MgQ1NTXG4gKiBzZWxlY3Rvci5cbiAqXG4gKiBAcGFyYW0gc2VsZWN0b3IgQ1NTIHNlbGVjdG9yIGluIHBhcnNlZCBmb3JtIChpbiBhIGZvcm0gb2YgYXJyYXkpXG4gKiBAcmV0dXJucyBvYmplY3Qgd2l0aCBgYXR0cnNgIGFuZCBgY2xhc3Nlc2AgZmllbGRzIHRoYXQgY29udGFpbiBleHRyYWN0ZWQgaW5mb3JtYXRpb25cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdEF0dHJzQW5kQ2xhc3Nlc0Zyb21TZWxlY3RvcihzZWxlY3Rvcikge1xuICAgIGNvbnN0IGF0dHJzID0gW107XG4gICAgY29uc3QgY2xhc3NlcyA9IFtdO1xuICAgIGxldCBpID0gMTtcbiAgICBsZXQgbW9kZSA9IDIgLyogQVRUUklCVVRFICovO1xuICAgIHdoaWxlIChpIDwgc2VsZWN0b3IubGVuZ3RoKSB7XG4gICAgICAgIGxldCB2YWx1ZU9yTWFya2VyID0gc2VsZWN0b3JbaV07XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWVPck1hcmtlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSAyIC8qIEFUVFJJQlVURSAqLykge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZU9yTWFya2VyICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICBhdHRycy5wdXNoKHZhbHVlT3JNYXJrZXIsIHNlbGVjdG9yWysraV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1vZGUgPT09IDggLyogQ0xBU1MgKi8pIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2godmFsdWVPck1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBBY2NvcmRpbmcgdG8gQ3NzU2VsZWN0b3Igc3BlYywgb25jZSB3ZSBjb21lIGFjcm9zcyBgU2VsZWN0b3JGbGFncy5OT1RgIGZsYWcsIHRoZSBuZWdhdGl2ZVxuICAgICAgICAgICAgLy8gbW9kZSBpcyBtYWludGFpbmVkIGZvciByZW1haW5pbmcgY2h1bmtzIG9mIGEgc2VsZWN0b3IuIFNpbmNlIGF0dHJpYnV0ZXMgYW5kIGNsYXNzZXMgYXJlXG4gICAgICAgICAgICAvLyBleHRyYWN0ZWQgb25seSBmb3IgXCJwb3NpdGl2ZVwiIHBhcnQgb2YgdGhlIHNlbGVjdG9yLCB3ZSBjYW4gc3RvcCBoZXJlLlxuICAgICAgICAgICAgaWYgKCFpc1Bvc2l0aXZlKG1vZGUpKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgbW9kZSA9IHZhbHVlT3JNYXJrZXI7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4geyBhdHRycywgY2xhc3NlcyB9O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKiBBIHNwZWNpYWwgdmFsdWUgd2hpY2ggZGVzaWduYXRlcyB0aGF0IGEgdmFsdWUgaGFzIG5vdCBjaGFuZ2VkLiAqL1xuY29uc3QgTk9fQ0hBTkdFID0gKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkgPyB7IF9fYnJhbmRfXzogJ05PX0NIQU5HRScgfSA6IHt9O1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQWR2YW5jZXMgdG8gYW4gZWxlbWVudCBmb3IgbGF0ZXIgYmluZGluZyBpbnN0cnVjdGlvbnMuXG4gKlxuICogVXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGluc3RydWN0aW9ucyBsaWtlIHtAbGluayBwcm9wZXJ0eX0gdG8gYWN0IG9uIGVsZW1lbnRzIHdpdGggc3BlY2lmaWVkXG4gKiBpbmRpY2VzLCBmb3IgZXhhbXBsZSB0aG9zZSBjcmVhdGVkIHdpdGgge0BsaW5rIGVsZW1lbnR9IG9yIHtAbGluayBlbGVtZW50U3RhcnR9LlxuICpcbiAqIGBgYHRzXG4gKiAocmY6IFJlbmRlckZsYWdzLCBjdHg6IGFueSkgPT4ge1xuICogICBpZiAocmYgJiAxKSB7XG4gKiAgICAgdGV4dCgwLCAnSGVsbG8nKTtcbiAqICAgICB0ZXh0KDEsICdHb29kYnllJylcbiAqICAgICBlbGVtZW50KDIsICdkaXYnKTtcbiAqICAgfVxuICogICBpZiAocmYgJiAyKSB7XG4gKiAgICAgYWR2YW5jZSgyKTsgLy8gQWR2YW5jZSB0d2ljZSB0byB0aGUgPGRpdj4uXG4gKiAgICAgcHJvcGVydHkoJ3RpdGxlJywgJ3Rlc3QnKTtcbiAqICAgfVxuICogIH1cbiAqIGBgYFxuICogQHBhcmFtIGRlbHRhIE51bWJlciBvZiBlbGVtZW50cyB0byBhZHZhbmNlIGZvcndhcmRzIGJ5LlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVhZHZhbmNlKGRlbHRhKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEdyZWF0ZXJUaGFuKGRlbHRhLCAwLCAnQ2FuIG9ubHkgYWR2YW5jZSBmb3J3YXJkJyk7XG4gICAgc2VsZWN0SW5kZXhJbnRlcm5hbChnZXRUVmlldygpLCBnZXRMVmlldygpLCBnZXRTZWxlY3RlZEluZGV4KCkgKyBkZWx0YSwgaXNJbkNoZWNrTm9DaGFuZ2VzTW9kZSgpKTtcbn1cbmZ1bmN0aW9uIHNlbGVjdEluZGV4SW50ZXJuYWwodFZpZXcsIGxWaWV3LCBpbmRleCwgY2hlY2tOb0NoYW5nZXNNb2RlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEluZGV4SW5EZWNsUmFuZ2UobFZpZXcsIGluZGV4KTtcbiAgICAvLyBGbHVzaCB0aGUgaW5pdGlhbCBob29rcyBmb3IgZWxlbWVudHMgaW4gdGhlIHZpZXcgdGhhdCBoYXZlIGJlZW4gYWRkZWQgdXAgdG8gdGhpcyBwb2ludC5cbiAgICAvLyBQRVJGIFdBUk5JTkc6IGRvIE5PVCBleHRyYWN0IHRoaXMgdG8gYSBzZXBhcmF0ZSBmdW5jdGlvbiB3aXRob3V0IHJ1bm5pbmcgYmVuY2htYXJrc1xuICAgIGlmICghY2hlY2tOb0NoYW5nZXNNb2RlKSB7XG4gICAgICAgIGNvbnN0IGhvb2tzSW5pdFBoYXNlQ29tcGxldGVkID0gKGxWaWV3W0ZMQUdTXSAmIDMgLyogSW5pdFBoYXNlU3RhdGVNYXNrICovKSA9PT0gMyAvKiBJbml0UGhhc2VDb21wbGV0ZWQgKi87XG4gICAgICAgIGlmIChob29rc0luaXRQaGFzZUNvbXBsZXRlZCkge1xuICAgICAgICAgICAgY29uc3QgcHJlT3JkZXJDaGVja0hvb2tzID0gdFZpZXcucHJlT3JkZXJDaGVja0hvb2tzO1xuICAgICAgICAgICAgaWYgKHByZU9yZGVyQ2hlY2tIb29rcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGV4ZWN1dGVDaGVja0hvb2tzKGxWaWV3LCBwcmVPcmRlckNoZWNrSG9va3MsIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHByZU9yZGVySG9va3MgPSB0Vmlldy5wcmVPcmRlckhvb2tzO1xuICAgICAgICAgICAgaWYgKHByZU9yZGVySG9va3MgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBleGVjdXRlSW5pdEFuZENoZWNrSG9va3MobFZpZXcsIHByZU9yZGVySG9va3MsIDAgLyogT25Jbml0SG9va3NUb0JlUnVuICovLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgbXVzdCBzZXQgdGhlIHNlbGVjdGVkIGluZGV4ICphZnRlciogcnVubmluZyB0aGUgaG9va3MsIGJlY2F1c2UgaG9va3MgbWF5IGhhdmUgc2lkZS1lZmZlY3RzXG4gICAgLy8gdGhhdCBjYXVzZSBvdGhlciB0ZW1wbGF0ZSBmdW5jdGlvbnMgdG8gcnVuLCB0aHVzIHVwZGF0aW5nIHRoZSBzZWxlY3RlZCBpbmRleCwgd2hpY2ggaXMgZ2xvYmFsXG4gICAgLy8gc3RhdGUuIElmIHdlIHJ1biBgc2V0U2VsZWN0ZWRJbmRleGAgKmJlZm9yZSogd2UgcnVuIHRoZSBob29rcywgaW4gc29tZSBjYXNlcyB0aGUgc2VsZWN0ZWQgaW5kZXhcbiAgICAvLyB3aWxsIGJlIGFsdGVyZWQgYnkgdGhlIHRpbWUgd2UgbGVhdmUgdGhlIGDJtcm1YWR2YW5jZWAgaW5zdHJ1Y3Rpb24uXG4gICAgc2V0U2VsZWN0ZWRJbmRleChpbmRleCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUSElTIEZJTEUgQ09OVEFJTlMgQ09ERSBXSElDSCBTSE9VTEQgQkUgVFJFRSBTSEFLRU4gQU5EIE5FVkVSIENBTExFRCBGUk9NIFBST0RVQ1RJT04gQ09ERSEhIVxuICovXG4vKipcbiAqIENyZWF0ZXMgYW4gYEFycmF5YCBjb25zdHJ1Y3Rpb24gd2l0aCBhIGdpdmVuIG5hbWUuIFRoaXMgaXMgdXNlZnVsIHdoZW5cbiAqIGxvb2tpbmcgZm9yIG1lbW9yeSBjb25zdW1wdGlvbiB0byBzZWUgd2hhdCB0aW1lIG9mIGFycmF5IGl0IGlzLlxuICpcbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIGdpdmUgdG8gdGhlIGNvbnN0cnVjdG9yXG4gKiBAcmV0dXJucyBBIHN1YmNsYXNzIG9mIGBBcnJheWAgaWYgcG9zc2libGUuIFRoaXMgY2FuIG9ubHkgYmUgZG9uZSBpblxuICogICAgICAgICAgZW52aXJvbm1lbnRzIHdoaWNoIHN1cHBvcnQgYGNsYXNzYCBjb25zdHJ1Y3QuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5hbWVkQXJyYXlUeXBlKG5hbWUpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBiZSBjYWxsZWQgaW4gcHJvZCBtb2RlLCBzbyBsZXQncyB2ZXJpZnkgdGhhdCBpcyB0aGUgY2FzZS5cbiAgICBpZiAobmdEZXZNb2RlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJZiB0aGlzIGZ1bmN0aW9uIHdlcmUgY29tcHJvbWlzZWQgdGhlIGZvbGxvd2luZyBjb3VsZCBsZWFkIHRvIGFyYml0cmFyeVxuICAgICAgICAgICAgLy8gc2NyaXB0IGV4ZWN1dGlvbi4gV2UgYmxlc3MgaXQgd2l0aCBUcnVzdGVkIFR5cGVzIGFueXdheSBzaW5jZSB0aGlzXG4gICAgICAgICAgICAvLyBmdW5jdGlvbiBpcyBzdHJpcHBlZCBvdXQgb2YgcHJvZHVjdGlvbiBiaW5hcmllcy5cbiAgICAgICAgICAgIHJldHVybiAobmV3VHJ1c3RlZEZ1bmN0aW9uRm9yRGV2KCdBcnJheScsIGByZXR1cm4gY2xhc3MgJHtuYW1lfSBleHRlbmRzIEFycmF5e31gKSkoQXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBJZiBpdCBkb2VzIG5vdCB3b3JrIGp1c3QgZ2l2ZSB1cCBhbmQgZmFsbCBiYWNrIHRvIHJlZ3VsYXIgQXJyYXkuXG4gICAgICAgICAgICByZXR1cm4gQXJyYXk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTG9va3MgbGlrZSB3ZSBhcmUgaW4gXFwncHJvZCBtb2RlXFwnLCBidXQgd2UgYXJlIGNyZWF0aW5nIGEgbmFtZWQgQXJyYXkgdHlwZSwgd2hpY2ggaXMgd3JvbmchIENoZWNrIHlvdXIgY29kZScpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5mdW5jdGlvbiB0b1RTdHlsaW5nUmFuZ2UocHJldiwgbmV4dCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnROdW1iZXJJblJhbmdlKHByZXYsIDAsIDMyNzY3IC8qIFVOU0lHTkVEX01BU0sgKi8pO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnROdW1iZXJJblJhbmdlKG5leHQsIDAsIDMyNzY3IC8qIFVOU0lHTkVEX01BU0sgKi8pO1xuICAgIHJldHVybiAocHJldiA8PCAxNyAvKiBQUkVWX1NISUZUICovIHwgbmV4dCA8PCAyIC8qIE5FWFRfU0hJRlQgKi8pO1xufVxuZnVuY3Rpb24gZ2V0VFN0eWxpbmdSYW5nZVByZXYodFN0eWxpbmdSYW5nZSkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnROdW1iZXIodFN0eWxpbmdSYW5nZSwgJ2V4cGVjdGVkIG51bWJlcicpO1xuICAgIHJldHVybiAodFN0eWxpbmdSYW5nZSA+PiAxNyAvKiBQUkVWX1NISUZUICovKSAmIDMyNzY3IC8qIFVOU0lHTkVEX01BU0sgKi87XG59XG5mdW5jdGlvbiBnZXRUU3R5bGluZ1JhbmdlUHJldkR1cGxpY2F0ZSh0U3R5bGluZ1JhbmdlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE51bWJlcih0U3R5bGluZ1JhbmdlLCAnZXhwZWN0ZWQgbnVtYmVyJyk7XG4gICAgcmV0dXJuICh0U3R5bGluZ1JhbmdlICYgMiAvKiBQUkVWX0RVUExJQ0FURSAqLykgPT1cbiAgICAgICAgMiAvKiBQUkVWX0RVUExJQ0FURSAqLztcbn1cbmZ1bmN0aW9uIHNldFRTdHlsaW5nUmFuZ2VQcmV2KHRTdHlsaW5nUmFuZ2UsIHByZXZpb3VzKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE51bWJlcih0U3R5bGluZ1JhbmdlLCAnZXhwZWN0ZWQgbnVtYmVyJyk7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE51bWJlckluUmFuZ2UocHJldmlvdXMsIDAsIDMyNzY3IC8qIFVOU0lHTkVEX01BU0sgKi8pO1xuICAgIHJldHVybiAoKHRTdHlsaW5nUmFuZ2UgJiB+NDI5NDgzNjIyNCAvKiBQUkVWX01BU0sgKi8pIHxcbiAgICAgICAgKHByZXZpb3VzIDw8IDE3IC8qIFBSRVZfU0hJRlQgKi8pKTtcbn1cbmZ1bmN0aW9uIHNldFRTdHlsaW5nUmFuZ2VQcmV2RHVwbGljYXRlKHRTdHlsaW5nUmFuZ2UpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TnVtYmVyKHRTdHlsaW5nUmFuZ2UsICdleHBlY3RlZCBudW1iZXInKTtcbiAgICByZXR1cm4gKHRTdHlsaW5nUmFuZ2UgfCAyIC8qIFBSRVZfRFVQTElDQVRFICovKTtcbn1cbmZ1bmN0aW9uIGdldFRTdHlsaW5nUmFuZ2VOZXh0KHRTdHlsaW5nUmFuZ2UpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TnVtYmVyKHRTdHlsaW5nUmFuZ2UsICdleHBlY3RlZCBudW1iZXInKTtcbiAgICByZXR1cm4gKHRTdHlsaW5nUmFuZ2UgJiAxMzEwNjggLyogTkVYVF9NQVNLICovKSA+PiAyIC8qIE5FWFRfU0hJRlQgKi87XG59XG5mdW5jdGlvbiBzZXRUU3R5bGluZ1JhbmdlTmV4dCh0U3R5bGluZ1JhbmdlLCBuZXh0KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE51bWJlcih0U3R5bGluZ1JhbmdlLCAnZXhwZWN0ZWQgbnVtYmVyJyk7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE51bWJlckluUmFuZ2UobmV4dCwgMCwgMzI3NjcgLyogVU5TSUdORURfTUFTSyAqLyk7XG4gICAgcmV0dXJuICgodFN0eWxpbmdSYW5nZSAmIH4xMzEwNjggLyogTkVYVF9NQVNLICovKSB8IC8vXG4gICAgICAgIG5leHQgPDwgMiAvKiBORVhUX1NISUZUICovKTtcbn1cbmZ1bmN0aW9uIGdldFRTdHlsaW5nUmFuZ2VOZXh0RHVwbGljYXRlKHRTdHlsaW5nUmFuZ2UpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TnVtYmVyKHRTdHlsaW5nUmFuZ2UsICdleHBlY3RlZCBudW1iZXInKTtcbiAgICByZXR1cm4gKHRTdHlsaW5nUmFuZ2UgJiAxIC8qIE5FWFRfRFVQTElDQVRFICovKSA9PT1cbiAgICAgICAgMSAvKiBORVhUX0RVUExJQ0FURSAqLztcbn1cbmZ1bmN0aW9uIHNldFRTdHlsaW5nUmFuZ2VOZXh0RHVwbGljYXRlKHRTdHlsaW5nUmFuZ2UpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TnVtYmVyKHRTdHlsaW5nUmFuZ2UsICdleHBlY3RlZCBudW1iZXInKTtcbiAgICByZXR1cm4gKHRTdHlsaW5nUmFuZ2UgfCAxIC8qIE5FWFRfRFVQTElDQVRFICovKTtcbn1cbmZ1bmN0aW9uIGdldFRTdHlsaW5nUmFuZ2VUYWlsKHRTdHlsaW5nUmFuZ2UpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TnVtYmVyKHRTdHlsaW5nUmFuZ2UsICdleHBlY3RlZCBudW1iZXInKTtcbiAgICBjb25zdCBuZXh0ID0gZ2V0VFN0eWxpbmdSYW5nZU5leHQodFN0eWxpbmdSYW5nZSk7XG4gICAgcmV0dXJuIG5leHQgPT09IDAgPyBnZXRUU3R5bGluZ1JhbmdlUHJldih0U3R5bGluZ1JhbmdlKSA6IG5leHQ7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBQYXRjaCBhIGBkZWJ1Z2AgcHJvcGVydHkgb24gdG9wIG9mIHRoZSBleGlzdGluZyBvYmplY3QuXG4gKlxuICogTk9URTogYWx3YXlzIGNhbGwgdGhpcyBtZXRob2Qgd2l0aCBgbmdEZXZNb2RlICYmIGF0dGFjaERlYnVnT2JqZWN0KC4uLilgXG4gKlxuICogQHBhcmFtIG9iaiBPYmplY3QgdG8gcGF0Y2hcbiAqIEBwYXJhbSBkZWJ1ZyBWYWx1ZSB0byBwYXRjaFxuICovXG5mdW5jdGlvbiBhdHRhY2hEZWJ1Z09iamVjdChvYmosIGRlYnVnKSB7XG4gICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCAnZGVidWcnLCB7IHZhbHVlOiBkZWJ1ZywgZW51bWVyYWJsZTogZmFsc2UgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgbWV0aG9kIHNob3VsZCBiZSBndWFyZGVkIHdpdGggYG5nRGV2TW9kZWAgc28gdGhhdCBpdCBjYW4gYmUgdHJlZSBzaGFrZW4gaW4gcHJvZHVjdGlvbiEnKTtcbiAgICB9XG59XG4vKipcbiAqIFBhdGNoIGEgYGRlYnVnYCBwcm9wZXJ0eSBnZXR0ZXIgb24gdG9wIG9mIHRoZSBleGlzdGluZyBvYmplY3QuXG4gKlxuICogTk9URTogYWx3YXlzIGNhbGwgdGhpcyBtZXRob2Qgd2l0aCBgbmdEZXZNb2RlICYmIGF0dGFjaERlYnVnT2JqZWN0KC4uLilgXG4gKlxuICogQHBhcmFtIG9iaiBPYmplY3QgdG8gcGF0Y2hcbiAqIEBwYXJhbSBkZWJ1Z0dldHRlciBHZXR0ZXIgcmV0dXJuaW5nIGEgdmFsdWUgdG8gcGF0Y2hcbiAqL1xuZnVuY3Rpb24gYXR0YWNoRGVidWdHZXR0ZXIob2JqLCBkZWJ1Z0dldHRlcikge1xuICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJ2RlYnVnJywgeyBnZXQ6IGRlYnVnR2V0dGVyLCBlbnVtZXJhYmxlOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGd1YXJkZWQgd2l0aCBgbmdEZXZNb2RlYCBzbyB0aGF0IGl0IGNhbiBiZSB0cmVlIHNoYWtlbiBpbiBwcm9kdWN0aW9uIScpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIGNvbmRpdGlvbmFsbHkgYXR0YWNoZWQgY2xhc3NlcyB3aGljaCBwcm92aWRlIGh1bWFuIHJlYWRhYmxlIChkZWJ1ZykgbGV2ZWxcbiAqIGluZm9ybWF0aW9uIGZvciBgTFZpZXdgLCBgTENvbnRhaW5lcmAgYW5kIG90aGVyIGludGVybmFsIGRhdGEgc3RydWN0dXJlcy4gVGhlc2UgZGF0YSBzdHJ1Y3R1cmVzXG4gKiBhcmUgc3RvcmVkIGludGVybmFsbHkgYXMgYXJyYXkgd2hpY2ggbWFrZXMgaXQgdmVyeSBkaWZmaWN1bHQgZHVyaW5nIGRlYnVnZ2luZyB0byByZWFzb24gYWJvdXQgdGhlXG4gKiBjdXJyZW50IHN0YXRlIG9mIHRoZSBzeXN0ZW0uXG4gKlxuICogUGF0Y2hpbmcgdGhlIGFycmF5IHdpdGggZXh0cmEgcHJvcGVydHkgZG9lcyBjaGFuZ2UgdGhlIGFycmF5J3MgaGlkZGVuIGNsYXNzJyBidXQgaXQgZG9lcyBub3RcbiAqIGNoYW5nZSB0aGUgY29zdCBvZiBhY2Nlc3MsIHRoZXJlZm9yZSB0aGlzIHBhdGNoaW5nIHNob3VsZCBub3QgaGF2ZSBzaWduaWZpY2FudCBpZiBhbnkgaW1wYWN0IGluXG4gKiBgbmdEZXZNb2RlYCBtb2RlLiAoc2VlOiBodHRwczovL2pzcGVyZi5jb20vYXJyYXktdnMtbW9ua2V5LXBhdGNoLWFycmF5KVxuICpcbiAqIFNvIGluc3RlYWQgb2Ygc2VlaW5nOlxuICogYGBgXG4gKiBBcnJheSgzMCkgW09iamVjdCwgNjU5LCBudWxsLCDigKZdXG4gKiBgYGBcbiAqXG4gKiBZb3UgZ2V0IHRvIHNlZTpcbiAqIGBgYFxuICogTFZpZXdEZWJ1ZyB7XG4gKiAgIHZpZXdzOiBbLi4uXSxcbiAqICAgZmxhZ3M6IHthdHRhY2hlZDogdHJ1ZSwgLi4ufVxuICogICBub2RlczogW1xuICogICAgIHtodG1sOiAnPGRpdiBpZD1cIjEyM1wiPicsIC4uLiwgbm9kZXM6IFtcbiAqICAgICAgIHtodG1sOiAnPHNwYW4+JywgLi4uLCBub2RlczogbnVsbH1cbiAqICAgICBdfVxuICogICBdXG4gKiB9XG4gKiBgYGBcbiAqL1xubGV0IExWSUVXX0NPTVBPTkVOVF9DQUNIRTtcbmxldCBMVklFV19FTUJFRERFRF9DQUNIRTtcbmxldCBMVklFV19ST09UO1xubGV0IExWSUVXX0NPTVBPTkVOVDtcbmxldCBMVklFV19FTUJFRERFRDtcbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjbG9uZXMgYSBibHVlcHJpbnQgYW5kIGNyZWF0ZXMgTFZpZXcuXG4gKlxuICogU2ltcGxlIHNsaWNlIHdpbGwga2VlcCB0aGUgc2FtZSB0eXBlLCBhbmQgd2UgbmVlZCBpdCB0byBiZSBMVmlld1xuICovXG5mdW5jdGlvbiBjbG9uZVRvTFZpZXdGcm9tVFZpZXdCbHVlcHJpbnQodFZpZXcpIHtcbiAgICBjb25zdCBkZWJ1Z1RWaWV3ID0gdFZpZXc7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlld1RvQ2xvbmUoZGVidWdUVmlldy50eXBlLCB0Vmlldy50ZW1wbGF0ZSAmJiB0Vmlldy50ZW1wbGF0ZS5uYW1lKTtcbiAgICByZXR1cm4gbFZpZXcuY29uY2F0KHRWaWV3LmJsdWVwcmludCk7XG59XG5jbGFzcyBMUm9vdFZpZXcgZXh0ZW5kcyBBcnJheSB7XG59XG5jbGFzcyBMQ29tcG9uZW50VmlldyBleHRlbmRzIEFycmF5IHtcbn1cbmNsYXNzIExFbWJlZGRlZFZpZXcgZXh0ZW5kcyBBcnJheSB7XG59XG5mdW5jdGlvbiBnZXRMVmlld1RvQ2xvbmUodHlwZSwgbmFtZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIDAgLyogUm9vdCAqLzpcbiAgICAgICAgICAgIGlmIChMVklFV19ST09UID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgTFZJRVdfUk9PVCA9IG5ldyBMUm9vdFZpZXcoKTtcbiAgICAgICAgICAgIHJldHVybiBMVklFV19ST09UO1xuICAgICAgICBjYXNlIDEgLyogQ29tcG9uZW50ICovOlxuICAgICAgICAgICAgaWYgKCFuZ0Rldk1vZGUgfHwgIW5nRGV2TW9kZS5uYW1lZENvbnN0cnVjdG9ycykge1xuICAgICAgICAgICAgICAgIGlmIChMVklFV19DT01QT05FTlQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgTFZJRVdfQ09NUE9ORU5UID0gbmV3IExDb21wb25lbnRWaWV3KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIExWSUVXX0NPTVBPTkVOVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChMVklFV19DT01QT05FTlRfQ0FDSEUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBMVklFV19DT01QT05FTlRfQ0FDSEUgPSBuZXcgTWFwKCk7XG4gICAgICAgICAgICBsZXQgY29tcG9uZW50QXJyYXkgPSBMVklFV19DT01QT05FTlRfQ0FDSEUuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudEFycmF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb21wb25lbnRBcnJheSA9IG5ldyAoY3JlYXRlTmFtZWRBcnJheVR5cGUoJ0xDb21wb25lbnRWaWV3JyArIG5hbWVTdWZmaXgobmFtZSkpKSgpO1xuICAgICAgICAgICAgICAgIExWSUVXX0NPTVBPTkVOVF9DQUNIRS5zZXQobmFtZSwgY29tcG9uZW50QXJyYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBvbmVudEFycmF5O1xuICAgICAgICBjYXNlIDIgLyogRW1iZWRkZWQgKi86XG4gICAgICAgICAgICBpZiAoIW5nRGV2TW9kZSB8fCAhbmdEZXZNb2RlLm5hbWVkQ29uc3RydWN0b3JzKSB7XG4gICAgICAgICAgICAgICAgaWYgKExWSUVXX0VNQkVEREVEID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIExWSUVXX0VNQkVEREVEID0gbmV3IExFbWJlZGRlZFZpZXcoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gTFZJRVdfRU1CRURERUQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoTFZJRVdfRU1CRURERURfQ0FDSEUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBMVklFV19FTUJFRERFRF9DQUNIRSA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIGxldCBlbWJlZGRlZEFycmF5ID0gTFZJRVdfRU1CRURERURfQ0FDSEUuZ2V0KG5hbWUpO1xuICAgICAgICAgICAgaWYgKGVtYmVkZGVkQXJyYXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGVtYmVkZGVkQXJyYXkgPSBuZXcgKGNyZWF0ZU5hbWVkQXJyYXlUeXBlKCdMRW1iZWRkZWRWaWV3JyArIG5hbWVTdWZmaXgobmFtZSkpKSgpO1xuICAgICAgICAgICAgICAgIExWSUVXX0VNQkVEREVEX0NBQ0hFLnNldChuYW1lLCBlbWJlZGRlZEFycmF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBlbWJlZGRlZEFycmF5O1xuICAgIH1cbn1cbmZ1bmN0aW9uIG5hbWVTdWZmaXgodGV4dCkge1xuICAgIGlmICh0ZXh0ID09IG51bGwpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBjb25zdCBpbmRleCA9IHRleHQubGFzdEluZGV4T2YoJ19UZW1wbGF0ZScpO1xuICAgIHJldHVybiAnXycgKyAoaW5kZXggPT09IC0xID8gdGV4dCA6IHRleHQuc3Vic3RyKDAsIGluZGV4KSk7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgYSBkZWJ1ZyB2ZXJzaW9uIG9mIE9iamVjdCBsaXRlcmFsIHNvIHRoYXQgd2UgY2FuIGhhdmUgY29uc3RydWN0b3IgbmFtZSBzaG93IHVwXG4gKiBpblxuICogZGVidWcgdG9vbHMgaW4gbmdEZXZNb2RlLlxuICovXG5jb25zdCBUVmlld0NvbnN0cnVjdG9yID0gY2xhc3MgVFZpZXcge1xuICAgIGNvbnN0cnVjdG9yKHR5cGUsIGJsdWVwcmludCwgdGVtcGxhdGUsIHF1ZXJpZXMsIHZpZXdRdWVyeSwgZGVjbFROb2RlLCBkYXRhLCBiaW5kaW5nU3RhcnRJbmRleCwgZXhwYW5kb1N0YXJ0SW5kZXgsIGhvc3RCaW5kaW5nT3BDb2RlcywgZmlyc3RDcmVhdGVQYXNzLCBmaXJzdFVwZGF0ZVBhc3MsIHN0YXRpY1ZpZXdRdWVyaWVzLCBzdGF0aWNDb250ZW50UXVlcmllcywgcHJlT3JkZXJIb29rcywgcHJlT3JkZXJDaGVja0hvb2tzLCBjb250ZW50SG9va3MsIGNvbnRlbnRDaGVja0hvb2tzLCB2aWV3SG9va3MsIHZpZXdDaGVja0hvb2tzLCBkZXN0cm95SG9va3MsIGNsZWFudXAsIGNvbnRlbnRRdWVyaWVzLCBjb21wb25lbnRzLCBkaXJlY3RpdmVSZWdpc3RyeSwgcGlwZVJlZ2lzdHJ5LCBmaXJzdENoaWxkLCBzY2hlbWFzLCBjb25zdHMsIGluY29tcGxldGVGaXJzdFBhc3MsIF9kZWNscywgX3ZhcnMpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5ibHVlcHJpbnQgPSBibHVlcHJpbnQ7XG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gcXVlcmllcztcbiAgICAgICAgdGhpcy52aWV3UXVlcnkgPSB2aWV3UXVlcnk7XG4gICAgICAgIHRoaXMuZGVjbFROb2RlID0gZGVjbFROb2RlO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmJpbmRpbmdTdGFydEluZGV4ID0gYmluZGluZ1N0YXJ0SW5kZXg7XG4gICAgICAgIHRoaXMuZXhwYW5kb1N0YXJ0SW5kZXggPSBleHBhbmRvU3RhcnRJbmRleDtcbiAgICAgICAgdGhpcy5ob3N0QmluZGluZ09wQ29kZXMgPSBob3N0QmluZGluZ09wQ29kZXM7XG4gICAgICAgIHRoaXMuZmlyc3RDcmVhdGVQYXNzID0gZmlyc3RDcmVhdGVQYXNzO1xuICAgICAgICB0aGlzLmZpcnN0VXBkYXRlUGFzcyA9IGZpcnN0VXBkYXRlUGFzcztcbiAgICAgICAgdGhpcy5zdGF0aWNWaWV3UXVlcmllcyA9IHN0YXRpY1ZpZXdRdWVyaWVzO1xuICAgICAgICB0aGlzLnN0YXRpY0NvbnRlbnRRdWVyaWVzID0gc3RhdGljQ29udGVudFF1ZXJpZXM7XG4gICAgICAgIHRoaXMucHJlT3JkZXJIb29rcyA9IHByZU9yZGVySG9va3M7XG4gICAgICAgIHRoaXMucHJlT3JkZXJDaGVja0hvb2tzID0gcHJlT3JkZXJDaGVja0hvb2tzO1xuICAgICAgICB0aGlzLmNvbnRlbnRIb29rcyA9IGNvbnRlbnRIb29rcztcbiAgICAgICAgdGhpcy5jb250ZW50Q2hlY2tIb29rcyA9IGNvbnRlbnRDaGVja0hvb2tzO1xuICAgICAgICB0aGlzLnZpZXdIb29rcyA9IHZpZXdIb29rcztcbiAgICAgICAgdGhpcy52aWV3Q2hlY2tIb29rcyA9IHZpZXdDaGVja0hvb2tzO1xuICAgICAgICB0aGlzLmRlc3Ryb3lIb29rcyA9IGRlc3Ryb3lIb29rcztcbiAgICAgICAgdGhpcy5jbGVhbnVwID0gY2xlYW51cDtcbiAgICAgICAgdGhpcy5jb250ZW50UXVlcmllcyA9IGNvbnRlbnRRdWVyaWVzO1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMgPSBjb21wb25lbnRzO1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZVJlZ2lzdHJ5ID0gZGlyZWN0aXZlUmVnaXN0cnk7XG4gICAgICAgIHRoaXMucGlwZVJlZ2lzdHJ5ID0gcGlwZVJlZ2lzdHJ5O1xuICAgICAgICB0aGlzLmZpcnN0Q2hpbGQgPSBmaXJzdENoaWxkO1xuICAgICAgICB0aGlzLnNjaGVtYXMgPSBzY2hlbWFzO1xuICAgICAgICB0aGlzLmNvbnN0cyA9IGNvbnN0cztcbiAgICAgICAgdGhpcy5pbmNvbXBsZXRlRmlyc3RQYXNzID0gaW5jb21wbGV0ZUZpcnN0UGFzcztcbiAgICAgICAgdGhpcy5fZGVjbHMgPSBfZGVjbHM7XG4gICAgICAgIHRoaXMuX3ZhcnMgPSBfdmFycztcbiAgICB9XG4gICAgZ2V0IHRlbXBsYXRlXygpIHtcbiAgICAgICAgY29uc3QgYnVmID0gW107XG4gICAgICAgIHByb2Nlc3NUTm9kZUNoaWxkcmVuKHRoaXMuZmlyc3RDaGlsZCwgYnVmKTtcbiAgICAgICAgcmV0dXJuIGJ1Zi5qb2luKCcnKTtcbiAgICB9XG4gICAgZ2V0IHR5cGVfKCkge1xuICAgICAgICByZXR1cm4gVFZpZXdUeXBlQXNTdHJpbmdbdGhpcy50eXBlXSB8fCBgVFZpZXdUeXBlLj8ke3RoaXMudHlwZX0/YDtcbiAgICB9XG59O1xuY2xhc3MgVE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKHRWaWV3XywgLy9cbiAgICB0eXBlLCAvL1xuICAgIGluZGV4LCAvL1xuICAgIGluc2VydEJlZm9yZUluZGV4LCAvL1xuICAgIGluamVjdG9ySW5kZXgsIC8vXG4gICAgZGlyZWN0aXZlU3RhcnQsIC8vXG4gICAgZGlyZWN0aXZlRW5kLCAvL1xuICAgIGRpcmVjdGl2ZVN0eWxpbmdMYXN0LCAvL1xuICAgIHByb3BlcnR5QmluZGluZ3MsIC8vXG4gICAgZmxhZ3MsIC8vXG4gICAgcHJvdmlkZXJJbmRleGVzLCAvL1xuICAgIHZhbHVlLCAvL1xuICAgIGF0dHJzLCAvL1xuICAgIG1lcmdlZEF0dHJzLCAvL1xuICAgIGxvY2FsTmFtZXMsIC8vXG4gICAgaW5pdGlhbElucHV0cywgLy9cbiAgICBpbnB1dHMsIC8vXG4gICAgb3V0cHV0cywgLy9cbiAgICB0Vmlld3MsIC8vXG4gICAgbmV4dCwgLy9cbiAgICBwcm9qZWN0aW9uTmV4dCwgLy9cbiAgICBjaGlsZCwgLy9cbiAgICBwYXJlbnQsIC8vXG4gICAgcHJvamVjdGlvbiwgLy9cbiAgICBzdHlsZXMsIC8vXG4gICAgc3R5bGVzV2l0aG91dEhvc3QsIC8vXG4gICAgcmVzaWR1YWxTdHlsZXMsIC8vXG4gICAgY2xhc3NlcywgLy9cbiAgICBjbGFzc2VzV2l0aG91dEhvc3QsIC8vXG4gICAgcmVzaWR1YWxDbGFzc2VzLCAvL1xuICAgIGNsYXNzQmluZGluZ3MsIC8vXG4gICAgc3R5bGVCaW5kaW5ncykge1xuICAgICAgICB0aGlzLnRWaWV3XyA9IHRWaWV3XztcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgICAgICB0aGlzLmluc2VydEJlZm9yZUluZGV4ID0gaW5zZXJ0QmVmb3JlSW5kZXg7XG4gICAgICAgIHRoaXMuaW5qZWN0b3JJbmRleCA9IGluamVjdG9ySW5kZXg7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlU3RhcnQgPSBkaXJlY3RpdmVTdGFydDtcbiAgICAgICAgdGhpcy5kaXJlY3RpdmVFbmQgPSBkaXJlY3RpdmVFbmQ7XG4gICAgICAgIHRoaXMuZGlyZWN0aXZlU3R5bGluZ0xhc3QgPSBkaXJlY3RpdmVTdHlsaW5nTGFzdDtcbiAgICAgICAgdGhpcy5wcm9wZXJ0eUJpbmRpbmdzID0gcHJvcGVydHlCaW5kaW5ncztcbiAgICAgICAgdGhpcy5mbGFncyA9IGZsYWdzO1xuICAgICAgICB0aGlzLnByb3ZpZGVySW5kZXhlcyA9IHByb3ZpZGVySW5kZXhlcztcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmF0dHJzID0gYXR0cnM7XG4gICAgICAgIHRoaXMubWVyZ2VkQXR0cnMgPSBtZXJnZWRBdHRycztcbiAgICAgICAgdGhpcy5sb2NhbE5hbWVzID0gbG9jYWxOYW1lcztcbiAgICAgICAgdGhpcy5pbml0aWFsSW5wdXRzID0gaW5pdGlhbElucHV0cztcbiAgICAgICAgdGhpcy5pbnB1dHMgPSBpbnB1dHM7XG4gICAgICAgIHRoaXMub3V0cHV0cyA9IG91dHB1dHM7XG4gICAgICAgIHRoaXMudFZpZXdzID0gdFZpZXdzO1xuICAgICAgICB0aGlzLm5leHQgPSBuZXh0O1xuICAgICAgICB0aGlzLnByb2plY3Rpb25OZXh0ID0gcHJvamVjdGlvbk5leHQ7XG4gICAgICAgIHRoaXMuY2hpbGQgPSBjaGlsZDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMucHJvamVjdGlvbiA9IHByb2plY3Rpb247XG4gICAgICAgIHRoaXMuc3R5bGVzID0gc3R5bGVzO1xuICAgICAgICB0aGlzLnN0eWxlc1dpdGhvdXRIb3N0ID0gc3R5bGVzV2l0aG91dEhvc3Q7XG4gICAgICAgIHRoaXMucmVzaWR1YWxTdHlsZXMgPSByZXNpZHVhbFN0eWxlcztcbiAgICAgICAgdGhpcy5jbGFzc2VzID0gY2xhc3NlcztcbiAgICAgICAgdGhpcy5jbGFzc2VzV2l0aG91dEhvc3QgPSBjbGFzc2VzV2l0aG91dEhvc3Q7XG4gICAgICAgIHRoaXMucmVzaWR1YWxDbGFzc2VzID0gcmVzaWR1YWxDbGFzc2VzO1xuICAgICAgICB0aGlzLmNsYXNzQmluZGluZ3MgPSBjbGFzc0JpbmRpbmdzO1xuICAgICAgICB0aGlzLnN0eWxlQmluZGluZ3MgPSBzdHlsZUJpbmRpbmdzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBodW1hbiBkZWJ1ZyB2ZXJzaW9uIG9mIHRoZSBzZXQgb2YgYE5vZGVJbmplY3RvcmBzIHdoaWNoIHdpbGwgYmUgY29uc3VsdGVkIHdoZW5cbiAgICAgKiByZXNvbHZpbmcgdG9rZW5zIGZyb20gdGhpcyBgVE5vZGVgLlxuICAgICAqXG4gICAgICogV2hlbiBkZWJ1Z2dpbmcgYXBwbGljYXRpb25zLCBpdCBpcyBvZnRlbiBkaWZmaWN1bHQgdG8gZGV0ZXJtaW5lIHdoaWNoIGBOb2RlSW5qZWN0b3JgcyB3aWxsIGJlXG4gICAgICogY29uc3VsdGVkLiBUaGlzIG1ldGhvZCBzaG93cyBhIGxpc3Qgb2YgYERlYnVnTm9kZWBzIHJlcHJlc2VudGluZyB0aGUgYFROb2RlYHMgd2hpY2ggd2lsbCBiZVxuICAgICAqIGNvbnN1bHRlZCBpbiBvcmRlciB3aGVuIHJlc29sdmluZyBhIHRva2VuIHN0YXJ0aW5nIGF0IHRoaXMgYFROb2RlYC5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBkYXRhIGlzIHN0b3JlZCBpbiBgTFZpZXdgIGFuZCBgVFZpZXdgIHdpdGggYSBsb3Qgb2Ygb2Zmc2V0IGluZGV4ZXMsIGFuZCBzbyBpdCBpc1xuICAgICAqIGRpZmZpY3VsdCB0byByZWFzb24gYWJvdXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbFZpZXcgVGhlIGBMVmlld2AgaW5zdGFuY2UgZm9yIHRoaXMgYFROb2RlYC5cbiAgICAgKi9cbiAgICBkZWJ1Z05vZGVJbmplY3RvclBhdGgobFZpZXcpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IFtdO1xuICAgICAgICBsZXQgaW5qZWN0b3JJbmRleCA9IGdldEluamVjdG9ySW5kZXgodGhpcywgbFZpZXcpO1xuICAgICAgICBpZiAoaW5qZWN0b3JJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIExvb2tzIGxpa2UgdGhlIGN1cnJlbnQgYFROb2RlYCBkb2VzIG5vdCBoYXZlIGBOb2RlSW5qZWN0b3JgIGFzc29jaWF0ZWQgd2l0aCBpdCA9PiBsb29rIGZvclxuICAgICAgICAgICAgLy8gcGFyZW50IE5vZGVJbmplY3Rvci5cbiAgICAgICAgICAgIGNvbnN0IHBhcmVudExvY2F0aW9uID0gZ2V0UGFyZW50SW5qZWN0b3JMb2NhdGlvbih0aGlzLCBsVmlldyk7XG4gICAgICAgICAgICBpZiAocGFyZW50TG9jYXRpb24gIT09IE5PX1BBUkVOVF9JTkpFQ1RPUikge1xuICAgICAgICAgICAgICAgIC8vIFdlIGZvdW5kIGEgcGFyZW50LCBzbyBzdGFydCBzZWFyY2hpbmcgZnJvbSB0aGUgcGFyZW50IGxvY2F0aW9uLlxuICAgICAgICAgICAgICAgIGluamVjdG9ySW5kZXggPSBnZXRQYXJlbnRJbmplY3RvckluZGV4KHBhcmVudExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICBsVmlldyA9IGdldFBhcmVudEluamVjdG9yVmlldyhwYXJlbnRMb2NhdGlvbiwgbFZpZXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gcGFyZW50cyBoYXZlIGJlZW4gZm91bmQsIHNvIHRoZXJlIGFyZSBubyBgTm9kZUluamVjdG9yYHMgdG8gY29uc3VsdC5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5qZWN0b3JJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnROb2RlSW5qZWN0b3IobFZpZXcsIGluamVjdG9ySW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgdE5vZGUgPSBsVmlld1tUVklFV10uZGF0YVtpbmplY3RvckluZGV4ICsgOCAvKiBUTk9ERSAqL107XG4gICAgICAgICAgICBwYXRoLnB1c2goYnVpbGREZWJ1Z05vZGUodE5vZGUsIGxWaWV3KSk7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnRMb2NhdGlvbiA9IGxWaWV3W2luamVjdG9ySW5kZXggKyA4IC8qIFBBUkVOVCAqL107XG4gICAgICAgICAgICBpZiAocGFyZW50TG9jYXRpb24gPT09IE5PX1BBUkVOVF9JTkpFQ1RPUikge1xuICAgICAgICAgICAgICAgIGluamVjdG9ySW5kZXggPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluamVjdG9ySW5kZXggPSBnZXRQYXJlbnRJbmplY3RvckluZGV4KHBhcmVudExvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICBsVmlldyA9IGdldFBhcmVudEluamVjdG9yVmlldyhwYXJlbnRMb2NhdGlvbiwgbFZpZXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cbiAgICBnZXQgdHlwZV8oKSB7XG4gICAgICAgIHJldHVybiB0b1ROb2RlVHlwZUFzU3RyaW5nKHRoaXMudHlwZSkgfHwgYFROb2RlVHlwZS4/JHt0aGlzLnR5cGV9P2A7XG4gICAgfVxuICAgIGdldCBmbGFnc18oKSB7XG4gICAgICAgIGNvbnN0IGZsYWdzID0gW107XG4gICAgICAgIGlmICh0aGlzLmZsYWdzICYgMTYgLyogaGFzQ2xhc3NJbnB1dCAqLylcbiAgICAgICAgICAgIGZsYWdzLnB1c2goJ1ROb2RlRmxhZ3MuaGFzQ2xhc3NJbnB1dCcpO1xuICAgICAgICBpZiAodGhpcy5mbGFncyAmIDggLyogaGFzQ29udGVudFF1ZXJ5ICovKVxuICAgICAgICAgICAgZmxhZ3MucHVzaCgnVE5vZGVGbGFncy5oYXNDb250ZW50UXVlcnknKTtcbiAgICAgICAgaWYgKHRoaXMuZmxhZ3MgJiAzMiAvKiBoYXNTdHlsZUlucHV0ICovKVxuICAgICAgICAgICAgZmxhZ3MucHVzaCgnVE5vZGVGbGFncy5oYXNTdHlsZUlucHV0Jyk7XG4gICAgICAgIGlmICh0aGlzLmZsYWdzICYgMTI4IC8qIGhhc0hvc3RCaW5kaW5ncyAqLylcbiAgICAgICAgICAgIGZsYWdzLnB1c2goJ1ROb2RlRmxhZ3MuaGFzSG9zdEJpbmRpbmdzJyk7XG4gICAgICAgIGlmICh0aGlzLmZsYWdzICYgMiAvKiBpc0NvbXBvbmVudEhvc3QgKi8pXG4gICAgICAgICAgICBmbGFncy5wdXNoKCdUTm9kZUZsYWdzLmlzQ29tcG9uZW50SG9zdCcpO1xuICAgICAgICBpZiAodGhpcy5mbGFncyAmIDEgLyogaXNEaXJlY3RpdmVIb3N0ICovKVxuICAgICAgICAgICAgZmxhZ3MucHVzaCgnVE5vZGVGbGFncy5pc0RpcmVjdGl2ZUhvc3QnKTtcbiAgICAgICAgaWYgKHRoaXMuZmxhZ3MgJiA2NCAvKiBpc0RldGFjaGVkICovKVxuICAgICAgICAgICAgZmxhZ3MucHVzaCgnVE5vZGVGbGFncy5pc0RldGFjaGVkJyk7XG4gICAgICAgIGlmICh0aGlzLmZsYWdzICYgNCAvKiBpc1Byb2plY3RlZCAqLylcbiAgICAgICAgICAgIGZsYWdzLnB1c2goJ1ROb2RlRmxhZ3MuaXNQcm9qZWN0ZWQnKTtcbiAgICAgICAgcmV0dXJuIGZsYWdzLmpvaW4oJ3wnKTtcbiAgICB9XG4gICAgZ2V0IHRlbXBsYXRlXygpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAmIDEgLyogVGV4dCAqLylcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgICAgICBjb25zdCBidWYgPSBbXTtcbiAgICAgICAgY29uc3QgdGFnTmFtZSA9IHR5cGVvZiB0aGlzLnZhbHVlID09PSAnc3RyaW5nJyAmJiB0aGlzLnZhbHVlIHx8IHRoaXMudHlwZV87XG4gICAgICAgIGJ1Zi5wdXNoKCc8JywgdGFnTmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmZsYWdzKSB7XG4gICAgICAgICAgICBidWYucHVzaCgnICcsIHRoaXMuZmxhZ3NfKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hdHRycykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF0dHJzLmxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyTmFtZSA9IHRoaXMuYXR0cnNbaSsrXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGF0dHJOYW1lID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyVmFsdWUgPSB0aGlzLmF0dHJzW2krK107XG4gICAgICAgICAgICAgICAgYnVmLnB1c2goJyAnLCBhdHRyTmFtZSwgJz1cIicsIGF0dHJWYWx1ZSwgJ1wiJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnVmLnB1c2goJz4nKTtcbiAgICAgICAgcHJvY2Vzc1ROb2RlQ2hpbGRyZW4odGhpcy5jaGlsZCwgYnVmKTtcbiAgICAgICAgYnVmLnB1c2goJzwvJywgdGFnTmFtZSwgJz4nKTtcbiAgICAgICAgcmV0dXJuIGJ1Zi5qb2luKCcnKTtcbiAgICB9XG4gICAgZ2V0IHN0eWxlQmluZGluZ3NfKCkge1xuICAgICAgICByZXR1cm4gdG9EZWJ1Z1N0eWxlQmluZGluZyh0aGlzLCBmYWxzZSk7XG4gICAgfVxuICAgIGdldCBjbGFzc0JpbmRpbmdzXygpIHtcbiAgICAgICAgcmV0dXJuIHRvRGVidWdTdHlsZUJpbmRpbmcodGhpcywgdHJ1ZSk7XG4gICAgfVxuICAgIGdldCBwcm92aWRlckluZGV4U3RhcnRfKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm92aWRlckluZGV4ZXMgJiAxMDQ4NTc1IC8qIFByb3ZpZGVyc1N0YXJ0SW5kZXhNYXNrICovO1xuICAgIH1cbiAgICBnZXQgcHJvdmlkZXJJbmRleEVuZF8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVySW5kZXhTdGFydF8gK1xuICAgICAgICAgICAgKHRoaXMucHJvdmlkZXJJbmRleGVzID4+PiAyMCAvKiBDcHRWaWV3UHJvdmlkZXJzQ291bnRTaGlmdCAqLyk7XG4gICAgfVxufVxuY29uc3QgVE5vZGVEZWJ1ZyA9IFROb2RlO1xuZnVuY3Rpb24gdG9EZWJ1Z1N0eWxlQmluZGluZyh0Tm9kZSwgaXNDbGFzc0Jhc2VkKSB7XG4gICAgY29uc3QgdERhdGEgPSB0Tm9kZS50Vmlld18uZGF0YTtcbiAgICBjb25zdCBiaW5kaW5ncyA9IFtdO1xuICAgIGNvbnN0IHJhbmdlID0gaXNDbGFzc0Jhc2VkID8gdE5vZGUuY2xhc3NCaW5kaW5ncyA6IHROb2RlLnN0eWxlQmluZGluZ3M7XG4gICAgY29uc3QgcHJldiA9IGdldFRTdHlsaW5nUmFuZ2VQcmV2KHJhbmdlKTtcbiAgICBjb25zdCBuZXh0ID0gZ2V0VFN0eWxpbmdSYW5nZU5leHQocmFuZ2UpO1xuICAgIGxldCBpc1RlbXBsYXRlID0gbmV4dCAhPT0gMDtcbiAgICBsZXQgY3Vyc29yID0gaXNUZW1wbGF0ZSA/IG5leHQgOiBwcmV2O1xuICAgIHdoaWxlIChjdXJzb3IgIT09IDApIHtcbiAgICAgICAgY29uc3QgaXRlbUtleSA9IHREYXRhW2N1cnNvcl07XG4gICAgICAgIGNvbnN0IGl0ZW1SYW5nZSA9IHREYXRhW2N1cnNvciArIDFdO1xuICAgICAgICBiaW5kaW5ncy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGtleTogaXRlbUtleSxcbiAgICAgICAgICAgIGluZGV4OiBjdXJzb3IsXG4gICAgICAgICAgICBpc1RlbXBsYXRlOiBpc1RlbXBsYXRlLFxuICAgICAgICAgICAgcHJldkR1cGxpY2F0ZTogZ2V0VFN0eWxpbmdSYW5nZVByZXZEdXBsaWNhdGUoaXRlbVJhbmdlKSxcbiAgICAgICAgICAgIG5leHREdXBsaWNhdGU6IGdldFRTdHlsaW5nUmFuZ2VOZXh0RHVwbGljYXRlKGl0ZW1SYW5nZSksXG4gICAgICAgICAgICBuZXh0SW5kZXg6IGdldFRTdHlsaW5nUmFuZ2VOZXh0KGl0ZW1SYW5nZSksXG4gICAgICAgICAgICBwcmV2SW5kZXg6IGdldFRTdHlsaW5nUmFuZ2VQcmV2KGl0ZW1SYW5nZSksXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoY3Vyc29yID09PSBwcmV2KVxuICAgICAgICAgICAgaXNUZW1wbGF0ZSA9IGZhbHNlO1xuICAgICAgICBjdXJzb3IgPSBnZXRUU3R5bGluZ1JhbmdlUHJldihpdGVtUmFuZ2UpO1xuICAgIH1cbiAgICBiaW5kaW5ncy5wdXNoKChpc0NsYXNzQmFzZWQgPyB0Tm9kZS5yZXNpZHVhbENsYXNzZXMgOiB0Tm9kZS5yZXNpZHVhbFN0eWxlcykgfHwgbnVsbCk7XG4gICAgcmV0dXJuIGJpbmRpbmdzO1xufVxuZnVuY3Rpb24gcHJvY2Vzc1ROb2RlQ2hpbGRyZW4odE5vZGUsIGJ1Zikge1xuICAgIHdoaWxlICh0Tm9kZSkge1xuICAgICAgICBidWYucHVzaCh0Tm9kZS50ZW1wbGF0ZV8pO1xuICAgICAgICB0Tm9kZSA9IHROb2RlLm5leHQ7XG4gICAgfVxufVxuY2xhc3MgVFZpZXdEYXRhIGV4dGVuZHMgQXJyYXkge1xufVxubGV0IFRWSUVXREFUQV9FTVBUWTsgLy8gY2FuJ3QgaW5pdGlhbGl6ZSBoZXJlIG9yIGl0IHdpbGwgbm90IGJlIHRyZWUgc2hha2VuLCBiZWNhdXNlXG4vLyBgTFZpZXdgIGNvbnN0cnVjdG9yIGNvdWxkIGhhdmUgc2lkZS1lZmZlY3RzLlxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNsb25lcyBhIGJsdWVwcmludCBhbmQgY3JlYXRlcyBURGF0YS5cbiAqXG4gKiBTaW1wbGUgc2xpY2Ugd2lsbCBrZWVwIHRoZSBzYW1lIHR5cGUsIGFuZCB3ZSBuZWVkIGl0IHRvIGJlIFREYXRhXG4gKi9cbmZ1bmN0aW9uIGNsb25lVG9UVmlld0RhdGEobGlzdCkge1xuICAgIGlmIChUVklFV0RBVEFfRU1QVFkgPT09IHVuZGVmaW5lZClcbiAgICAgICAgVFZJRVdEQVRBX0VNUFRZID0gbmV3IFRWaWV3RGF0YSgpO1xuICAgIHJldHVybiBUVklFV0RBVEFfRU1QVFkuY29uY2F0KGxpc3QpO1xufVxuY2xhc3MgTFZpZXdCbHVlcHJpbnQgZXh0ZW5kcyBBcnJheSB7XG59XG5jbGFzcyBNYXRjaGVzQXJyYXkgZXh0ZW5kcyBBcnJheSB7XG59XG5jbGFzcyBUVmlld0NvbXBvbmVudHMgZXh0ZW5kcyBBcnJheSB7XG59XG5jbGFzcyBUTm9kZUxvY2FsTmFtZXMgZXh0ZW5kcyBBcnJheSB7XG59XG5jbGFzcyBUTm9kZUluaXRpYWxJbnB1dHMgZXh0ZW5kcyBBcnJheSB7XG59XG5jbGFzcyBMQ2xlYW51cCBleHRlbmRzIEFycmF5IHtcbn1cbmNsYXNzIFRDbGVhbnVwIGV4dGVuZHMgQXJyYXkge1xufVxuZnVuY3Rpb24gYXR0YWNoTFZpZXdEZWJ1ZyhsVmlldykge1xuICAgIGF0dGFjaERlYnVnT2JqZWN0KGxWaWV3LCBuZXcgTFZpZXdEZWJ1ZyhsVmlldykpO1xufVxuZnVuY3Rpb24gYXR0YWNoTENvbnRhaW5lckRlYnVnKGxDb250YWluZXIpIHtcbiAgICBhdHRhY2hEZWJ1Z09iamVjdChsQ29udGFpbmVyLCBuZXcgTENvbnRhaW5lckRlYnVnKGxDb250YWluZXIpKTtcbn1cbmZ1bmN0aW9uIHRvRGVidWcob2JqKSB7XG4gICAgaWYgKG9iaikge1xuICAgICAgICBjb25zdCBkZWJ1ZyA9IG9iai5kZWJ1ZztcbiAgICAgICAgYXNzZXJ0RGVmaW5lZChkZWJ1ZywgJ09iamVjdCBkb2VzIG5vdCBoYXZlIGEgZGVidWcgcmVwcmVzZW50YXRpb24uJyk7XG4gICAgICAgIHJldHVybiBkZWJ1ZztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfVxufVxuLyoqXG4gKiBVc2UgdGhpcyBtZXRob2QgdG8gdW53cmFwIGEgbmF0aXZlIGVsZW1lbnQgaW4gYExWaWV3YCBhbmQgY29udmVydCBpdCBpbnRvIEhUTUwgZm9yIGVhc2llclxuICogcmVhZGluZy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgcG9zc2libHkgd3JhcHBlZCBuYXRpdmUgRE9NIG5vZGUuXG4gKiBAcGFyYW0gaW5jbHVkZUNoaWxkcmVuIElmIGB0cnVlYCB0aGVuIHRoZSBzZXJpYWxpemVkIEhUTUwgZm9ybSB3aWxsIGluY2x1ZGUgY2hpbGQgZWxlbWVudHNcbiAqIChzYW1lXG4gKiBhcyBgb3V0ZXJIVE1MYCkuIElmIGBmYWxzZWAgdGhlbiB0aGUgc2VyaWFsaXplZCBIVE1MIGZvcm0gd2lsbCBvbmx5IGNvbnRhaW4gdGhlIGVsZW1lbnRcbiAqIGl0c2VsZlxuICogKHdpbGwgbm90IHNlcmlhbGl6ZSBjaGlsZCBlbGVtZW50cykuXG4gKi9cbmZ1bmN0aW9uIHRvSHRtbCh2YWx1ZSwgaW5jbHVkZUNoaWxkcmVuID0gZmFsc2UpIHtcbiAgICBjb25zdCBub2RlID0gdW53cmFwUk5vZGUodmFsdWUpO1xuICAgIGlmIChub2RlKSB7XG4gICAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBOb2RlLlRFWFRfTk9ERTpcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIGNhc2UgTm9kZS5DT01NRU5UX05PREU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGA8IS0tJHtub2RlLnRleHRDb250ZW50fS0tPmA7XG4gICAgICAgICAgICBjYXNlIE5vZGUuRUxFTUVOVF9OT0RFOlxuICAgICAgICAgICAgICAgIGNvbnN0IG91dGVySFRNTCA9IG5vZGUub3V0ZXJIVE1MO1xuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlQ2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dGVySFRNTDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlubmVySFRNTCA9ICc+JyArIG5vZGUuaW5uZXJIVE1MICsgJzwnO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG91dGVySFRNTC5zcGxpdChpbm5lckhUTUwpWzBdKSArICc+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5jbGFzcyBMVmlld0RlYnVnIHtcbiAgICBjb25zdHJ1Y3RvcihfcmF3X2xWaWV3KSB7XG4gICAgICAgIHRoaXMuX3Jhd19sVmlldyA9IF9yYXdfbFZpZXc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZsYWdzIGFzc29jaWF0ZWQgd2l0aCB0aGUgYExWaWV3YCB1bnBhY2tlZCBpbnRvIGEgbW9yZSByZWFkYWJsZSBzdGF0ZS5cbiAgICAgKi9cbiAgICBnZXQgZmxhZ3MoKSB7XG4gICAgICAgIGNvbnN0IGZsYWdzID0gdGhpcy5fcmF3X2xWaWV3W0ZMQUdTXTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9fcmF3X19mbGFnc19fOiBmbGFncyxcbiAgICAgICAgICAgIGluaXRQaGFzZVN0YXRlOiBmbGFncyAmIDMgLyogSW5pdFBoYXNlU3RhdGVNYXNrICovLFxuICAgICAgICAgICAgY3JlYXRpb25Nb2RlOiAhIShmbGFncyAmIDQgLyogQ3JlYXRpb25Nb2RlICovKSxcbiAgICAgICAgICAgIGZpcnN0Vmlld1Bhc3M6ICEhKGZsYWdzICYgOCAvKiBGaXJzdExWaWV3UGFzcyAqLyksXG4gICAgICAgICAgICBjaGVja0Fsd2F5czogISEoZmxhZ3MgJiAxNiAvKiBDaGVja0Fsd2F5cyAqLyksXG4gICAgICAgICAgICBkaXJ0eTogISEoZmxhZ3MgJiA2NCAvKiBEaXJ0eSAqLyksXG4gICAgICAgICAgICBhdHRhY2hlZDogISEoZmxhZ3MgJiAxMjggLyogQXR0YWNoZWQgKi8pLFxuICAgICAgICAgICAgZGVzdHJveWVkOiAhIShmbGFncyAmIDI1NiAvKiBEZXN0cm95ZWQgKi8pLFxuICAgICAgICAgICAgaXNSb290OiAhIShmbGFncyAmIDUxMiAvKiBJc1Jvb3QgKi8pLFxuICAgICAgICAgICAgaW5kZXhXaXRoaW5Jbml0UGhhc2U6IGZsYWdzID4+IDExIC8qIEluZGV4V2l0aGluSW5pdFBoYXNlU2hpZnQgKi8sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldCBwYXJlbnQoKSB7XG4gICAgICAgIHJldHVybiB0b0RlYnVnKHRoaXMuX3Jhd19sVmlld1tQQVJFTlRdKTtcbiAgICB9XG4gICAgZ2V0IGhvc3RIVE1MKCkge1xuICAgICAgICByZXR1cm4gdG9IdG1sKHRoaXMuX3Jhd19sVmlld1tIT1NUXSwgdHJ1ZSk7XG4gICAgfVxuICAgIGdldCBodG1sKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMubm9kZXMgfHwgW10pLm1hcChtYXBUb0hUTUwpLmpvaW4oJycpO1xuICAgIH1cbiAgICBnZXQgY29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd19sVmlld1tDT05URVhUXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHRyZWUgb2Ygbm9kZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50IGBMVmlld2AuIFRoZSBub2RlcyBoYXZlIGJlZW4gbm9ybWFsaXplZCBpbnRvXG4gICAgICogYSB0cmVlIHN0cnVjdHVyZSB3aXRoIHJlbGV2YW50IGRldGFpbHMgcHVsbGVkIG91dCBmb3IgcmVhZGFiaWxpdHkuXG4gICAgICovXG4gICAgZ2V0IG5vZGVzKCkge1xuICAgICAgICBjb25zdCBsVmlldyA9IHRoaXMuX3Jhd19sVmlldztcbiAgICAgICAgY29uc3QgdE5vZGUgPSBsVmlld1tUVklFV10uZmlyc3RDaGlsZDtcbiAgICAgICAgcmV0dXJuIHRvRGVidWdOb2Rlcyh0Tm9kZSwgbFZpZXcpO1xuICAgIH1cbiAgICBnZXQgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRWaWV3LnRlbXBsYXRlXztcbiAgICB9XG4gICAgZ2V0IHRWaWV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3X2xWaWV3W1RWSUVXXTtcbiAgICB9XG4gICAgZ2V0IGNsZWFudXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXdfbFZpZXdbQ0xFQU5VUF07XG4gICAgfVxuICAgIGdldCBpbmplY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd19sVmlld1tJTkpFQ1RPUiQxXTtcbiAgICB9XG4gICAgZ2V0IHJlbmRlcmVyRmFjdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd19sVmlld1tSRU5ERVJFUl9GQUNUT1JZXTtcbiAgICB9XG4gICAgZ2V0IHJlbmRlcmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3X2xWaWV3W1JFTkRFUkVSXTtcbiAgICB9XG4gICAgZ2V0IHNhbml0aXplcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd19sVmlld1tTQU5JVElaRVJdO1xuICAgIH1cbiAgICBnZXQgY2hpbGRIZWFkKCkge1xuICAgICAgICByZXR1cm4gdG9EZWJ1Zyh0aGlzLl9yYXdfbFZpZXdbQ0hJTERfSEVBRF0pO1xuICAgIH1cbiAgICBnZXQgbmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRvRGVidWcodGhpcy5fcmF3X2xWaWV3W05FWFRdKTtcbiAgICB9XG4gICAgZ2V0IGNoaWxkVGFpbCgpIHtcbiAgICAgICAgcmV0dXJuIHRvRGVidWcodGhpcy5fcmF3X2xWaWV3W0NISUxEX1RBSUxdKTtcbiAgICB9XG4gICAgZ2V0IGRlY2xhcmF0aW9uVmlldygpIHtcbiAgICAgICAgcmV0dXJuIHRvRGVidWcodGhpcy5fcmF3X2xWaWV3W0RFQ0xBUkFUSU9OX1ZJRVddKTtcbiAgICB9XG4gICAgZ2V0IHF1ZXJpZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXdfbFZpZXdbUVVFUklFU107XG4gICAgfVxuICAgIGdldCB0SG9zdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jhd19sVmlld1tUX0hPU1RdO1xuICAgIH1cbiAgICBnZXQgZGVjbHMoKSB7XG4gICAgICAgIHJldHVybiB0b0xWaWV3UmFuZ2UodGhpcy50VmlldywgdGhpcy5fcmF3X2xWaWV3LCBIRUFERVJfT0ZGU0VULCB0aGlzLnRWaWV3LmJpbmRpbmdTdGFydEluZGV4KTtcbiAgICB9XG4gICAgZ2V0IHZhcnMoKSB7XG4gICAgICAgIHJldHVybiB0b0xWaWV3UmFuZ2UodGhpcy50VmlldywgdGhpcy5fcmF3X2xWaWV3LCB0aGlzLnRWaWV3LmJpbmRpbmdTdGFydEluZGV4LCB0aGlzLnRWaWV3LmV4cGFuZG9TdGFydEluZGV4KTtcbiAgICB9XG4gICAgZ2V0IGV4cGFuZG8oKSB7XG4gICAgICAgIHJldHVybiB0b0xWaWV3UmFuZ2UodGhpcy50VmlldywgdGhpcy5fcmF3X2xWaWV3LCB0aGlzLnRWaWV3LmV4cGFuZG9TdGFydEluZGV4LCB0aGlzLl9yYXdfbFZpZXcubGVuZ3RoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTm9ybWFsaXplZCB2aWV3IG9mIGNoaWxkIHZpZXdzIChhbmQgY29udGFpbmVycykgYXR0YWNoZWQgYXQgdGhpcyBsb2NhdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgY2hpbGRWaWV3cygpIHtcbiAgICAgICAgY29uc3QgY2hpbGRWaWV3cyA9IFtdO1xuICAgICAgICBsZXQgY2hpbGQgPSB0aGlzLmNoaWxkSGVhZDtcbiAgICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgICAgICBjaGlsZFZpZXdzLnB1c2goY2hpbGQpO1xuICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZFZpZXdzO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1hcFRvSFRNTChub2RlKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gJ0VsZW1lbnRDb250YWluZXInKSB7XG4gICAgICAgIHJldHVybiAobm9kZS5jaGlsZHJlbiB8fCBbXSkubWFwKG1hcFRvSFRNTCkuam9pbignJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ0ljdUNvbnRhaW5lcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB0b0h0bWwobm9kZS5uYXRpdmUsIHRydWUpIHx8ICcnO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRvTFZpZXdSYW5nZSh0VmlldywgbFZpZXcsIHN0YXJ0LCBlbmQpIHtcbiAgICBsZXQgY29udGVudCA9IFtdO1xuICAgIGZvciAobGV0IGluZGV4ID0gc3RhcnQ7IGluZGV4IDwgZW5kOyBpbmRleCsrKSB7XG4gICAgICAgIGNvbnRlbnQucHVzaCh7IGluZGV4OiBpbmRleCwgdDogdFZpZXcuZGF0YVtpbmRleF0sIGw6IGxWaWV3W2luZGV4XSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQ6IHN0YXJ0LCBlbmQ6IGVuZCwgbGVuZ3RoOiBlbmQgLSBzdGFydCwgY29udGVudDogY29udGVudCB9O1xufVxuLyoqXG4gKiBUdXJucyBhIGZsYXQgbGlzdCBvZiBub2RlcyBpbnRvIGEgdHJlZSBieSB3YWxraW5nIHRoZSBhc3NvY2lhdGVkIGBUTm9kZWAgdHJlZS5cbiAqXG4gKiBAcGFyYW0gdE5vZGVcbiAqIEBwYXJhbSBsVmlld1xuICovXG5mdW5jdGlvbiB0b0RlYnVnTm9kZXModE5vZGUsIGxWaWV3KSB7XG4gICAgaWYgKHROb2RlKSB7XG4gICAgICAgIGNvbnN0IGRlYnVnTm9kZXMgPSBbXTtcbiAgICAgICAgbGV0IHROb2RlQ3Vyc29yID0gdE5vZGU7XG4gICAgICAgIHdoaWxlICh0Tm9kZUN1cnNvcikge1xuICAgICAgICAgICAgZGVidWdOb2Rlcy5wdXNoKGJ1aWxkRGVidWdOb2RlKHROb2RlQ3Vyc29yLCBsVmlldykpO1xuICAgICAgICAgICAgdE5vZGVDdXJzb3IgPSB0Tm9kZUN1cnNvci5uZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWJ1Z05vZGVzO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGJ1aWxkRGVidWdOb2RlKHROb2RlLCBsVmlldykge1xuICAgIGNvbnN0IHJhd1ZhbHVlID0gbFZpZXdbdE5vZGUuaW5kZXhdO1xuICAgIGNvbnN0IG5hdGl2ZSA9IHVud3JhcFJOb2RlKHJhd1ZhbHVlKTtcbiAgICBjb25zdCBmYWN0b3JpZXMgPSBbXTtcbiAgICBjb25zdCBpbnN0YW5jZXMgPSBbXTtcbiAgICBjb25zdCB0VmlldyA9IGxWaWV3W1RWSUVXXTtcbiAgICBmb3IgKGxldCBpID0gdE5vZGUuZGlyZWN0aXZlU3RhcnQ7IGkgPCB0Tm9kZS5kaXJlY3RpdmVFbmQ7IGkrKykge1xuICAgICAgICBjb25zdCBkZWYgPSB0Vmlldy5kYXRhW2ldO1xuICAgICAgICBmYWN0b3JpZXMucHVzaChkZWYudHlwZSk7XG4gICAgICAgIGluc3RhbmNlcy5wdXNoKGxWaWV3W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaHRtbDogdG9IdG1sKG5hdGl2ZSksXG4gICAgICAgIHR5cGU6IHRvVE5vZGVUeXBlQXNTdHJpbmcodE5vZGUudHlwZSksXG4gICAgICAgIHROb2RlLFxuICAgICAgICBuYXRpdmU6IG5hdGl2ZSxcbiAgICAgICAgY2hpbGRyZW46IHRvRGVidWdOb2Rlcyh0Tm9kZS5jaGlsZCwgbFZpZXcpLFxuICAgICAgICBmYWN0b3JpZXMsXG4gICAgICAgIGluc3RhbmNlcyxcbiAgICAgICAgaW5qZWN0b3I6IGJ1aWxkTm9kZUluamVjdG9yRGVidWcodE5vZGUsIHRWaWV3LCBsVmlldyksXG4gICAgICAgIGdldCBpbmplY3RvclJlc29sdXRpb25QYXRoKCkge1xuICAgICAgICAgICAgcmV0dXJuIHROb2RlLmRlYnVnTm9kZUluamVjdG9yUGF0aChsVmlldyk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGJ1aWxkTm9kZUluamVjdG9yRGVidWcodE5vZGUsIHRWaWV3LCBsVmlldykge1xuICAgIGNvbnN0IHZpZXdQcm92aWRlcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gdE5vZGUucHJvdmlkZXJJbmRleFN0YXJ0XzsgaSA8IHROb2RlLnByb3ZpZGVySW5kZXhFbmRfOyBpKyspIHtcbiAgICAgICAgdmlld1Byb3ZpZGVycy5wdXNoKHRWaWV3LmRhdGFbaV0pO1xuICAgIH1cbiAgICBjb25zdCBwcm92aWRlcnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gdE5vZGUucHJvdmlkZXJJbmRleEVuZF87IGkgPCB0Tm9kZS5kaXJlY3RpdmVFbmQ7IGkrKykge1xuICAgICAgICBwcm92aWRlcnMucHVzaCh0Vmlldy5kYXRhW2ldKTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZUluamVjdG9yRGVidWcgPSB7XG4gICAgICAgIGJsb29tOiB0b0Jsb29tKGxWaWV3LCB0Tm9kZS5pbmplY3RvckluZGV4KSxcbiAgICAgICAgY3VtdWxhdGl2ZUJsb29tOiB0b0Jsb29tKHRWaWV3LmRhdGEsIHROb2RlLmluamVjdG9ySW5kZXgpLFxuICAgICAgICBwcm92aWRlcnMsXG4gICAgICAgIHZpZXdQcm92aWRlcnMsXG4gICAgICAgIHBhcmVudEluamVjdG9ySW5kZXg6IGxWaWV3W3ROb2RlLnByb3ZpZGVySW5kZXhTdGFydF8gLSAxXSxcbiAgICB9O1xuICAgIHJldHVybiBub2RlSW5qZWN0b3JEZWJ1Zztcbn1cbi8qKlxuICogQ29udmVydCBhIG51bWJlciBhdCBgaWR4YCBsb2NhdGlvbiBpbiBgYXJyYXlgIGludG8gYmluYXJ5IHJlcHJlc2VudGF0aW9uLlxuICpcbiAqIEBwYXJhbSBhcnJheVxuICogQHBhcmFtIGlkeFxuICovXG5mdW5jdGlvbiBiaW5hcnkoYXJyYXksIGlkeCkge1xuICAgIGNvbnN0IHZhbHVlID0gYXJyYXlbaWR4XTtcbiAgICAvLyBJZiBub3QgYSBudW1iZXIgd2UgcHJpbnQgOCBgP2AgdG8gcmV0YWluIGFsaWdubWVudCBidXQgbGV0IHVzZXIga25vdyB0aGF0IGl0IHdhcyBjYWxsZWQgb25cbiAgICAvLyB3cm9uZyB0eXBlLlxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKVxuICAgICAgICByZXR1cm4gJz8/Pz8/Pz8/JztcbiAgICAvLyBXZSBwcmVmaXggMHMgc28gdGhhdCB3ZSBoYXZlIGNvbnN0YW50IGxlbmd0aCBudW1iZXJcbiAgICBjb25zdCB0ZXh0ID0gJzAwMDAwMDAwJyArIHZhbHVlLnRvU3RyaW5nKDIpO1xuICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZyh0ZXh0Lmxlbmd0aCAtIDgpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgYmxvb20gZmlsdGVyIGF0IGxvY2F0aW9uIGBpZHhgIGluIGBhcnJheWAgaW50byBiaW5hcnkgcmVwcmVzZW50YXRpb24uXG4gKlxuICogQHBhcmFtIGFycmF5XG4gKiBAcGFyYW0gaWR4XG4gKi9cbmZ1bmN0aW9uIHRvQmxvb20oYXJyYXksIGlkeCkge1xuICAgIGlmIChpZHggPCAwKSB7XG4gICAgICAgIHJldHVybiAnTk9fTk9ERV9JTkpFQ1RPUic7XG4gICAgfVxuICAgIHJldHVybiBgJHtiaW5hcnkoYXJyYXksIGlkeCArIDcpfV8ke2JpbmFyeShhcnJheSwgaWR4ICsgNil9XyR7YmluYXJ5KGFycmF5LCBpZHggKyA1KX1fJHtiaW5hcnkoYXJyYXksIGlkeCArIDQpfV8ke2JpbmFyeShhcnJheSwgaWR4ICsgMyl9XyR7YmluYXJ5KGFycmF5LCBpZHggKyAyKX1fJHtiaW5hcnkoYXJyYXksIGlkeCArIDEpfV8ke2JpbmFyeShhcnJheSwgaWR4ICsgMCl9YDtcbn1cbmNsYXNzIExDb250YWluZXJEZWJ1ZyB7XG4gICAgY29uc3RydWN0b3IoX3Jhd19sQ29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuX3Jhd19sQ29udGFpbmVyID0gX3Jhd19sQ29udGFpbmVyO1xuICAgIH1cbiAgICBnZXQgaGFzVHJhbnNwbGFudGVkVmlld3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXdfbENvbnRhaW5lcltIQVNfVFJBTlNQTEFOVEVEX1ZJRVdTXTtcbiAgICB9XG4gICAgZ2V0IHZpZXdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3X2xDb250YWluZXIuc2xpY2UoQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQpXG4gICAgICAgICAgICAubWFwKHRvRGVidWcpO1xuICAgIH1cbiAgICBnZXQgcGFyZW50KCkge1xuICAgICAgICByZXR1cm4gdG9EZWJ1Zyh0aGlzLl9yYXdfbENvbnRhaW5lcltQQVJFTlRdKTtcbiAgICB9XG4gICAgZ2V0IG1vdmVkVmlld3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXdfbENvbnRhaW5lcltNT1ZFRF9WSUVXU107XG4gICAgfVxuICAgIGdldCBob3N0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmF3X2xDb250YWluZXJbSE9TVF07XG4gICAgfVxuICAgIGdldCBuYXRpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yYXdfbENvbnRhaW5lcltOQVRJVkVdO1xuICAgIH1cbiAgICBnZXQgbmV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRvRGVidWcodGhpcy5fcmF3X2xDb250YWluZXJbTkVYVF0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBBIHBlcm1hbmVudCBtYXJrZXIgcHJvbWlzZSB3aGljaCBzaWduaWZpZXMgdGhhdCB0aGUgY3VycmVudCBDRCB0cmVlIGlzXG4gKiBjbGVhbi5cbiAqL1xuY29uc3QgX0NMRUFOX1BST01JU0UgPSAoKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSgpO1xuLyoqXG4gKiBJbnZva2UgYEhvc3RCaW5kaW5nc0Z1bmN0aW9uYHMgZm9yIHZpZXcuXG4gKlxuICogVGhpcyBtZXRob2RzIGV4ZWN1dGVzIGBUVmlldy5ob3N0QmluZGluZ09wQ29kZXNgLiBJdCBpcyB1c2VkIHRvIGV4ZWN1dGUgdGhlXG4gKiBgSG9zdEJpbmRpbmdzRnVuY3Rpb25gcyBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgYExWaWV3YC5cbiAqXG4gKiBAcGFyYW0gdFZpZXcgQ3VycmVudCBgVFZpZXdgLlxuICogQHBhcmFtIGxWaWV3IEN1cnJlbnQgYExWaWV3YC5cbiAqL1xuZnVuY3Rpb24gcHJvY2Vzc0hvc3RCaW5kaW5nT3BDb2Rlcyh0VmlldywgbFZpZXcpIHtcbiAgICBjb25zdCBob3N0QmluZGluZ09wQ29kZXMgPSB0Vmlldy5ob3N0QmluZGluZ09wQ29kZXM7XG4gICAgaWYgKGhvc3RCaW5kaW5nT3BDb2RlcyA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuO1xuICAgIHRyeSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaG9zdEJpbmRpbmdPcENvZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBvcENvZGUgPSBob3N0QmluZGluZ09wQ29kZXNbaV07XG4gICAgICAgICAgICBpZiAob3BDb2RlIDwgMCkge1xuICAgICAgICAgICAgICAgIC8vIE5lZ2F0aXZlIG51bWJlcnMgYXJlIGVsZW1lbnQgaW5kZXhlcy5cbiAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZEluZGV4KH5vcENvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUG9zaXRpdmUgbnVtYmVycyBhcmUgTnVtYmVyVHVwbGUgd2hpY2ggc3RvcmUgYmluZGluZ1Jvb3RJbmRleCBhbmQgZGlyZWN0aXZlSW5kZXguXG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlSWR4ID0gb3BDb2RlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdSb290SW5keCA9IGhvc3RCaW5kaW5nT3BDb2Rlc1srK2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RCaW5kaW5nRm4gPSBob3N0QmluZGluZ09wQ29kZXNbKytpXTtcbiAgICAgICAgICAgICAgICBzZXRCaW5kaW5nUm9vdEZvckhvc3RCaW5kaW5ncyhiaW5kaW5nUm9vdEluZHgsIGRpcmVjdGl2ZUlkeCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IGxWaWV3W2RpcmVjdGl2ZUlkeF07XG4gICAgICAgICAgICAgICAgaG9zdEJpbmRpbmdGbigyIC8qIFVwZGF0ZSAqLywgY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHNldFNlbGVjdGVkSW5kZXgoLTEpO1xuICAgIH1cbn1cbi8qKiBSZWZyZXNoZXMgYWxsIGNvbnRlbnQgcXVlcmllcyBkZWNsYXJlZCBieSBkaXJlY3RpdmVzIGluIGEgZ2l2ZW4gdmlldyAqL1xuZnVuY3Rpb24gcmVmcmVzaENvbnRlbnRRdWVyaWVzKHRWaWV3LCBsVmlldykge1xuICAgIGNvbnN0IGNvbnRlbnRRdWVyaWVzID0gdFZpZXcuY29udGVudFF1ZXJpZXM7XG4gICAgaWYgKGNvbnRlbnRRdWVyaWVzICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudFF1ZXJpZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5U3RhcnRJZHggPSBjb250ZW50UXVlcmllc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZURlZklkeCA9IGNvbnRlbnRRdWVyaWVzW2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChkaXJlY3RpdmVEZWZJZHggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aXZlRGVmID0gdFZpZXcuZGF0YVtkaXJlY3RpdmVEZWZJZHhdO1xuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGRpcmVjdGl2ZURlZiwgJ0RpcmVjdGl2ZURlZiBub3QgZm91bmQuJyk7XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydERlZmluZWQoZGlyZWN0aXZlRGVmLmNvbnRlbnRRdWVyaWVzLCAnY29udGVudFF1ZXJpZXMgZnVuY3Rpb24gc2hvdWxkIGJlIGRlZmluZWQnKTtcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50UXVlcnlJbmRleChxdWVyeVN0YXJ0SWR4KTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVEZWYuY29udGVudFF1ZXJpZXMoMiAvKiBVcGRhdGUgKi8sIGxWaWV3W2RpcmVjdGl2ZURlZklkeF0sIGRpcmVjdGl2ZURlZklkeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKiogUmVmcmVzaGVzIGNoaWxkIGNvbXBvbmVudHMgaW4gdGhlIGN1cnJlbnQgdmlldyAodXBkYXRlIG1vZGUpLiAqL1xuZnVuY3Rpb24gcmVmcmVzaENoaWxkQ29tcG9uZW50cyhob3N0TFZpZXcsIGNvbXBvbmVudHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbXBvbmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVmcmVzaENvbXBvbmVudChob3N0TFZpZXcsIGNvbXBvbmVudHNbaV0pO1xuICAgIH1cbn1cbi8qKiBSZW5kZXJzIGNoaWxkIGNvbXBvbmVudHMgaW4gdGhlIGN1cnJlbnQgdmlldyAoY3JlYXRpb24gbW9kZSkuICovXG5mdW5jdGlvbiByZW5kZXJDaGlsZENvbXBvbmVudHMoaG9zdExWaWV3LCBjb21wb25lbnRzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21wb25lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlbmRlckNvbXBvbmVudCQxKGhvc3RMVmlldywgY29tcG9uZW50c1tpXSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlTFZpZXcocGFyZW50TFZpZXcsIHRWaWV3LCBjb250ZXh0LCBmbGFncywgaG9zdCwgdEhvc3ROb2RlLCByZW5kZXJlckZhY3RvcnksIHJlbmRlcmVyLCBzYW5pdGl6ZXIsIGluamVjdG9yKSB7XG4gICAgY29uc3QgbFZpZXcgPSBuZ0Rldk1vZGUgPyBjbG9uZVRvTFZpZXdGcm9tVFZpZXdCbHVlcHJpbnQodFZpZXcpIDogdFZpZXcuYmx1ZXByaW50LnNsaWNlKCk7XG4gICAgbFZpZXdbSE9TVF0gPSBob3N0O1xuICAgIGxWaWV3W0ZMQUdTXSA9IGZsYWdzIHwgNCAvKiBDcmVhdGlvbk1vZGUgKi8gfCAxMjggLyogQXR0YWNoZWQgKi8gfCA4IC8qIEZpcnN0TFZpZXdQYXNzICovO1xuICAgIHJlc2V0UHJlT3JkZXJIb29rRmxhZ3MobFZpZXcpO1xuICAgIG5nRGV2TW9kZSAmJiB0Vmlldy5kZWNsVE5vZGUgJiYgcGFyZW50TFZpZXcgJiYgYXNzZXJ0VE5vZGVGb3JMVmlldyh0Vmlldy5kZWNsVE5vZGUsIHBhcmVudExWaWV3KTtcbiAgICBsVmlld1tQQVJFTlRdID0gbFZpZXdbREVDTEFSQVRJT05fVklFV10gPSBwYXJlbnRMVmlldztcbiAgICBsVmlld1tDT05URVhUXSA9IGNvbnRleHQ7XG4gICAgbFZpZXdbUkVOREVSRVJfRkFDVE9SWV0gPSAocmVuZGVyZXJGYWN0b3J5IHx8IHBhcmVudExWaWV3ICYmIHBhcmVudExWaWV3W1JFTkRFUkVSX0ZBQ1RPUlldKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChsVmlld1tSRU5ERVJFUl9GQUNUT1JZXSwgJ1JlbmRlcmVyRmFjdG9yeSBpcyByZXF1aXJlZCcpO1xuICAgIGxWaWV3W1JFTkRFUkVSXSA9IChyZW5kZXJlciB8fCBwYXJlbnRMVmlldyAmJiBwYXJlbnRMVmlld1tSRU5ERVJFUl0pO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGxWaWV3W1JFTkRFUkVSXSwgJ1JlbmRlcmVyIGlzIHJlcXVpcmVkJyk7XG4gICAgbFZpZXdbU0FOSVRJWkVSXSA9IHNhbml0aXplciB8fCBwYXJlbnRMVmlldyAmJiBwYXJlbnRMVmlld1tTQU5JVElaRVJdIHx8IG51bGw7XG4gICAgbFZpZXdbSU5KRUNUT1IkMV0gPSBpbmplY3RvciB8fCBwYXJlbnRMVmlldyAmJiBwYXJlbnRMVmlld1tJTkpFQ1RPUiQxXSB8fCBudWxsO1xuICAgIGxWaWV3W1RfSE9TVF0gPSB0SG9zdE5vZGU7XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydEVxdWFsKHRWaWV3LnR5cGUgPT0gMiAvKiBFbWJlZGRlZCAqLyA/IHBhcmVudExWaWV3ICE9PSBudWxsIDogdHJ1ZSwgdHJ1ZSwgJ0VtYmVkZGVkIHZpZXdzIG11c3QgaGF2ZSBwYXJlbnRMVmlldycpO1xuICAgIGxWaWV3W0RFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXXSA9XG4gICAgICAgIHRWaWV3LnR5cGUgPT0gMiAvKiBFbWJlZGRlZCAqLyA/IHBhcmVudExWaWV3W0RFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXXSA6IGxWaWV3O1xuICAgIG5nRGV2TW9kZSAmJiBhdHRhY2hMVmlld0RlYnVnKGxWaWV3KTtcbiAgICByZXR1cm4gbFZpZXc7XG59XG5mdW5jdGlvbiBnZXRPckNyZWF0ZVROb2RlKHRWaWV3LCBpbmRleCwgdHlwZSwgbmFtZSwgYXR0cnMpIHtcbiAgICBuZ0Rldk1vZGUgJiYgaW5kZXggIT09IDAgJiYgLy8gMCBhcmUgYm9ndXMgbm9kZXMgYW5kIHRoZXkgYXJlIE9LLiBTZWUgYGNyZWF0ZUNvbnRhaW5lclJlZmAgaW5cbiAgICAgICAgLy8gYHZpZXdfZW5naW5lX2NvbXBhdGliaWxpdHlgIGZvciBhZGRpdGlvbmFsIGNvbnRleHQuXG4gICAgICAgIGFzc2VydEdyZWF0ZXJUaGFuT3JFcXVhbChpbmRleCwgSEVBREVSX09GRlNFVCwgJ1ROb2RlcyBjYW5cXCd0IGJlIGluIHRoZSBMVmlldyBoZWFkZXIuJyk7XG4gICAgLy8gS2VlcCB0aGlzIGZ1bmN0aW9uIHNob3J0LCBzbyB0aGF0IHRoZSBWTSB3aWxsIGlubGluZSBpdC5cbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0UHVyZVROb2RlVHlwZSh0eXBlKTtcbiAgICBsZXQgdE5vZGUgPSB0Vmlldy5kYXRhW2luZGV4XTtcbiAgICBpZiAodE5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgdE5vZGUgPSBjcmVhdGVUTm9kZUF0SW5kZXgodFZpZXcsIGluZGV4LCB0eXBlLCBuYW1lLCBhdHRycyk7XG4gICAgICAgIGlmIChpc0luSTE4bkJsb2NrKCkpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBpbiBpMThuIGJsb2NrIHRoZW4gYWxsIGVsZW1lbnRzIHNob3VsZCBiZSBwcmUgZGVjbGFyZWQgdGhyb3VnaCBgUGxhY2Vob2xkZXJgXG4gICAgICAgICAgICAvLyBTZWUgYFROb2RlVHlwZS5QbGFjZWhvbGRlcmAgYW5kIGBMRnJhbWUuaW5JMThuYCBmb3IgbW9yZSBjb250ZXh0LlxuICAgICAgICAgICAgLy8gSWYgdGhlIGBUTm9kZWAgd2FzIG5vdCBwcmUtZGVjbGFyZWQgdGhhbiBpdCBtZWFucyBpdCB3YXMgbm90IG1lbnRpb25lZCB3aGljaCBtZWFucyBpdCB3YXNcbiAgICAgICAgICAgIC8vIHJlbW92ZWQsIHNvIHdlIG1hcmsgaXQgYXMgZGV0YWNoZWQuXG4gICAgICAgICAgICB0Tm9kZS5mbGFncyB8PSA2NCAvKiBpc0RldGFjaGVkICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHROb2RlLnR5cGUgJiA2NCAvKiBQbGFjZWhvbGRlciAqLykge1xuICAgICAgICB0Tm9kZS50eXBlID0gdHlwZTtcbiAgICAgICAgdE5vZGUudmFsdWUgPSBuYW1lO1xuICAgICAgICB0Tm9kZS5hdHRycyA9IGF0dHJzO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBnZXRDdXJyZW50UGFyZW50VE5vZGUoKTtcbiAgICAgICAgdE5vZGUuaW5qZWN0b3JJbmRleCA9IHBhcmVudCA9PT0gbnVsbCA/IC0xIDogcGFyZW50LmluamVjdG9ySW5kZXg7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRUTm9kZUZvclRWaWV3KHROb2RlLCB0Vmlldyk7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbChpbmRleCwgdE5vZGUuaW5kZXgsICdFeHBlY3Rpbmcgc2FtZSBpbmRleCcpO1xuICAgIH1cbiAgICBzZXRDdXJyZW50VE5vZGUodE5vZGUsIHRydWUpO1xuICAgIHJldHVybiB0Tm9kZTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVROb2RlQXRJbmRleCh0VmlldywgaW5kZXgsIHR5cGUsIG5hbWUsIGF0dHJzKSB7XG4gICAgY29uc3QgY3VycmVudFROb2RlID0gZ2V0Q3VycmVudFROb2RlUGxhY2Vob2xkZXJPaygpO1xuICAgIGNvbnN0IGlzUGFyZW50ID0gaXNDdXJyZW50VE5vZGVQYXJlbnQoKTtcbiAgICBjb25zdCBwYXJlbnQgPSBpc1BhcmVudCA/IGN1cnJlbnRUTm9kZSA6IGN1cnJlbnRUTm9kZSAmJiBjdXJyZW50VE5vZGUucGFyZW50O1xuICAgIC8vIFBhcmVudHMgY2Fubm90IGNyb3NzIGNvbXBvbmVudCBib3VuZGFyaWVzIGJlY2F1c2UgY29tcG9uZW50cyB3aWxsIGJlIHVzZWQgaW4gbXVsdGlwbGUgcGxhY2VzLlxuICAgIGNvbnN0IHROb2RlID0gdFZpZXcuZGF0YVtpbmRleF0gPVxuICAgICAgICBjcmVhdGVUTm9kZSh0VmlldywgcGFyZW50LCB0eXBlLCBpbmRleCwgbmFtZSwgYXR0cnMpO1xuICAgIC8vIEFzc2lnbiBhIHBvaW50ZXIgdG8gdGhlIGZpcnN0IGNoaWxkIG5vZGUgb2YgYSBnaXZlbiB2aWV3LiBUaGUgZmlyc3Qgbm9kZSBpcyBub3QgYWx3YXlzIHRoZSBvbmVcbiAgICAvLyBhdCBpbmRleCAwLCBpbiBjYXNlIG9mIGkxOG4sIGluZGV4IDAgY2FuIGJlIHRoZSBpbnN0cnVjdGlvbiBgaTE4blN0YXJ0YCBhbmQgdGhlIGZpcnN0IG5vZGUgaGFzXG4gICAgLy8gdGhlIGluZGV4IDEgb3IgbW9yZSwgc28gd2UgY2FuJ3QganVzdCBjaGVjayBub2RlIGluZGV4LlxuICAgIGlmICh0Vmlldy5maXJzdENoaWxkID09PSBudWxsKSB7XG4gICAgICAgIHRWaWV3LmZpcnN0Q2hpbGQgPSB0Tm9kZTtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRUTm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNQYXJlbnQpIHtcbiAgICAgICAgICAgIC8vIEZJWE1FKG1pc2tvKTogVGhpcyBsb2dpYyBsb29rcyB1bm5lY2Vzc2FyaWx5IGNvbXBsaWNhdGVkLiBDb3VsZCB3ZSBzaW1wbGlmeT9cbiAgICAgICAgICAgIGlmIChjdXJyZW50VE5vZGUuY2hpbGQgPT0gbnVsbCAmJiB0Tm9kZS5wYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgaW4gdGhlIHNhbWUgdmlldywgd2hpY2ggbWVhbnMgd2UgYXJlIGFkZGluZyBjb250ZW50IG5vZGUgdG8gdGhlIHBhcmVudCB2aWV3LlxuICAgICAgICAgICAgICAgIGN1cnJlbnRUTm9kZS5jaGlsZCA9IHROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRUTm9kZS5uZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgaTE4biB0aGUgYGN1cnJlbnRUTm9kZWAgbWF5IGFscmVhZHkgYmUgbGlua2VkLCBpbiB3aGljaCBjYXNlIHdlIGRvbid0IHdhbnRcbiAgICAgICAgICAgICAgICAvLyB0byBicmVhayB0aGUgbGlua3Mgd2hpY2ggaTE4biBjcmVhdGVkLlxuICAgICAgICAgICAgICAgIGN1cnJlbnRUTm9kZS5uZXh0ID0gdE5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHROb2RlO1xufVxuLyoqXG4gKiBXaGVuIGVsZW1lbnRzIGFyZSBjcmVhdGVkIGR5bmFtaWNhbGx5IGFmdGVyIGEgdmlldyBibHVlcHJpbnQgaXMgY3JlYXRlZCAoZS5nLiB0aHJvdWdoXG4gKiBpMThuQXBwbHkoKSksIHdlIG5lZWQgdG8gYWRqdXN0IHRoZSBibHVlcHJpbnQgZm9yIGZ1dHVyZVxuICogdGVtcGxhdGUgcGFzc2VzLlxuICpcbiAqIEBwYXJhbSB0VmlldyBgVFZpZXdgIGFzc29jaWF0ZWQgd2l0aCBgTFZpZXdgXG4gKiBAcGFyYW0gbFZpZXcgVGhlIGBMVmlld2AgY29udGFpbmluZyB0aGUgYmx1ZXByaW50IHRvIGFkanVzdFxuICogQHBhcmFtIG51bVNsb3RzVG9BbGxvYyBUaGUgbnVtYmVyIG9mIHNsb3RzIHRvIGFsbG9jIGluIHRoZSBMVmlldywgc2hvdWxkIGJlID4wXG4gKiBAcGFyYW0gaW5pdGlhbFZhbHVlIEluaXRpYWwgdmFsdWUgdG8gc3RvcmUgaW4gYmx1ZXByaW50XG4gKi9cbmZ1bmN0aW9uIGFsbG9jRXhwYW5kbyh0VmlldywgbFZpZXcsIG51bVNsb3RzVG9BbGxvYywgaW5pdGlhbFZhbHVlKSB7XG4gICAgaWYgKG51bVNsb3RzVG9BbGxvYyA9PT0gMClcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgYXNzZXJ0Rmlyc3RDcmVhdGVQYXNzKHRWaWV3KTtcbiAgICAgICAgYXNzZXJ0U2FtZSh0VmlldywgbFZpZXdbVFZJRVddLCAnYExWaWV3YCBtdXN0IGJlIGFzc29jaWF0ZWQgd2l0aCBgVFZpZXdgIScpO1xuICAgICAgICBhc3NlcnRFcXVhbCh0Vmlldy5kYXRhLmxlbmd0aCwgbFZpZXcubGVuZ3RoLCAnRXhwZWN0aW5nIExWaWV3IHRvIGJlIHNhbWUgc2l6ZSBhcyBUVmlldycpO1xuICAgICAgICBhc3NlcnRFcXVhbCh0Vmlldy5kYXRhLmxlbmd0aCwgdFZpZXcuYmx1ZXByaW50Lmxlbmd0aCwgJ0V4cGVjdGluZyBCbHVlcHJpbnQgdG8gYmUgc2FtZSBzaXplIGFzIFRWaWV3Jyk7XG4gICAgICAgIGFzc2VydEZpcnN0VXBkYXRlUGFzcyh0Vmlldyk7XG4gICAgfVxuICAgIGNvbnN0IGFsbG9jSWR4ID0gbFZpZXcubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtU2xvdHNUb0FsbG9jOyBpKyspIHtcbiAgICAgICAgbFZpZXcucHVzaChpbml0aWFsVmFsdWUpO1xuICAgICAgICB0Vmlldy5ibHVlcHJpbnQucHVzaChpbml0aWFsVmFsdWUpO1xuICAgICAgICB0Vmlldy5kYXRhLnB1c2gobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBhbGxvY0lkeDtcbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vIFJlbmRlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogUHJvY2Vzc2VzIGEgdmlldyBpbiB0aGUgY3JlYXRpb24gbW9kZS4gVGhpcyBpbmNsdWRlcyBhIG51bWJlciBvZiBzdGVwcyBpbiBhIHNwZWNpZmljIG9yZGVyOlxuICogLSBjcmVhdGluZyB2aWV3IHF1ZXJ5IGZ1bmN0aW9ucyAoaWYgYW55KTtcbiAqIC0gZXhlY3V0aW5nIGEgdGVtcGxhdGUgZnVuY3Rpb24gaW4gdGhlIGNyZWF0aW9uIG1vZGU7XG4gKiAtIHVwZGF0aW5nIHN0YXRpYyBxdWVyaWVzIChpZiBhbnkpO1xuICogLSBjcmVhdGluZyBjaGlsZCBjb21wb25lbnRzIGRlZmluZWQgaW4gYSBnaXZlbiB2aWV3LlxuICovXG5mdW5jdGlvbiByZW5kZXJWaWV3KHRWaWV3LCBsVmlldywgY29udGV4dCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbChpc0NyZWF0aW9uTW9kZShsVmlldyksIHRydWUsICdTaG91bGQgYmUgcnVuIGluIGNyZWF0aW9uIG1vZGUnKTtcbiAgICBlbnRlclZpZXcobFZpZXcpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHZpZXdRdWVyeSA9IHRWaWV3LnZpZXdRdWVyeTtcbiAgICAgICAgaWYgKHZpZXdRdWVyeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZXhlY3V0ZVZpZXdRdWVyeUZuKDEgLyogQ3JlYXRlICovLCB2aWV3UXVlcnksIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEV4ZWN1dGUgYSB0ZW1wbGF0ZSBhc3NvY2lhdGVkIHdpdGggdGhpcyB2aWV3LCBpZiBpdCBleGlzdHMuIEEgdGVtcGxhdGUgZnVuY3Rpb24gbWlnaHQgbm90IGJlXG4gICAgICAgIC8vIGRlZmluZWQgZm9yIHRoZSByb290IGNvbXBvbmVudCB2aWV3cy5cbiAgICAgICAgY29uc3QgdGVtcGxhdGVGbiA9IHRWaWV3LnRlbXBsYXRlO1xuICAgICAgICBpZiAodGVtcGxhdGVGbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZXhlY3V0ZVRlbXBsYXRlKHRWaWV3LCBsVmlldywgdGVtcGxhdGVGbiwgMSAvKiBDcmVhdGUgKi8sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRoaXMgbmVlZHMgdG8gYmUgc2V0IGJlZm9yZSBjaGlsZHJlbiBhcmUgcHJvY2Vzc2VkIHRvIHN1cHBvcnQgcmVjdXJzaXZlIGNvbXBvbmVudHMuXG4gICAgICAgIC8vIFRoaXMgbXVzdCBiZSBzZXQgdG8gZmFsc2UgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGZpcnN0IGNyZWF0aW9uIHJ1biBiZWNhdXNlIGluIGFuXG4gICAgICAgIC8vIG5nRm9yIGxvb3AsIGFsbCB0aGUgdmlld3Mgd2lsbCBiZSBjcmVhdGVkIHRvZ2V0aGVyIGJlZm9yZSB1cGRhdGUgbW9kZSBydW5zIGFuZCB0dXJuc1xuICAgICAgICAvLyBvZmYgZmlyc3RDcmVhdGVQYXNzLiBJZiB3ZSBkb24ndCBzZXQgaXQgaGVyZSwgaW5zdGFuY2VzIHdpbGwgcGVyZm9ybSBkaXJlY3RpdmVcbiAgICAgICAgLy8gbWF0Y2hpbmcsIGV0YyBhZ2FpbiBhbmQgYWdhaW4uXG4gICAgICAgIGlmICh0Vmlldy5maXJzdENyZWF0ZVBhc3MpIHtcbiAgICAgICAgICAgIHRWaWV3LmZpcnN0Q3JlYXRlUGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIFdlIHJlc29sdmUgY29udGVudCBxdWVyaWVzIHNwZWNpZmljYWxseSBtYXJrZWQgYXMgYHN0YXRpY2AgaW4gY3JlYXRpb24gbW9kZS4gRHluYW1pY1xuICAgICAgICAvLyBjb250ZW50IHF1ZXJpZXMgYXJlIHJlc29sdmVkIGR1cmluZyBjaGFuZ2UgZGV0ZWN0aW9uIChpLmUuIHVwZGF0ZSBtb2RlKSwgYWZ0ZXIgZW1iZWRkZWRcbiAgICAgICAgLy8gdmlld3MgYXJlIHJlZnJlc2hlZCAoc2VlIGJsb2NrIGFib3ZlKS5cbiAgICAgICAgaWYgKHRWaWV3LnN0YXRpY0NvbnRlbnRRdWVyaWVzKSB7XG4gICAgICAgICAgICByZWZyZXNoQ29udGVudFF1ZXJpZXModFZpZXcsIGxWaWV3KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBtdXN0IG1hdGVyaWFsaXplIHF1ZXJ5IHJlc3VsdHMgYmVmb3JlIGNoaWxkIGNvbXBvbmVudHMgYXJlIHByb2Nlc3NlZFxuICAgICAgICAvLyBpbiBjYXNlIGEgY2hpbGQgY29tcG9uZW50IGhhcyBwcm9qZWN0ZWQgYSBjb250YWluZXIuIFRoZSBMQ29udGFpbmVyIG5lZWRzXG4gICAgICAgIC8vIHRvIGV4aXN0IHNvIHRoZSBlbWJlZGRlZCB2aWV3cyBhcmUgcHJvcGVybHkgYXR0YWNoZWQgYnkgdGhlIGNvbnRhaW5lci5cbiAgICAgICAgaWYgKHRWaWV3LnN0YXRpY1ZpZXdRdWVyaWVzKSB7XG4gICAgICAgICAgICBleGVjdXRlVmlld1F1ZXJ5Rm4oMiAvKiBVcGRhdGUgKi8sIHRWaWV3LnZpZXdRdWVyeSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVuZGVyIGNoaWxkIGNvbXBvbmVudCB2aWV3cy5cbiAgICAgICAgY29uc3QgY29tcG9uZW50cyA9IHRWaWV3LmNvbXBvbmVudHM7XG4gICAgICAgIGlmIChjb21wb25lbnRzICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZW5kZXJDaGlsZENvbXBvbmVudHMobFZpZXcsIGNvbXBvbmVudHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZiB3ZSBkaWRuJ3QgbWFuYWdlIHRvIGdldCBwYXN0IHRoZSBmaXJzdCB0ZW1wbGF0ZSBwYXNzIGR1ZSB0b1xuICAgICAgICAvLyBhbiBlcnJvciwgbWFyayB0aGUgdmlldyBhcyBjb3JydXB0ZWQgc28gd2UgY2FuIHRyeSB0byByZWNvdmVyLlxuICAgICAgICBpZiAodFZpZXcuZmlyc3RDcmVhdGVQYXNzKSB7XG4gICAgICAgICAgICB0Vmlldy5pbmNvbXBsZXRlRmlyc3RQYXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIHRWaWV3LmZpcnN0Q3JlYXRlUGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgbFZpZXdbRkxBR1NdICY9IH40IC8qIENyZWF0aW9uTW9kZSAqLztcbiAgICAgICAgbGVhdmVWaWV3KCk7XG4gICAgfVxufVxuLyoqXG4gKiBQcm9jZXNzZXMgYSB2aWV3IGluIHVwZGF0ZSBtb2RlLiBUaGlzIGluY2x1ZGVzIGEgbnVtYmVyIG9mIHN0ZXBzIGluIGEgc3BlY2lmaWMgb3JkZXI6XG4gKiAtIGV4ZWN1dGluZyBhIHRlbXBsYXRlIGZ1bmN0aW9uIGluIHVwZGF0ZSBtb2RlO1xuICogLSBleGVjdXRpbmcgaG9va3M7XG4gKiAtIHJlZnJlc2hpbmcgcXVlcmllcztcbiAqIC0gc2V0dGluZyBob3N0IGJpbmRpbmdzO1xuICogLSByZWZyZXNoaW5nIGNoaWxkIChlbWJlZGRlZCBhbmQgY29tcG9uZW50KSB2aWV3cy5cbiAqL1xuZnVuY3Rpb24gcmVmcmVzaFZpZXcodFZpZXcsIGxWaWV3LCB0ZW1wbGF0ZUZuLCBjb250ZXh0KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEVxdWFsKGlzQ3JlYXRpb25Nb2RlKGxWaWV3KSwgZmFsc2UsICdTaG91bGQgYmUgcnVuIGluIHVwZGF0ZSBtb2RlJyk7XG4gICAgY29uc3QgZmxhZ3MgPSBsVmlld1tGTEFHU107XG4gICAgaWYgKChmbGFncyAmIDI1NiAvKiBEZXN0cm95ZWQgKi8pID09PSAyNTYgLyogRGVzdHJveWVkICovKVxuICAgICAgICByZXR1cm47XG4gICAgZW50ZXJWaWV3KGxWaWV3KTtcbiAgICAvLyBDaGVjayBubyBjaGFuZ2VzIG1vZGUgaXMgYSBkZXYgb25seSBtb2RlIHVzZWQgdG8gdmVyaWZ5IHRoYXQgYmluZGluZ3MgaGF2ZSBub3QgY2hhbmdlZFxuICAgIC8vIHNpbmNlIHRoZXkgd2VyZSBhc3NpZ25lZC4gV2UgZG8gbm90IHdhbnQgdG8gZXhlY3V0ZSBsaWZlY3ljbGUgaG9va3MgaW4gdGhhdCBtb2RlLlxuICAgIGNvbnN0IGlzSW5DaGVja05vQ2hhbmdlc1Bhc3MgPSBpc0luQ2hlY2tOb0NoYW5nZXNNb2RlKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgcmVzZXRQcmVPcmRlckhvb2tGbGFncyhsVmlldyk7XG4gICAgICAgIHNldEJpbmRpbmdJbmRleCh0Vmlldy5iaW5kaW5nU3RhcnRJbmRleCk7XG4gICAgICAgIGlmICh0ZW1wbGF0ZUZuICE9PSBudWxsKSB7XG4gICAgICAgICAgICBleGVjdXRlVGVtcGxhdGUodFZpZXcsIGxWaWV3LCB0ZW1wbGF0ZUZuLCAyIC8qIFVwZGF0ZSAqLywgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaG9va3NJbml0UGhhc2VDb21wbGV0ZWQgPSAoZmxhZ3MgJiAzIC8qIEluaXRQaGFzZVN0YXRlTWFzayAqLykgPT09IDMgLyogSW5pdFBoYXNlQ29tcGxldGVkICovO1xuICAgICAgICAvLyBleGVjdXRlIHByZS1vcmRlciBob29rcyAoT25Jbml0LCBPbkNoYW5nZXMsIERvQ2hlY2spXG4gICAgICAgIC8vIFBFUkYgV0FSTklORzogZG8gTk9UIGV4dHJhY3QgdGhpcyB0byBhIHNlcGFyYXRlIGZ1bmN0aW9uIHdpdGhvdXQgcnVubmluZyBiZW5jaG1hcmtzXG4gICAgICAgIGlmICghaXNJbkNoZWNrTm9DaGFuZ2VzUGFzcykge1xuICAgICAgICAgICAgaWYgKGhvb2tzSW5pdFBoYXNlQ29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlT3JkZXJDaGVja0hvb2tzID0gdFZpZXcucHJlT3JkZXJDaGVja0hvb2tzO1xuICAgICAgICAgICAgICAgIGlmIChwcmVPcmRlckNoZWNrSG9va3MgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZUNoZWNrSG9va3MobFZpZXcsIHByZU9yZGVyQ2hlY2tIb29rcywgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJlT3JkZXJIb29rcyA9IHRWaWV3LnByZU9yZGVySG9va3M7XG4gICAgICAgICAgICAgICAgaWYgKHByZU9yZGVySG9va3MgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZUluaXRBbmRDaGVja0hvb2tzKGxWaWV3LCBwcmVPcmRlckhvb2tzLCAwIC8qIE9uSW5pdEhvb2tzVG9CZVJ1biAqLywgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGluY3JlbWVudEluaXRQaGFzZUZsYWdzKGxWaWV3LCAwIC8qIE9uSW5pdEhvb2tzVG9CZVJ1biAqLyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmlyc3QgbWFyayB0cmFuc3BsYW50ZWQgdmlld3MgdGhhdCBhcmUgZGVjbGFyZWQgaW4gdGhpcyBsVmlldyBhcyBuZWVkaW5nIGEgcmVmcmVzaCBhdCB0aGVpclxuICAgICAgICAvLyBpbnNlcnRpb24gcG9pbnRzLiBUaGlzIGlzIG5lZWRlZCB0byBhdm9pZCB0aGUgc2l0dWF0aW9uIHdoZXJlIHRoZSB0ZW1wbGF0ZSBpcyBkZWZpbmVkIGluIHRoaXNcbiAgICAgICAgLy8gYExWaWV3YCBidXQgaXRzIGRlY2xhcmF0aW9uIGFwcGVhcnMgYWZ0ZXIgdGhlIGluc2VydGlvbiBjb21wb25lbnQuXG4gICAgICAgIG1hcmtUcmFuc3BsYW50ZWRWaWV3c0ZvclJlZnJlc2gobFZpZXcpO1xuICAgICAgICByZWZyZXNoRW1iZWRkZWRWaWV3cyhsVmlldyk7XG4gICAgICAgIC8vIENvbnRlbnQgcXVlcnkgcmVzdWx0cyBtdXN0IGJlIHJlZnJlc2hlZCBiZWZvcmUgY29udGVudCBob29rcyBhcmUgY2FsbGVkLlxuICAgICAgICBpZiAodFZpZXcuY29udGVudFF1ZXJpZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlZnJlc2hDb250ZW50UXVlcmllcyh0VmlldywgbFZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGV4ZWN1dGUgY29udGVudCBob29rcyAoQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZClcbiAgICAgICAgLy8gUEVSRiBXQVJOSU5HOiBkbyBOT1QgZXh0cmFjdCB0aGlzIHRvIGEgc2VwYXJhdGUgZnVuY3Rpb24gd2l0aG91dCBydW5uaW5nIGJlbmNobWFya3NcbiAgICAgICAgaWYgKCFpc0luQ2hlY2tOb0NoYW5nZXNQYXNzKSB7XG4gICAgICAgICAgICBpZiAoaG9va3NJbml0UGhhc2VDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50Q2hlY2tIb29rcyA9IHRWaWV3LmNvbnRlbnRDaGVja0hvb2tzO1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50Q2hlY2tIb29rcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBleGVjdXRlQ2hlY2tIb29rcyhsVmlldywgY29udGVudENoZWNrSG9va3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRIb29rcyA9IHRWaWV3LmNvbnRlbnRIb29rcztcbiAgICAgICAgICAgICAgICBpZiAoY29udGVudEhvb2tzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVJbml0QW5kQ2hlY2tIb29rcyhsVmlldywgY29udGVudEhvb2tzLCAxIC8qIEFmdGVyQ29udGVudEluaXRIb29rc1RvQmVSdW4gKi8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRJbml0UGhhc2VGbGFncyhsVmlldywgMSAvKiBBZnRlckNvbnRlbnRJbml0SG9va3NUb0JlUnVuICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzSG9zdEJpbmRpbmdPcENvZGVzKHRWaWV3LCBsVmlldyk7XG4gICAgICAgIC8vIFJlZnJlc2ggY2hpbGQgY29tcG9uZW50IHZpZXdzLlxuICAgICAgICBjb25zdCBjb21wb25lbnRzID0gdFZpZXcuY29tcG9uZW50cztcbiAgICAgICAgaWYgKGNvbXBvbmVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJlZnJlc2hDaGlsZENvbXBvbmVudHMobFZpZXcsIGNvbXBvbmVudHMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFZpZXcgcXVlcmllcyBtdXN0IGV4ZWN1dGUgYWZ0ZXIgcmVmcmVzaGluZyBjaGlsZCBjb21wb25lbnRzIGJlY2F1c2UgYSB0ZW1wbGF0ZSBpbiB0aGlzIHZpZXdcbiAgICAgICAgLy8gY291bGQgYmUgaW5zZXJ0ZWQgaW4gYSBjaGlsZCBjb21wb25lbnQuIElmIHRoZSB2aWV3IHF1ZXJ5IGV4ZWN1dGVzIGJlZm9yZSBjaGlsZCBjb21wb25lbnRcbiAgICAgICAgLy8gcmVmcmVzaCwgdGhlIHRlbXBsYXRlIG1pZ2h0IG5vdCB5ZXQgYmUgaW5zZXJ0ZWQuXG4gICAgICAgIGNvbnN0IHZpZXdRdWVyeSA9IHRWaWV3LnZpZXdRdWVyeTtcbiAgICAgICAgaWYgKHZpZXdRdWVyeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZXhlY3V0ZVZpZXdRdWVyeUZuKDIgLyogVXBkYXRlICovLCB2aWV3UXVlcnksIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGV4ZWN1dGUgdmlldyBob29rcyAoQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZClcbiAgICAgICAgLy8gUEVSRiBXQVJOSU5HOiBkbyBOT1QgZXh0cmFjdCB0aGlzIHRvIGEgc2VwYXJhdGUgZnVuY3Rpb24gd2l0aG91dCBydW5uaW5nIGJlbmNobWFya3NcbiAgICAgICAgaWYgKCFpc0luQ2hlY2tOb0NoYW5nZXNQYXNzKSB7XG4gICAgICAgICAgICBpZiAoaG9va3NJbml0UGhhc2VDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3Q2hlY2tIb29rcyA9IHRWaWV3LnZpZXdDaGVja0hvb2tzO1xuICAgICAgICAgICAgICAgIGlmICh2aWV3Q2hlY2tIb29rcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBleGVjdXRlQ2hlY2tIb29rcyhsVmlldywgdmlld0NoZWNrSG9va3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXdIb29rcyA9IHRWaWV3LnZpZXdIb29rcztcbiAgICAgICAgICAgICAgICBpZiAodmlld0hvb2tzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4ZWN1dGVJbml0QW5kQ2hlY2tIb29rcyhsVmlldywgdmlld0hvb2tzLCAyIC8qIEFmdGVyVmlld0luaXRIb29rc1RvQmVSdW4gKi8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRJbml0UGhhc2VGbGFncyhsVmlldywgMiAvKiBBZnRlclZpZXdJbml0SG9va3NUb0JlUnVuICovKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodFZpZXcuZmlyc3RVcGRhdGVQYXNzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IHdlIG9ubHkgZmxpcCB0aGUgZmxhZyBvbiBzdWNjZXNzZnVsIGByZWZyZXNoVmlld2Agb25seVxuICAgICAgICAgICAgLy8gRG9uJ3QgZG8gdGhpcyBpbiBgZmluYWxseWAgYmxvY2suXG4gICAgICAgICAgICAvLyBJZiB3ZSBkaWQgdGhpcyBpbiBgZmluYWxseWAgYmxvY2sgdGhlbiBhbiBleGNlcHRpb24gY291bGQgYmxvY2sgdGhlIGV4ZWN1dGlvbiBvZiBzdHlsaW5nXG4gICAgICAgICAgICAvLyBpbnN0cnVjdGlvbnMgd2hpY2ggaW4gdHVybiB3b3VsZCBiZSB1bmFibGUgdG8gaW5zZXJ0IHRoZW1zZWx2ZXMgaW50byB0aGUgc3R5bGluZyBsaW5rZWRcbiAgICAgICAgICAgIC8vIGxpc3QuIFRoZSByZXN1bHQgb2YgdGhpcyB3b3VsZCBiZSB0aGF0IGlmIHRoZSBleGNlcHRpb24gd291bGQgbm90IGJlIHRocm93IG9uIHN1YnNlcXVlbnQgQ0RcbiAgICAgICAgICAgIC8vIHRoZSBzdHlsaW5nIHdvdWxkIGJlIHVuYWJsZSB0byBwcm9jZXNzIGl0IGRhdGEgYW5kIHJlZmxlY3QgdG8gdGhlIERPTS5cbiAgICAgICAgICAgIHRWaWV3LmZpcnN0VXBkYXRlUGFzcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIERvIG5vdCByZXNldCB0aGUgZGlydHkgc3RhdGUgd2hlbiBydW5uaW5nIGluIGNoZWNrIG5vIGNoYW5nZXMgbW9kZS4gV2UgZG9uJ3Qgd2FudCBjb21wb25lbnRzXG4gICAgICAgIC8vIHRvIGJlaGF2ZSBkaWZmZXJlbnRseSBkZXBlbmRpbmcgb24gd2hldGhlciBjaGVjayBubyBjaGFuZ2VzIGlzIGVuYWJsZWQgb3Igbm90LiBGb3IgZXhhbXBsZTpcbiAgICAgICAgLy8gTWFya2luZyBhbiBPblB1c2ggY29tcG9uZW50IGFzIGRpcnR5IGZyb20gd2l0aGluIHRoZSBgbmdBZnRlclZpZXdJbml0YCBob29rIGluIG9yZGVyIHRvXG4gICAgICAgIC8vIHJlZnJlc2ggYSBgTmdDbGFzc2AgYmluZGluZyBzaG91bGQgd29yay4gSWYgd2Ugd291bGQgcmVzZXQgdGhlIGRpcnR5IHN0YXRlIGluIHRoZSBjaGVja1xuICAgICAgICAvLyBubyBjaGFuZ2VzIGN5Y2xlLCB0aGUgY29tcG9uZW50IHdvdWxkIGJlIG5vdCBiZSBkaXJ0eSBmb3IgdGhlIG5leHQgdXBkYXRlIHBhc3MuIFRoaXMgd291bGRcbiAgICAgICAgLy8gYmUgZGlmZmVyZW50IGluIHByb2R1Y3Rpb24gbW9kZSB3aGVyZSB0aGUgY29tcG9uZW50IGRpcnR5IHN0YXRlIGlzIG5vdCByZXNldC5cbiAgICAgICAgaWYgKCFpc0luQ2hlY2tOb0NoYW5nZXNQYXNzKSB7XG4gICAgICAgICAgICBsVmlld1tGTEFHU10gJj0gfig2NCAvKiBEaXJ0eSAqLyB8IDggLyogRmlyc3RMVmlld1Bhc3MgKi8pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsVmlld1tGTEFHU10gJiAxMDI0IC8qIFJlZnJlc2hUcmFuc3BsYW50ZWRWaWV3ICovKSB7XG4gICAgICAgICAgICBsVmlld1tGTEFHU10gJj0gfjEwMjQgLyogUmVmcmVzaFRyYW5zcGxhbnRlZFZpZXcgKi87XG4gICAgICAgICAgICB1cGRhdGVUcmFuc3BsYW50ZWRWaWV3Q291bnQobFZpZXdbUEFSRU5UXSwgLTEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBsZWF2ZVZpZXcoKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZW5kZXJDb21wb25lbnRPclRlbXBsYXRlKHRWaWV3LCBsVmlldywgdGVtcGxhdGVGbiwgY29udGV4dCkge1xuICAgIGNvbnN0IHJlbmRlcmVyRmFjdG9yeSA9IGxWaWV3W1JFTkRFUkVSX0ZBQ1RPUlldO1xuICAgIGNvbnN0IG5vcm1hbEV4ZWN1dGlvblBhdGggPSAhaXNJbkNoZWNrTm9DaGFuZ2VzTW9kZSgpO1xuICAgIGNvbnN0IGNyZWF0aW9uTW9kZUlzQWN0aXZlID0gaXNDcmVhdGlvbk1vZGUobFZpZXcpO1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChub3JtYWxFeGVjdXRpb25QYXRoICYmICFjcmVhdGlvbk1vZGVJc0FjdGl2ZSAmJiByZW5kZXJlckZhY3RvcnkuYmVnaW4pIHtcbiAgICAgICAgICAgIHJlbmRlcmVyRmFjdG9yeS5iZWdpbigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjcmVhdGlvbk1vZGVJc0FjdGl2ZSkge1xuICAgICAgICAgICAgcmVuZGVyVmlldyh0VmlldywgbFZpZXcsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJlZnJlc2hWaWV3KHRWaWV3LCBsVmlldywgdGVtcGxhdGVGbiwgY29udGV4dCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBpZiAobm9ybWFsRXhlY3V0aW9uUGF0aCAmJiAhY3JlYXRpb25Nb2RlSXNBY3RpdmUgJiYgcmVuZGVyZXJGYWN0b3J5LmVuZCkge1xuICAgICAgICAgICAgcmVuZGVyZXJGYWN0b3J5LmVuZCgpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZXhlY3V0ZVRlbXBsYXRlKHRWaWV3LCBsVmlldywgdGVtcGxhdGVGbiwgcmYsIGNvbnRleHQpIHtcbiAgICBjb25zdCBwcmV2U2VsZWN0ZWRJbmRleCA9IGdldFNlbGVjdGVkSW5kZXgoKTtcbiAgICBjb25zdCBpc1VwZGF0ZVBoYXNlID0gcmYgJiAyIC8qIFVwZGF0ZSAqLztcbiAgICB0cnkge1xuICAgICAgICBzZXRTZWxlY3RlZEluZGV4KC0xKTtcbiAgICAgICAgaWYgKGlzVXBkYXRlUGhhc2UgJiYgbFZpZXcubGVuZ3RoID4gSEVBREVSX09GRlNFVCkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSdyZSB1cGRhdGluZywgaW5oZXJlbnRseSBzZWxlY3QgMCBzbyB3ZSBkb24ndFxuICAgICAgICAgICAgLy8gaGF2ZSB0byBnZW5lcmF0ZSB0aGF0IGluc3RydWN0aW9uIGZvciBtb3N0IHVwZGF0ZSBibG9ja3MuXG4gICAgICAgICAgICBzZWxlY3RJbmRleEludGVybmFsKHRWaWV3LCBsVmlldywgSEVBREVSX09GRlNFVCwgaXNJbkNoZWNrTm9DaGFuZ2VzTW9kZSgpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmVIb29rVHlwZSA9IGlzVXBkYXRlUGhhc2UgPyAyIC8qIFRlbXBsYXRlVXBkYXRlU3RhcnQgKi8gOiAwIC8qIFRlbXBsYXRlQ3JlYXRlU3RhcnQgKi87XG4gICAgICAgIHByb2ZpbGVyKHByZUhvb2tUeXBlLCBjb250ZXh0KTtcbiAgICAgICAgdGVtcGxhdGVGbihyZiwgY29udGV4dCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBzZXRTZWxlY3RlZEluZGV4KHByZXZTZWxlY3RlZEluZGV4KTtcbiAgICAgICAgY29uc3QgcG9zdEhvb2tUeXBlID0gaXNVcGRhdGVQaGFzZSA/IDMgLyogVGVtcGxhdGVVcGRhdGVFbmQgKi8gOiAxIC8qIFRlbXBsYXRlQ3JlYXRlRW5kICovO1xuICAgICAgICBwcm9maWxlcihwb3N0SG9va1R5cGUsIGNvbnRleHQpO1xuICAgIH1cbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vIEVsZW1lbnRcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBleGVjdXRlQ29udGVudFF1ZXJpZXModFZpZXcsIHROb2RlLCBsVmlldykge1xuICAgIGlmIChpc0NvbnRlbnRRdWVyeUhvc3QodE5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdE5vZGUuZGlyZWN0aXZlU3RhcnQ7XG4gICAgICAgIGNvbnN0IGVuZCA9IHROb2RlLmRpcmVjdGl2ZUVuZDtcbiAgICAgICAgZm9yIChsZXQgZGlyZWN0aXZlSW5kZXggPSBzdGFydDsgZGlyZWN0aXZlSW5kZXggPCBlbmQ7IGRpcmVjdGl2ZUluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZiA9IHRWaWV3LmRhdGFbZGlyZWN0aXZlSW5kZXhdO1xuICAgICAgICAgICAgaWYgKGRlZi5jb250ZW50UXVlcmllcykge1xuICAgICAgICAgICAgICAgIGRlZi5jb250ZW50UXVlcmllcygxIC8qIENyZWF0ZSAqLywgbFZpZXdbZGlyZWN0aXZlSW5kZXhdLCBkaXJlY3RpdmVJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgZGlyZWN0aXZlIGluc3RhbmNlcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlyZWN0aXZlc0luc3RhbmNlcyh0VmlldywgbFZpZXcsIHROb2RlKSB7XG4gICAgaWYgKCFnZXRCaW5kaW5nc0VuYWJsZWQoKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGluc3RhbnRpYXRlQWxsRGlyZWN0aXZlcyh0VmlldywgbFZpZXcsIHROb2RlLCBnZXROYXRpdmVCeVROb2RlKHROb2RlLCBsVmlldykpO1xuICAgIGlmICgodE5vZGUuZmxhZ3MgJiAxMjggLyogaGFzSG9zdEJpbmRpbmdzICovKSA9PT0gMTI4IC8qIGhhc0hvc3RCaW5kaW5ncyAqLykge1xuICAgICAgICBpbnZva2VEaXJlY3RpdmVzSG9zdEJpbmRpbmdzKHRWaWV3LCBsVmlldywgdE5vZGUpO1xuICAgIH1cbn1cbi8qKlxuICogVGFrZXMgYSBsaXN0IG9mIGxvY2FsIG5hbWVzIGFuZCBpbmRpY2VzIGFuZCBwdXNoZXMgdGhlIHJlc29sdmVkIGxvY2FsIHZhcmlhYmxlIHZhbHVlc1xuICogdG8gTFZpZXcgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhleSBhcmUgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSB3aXRoIGxvYWQoKS5cbiAqL1xuZnVuY3Rpb24gc2F2ZVJlc29sdmVkTG9jYWxzSW5EYXRhKHZpZXdEYXRhLCB0Tm9kZSwgbG9jYWxSZWZFeHRyYWN0b3IgPSBnZXROYXRpdmVCeVROb2RlKSB7XG4gICAgY29uc3QgbG9jYWxOYW1lcyA9IHROb2RlLmxvY2FsTmFtZXM7XG4gICAgaWYgKGxvY2FsTmFtZXMgIT09IG51bGwpIHtcbiAgICAgICAgbGV0IGxvY2FsSW5kZXggPSB0Tm9kZS5pbmRleCArIDE7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYWxOYW1lcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsb2NhbE5hbWVzW2kgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW5kZXggPT09IC0xID9cbiAgICAgICAgICAgICAgICBsb2NhbFJlZkV4dHJhY3Rvcih0Tm9kZSwgdmlld0RhdGEpIDpcbiAgICAgICAgICAgICAgICB2aWV3RGF0YVtpbmRleF07XG4gICAgICAgICAgICB2aWV3RGF0YVtsb2NhbEluZGV4KytdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEdldHMgVFZpZXcgZnJvbSBhIHRlbXBsYXRlIGZ1bmN0aW9uIG9yIGNyZWF0ZXMgYSBuZXcgVFZpZXdcbiAqIGlmIGl0IGRvZXNuJ3QgYWxyZWFkeSBleGlzdC5cbiAqXG4gKiBAcGFyYW0gZGVmIENvbXBvbmVudERlZlxuICogQHJldHVybnMgVFZpZXdcbiAqL1xuZnVuY3Rpb24gZ2V0T3JDcmVhdGVUQ29tcG9uZW50VmlldyhkZWYpIHtcbiAgICBjb25zdCB0VmlldyA9IGRlZi50VmlldztcbiAgICAvLyBDcmVhdGUgYSBUVmlldyBpZiB0aGVyZSBpc24ndCBvbmUsIG9yIHJlY3JlYXRlIGl0IGlmIHRoZSBmaXJzdCBjcmVhdGUgcGFzcyBkaWRuJ3RcbiAgICAvLyBjb21wbGV0ZSBzdWNjZXNzZnVsbHkgc2luY2Ugd2UgY2FuJ3Qga25vdyBmb3Igc3VyZSB3aGV0aGVyIGl0J3MgaW4gYSB1c2FibGUgc2hhcGUuXG4gICAgaWYgKHRWaWV3ID09PSBudWxsIHx8IHRWaWV3LmluY29tcGxldGVGaXJzdFBhc3MpIHtcbiAgICAgICAgLy8gRGVjbGFyYXRpb24gbm9kZSBoZXJlIGlzIG51bGwgc2luY2UgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiB3ZSBkeW5hbWljYWxseSBjcmVhdGUgYVxuICAgICAgICAvLyBjb21wb25lbnQgYW5kIGhlbmNlIHRoZXJlIGlzIG5vIGRlY2xhcmF0aW9uLlxuICAgICAgICBjb25zdCBkZWNsVE5vZGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gZGVmLnRWaWV3ID0gY3JlYXRlVFZpZXcoMSAvKiBDb21wb25lbnQgKi8sIGRlY2xUTm9kZSwgZGVmLnRlbXBsYXRlLCBkZWYuZGVjbHMsIGRlZi52YXJzLCBkZWYuZGlyZWN0aXZlRGVmcywgZGVmLnBpcGVEZWZzLCBkZWYudmlld1F1ZXJ5LCBkZWYuc2NoZW1hcywgZGVmLmNvbnN0cyk7XG4gICAgfVxuICAgIHJldHVybiB0Vmlldztcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFRWaWV3IGluc3RhbmNlXG4gKlxuICogQHBhcmFtIHR5cGUgVHlwZSBvZiBgVFZpZXdgLlxuICogQHBhcmFtIGRlY2xUTm9kZSBEZWNsYXJhdGlvbiBsb2NhdGlvbiBvZiB0aGlzIGBUVmlld2AuXG4gKiBAcGFyYW0gdGVtcGxhdGVGbiBUZW1wbGF0ZSBmdW5jdGlvblxuICogQHBhcmFtIGRlY2xzIFRoZSBudW1iZXIgb2Ygbm9kZXMsIGxvY2FsIHJlZnMsIGFuZCBwaXBlcyBpbiB0aGlzIHRlbXBsYXRlXG4gKiBAcGFyYW0gZGlyZWN0aXZlcyBSZWdpc3RyeSBvZiBkaXJlY3RpdmVzIGZvciB0aGlzIHZpZXdcbiAqIEBwYXJhbSBwaXBlcyBSZWdpc3RyeSBvZiBwaXBlcyBmb3IgdGhpcyB2aWV3XG4gKiBAcGFyYW0gdmlld1F1ZXJ5IFZpZXcgcXVlcmllcyBmb3IgdGhpcyB2aWV3XG4gKiBAcGFyYW0gc2NoZW1hcyBTY2hlbWFzIGZvciB0aGlzIHZpZXdcbiAqIEBwYXJhbSBjb25zdHMgQ29uc3RhbnRzIGZvciB0aGlzIHZpZXdcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVFZpZXcodHlwZSwgZGVjbFROb2RlLCB0ZW1wbGF0ZUZuLCBkZWNscywgdmFycywgZGlyZWN0aXZlcywgcGlwZXMsIHZpZXdRdWVyeSwgc2NoZW1hcywgY29uc3RzT3JGYWN0b3J5KSB7XG4gICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS50VmlldysrO1xuICAgIGNvbnN0IGJpbmRpbmdTdGFydEluZGV4ID0gSEVBREVSX09GRlNFVCArIGRlY2xzO1xuICAgIC8vIFRoaXMgbGVuZ3RoIGRvZXMgbm90IHlldCBjb250YWluIGhvc3QgYmluZGluZ3MgZnJvbSBjaGlsZCBkaXJlY3RpdmVzIGJlY2F1c2UgYXQgdGhpcyBwb2ludCxcbiAgICAvLyB3ZSBkb24ndCBrbm93IHdoaWNoIGRpcmVjdGl2ZXMgYXJlIGFjdGl2ZSBvbiB0aGlzIHRlbXBsYXRlLiBBcyBzb29uIGFzIGEgZGlyZWN0aXZlIGlzIG1hdGNoZWRcbiAgICAvLyB0aGF0IGhhcyBhIGhvc3QgYmluZGluZywgd2Ugd2lsbCB1cGRhdGUgdGhlIGJsdWVwcmludCB3aXRoIHRoYXQgZGVmJ3MgaG9zdFZhcnMgY291bnQuXG4gICAgY29uc3QgaW5pdGlhbFZpZXdMZW5ndGggPSBiaW5kaW5nU3RhcnRJbmRleCArIHZhcnM7XG4gICAgY29uc3QgYmx1ZXByaW50ID0gY3JlYXRlVmlld0JsdWVwcmludChiaW5kaW5nU3RhcnRJbmRleCwgaW5pdGlhbFZpZXdMZW5ndGgpO1xuICAgIGNvbnN0IGNvbnN0cyA9IHR5cGVvZiBjb25zdHNPckZhY3RvcnkgPT09ICdmdW5jdGlvbicgPyBjb25zdHNPckZhY3RvcnkoKSA6IGNvbnN0c09yRmFjdG9yeTtcbiAgICBjb25zdCB0VmlldyA9IGJsdWVwcmludFtUVklFV10gPSBuZ0Rldk1vZGUgP1xuICAgICAgICBuZXcgVFZpZXdDb25zdHJ1Y3Rvcih0eXBlLCAvLyB0eXBlOiBUVmlld1R5cGUsXG4gICAgICAgIGJsdWVwcmludCwgLy8gYmx1ZXByaW50OiBMVmlldyxcbiAgICAgICAgdGVtcGxhdGVGbiwgLy8gdGVtcGxhdGU6IENvbXBvbmVudFRlbXBsYXRlPHt9PnxudWxsLFxuICAgICAgICBudWxsLCAvLyBxdWVyaWVzOiBUUXVlcmllc3xudWxsXG4gICAgICAgIHZpZXdRdWVyeSwgLy8gdmlld1F1ZXJ5OiBWaWV3UXVlcmllc0Z1bmN0aW9uPHt9PnxudWxsLFxuICAgICAgICBkZWNsVE5vZGUsIC8vIGRlY2xUTm9kZTogVE5vZGV8bnVsbCxcbiAgICAgICAgY2xvbmVUb1RWaWV3RGF0YShibHVlcHJpbnQpLmZpbGwobnVsbCwgYmluZGluZ1N0YXJ0SW5kZXgpLCAvLyBkYXRhOiBURGF0YSxcbiAgICAgICAgYmluZGluZ1N0YXJ0SW5kZXgsIC8vIGJpbmRpbmdTdGFydEluZGV4OiBudW1iZXIsXG4gICAgICAgIGluaXRpYWxWaWV3TGVuZ3RoLCAvLyBleHBhbmRvU3RhcnRJbmRleDogbnVtYmVyLFxuICAgICAgICBudWxsLCAvLyBob3N0QmluZGluZ09wQ29kZXM6IEhvc3RCaW5kaW5nT3BDb2RlcyxcbiAgICAgICAgdHJ1ZSwgLy8gZmlyc3RDcmVhdGVQYXNzOiBib29sZWFuLFxuICAgICAgICB0cnVlLCAvLyBmaXJzdFVwZGF0ZVBhc3M6IGJvb2xlYW4sXG4gICAgICAgIGZhbHNlLCAvLyBzdGF0aWNWaWV3UXVlcmllczogYm9vbGVhbixcbiAgICAgICAgZmFsc2UsIC8vIHN0YXRpY0NvbnRlbnRRdWVyaWVzOiBib29sZWFuLFxuICAgICAgICBudWxsLCAvLyBwcmVPcmRlckhvb2tzOiBIb29rRGF0YXxudWxsLFxuICAgICAgICBudWxsLCAvLyBwcmVPcmRlckNoZWNrSG9va3M6IEhvb2tEYXRhfG51bGwsXG4gICAgICAgIG51bGwsIC8vIGNvbnRlbnRIb29rczogSG9va0RhdGF8bnVsbCxcbiAgICAgICAgbnVsbCwgLy8gY29udGVudENoZWNrSG9va3M6IEhvb2tEYXRhfG51bGwsXG4gICAgICAgIG51bGwsIC8vIHZpZXdIb29rczogSG9va0RhdGF8bnVsbCxcbiAgICAgICAgbnVsbCwgLy8gdmlld0NoZWNrSG9va3M6IEhvb2tEYXRhfG51bGwsXG4gICAgICAgIG51bGwsIC8vIGRlc3Ryb3lIb29rczogRGVzdHJveUhvb2tEYXRhfG51bGwsXG4gICAgICAgIG51bGwsIC8vIGNsZWFudXA6IGFueVtdfG51bGwsXG4gICAgICAgIG51bGwsIC8vIGNvbnRlbnRRdWVyaWVzOiBudW1iZXJbXXxudWxsLFxuICAgICAgICBudWxsLCAvLyBjb21wb25lbnRzOiBudW1iZXJbXXxudWxsLFxuICAgICAgICB0eXBlb2YgZGlyZWN0aXZlcyA9PT0gJ2Z1bmN0aW9uJyA/IC8vXG4gICAgICAgICAgICBkaXJlY3RpdmVzKCkgOiAvL1xuICAgICAgICAgICAgZGlyZWN0aXZlcywgLy8gZGlyZWN0aXZlUmVnaXN0cnk6IERpcmVjdGl2ZURlZkxpc3R8bnVsbCxcbiAgICAgICAgdHlwZW9mIHBpcGVzID09PSAnZnVuY3Rpb24nID8gcGlwZXMoKSA6IHBpcGVzLCAvLyBwaXBlUmVnaXN0cnk6IFBpcGVEZWZMaXN0fG51bGwsXG4gICAgICAgIG51bGwsIC8vIGZpcnN0Q2hpbGQ6IFROb2RlfG51bGwsXG4gICAgICAgIHNjaGVtYXMsIC8vIHNjaGVtYXM6IFNjaGVtYU1ldGFkYXRhW118bnVsbCxcbiAgICAgICAgY29uc3RzLCAvLyBjb25zdHM6IFRDb25zdGFudHN8bnVsbFxuICAgICAgICBmYWxzZSwgLy8gaW5jb21wbGV0ZUZpcnN0UGFzczogYm9vbGVhblxuICAgICAgICBkZWNscywgLy8gbmdEZXZNb2RlIG9ubHk6IGRlY2xzXG4gICAgICAgIHZhcnMpIDpcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIGJsdWVwcmludDogYmx1ZXByaW50LFxuICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlRm4sXG4gICAgICAgICAgICBxdWVyaWVzOiBudWxsLFxuICAgICAgICAgICAgdmlld1F1ZXJ5OiB2aWV3UXVlcnksXG4gICAgICAgICAgICBkZWNsVE5vZGU6IGRlY2xUTm9kZSxcbiAgICAgICAgICAgIGRhdGE6IGJsdWVwcmludC5zbGljZSgpLmZpbGwobnVsbCwgYmluZGluZ1N0YXJ0SW5kZXgpLFxuICAgICAgICAgICAgYmluZGluZ1N0YXJ0SW5kZXg6IGJpbmRpbmdTdGFydEluZGV4LFxuICAgICAgICAgICAgZXhwYW5kb1N0YXJ0SW5kZXg6IGluaXRpYWxWaWV3TGVuZ3RoLFxuICAgICAgICAgICAgaG9zdEJpbmRpbmdPcENvZGVzOiBudWxsLFxuICAgICAgICAgICAgZmlyc3RDcmVhdGVQYXNzOiB0cnVlLFxuICAgICAgICAgICAgZmlyc3RVcGRhdGVQYXNzOiB0cnVlLFxuICAgICAgICAgICAgc3RhdGljVmlld1F1ZXJpZXM6IGZhbHNlLFxuICAgICAgICAgICAgc3RhdGljQ29udGVudFF1ZXJpZXM6IGZhbHNlLFxuICAgICAgICAgICAgcHJlT3JkZXJIb29rczogbnVsbCxcbiAgICAgICAgICAgIHByZU9yZGVyQ2hlY2tIb29rczogbnVsbCxcbiAgICAgICAgICAgIGNvbnRlbnRIb29rczogbnVsbCxcbiAgICAgICAgICAgIGNvbnRlbnRDaGVja0hvb2tzOiBudWxsLFxuICAgICAgICAgICAgdmlld0hvb2tzOiBudWxsLFxuICAgICAgICAgICAgdmlld0NoZWNrSG9va3M6IG51bGwsXG4gICAgICAgICAgICBkZXN0cm95SG9va3M6IG51bGwsXG4gICAgICAgICAgICBjbGVhbnVwOiBudWxsLFxuICAgICAgICAgICAgY29udGVudFF1ZXJpZXM6IG51bGwsXG4gICAgICAgICAgICBjb21wb25lbnRzOiBudWxsLFxuICAgICAgICAgICAgZGlyZWN0aXZlUmVnaXN0cnk6IHR5cGVvZiBkaXJlY3RpdmVzID09PSAnZnVuY3Rpb24nID8gZGlyZWN0aXZlcygpIDogZGlyZWN0aXZlcyxcbiAgICAgICAgICAgIHBpcGVSZWdpc3RyeTogdHlwZW9mIHBpcGVzID09PSAnZnVuY3Rpb24nID8gcGlwZXMoKSA6IHBpcGVzLFxuICAgICAgICAgICAgZmlyc3RDaGlsZDogbnVsbCxcbiAgICAgICAgICAgIHNjaGVtYXM6IHNjaGVtYXMsXG4gICAgICAgICAgICBjb25zdHM6IGNvbnN0cyxcbiAgICAgICAgICAgIGluY29tcGxldGVGaXJzdFBhc3M6IGZhbHNlXG4gICAgICAgIH07XG4gICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICAvLyBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucyBpdCBpcyBpbXBvcnRhbnQgdGhhdCB0aGUgdFZpZXcgcmV0YWlucyB0aGUgc2FtZSBzaGFwZSBkdXJpbmcgcnVudGltZS5cbiAgICAgICAgLy8gKFRvIG1ha2Ugc3VyZSB0aGF0IGFsbCBvZiB0aGUgY29kZSBpcyBtb25vbW9ycGhpYy4pIEZvciB0aGlzIHJlYXNvbiB3ZSBzZWFsIHRoZSBvYmplY3QgdG9cbiAgICAgICAgLy8gcHJldmVudCBjbGFzcyB0cmFuc2l0aW9ucy5cbiAgICAgICAgT2JqZWN0LnNlYWwodFZpZXcpO1xuICAgIH1cbiAgICByZXR1cm4gdFZpZXc7XG59XG5mdW5jdGlvbiBjcmVhdGVWaWV3Qmx1ZXByaW50KGJpbmRpbmdTdGFydEluZGV4LCBpbml0aWFsVmlld0xlbmd0aCkge1xuICAgIGNvbnN0IGJsdWVwcmludCA9IG5nRGV2TW9kZSA/IG5ldyBMVmlld0JsdWVwcmludCgpIDogW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbml0aWFsVmlld0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJsdWVwcmludC5wdXNoKGkgPCBiaW5kaW5nU3RhcnRJbmRleCA/IG51bGwgOiBOT19DSEFOR0UpO1xuICAgIH1cbiAgICByZXR1cm4gYmx1ZXByaW50O1xufVxuZnVuY3Rpb24gY3JlYXRlRXJyb3IodGV4dCwgdG9rZW4pIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKGBSZW5kZXJlcjogJHt0ZXh0fSBbJHtzdHJpbmdpZnlGb3JFcnJvcih0b2tlbil9XWApO1xufVxuZnVuY3Rpb24gYXNzZXJ0SG9zdE5vZGVFeGlzdHMockVsZW1lbnQsIGVsZW1lbnRPclNlbGVjdG9yKSB7XG4gICAgaWYgKCFyRWxlbWVudCkge1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnRPclNlbGVjdG9yID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgY3JlYXRlRXJyb3IoJ0hvc3Qgbm9kZSB3aXRoIHNlbGVjdG9yIG5vdCBmb3VuZDonLCBlbGVtZW50T3JTZWxlY3Rvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBjcmVhdGVFcnJvcignSG9zdCBub2RlIGlzIHJlcXVpcmVkOicsIGVsZW1lbnRPclNlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogTG9jYXRlcyB0aGUgaG9zdCBuYXRpdmUgZWxlbWVudCwgdXNlZCBmb3IgYm9vdHN0cmFwcGluZyBleGlzdGluZyBub2RlcyBpbnRvIHJlbmRlcmluZyBwaXBlbGluZS5cbiAqXG4gKiBAcGFyYW0gcmVuZGVyZXJGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gdG8gY3JlYXRlIHJlbmRlcmVyIGluc3RhbmNlLlxuICogQHBhcmFtIGVsZW1lbnRPclNlbGVjdG9yIFJlbmRlciBlbGVtZW50IG9yIENTUyBzZWxlY3RvciB0byBsb2NhdGUgdGhlIGVsZW1lbnQuXG4gKiBAcGFyYW0gZW5jYXBzdWxhdGlvbiBWaWV3IEVuY2Fwc3VsYXRpb24gZGVmaW5lZCBmb3IgY29tcG9uZW50IHRoYXQgcmVxdWVzdHMgaG9zdCBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBsb2NhdGVIb3N0RWxlbWVudChyZW5kZXJlciwgZWxlbWVudE9yU2VsZWN0b3IsIGVuY2Fwc3VsYXRpb24pIHtcbiAgICBpZiAoaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpKSB7XG4gICAgICAgIC8vIFdoZW4gdXNpbmcgbmF0aXZlIFNoYWRvdyBET00sIGRvIG5vdCBjbGVhciBob3N0IGVsZW1lbnQgdG8gYWxsb3cgbmF0aXZlIHNsb3QgcHJvamVjdGlvblxuICAgICAgICBjb25zdCBwcmVzZXJ2ZUNvbnRlbnQgPSBlbmNhcHN1bGF0aW9uID09PSBWaWV3RW5jYXBzdWxhdGlvbiQxLlNoYWRvd0RvbTtcbiAgICAgICAgcmV0dXJuIHJlbmRlcmVyLnNlbGVjdFJvb3RFbGVtZW50KGVsZW1lbnRPclNlbGVjdG9yLCBwcmVzZXJ2ZUNvbnRlbnQpO1xuICAgIH1cbiAgICBsZXQgckVsZW1lbnQgPSB0eXBlb2YgZWxlbWVudE9yU2VsZWN0b3IgPT09ICdzdHJpbmcnID9cbiAgICAgICAgcmVuZGVyZXIucXVlcnlTZWxlY3RvcihlbGVtZW50T3JTZWxlY3RvcikgOlxuICAgICAgICBlbGVtZW50T3JTZWxlY3RvcjtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SG9zdE5vZGVFeGlzdHMockVsZW1lbnQsIGVsZW1lbnRPclNlbGVjdG9yKTtcbiAgICAvLyBBbHdheXMgY2xlYXIgaG9zdCBlbGVtZW50J3MgY29udGVudCB3aGVuIFJlbmRlcmVyMyBpcyBpbiB1c2UuIEZvciBwcm9jZWR1cmFsIHJlbmRlcmVyIGNhc2Ugd2VcbiAgICAvLyBtYWtlIGl0IGRlcGVuZCBvbiB3aGV0aGVyIFNoYWRvd0RvbSBlbmNhcHN1bGF0aW9uIGlzIHVzZWQgKGluIHdoaWNoIGNhc2UgdGhlIGNvbnRlbnQgc2hvdWxkIGJlXG4gICAgLy8gcHJlc2VydmVkIHRvIGFsbG93IG5hdGl2ZSBzbG90IHByb2plY3Rpb24pLiBTaGFkb3dEb20gZW5jYXBzdWxhdGlvbiByZXF1aXJlcyBwcm9jZWR1cmFsXG4gICAgLy8gcmVuZGVyZXIsIGFuZCBwcm9jZWR1cmFsIHJlbmRlcmVyIGNhc2UgaXMgaGFuZGxlZCBhYm92ZS5cbiAgICByRWxlbWVudC50ZXh0Q29udGVudCA9ICcnO1xuICAgIHJldHVybiByRWxlbWVudDtcbn1cbi8qKlxuICogU2F2ZXMgY29udGV4dCBmb3IgdGhpcyBjbGVhbnVwIGZ1bmN0aW9uIGluIExWaWV3LmNsZWFudXBJbnN0YW5jZXMuXG4gKlxuICogT24gdGhlIGZpcnN0IHRlbXBsYXRlIHBhc3MsIHNhdmVzIGluIFRWaWV3OlxuICogLSBDbGVhbnVwIGZ1bmN0aW9uXG4gKiAtIEluZGV4IG9mIGNvbnRleHQgd2UganVzdCBzYXZlZCBpbiBMVmlldy5jbGVhbnVwSW5zdGFuY2VzXG4gKlxuICogVGhpcyBmdW5jdGlvbiBjYW4gYWxzbyBiZSB1c2VkIHRvIHN0b3JlIGluc3RhbmNlIHNwZWNpZmljIGNsZWFudXAgZm5zLiBJbiB0aGF0IGNhc2UgdGhlIGBjb250ZXh0YFxuICogaXMgYG51bGxgIGFuZCB0aGUgZnVuY3Rpb24gaXMgc3RvcmUgaW4gYExWaWV3YCAocmF0aGVyIHRoYW4gaXQgYFRWaWV3YCkuXG4gKi9cbmZ1bmN0aW9uIHN0b3JlQ2xlYW51cFdpdGhDb250ZXh0KHRWaWV3LCBsVmlldywgY29udGV4dCwgY2xlYW51cEZuKSB7XG4gICAgY29uc3QgbENsZWFudXAgPSBnZXRPckNyZWF0ZUxWaWV3Q2xlYW51cChsVmlldyk7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gSWYgY29udGV4dCBpcyBudWxsIHRoYXQgdGhpcyBpcyBpbnN0YW5jZSBzcGVjaWZpYyBjYWxsYmFjay4gVGhlc2UgY2FsbGJhY2tzIGNhbiBvbmx5IGJlXG4gICAgICAgIC8vIGluc2VydGVkIGFmdGVyIHRlbXBsYXRlIHNoYXJlZCBpbnN0YW5jZXMuIEZvciB0aGlzIHJlYXNvbiBpbiBuZ0Rldk1vZGUgd2UgZnJlZXplIHRoZSBUVmlldy5cbiAgICAgICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZShnZXRPckNyZWF0ZVRWaWV3Q2xlYW51cCh0VmlldykpO1xuICAgICAgICB9XG4gICAgICAgIGxDbGVhbnVwLnB1c2goY2xlYW51cEZuKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxDbGVhbnVwLnB1c2goY29udGV4dCk7XG4gICAgICAgIGlmICh0Vmlldy5maXJzdENyZWF0ZVBhc3MpIHtcbiAgICAgICAgICAgIGdldE9yQ3JlYXRlVFZpZXdDbGVhbnVwKHRWaWV3KS5wdXNoKGNsZWFudXBGbiwgbENsZWFudXAubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVUTm9kZSh0VmlldywgdFBhcmVudCwgdHlwZSwgaW5kZXgsIHZhbHVlLCBhdHRycykge1xuICAgIG5nRGV2TW9kZSAmJiBpbmRleCAhPT0gMCAmJiAvLyAwIGFyZSBib2d1cyBub2RlcyBhbmQgdGhleSBhcmUgT0suIFNlZSBgY3JlYXRlQ29udGFpbmVyUmVmYCBpblxuICAgICAgICAvLyBgdmlld19lbmdpbmVfY29tcGF0aWJpbGl0eWAgZm9yIGFkZGl0aW9uYWwgY29udGV4dC5cbiAgICAgICAgYXNzZXJ0R3JlYXRlclRoYW5PckVxdWFsKGluZGV4LCBIRUFERVJfT0ZGU0VULCAnVE5vZGVzIGNhblxcJ3QgYmUgaW4gdGhlIExWaWV3IGhlYWRlci4nKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0Tm90U2FtZShhdHRycywgdW5kZWZpbmVkLCAnXFwndW5kZWZpbmVkXFwnIGlzIG5vdCB2YWxpZCB2YWx1ZSBmb3IgXFwnYXR0cnNcXCcnKTtcbiAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnROb2RlKys7XG4gICAgbmdEZXZNb2RlICYmIHRQYXJlbnQgJiYgYXNzZXJ0VE5vZGVGb3JUVmlldyh0UGFyZW50LCB0Vmlldyk7XG4gICAgbGV0IGluamVjdG9ySW5kZXggPSB0UGFyZW50ID8gdFBhcmVudC5pbmplY3RvckluZGV4IDogLTE7XG4gICAgY29uc3QgdE5vZGUgPSBuZ0Rldk1vZGUgP1xuICAgICAgICBuZXcgVE5vZGVEZWJ1Zyh0VmlldywgLy8gdFZpZXdfOiBUVmlld1xuICAgICAgICB0eXBlLCAvLyB0eXBlOiBUTm9kZVR5cGVcbiAgICAgICAgaW5kZXgsIC8vIGluZGV4OiBudW1iZXJcbiAgICAgICAgbnVsbCwgLy8gaW5zZXJ0QmVmb3JlSW5kZXg6IG51bGx8LTF8bnVtYmVyfG51bWJlcltdXG4gICAgICAgIGluamVjdG9ySW5kZXgsIC8vIGluamVjdG9ySW5kZXg6IG51bWJlclxuICAgICAgICAtMSwgLy8gZGlyZWN0aXZlU3RhcnQ6IG51bWJlclxuICAgICAgICAtMSwgLy8gZGlyZWN0aXZlRW5kOiBudW1iZXJcbiAgICAgICAgLTEsIC8vIGRpcmVjdGl2ZVN0eWxpbmdMYXN0OiBudW1iZXJcbiAgICAgICAgbnVsbCwgLy8gcHJvcGVydHlCaW5kaW5nczogbnVtYmVyW118bnVsbFxuICAgICAgICAwLCAvLyBmbGFnczogVE5vZGVGbGFnc1xuICAgICAgICAwLCAvLyBwcm92aWRlckluZGV4ZXM6IFROb2RlUHJvdmlkZXJJbmRleGVzXG4gICAgICAgIHZhbHVlLCAvLyB2YWx1ZTogc3RyaW5nfG51bGxcbiAgICAgICAgYXR0cnMsIC8vIGF0dHJzOiAoc3RyaW5nfEF0dHJpYnV0ZU1hcmtlcnwoc3RyaW5nfFNlbGVjdG9yRmxhZ3MpW10pW118bnVsbFxuICAgICAgICBudWxsLCAvLyBtZXJnZWRBdHRyc1xuICAgICAgICBudWxsLCAvLyBsb2NhbE5hbWVzOiAoc3RyaW5nfG51bWJlcilbXXxudWxsXG4gICAgICAgIHVuZGVmaW5lZCwgLy8gaW5pdGlhbElucHV0czogKHN0cmluZ1tdfG51bGwpW118bnVsbHx1bmRlZmluZWRcbiAgICAgICAgbnVsbCwgLy8gaW5wdXRzOiBQcm9wZXJ0eUFsaWFzZXN8bnVsbFxuICAgICAgICBudWxsLCAvLyBvdXRwdXRzOiBQcm9wZXJ0eUFsaWFzZXN8bnVsbFxuICAgICAgICBudWxsLCAvLyB0Vmlld3M6IElUVmlld3xJVFZpZXdbXXxudWxsXG4gICAgICAgIG51bGwsIC8vIG5leHQ6IElUTm9kZXxudWxsXG4gICAgICAgIG51bGwsIC8vIHByb2plY3Rpb25OZXh0OiBJVE5vZGV8bnVsbFxuICAgICAgICBudWxsLCAvLyBjaGlsZDogSVROb2RlfG51bGxcbiAgICAgICAgdFBhcmVudCwgLy8gcGFyZW50OiBURWxlbWVudE5vZGV8VENvbnRhaW5lck5vZGV8bnVsbFxuICAgICAgICBudWxsLCAvLyBwcm9qZWN0aW9uOiBudW1iZXJ8KElUTm9kZXxSTm9kZVtdKVtdfG51bGxcbiAgICAgICAgbnVsbCwgLy8gc3R5bGVzOiBzdHJpbmd8bnVsbFxuICAgICAgICBudWxsLCAvLyBzdHlsZXNXaXRob3V0SG9zdDogc3RyaW5nfG51bGxcbiAgICAgICAgdW5kZWZpbmVkLCAvLyByZXNpZHVhbFN0eWxlczogc3RyaW5nfG51bGxcbiAgICAgICAgbnVsbCwgLy8gY2xhc3Nlczogc3RyaW5nfG51bGxcbiAgICAgICAgbnVsbCwgLy8gY2xhc3Nlc1dpdGhvdXRIb3N0OiBzdHJpbmd8bnVsbFxuICAgICAgICB1bmRlZmluZWQsIC8vIHJlc2lkdWFsQ2xhc3Nlczogc3RyaW5nfG51bGxcbiAgICAgICAgMCwgLy8gY2xhc3NCaW5kaW5nczogVFN0eWxpbmdSYW5nZTtcbiAgICAgICAgMCkgOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBpbnNlcnRCZWZvcmVJbmRleDogbnVsbCxcbiAgICAgICAgICAgIGluamVjdG9ySW5kZXgsXG4gICAgICAgICAgICBkaXJlY3RpdmVTdGFydDogLTEsXG4gICAgICAgICAgICBkaXJlY3RpdmVFbmQ6IC0xLFxuICAgICAgICAgICAgZGlyZWN0aXZlU3R5bGluZ0xhc3Q6IC0xLFxuICAgICAgICAgICAgcHJvcGVydHlCaW5kaW5nczogbnVsbCxcbiAgICAgICAgICAgIGZsYWdzOiAwLFxuICAgICAgICAgICAgcHJvdmlkZXJJbmRleGVzOiAwLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgYXR0cnM6IGF0dHJzLFxuICAgICAgICAgICAgbWVyZ2VkQXR0cnM6IG51bGwsXG4gICAgICAgICAgICBsb2NhbE5hbWVzOiBudWxsLFxuICAgICAgICAgICAgaW5pdGlhbElucHV0czogdW5kZWZpbmVkLFxuICAgICAgICAgICAgaW5wdXRzOiBudWxsLFxuICAgICAgICAgICAgb3V0cHV0czogbnVsbCxcbiAgICAgICAgICAgIHRWaWV3czogbnVsbCxcbiAgICAgICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgICAgICBwcm9qZWN0aW9uTmV4dDogbnVsbCxcbiAgICAgICAgICAgIGNoaWxkOiBudWxsLFxuICAgICAgICAgICAgcGFyZW50OiB0UGFyZW50LFxuICAgICAgICAgICAgcHJvamVjdGlvbjogbnVsbCxcbiAgICAgICAgICAgIHN0eWxlczogbnVsbCxcbiAgICAgICAgICAgIHN0eWxlc1dpdGhvdXRIb3N0OiBudWxsLFxuICAgICAgICAgICAgcmVzaWR1YWxTdHlsZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNsYXNzZXM6IG51bGwsXG4gICAgICAgICAgICBjbGFzc2VzV2l0aG91dEhvc3Q6IG51bGwsXG4gICAgICAgICAgICByZXNpZHVhbENsYXNzZXM6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNsYXNzQmluZGluZ3M6IDAsXG4gICAgICAgICAgICBzdHlsZUJpbmRpbmdzOiAwLFxuICAgICAgICB9O1xuICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgLy8gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgaXQgaXMgaW1wb3J0YW50IHRoYXQgdGhlIHROb2RlIHJldGFpbnMgdGhlIHNhbWUgc2hhcGUgZHVyaW5nIHJ1bnRpbWUuXG4gICAgICAgIC8vIChUbyBtYWtlIHN1cmUgdGhhdCBhbGwgb2YgdGhlIGNvZGUgaXMgbW9ub21vcnBoaWMuKSBGb3IgdGhpcyByZWFzb24gd2Ugc2VhbCB0aGUgb2JqZWN0IHRvXG4gICAgICAgIC8vIHByZXZlbnQgY2xhc3MgdHJhbnNpdGlvbnMuXG4gICAgICAgIE9iamVjdC5zZWFsKHROb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHROb2RlO1xufVxuZnVuY3Rpb24gZ2VuZXJhdGVQcm9wZXJ0eUFsaWFzZXMoaW5wdXRBbGlhc01hcCwgZGlyZWN0aXZlRGVmSWR4LCBwcm9wU3RvcmUpIHtcbiAgICBmb3IgKGxldCBwdWJsaWNOYW1lIGluIGlucHV0QWxpYXNNYXApIHtcbiAgICAgICAgaWYgKGlucHV0QWxpYXNNYXAuaGFzT3duUHJvcGVydHkocHVibGljTmFtZSkpIHtcbiAgICAgICAgICAgIHByb3BTdG9yZSA9IHByb3BTdG9yZSA9PT0gbnVsbCA/IHt9IDogcHJvcFN0b3JlO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJuYWxOYW1lID0gaW5wdXRBbGlhc01hcFtwdWJsaWNOYW1lXTtcbiAgICAgICAgICAgIGlmIChwcm9wU3RvcmUuaGFzT3duUHJvcGVydHkocHVibGljTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9wU3RvcmVbcHVibGljTmFtZV0ucHVzaChkaXJlY3RpdmVEZWZJZHgsIGludGVybmFsTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAocHJvcFN0b3JlW3B1YmxpY05hbWVdID0gW2RpcmVjdGl2ZURlZklkeCwgaW50ZXJuYWxOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BTdG9yZTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgZGF0YSBzdHJ1Y3R1cmVzIHJlcXVpcmVkIHRvIHdvcmsgd2l0aCBkaXJlY3RpdmUgaW5wdXRzIGFuZCBvdXRwdXRzLlxuICogSW5pdGlhbGl6YXRpb24gaXMgZG9uZSBmb3IgYWxsIGRpcmVjdGl2ZXMgbWF0Y2hlZCBvbiBhIGdpdmVuIFROb2RlLlxuICovXG5mdW5jdGlvbiBpbml0aWFsaXplSW5wdXRBbmRPdXRwdXRBbGlhc2VzKHRWaWV3LCB0Tm9kZSkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRGaXJzdENyZWF0ZVBhc3ModFZpZXcpO1xuICAgIGNvbnN0IHN0YXJ0ID0gdE5vZGUuZGlyZWN0aXZlU3RhcnQ7XG4gICAgY29uc3QgZW5kID0gdE5vZGUuZGlyZWN0aXZlRW5kO1xuICAgIGNvbnN0IHRWaWV3RGF0YSA9IHRWaWV3LmRhdGE7XG4gICAgY29uc3QgdE5vZGVBdHRycyA9IHROb2RlLmF0dHJzO1xuICAgIGNvbnN0IGlucHV0c0Zyb21BdHRycyA9IG5nRGV2TW9kZSA/IG5ldyBUTm9kZUluaXRpYWxJbnB1dHMoKSA6IFtdO1xuICAgIGxldCBpbnB1dHNTdG9yZSA9IG51bGw7XG4gICAgbGV0IG91dHB1dHNTdG9yZSA9IG51bGw7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlRGVmID0gdFZpZXdEYXRhW2ldO1xuICAgICAgICBjb25zdCBkaXJlY3RpdmVJbnB1dHMgPSBkaXJlY3RpdmVEZWYuaW5wdXRzO1xuICAgICAgICAvLyBEbyBub3QgdXNlIHVuYm91bmQgYXR0cmlidXRlcyBhcyBpbnB1dHMgdG8gc3RydWN0dXJhbCBkaXJlY3RpdmVzLCBzaW5jZSBzdHJ1Y3R1cmFsXG4gICAgICAgIC8vIGRpcmVjdGl2ZSBpbnB1dHMgY2FuIG9ubHkgYmUgc2V0IHVzaW5nIG1pY3Jvc3ludGF4IChlLmcuIGA8ZGl2ICpkaXI9XCJleHBcIj5gKS5cbiAgICAgICAgLy8gVE9ETyhGVy0xOTMwKTogbWljcm9zeW50YXggZXhwcmVzc2lvbnMgbWF5IGFsc28gY29udGFpbiB1bmJvdW5kL3N0YXRpYyBhdHRyaWJ1dGVzLCB3aGljaFxuICAgICAgICAvLyBzaG91bGQgYmUgc2V0IGZvciBpbmxpbmUgdGVtcGxhdGVzLlxuICAgICAgICBjb25zdCBpbml0aWFsSW5wdXRzID0gKHROb2RlQXR0cnMgIT09IG51bGwgJiYgIWlzSW5saW5lVGVtcGxhdGUodE5vZGUpKSA/XG4gICAgICAgICAgICBnZW5lcmF0ZUluaXRpYWxJbnB1dHMoZGlyZWN0aXZlSW5wdXRzLCB0Tm9kZUF0dHJzKSA6XG4gICAgICAgICAgICBudWxsO1xuICAgICAgICBpbnB1dHNGcm9tQXR0cnMucHVzaChpbml0aWFsSW5wdXRzKTtcbiAgICAgICAgaW5wdXRzU3RvcmUgPSBnZW5lcmF0ZVByb3BlcnR5QWxpYXNlcyhkaXJlY3RpdmVJbnB1dHMsIGksIGlucHV0c1N0b3JlKTtcbiAgICAgICAgb3V0cHV0c1N0b3JlID0gZ2VuZXJhdGVQcm9wZXJ0eUFsaWFzZXMoZGlyZWN0aXZlRGVmLm91dHB1dHMsIGksIG91dHB1dHNTdG9yZSk7XG4gICAgfVxuICAgIGlmIChpbnB1dHNTdG9yZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoaW5wdXRzU3RvcmUuaGFzT3duUHJvcGVydHkoJ2NsYXNzJykpIHtcbiAgICAgICAgICAgIHROb2RlLmZsYWdzIHw9IDE2IC8qIGhhc0NsYXNzSW5wdXQgKi87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0c1N0b3JlLmhhc093blByb3BlcnR5KCdzdHlsZScpKSB7XG4gICAgICAgICAgICB0Tm9kZS5mbGFncyB8PSAzMiAvKiBoYXNTdHlsZUlucHV0ICovO1xuICAgICAgICB9XG4gICAgfVxuICAgIHROb2RlLmluaXRpYWxJbnB1dHMgPSBpbnB1dHNGcm9tQXR0cnM7XG4gICAgdE5vZGUuaW5wdXRzID0gaW5wdXRzU3RvcmU7XG4gICAgdE5vZGUub3V0cHV0cyA9IG91dHB1dHNTdG9yZTtcbn1cbi8qKlxuICogTWFwcGluZyBiZXR3ZWVuIGF0dHJpYnV0ZXMgbmFtZXMgdGhhdCBkb24ndCBjb3JyZXNwb25kIHRvIHRoZWlyIGVsZW1lbnQgcHJvcGVydHkgbmFtZXMuXG4gKlxuICogUGVyZm9ybWFuY2Ugbm90ZTogdGhpcyBmdW5jdGlvbiBpcyB3cml0dGVuIGFzIGEgc2VyaWVzIG9mIGlmIGNoZWNrcyAoaW5zdGVhZCBvZiwgc2F5LCBhIHByb3BlcnR5XG4gKiBvYmplY3QgbG9va3VwKSBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyAtIHRoZSBzZXJpZXMgb2YgYGlmYCBjaGVja3Mgc2VlbXMgdG8gYmUgdGhlIGZhc3Rlc3Qgd2F5IG9mXG4gKiBtYXBwaW5nIHByb3BlcnR5IG5hbWVzLiBEbyBOT1QgY2hhbmdlIHdpdGhvdXQgYmVuY2htYXJraW5nLlxuICpcbiAqIE5vdGU6IHRoaXMgbWFwcGluZyBoYXMgdG8gYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIGVxdWFsbHkgbmFtZWQgbWFwcGluZyBpbiB0aGUgdGVtcGxhdGVcbiAqIHR5cGUtY2hlY2tpbmcgbWFjaGluZXJ5IG9mIG5ndHNjLlxuICovXG5mdW5jdGlvbiBtYXBQcm9wTmFtZShuYW1lKSB7XG4gICAgaWYgKG5hbWUgPT09ICdjbGFzcycpXG4gICAgICAgIHJldHVybiAnY2xhc3NOYW1lJztcbiAgICBpZiAobmFtZSA9PT0gJ2ZvcicpXG4gICAgICAgIHJldHVybiAnaHRtbEZvcic7XG4gICAgaWYgKG5hbWUgPT09ICdmb3JtYWN0aW9uJylcbiAgICAgICAgcmV0dXJuICdmb3JtQWN0aW9uJztcbiAgICBpZiAobmFtZSA9PT0gJ2lubmVySHRtbCcpXG4gICAgICAgIHJldHVybiAnaW5uZXJIVE1MJztcbiAgICBpZiAobmFtZSA9PT0gJ3JlYWRvbmx5JylcbiAgICAgICAgcmV0dXJuICdyZWFkT25seSc7XG4gICAgaWYgKG5hbWUgPT09ICd0YWJpbmRleCcpXG4gICAgICAgIHJldHVybiAndGFiSW5kZXgnO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZWxlbWVudFByb3BlcnR5SW50ZXJuYWwodFZpZXcsIHROb2RlLCBsVmlldywgcHJvcE5hbWUsIHZhbHVlLCByZW5kZXJlciwgc2FuaXRpemVyLCBuYXRpdmVPbmx5KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE5vdFNhbWUodmFsdWUsIE5PX0NIQU5HRSwgJ0luY29taW5nIHZhbHVlIHNob3VsZCBuZXZlciBiZSBOT19DSEFOR0UuJyk7XG4gICAgY29uc3QgZWxlbWVudCA9IGdldE5hdGl2ZUJ5VE5vZGUodE5vZGUsIGxWaWV3KTtcbiAgICBsZXQgaW5wdXREYXRhID0gdE5vZGUuaW5wdXRzO1xuICAgIGxldCBkYXRhVmFsdWU7XG4gICAgaWYgKCFuYXRpdmVPbmx5ICYmIGlucHV0RGF0YSAhPSBudWxsICYmIChkYXRhVmFsdWUgPSBpbnB1dERhdGFbcHJvcE5hbWVdKSkge1xuICAgICAgICBzZXRJbnB1dHNGb3JQcm9wZXJ0eSh0VmlldywgbFZpZXcsIGRhdGFWYWx1ZSwgcHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgICAgaWYgKGlzQ29tcG9uZW50SG9zdCh0Tm9kZSkpXG4gICAgICAgICAgICBtYXJrRGlydHlJZk9uUHVzaChsVmlldywgdE5vZGUuaW5kZXgpO1xuICAgICAgICBpZiAobmdEZXZNb2RlKSB7XG4gICAgICAgICAgICBzZXROZ1JlZmxlY3RQcm9wZXJ0aWVzKGxWaWV3LCBlbGVtZW50LCB0Tm9kZS50eXBlLCBkYXRhVmFsdWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0Tm9kZS50eXBlICYgMyAvKiBBbnlSTm9kZSAqLykge1xuICAgICAgICBwcm9wTmFtZSA9IG1hcFByb3BOYW1lKHByb3BOYW1lKTtcbiAgICAgICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgdmFsaWRhdGVBZ2FpbnN0RXZlbnRQcm9wZXJ0aWVzKHByb3BOYW1lKTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGVQcm9wZXJ0eSh0VmlldywgZWxlbWVudCwgcHJvcE5hbWUsIHROb2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybiBoZXJlIHNpbmNlIHdlIG9ubHkgbG9nIHdhcm5pbmdzIGZvciB1bmtub3duIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICAgbG9nVW5rbm93blByb3BlcnR5RXJyb3IocHJvcE5hbWUsIHROb2RlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZ0Rldk1vZGUucmVuZGVyZXJTZXRQcm9wZXJ0eSsrO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgc2FuaXRpemVyIGlzIG9ubHkgYWRkZWQgd2hlbiB0aGUgY29tcGlsZXIgZGV0ZXJtaW5lcyB0aGF0IHRoZVxuICAgICAgICAvLyBwcm9wZXJ0eSBpcyByaXNreSwgc28gc2FuaXRpemF0aW9uIGNhbiBiZSBkb25lIHdpdGhvdXQgZnVydGhlciBjaGVja3MuXG4gICAgICAgIHZhbHVlID0gc2FuaXRpemVyICE9IG51bGwgPyBzYW5pdGl6ZXIodmFsdWUsIHROb2RlLnZhbHVlIHx8ICcnLCBwcm9wTmFtZSkgOiB2YWx1ZTtcbiAgICAgICAgaWYgKGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSkge1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0UHJvcGVydHkoZWxlbWVudCwgcHJvcE5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaXNBbmltYXRpb25Qcm9wKHByb3BOYW1lKSkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRQcm9wZXJ0eSA/IGVsZW1lbnQuc2V0UHJvcGVydHkocHJvcE5hbWUsIHZhbHVlKSA6XG4gICAgICAgICAgICAgICAgZWxlbWVudFtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0Tm9kZS50eXBlICYgMTIgLyogQW55Q29udGFpbmVyICovKSB7XG4gICAgICAgIC8vIElmIHRoZSBub2RlIGlzIGEgY29udGFpbmVyIGFuZCB0aGUgcHJvcGVydHkgZGlkbid0XG4gICAgICAgIC8vIG1hdGNoIGFueSBvZiB0aGUgaW5wdXRzIG9yIHNjaGVtYXMgd2Ugc2hvdWxkIHRocm93LlxuICAgICAgICBpZiAobmdEZXZNb2RlICYmICFtYXRjaGluZ1NjaGVtYXModFZpZXcsIHROb2RlLnZhbHVlKSkge1xuICAgICAgICAgICAgbG9nVW5rbm93blByb3BlcnR5RXJyb3IocHJvcE5hbWUsIHROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKiBJZiBub2RlIGlzIGFuIE9uUHVzaCBjb21wb25lbnQsIG1hcmtzIGl0cyBMVmlldyBkaXJ0eS4gKi9cbmZ1bmN0aW9uIG1hcmtEaXJ0eUlmT25QdXNoKGxWaWV3LCB2aWV3SW5kZXgpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TFZpZXcobFZpZXcpO1xuICAgIGNvbnN0IGNoaWxkQ29tcG9uZW50TFZpZXcgPSBnZXRDb21wb25lbnRMVmlld0J5SW5kZXgodmlld0luZGV4LCBsVmlldyk7XG4gICAgaWYgKCEoY2hpbGRDb21wb25lbnRMVmlld1tGTEFHU10gJiAxNiAvKiBDaGVja0Fsd2F5cyAqLykpIHtcbiAgICAgICAgY2hpbGRDb21wb25lbnRMVmlld1tGTEFHU10gfD0gNjQgLyogRGlydHkgKi87XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0TmdSZWZsZWN0UHJvcGVydHkobFZpZXcsIGVsZW1lbnQsIHR5cGUsIGF0dHJOYW1lLCB2YWx1ZSkge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gbFZpZXdbUkVOREVSRVJdO1xuICAgIGF0dHJOYW1lID0gbm9ybWFsaXplRGVidWdCaW5kaW5nTmFtZShhdHRyTmFtZSk7XG4gICAgY29uc3QgZGVidWdWYWx1ZSA9IG5vcm1hbGl6ZURlYnVnQmluZGluZ1ZhbHVlKHZhbHVlKTtcbiAgICBpZiAodHlwZSAmIDMgLyogQW55Uk5vZGUgKi8pIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSA/IHJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCBhdHRyTmFtZSkgOlxuICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSA/XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuc2V0QXR0cmlidXRlKGVsZW1lbnQsIGF0dHJOYW1lLCBkZWJ1Z1ZhbHVlKSA6XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGRlYnVnVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB0ZXh0Q29udGVudCA9IGVzY2FwZUNvbW1lbnRUZXh0KGBiaW5kaW5ncz0ke0pTT04uc3RyaW5naWZ5KHsgW2F0dHJOYW1lXTogZGVidWdWYWx1ZSB9LCBudWxsLCAyKX1gKTtcbiAgICAgICAgaWYgKGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSkge1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0VmFsdWUoZWxlbWVudCwgdGV4dENvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHRleHRDb250ZW50O1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0TmdSZWZsZWN0UHJvcGVydGllcyhsVmlldywgZWxlbWVudCwgdHlwZSwgZGF0YVZhbHVlLCB2YWx1ZSkge1xuICAgIGlmICh0eXBlICYgKDMgLyogQW55Uk5vZGUgKi8gfCA0IC8qIENvbnRhaW5lciAqLykpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGRhdGFWYWx1ZSBpcyBhbiBhcnJheSBjb250YWluaW5nIHJ1bnRpbWUgaW5wdXQgb3Igb3V0cHV0IG5hbWVzIGZvciB0aGUgZGlyZWN0aXZlczpcbiAgICAgICAgICogaSswOiBkaXJlY3RpdmUgaW5zdGFuY2UgaW5kZXhcbiAgICAgICAgICogaSsxOiBwcml2YXRlTmFtZVxuICAgICAgICAgKlxuICAgICAgICAgKiBlLmcuIFswLCAnY2hhbmdlJywgJ2NoYW5nZS1taW5pZmllZCddXG4gICAgICAgICAqIHdlIHdhbnQgdG8gc2V0IHRoZSByZWZsZWN0ZWQgcHJvcGVydHkgd2l0aCB0aGUgcHJpdmF0ZU5hbWU6IGRhdGFWYWx1ZVtpKzFdXG4gICAgICAgICAqL1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGFWYWx1ZS5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgc2V0TmdSZWZsZWN0UHJvcGVydHkobFZpZXcsIGVsZW1lbnQsIHR5cGUsIGRhdGFWYWx1ZVtpICsgMV0sIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHkodFZpZXcsIGVsZW1lbnQsIHByb3BOYW1lLCB0Tm9kZSkge1xuICAgIC8vIElmIGBzY2hlbWFzYCBpcyBzZXQgdG8gYG51bGxgLCB0aGF0J3MgYW4gaW5kaWNhdGlvbiB0aGF0IHRoaXMgQ29tcG9uZW50IHdhcyBjb21waWxlZCBpbiBBT1RcbiAgICAvLyBtb2RlIHdoZXJlIHRoaXMgY2hlY2sgaGFwcGVucyBhdCBjb21waWxlIHRpbWUuIEluIEpJVCBtb2RlLCBgc2NoZW1hc2AgaXMgYWx3YXlzIHByZXNlbnQgYW5kXG4gICAgLy8gZGVmaW5lZCBhcyBhbiBhcnJheSAoYXMgYW4gZW1wdHkgYXJyYXkgaW4gY2FzZSBgc2NoZW1hc2AgZmllbGQgaXMgbm90IGRlZmluZWQpIGFuZCB3ZSBzaG91bGRcbiAgICAvLyBleGVjdXRlIHRoZSBjaGVjayBiZWxvdy5cbiAgICBpZiAodFZpZXcuc2NoZW1hcyA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gVGhlIHByb3BlcnR5IGlzIGNvbnNpZGVyZWQgdmFsaWQgaWYgdGhlIGVsZW1lbnQgbWF0Y2hlcyB0aGUgc2NoZW1hLCBpdCBleGlzdHMgb24gdGhlIGVsZW1lbnRcbiAgICAvLyBvciBpdCBpcyBzeW50aGV0aWMsIGFuZCB3ZSBhcmUgaW4gYSBicm93c2VyIGNvbnRleHQgKHdlYiB3b3JrZXIgbm9kZXMgc2hvdWxkIGJlIHNraXBwZWQpLlxuICAgIGlmIChtYXRjaGluZ1NjaGVtYXModFZpZXcsIHROb2RlLnZhbHVlKSB8fCBwcm9wTmFtZSBpbiBlbGVtZW50IHx8IGlzQW5pbWF0aW9uUHJvcChwcm9wTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIE5vdGU6IGB0eXBlb2YgTm9kZWAgcmV0dXJucyAnZnVuY3Rpb24nIGluIG1vc3QgYnJvd3NlcnMsIGJ1dCBvbiBJRSBpdCBpcyAnb2JqZWN0JyBzbyB3ZVxuICAgIC8vIG5lZWQgdG8gYWNjb3VudCBmb3IgYm90aCBoZXJlLCB3aGlsZSBiZWluZyBjYXJlZnVsIGZvciBgdHlwZW9mIG51bGxgIGFsc28gcmV0dXJuaW5nICdvYmplY3QnLlxuICAgIHJldHVybiB0eXBlb2YgTm9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgTm9kZSA9PT0gbnVsbCB8fCAhKGVsZW1lbnQgaW5zdGFuY2VvZiBOb2RlKTtcbn1cbmZ1bmN0aW9uIG1hdGNoaW5nU2NoZW1hcyh0VmlldywgdGFnTmFtZSkge1xuICAgIGNvbnN0IHNjaGVtYXMgPSB0Vmlldy5zY2hlbWFzO1xuICAgIGlmIChzY2hlbWFzICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NoZW1hcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0gc2NoZW1hc1tpXTtcbiAgICAgICAgICAgIGlmIChzY2hlbWEgPT09IE5PX0VSUk9SU19TQ0hFTUEgfHxcbiAgICAgICAgICAgICAgICBzY2hlbWEgPT09IENVU1RPTV9FTEVNRU5UU19TQ0hFTUEgJiYgdGFnTmFtZSAmJiB0YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBMb2dzIGFuIGVycm9yIHRoYXQgYSBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkIG9uIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0gcHJvcE5hbWUgTmFtZSBvZiB0aGUgaW52YWxpZCBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB0Tm9kZSBOb2RlIG9uIHdoaWNoIHdlIGVuY291bnRlcmVkIHRoZSBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gbG9nVW5rbm93blByb3BlcnR5RXJyb3IocHJvcE5hbWUsIHROb2RlKSB7XG4gICAgbGV0IG1lc3NhZ2UgPSBgQ2FuJ3QgYmluZCB0byAnJHtwcm9wTmFtZX0nIHNpbmNlIGl0IGlzbid0IGEga25vd24gcHJvcGVydHkgb2YgJyR7dE5vZGUudmFsdWV9Jy5gO1xuICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0UnVudGltZUVycm9yKDMwMyAvKiBVTktOT1dOX0JJTkRJTkcgKi8sIG1lc3NhZ2UpKTtcbn1cbi8qKlxuICogSW5zdGFudGlhdGUgYSByb290IGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gaW5zdGFudGlhdGVSb290Q29tcG9uZW50KHRWaWV3LCBsVmlldywgZGVmKSB7XG4gICAgY29uc3Qgcm9vdFROb2RlID0gZ2V0Q3VycmVudFROb2RlKCk7XG4gICAgaWYgKHRWaWV3LmZpcnN0Q3JlYXRlUGFzcykge1xuICAgICAgICBpZiAoZGVmLnByb3ZpZGVyc1Jlc29sdmVyKVxuICAgICAgICAgICAgZGVmLnByb3ZpZGVyc1Jlc29sdmVyKGRlZik7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZUluZGV4ID0gYWxsb2NFeHBhbmRvKHRWaWV3LCBsVmlldywgMSwgbnVsbCk7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgYXNzZXJ0RXF1YWwoZGlyZWN0aXZlSW5kZXgsIHJvb3RUTm9kZS5kaXJlY3RpdmVTdGFydCwgJ0JlY2F1c2UgdGhpcyBpcyBhIHJvb3QgY29tcG9uZW50IHRoZSBhbGxvY2F0ZWQgZXhwYW5kbyBzaG91bGQgbWF0Y2ggdGhlIFROb2RlIGNvbXBvbmVudC4nKTtcbiAgICAgICAgY29uZmlndXJlVmlld1dpdGhEaXJlY3RpdmUodFZpZXcsIHJvb3RUTm9kZSwgbFZpZXcsIGRpcmVjdGl2ZUluZGV4LCBkZWYpO1xuICAgIH1cbiAgICBjb25zdCBkaXJlY3RpdmUgPSBnZXROb2RlSW5qZWN0YWJsZShsVmlldywgdFZpZXcsIHJvb3RUTm9kZS5kaXJlY3RpdmVTdGFydCwgcm9vdFROb2RlKTtcbiAgICBhdHRhY2hQYXRjaERhdGEoZGlyZWN0aXZlLCBsVmlldyk7XG4gICAgY29uc3QgbmF0aXZlID0gZ2V0TmF0aXZlQnlUTm9kZShyb290VE5vZGUsIGxWaWV3KTtcbiAgICBpZiAobmF0aXZlKSB7XG4gICAgICAgIGF0dGFjaFBhdGNoRGF0YShuYXRpdmUsIGxWaWV3KTtcbiAgICB9XG4gICAgcmV0dXJuIGRpcmVjdGl2ZTtcbn1cbi8qKlxuICogUmVzb2x2ZSB0aGUgbWF0Y2hlZCBkaXJlY3RpdmVzIG9uIGEgbm9kZS5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZXModFZpZXcsIGxWaWV3LCB0Tm9kZSwgbG9jYWxSZWZzKSB7XG4gICAgLy8gUGxlYXNlIG1ha2Ugc3VyZSB0byBoYXZlIGV4cGxpY2l0IHR5cGUgZm9yIGBleHBvcnRzTWFwYC4gSW5mZXJyZWQgdHlwZSB0cmlnZ2VycyBidWcgaW5cbiAgICAvLyB0c2lja2xlLlxuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRGaXJzdENyZWF0ZVBhc3ModFZpZXcpO1xuICAgIGxldCBoYXNEaXJlY3RpdmVzID0gZmFsc2U7XG4gICAgaWYgKGdldEJpbmRpbmdzRW5hYmxlZCgpKSB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGl2ZURlZnMgPSBmaW5kRGlyZWN0aXZlRGVmTWF0Y2hlcyh0VmlldywgbFZpZXcsIHROb2RlKTtcbiAgICAgICAgY29uc3QgZXhwb3J0c01hcCA9IGxvY2FsUmVmcyA9PT0gbnVsbCA/IG51bGwgOiB7ICcnOiAtMSB9O1xuICAgICAgICBpZiAoZGlyZWN0aXZlRGVmcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgICAgICAgICBpbml0VE5vZGVGbGFncyh0Tm9kZSwgdFZpZXcuZGF0YS5sZW5ndGgsIGRpcmVjdGl2ZURlZnMubGVuZ3RoKTtcbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIHNhbWUgdG9rZW4gaXMgcHJvdmlkZWQgYnkgc2V2ZXJhbCBkaXJlY3RpdmVzIG9uIHRoZSBzYW1lIG5vZGUsIHNvbWUgcnVsZXMgYXBwbHkgaW5cbiAgICAgICAgICAgIC8vIHRoZSB2aWV3RW5naW5lOlxuICAgICAgICAgICAgLy8gLSB2aWV3UHJvdmlkZXJzIGhhdmUgcHJpb3JpdHkgb3ZlciBwcm92aWRlcnNcbiAgICAgICAgICAgIC8vIC0gdGhlIGxhc3QgZGlyZWN0aXZlIGluIE5nTW9kdWxlLmRlY2xhcmF0aW9ucyBoYXMgcHJpb3JpdHkgb3ZlciB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgICAgICAvLyBTbyB0byBtYXRjaCB0aGVzZSBydWxlcywgdGhlIG9yZGVyIGluIHdoaWNoIHByb3ZpZGVycyBhcmUgYWRkZWQgaW4gdGhlIGFycmF5cyBpcyB2ZXJ5XG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGl2ZURlZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWYgPSBkaXJlY3RpdmVEZWZzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChkZWYucHJvdmlkZXJzUmVzb2x2ZXIpXG4gICAgICAgICAgICAgICAgICAgIGRlZi5wcm92aWRlcnNSZXNvbHZlcihkZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHByZU9yZGVySG9va3NGb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgbGV0IHByZU9yZGVyQ2hlY2tIb29rc0ZvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgZGlyZWN0aXZlSWR4ID0gYWxsb2NFeHBhbmRvKHRWaWV3LCBsVmlldywgZGlyZWN0aXZlRGVmcy5sZW5ndGgsIG51bGwpO1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgYXNzZXJ0U2FtZShkaXJlY3RpdmVJZHgsIHROb2RlLmRpcmVjdGl2ZVN0YXJ0LCAnVE5vZGUuZGlyZWN0aXZlU3RhcnQgc2hvdWxkIHBvaW50IHRvIGp1c3QgYWxsb2NhdGVkIHNwYWNlJyk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpcmVjdGl2ZURlZnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWYgPSBkaXJlY3RpdmVEZWZzW2ldO1xuICAgICAgICAgICAgICAgIC8vIE1lcmdlIHRoZSBhdHRycyBpbiB0aGUgb3JkZXIgb2YgbWF0Y2hlcy4gVGhpcyBhc3N1bWVzIHRoYXQgdGhlIGZpcnN0IGRpcmVjdGl2ZSBpcyB0aGVcbiAgICAgICAgICAgICAgICAvLyBjb21wb25lbnQgaXRzZWxmLCBzbyB0aGF0IHRoZSBjb21wb25lbnQgaGFzIHRoZSBsZWFzdCBwcmlvcml0eS5cbiAgICAgICAgICAgICAgICB0Tm9kZS5tZXJnZWRBdHRycyA9IG1lcmdlSG9zdEF0dHJzKHROb2RlLm1lcmdlZEF0dHJzLCBkZWYuaG9zdEF0dHJzKTtcbiAgICAgICAgICAgICAgICBjb25maWd1cmVWaWV3V2l0aERpcmVjdGl2ZSh0VmlldywgdE5vZGUsIGxWaWV3LCBkaXJlY3RpdmVJZHgsIGRlZik7XG4gICAgICAgICAgICAgICAgc2F2ZU5hbWVUb0V4cG9ydE1hcChkaXJlY3RpdmVJZHgsIGRlZiwgZXhwb3J0c01hcCk7XG4gICAgICAgICAgICAgICAgaWYgKGRlZi5jb250ZW50UXVlcmllcyAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdE5vZGUuZmxhZ3MgfD0gOCAvKiBoYXNDb250ZW50UXVlcnkgKi87XG4gICAgICAgICAgICAgICAgaWYgKGRlZi5ob3N0QmluZGluZ3MgIT09IG51bGwgfHwgZGVmLmhvc3RBdHRycyAhPT0gbnVsbCB8fCBkZWYuaG9zdFZhcnMgIT09IDApXG4gICAgICAgICAgICAgICAgICAgIHROb2RlLmZsYWdzIHw9IDEyOCAvKiBoYXNIb3N0QmluZGluZ3MgKi87XG4gICAgICAgICAgICAgICAgY29uc3QgbGlmZUN5Y2xlSG9va3MgPSBkZWYudHlwZS5wcm90b3R5cGU7XG4gICAgICAgICAgICAgICAgLy8gT25seSBwdXNoIGEgbm9kZSBpbmRleCBpbnRvIHRoZSBwcmVPcmRlckhvb2tzIGFycmF5IGlmIHRoaXMgaXMgdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgLy8gcHJlLW9yZGVyIGhvb2sgZm91bmQgb24gdGhpcyBub2RlLlxuICAgICAgICAgICAgICAgIGlmICghcHJlT3JkZXJIb29rc0ZvdW5kICYmXG4gICAgICAgICAgICAgICAgICAgIChsaWZlQ3ljbGVIb29rcy5uZ09uQ2hhbmdlcyB8fCBsaWZlQ3ljbGVIb29rcy5uZ09uSW5pdCB8fCBsaWZlQ3ljbGVIb29rcy5uZ0RvQ2hlY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHdpbGwgcHVzaCB0aGUgYWN0dWFsIGhvb2sgZnVuY3Rpb24gaW50byB0aGlzIGFycmF5IGxhdGVyIGR1cmluZyBkaXIgaW5zdGFudGlhdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2Fubm90IGRvIGl0IG5vdyBiZWNhdXNlIHdlIG11c3QgZW5zdXJlIGhvb2tzIGFyZSByZWdpc3RlcmVkIGluIHRoZSBzYW1lXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yZGVyIHRoYXQgZGlyZWN0aXZlcyBhcmUgY3JlYXRlZCAoaS5lLiBpbmplY3Rpb24gb3JkZXIpLlxuICAgICAgICAgICAgICAgICAgICAodFZpZXcucHJlT3JkZXJIb29rcyB8fCAodFZpZXcucHJlT3JkZXJIb29rcyA9IFtdKSkucHVzaCh0Tm9kZS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHByZU9yZGVySG9va3NGb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcHJlT3JkZXJDaGVja0hvb2tzRm91bmQgJiYgKGxpZmVDeWNsZUhvb2tzLm5nT25DaGFuZ2VzIHx8IGxpZmVDeWNsZUhvb2tzLm5nRG9DaGVjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgKHRWaWV3LnByZU9yZGVyQ2hlY2tIb29rcyB8fCAodFZpZXcucHJlT3JkZXJDaGVja0hvb2tzID0gW10pKS5wdXNoKHROb2RlLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgcHJlT3JkZXJDaGVja0hvb2tzRm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVJZHgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRpYWxpemVJbnB1dEFuZE91dHB1dEFsaWFzZXModFZpZXcsIHROb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXhwb3J0c01hcClcbiAgICAgICAgICAgIGNhY2hlTWF0Y2hpbmdMb2NhbE5hbWVzKHROb2RlLCBsb2NhbFJlZnMsIGV4cG9ydHNNYXApO1xuICAgIH1cbiAgICAvLyBNZXJnZSB0aGUgdGVtcGxhdGUgYXR0cnMgbGFzdCBzbyB0aGF0IHRoZXkgaGF2ZSB0aGUgaGlnaGVzdCBwcmlvcml0eS5cbiAgICB0Tm9kZS5tZXJnZWRBdHRycyA9IG1lcmdlSG9zdEF0dHJzKHROb2RlLm1lcmdlZEF0dHJzLCB0Tm9kZS5hdHRycyk7XG4gICAgcmV0dXJuIGhhc0RpcmVjdGl2ZXM7XG59XG4vKipcbiAqIEFkZCBgaG9zdEJpbmRpbmdzYCB0byB0aGUgYFRWaWV3Lmhvc3RCaW5kaW5nT3BDb2Rlc2AuXG4gKlxuICogQHBhcmFtIHRWaWV3IGBUVmlld2AgdG8gd2hpY2ggdGhlIGBob3N0QmluZGluZ3NgIHNob3VsZCBiZSBhZGRlZC5cbiAqIEBwYXJhbSB0Tm9kZSBgVE5vZGVgIHRoZSBlbGVtZW50IHdoaWNoIGNvbnRhaW5zIHRoZSBkaXJlY3RpdmVcbiAqIEBwYXJhbSBsVmlldyBgTFZpZXdgIGN1cnJlbnQgYExWaWV3YFxuICogQHBhcmFtIGRpcmVjdGl2ZUlkeCBEaXJlY3RpdmUgaW5kZXggaW4gdmlldy5cbiAqIEBwYXJhbSBkaXJlY3RpdmVWYXJzSWR4IFdoZXJlIHdpbGwgdGhlIGRpcmVjdGl2ZSdzIHZhcnMgYmUgc3RvcmVkXG4gKiBAcGFyYW0gZGVmIGBDb21wb25lbnREZWZgL2BEaXJlY3RpdmVEZWZgLCB3aGljaCBjb250YWlucyB0aGUgYGhvc3RWYXJzYC9gaG9zdEJpbmRpbmdzYCB0byBhZGQuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVySG9zdEJpbmRpbmdPcENvZGVzKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIGRpcmVjdGl2ZUlkeCwgZGlyZWN0aXZlVmFyc0lkeCwgZGVmKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEZpcnN0Q3JlYXRlUGFzcyh0Vmlldyk7XG4gICAgY29uc3QgaG9zdEJpbmRpbmdzID0gZGVmLmhvc3RCaW5kaW5ncztcbiAgICBpZiAoaG9zdEJpbmRpbmdzKSB7XG4gICAgICAgIGxldCBob3N0QmluZGluZ09wQ29kZXMgPSB0Vmlldy5ob3N0QmluZGluZ09wQ29kZXM7XG4gICAgICAgIGlmIChob3N0QmluZGluZ09wQ29kZXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGhvc3RCaW5kaW5nT3BDb2RlcyA9IHRWaWV3Lmhvc3RCaW5kaW5nT3BDb2RlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVsZW1lbnRJbmR4ID0gfnROb2RlLmluZGV4O1xuICAgICAgICBpZiAobGFzdFNlbGVjdGVkRWxlbWVudElkeChob3N0QmluZGluZ09wQ29kZXMpICE9IGVsZW1lbnRJbmR4KSB7XG4gICAgICAgICAgICAvLyBDb25kaXRpb25hbGx5IGFkZCBzZWxlY3QgZWxlbWVudCBzbyB0aGF0IHdlIGFyZSBtb3JlIGVmZmljaWVudCBpbiBleGVjdXRpb24uXG4gICAgICAgICAgICAvLyBOT1RFOiB0aGlzIGlzIHN0cmljdGx5IG5vdCBuZWNlc3NhcnkgYW5kIGl0IHRyYWRlcyBjb2RlIHNpemUgZm9yIHJ1bnRpbWUgcGVyZi5cbiAgICAgICAgICAgIC8vIChXZSBjb3VsZCBqdXN0IGFsd2F5cyBhZGQgaXQuKVxuICAgICAgICAgICAgaG9zdEJpbmRpbmdPcENvZGVzLnB1c2goZWxlbWVudEluZHgpO1xuICAgICAgICB9XG4gICAgICAgIGhvc3RCaW5kaW5nT3BDb2Rlcy5wdXNoKGRpcmVjdGl2ZUlkeCwgZGlyZWN0aXZlVmFyc0lkeCwgaG9zdEJpbmRpbmdzKTtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGxhc3Qgc2VsZWN0ZWQgZWxlbWVudCBpbmRleCBpbiB0aGUgYEhvc3RCaW5kaW5nT3BDb2Rlc2BcbiAqXG4gKiBGb3IgcGVyZiByZWFzb25zIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIHRoZSBzZWxlY3RlZCBlbGVtZW50IGluZGV4IGluIGBIb3N0QmluZGluZ09wQ29kZXNgIG9ubHlcbiAqIGlmIGl0IGNoYW5nZXMuIFRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGxhc3QgaW5kZXggKG9yICcwJyBpZiBub3QgZm91bmQuKVxuICpcbiAqIFNlbGVjdGVkIGVsZW1lbnQgaW5kZXggYXJlIG9ubHkgdGhlIG9uZXMgd2hpY2ggYXJlIG5lZ2F0aXZlLlxuICovXG5mdW5jdGlvbiBsYXN0U2VsZWN0ZWRFbGVtZW50SWR4KGhvc3RCaW5kaW5nT3BDb2Rlcykge1xuICAgIGxldCBpID0gaG9zdEJpbmRpbmdPcENvZGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoaSA+IDApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBob3N0QmluZGluZ09wQ29kZXNbLS1pXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDA7XG59XG4vKipcbiAqIEluc3RhbnRpYXRlIGFsbCB0aGUgZGlyZWN0aXZlcyB0aGF0IHdlcmUgcHJldmlvdXNseSByZXNvbHZlZCBvbiB0aGUgY3VycmVudCBub2RlLlxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0ZUFsbERpcmVjdGl2ZXModFZpZXcsIGxWaWV3LCB0Tm9kZSwgbmF0aXZlKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB0Tm9kZS5kaXJlY3RpdmVTdGFydDtcbiAgICBjb25zdCBlbmQgPSB0Tm9kZS5kaXJlY3RpdmVFbmQ7XG4gICAgaWYgKCF0Vmlldy5maXJzdENyZWF0ZVBhc3MpIHtcbiAgICAgICAgZ2V0T3JDcmVhdGVOb2RlSW5qZWN0b3JGb3JOb2RlKHROb2RlLCBsVmlldyk7XG4gICAgfVxuICAgIGF0dGFjaFBhdGNoRGF0YShuYXRpdmUsIGxWaWV3KTtcbiAgICBjb25zdCBpbml0aWFsSW5wdXRzID0gdE5vZGUuaW5pdGlhbElucHV0cztcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICBjb25zdCBkZWYgPSB0Vmlldy5kYXRhW2ldO1xuICAgICAgICBjb25zdCBpc0NvbXBvbmVudCA9IGlzQ29tcG9uZW50RGVmKGRlZik7XG4gICAgICAgIGlmIChpc0NvbXBvbmVudCkge1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlVHlwZSh0Tm9kZSwgMyAvKiBBbnlSTm9kZSAqLyk7XG4gICAgICAgICAgICBhZGRDb21wb25lbnRMb2dpYyhsVmlldywgdE5vZGUsIGRlZik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gZ2V0Tm9kZUluamVjdGFibGUobFZpZXcsIHRWaWV3LCBpLCB0Tm9kZSk7XG4gICAgICAgIGF0dGFjaFBhdGNoRGF0YShkaXJlY3RpdmUsIGxWaWV3KTtcbiAgICAgICAgaWYgKGluaXRpYWxJbnB1dHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNldElucHV0c0Zyb21BdHRycyhsVmlldywgaSAtIHN0YXJ0LCBkaXJlY3RpdmUsIGRlZiwgdE5vZGUsIGluaXRpYWxJbnB1dHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NvbXBvbmVudCkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50VmlldyA9IGdldENvbXBvbmVudExWaWV3QnlJbmRleCh0Tm9kZS5pbmRleCwgbFZpZXcpO1xuICAgICAgICAgICAgY29tcG9uZW50Vmlld1tDT05URVhUXSA9IGRpcmVjdGl2ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGludm9rZURpcmVjdGl2ZXNIb3N0QmluZGluZ3ModFZpZXcsIGxWaWV3LCB0Tm9kZSkge1xuICAgIGNvbnN0IHN0YXJ0ID0gdE5vZGUuZGlyZWN0aXZlU3RhcnQ7XG4gICAgY29uc3QgZW5kID0gdE5vZGUuZGlyZWN0aXZlRW5kO1xuICAgIGNvbnN0IGZpcnN0Q3JlYXRlUGFzcyA9IHRWaWV3LmZpcnN0Q3JlYXRlUGFzcztcbiAgICBjb25zdCBlbGVtZW50SW5kZXggPSB0Tm9kZS5pbmRleDtcbiAgICBjb25zdCBjdXJyZW50RGlyZWN0aXZlSW5kZXggPSBnZXRDdXJyZW50RGlyZWN0aXZlSW5kZXgoKTtcbiAgICB0cnkge1xuICAgICAgICBzZXRTZWxlY3RlZEluZGV4KGVsZW1lbnRJbmRleCk7XG4gICAgICAgIGZvciAobGV0IGRpckluZGV4ID0gc3RhcnQ7IGRpckluZGV4IDwgZW5kOyBkaXJJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBkZWYgPSB0Vmlldy5kYXRhW2RpckluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IGxWaWV3W2RpckluZGV4XTtcbiAgICAgICAgICAgIHNldEN1cnJlbnREaXJlY3RpdmVJbmRleChkaXJJbmRleCk7XG4gICAgICAgICAgICBpZiAoZGVmLmhvc3RCaW5kaW5ncyAhPT0gbnVsbCB8fCBkZWYuaG9zdFZhcnMgIT09IDAgfHwgZGVmLmhvc3RBdHRycyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGludm9rZUhvc3RCaW5kaW5nc0luQ3JlYXRpb25Nb2RlKGRlZiwgZGlyZWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgc2V0U2VsZWN0ZWRJbmRleCgtMSk7XG4gICAgICAgIHNldEN1cnJlbnREaXJlY3RpdmVJbmRleChjdXJyZW50RGlyZWN0aXZlSW5kZXgpO1xuICAgIH1cbn1cbi8qKlxuICogSW52b2tlIHRoZSBob3N0IGJpbmRpbmdzIGluIGNyZWF0aW9uIG1vZGUuXG4gKlxuICogQHBhcmFtIGRlZiBgRGlyZWN0aXZlRGVmYCB3aGljaCBtYXkgY29udGFpbiB0aGUgYGhvc3RCaW5kaW5nc2AgZnVuY3Rpb24uXG4gKiBAcGFyYW0gZGlyZWN0aXZlIEluc3RhbmNlIG9mIGRpcmVjdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaW52b2tlSG9zdEJpbmRpbmdzSW5DcmVhdGlvbk1vZGUoZGVmLCBkaXJlY3RpdmUpIHtcbiAgICBpZiAoZGVmLmhvc3RCaW5kaW5ncyAhPT0gbnVsbCkge1xuICAgICAgICBkZWYuaG9zdEJpbmRpbmdzKDEgLyogQ3JlYXRlICovLCBkaXJlY3RpdmUpO1xuICAgIH1cbn1cbi8qKlxuICogTWF0Y2hlcyB0aGUgY3VycmVudCBub2RlIGFnYWluc3QgYWxsIGF2YWlsYWJsZSBzZWxlY3RvcnMuXG4gKiBJZiBhIGNvbXBvbmVudCBpcyBtYXRjaGVkIChhdCBtb3N0IG9uZSksIGl0IGlzIHJldHVybmVkIGluIGZpcnN0IHBvc2l0aW9uIGluIHRoZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gZmluZERpcmVjdGl2ZURlZk1hdGNoZXModFZpZXcsIHZpZXdEYXRhLCB0Tm9kZSkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRGaXJzdENyZWF0ZVBhc3ModFZpZXcpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRUTm9kZVR5cGUodE5vZGUsIDMgLyogQW55Uk5vZGUgKi8gfCAxMiAvKiBBbnlDb250YWluZXIgKi8pO1xuICAgIGNvbnN0IHJlZ2lzdHJ5ID0gdFZpZXcuZGlyZWN0aXZlUmVnaXN0cnk7XG4gICAgbGV0IG1hdGNoZXMgPSBudWxsO1xuICAgIGlmIChyZWdpc3RyeSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBkZWYgPSByZWdpc3RyeVtpXTtcbiAgICAgICAgICAgIGlmIChpc05vZGVNYXRjaGluZ1NlbGVjdG9yTGlzdCh0Tm9kZSwgZGVmLnNlbGVjdG9ycywgLyogaXNQcm9qZWN0aW9uTW9kZSAqLyBmYWxzZSkpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGVzIHx8IChtYXRjaGVzID0gbmdEZXZNb2RlID8gbmV3IE1hdGNoZXNBcnJheSgpIDogW10pO1xuICAgICAgICAgICAgICAgIGRpUHVibGljSW5JbmplY3RvcihnZXRPckNyZWF0ZU5vZGVJbmplY3RvckZvck5vZGUodE5vZGUsIHZpZXdEYXRhKSwgdFZpZXcsIGRlZi50eXBlKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wb25lbnREZWYoZGVmKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmdEZXZNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRUTm9kZVR5cGUodE5vZGUsIDIgLyogRWxlbWVudCAqLywgYFwiJHt0Tm9kZS52YWx1ZX1cIiB0YWdzIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBob3N0cy4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFBsZWFzZSB1c2UgYSBkaWZmZXJlbnQgdGFnIHRvIGFjdGl2YXRlIHRoZSAke3N0cmluZ2lmeShkZWYudHlwZSl9IGNvbXBvbmVudC5gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Tm9kZS5mbGFncyAmIDIgLyogaXNDb21wb25lbnRIb3N0ICovKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93TXVsdGlwbGVDb21wb25lbnRFcnJvcih0Tm9kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbWFya0FzQ29tcG9uZW50SG9zdCh0VmlldywgdE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgY29tcG9uZW50IGlzIGFsd2F5cyBzdG9yZWQgZmlyc3Qgd2l0aCBkaXJlY3RpdmVzIGFmdGVyLlxuICAgICAgICAgICAgICAgICAgICBtYXRjaGVzLnVuc2hpZnQoZGVmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChkZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogTWFya3MgYSBnaXZlbiBUTm9kZSBhcyBhIGNvbXBvbmVudCdzIGhvc3QuIFRoaXMgY29uc2lzdHMgb2Y6XG4gKiAtIHNldHRpbmcgYXBwcm9wcmlhdGUgVE5vZGUgZmxhZ3M7XG4gKiAtIHN0b3JpbmcgaW5kZXggb2YgY29tcG9uZW50J3MgaG9zdCBlbGVtZW50IHNvIGl0IHdpbGwgYmUgcXVldWVkIGZvciB2aWV3IHJlZnJlc2ggZHVyaW5nIENELlxuICovXG5mdW5jdGlvbiBtYXJrQXNDb21wb25lbnRIb3N0KHRWaWV3LCBob3N0VE5vZGUpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0Rmlyc3RDcmVhdGVQYXNzKHRWaWV3KTtcbiAgICBob3N0VE5vZGUuZmxhZ3MgfD0gMiAvKiBpc0NvbXBvbmVudEhvc3QgKi87XG4gICAgKHRWaWV3LmNvbXBvbmVudHMgfHwgKHRWaWV3LmNvbXBvbmVudHMgPSBuZ0Rldk1vZGUgPyBuZXcgVFZpZXdDb21wb25lbnRzKCkgOiBbXSkpXG4gICAgICAgIC5wdXNoKGhvc3RUTm9kZS5pbmRleCk7XG59XG4vKiogQ2FjaGVzIGxvY2FsIG5hbWVzIGFuZCB0aGVpciBtYXRjaGluZyBkaXJlY3RpdmUgaW5kaWNlcyBmb3IgcXVlcnkgYW5kIHRlbXBsYXRlIGxvb2t1cHMuICovXG5mdW5jdGlvbiBjYWNoZU1hdGNoaW5nTG9jYWxOYW1lcyh0Tm9kZSwgbG9jYWxSZWZzLCBleHBvcnRzTWFwKSB7XG4gICAgaWYgKGxvY2FsUmVmcykge1xuICAgICAgICBjb25zdCBsb2NhbE5hbWVzID0gdE5vZGUubG9jYWxOYW1lcyA9IG5nRGV2TW9kZSA/IG5ldyBUTm9kZUxvY2FsTmFtZXMoKSA6IFtdO1xuICAgICAgICAvLyBMb2NhbCBuYW1lcyBtdXN0IGJlIHN0b3JlZCBpbiB0Tm9kZSBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IGxvY2FsUmVmcyBhcmUgZGVmaW5lZFxuICAgICAgICAvLyBpbiB0aGUgdGVtcGxhdGUgdG8gZW5zdXJlIHRoZSBkYXRhIGlzIGxvYWRlZCBpbiB0aGUgc2FtZSBzbG90cyBhcyB0aGVpciByZWZzXG4gICAgICAgIC8vIGluIHRoZSB0ZW1wbGF0ZSAoZm9yIHRlbXBsYXRlIHF1ZXJpZXMpLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2FsUmVmcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBleHBvcnRzTWFwW2xvY2FsUmVmc1tpICsgMV1dO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09IG51bGwpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcigtMzAxIC8qIEVYUE9SVF9OT1RfRk9VTkQgKi8sIG5nRGV2TW9kZSAmJiBgRXhwb3J0IG9mIG5hbWUgJyR7bG9jYWxSZWZzW2kgKyAxXX0nIG5vdCBmb3VuZCFgKTtcbiAgICAgICAgICAgIGxvY2FsTmFtZXMucHVzaChsb2NhbFJlZnNbaV0sIGluZGV4KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQnVpbGRzIHVwIGFuIGV4cG9ydCBtYXAgYXMgZGlyZWN0aXZlcyBhcmUgY3JlYXRlZCwgc28gbG9jYWwgcmVmcyBjYW4gYmUgcXVpY2tseSBtYXBwZWRcbiAqIHRvIHRoZWlyIGRpcmVjdGl2ZSBpbnN0YW5jZXMuXG4gKi9cbmZ1bmN0aW9uIHNhdmVOYW1lVG9FeHBvcnRNYXAoZGlyZWN0aXZlSWR4LCBkZWYsIGV4cG9ydHNNYXApIHtcbiAgICBpZiAoZXhwb3J0c01hcCkge1xuICAgICAgICBpZiAoZGVmLmV4cG9ydEFzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZi5leHBvcnRBcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGV4cG9ydHNNYXBbZGVmLmV4cG9ydEFzW2ldXSA9IGRpcmVjdGl2ZUlkeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDb21wb25lbnREZWYoZGVmKSlcbiAgICAgICAgICAgIGV4cG9ydHNNYXBbJyddID0gZGlyZWN0aXZlSWR4O1xuICAgIH1cbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIGZsYWdzIG9uIHRoZSBjdXJyZW50IG5vZGUsIHNldHRpbmcgYWxsIGluZGljZXMgdG8gdGhlIGluaXRpYWwgaW5kZXgsXG4gKiB0aGUgZGlyZWN0aXZlIGNvdW50IHRvIDAsIGFuZCBhZGRpbmcgdGhlIGlzQ29tcG9uZW50IGZsYWcuXG4gKiBAcGFyYW0gaW5kZXggdGhlIGluaXRpYWwgaW5kZXhcbiAqL1xuZnVuY3Rpb24gaW5pdFROb2RlRmxhZ3ModE5vZGUsIGluZGV4LCBudW1iZXJPZkRpcmVjdGl2ZXMpIHtcbiAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgYXNzZXJ0Tm90RXF1YWwobnVtYmVyT2ZEaXJlY3RpdmVzLCB0Tm9kZS5kaXJlY3RpdmVFbmQgLSB0Tm9kZS5kaXJlY3RpdmVTdGFydCwgJ1JlYWNoZWQgdGhlIG1heCBudW1iZXIgb2YgZGlyZWN0aXZlcycpO1xuICAgIHROb2RlLmZsYWdzIHw9IDEgLyogaXNEaXJlY3RpdmVIb3N0ICovO1xuICAgIC8vIFdoZW4gdGhlIGZpcnN0IGRpcmVjdGl2ZSBpcyBjcmVhdGVkIG9uIGEgbm9kZSwgc2F2ZSB0aGUgaW5kZXhcbiAgICB0Tm9kZS5kaXJlY3RpdmVTdGFydCA9IGluZGV4O1xuICAgIHROb2RlLmRpcmVjdGl2ZUVuZCA9IGluZGV4ICsgbnVtYmVyT2ZEaXJlY3RpdmVzO1xuICAgIHROb2RlLnByb3ZpZGVySW5kZXhlcyA9IGluZGV4O1xufVxuLyoqXG4gKiBTZXR1cCBkaXJlY3RpdmUgZm9yIGluc3RhbnRpYXRpb24uXG4gKlxuICogV2UgbmVlZCB0byBjcmVhdGUgYSBgTm9kZUluamVjdG9yRmFjdG9yeWAgd2hpY2ggaXMgdGhlbiBpbnNlcnRlZCBpbiBib3RoIHRoZSBgQmx1ZXByaW50YCBhcyB3ZWxsXG4gKiBhcyBgTFZpZXdgLiBgVFZpZXdgIGdldHMgdGhlIGBEaXJlY3RpdmVEZWZgLlxuICpcbiAqIEBwYXJhbSB0VmlldyBgVFZpZXdgXG4gKiBAcGFyYW0gdE5vZGUgYFROb2RlYFxuICogQHBhcmFtIGxWaWV3IGBMVmlld2BcbiAqIEBwYXJhbSBkaXJlY3RpdmVJbmRleCBJbmRleCB3aGVyZSB0aGUgZGlyZWN0aXZlIHdpbGwgYmUgc3RvcmVkIGluIHRoZSBFeHBhbmRvLlxuICogQHBhcmFtIGRlZiBgRGlyZWN0aXZlRGVmYFxuICovXG5mdW5jdGlvbiBjb25maWd1cmVWaWV3V2l0aERpcmVjdGl2ZSh0VmlldywgdE5vZGUsIGxWaWV3LCBkaXJlY3RpdmVJbmRleCwgZGVmKSB7XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydEdyZWF0ZXJUaGFuT3JFcXVhbChkaXJlY3RpdmVJbmRleCwgSEVBREVSX09GRlNFVCwgJ011c3QgYmUgaW4gRXhwYW5kbyBzZWN0aW9uJyk7XG4gICAgdFZpZXcuZGF0YVtkaXJlY3RpdmVJbmRleF0gPSBkZWY7XG4gICAgY29uc3QgZGlyZWN0aXZlRmFjdG9yeSA9IGRlZi5mYWN0b3J5IHx8IChkZWYuZmFjdG9yeSA9IGdldEZhY3RvcnlEZWYoZGVmLnR5cGUsIHRydWUpKTtcbiAgICBjb25zdCBub2RlSW5qZWN0b3JGYWN0b3J5ID0gbmV3IE5vZGVJbmplY3RvckZhY3RvcnkoZGlyZWN0aXZlRmFjdG9yeSwgaXNDb21wb25lbnREZWYoZGVmKSwgbnVsbCk7XG4gICAgdFZpZXcuYmx1ZXByaW50W2RpcmVjdGl2ZUluZGV4XSA9IG5vZGVJbmplY3RvckZhY3Rvcnk7XG4gICAgbFZpZXdbZGlyZWN0aXZlSW5kZXhdID0gbm9kZUluamVjdG9yRmFjdG9yeTtcbiAgICByZWdpc3Rlckhvc3RCaW5kaW5nT3BDb2Rlcyh0VmlldywgdE5vZGUsIGxWaWV3LCBkaXJlY3RpdmVJbmRleCwgYWxsb2NFeHBhbmRvKHRWaWV3LCBsVmlldywgZGVmLmhvc3RWYXJzLCBOT19DSEFOR0UpLCBkZWYpO1xufVxuZnVuY3Rpb24gYWRkQ29tcG9uZW50TG9naWMobFZpZXcsIGhvc3RUTm9kZSwgZGVmKSB7XG4gICAgY29uc3QgbmF0aXZlID0gZ2V0TmF0aXZlQnlUTm9kZShob3N0VE5vZGUsIGxWaWV3KTtcbiAgICBjb25zdCB0VmlldyA9IGdldE9yQ3JlYXRlVENvbXBvbmVudFZpZXcoZGVmKTtcbiAgICAvLyBPbmx5IGNvbXBvbmVudCB2aWV3cyBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIHZpZXcgdHJlZSBkaXJlY3RseS4gRW1iZWRkZWQgdmlld3MgYXJlXG4gICAgLy8gYWNjZXNzZWQgdGhyb3VnaCB0aGVpciBjb250YWluZXJzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmVtb3ZlZCAvIHJlLWFkZGVkIGxhdGVyLlxuICAgIGNvbnN0IHJlbmRlcmVyRmFjdG9yeSA9IGxWaWV3W1JFTkRFUkVSX0ZBQ1RPUlldO1xuICAgIGNvbnN0IGNvbXBvbmVudFZpZXcgPSBhZGRUb1ZpZXdUcmVlKGxWaWV3LCBjcmVhdGVMVmlldyhsVmlldywgdFZpZXcsIG51bGwsIGRlZi5vblB1c2ggPyA2NCAvKiBEaXJ0eSAqLyA6IDE2IC8qIENoZWNrQWx3YXlzICovLCBuYXRpdmUsIGhvc3RUTm9kZSwgcmVuZGVyZXJGYWN0b3J5LCByZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobmF0aXZlLCBkZWYpLCBudWxsLCBudWxsKSk7XG4gICAgLy8gQ29tcG9uZW50IHZpZXcgd2lsbCBhbHdheXMgYmUgY3JlYXRlZCBiZWZvcmUgYW55IGluamVjdGVkIExDb250YWluZXJzLFxuICAgIC8vIHNvIHRoaXMgaXMgYSByZWd1bGFyIGVsZW1lbnQsIHdyYXAgaXQgd2l0aCB0aGUgY29tcG9uZW50IHZpZXdcbiAgICBsVmlld1tob3N0VE5vZGUuaW5kZXhdID0gY29tcG9uZW50Vmlldztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRBdHRyaWJ1dGVJbnRlcm5hbCh0Tm9kZSwgbFZpZXcsIG5hbWUsIHZhbHVlLCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSkge1xuICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgYXNzZXJ0Tm90U2FtZSh2YWx1ZSwgTk9fQ0hBTkdFLCAnSW5jb21pbmcgdmFsdWUgc2hvdWxkIG5ldmVyIGJlIE5PX0NIQU5HRS4nKTtcbiAgICAgICAgdmFsaWRhdGVBZ2FpbnN0RXZlbnRBdHRyaWJ1dGVzKG5hbWUpO1xuICAgICAgICBhc3NlcnRUTm9kZVR5cGUodE5vZGUsIDIgLyogRWxlbWVudCAqLywgYEF0dGVtcHRlZCB0byBzZXQgYXR0cmlidXRlIFxcYCR7bmFtZX1cXGAgb24gYSBjb250YWluZXIgbm9kZS4gYCArXG4gICAgICAgICAgICBgSG9zdCBiaW5kaW5ncyBhcmUgbm90IHZhbGlkIG9uIG5nLWNvbnRhaW5lciBvciBuZy10ZW1wbGF0ZS5gKTtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IGdldE5hdGl2ZUJ5VE5vZGUodE5vZGUsIGxWaWV3KTtcbiAgICBzZXRFbGVtZW50QXR0cmlidXRlKGxWaWV3W1JFTkRFUkVSXSwgZWxlbWVudCwgbmFtZXNwYWNlLCB0Tm9kZS52YWx1ZSwgbmFtZSwgdmFsdWUsIHNhbml0aXplcik7XG59XG5mdW5jdGlvbiBzZXRFbGVtZW50QXR0cmlidXRlKHJlbmRlcmVyLCBlbGVtZW50LCBuYW1lc3BhY2UsIHRhZ05hbWUsIG5hbWUsIHZhbHVlLCBzYW5pdGl6ZXIpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyUmVtb3ZlQXR0cmlidXRlKys7XG4gICAgICAgIGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSA/IHJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZShlbGVtZW50LCBuYW1lLCBuYW1lc3BhY2UpIDpcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmdEZXZNb2RlICYmIG5nRGV2TW9kZS5yZW5kZXJlclNldEF0dHJpYnV0ZSsrO1xuICAgICAgICBjb25zdCBzdHJWYWx1ZSA9IHNhbml0aXplciA9PSBudWxsID8gcmVuZGVyU3RyaW5naWZ5KHZhbHVlKSA6IHNhbml0aXplcih2YWx1ZSwgdGFnTmFtZSB8fCAnJywgbmFtZSk7XG4gICAgICAgIGlmIChpc1Byb2NlZHVyYWxSZW5kZXJlcihyZW5kZXJlcikpIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLnNldEF0dHJpYnV0ZShlbGVtZW50LCBuYW1lLCBzdHJWYWx1ZSwgbmFtZXNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5hbWVzcGFjZSA/IGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobmFtZXNwYWNlLCBuYW1lLCBzdHJWYWx1ZSkgOlxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHN0clZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogU2V0cyBpbml0aWFsIGlucHV0IHByb3BlcnRpZXMgb24gZGlyZWN0aXZlIGluc3RhbmNlcyBmcm9tIGF0dHJpYnV0ZSBkYXRhXG4gKlxuICogQHBhcmFtIGxWaWV3IEN1cnJlbnQgTFZpZXcgdGhhdCBpcyBiZWluZyBwcm9jZXNzZWQuXG4gKiBAcGFyYW0gZGlyZWN0aXZlSW5kZXggSW5kZXggb2YgdGhlIGRpcmVjdGl2ZSBpbiBkaXJlY3RpdmVzIGFycmF5XG4gKiBAcGFyYW0gaW5zdGFuY2UgSW5zdGFuY2Ugb2YgdGhlIGRpcmVjdGl2ZSBvbiB3aGljaCB0byBzZXQgdGhlIGluaXRpYWwgaW5wdXRzXG4gKiBAcGFyYW0gZGVmIFRoZSBkaXJlY3RpdmUgZGVmIHRoYXQgY29udGFpbnMgdGhlIGxpc3Qgb2YgaW5wdXRzXG4gKiBAcGFyYW0gdE5vZGUgVGhlIHN0YXRpYyBkYXRhIGZvciB0aGlzIG5vZGVcbiAqL1xuZnVuY3Rpb24gc2V0SW5wdXRzRnJvbUF0dHJzKGxWaWV3LCBkaXJlY3RpdmVJbmRleCwgaW5zdGFuY2UsIGRlZiwgdE5vZGUsIGluaXRpYWxJbnB1dERhdGEpIHtcbiAgICBjb25zdCBpbml0aWFsSW5wdXRzID0gaW5pdGlhbElucHV0RGF0YVtkaXJlY3RpdmVJbmRleF07XG4gICAgaWYgKGluaXRpYWxJbnB1dHMgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc2V0SW5wdXQgPSBkZWYuc2V0SW5wdXQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5pdGlhbElucHV0cy5sZW5ndGg7KSB7XG4gICAgICAgICAgICBjb25zdCBwdWJsaWNOYW1lID0gaW5pdGlhbElucHV0c1tpKytdO1xuICAgICAgICAgICAgY29uc3QgcHJpdmF0ZU5hbWUgPSBpbml0aWFsSW5wdXRzW2krK107XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGluaXRpYWxJbnB1dHNbaSsrXTtcbiAgICAgICAgICAgIGlmIChzZXRJbnB1dCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRlZi5zZXRJbnB1dChpbnN0YW5jZSwgdmFsdWUsIHB1YmxpY05hbWUsIHByaXZhdGVOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluc3RhbmNlW3ByaXZhdGVOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hdGl2ZUVsZW1lbnQgPSBnZXROYXRpdmVCeVROb2RlKHROb2RlLCBsVmlldyk7XG4gICAgICAgICAgICAgICAgc2V0TmdSZWZsZWN0UHJvcGVydHkobFZpZXcsIG5hdGl2ZUVsZW1lbnQsIHROb2RlLnR5cGUsIHByaXZhdGVOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEdlbmVyYXRlcyBpbml0aWFsSW5wdXREYXRhIGZvciBhIG5vZGUgYW5kIHN0b3JlcyBpdCBpbiB0aGUgdGVtcGxhdGUncyBzdGF0aWMgc3RvcmFnZVxuICogc28gc3Vic2VxdWVudCB0ZW1wbGF0ZSBpbnZvY2F0aW9ucyBkb24ndCBoYXZlIHRvIHJlY2FsY3VsYXRlIGl0LlxuICpcbiAqIGluaXRpYWxJbnB1dERhdGEgaXMgYW4gYXJyYXkgY29udGFpbmluZyB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHNldCBhcyBpbnB1dCBwcm9wZXJ0aWVzXG4gKiBmb3IgZGlyZWN0aXZlcyBvbiB0aGlzIG5vZGUsIGJ1dCBvbmx5IG9uY2Ugb24gY3JlYXRpb24uIFdlIG5lZWQgdGhpcyBhcnJheSB0byBzdXBwb3J0XG4gKiB0aGUgY2FzZSB3aGVyZSB5b3Ugc2V0IGFuIEBJbnB1dCBwcm9wZXJ0eSBvZiBhIGRpcmVjdGl2ZSB1c2luZyBhdHRyaWJ1dGUtbGlrZSBzeW50YXguXG4gKiBlLmcuIGlmIHlvdSBoYXZlIGEgYG5hbWVgIEBJbnB1dCwgeW91IGNhbiBzZXQgaXQgb25jZSBsaWtlIHRoaXM6XG4gKlxuICogPG15LWNvbXBvbmVudCBuYW1lPVwiQmVzc1wiPjwvbXktY29tcG9uZW50PlxuICpcbiAqIEBwYXJhbSBpbnB1dHMgVGhlIGxpc3Qgb2YgaW5wdXRzIGZyb20gdGhlIGRpcmVjdGl2ZSBkZWZcbiAqIEBwYXJhbSBhdHRycyBUaGUgc3RhdGljIGF0dHJzIG9uIHRoaXMgbm9kZVxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZUluaXRpYWxJbnB1dHMoaW5wdXRzLCBhdHRycykge1xuICAgIGxldCBpbnB1dHNUb1N0b3JlID0gbnVsbDtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBhdHRycy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYXR0ck5hbWUgPSBhdHRyc1tpXTtcbiAgICAgICAgaWYgKGF0dHJOYW1lID09PSAwIC8qIE5hbWVzcGFjZVVSSSAqLykge1xuICAgICAgICAgICAgLy8gV2UgZG8gbm90IGFsbG93IGlucHV0cyBvbiBuYW1lc3BhY2VkIGF0dHJpYnV0ZXMuXG4gICAgICAgICAgICBpICs9IDQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhdHRyTmFtZSA9PT0gNSAvKiBQcm9qZWN0QXMgKi8pIHtcbiAgICAgICAgICAgIC8vIFNraXAgb3ZlciB0aGUgYG5nUHJvamVjdEFzYCB2YWx1ZS5cbiAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGhpdCBhbnkgb3RoZXIgYXR0cmlidXRlIG1hcmtlcnMsIHdlJ3JlIGRvbmUgYW55d2F5LiBOb25lIG9mIHRob3NlIGFyZSB2YWxpZCBpbnB1dHMuXG4gICAgICAgIGlmICh0eXBlb2YgYXR0ck5hbWUgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGlmIChpbnB1dHMuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXRzVG9TdG9yZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICBpbnB1dHNUb1N0b3JlID0gW107XG4gICAgICAgICAgICBpbnB1dHNUb1N0b3JlLnB1c2goYXR0ck5hbWUsIGlucHV0c1thdHRyTmFtZV0sIGF0dHJzW2kgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgICAgaSArPSAyO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRzVG9TdG9yZTtcbn1cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vIFZpZXdDb250YWluZXIgJiBWaWV3XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gTm90IHN1cmUgd2h5IEkgbmVlZCB0byBkbyBgYW55YCBoZXJlIGJ1dCBUUyBjb21wbGFpbnMgbGF0ZXIuXG5jb25zdCBMQ29udGFpbmVyQXJyYXkgPSBjbGFzcyBMQ29udGFpbmVyIGV4dGVuZHMgQXJyYXkge1xufTtcbi8qKlxuICogQ3JlYXRlcyBhIExDb250YWluZXIsIGVpdGhlciBmcm9tIGEgY29udGFpbmVyIGluc3RydWN0aW9uLCBvciBmb3IgYSBWaWV3Q29udGFpbmVyUmVmLlxuICpcbiAqIEBwYXJhbSBob3N0TmF0aXZlIFRoZSBob3N0IGVsZW1lbnQgZm9yIHRoZSBMQ29udGFpbmVyXG4gKiBAcGFyYW0gaG9zdFROb2RlIFRoZSBob3N0IFROb2RlIGZvciB0aGUgTENvbnRhaW5lclxuICogQHBhcmFtIGN1cnJlbnRWaWV3IFRoZSBwYXJlbnQgdmlldyBvZiB0aGUgTENvbnRhaW5lclxuICogQHBhcmFtIG5hdGl2ZSBUaGUgbmF0aXZlIGNvbW1lbnQgZWxlbWVudFxuICogQHBhcmFtIGlzRm9yVmlld0NvbnRhaW5lclJlZiBPcHRpb25hbCBhIGZsYWcgaW5kaWNhdGluZyB0aGUgVmlld0NvbnRhaW5lclJlZiBjYXNlXG4gKiBAcmV0dXJucyBMQ29udGFpbmVyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxDb250YWluZXIoaG9zdE5hdGl2ZSwgY3VycmVudFZpZXcsIG5hdGl2ZSwgdE5vZGUpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TFZpZXcoY3VycmVudFZpZXcpO1xuICAgIG5nRGV2TW9kZSAmJiAhaXNQcm9jZWR1cmFsUmVuZGVyZXIoY3VycmVudFZpZXdbUkVOREVSRVJdKSAmJiBhc3NlcnREb21Ob2RlKG5hdGl2ZSk7XG4gICAgLy8gaHR0cHM6Ly9qc3BlcmYuY29tL2FycmF5LWxpdGVyYWwtdnMtbmV3LWFycmF5LXJlYWxseVxuICAgIGNvbnN0IGxDb250YWluZXIgPSBuZXcgKG5nRGV2TW9kZSA/IExDb250YWluZXJBcnJheSA6IEFycmF5KShob3N0TmF0aXZlLCAvLyBob3N0IG5hdGl2ZVxuICAgIHRydWUsIC8vIEJvb2xlYW4gYHRydWVgIGluIHRoaXMgcG9zaXRpb24gc2lnbmlmaWVzIHRoYXQgdGhpcyBpcyBhbiBgTENvbnRhaW5lcmBcbiAgICBmYWxzZSwgLy8gaGFzIHRyYW5zcGxhbnRlZCB2aWV3c1xuICAgIGN1cnJlbnRWaWV3LCAvLyBwYXJlbnRcbiAgICBudWxsLCAvLyBuZXh0XG4gICAgMCwgLy8gdHJhbnNwbGFudGVkIHZpZXdzIHRvIHJlZnJlc2ggY291bnRcbiAgICB0Tm9kZSwgLy8gdF9ob3N0XG4gICAgbmF0aXZlLCAvLyBuYXRpdmUsXG4gICAgbnVsbCwgLy8gdmlldyByZWZzXG4gICAgbnVsbCk7XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydEVxdWFsKGxDb250YWluZXIubGVuZ3RoLCBDT05UQUlORVJfSEVBREVSX09GRlNFVCwgJ1Nob3VsZCBhbGxvY2F0ZSBjb3JyZWN0IG51bWJlciBvZiBzbG90cyBmb3IgTENvbnRhaW5lciBoZWFkZXIuJyk7XG4gICAgbmdEZXZNb2RlICYmIGF0dGFjaExDb250YWluZXJEZWJ1ZyhsQ29udGFpbmVyKTtcbiAgICByZXR1cm4gbENvbnRhaW5lcjtcbn1cbi8qKlxuICogR29lcyBvdmVyIGVtYmVkZGVkIHZpZXdzIChvbmVzIGNyZWF0ZWQgdGhyb3VnaCBWaWV3Q29udGFpbmVyUmVmIEFQSXMpIGFuZCByZWZyZXNoZXNcbiAqIHRoZW0gYnkgZXhlY3V0aW5nIGFuIGFzc29jaWF0ZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHJlZnJlc2hFbWJlZGRlZFZpZXdzKGxWaWV3KSB7XG4gICAgZm9yIChsZXQgbENvbnRhaW5lciA9IGdldEZpcnN0TENvbnRhaW5lcihsVmlldyk7IGxDb250YWluZXIgIT09IG51bGw7IGxDb250YWluZXIgPSBnZXROZXh0TENvbnRhaW5lcihsQ29udGFpbmVyKSkge1xuICAgICAgICBmb3IgKGxldCBpID0gQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQ7IGkgPCBsQ29udGFpbmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbWJlZGRlZExWaWV3ID0gbENvbnRhaW5lcltpXTtcbiAgICAgICAgICAgIGNvbnN0IGVtYmVkZGVkVFZpZXcgPSBlbWJlZGRlZExWaWV3W1RWSUVXXTtcbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGVtYmVkZGVkVFZpZXcsICdUVmlldyBtdXN0IGJlIGFsbG9jYXRlZCcpO1xuICAgICAgICAgICAgaWYgKHZpZXdBdHRhY2hlZFRvQ2hhbmdlRGV0ZWN0b3IoZW1iZWRkZWRMVmlldykpIHtcbiAgICAgICAgICAgICAgICByZWZyZXNoVmlldyhlbWJlZGRlZFRWaWV3LCBlbWJlZGRlZExWaWV3LCBlbWJlZGRlZFRWaWV3LnRlbXBsYXRlLCBlbWJlZGRlZExWaWV3W0NPTlRFWFRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogTWFyayB0cmFuc3BsYW50ZWQgdmlld3MgYXMgbmVlZGluZyB0byBiZSByZWZyZXNoZWQgYXQgdGhlaXIgaW5zZXJ0aW9uIHBvaW50cy5cbiAqXG4gKiBAcGFyYW0gbFZpZXcgVGhlIGBMVmlld2AgdGhhdCBtYXkgaGF2ZSB0cmFuc3BsYW50ZWQgdmlld3MuXG4gKi9cbmZ1bmN0aW9uIG1hcmtUcmFuc3BsYW50ZWRWaWV3c0ZvclJlZnJlc2gobFZpZXcpIHtcbiAgICBmb3IgKGxldCBsQ29udGFpbmVyID0gZ2V0Rmlyc3RMQ29udGFpbmVyKGxWaWV3KTsgbENvbnRhaW5lciAhPT0gbnVsbDsgbENvbnRhaW5lciA9IGdldE5leHRMQ29udGFpbmVyKGxDb250YWluZXIpKSB7XG4gICAgICAgIGlmICghbENvbnRhaW5lcltIQVNfVFJBTlNQTEFOVEVEX1ZJRVdTXSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBtb3ZlZFZpZXdzID0gbENvbnRhaW5lcltNT1ZFRF9WSUVXU107XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKG1vdmVkVmlld3MsICdUcmFuc3BsYW50ZWQgVmlldyBmbGFncyBzZXQgYnV0IG1pc3NpbmcgTU9WRURfVklFV1MnKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb3ZlZFZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBtb3ZlZExWaWV3ID0gbW92ZWRWaWV3c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGluc2VydGlvbkxDb250YWluZXIgPSBtb3ZlZExWaWV3W1BBUkVOVF07XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TENvbnRhaW5lcihpbnNlcnRpb25MQ29udGFpbmVyKTtcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSBtb3ZlZCBMVmlldyB3YXMgYWxyZWFkeSBtYXJrZWQgZm9yXG4gICAgICAgICAgICAvLyByZWZyZXNoLlxuICAgICAgICAgICAgaWYgKChtb3ZlZExWaWV3W0ZMQUdTXSAmIDEwMjQgLyogUmVmcmVzaFRyYW5zcGxhbnRlZFZpZXcgKi8pID09PSAwKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlVHJhbnNwbGFudGVkVmlld0NvdW50KGluc2VydGlvbkxDb250YWluZXIsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTm90ZSwgaXQgaXMgcG9zc2libGUgdGhhdCB0aGUgYG1vdmVkVmlld3NgIGlzIHRyYWNraW5nIHZpZXdzIHRoYXQgYXJlIHRyYW5zcGxhbnRlZCAqYW5kKlxuICAgICAgICAgICAgLy8gdGhvc2UgdGhhdCBhcmVuJ3QgKGRlY2xhcmF0aW9uIGNvbXBvbmVudCA9PT0gaW5zZXJ0aW9uIGNvbXBvbmVudCkuIEluIHRoZSBsYXR0ZXIgY2FzZSxcbiAgICAgICAgICAgIC8vIGl0J3MgZmluZSB0byBhZGQgdGhlIGZsYWcsIGFzIHdlIHdpbGwgY2xlYXIgaXQgaW1tZWRpYXRlbHkgaW5cbiAgICAgICAgICAgIC8vIGByZWZyZXNoRW1iZWRkZWRWaWV3c2AgZm9yIHRoZSB2aWV3IGN1cnJlbnRseSBiZWluZyByZWZyZXNoZWQuXG4gICAgICAgICAgICBtb3ZlZExWaWV3W0ZMQUdTXSB8PSAxMDI0IC8qIFJlZnJlc2hUcmFuc3BsYW50ZWRWaWV3ICovO1xuICAgICAgICB9XG4gICAgfVxufVxuLy8vLy8vLy8vLy8vL1xuLyoqXG4gKiBSZWZyZXNoZXMgY29tcG9uZW50cyBieSBlbnRlcmluZyB0aGUgY29tcG9uZW50IHZpZXcgYW5kIHByb2Nlc3NpbmcgaXRzIGJpbmRpbmdzLCBxdWVyaWVzLCBldGMuXG4gKlxuICogQHBhcmFtIGNvbXBvbmVudEhvc3RJZHggIEVsZW1lbnQgaW5kZXggaW4gTFZpZXdbXSAoYWRqdXN0ZWQgZm9yIEhFQURFUl9PRkZTRVQpXG4gKi9cbmZ1bmN0aW9uIHJlZnJlc2hDb21wb25lbnQoaG9zdExWaWV3LCBjb21wb25lbnRIb3N0SWR4KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEVxdWFsKGlzQ3JlYXRpb25Nb2RlKGhvc3RMVmlldyksIGZhbHNlLCAnU2hvdWxkIGJlIHJ1biBpbiB1cGRhdGUgbW9kZScpO1xuICAgIGNvbnN0IGNvbXBvbmVudFZpZXcgPSBnZXRDb21wb25lbnRMVmlld0J5SW5kZXgoY29tcG9uZW50SG9zdElkeCwgaG9zdExWaWV3KTtcbiAgICAvLyBPbmx5IGF0dGFjaGVkIGNvbXBvbmVudHMgdGhhdCBhcmUgQ2hlY2tBbHdheXMgb3IgT25QdXNoIGFuZCBkaXJ0eSBzaG91bGQgYmUgcmVmcmVzaGVkXG4gICAgaWYgKHZpZXdBdHRhY2hlZFRvQ2hhbmdlRGV0ZWN0b3IoY29tcG9uZW50VmlldykpIHtcbiAgICAgICAgY29uc3QgdFZpZXcgPSBjb21wb25lbnRWaWV3W1RWSUVXXTtcbiAgICAgICAgaWYgKGNvbXBvbmVudFZpZXdbRkxBR1NdICYgKDE2IC8qIENoZWNrQWx3YXlzICovIHwgNjQgLyogRGlydHkgKi8pKSB7XG4gICAgICAgICAgICByZWZyZXNoVmlldyh0VmlldywgY29tcG9uZW50VmlldywgdFZpZXcudGVtcGxhdGUsIGNvbXBvbmVudFZpZXdbQ09OVEVYVF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNvbXBvbmVudFZpZXdbVFJBTlNQTEFOVEVEX1ZJRVdTX1RPX1JFRlJFU0hdID4gMCkge1xuICAgICAgICAgICAgLy8gT25seSBhdHRhY2hlZCBjb21wb25lbnRzIHRoYXQgYXJlIENoZWNrQWx3YXlzIG9yIE9uUHVzaCBhbmQgZGlydHkgc2hvdWxkIGJlIHJlZnJlc2hlZFxuICAgICAgICAgICAgcmVmcmVzaENvbnRhaW5zRGlydHlWaWV3KGNvbXBvbmVudFZpZXcpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBSZWZyZXNoZXMgYWxsIHRyYW5zcGxhbnRlZCB2aWV3cyBtYXJrZWQgd2l0aCBgTFZpZXdGbGFncy5SZWZyZXNoVHJhbnNwbGFudGVkVmlld2AgdGhhdCBhcmVcbiAqIGNoaWxkcmVuIG9yIGRlc2NlbmRhbnRzIG9mIHRoZSBnaXZlbiBsVmlldy5cbiAqXG4gKiBAcGFyYW0gbFZpZXcgVGhlIGxWaWV3IHdoaWNoIGNvbnRhaW5zIGRlc2NlbmRhbnQgdHJhbnNwbGFudGVkIHZpZXdzIHRoYXQgbmVlZCB0byBiZSByZWZyZXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHJlZnJlc2hDb250YWluc0RpcnR5VmlldyhsVmlldykge1xuICAgIGZvciAobGV0IGxDb250YWluZXIgPSBnZXRGaXJzdExDb250YWluZXIobFZpZXcpOyBsQ29udGFpbmVyICE9PSBudWxsOyBsQ29udGFpbmVyID0gZ2V0TmV4dExDb250YWluZXIobENvbnRhaW5lcikpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IENPTlRBSU5FUl9IRUFERVJfT0ZGU0VUOyBpIDwgbENvbnRhaW5lci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZW1iZWRkZWRMVmlldyA9IGxDb250YWluZXJbaV07XG4gICAgICAgICAgICBpZiAoZW1iZWRkZWRMVmlld1tGTEFHU10gJiAxMDI0IC8qIFJlZnJlc2hUcmFuc3BsYW50ZWRWaWV3ICovKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZW1iZWRkZWRUVmlldyA9IGVtYmVkZGVkTFZpZXdbVFZJRVddO1xuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGVtYmVkZGVkVFZpZXcsICdUVmlldyBtdXN0IGJlIGFsbG9jYXRlZCcpO1xuICAgICAgICAgICAgICAgIHJlZnJlc2hWaWV3KGVtYmVkZGVkVFZpZXcsIGVtYmVkZGVkTFZpZXcsIGVtYmVkZGVkVFZpZXcudGVtcGxhdGUsIGVtYmVkZGVkTFZpZXdbQ09OVEVYVF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZW1iZWRkZWRMVmlld1tUUkFOU1BMQU5URURfVklFV1NfVE9fUkVGUkVTSF0gPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVmcmVzaENvbnRhaW5zRGlydHlWaWV3KGVtYmVkZGVkTFZpZXcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHRWaWV3ID0gbFZpZXdbVFZJRVddO1xuICAgIC8vIFJlZnJlc2ggY2hpbGQgY29tcG9uZW50IHZpZXdzLlxuICAgIGNvbnN0IGNvbXBvbmVudHMgPSB0Vmlldy5jb21wb25lbnRzO1xuICAgIGlmIChjb21wb25lbnRzICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50VmlldyA9IGdldENvbXBvbmVudExWaWV3QnlJbmRleChjb21wb25lbnRzW2ldLCBsVmlldyk7XG4gICAgICAgICAgICAvLyBPbmx5IGF0dGFjaGVkIGNvbXBvbmVudHMgdGhhdCBhcmUgQ2hlY2tBbHdheXMgb3IgT25QdXNoIGFuZCBkaXJ0eSBzaG91bGQgYmUgcmVmcmVzaGVkXG4gICAgICAgICAgICBpZiAodmlld0F0dGFjaGVkVG9DaGFuZ2VEZXRlY3Rvcihjb21wb25lbnRWaWV3KSAmJlxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFZpZXdbVFJBTlNQTEFOVEVEX1ZJRVdTX1RPX1JFRlJFU0hdID4gMCkge1xuICAgICAgICAgICAgICAgIHJlZnJlc2hDb250YWluc0RpcnR5Vmlldyhjb21wb25lbnRWaWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHJlbmRlckNvbXBvbmVudCQxKGhvc3RMVmlldywgY29tcG9uZW50SG9zdElkeCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbChpc0NyZWF0aW9uTW9kZShob3N0TFZpZXcpLCB0cnVlLCAnU2hvdWxkIGJlIHJ1biBpbiBjcmVhdGlvbiBtb2RlJyk7XG4gICAgY29uc3QgY29tcG9uZW50VmlldyA9IGdldENvbXBvbmVudExWaWV3QnlJbmRleChjb21wb25lbnRIb3N0SWR4LCBob3N0TFZpZXcpO1xuICAgIGNvbnN0IGNvbXBvbmVudFRWaWV3ID0gY29tcG9uZW50Vmlld1tUVklFV107XG4gICAgc3luY1ZpZXdXaXRoQmx1ZXByaW50KGNvbXBvbmVudFRWaWV3LCBjb21wb25lbnRWaWV3KTtcbiAgICByZW5kZXJWaWV3KGNvbXBvbmVudFRWaWV3LCBjb21wb25lbnRWaWV3LCBjb21wb25lbnRWaWV3W0NPTlRFWFRdKTtcbn1cbi8qKlxuICogU3luY3MgYW4gTFZpZXcgaW5zdGFuY2Ugd2l0aCBpdHMgYmx1ZXByaW50IGlmIHRoZXkgaGF2ZSBnb3R0ZW4gb3V0IG9mIHN5bmMuXG4gKlxuICogVHlwaWNhbGx5LCBibHVlcHJpbnRzIGFuZCB0aGVpciB2aWV3IGluc3RhbmNlcyBzaG91bGQgYWx3YXlzIGJlIGluIHN5bmMsIHNvIHRoZSBsb29wIGhlcmVcbiAqIHdpbGwgYmUgc2tpcHBlZC4gSG93ZXZlciwgY29uc2lkZXIgdGhpcyBjYXNlIG9mIHR3byBjb21wb25lbnRzIHNpZGUtYnktc2lkZTpcbiAqXG4gKiBBcHAgdGVtcGxhdGU6XG4gKiBgYGBcbiAqIDxjb21wPjwvY29tcD5cbiAqIDxjb21wPjwvY29tcD5cbiAqIGBgYFxuICpcbiAqIFRoZSBmb2xsb3dpbmcgd2lsbCBoYXBwZW46XG4gKiAxLiBBcHAgdGVtcGxhdGUgYmVnaW5zIHByb2Nlc3NpbmcuXG4gKiAyLiBGaXJzdCA8Y29tcD4gaXMgbWF0Y2hlZCBhcyBhIGNvbXBvbmVudCBhbmQgaXRzIExWaWV3IGlzIGNyZWF0ZWQuXG4gKiAzLiBTZWNvbmQgPGNvbXA+IGlzIG1hdGNoZWQgYXMgYSBjb21wb25lbnQgYW5kIGl0cyBMVmlldyBpcyBjcmVhdGVkLlxuICogNC4gQXBwIHRlbXBsYXRlIGNvbXBsZXRlcyBwcm9jZXNzaW5nLCBzbyBpdCdzIHRpbWUgdG8gY2hlY2sgY2hpbGQgdGVtcGxhdGVzLlxuICogNS4gRmlyc3QgPGNvbXA+IHRlbXBsYXRlIGlzIGNoZWNrZWQuIEl0IGhhcyBhIGRpcmVjdGl2ZSwgc28gaXRzIGRlZiBpcyBwdXNoZWQgdG8gYmx1ZXByaW50LlxuICogNi4gU2Vjb25kIDxjb21wPiB0ZW1wbGF0ZSBpcyBjaGVja2VkLiBJdHMgYmx1ZXByaW50IGhhcyBiZWVuIHVwZGF0ZWQgYnkgdGhlIGZpcnN0XG4gKiA8Y29tcD4gdGVtcGxhdGUsIGJ1dCBpdHMgTFZpZXcgd2FzIGNyZWF0ZWQgYmVmb3JlIHRoaXMgdXBkYXRlLCBzbyBpdCBpcyBvdXQgb2Ygc3luYy5cbiAqXG4gKiBOb3RlIHRoYXQgZW1iZWRkZWQgdmlld3MgaW5zaWRlIG5nRm9yIGxvb3BzIHdpbGwgbmV2ZXIgYmUgb3V0IG9mIHN5bmMgYmVjYXVzZSB0aGVzZSB2aWV3c1xuICogYXJlIHByb2Nlc3NlZCBhcyBzb29uIGFzIHRoZXkgYXJlIGNyZWF0ZWQuXG4gKlxuICogQHBhcmFtIHRWaWV3IFRoZSBgVFZpZXdgIHRoYXQgY29udGFpbnMgdGhlIGJsdWVwcmludCBmb3Igc3luY2luZ1xuICogQHBhcmFtIGxWaWV3IFRoZSB2aWV3IHRvIHN5bmNcbiAqL1xuZnVuY3Rpb24gc3luY1ZpZXdXaXRoQmx1ZXByaW50KHRWaWV3LCBsVmlldykge1xuICAgIGZvciAobGV0IGkgPSBsVmlldy5sZW5ndGg7IGkgPCB0Vmlldy5ibHVlcHJpbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbFZpZXcucHVzaCh0Vmlldy5ibHVlcHJpbnRbaV0pO1xuICAgIH1cbn1cbi8qKlxuICogQWRkcyBMVmlldyBvciBMQ29udGFpbmVyIHRvIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgdmlldyB0cmVlLlxuICpcbiAqIFRoaXMgc3RydWN0dXJlIHdpbGwgYmUgdXNlZCB0byB0cmF2ZXJzZSB0aHJvdWdoIG5lc3RlZCB2aWV3cyB0byByZW1vdmUgbGlzdGVuZXJzXG4gKiBhbmQgY2FsbCBvbkRlc3Ryb3kgY2FsbGJhY2tzLlxuICpcbiAqIEBwYXJhbSBsVmlldyBUaGUgdmlldyB3aGVyZSBMVmlldyBvciBMQ29udGFpbmVyIHNob3VsZCBiZSBhZGRlZFxuICogQHBhcmFtIGFkanVzdGVkSG9zdEluZGV4IEluZGV4IG9mIHRoZSB2aWV3J3MgaG9zdCBub2RlIGluIExWaWV3W10sIGFkanVzdGVkIGZvciBoZWFkZXJcbiAqIEBwYXJhbSBsVmlld09yTENvbnRhaW5lciBUaGUgTFZpZXcgb3IgTENvbnRhaW5lciB0byBhZGQgdG8gdGhlIHZpZXcgdHJlZVxuICogQHJldHVybnMgVGhlIHN0YXRlIHBhc3NlZCBpblxuICovXG5mdW5jdGlvbiBhZGRUb1ZpZXdUcmVlKGxWaWV3LCBsVmlld09yTENvbnRhaW5lcikge1xuICAgIC8vIFRPRE8oYmVubGVzaC9taXNrbyk6IFRoaXMgaW1wbGVtZW50YXRpb24gaXMgaW5jb3JyZWN0LCBiZWNhdXNlIGl0IGFsd2F5cyBhZGRzIHRoZSBMQ29udGFpbmVyXG4gICAgLy8gdG8gdGhlIGVuZCBvZiB0aGUgcXVldWUsIHdoaWNoIG1lYW5zIGlmIHRoZSBkZXZlbG9wZXIgcmV0cmlldmVzIHRoZSBMQ29udGFpbmVycyBmcm9tIFJOb2RlcyBvdXRcbiAgICAvLyBvZiBvcmRlciwgdGhlIGNoYW5nZSBkZXRlY3Rpb24gd2lsbCBydW4gb3V0IG9mIG9yZGVyLCBhcyB0aGUgYWN0IG9mIHJldHJpZXZpbmcgdGhlIHRoZVxuICAgIC8vIExDb250YWluZXIgZnJvbSB0aGUgUk5vZGUgaXMgd2hhdCBhZGRzIGl0IHRvIHRoZSBxdWV1ZS5cbiAgICBpZiAobFZpZXdbQ0hJTERfSEVBRF0pIHtcbiAgICAgICAgbFZpZXdbQ0hJTERfVEFJTF1bTkVYVF0gPSBsVmlld09yTENvbnRhaW5lcjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGxWaWV3W0NISUxEX0hFQURdID0gbFZpZXdPckxDb250YWluZXI7XG4gICAgfVxuICAgIGxWaWV3W0NISUxEX1RBSUxdID0gbFZpZXdPckxDb250YWluZXI7XG4gICAgcmV0dXJuIGxWaWV3T3JMQ29udGFpbmVyO1xufVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLyBDaGFuZ2UgZGV0ZWN0aW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIE1hcmtzIGN1cnJlbnQgdmlldyBhbmQgYWxsIGFuY2VzdG9ycyBkaXJ0eS5cbiAqXG4gKiBSZXR1cm5zIHRoZSByb290IHZpZXcgYmVjYXVzZSBpdCBpcyBmb3VuZCBhcyBhIGJ5cHJvZHVjdCBvZiBtYXJraW5nIHRoZSB2aWV3IHRyZWVcbiAqIGRpcnR5LCBhbmQgY2FuIGJlIHVzZWQgYnkgbWV0aG9kcyB0aGF0IGNvbnN1bWUgbWFya1ZpZXdEaXJ0eSgpIHRvIGVhc2lseSBzY2hlZHVsZVxuICogY2hhbmdlIGRldGVjdGlvbi4gT3RoZXJ3aXNlLCBzdWNoIG1ldGhvZHMgd291bGQgbmVlZCB0byB0cmF2ZXJzZSB1cCB0aGUgdmlldyB0cmVlXG4gKiBhbiBhZGRpdGlvbmFsIHRpbWUgdG8gZ2V0IHRoZSByb290IHZpZXcgYW5kIHNjaGVkdWxlIGEgdGljayBvbiBpdC5cbiAqXG4gKiBAcGFyYW0gbFZpZXcgVGhlIHN0YXJ0aW5nIExWaWV3IHRvIG1hcmsgZGlydHlcbiAqIEByZXR1cm5zIHRoZSByb290IExWaWV3XG4gKi9cbmZ1bmN0aW9uIG1hcmtWaWV3RGlydHkobFZpZXcpIHtcbiAgICB3aGlsZSAobFZpZXcpIHtcbiAgICAgICAgbFZpZXdbRkxBR1NdIHw9IDY0IC8qIERpcnR5ICovO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBnZXRMVmlld1BhcmVudChsVmlldyk7XG4gICAgICAgIC8vIFN0b3AgdHJhdmVyc2luZyB1cCBhcyBzb29uIGFzIHlvdSBmaW5kIGEgcm9vdCB2aWV3IHRoYXQgd2Fzbid0IGF0dGFjaGVkIHRvIGFueSBjb250YWluZXJcbiAgICAgICAgaWYgKGlzUm9vdFZpZXcobFZpZXcpICYmICFwYXJlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBsVmlldztcbiAgICAgICAgfVxuICAgICAgICAvLyBjb250aW51ZSBvdGhlcndpc2VcbiAgICAgICAgbFZpZXcgPSBwYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBVc2VkIHRvIHNjaGVkdWxlIGNoYW5nZSBkZXRlY3Rpb24gb24gdGhlIHdob2xlIGFwcGxpY2F0aW9uLlxuICpcbiAqIFVubGlrZSBgdGlja2AsIGBzY2hlZHVsZVRpY2tgIGNvYWxlc2NlcyBtdWx0aXBsZSBjYWxscyBpbnRvIG9uZSBjaGFuZ2UgZGV0ZWN0aW9uIHJ1bi5cbiAqIEl0IGlzIHVzdWFsbHkgY2FsbGVkIGluZGlyZWN0bHkgYnkgY2FsbGluZyBgbWFya0RpcnR5YCB3aGVuIHRoZSB2aWV3IG5lZWRzIHRvIGJlXG4gKiByZS1yZW5kZXJlZC5cbiAqXG4gKiBUeXBpY2FsbHkgYHNjaGVkdWxlVGlja2AgdXNlcyBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCB0byBjb2FsZXNjZSBtdWx0aXBsZVxuICogYHNjaGVkdWxlVGlja2AgcmVxdWVzdHMuIFRoZSBzY2hlZHVsaW5nIGZ1bmN0aW9uIGNhbiBiZSBvdmVycmlkZGVuIGluXG4gKiBgcmVuZGVyQ29tcG9uZW50YCdzIGBzY2hlZHVsZXJgIG9wdGlvbi5cbiAqL1xuZnVuY3Rpb24gc2NoZWR1bGVUaWNrKHJvb3RDb250ZXh0LCBmbGFncykge1xuICAgIGNvbnN0IG5vdGhpbmdTY2hlZHVsZWQgPSByb290Q29udGV4dC5mbGFncyA9PT0gMCAvKiBFbXB0eSAqLztcbiAgICBpZiAobm90aGluZ1NjaGVkdWxlZCAmJiByb290Q29udGV4dC5jbGVhbiA9PSBfQ0xFQU5fUFJPTUlTRSkge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8zOTI5NlxuICAgICAgICAvLyBzaG91bGQgb25seSBhdHRhY2ggdGhlIGZsYWdzIHdoZW4gcmVhbGx5IHNjaGVkdWxpbmcgYSB0aWNrXG4gICAgICAgIHJvb3RDb250ZXh0LmZsYWdzIHw9IGZsYWdzO1xuICAgICAgICBsZXQgcmVzO1xuICAgICAgICByb290Q29udGV4dC5jbGVhbiA9IG5ldyBQcm9taXNlKChyKSA9PiByZXMgPSByKTtcbiAgICAgICAgcm9vdENvbnRleHQuc2NoZWR1bGVyKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChyb290Q29udGV4dC5mbGFncyAmIDEgLyogRGV0ZWN0Q2hhbmdlcyAqLykge1xuICAgICAgICAgICAgICAgIHJvb3RDb250ZXh0LmZsYWdzICY9IH4xIC8qIERldGVjdENoYW5nZXMgKi87XG4gICAgICAgICAgICAgICAgdGlja1Jvb3RDb250ZXh0KHJvb3RDb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyb290Q29udGV4dC5mbGFncyAmIDIgLyogRmx1c2hQbGF5ZXJzICovKSB7XG4gICAgICAgICAgICAgICAgcm9vdENvbnRleHQuZmxhZ3MgJj0gfjIgLyogRmx1c2hQbGF5ZXJzICovO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllckhhbmRsZXIgPSByb290Q29udGV4dC5wbGF5ZXJIYW5kbGVyO1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXJIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYXllckhhbmRsZXIuZmx1c2hQbGF5ZXJzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm9vdENvbnRleHQuY2xlYW4gPSBfQ0xFQU5fUFJPTUlTRTtcbiAgICAgICAgICAgIHJlcyhudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGlja1Jvb3RDb250ZXh0KHJvb3RDb250ZXh0KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb290Q29udGV4dC5jb21wb25lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHJvb3RDb21wb25lbnQgPSByb290Q29udGV4dC5jb21wb25lbnRzW2ldO1xuICAgICAgICBjb25zdCBsVmlldyA9IHJlYWRQYXRjaGVkTFZpZXcocm9vdENvbXBvbmVudCk7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gbFZpZXdbVFZJRVddO1xuICAgICAgICByZW5kZXJDb21wb25lbnRPclRlbXBsYXRlKHRWaWV3LCBsVmlldywgdFZpZXcudGVtcGxhdGUsIHJvb3RDb21wb25lbnQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGVjdENoYW5nZXNJbnRlcm5hbCh0VmlldywgbFZpZXcsIGNvbnRleHQpIHtcbiAgICBjb25zdCByZW5kZXJlckZhY3RvcnkgPSBsVmlld1tSRU5ERVJFUl9GQUNUT1JZXTtcbiAgICBpZiAocmVuZGVyZXJGYWN0b3J5LmJlZ2luKVxuICAgICAgICByZW5kZXJlckZhY3RvcnkuYmVnaW4oKTtcbiAgICB0cnkge1xuICAgICAgICByZWZyZXNoVmlldyh0VmlldywgbFZpZXcsIHRWaWV3LnRlbXBsYXRlLCBjb250ZXh0KTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGxWaWV3LCBlcnJvcik7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgaWYgKHJlbmRlcmVyRmFjdG9yeS5lbmQpXG4gICAgICAgICAgICByZW5kZXJlckZhY3RvcnkuZW5kKCk7XG4gICAgfVxufVxuLyoqXG4gKiBTeW5jaHJvbm91c2x5IHBlcmZvcm0gY2hhbmdlIGRldGVjdGlvbiBvbiBhIHJvb3QgdmlldyBhbmQgaXRzIGNvbXBvbmVudHMuXG4gKlxuICogQHBhcmFtIGxWaWV3IFRoZSB2aWV3IHdoaWNoIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQgb24uXG4gKi9cbmZ1bmN0aW9uIGRldGVjdENoYW5nZXNJblJvb3RWaWV3KGxWaWV3KSB7XG4gICAgdGlja1Jvb3RDb250ZXh0KGxWaWV3W0NPTlRFWFRdKTtcbn1cbmZ1bmN0aW9uIGNoZWNrTm9DaGFuZ2VzSW50ZXJuYWwodFZpZXcsIHZpZXcsIGNvbnRleHQpIHtcbiAgICBzZXRJc0luQ2hlY2tOb0NoYW5nZXNNb2RlKHRydWUpO1xuICAgIHRyeSB7XG4gICAgICAgIGRldGVjdENoYW5nZXNJbnRlcm5hbCh0VmlldywgdmlldywgY29udGV4dCk7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBzZXRJc0luQ2hlY2tOb0NoYW5nZXNNb2RlKGZhbHNlKTtcbiAgICB9XG59XG4vKipcbiAqIENoZWNrcyB0aGUgY2hhbmdlIGRldGVjdG9yIG9uIGEgcm9vdCB2aWV3IGFuZCBpdHMgY29tcG9uZW50cywgYW5kIHRocm93cyBpZiBhbnkgY2hhbmdlcyBhcmVcbiAqIGRldGVjdGVkLlxuICpcbiAqIFRoaXMgaXMgdXNlZCBpbiBkZXZlbG9wbWVudCBtb2RlIHRvIHZlcmlmeSB0aGF0IHJ1bm5pbmcgY2hhbmdlIGRldGVjdGlvbiBkb2Vzbid0XG4gKiBpbnRyb2R1Y2Ugb3RoZXIgY2hhbmdlcy5cbiAqXG4gKiBAcGFyYW0gbFZpZXcgVGhlIHZpZXcgd2hpY2ggdGhlIGNoYW5nZSBkZXRlY3Rpb24gc2hvdWxkIGJlIGNoZWNrZWQgb24uXG4gKi9cbmZ1bmN0aW9uIGNoZWNrTm9DaGFuZ2VzSW5Sb290VmlldyhsVmlldykge1xuICAgIHNldElzSW5DaGVja05vQ2hhbmdlc01vZGUodHJ1ZSk7XG4gICAgdHJ5IHtcbiAgICAgICAgZGV0ZWN0Q2hhbmdlc0luUm9vdFZpZXcobFZpZXcpO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNJbkNoZWNrTm9DaGFuZ2VzTW9kZShmYWxzZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZXhlY3V0ZVZpZXdRdWVyeUZuKGZsYWdzLCB2aWV3UXVlcnlGbiwgY29tcG9uZW50KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQodmlld1F1ZXJ5Rm4sICdWaWV3IHF1ZXJpZXMgZnVuY3Rpb24gdG8gZXhlY3V0ZSBtdXN0IGJlIGRlZmluZWQuJyk7XG4gICAgc2V0Q3VycmVudFF1ZXJ5SW5kZXgoMCk7XG4gICAgdmlld1F1ZXJ5Rm4oZmxhZ3MsIGNvbXBvbmVudCk7XG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vIEJpbmRpbmdzICYgaW50ZXJwb2xhdGlvbnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogU3RvcmVzIG1ldGEtZGF0YSBmb3IgYSBwcm9wZXJ0eSBiaW5kaW5nIHRvIGJlIHVzZWQgYnkgVGVzdEJlZCdzIGBEZWJ1Z0VsZW1lbnQucHJvcGVydGllc2AuXG4gKlxuICogSW4gb3JkZXIgdG8gc3VwcG9ydCBUZXN0QmVkJ3MgYERlYnVnRWxlbWVudC5wcm9wZXJ0aWVzYCB3ZSBuZWVkIHRvIHNhdmUsIGZvciBlYWNoIGJpbmRpbmc6XG4gKiAtIGEgYm91bmQgcHJvcGVydHkgbmFtZTtcbiAqIC0gYSBzdGF0aWMgcGFydHMgb2YgaW50ZXJwb2xhdGVkIHN0cmluZ3M7XG4gKlxuICogQSBnaXZlbiBwcm9wZXJ0eSBtZXRhZGF0YSBpcyBzYXZlZCBhdCB0aGUgYmluZGluZydzIGluZGV4IGluIHRoZSBgVFZpZXcuZGF0YWAgKGluIG90aGVyIHdvcmRzLCBhXG4gKiBwcm9wZXJ0eSBiaW5kaW5nIG1ldGFkYXRhIHdpbGwgYmUgc3RvcmVkIGluIGBUVmlldy5kYXRhYCBhdCB0aGUgc2FtZSBpbmRleCBhcyBhIGJvdW5kIHZhbHVlIGluXG4gKiBgTFZpZXdgKS4gTWV0YWRhdGEgYXJlIHJlcHJlc2VudGVkIGFzIGBJTlRFUlBPTEFUSU9OX0RFTElNSVRFUmAtZGVsaW1pdGVkIHN0cmluZyB3aXRoIHRoZVxuICogZm9sbG93aW5nIGZvcm1hdDpcbiAqIC0gYHByb3BlcnR5TmFtZWAgZm9yIGJvdW5kIHByb3BlcnRpZXM7XG4gKiAtIGBwcm9wZXJ0eU5hbWXvv71wcmVmaXjvv71pbnRlcnBvbGF0aW9uX3N0YXRpY19wYXJ0Me+/vS4uaW50ZXJwb2xhdGlvbl9zdGF0aWNfcGFydE7vv71zdWZmaXhgIGZvclxuICogaW50ZXJwb2xhdGVkIHByb3BlcnRpZXMuXG4gKlxuICogQHBhcmFtIHREYXRhIGBURGF0YWAgd2hlcmUgbWV0YS1kYXRhIHdpbGwgYmUgc2F2ZWQ7XG4gKiBAcGFyYW0gdE5vZGUgYFROb2RlYCB0aGF0IGlzIGEgdGFyZ2V0IG9mIHRoZSBiaW5kaW5nO1xuICogQHBhcmFtIHByb3BlcnR5TmFtZSBib3VuZCBwcm9wZXJ0eSBuYW1lO1xuICogQHBhcmFtIGJpbmRpbmdJbmRleCBiaW5kaW5nIGluZGV4IGluIGBMVmlld2BcbiAqIEBwYXJhbSBpbnRlcnBvbGF0aW9uUGFydHMgc3RhdGljIGludGVycG9sYXRpb24gcGFydHMgKGZvciBwcm9wZXJ0eSBpbnRlcnBvbGF0aW9ucylcbiAqL1xuZnVuY3Rpb24gc3RvcmVQcm9wZXJ0eUJpbmRpbmdNZXRhZGF0YSh0RGF0YSwgdE5vZGUsIHByb3BlcnR5TmFtZSwgYmluZGluZ0luZGV4LCAuLi5pbnRlcnBvbGF0aW9uUGFydHMpIHtcbiAgICAvLyBCaW5kaW5nIG1ldGEtZGF0YSBhcmUgc3RvcmVkIG9ubHkgdGhlIGZpcnN0IHRpbWUgYSBnaXZlbiBwcm9wZXJ0eSBpbnN0cnVjdGlvbiBpcyBwcm9jZXNzZWQuXG4gICAgLy8gU2luY2Ugd2UgZG9uJ3QgaGF2ZSBhIGNvbmNlcHQgb2YgdGhlIFwiZmlyc3QgdXBkYXRlIHBhc3NcIiB3ZSBuZWVkIHRvIGNoZWNrIGZvciBwcmVzZW5jZSBvZiB0aGVcbiAgICAvLyBiaW5kaW5nIG1ldGEtZGF0YSB0byBkZWNpZGUgaWYgb25lIHNob3VsZCBiZSBzdG9yZWQgKG9yIGlmIHdhcyBzdG9yZWQgYWxyZWFkeSkuXG4gICAgaWYgKHREYXRhW2JpbmRpbmdJbmRleF0gPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHROb2RlLmlucHV0cyA9PSBudWxsIHx8ICF0Tm9kZS5pbnB1dHNbcHJvcGVydHlOYW1lXSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcEJpbmRpbmdJZHhzID0gdE5vZGUucHJvcGVydHlCaW5kaW5ncyB8fCAodE5vZGUucHJvcGVydHlCaW5kaW5ncyA9IFtdKTtcbiAgICAgICAgICAgIHByb3BCaW5kaW5nSWR4cy5wdXNoKGJpbmRpbmdJbmRleCk7XG4gICAgICAgICAgICBsZXQgYmluZGluZ01ldGFkYXRhID0gcHJvcGVydHlOYW1lO1xuICAgICAgICAgICAgaWYgKGludGVycG9sYXRpb25QYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgYmluZGluZ01ldGFkYXRhICs9XG4gICAgICAgICAgICAgICAgICAgIElOVEVSUE9MQVRJT05fREVMSU1JVEVSICsgaW50ZXJwb2xhdGlvblBhcnRzLmpvaW4oSU5URVJQT0xBVElPTl9ERUxJTUlURVIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdERhdGFbYmluZGluZ0luZGV4XSA9IGJpbmRpbmdNZXRhZGF0YTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNvbnN0IENMRUFOX1BST01JU0UgPSBfQ0xFQU5fUFJPTUlTRTtcbmZ1bmN0aW9uIGdldE9yQ3JlYXRlTFZpZXdDbGVhbnVwKHZpZXcpIHtcbiAgICAvLyB0b3AgbGV2ZWwgdmFyaWFibGVzIHNob3VsZCBub3QgYmUgZXhwb3J0ZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgKFBFUkZfTk9URVMubWQpXG4gICAgcmV0dXJuIHZpZXdbQ0xFQU5VUF0gfHwgKHZpZXdbQ0xFQU5VUF0gPSBuZ0Rldk1vZGUgPyBuZXcgTENsZWFudXAoKSA6IFtdKTtcbn1cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlVFZpZXdDbGVhbnVwKHRWaWV3KSB7XG4gICAgcmV0dXJuIHRWaWV3LmNsZWFudXAgfHwgKHRWaWV3LmNsZWFudXAgPSBuZ0Rldk1vZGUgPyBuZXcgVENsZWFudXAoKSA6IFtdKTtcbn1cbi8qKlxuICogVGhlcmUgYXJlIGNhc2VzIHdoZXJlIHRoZSBzdWIgY29tcG9uZW50J3MgcmVuZGVyZXIgbmVlZHMgdG8gYmUgaW5jbHVkZWRcbiAqIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcmVuZGVyZXIgKHNlZSB0aGUgY29tcG9uZW50U3ludGhldGljSG9zdCogaW5zdHJ1Y3Rpb25zKS5cbiAqL1xuZnVuY3Rpb24gbG9hZENvbXBvbmVudFJlbmRlcmVyKGN1cnJlbnREZWYsIHROb2RlLCBsVmlldykge1xuICAgIC8vIFRPRE8oRlctMjA0Myk6IHRoZSBgY3VycmVudERlZmAgaXMgbnVsbCB3aGVuIGhvc3QgYmluZGluZ3MgYXJlIGludm9rZWQgd2hpbGUgY3JlYXRpbmcgcm9vdFxuICAgIC8vIGNvbXBvbmVudCAoc2VlIHBhY2thZ2VzL2NvcmUvc3JjL3JlbmRlcjMvY29tcG9uZW50LnRzKS4gVGhpcyBpcyBub3QgY29uc2lzdGVudCB3aXRoIHRoZSBwcm9jZXNzXG4gICAgLy8gb2YgY3JlYXRpbmcgaW5uZXIgY29tcG9uZW50cywgd2hlbiBjdXJyZW50IGRpcmVjdGl2ZSBpbmRleCBpcyBhdmFpbGFibGUgaW4gdGhlIHN0YXRlLiBJbiBvcmRlclxuICAgIC8vIHRvIGF2b2lkIHJlbHlpbmcgb24gY3VycmVudCBkZWYgYmVpbmcgYG51bGxgICh0aHVzIHNwZWNpYWwtY2FzaW5nIHJvb3QgY29tcG9uZW50IGNyZWF0aW9uKSwgdGhlXG4gICAgLy8gcHJvY2VzcyBvZiBjcmVhdGluZyByb290IGNvbXBvbmVudCBzaG91bGQgYmUgdW5pZmllZCB3aXRoIHRoZSBwcm9jZXNzIG9mIGNyZWF0aW5nIGlubmVyXG4gICAgLy8gY29tcG9uZW50cy5cbiAgICBpZiAoY3VycmVudERlZiA9PT0gbnVsbCB8fCBpc0NvbXBvbmVudERlZihjdXJyZW50RGVmKSkge1xuICAgICAgICBsVmlldyA9IHVud3JhcExWaWV3KGxWaWV3W3ROb2RlLmluZGV4XSk7XG4gICAgfVxuICAgIHJldHVybiBsVmlld1tSRU5ERVJFUl07XG59XG4vKiogSGFuZGxlcyBhbiBlcnJvciB0aHJvd24gaW4gYW4gTFZpZXcuICovXG5mdW5jdGlvbiBoYW5kbGVFcnJvcihsVmlldywgZXJyb3IpIHtcbiAgICBjb25zdCBpbmplY3RvciA9IGxWaWV3W0lOSkVDVE9SJDFdO1xuICAgIGNvbnN0IGVycm9ySGFuZGxlciA9IGluamVjdG9yID8gaW5qZWN0b3IuZ2V0KEVycm9ySGFuZGxlciwgbnVsbCkgOiBudWxsO1xuICAgIGVycm9ySGFuZGxlciAmJiBlcnJvckhhbmRsZXIuaGFuZGxlRXJyb3IoZXJyb3IpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGlucHV0cyBvZiBkaXJlY3RpdmVzIGF0IHRoZSBjdXJyZW50IG5vZGUgdG8gY29ycmVzcG9uZGluZyB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gdFZpZXcgVGhlIGN1cnJlbnQgVFZpZXdcbiAqIEBwYXJhbSBsVmlldyB0aGUgYExWaWV3YCB3aGljaCBjb250YWlucyB0aGUgZGlyZWN0aXZlcy5cbiAqIEBwYXJhbSBpbnB1dHMgbWFwcGluZyBiZXR3ZWVuIHRoZSBwdWJsaWMgXCJpbnB1dFwiIG5hbWUgYW5kIHByaXZhdGVseS1rbm93bixcbiAqICAgICAgICBwb3NzaWJseSBtaW5pZmllZCwgcHJvcGVydHkgbmFtZXMgdG8gd3JpdGUgdG8uXG4gKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gc2V0LlxuICovXG5mdW5jdGlvbiBzZXRJbnB1dHNGb3JQcm9wZXJ0eSh0VmlldywgbFZpZXcsIGlucHV0cywgcHVibGljTmFtZSwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0cy5sZW5ndGg7KSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaW5wdXRzW2krK107XG4gICAgICAgIGNvbnN0IHByaXZhdGVOYW1lID0gaW5wdXRzW2krK107XG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gbFZpZXdbaW5kZXhdO1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SW5kZXhJblJhbmdlKGxWaWV3LCBpbmRleCk7XG4gICAgICAgIGNvbnN0IGRlZiA9IHRWaWV3LmRhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoZGVmLnNldElucHV0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBkZWYuc2V0SW5wdXQoaW5zdGFuY2UsIHZhbHVlLCBwdWJsaWNOYW1lLCBwcml2YXRlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnN0YW5jZVtwcml2YXRlTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVXBkYXRlcyBhIHRleHQgYmluZGluZyBhdCBhIGdpdmVuIGluZGV4IGluIGEgZ2l2ZW4gTFZpZXcuXG4gKi9cbmZ1bmN0aW9uIHRleHRCaW5kaW5nSW50ZXJuYWwobFZpZXcsIGluZGV4LCB2YWx1ZSkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRTdHJpbmcodmFsdWUsICdWYWx1ZSBzaG91bGQgYmUgYSBzdHJpbmcnKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0Tm90U2FtZSh2YWx1ZSwgTk9fQ0hBTkdFLCAndmFsdWUgc2hvdWxkIG5vdCBiZSBOT19DSEFOR0UnKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SW5kZXhJblJhbmdlKGxWaWV3LCBpbmRleCk7XG4gICAgY29uc3QgZWxlbWVudCA9IGdldE5hdGl2ZUJ5SW5kZXgoaW5kZXgsIGxWaWV3KTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChlbGVtZW50LCAnbmF0aXZlIGVsZW1lbnQgc2hvdWxkIGV4aXN0Jyk7XG4gICAgdXBkYXRlVGV4dE5vZGUobFZpZXdbUkVOREVSRVJdLCBlbGVtZW50LCB2YWx1ZSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDb21wdXRlIHRoZSBzdGF0aWMgc3R5bGluZyAoY2xhc3Mvc3R5bGUpIGZyb20gYFRBdHRyaWJ1dGVzYC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHNob3VsZCBiZSBjYWxsZWQgZHVyaW5nIGBmaXJzdENyZWF0ZVBhc3NgIG9ubHkuXG4gKlxuICogQHBhcmFtIHROb2RlIFRoZSBgVE5vZGVgIGludG8gd2hpY2ggdGhlIHN0eWxpbmcgaW5mb3JtYXRpb24gc2hvdWxkIGJlIGxvYWRlZC5cbiAqIEBwYXJhbSBhdHRycyBgVEF0dHJpYnV0ZXNgIGNvbnRhaW5pbmcgdGhlIHN0eWxpbmcgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0gd3JpdGVUb0hvc3QgV2hlcmUgc2hvdWxkIHRoZSByZXN1bHRpbmcgc3RhdGljIHN0eWxlcyBiZSB3cml0dGVuP1xuICogICAtIGBmYWxzZWAgV3JpdGUgdG8gYFROb2RlLnN0eWxlc1dpdGhvdXRIb3N0YCAvIGBUTm9kZS5jbGFzc2VzV2l0aG91dEhvc3RgXG4gKiAgIC0gYHRydWVgIFdyaXRlIHRvIGBUTm9kZS5zdHlsZXNgIC8gYFROb2RlLmNsYXNzZXNgXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVTdGF0aWNTdHlsaW5nKHROb2RlLCBhdHRycywgd3JpdGVUb0hvc3QpIHtcbiAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgYXNzZXJ0Rmlyc3RDcmVhdGVQYXNzKGdldFRWaWV3KCksICdFeHBlY3RpbmcgdG8gYmUgY2FsbGVkIGluIGZpcnN0IHRlbXBsYXRlIHBhc3Mgb25seScpO1xuICAgIGxldCBzdHlsZXMgPSB3cml0ZVRvSG9zdCA/IHROb2RlLnN0eWxlcyA6IG51bGw7XG4gICAgbGV0IGNsYXNzZXMgPSB3cml0ZVRvSG9zdCA/IHROb2RlLmNsYXNzZXMgOiBudWxsO1xuICAgIGxldCBtb2RlID0gMDtcbiAgICBpZiAoYXR0cnMgIT09IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyc1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgbW9kZSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobW9kZSA9PSAxIC8qIENsYXNzZXMgKi8pIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzID0gY29uY2F0U3RyaW5nc1dpdGhTcGFjZShjbGFzc2VzLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChtb2RlID09IDIgLyogU3R5bGVzICovKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZVZhbHVlID0gYXR0cnNbKytpXTtcbiAgICAgICAgICAgICAgICBzdHlsZXMgPSBjb25jYXRTdHJpbmdzV2l0aFNwYWNlKHN0eWxlcywgc3R5bGUgKyAnOiAnICsgc3R5bGVWYWx1ZSArICc7Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgd3JpdGVUb0hvc3QgPyB0Tm9kZS5zdHlsZXMgPSBzdHlsZXMgOiB0Tm9kZS5zdHlsZXNXaXRob3V0SG9zdCA9IHN0eWxlcztcbiAgICB3cml0ZVRvSG9zdCA/IHROb2RlLmNsYXNzZXMgPSBjbGFzc2VzIDogdE5vZGUuY2xhc3Nlc1dpdGhvdXRIb3N0ID0gY2xhc3Nlcztcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFN5bmNocm9ub3VzbHkgcGVyZm9ybSBjaGFuZ2UgZGV0ZWN0aW9uIG9uIGEgY29tcG9uZW50IChhbmQgcG9zc2libHkgaXRzIHN1Yi1jb21wb25lbnRzKS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHRyaWdnZXJzIGNoYW5nZSBkZXRlY3Rpb24gaW4gYSBzeW5jaHJvbm91cyB3YXkgb24gYSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIGNvbXBvbmVudCBUaGUgY29tcG9uZW50IHdoaWNoIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQgb24uXG4gKi9cbmZ1bmN0aW9uIGRldGVjdENoYW5nZXMoY29tcG9uZW50KSB7XG4gICAgY29uc3QgdmlldyA9IGdldENvbXBvbmVudFZpZXdCeUluc3RhbmNlKGNvbXBvbmVudCk7XG4gICAgZGV0ZWN0Q2hhbmdlc0ludGVybmFsKHZpZXdbVFZJRVddLCB2aWV3LCBjb21wb25lbnQpO1xufVxuLyoqXG4gKiBNYXJrcyB0aGUgY29tcG9uZW50IGFzIGRpcnR5IChuZWVkaW5nIGNoYW5nZSBkZXRlY3Rpb24pLiBNYXJraW5nIGEgY29tcG9uZW50IGRpcnR5IHdpbGxcbiAqIHNjaGVkdWxlIGEgY2hhbmdlIGRldGVjdGlvbiBvbiBpdCBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG4gKlxuICogTWFya2luZyBhbiBhbHJlYWR5IGRpcnR5IGNvbXBvbmVudCBhcyBkaXJ0eSB3b24ndCBkbyBhbnl0aGluZy4gT25seSBvbmUgb3V0c3RhbmRpbmcgY2hhbmdlXG4gKiBkZXRlY3Rpb24gY2FuIGJlIHNjaGVkdWxlZCBwZXIgY29tcG9uZW50IHRyZWUuXG4gKlxuICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgdG8gbWFyayBhcyBkaXJ0eS5cbiAqL1xuZnVuY3Rpb24gbWFya0RpcnR5KGNvbXBvbmVudCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGNvbXBvbmVudCwgJ2NvbXBvbmVudCcpO1xuICAgIGNvbnN0IHJvb3RWaWV3ID0gbWFya1ZpZXdEaXJ0eShnZXRDb21wb25lbnRWaWV3QnlJbnN0YW5jZShjb21wb25lbnQpKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChyb290Vmlld1tDT05URVhUXSwgJ3Jvb3RDb250ZXh0IHNob3VsZCBiZSBkZWZpbmVkJyk7XG4gICAgc2NoZWR1bGVUaWNrKHJvb3RWaWV3W0NPTlRFWFRdLCAxIC8qIERldGVjdENoYW5nZXMgKi8pO1xufVxuLyoqXG4gKiBVc2VkIHRvIHBlcmZvcm0gY2hhbmdlIGRldGVjdGlvbiBvbiB0aGUgd2hvbGUgYXBwbGljYXRpb24uXG4gKlxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIGBkZXRlY3RDaGFuZ2VzYCwgYnV0IGludm9rZWQgb24gcm9vdCBjb21wb25lbnQuIEFkZGl0aW9uYWxseSwgYHRpY2tgXG4gKiBleGVjdXRlcyBsaWZlY3ljbGUgaG9va3MgYW5kIGNvbmRpdGlvbmFsbHkgY2hlY2tzIGNvbXBvbmVudHMgYmFzZWQgb24gdGhlaXJcbiAqIGBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneWAgYW5kIGRpcnRpbmVzcy5cbiAqXG4gKiBUaGUgcHJlZmVycmVkIHdheSB0byB0cmlnZ2VyIGNoYW5nZSBkZXRlY3Rpb24gaXMgdG8gY2FsbCBgbWFya0RpcnR5YC4gYG1hcmtEaXJ0eWAgaW50ZXJuYWxseVxuICogc2NoZWR1bGVzIGB0aWNrYCB1c2luZyBhIHNjaGVkdWxlciBpbiBvcmRlciB0byBjb2FsZXNjZSBtdWx0aXBsZSBgbWFya0RpcnR5YCBjYWxscyBpbnRvIGFcbiAqIHNpbmdsZSBjaGFuZ2UgZGV0ZWN0aW9uIHJ1bi4gQnkgZGVmYXVsdCwgdGhlIHNjaGVkdWxlciBpcyBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCwgYnV0IGNhblxuICogYmUgY2hhbmdlZCB3aGVuIGNhbGxpbmcgYHJlbmRlckNvbXBvbmVudGAgYW5kIHByb3ZpZGluZyB0aGUgYHNjaGVkdWxlcmAgb3B0aW9uLlxuICovXG5mdW5jdGlvbiB0aWNrKGNvbXBvbmVudCkge1xuICAgIGNvbnN0IHJvb3RWaWV3ID0gZ2V0Um9vdFZpZXcoY29tcG9uZW50KTtcbiAgICBjb25zdCByb290Q29udGV4dCA9IHJvb3RWaWV3W0NPTlRFWFRdO1xuICAgIHRpY2tSb290Q29udGV4dChyb290Q29udGV4dCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBbiBJbmplY3Rpb25Ub2tlbiB0aGF0IGdldHMgdGhlIGN1cnJlbnQgYEluamVjdG9yYCBmb3IgYGNyZWF0ZUluamVjdG9yKClgLXN0eWxlIGluamVjdG9ycy5cbiAqXG4gKiBSZXF1ZXN0aW5nIHRoaXMgdG9rZW4gaW5zdGVhZCBvZiBgSW5qZWN0b3JgIGFsbG93cyBgU3RhdGljSW5qZWN0b3JgIHRvIGJlIHRyZWUtc2hha2VuIGZyb20gYVxuICogcHJvamVjdC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IElOSkVDVE9SID0gbmV3IEluamVjdGlvblRva2VuKCdJTkpFQ1RPUicsIFxuLy8gRGlzc2FibGUgdHNsaW50IGJlY2F1c2UgdGhpcyBpcyBjb25zdCBlbnVtIHdoaWNoIGdldHMgaW5saW5lZCBub3QgdG9wIGxldmVsIHByb3AgYWNjZXNzLlxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby10b3BsZXZlbC1wcm9wZXJ0eS1hY2Nlc3Ncbi0xIC8qIEluamVjdG9yICovKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jbGFzcyBOdWxsSW5qZWN0b3Ige1xuICAgIGdldCh0b2tlbiwgbm90Rm91bmRWYWx1ZSA9IFRIUk9XX0lGX05PVF9GT1VORCkge1xuICAgICAgICBpZiAobm90Rm91bmRWYWx1ZSA9PT0gVEhST1dfSUZfTk9UX0ZPVU5EKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBFcnJvcihgTnVsbEluamVjdG9yRXJyb3I6IE5vIHByb3ZpZGVyIGZvciAke3N0cmluZ2lmeSh0b2tlbil9IWApO1xuICAgICAgICAgICAgZXJyb3IubmFtZSA9ICdOdWxsSW5qZWN0b3JFcnJvcic7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm90Rm91bmRWYWx1ZTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBbiBpbnRlcm5hbCB0b2tlbiB3aG9zZSBwcmVzZW5jZSBpbiBhbiBpbmplY3RvciBpbmRpY2F0ZXMgdGhhdCB0aGUgaW5qZWN0b3Igc2hvdWxkIHRyZWF0IGl0c2VsZlxuICogYXMgYSByb290IHNjb3BlZCBpbmplY3RvciB3aGVuIHByb2Nlc3NpbmcgcmVxdWVzdHMgZm9yIHVua25vd24gdG9rZW5zIHdoaWNoIG1heSBpbmRpY2F0ZVxuICogdGhleSBhcmUgcHJvdmlkZWQgaW4gdGhlIHJvb3Qgc2NvcGUuXG4gKi9cbmNvbnN0IElOSkVDVE9SX1NDT1BFID0gbmV3IEluamVjdGlvblRva2VuKCdTZXQgSW5qZWN0b3Igc2NvcGUuJyk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBNYXJrZXIgd2hpY2ggaW5kaWNhdGVzIHRoYXQgYSB2YWx1ZSBoYXMgbm90IHlldCBiZWVuIGNyZWF0ZWQgZnJvbSB0aGUgZmFjdG9yeSBmdW5jdGlvbi5cbiAqL1xuY29uc3QgTk9UX1lFVCA9IHt9O1xuLyoqXG4gKiBNYXJrZXIgd2hpY2ggaW5kaWNhdGVzIHRoYXQgdGhlIGZhY3RvcnkgZnVuY3Rpb24gZm9yIGEgdG9rZW4gaXMgaW4gdGhlIHByb2Nlc3Mgb2YgYmVpbmcgY2FsbGVkLlxuICpcbiAqIElmIHRoZSBpbmplY3RvciBpcyBhc2tlZCB0byBpbmplY3QgYSB0b2tlbiB3aXRoIGl0cyB2YWx1ZSBzZXQgdG8gQ0lSQ1VMQVIsIHRoYXQgaW5kaWNhdGVzXG4gKiBpbmplY3Rpb24gb2YgYSBkZXBlbmRlbmN5IGhhcyByZWN1cnNpdmVseSBhdHRlbXB0ZWQgdG8gaW5qZWN0IHRoZSBvcmlnaW5hbCB0b2tlbiwgYW5kIHRoZXJlIGlzXG4gKiBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgYW1vbmcgdGhlIHByb3ZpZGVycy5cbiAqL1xuY29uc3QgQ0lSQ1VMQVIgPSB7fTtcbi8qKlxuICogQSBsYXppbHkgaW5pdGlhbGl6ZWQgTnVsbEluamVjdG9yLlxuICovXG5sZXQgTlVMTF9JTkpFQ1RPUiQxID0gdW5kZWZpbmVkO1xuZnVuY3Rpb24gZ2V0TnVsbEluamVjdG9yKCkge1xuICAgIGlmIChOVUxMX0lOSkVDVE9SJDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBOVUxMX0lOSkVDVE9SJDEgPSBuZXcgTnVsbEluamVjdG9yKCk7XG4gICAgfVxuICAgIHJldHVybiBOVUxMX0lOSkVDVE9SJDE7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBgSW5qZWN0b3JgIHdoaWNoIGlzIGNvbmZpZ3VyZWQgdXNpbmcgYSBgZGVmVHlwZWAgb2YgYEluamVjdG9yVHlwZTxhbnk+YHMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbmplY3RvcihkZWZUeXBlLCBwYXJlbnQgPSBudWxsLCBhZGRpdGlvbmFsUHJvdmlkZXJzID0gbnVsbCwgbmFtZSkge1xuICAgIGNvbnN0IGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3JXaXRob3V0SW5qZWN0b3JJbnN0YW5jZXMoZGVmVHlwZSwgcGFyZW50LCBhZGRpdGlvbmFsUHJvdmlkZXJzLCBuYW1lKTtcbiAgICBpbmplY3Rvci5fcmVzb2x2ZUluamVjdG9yRGVmVHlwZXMoKTtcbiAgICByZXR1cm4gaW5qZWN0b3I7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaW5qZWN0b3Igd2l0aG91dCBlYWdlcmx5IHJlc29sdmluZyBpdHMgaW5qZWN0b3IgdHlwZXMuIENhbiBiZSB1c2VkIGluIHBsYWNlc1xuICogd2hlcmUgcmVzb2x2aW5nIHRoZSBpbmplY3RvciB0eXBlcyBpbW1lZGlhdGVseSBjYW4gbGVhZCB0byBhbiBpbmZpbml0ZSBsb29wLiBUaGUgaW5qZWN0b3IgdHlwZXNcbiAqIHNob3VsZCBiZSByZXNvbHZlZCBhdCBhIGxhdGVyIHBvaW50IGJ5IGNhbGxpbmcgYF9yZXNvbHZlSW5qZWN0b3JEZWZUeXBlc2AuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluamVjdG9yV2l0aG91dEluamVjdG9ySW5zdGFuY2VzKGRlZlR5cGUsIHBhcmVudCA9IG51bGwsIGFkZGl0aW9uYWxQcm92aWRlcnMgPSBudWxsLCBuYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBSM0luamVjdG9yKGRlZlR5cGUsIGFkZGl0aW9uYWxQcm92aWRlcnMsIHBhcmVudCB8fCBnZXROdWxsSW5qZWN0b3IoKSwgbmFtZSk7XG59XG5jbGFzcyBSM0luamVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihkZWYsIGFkZGl0aW9uYWxQcm92aWRlcnMsIHBhcmVudCwgc291cmNlID0gbnVsbCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcCBvZiB0b2tlbnMgdG8gcmVjb3JkcyB3aGljaCBjb250YWluIHRoZSBpbnN0YW5jZXMgb2YgdGhvc2UgdG9rZW5zLlxuICAgICAgICAgKiAtIGBudWxsYCB2YWx1ZSBpbXBsaWVzIHRoYXQgd2UgZG9uJ3QgaGF2ZSB0aGUgcmVjb3JkLiBVc2VkIGJ5IHRyZWUtc2hha2FibGUgaW5qZWN0b3JzXG4gICAgICAgICAqIHRvIHByZXZlbnQgZnVydGhlciBzZWFyY2hlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVjb3JkcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSB0cmFuc2l0aXZlIHNldCBvZiBgSW5qZWN0b3JUeXBlYHMgd2hpY2ggZGVmaW5lIHRoaXMgaW5qZWN0b3IuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluamVjdG9yRGVmVHlwZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgb2YgdmFsdWVzIGluc3RhbnRpYXRlZCBieSB0aGlzIGluamVjdG9yIHdoaWNoIGNvbnRhaW4gYG5nT25EZXN0cm95YCBsaWZlY3ljbGUgaG9va3MuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uRGVzdHJveSA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGRlZHVwU3RhY2sgPSBbXTtcbiAgICAgICAgLy8gU3RhcnQgb2ZmIGJ5IGNyZWF0aW5nIFJlY29yZHMgZm9yIGV2ZXJ5IHByb3ZpZGVyIGRlY2xhcmVkIGluIGV2ZXJ5IEluamVjdG9yVHlwZVxuICAgICAgICAvLyBpbmNsdWRlZCB0cmFuc2l0aXZlbHkgaW4gYWRkaXRpb25hbCBwcm92aWRlcnMgdGhlbiBkbyB0aGUgc2FtZSBmb3IgYGRlZmAuIFRoaXMgb3JkZXIgaXNcbiAgICAgICAgLy8gaW1wb3J0YW50IGJlY2F1c2UgYGRlZmAgbWF5IGluY2x1ZGUgcHJvdmlkZXJzIHRoYXQgb3ZlcnJpZGUgb25lcyBpbiBhZGRpdGlvbmFsUHJvdmlkZXJzLlxuICAgICAgICBhZGRpdGlvbmFsUHJvdmlkZXJzICYmXG4gICAgICAgICAgICBkZWVwRm9yRWFjaChhZGRpdGlvbmFsUHJvdmlkZXJzLCBwcm92aWRlciA9PiB0aGlzLnByb2Nlc3NQcm92aWRlcihwcm92aWRlciwgZGVmLCBhZGRpdGlvbmFsUHJvdmlkZXJzKSk7XG4gICAgICAgIGRlZXBGb3JFYWNoKFtkZWZdLCBpbmplY3RvckRlZiA9PiB0aGlzLnByb2Nlc3NJbmplY3RvclR5cGUoaW5qZWN0b3JEZWYsIFtdLCBkZWR1cFN0YWNrKSk7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgSU5KRUNUT1IgdG9rZW4gcHJvdmlkZXMgdGhpcyBpbmplY3Rvci5cbiAgICAgICAgdGhpcy5yZWNvcmRzLnNldChJTkpFQ1RPUiwgbWFrZVJlY29yZCh1bmRlZmluZWQsIHRoaXMpKTtcbiAgICAgICAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhpcyBpbmplY3RvciBoYXMgdGhlIEFQUF9ST09UX1NDT1BFIHRva2VuIGFuZCB0aHVzIHNob3VsZCBwcm92aWRlXG4gICAgICAgIC8vIGFueSBpbmplY3RhYmxlIHNjb3BlZCB0byBBUFBfUk9PVF9TQ09QRS5cbiAgICAgICAgY29uc3QgcmVjb3JkID0gdGhpcy5yZWNvcmRzLmdldChJTkpFQ1RPUl9TQ09QRSk7XG4gICAgICAgIHRoaXMuc2NvcGUgPSByZWNvcmQgIT0gbnVsbCA/IHJlY29yZC52YWx1ZSA6IG51bGw7XG4gICAgICAgIC8vIFNvdXJjZSBuYW1lLCB1c2VkIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBzb3VyY2UgfHwgKHR5cGVvZiBkZWYgPT09ICdvYmplY3QnID8gbnVsbCA6IHN0cmluZ2lmeShkZWYpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmxhZyBpbmRpY2F0aW5nIHRoYXQgdGhpcyBpbmplY3RvciB3YXMgcHJldmlvdXNseSBkZXN0cm95ZWQuXG4gICAgICovXG4gICAgZ2V0IGRlc3Ryb3llZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc3Ryb3llZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVzdHJveSB0aGUgaW5qZWN0b3IgYW5kIHJlbGVhc2UgcmVmZXJlbmNlcyB0byBldmVyeSBpbnN0YW5jZSBvciBwcm92aWRlciBhc3NvY2lhdGVkIHdpdGggaXQuXG4gICAgICpcbiAgICAgKiBBbHNvIGNhbGxzIHRoZSBgT25EZXN0cm95YCBsaWZlY3ljbGUgaG9va3Mgb2YgZXZlcnkgaW5zdGFuY2UgdGhhdCB3YXMgY3JlYXRlZCBmb3Igd2hpY2ggYVxuICAgICAqIGhvb2sgd2FzIGZvdW5kLlxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYXNzZXJ0Tm90RGVzdHJveWVkKCk7XG4gICAgICAgIC8vIFNldCBkZXN0cm95ZWQgPSB0cnVlIGZpcnN0LCBpbiBjYXNlIGxpZmVjeWNsZSBob29rcyByZS1lbnRlciBkZXN0cm95KCkuXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDYWxsIGFsbCB0aGUgbGlmZWN5Y2xlIGhvb2tzLlxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kuZm9yRWFjaChzZXJ2aWNlID0+IHNlcnZpY2UubmdPbkRlc3Ryb3koKSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAvLyBSZWxlYXNlIGFsbCByZWZlcmVuY2VzLlxuICAgICAgICAgICAgdGhpcy5yZWNvcmRzLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLm9uRGVzdHJveS5jbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5pbmplY3RvckRlZlR5cGVzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KHRva2VuLCBub3RGb3VuZFZhbHVlID0gVEhST1dfSUZfTk9UX0ZPVU5ELCBmbGFncyA9IEluamVjdEZsYWdzLkRlZmF1bHQpIHtcbiAgICAgICAgdGhpcy5hc3NlcnROb3REZXN0cm95ZWQoKTtcbiAgICAgICAgLy8gU2V0IHRoZSBpbmplY3Rpb24gY29udGV4dC5cbiAgICAgICAgY29uc3QgcHJldmlvdXNJbmplY3RvciA9IHNldEN1cnJlbnRJbmplY3Rvcih0aGlzKTtcbiAgICAgICAgY29uc3QgcHJldmlvdXNJbmplY3RJbXBsZW1lbnRhdGlvbiA9IHNldEluamVjdEltcGxlbWVudGF0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgdGhlIFNraXBTZWxmIGZsYWcuXG4gICAgICAgICAgICBpZiAoIShmbGFncyAmIEluamVjdEZsYWdzLlNraXBTZWxmKSkge1xuICAgICAgICAgICAgICAgIC8vIFNraXBTZWxmIGlzbid0IHNldCwgY2hlY2sgaWYgdGhlIHJlY29yZCBiZWxvbmdzIHRvIHRoaXMgaW5qZWN0b3IuXG4gICAgICAgICAgICAgICAgbGV0IHJlY29yZCA9IHRoaXMucmVjb3Jkcy5nZXQodG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBObyByZWNvcmQsIGJ1dCBtYXliZSB0aGUgdG9rZW4gaXMgc2NvcGVkIHRvIHRoaXMgaW5qZWN0b3IuIExvb2sgZm9yIGFuIGluamVjdGFibGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZGVmIHdpdGggYSBzY29wZSBtYXRjaGluZyB0aGlzIGluamVjdG9yLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWYgPSBjb3VsZEJlSW5qZWN0YWJsZVR5cGUodG9rZW4pICYmIGdldEluamVjdGFibGVEZWYodG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVmICYmIHRoaXMuaW5qZWN0YWJsZURlZkluU2NvcGUoZGVmKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm91bmQgYW4gaW5qZWN0YWJsZSBkZWYgYW5kIGl0J3Mgc2NvcGVkIHRvIHRoaXMgaW5qZWN0b3IuIFByZXRlbmQgYXMgaWYgaXQgd2FzIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFsbCBhbG9uZy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IG1ha2VSZWNvcmQoaW5qZWN0YWJsZURlZk9ySW5qZWN0b3JEZWZGYWN0b3J5KHRva2VuKSwgTk9UX1lFVCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb3Jkcy5zZXQodG9rZW4sIHJlY29yZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIGEgcmVjb3JkIHdhcyBmb3VuZCwgZ2V0IHRoZSBpbnN0YW5jZSBmb3IgaXQgYW5kIHJldHVybiBpdC5cbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkICE9IG51bGwgLyogTk9UIG51bGwgfHwgdW5kZWZpbmVkICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmh5ZHJhdGUodG9rZW4sIHJlY29yZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2VsZWN0IHRoZSBuZXh0IGluamVjdG9yIGJhc2VkIG9uIHRoZSBTZWxmIGZsYWcgLSBpZiBzZWxmIGlzIHNldCwgdGhlIG5leHQgaW5qZWN0b3IgaXNcbiAgICAgICAgICAgIC8vIHRoZSBOdWxsSW5qZWN0b3IsIG90aGVyd2lzZSBpdCdzIHRoZSBwYXJlbnQuXG4gICAgICAgICAgICBjb25zdCBuZXh0SW5qZWN0b3IgPSAhKGZsYWdzICYgSW5qZWN0RmxhZ3MuU2VsZikgPyB0aGlzLnBhcmVudCA6IGdldE51bGxJbmplY3RvcigpO1xuICAgICAgICAgICAgLy8gU2V0IHRoZSBub3RGb3VuZFZhbHVlIGJhc2VkIG9uIHRoZSBPcHRpb25hbCBmbGFnIC0gaWYgb3B0aW9uYWwgaXMgc2V0IGFuZCBub3RGb3VuZFZhbHVlXG4gICAgICAgICAgICAvLyBpcyB1bmRlZmluZWQsIHRoZSB2YWx1ZSBpcyBudWxsLCBvdGhlcndpc2UgaXQncyB0aGUgbm90Rm91bmRWYWx1ZS5cbiAgICAgICAgICAgIG5vdEZvdW5kVmFsdWUgPSAoZmxhZ3MgJiBJbmplY3RGbGFncy5PcHRpb25hbCkgJiYgbm90Rm91bmRWYWx1ZSA9PT0gVEhST1dfSUZfTk9UX0ZPVU5EID9cbiAgICAgICAgICAgICAgICBudWxsIDpcbiAgICAgICAgICAgICAgICBub3RGb3VuZFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIG5leHRJbmplY3Rvci5nZXQodG9rZW4sIG5vdEZvdW5kVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAoZS5uYW1lID09PSAnTnVsbEluamVjdG9yRXJyb3InKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IGVbTkdfVEVNUF9UT0tFTl9QQVRIXSA9IGVbTkdfVEVNUF9UT0tFTl9QQVRIXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBwYXRoLnVuc2hpZnQoc3RyaW5naWZ5KHRva2VuKSk7XG4gICAgICAgICAgICAgICAgaWYgKHByZXZpb3VzSW5qZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc3RpbGwgaGF2ZSBhIHBhcmVudCBpbmplY3Rvciwga2VlcCB0aHJvd2luZ1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9ybWF0ICYgdGhyb3cgdGhlIGZpbmFsIGVycm9yIG1lc3NhZ2Ugd2hlbiB3ZSBkb24ndCBoYXZlIGFueSBwcmV2aW91cyBpbmplY3RvclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2F0Y2hJbmplY3RvckVycm9yKGUsIHRva2VuLCAnUjNJbmplY3RvckVycm9yJywgdGhpcy5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAvLyBMYXN0bHksIHJlc3RvcmUgdGhlIHByZXZpb3VzIGluamVjdGlvbiBjb250ZXh0LlxuICAgICAgICAgICAgc2V0SW5qZWN0SW1wbGVtZW50YXRpb24ocHJldmlvdXNJbmplY3RJbXBsZW1lbnRhdGlvbik7XG4gICAgICAgICAgICBzZXRDdXJyZW50SW5qZWN0b3IocHJldmlvdXNJbmplY3Rvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9yZXNvbHZlSW5qZWN0b3JEZWZUeXBlcygpIHtcbiAgICAgICAgdGhpcy5pbmplY3RvckRlZlR5cGVzLmZvckVhY2goZGVmVHlwZSA9PiB0aGlzLmdldChkZWZUeXBlKSk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCB0b2tlbnMgPSBbXSwgcmVjb3JkcyA9IHRoaXMucmVjb3JkcztcbiAgICAgICAgcmVjb3Jkcy5mb3JFYWNoKCh2LCB0b2tlbikgPT4gdG9rZW5zLnB1c2goc3RyaW5naWZ5KHRva2VuKSkpO1xuICAgICAgICByZXR1cm4gYFIzSW5qZWN0b3JbJHt0b2tlbnMuam9pbignLCAnKX1dYDtcbiAgICB9XG4gICAgYXNzZXJ0Tm90RGVzdHJveWVkKCkge1xuICAgICAgICBpZiAodGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKDIwNSAvKiBJTkpFQ1RPUl9BTFJFQURZX0RFU1RST1lFRCAqLywgbmdEZXZNb2RlICYmICdJbmplY3RvciBoYXMgYWxyZWFkeSBiZWVuIGRlc3Ryb3llZC4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gYEluamVjdG9yVHlwZWAgb3IgYEluamVjdG9yVHlwZVdpdGhQcm92aWRlcnNgIGFuZCBhbGwgb2YgaXRzIHRyYW5zaXRpdmUgcHJvdmlkZXJzXG4gICAgICogdG8gdGhpcyBpbmplY3Rvci5cbiAgICAgKlxuICAgICAqIElmIGFuIGBJbmplY3RvclR5cGVXaXRoUHJvdmlkZXJzYCB0aGF0IGRlY2xhcmVzIHByb3ZpZGVycyBiZXNpZGVzIHRoZSB0eXBlIGlzIHNwZWNpZmllZCxcbiAgICAgKiB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gXCJ0cnVlXCIgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcHJvdmlkZXJzIG9mIHRoZSB0eXBlIGRlZmluaXRpb24gbmVlZFxuICAgICAqIHRvIGJlIHByb2Nlc3NlZC4gVGhpcyBhbGxvd3MgdXMgdG8gcHJvY2VzcyBwcm92aWRlcnMgb2YgaW5qZWN0b3IgdHlwZXMgYWZ0ZXIgYWxsIGltcG9ydHMgb2ZcbiAgICAgKiBhbiBpbmplY3RvciBkZWZpbml0aW9uIGFyZSBwcm9jZXNzZWQuIChmb2xsb3dpbmcgVmlldyBFbmdpbmUgc2VtYW50aWNzOiBzZWUgRlctMTM0OSlcbiAgICAgKi9cbiAgICBwcm9jZXNzSW5qZWN0b3JUeXBlKGRlZk9yV3JhcHBlZERlZiwgcGFyZW50cywgZGVkdXBTdGFjaykge1xuICAgICAgICBkZWZPcldyYXBwZWREZWYgPSByZXNvbHZlRm9yd2FyZFJlZihkZWZPcldyYXBwZWREZWYpO1xuICAgICAgICBpZiAoIWRlZk9yV3JhcHBlZERlZilcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy8gRWl0aGVyIHRoZSBkZWZPcldyYXBwZWREZWYgaXMgYW4gSW5qZWN0b3JUeXBlICh3aXRoIGluamVjdG9yIGRlZikgb3IgYW5cbiAgICAgICAgLy8gSW5qZWN0b3JEZWZUeXBlV2l0aFByb3ZpZGVycyAoYWthIE1vZHVsZVdpdGhQcm92aWRlcnMpLiBEZXRlY3RpbmcgZWl0aGVyIGlzIGEgbWVnYW1vcnBoaWNcbiAgICAgICAgLy8gcmVhZCwgc28gY2FyZSBpcyB0YWtlbiB0byBvbmx5IGRvIHRoZSByZWFkIG9uY2UuXG4gICAgICAgIC8vIEZpcnN0IGF0dGVtcHQgdG8gcmVhZCB0aGUgaW5qZWN0b3IgZGVmIChgybVpbmpgKS5cbiAgICAgICAgbGV0IGRlZiA9IGdldEluamVjdG9yRGVmKGRlZk9yV3JhcHBlZERlZik7XG4gICAgICAgIC8vIElmIHRoYXQncyBub3QgcHJlc2VudCwgdGhlbiBhdHRlbXB0IHRvIHJlYWQgbmdNb2R1bGUgZnJvbSB0aGUgSW5qZWN0b3JEZWZUeXBlV2l0aFByb3ZpZGVycy5cbiAgICAgICAgY29uc3QgbmdNb2R1bGUgPSAoZGVmID09IG51bGwpICYmIGRlZk9yV3JhcHBlZERlZi5uZ01vZHVsZSB8fCB1bmRlZmluZWQ7XG4gICAgICAgIC8vIERldGVybWluZSB0aGUgSW5qZWN0b3JUeXBlLiBJbiB0aGUgY2FzZSB3aGVyZSBgZGVmT3JXcmFwcGVkRGVmYCBpcyBhbiBgSW5qZWN0b3JUeXBlYCxcbiAgICAgICAgLy8gdGhlbiB0aGlzIGlzIGVhc3kuIEluIHRoZSBjYXNlIG9mIGFuIEluamVjdG9yRGVmVHlwZVdpdGhQcm92aWRlcnMsIHRoZW4gdGhlIGRlZmluaXRpb24gdHlwZVxuICAgICAgICAvLyBpcyB0aGUgYG5nTW9kdWxlYC5cbiAgICAgICAgY29uc3QgZGVmVHlwZSA9IChuZ01vZHVsZSA9PT0gdW5kZWZpbmVkKSA/IGRlZk9yV3JhcHBlZERlZiA6IG5nTW9kdWxlO1xuICAgICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgZGVwZW5kZW5jaWVzLlxuICAgICAgICBpZiAobmdEZXZNb2RlICYmIHBhcmVudHMuaW5kZXhPZihkZWZUeXBlKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZk5hbWUgPSBzdHJpbmdpZnkoZGVmVHlwZSk7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gcGFyZW50cy5tYXAoc3RyaW5naWZ5KTtcbiAgICAgICAgICAgIHRocm93Q3ljbGljRGVwZW5kZW5jeUVycm9yKGRlZk5hbWUsIHBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENoZWNrIGZvciBtdWx0aXBsZSBpbXBvcnRzIG9mIHRoZSBzYW1lIG1vZHVsZVxuICAgICAgICBjb25zdCBpc0R1cGxpY2F0ZSA9IGRlZHVwU3RhY2suaW5kZXhPZihkZWZUeXBlKSAhPT0gLTE7XG4gICAgICAgIC8vIEZpbmFsbHksIGlmIGRlZk9yV3JhcHBlZFR5cGUgd2FzIGFuIGBJbmplY3RvckRlZlR5cGVXaXRoUHJvdmlkZXJzYCwgdGhlbiB0aGUgYWN0dWFsXG4gICAgICAgIC8vIGBJbmplY3RvckRlZmAgaXMgb24gaXRzIGBuZ01vZHVsZWAuXG4gICAgICAgIGlmIChuZ01vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkZWYgPSBnZXRJbmplY3RvckRlZihuZ01vZHVsZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgbm8gZGVmaW5pdGlvbiB3YXMgZm91bmQsIGl0IG1pZ2h0IGJlIGZyb20gZXhwb3J0cy4gUmVtb3ZlIGl0LlxuICAgICAgICBpZiAoZGVmID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBBZGQgcHJvdmlkZXJzIGluIHRoZSBzYW1lIHdheSB0aGF0IEBOZ01vZHVsZSByZXNvbHV0aW9uIGRpZDpcbiAgICAgICAgLy8gRmlyc3QsIGluY2x1ZGUgcHJvdmlkZXJzIGZyb20gYW55IGltcG9ydHMuXG4gICAgICAgIGlmIChkZWYuaW1wb3J0cyAhPSBudWxsICYmICFpc0R1cGxpY2F0ZSkge1xuICAgICAgICAgICAgLy8gQmVmb3JlIHByb2Nlc3NpbmcgZGVmVHlwZSdzIGltcG9ydHMsIGFkZCBpdCB0byB0aGUgc2V0IG9mIHBhcmVudHMuIFRoaXMgd2F5LCBpZiBpdCBlbmRzXG4gICAgICAgICAgICAvLyB1cCBkZWVwbHkgaW1wb3J0aW5nIGl0c2VsZiwgdGhpcyBjYW4gYmUgZGV0ZWN0ZWQuXG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgcGFyZW50cy5wdXNoKGRlZlR5cGUpO1xuICAgICAgICAgICAgLy8gQWRkIGl0IHRvIHRoZSBzZXQgb2YgZGVkdXBzLiBUaGlzIHdheSB3ZSBjYW4gZGV0ZWN0IG11bHRpcGxlIGltcG9ydHMgb2YgdGhlIHNhbWUgbW9kdWxlXG4gICAgICAgICAgICBkZWR1cFN0YWNrLnB1c2goZGVmVHlwZSk7XG4gICAgICAgICAgICBsZXQgaW1wb3J0VHlwZXNXaXRoUHJvdmlkZXJzO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZWVwRm9yRWFjaChkZWYuaW1wb3J0cywgaW1wb3J0ZWQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9jZXNzSW5qZWN0b3JUeXBlKGltcG9ydGVkLCBwYXJlbnRzLCBkZWR1cFN0YWNrKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltcG9ydFR5cGVzV2l0aFByb3ZpZGVycyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydFR5cGVzV2l0aFByb3ZpZGVycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIHByb2Nlc3NlZCBpbXBvcnQgaXMgYW4gaW5qZWN0b3IgdHlwZSB3aXRoIHByb3ZpZGVycywgd2Ugc3RvcmUgaXQgaW4gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBsaXN0IG9mIGltcG9ydCB0eXBlcyB3aXRoIHByb3ZpZGVycywgc28gdGhhdCB3ZSBjYW4gcHJvY2VzcyB0aG9zZSBhZnRlcndhcmRzLlxuICAgICAgICAgICAgICAgICAgICAgICAgaW1wb3J0VHlwZXNXaXRoUHJvdmlkZXJzLnB1c2goaW1wb3J0ZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgaXQgZnJvbSB0aGUgcGFyZW50cyBzZXQgd2hlbiBmaW5pc2hlZC5cbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgcGFyZW50cy5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEltcG9ydHMgd2hpY2ggYXJlIGRlY2xhcmVkIHdpdGggcHJvdmlkZXJzIChUeXBlV2l0aFByb3ZpZGVycykgbmVlZCB0byBiZSBwcm9jZXNzZWRcbiAgICAgICAgICAgIC8vIGFmdGVyIGFsbCBpbXBvcnRlZCBtb2R1bGVzIGFyZSBwcm9jZXNzZWQuIFRoaXMgaXMgc2ltaWxhciB0byBob3cgVmlldyBFbmdpbmVcbiAgICAgICAgICAgIC8vIHByb2Nlc3Nlcy9tZXJnZXMgbW9kdWxlIGltcG9ydHMgaW4gdGhlIG1ldGFkYXRhIHJlc29sdmVyLiBTZWU6IEZXLTEzNDkuXG4gICAgICAgICAgICBpZiAoaW1wb3J0VHlwZXNXaXRoUHJvdmlkZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltcG9ydFR5cGVzV2l0aFByb3ZpZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG5nTW9kdWxlLCBwcm92aWRlcnMgfSA9IGltcG9ydFR5cGVzV2l0aFByb3ZpZGVyc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgZGVlcEZvckVhY2gocHJvdmlkZXJzLCBwcm92aWRlciA9PiB0aGlzLnByb2Nlc3NQcm92aWRlcihwcm92aWRlciwgbmdNb2R1bGUsIHByb3ZpZGVycyB8fCBFTVBUWV9BUlJBWSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBUcmFjayB0aGUgSW5qZWN0b3JUeXBlIGFuZCBhZGQgYSBwcm92aWRlciBmb3IgaXQuIEl0J3MgaW1wb3J0YW50IHRoYXQgdGhpcyBpcyBkb25lIGFmdGVyIHRoZVxuICAgICAgICAvLyBkZWYncyBpbXBvcnRzLlxuICAgICAgICB0aGlzLmluamVjdG9yRGVmVHlwZXMuYWRkKGRlZlR5cGUpO1xuICAgICAgICBjb25zdCBmYWN0b3J5ID0gZ2V0RmFjdG9yeURlZihkZWZUeXBlKSB8fCAoKCkgPT4gbmV3IGRlZlR5cGUoKSk7XG4gICAgICAgIHRoaXMucmVjb3Jkcy5zZXQoZGVmVHlwZSwgbWFrZVJlY29yZChmYWN0b3J5LCBOT1RfWUVUKSk7XG4gICAgICAgIC8vIE5leHQsIGluY2x1ZGUgcHJvdmlkZXJzIGxpc3RlZCBvbiB0aGUgZGVmaW5pdGlvbiBpdHNlbGYuXG4gICAgICAgIGNvbnN0IGRlZlByb3ZpZGVycyA9IGRlZi5wcm92aWRlcnM7XG4gICAgICAgIGlmIChkZWZQcm92aWRlcnMgIT0gbnVsbCAmJiAhaXNEdXBsaWNhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGluamVjdG9yVHlwZSA9IGRlZk9yV3JhcHBlZERlZjtcbiAgICAgICAgICAgIGRlZXBGb3JFYWNoKGRlZlByb3ZpZGVycywgcHJvdmlkZXIgPT4gdGhpcy5wcm9jZXNzUHJvdmlkZXIocHJvdmlkZXIsIGluamVjdG9yVHlwZSwgZGVmUHJvdmlkZXJzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIChuZ01vZHVsZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBkZWZPcldyYXBwZWREZWYucHJvdmlkZXJzICE9PSB1bmRlZmluZWQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIGEgYFNpbmdsZVByb3ZpZGVyYCBhbmQgYWRkIGl0LlxuICAgICAqL1xuICAgIHByb2Nlc3NQcm92aWRlcihwcm92aWRlciwgbmdNb2R1bGVUeXBlLCBwcm92aWRlcnMpIHtcbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSB0b2tlbiBmcm9tIHRoZSBwcm92aWRlci4gRWl0aGVyIGl0J3MgaXRzIG93biB0b2tlbiwgb3IgaGFzIGEge3Byb3ZpZGU6IC4uLn1cbiAgICAgICAgLy8gcHJvcGVydHkuXG4gICAgICAgIHByb3ZpZGVyID0gcmVzb2x2ZUZvcndhcmRSZWYocHJvdmlkZXIpO1xuICAgICAgICBsZXQgdG9rZW4gPSBpc1R5cGVQcm92aWRlcihwcm92aWRlcikgPyBwcm92aWRlciA6IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyICYmIHByb3ZpZGVyLnByb3ZpZGUpO1xuICAgICAgICAvLyBDb25zdHJ1Y3QgYSBgUmVjb3JkYCBmb3IgdGhlIHByb3ZpZGVyLlxuICAgICAgICBjb25zdCByZWNvcmQgPSBwcm92aWRlclRvUmVjb3JkKHByb3ZpZGVyLCBuZ01vZHVsZVR5cGUsIHByb3ZpZGVycyk7XG4gICAgICAgIGlmICghaXNUeXBlUHJvdmlkZXIocHJvdmlkZXIpICYmIHByb3ZpZGVyLm11bHRpID09PSB0cnVlKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgcHJvdmlkZXIgaW5kaWNhdGVzIHRoYXQgaXQncyBhIG11bHRpLXByb3ZpZGVyLCBwcm9jZXNzIGl0IHNwZWNpYWxseS5cbiAgICAgICAgICAgIC8vIEZpcnN0IGNoZWNrIHdoZXRoZXIgaXQncyBiZWVuIGRlZmluZWQgYWxyZWFkeS5cbiAgICAgICAgICAgIGxldCBtdWx0aVJlY29yZCA9IHRoaXMucmVjb3Jkcy5nZXQodG9rZW4pO1xuICAgICAgICAgICAgaWYgKG11bHRpUmVjb3JkKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQgaGFzLiBUaHJvdyBhIG5pY2UgZXJyb3IgaWZcbiAgICAgICAgICAgICAgICBpZiAobmdEZXZNb2RlICYmIG11bHRpUmVjb3JkLm11bHRpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dNaXhlZE11bHRpUHJvdmlkZXJFcnJvcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG11bHRpUmVjb3JkID0gbWFrZVJlY29yZCh1bmRlZmluZWQsIE5PVF9ZRVQsIHRydWUpO1xuICAgICAgICAgICAgICAgIG11bHRpUmVjb3JkLmZhY3RvcnkgPSAoKSA9PiBpbmplY3RBcmdzKG11bHRpUmVjb3JkLm11bHRpKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZHMuc2V0KHRva2VuLCBtdWx0aVJlY29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbiA9IHByb3ZpZGVyO1xuICAgICAgICAgICAgbXVsdGlSZWNvcmQubXVsdGkucHVzaChwcm92aWRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IHRoaXMucmVjb3Jkcy5nZXQodG9rZW4pO1xuICAgICAgICAgICAgaWYgKG5nRGV2TW9kZSAmJiBleGlzdGluZyAmJiBleGlzdGluZy5tdWx0aSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3dNaXhlZE11bHRpUHJvdmlkZXJFcnJvcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVjb3Jkcy5zZXQodG9rZW4sIHJlY29yZCk7XG4gICAgfVxuICAgIGh5ZHJhdGUodG9rZW4sIHJlY29yZCkge1xuICAgICAgICBpZiAobmdEZXZNb2RlICYmIHJlY29yZC52YWx1ZSA9PT0gQ0lSQ1VMQVIpIHtcbiAgICAgICAgICAgIHRocm93Q3ljbGljRGVwZW5kZW5jeUVycm9yKHN0cmluZ2lmeSh0b2tlbikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlY29yZC52YWx1ZSA9PT0gTk9UX1lFVCkge1xuICAgICAgICAgICAgcmVjb3JkLnZhbHVlID0gQ0lSQ1VMQVI7XG4gICAgICAgICAgICByZWNvcmQudmFsdWUgPSByZWNvcmQuZmFjdG9yeSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVjb3JkLnZhbHVlID09PSAnb2JqZWN0JyAmJiByZWNvcmQudmFsdWUgJiYgaGFzT25EZXN0cm95KHJlY29yZC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMub25EZXN0cm95LmFkZChyZWNvcmQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQudmFsdWU7XG4gICAgfVxuICAgIGluamVjdGFibGVEZWZJblNjb3BlKGRlZikge1xuICAgICAgICBpZiAoIWRlZi5wcm92aWRlZEluKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJvdmlkZWRJbiA9IHJlc29sdmVGb3J3YXJkUmVmKGRlZi5wcm92aWRlZEluKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm92aWRlZEluID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHByb3ZpZGVkSW4gPT09ICdhbnknIHx8IChwcm92aWRlZEluID09PSB0aGlzLnNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmluamVjdG9yRGVmVHlwZXMuaGFzKHByb3ZpZGVkSW4pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaW5qZWN0YWJsZURlZk9ySW5qZWN0b3JEZWZGYWN0b3J5KHRva2VuKSB7XG4gICAgLy8gTW9zdCB0b2tlbnMgd2lsbCBoYXZlIGFuIGluamVjdGFibGUgZGVmIGRpcmVjdGx5IG9uIHRoZW0sIHdoaWNoIHNwZWNpZmllcyBhIGZhY3RvcnkgZGlyZWN0bHkuXG4gICAgY29uc3QgaW5qZWN0YWJsZURlZiA9IGdldEluamVjdGFibGVEZWYodG9rZW4pO1xuICAgIGNvbnN0IGZhY3RvcnkgPSBpbmplY3RhYmxlRGVmICE9PSBudWxsID8gaW5qZWN0YWJsZURlZi5mYWN0b3J5IDogZ2V0RmFjdG9yeURlZih0b2tlbik7XG4gICAgaWYgKGZhY3RvcnkgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgfVxuICAgIC8vIEluamVjdGlvblRva2VucyBzaG91bGQgaGF2ZSBhbiBpbmplY3RhYmxlIGRlZiAoybVwcm92KSBhbmQgdGh1cyBzaG91bGQgYmUgaGFuZGxlZCBhYm92ZS5cbiAgICAvLyBJZiBpdCdzIG1pc3NpbmcgdGhhdCwgaXQncyBhbiBlcnJvci5cbiAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBJbmplY3Rpb25Ub2tlbikge1xuICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKDIwNCAvKiBJTlZBTElEX0lOSkVDVElPTl9UT0tFTiAqLywgbmdEZXZNb2RlICYmIGBUb2tlbiAke3N0cmluZ2lmeSh0b2tlbil9IGlzIG1pc3NpbmcgYSDJtXByb3YgZGVmaW5pdGlvbi5gKTtcbiAgICB9XG4gICAgLy8gVW5kZWNvcmF0ZWQgdHlwZXMgY2FuIHNvbWV0aW1lcyBiZSBjcmVhdGVkIGlmIHRoZXkgaGF2ZSBubyBjb25zdHJ1Y3RvciBhcmd1bWVudHMuXG4gICAgaWYgKHRva2VuIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGdldFVuZGVjb3JhdGVkSW5qZWN0YWJsZUZhY3RvcnkodG9rZW4pO1xuICAgIH1cbiAgICAvLyBUaGVyZSB3YXMgbm8gd2F5IHRvIHJlc29sdmUgYSBmYWN0b3J5IGZvciB0aGlzIHRva2VuLlxuICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoMjA0IC8qIElOVkFMSURfSU5KRUNUSU9OX1RPS0VOICovLCBuZ0Rldk1vZGUgJiYgJ3VucmVhY2hhYmxlJyk7XG59XG5mdW5jdGlvbiBnZXRVbmRlY29yYXRlZEluamVjdGFibGVGYWN0b3J5KHRva2VuKSB7XG4gICAgLy8gSWYgdGhlIHRva2VuIGhhcyBwYXJhbWV0ZXJzIHRoZW4gaXQgaGFzIGRlcGVuZGVuY2llcyB0aGF0IHdlIGNhbm5vdCByZXNvbHZlIGltcGxpY2l0bHkuXG4gICAgY29uc3QgcGFyYW1MZW5ndGggPSB0b2tlbi5sZW5ndGg7XG4gICAgaWYgKHBhcmFtTGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBhcmdzID0gbmV3QXJyYXkocGFyYW1MZW5ndGgsICc/Jyk7XG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoMjA0IC8qIElOVkFMSURfSU5KRUNUSU9OX1RPS0VOICovLCBuZ0Rldk1vZGUgJiYgYENhbid0IHJlc29sdmUgYWxsIHBhcmFtZXRlcnMgZm9yICR7c3RyaW5naWZ5KHRva2VuKX06ICgke2FyZ3Muam9pbignLCAnKX0pLmApO1xuICAgIH1cbiAgICAvLyBUaGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXBwZWFycyB0byBoYXZlIG5vIHBhcmFtZXRlcnMuXG4gICAgLy8gVGhpcyBtaWdodCBiZSBiZWNhdXNlIGl0IGluaGVyaXRzIGZyb20gYSBzdXBlci1jbGFzcy4gSW4gd2hpY2ggY2FzZSwgdXNlIGFuIGluamVjdGFibGVcbiAgICAvLyBkZWYgZnJvbSBhbiBhbmNlc3RvciBpZiB0aGVyZSBpcyBvbmUuXG4gICAgLy8gT3RoZXJ3aXNlIHRoaXMgcmVhbGx5IGlzIGEgc2ltcGxlIGNsYXNzIHdpdGggbm8gZGVwZW5kZW5jaWVzLCBzbyByZXR1cm4gYSBmYWN0b3J5IHRoYXRcbiAgICAvLyBqdXN0IGluc3RhbnRpYXRlcyB0aGUgemVyby1hcmcgY29uc3RydWN0b3IuXG4gICAgY29uc3QgaW5oZXJpdGVkSW5qZWN0YWJsZURlZiA9IGdldEluaGVyaXRlZEluamVjdGFibGVEZWYodG9rZW4pO1xuICAgIGlmIChpbmhlcml0ZWRJbmplY3RhYmxlRGVmICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAoKSA9PiBpbmhlcml0ZWRJbmplY3RhYmxlRGVmLmZhY3RvcnkodG9rZW4pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuICgpID0+IG5ldyB0b2tlbigpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHByb3ZpZGVyVG9SZWNvcmQocHJvdmlkZXIsIG5nTW9kdWxlVHlwZSwgcHJvdmlkZXJzKSB7XG4gICAgaWYgKGlzVmFsdWVQcm92aWRlcihwcm92aWRlcikpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VSZWNvcmQodW5kZWZpbmVkLCBwcm92aWRlci51c2VWYWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBmYWN0b3J5ID0gcHJvdmlkZXJUb0ZhY3RvcnkocHJvdmlkZXIsIG5nTW9kdWxlVHlwZSwgcHJvdmlkZXJzKTtcbiAgICAgICAgcmV0dXJuIG1ha2VSZWNvcmQoZmFjdG9yeSwgTk9UX1lFVCk7XG4gICAgfVxufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGBTaW5nbGVQcm92aWRlcmAgaW50byBhIGZhY3RvcnkgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHByb3ZpZGVyIHByb3ZpZGVyIHRvIGNvbnZlcnQgdG8gZmFjdG9yeVxuICovXG5mdW5jdGlvbiBwcm92aWRlclRvRmFjdG9yeShwcm92aWRlciwgbmdNb2R1bGVUeXBlLCBwcm92aWRlcnMpIHtcbiAgICBsZXQgZmFjdG9yeSA9IHVuZGVmaW5lZDtcbiAgICBpZiAoaXNUeXBlUHJvdmlkZXIocHJvdmlkZXIpKSB7XG4gICAgICAgIGNvbnN0IHVud3JhcHBlZFByb3ZpZGVyID0gcmVzb2x2ZUZvcndhcmRSZWYocHJvdmlkZXIpO1xuICAgICAgICByZXR1cm4gZ2V0RmFjdG9yeURlZih1bndyYXBwZWRQcm92aWRlcikgfHwgaW5qZWN0YWJsZURlZk9ySW5qZWN0b3JEZWZGYWN0b3J5KHVud3JhcHBlZFByb3ZpZGVyKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChpc1ZhbHVlUHJvdmlkZXIocHJvdmlkZXIpKSB7XG4gICAgICAgICAgICBmYWN0b3J5ID0gKCkgPT4gcmVzb2x2ZUZvcndhcmRSZWYocHJvdmlkZXIudXNlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRmFjdG9yeVByb3ZpZGVyKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgZmFjdG9yeSA9ICgpID0+IHByb3ZpZGVyLnVzZUZhY3RvcnkoLi4uaW5qZWN0QXJncyhwcm92aWRlci5kZXBzIHx8IFtdKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNFeGlzdGluZ1Byb3ZpZGVyKHByb3ZpZGVyKSkge1xuICAgICAgICAgICAgZmFjdG9yeSA9ICgpID0+IMm1ybVpbmplY3QocmVzb2x2ZUZvcndhcmRSZWYocHJvdmlkZXIudXNlRXhpc3RpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGNsYXNzUmVmID0gcmVzb2x2ZUZvcndhcmRSZWYocHJvdmlkZXIgJiZcbiAgICAgICAgICAgICAgICAocHJvdmlkZXIudXNlQ2xhc3MgfHwgcHJvdmlkZXIucHJvdmlkZSkpO1xuICAgICAgICAgICAgaWYgKG5nRGV2TW9kZSAmJiAhY2xhc3NSZWYpIHtcbiAgICAgICAgICAgICAgICB0aHJvd0ludmFsaWRQcm92aWRlckVycm9yKG5nTW9kdWxlVHlwZSwgcHJvdmlkZXJzLCBwcm92aWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzRGVwcyhwcm92aWRlcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5ID0gKCkgPT4gbmV3IChjbGFzc1JlZikoLi4uaW5qZWN0QXJncyhwcm92aWRlci5kZXBzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0RmFjdG9yeURlZihjbGFzc1JlZikgfHwgaW5qZWN0YWJsZURlZk9ySW5qZWN0b3JEZWZGYWN0b3J5KGNsYXNzUmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFjdG9yeTtcbn1cbmZ1bmN0aW9uIG1ha2VSZWNvcmQoZmFjdG9yeSwgdmFsdWUsIG11bHRpID0gZmFsc2UpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBmYWN0b3J5OiBmYWN0b3J5LFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIG11bHRpOiBtdWx0aSA/IFtdIDogdW5kZWZpbmVkLFxuICAgIH07XG59XG5mdW5jdGlvbiBpc1ZhbHVlUHJvdmlkZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnICYmIFVTRV9WQUxVRSQxIGluIHZhbHVlO1xufVxuZnVuY3Rpb24gaXNFeGlzdGluZ1Byb3ZpZGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLnVzZUV4aXN0aW5nKTtcbn1cbmZ1bmN0aW9uIGlzRmFjdG9yeVByb3ZpZGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLnVzZUZhY3RvcnkpO1xufVxuZnVuY3Rpb24gaXNUeXBlUHJvdmlkZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuZnVuY3Rpb24gaXNDbGFzc1Byb3ZpZGVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUudXNlQ2xhc3M7XG59XG5mdW5jdGlvbiBoYXNEZXBzKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhdmFsdWUuZGVwcztcbn1cbmZ1bmN0aW9uIGhhc09uRGVzdHJveSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAgIHR5cGVvZiB2YWx1ZS5uZ09uRGVzdHJveSA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGNvdWxkQmVJbmplY3RhYmxlVHlwZSh2YWx1ZSkge1xuICAgIHJldHVybiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEluamVjdGlvblRva2VuKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIENvbmNyZXRlIGluamVjdG9ycyBpbXBsZW1lbnQgdGhpcyBpbnRlcmZhY2UuIEluamVjdG9ycyBhcmUgY29uZmlndXJlZFxuICogd2l0aCBbcHJvdmlkZXJzXShndWlkZS9nbG9zc2FyeSNwcm92aWRlcikgdGhhdCBhc3NvY2lhdGVcbiAqIGRlcGVuZGVuY2llcyBvZiB2YXJpb3VzIHR5cGVzIHdpdGggW2luamVjdGlvbiB0b2tlbnNdKGd1aWRlL2dsb3NzYXJ5I2RpLXRva2VuKS5cbiAqXG4gKiBAc2VlIFtcIkRJIFByb3ZpZGVyc1wiXShndWlkZS9kZXBlbmRlbmN5LWluamVjdGlvbi1wcm92aWRlcnMpLlxuICogQHNlZSBgU3RhdGljUHJvdmlkZXJgXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAgVGhlIGZvbGxvd2luZyBleGFtcGxlIGNyZWF0ZXMgYSBzZXJ2aWNlIGluamVjdG9yIGluc3RhbmNlLlxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL3Byb3ZpZGVyX3NwZWMudHMgcmVnaW9uPSdDb25zdHJ1Y3RvclByb3ZpZGVyJ31cbiAqXG4gKiAjIyMgVXNhZ2UgZXhhbXBsZVxuICpcbiAqIHtAZXhhbXBsZSBjb3JlL2RpL3RzL2luamVjdG9yX3NwZWMudHMgcmVnaW9uPSdJbmplY3Rvcid9XG4gKlxuICogYEluamVjdG9yYCByZXR1cm5zIGl0c2VsZiB3aGVuIGdpdmVuIGBJbmplY3RvcmAgYXMgYSB0b2tlbjpcbiAqXG4gKiB7QGV4YW1wbGUgY29yZS9kaS90cy9pbmplY3Rvcl9zcGVjLnRzIHJlZ2lvbj0naW5qZWN0SW5qZWN0b3InfVxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgSW5qZWN0b3Ige1xuICAgIHN0YXRpYyBjcmVhdGUob3B0aW9ucywgcGFyZW50KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbmplY3Rvcih7IG5hbWU6ICcnIH0sIHBhcmVudCwgb3B0aW9ucywgJycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IChfYSA9IG9wdGlvbnMubmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlSW5qZWN0b3IoeyBuYW1lIH0sIG9wdGlvbnMucGFyZW50LCBvcHRpb25zLnByb3ZpZGVycywgbmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5JbmplY3Rvci5USFJPV19JRl9OT1RfRk9VTkQgPSBUSFJPV19JRl9OT1RfRk9VTkQ7XG5JbmplY3Rvci5OVUxMID0gKCAvKiBAX19QVVJFX18gKi9uZXcgTnVsbEluamVjdG9yKCkpO1xuLyoqIEBub2NvbGxhcHNlICovXG5JbmplY3Rvci7JtXByb3YgPSDJtcm1ZGVmaW5lSW5qZWN0YWJsZSh7XG4gICAgdG9rZW46IEluamVjdG9yLFxuICAgIHByb3ZpZGVkSW46ICdhbnknLFxuICAgIGZhY3Rvcnk6ICgpID0+IMm1ybVpbmplY3QoSU5KRUNUT1IpLFxufSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQG5vY29sbGFwc2VcbiAqL1xuSW5qZWN0b3IuX19OR19FTEVNRU5UX0lEX18gPSAtMSAvKiBJbmplY3RvciAqLztcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29tcG9uZW50IGluc3RhbmNlIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIERPTSBlbGVtZW50LlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiBHaXZlbiB0aGUgZm9sbG93aW5nIERPTSBzdHJ1Y3R1cmU6XG4gKlxuICogYGBgaHRtbFxuICogPGFwcC1yb290PlxuICogICA8ZGl2PlxuICogICAgIDxjaGlsZC1jb21wPjwvY2hpbGQtY29tcD5cbiAqICAgPC9kaXY+XG4gKiA8L2FwcC1yb290PlxuICogYGBgXG4gKlxuICogQ2FsbGluZyBgZ2V0Q29tcG9uZW50YCBvbiBgPGNoaWxkLWNvbXA+YCB3aWxsIHJldHVybiB0aGUgaW5zdGFuY2Ugb2YgYENoaWxkQ29tcG9uZW50YFxuICogYXNzb2NpYXRlZCB3aXRoIHRoaXMgRE9NIGVsZW1lbnQuXG4gKlxuICogQ2FsbGluZyB0aGUgZnVuY3Rpb24gb24gYDxhcHAtcm9vdD5gIHdpbGwgcmV0dXJuIHRoZSBgTXlBcHBgIGluc3RhbmNlLlxuICpcbiAqXG4gKiBAcGFyYW0gZWxlbWVudCBET00gZWxlbWVudCBmcm9tIHdoaWNoIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHJldHJpZXZlZC5cbiAqIEByZXR1cm5zIENvbXBvbmVudCBpbnN0YW5jZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnQgb3IgYG51bGxgIGlmIHRoZXJlXG4gKiAgICBpcyBubyBjb21wb25lbnQgYXNzb2NpYXRlZCB3aXRoIGl0LlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqIEBnbG9iYWxBcGkgbmdcbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50JDEoZWxlbWVudCkge1xuICAgIGFzc2VydERvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgY29uc3QgY29udGV4dCA9IGdldExDb250ZXh0KGVsZW1lbnQpO1xuICAgIGlmIChjb250ZXh0ID09PSBudWxsKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAoY29udGV4dC5jb21wb25lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb250ZXh0LmNvbXBvbmVudCA9IGdldENvbXBvbmVudEF0Tm9kZUluZGV4KGNvbnRleHQubm9kZUluZGV4LCBjb250ZXh0LmxWaWV3KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRleHQuY29tcG9uZW50O1xufVxuLyoqXG4gKiBJZiBpbnNpZGUgYW4gZW1iZWRkZWQgdmlldyAoZS5nLiBgKm5nSWZgIG9yIGAqbmdGb3JgKSwgcmV0cmlldmVzIHRoZSBjb250ZXh0IG9mIHRoZSBlbWJlZGRlZFxuICogdmlldyB0aGF0IHRoZSBlbGVtZW50IGlzIHBhcnQgb2YuIE90aGVyd2lzZSByZXRyaWV2ZXMgdGhlIGluc3RhbmNlIG9mIHRoZSBjb21wb25lbnQgd2hvc2Ugdmlld1xuICogb3ducyB0aGUgZWxlbWVudCAoaW4gdGhpcyBjYXNlLCB0aGUgcmVzdWx0IGlzIHRoZSBzYW1lIGFzIGNhbGxpbmcgYGdldE93bmluZ0NvbXBvbmVudGApLlxuICpcbiAqIEBwYXJhbSBlbGVtZW50IEVsZW1lbnQgZm9yIHdoaWNoIHRvIGdldCB0aGUgc3Vycm91bmRpbmcgY29tcG9uZW50IGluc3RhbmNlLlxuICogQHJldHVybnMgSW5zdGFuY2Ugb2YgdGhlIGNvbXBvbmVudCB0aGF0IGlzIGFyb3VuZCB0aGUgZWxlbWVudCBvciBudWxsIGlmIHRoZSBlbGVtZW50IGlzbid0XG4gKiAgICBpbnNpZGUgYW55IGNvbXBvbmVudC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKiBAZ2xvYmFsQXBpIG5nXG4gKi9cbmZ1bmN0aW9uIGdldENvbnRleHQoZWxlbWVudCkge1xuICAgIGFzc2VydERvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgY29uc3QgY29udGV4dCA9IGdldExDb250ZXh0KGVsZW1lbnQpO1xuICAgIHJldHVybiBjb250ZXh0ID09PSBudWxsID8gbnVsbCA6IGNvbnRleHQubFZpZXdbQ09OVEVYVF07XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29tcG9uZW50IGluc3RhbmNlIHdob3NlIHZpZXcgY29udGFpbnMgdGhlIERPTSBlbGVtZW50LlxuICpcbiAqIEZvciBleGFtcGxlLCBpZiBgPGNoaWxkLWNvbXA+YCBpcyB1c2VkIGluIHRoZSB0ZW1wbGF0ZSBvZiBgPGFwcC1jb21wPmBcbiAqIChpLmUuIGEgYFZpZXdDaGlsZGAgb2YgYDxhcHAtY29tcD5gKSwgY2FsbGluZyBgZ2V0T3duaW5nQ29tcG9uZW50YCBvbiBgPGNoaWxkLWNvbXA+YFxuICogd291bGQgcmV0dXJuIGA8YXBwLWNvbXA+YC5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudE9yRGlyIERPTSBlbGVtZW50LCBjb21wb25lbnQgb3IgZGlyZWN0aXZlIGluc3RhbmNlXG4gKiAgICBmb3Igd2hpY2ggdG8gcmV0cmlldmUgdGhlIHJvb3QgY29tcG9uZW50cy5cbiAqIEByZXR1cm5zIENvbXBvbmVudCBpbnN0YW5jZSB3aG9zZSB2aWV3IG93bnMgdGhlIERPTSBlbGVtZW50IG9yIG51bGwgaWYgdGhlIGVsZW1lbnQgaXMgbm90XG4gKiAgICBwYXJ0IG9mIGEgY29tcG9uZW50IHZpZXcuXG4gKlxuICogQHB1YmxpY0FwaVxuICogQGdsb2JhbEFwaSBuZ1xuICovXG5mdW5jdGlvbiBnZXRPd25pbmdDb21wb25lbnQoZWxlbWVudE9yRGlyKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldExDb250ZXh0KGVsZW1lbnRPckRpcik7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIGxldCBsVmlldyA9IGNvbnRleHQubFZpZXc7XG4gICAgbGV0IHBhcmVudDtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TFZpZXcobFZpZXcpO1xuICAgIHdoaWxlIChsVmlld1tUVklFV10udHlwZSA9PT0gMiAvKiBFbWJlZGRlZCAqLyAmJiAocGFyZW50ID0gZ2V0TFZpZXdQYXJlbnQobFZpZXcpKSkge1xuICAgICAgICBsVmlldyA9IHBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGxWaWV3W0ZMQUdTXSAmIDUxMiAvKiBJc1Jvb3QgKi8gPyBudWxsIDogbFZpZXdbQ09OVEVYVF07XG59XG4vKipcbiAqIFJldHJpZXZlcyBhbGwgcm9vdCBjb21wb25lbnRzIGFzc29jaWF0ZWQgd2l0aCBhIERPTSBlbGVtZW50LCBkaXJlY3RpdmUgb3IgY29tcG9uZW50IGluc3RhbmNlLlxuICogUm9vdCBjb21wb25lbnRzIGFyZSB0aG9zZSB3aGljaCBoYXZlIGJlZW4gYm9vdHN0cmFwcGVkIGJ5IEFuZ3VsYXIuXG4gKlxuICogQHBhcmFtIGVsZW1lbnRPckRpciBET00gZWxlbWVudCwgY29tcG9uZW50IG9yIGRpcmVjdGl2ZSBpbnN0YW5jZVxuICogICAgZm9yIHdoaWNoIHRvIHJldHJpZXZlIHRoZSByb290IGNvbXBvbmVudHMuXG4gKiBAcmV0dXJucyBSb290IGNvbXBvbmVudHMgYXNzb2NpYXRlZCB3aXRoIHRoZSB0YXJnZXQgb2JqZWN0LlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqIEBnbG9iYWxBcGkgbmdcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdENvbXBvbmVudHMoZWxlbWVudE9yRGlyKSB7XG4gICAgcmV0dXJuIFsuLi5nZXRSb290Q29udGV4dChlbGVtZW50T3JEaXIpLmNvbXBvbmVudHNdO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgYW4gYEluamVjdG9yYCBhc3NvY2lhdGVkIHdpdGggYW4gZWxlbWVudCwgY29tcG9uZW50IG9yIGRpcmVjdGl2ZSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gZWxlbWVudE9yRGlyIERPTSBlbGVtZW50LCBjb21wb25lbnQgb3IgZGlyZWN0aXZlIGluc3RhbmNlIGZvciB3aGljaCB0b1xuICogICAgcmV0cmlldmUgdGhlIGluamVjdG9yLlxuICogQHJldHVybnMgSW5qZWN0b3IgYXNzb2NpYXRlZCB3aXRoIHRoZSBlbGVtZW50LCBjb21wb25lbnQgb3IgZGlyZWN0aXZlIGluc3RhbmNlLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqIEBnbG9iYWxBcGkgbmdcbiAqL1xuZnVuY3Rpb24gZ2V0SW5qZWN0b3IoZWxlbWVudE9yRGlyKSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldExDb250ZXh0KGVsZW1lbnRPckRpcik7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBJbmplY3Rvci5OVUxMO1xuICAgIGNvbnN0IHROb2RlID0gY29udGV4dC5sVmlld1tUVklFV10uZGF0YVtjb250ZXh0Lm5vZGVJbmRleF07XG4gICAgcmV0dXJuIG5ldyBOb2RlSW5qZWN0b3IodE5vZGUsIGNvbnRleHQubFZpZXcpO1xufVxuLyoqXG4gKiBSZXRyaWV2ZSBhIHNldCBvZiBpbmplY3Rpb24gdG9rZW5zIGF0IGEgZ2l2ZW4gRE9NIG5vZGUuXG4gKlxuICogQHBhcmFtIGVsZW1lbnQgRWxlbWVudCBmb3Igd2hpY2ggdGhlIGluamVjdGlvbiB0b2tlbnMgc2hvdWxkIGJlIHJldHJpZXZlZC5cbiAqL1xuZnVuY3Rpb24gZ2V0SW5qZWN0aW9uVG9rZW5zKGVsZW1lbnQpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0TENvbnRleHQoZWxlbWVudCk7XG4gICAgaWYgKGNvbnRleHQgPT09IG51bGwpXG4gICAgICAgIHJldHVybiBbXTtcbiAgICBjb25zdCBsVmlldyA9IGNvbnRleHQubFZpZXc7XG4gICAgY29uc3QgdFZpZXcgPSBsVmlld1tUVklFV107XG4gICAgY29uc3QgdE5vZGUgPSB0Vmlldy5kYXRhW2NvbnRleHQubm9kZUluZGV4XTtcbiAgICBjb25zdCBwcm92aWRlclRva2VucyA9IFtdO1xuICAgIGNvbnN0IHN0YXJ0SW5kZXggPSB0Tm9kZS5wcm92aWRlckluZGV4ZXMgJiAxMDQ4NTc1IC8qIFByb3ZpZGVyc1N0YXJ0SW5kZXhNYXNrICovO1xuICAgIGNvbnN0IGVuZEluZGV4ID0gdE5vZGUuZGlyZWN0aXZlRW5kO1xuICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4OyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgICBsZXQgdmFsdWUgPSB0Vmlldy5kYXRhW2ldO1xuICAgICAgICBpZiAoaXNEaXJlY3RpdmVEZWZIYWNrKHZhbHVlKSkge1xuICAgICAgICAgICAgLy8gVGhlIGZhY3QgdGhhdCB3ZSBzb21ldGltZXMgc3RvcmUgVHlwZSBhbmQgc29tZXRpbWVzIERpcmVjdGl2ZURlZiBpbiB0aGlzIGxvY2F0aW9uIGlzIGFcbiAgICAgICAgICAgIC8vIGRlc2lnbiBmbGF3LiAgV2Ugc2hvdWxkIGFsd2F5cyBzdG9yZSBzYW1lIHR5cGUgc28gdGhhdCB3ZSBjYW4gYmUgbW9ub21vcnBoaWMuIFRoZSBpc3N1ZVxuICAgICAgICAgICAgLy8gaXMgdGhhdCBmb3IgQ29tcG9uZW50cy9EaXJlY3RpdmVzIHdlIHN0b3JlIHRoZSBkZWYgaW5zdGVhZCB0aGUgdHlwZS4gVGhlIGNvcnJlY3QgYmVoYXZpb3JcbiAgICAgICAgICAgIC8vIGlzIHRoYXQgd2Ugc2hvdWxkIGFsd2F5cyBiZSBzdG9yaW5nIGluamVjdGFibGUgdHlwZSBpbiB0aGlzIGxvY2F0aW9uLlxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50eXBlO1xuICAgICAgICB9XG4gICAgICAgIHByb3ZpZGVyVG9rZW5zLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdmlkZXJUb2tlbnM7XG59XG4vKipcbiAqIFJldHJpZXZlcyBkaXJlY3RpdmUgaW5zdGFuY2VzIGFzc29jaWF0ZWQgd2l0aCBhIGdpdmVuIERPTSBub2RlLiBEb2VzIG5vdCBpbmNsdWRlXG4gKiBjb21wb25lbnQgaW5zdGFuY2VzLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiBHaXZlbiB0aGUgZm9sbG93aW5nIERPTSBzdHJ1Y3R1cmU6XG4gKlxuICogYGBgaHRtbFxuICogPGFwcC1yb290PlxuICogICA8YnV0dG9uIG15LWJ1dHRvbj48L2J1dHRvbj5cbiAqICAgPG15LWNvbXA+PC9teS1jb21wPlxuICogPC9hcHAtcm9vdD5cbiAqIGBgYFxuICpcbiAqIENhbGxpbmcgYGdldERpcmVjdGl2ZXNgIG9uIGA8YnV0dG9uPmAgd2lsbCByZXR1cm4gYW4gYXJyYXkgd2l0aCBhbiBpbnN0YW5jZSBvZiB0aGUgYE15QnV0dG9uYFxuICogZGlyZWN0aXZlIHRoYXQgaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBET00gbm9kZS5cbiAqXG4gKiBDYWxsaW5nIGBnZXREaXJlY3RpdmVzYCBvbiBgPG15LWNvbXA+YCB3aWxsIHJldHVybiBhbiBlbXB0eSBhcnJheS5cbiAqXG4gKiBAcGFyYW0gbm9kZSBET00gbm9kZSBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBkaXJlY3RpdmVzLlxuICogQHJldHVybnMgQXJyYXkgb2YgZGlyZWN0aXZlcyBhc3NvY2lhdGVkIHdpdGggdGhlIG5vZGUuXG4gKlxuICogQHB1YmxpY0FwaVxuICogQGdsb2JhbEFwaSBuZ1xuICovXG5mdW5jdGlvbiBnZXREaXJlY3RpdmVzKG5vZGUpIHtcbiAgICAvLyBTa2lwIHRleHQgbm9kZXMgYmVjYXVzZSB3ZSBjYW4ndCBoYXZlIGRpcmVjdGl2ZXMgYXNzb2NpYXRlZCB3aXRoIHRoZW0uXG4gICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBUZXh0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgY29udGV4dCA9IGdldExDb250ZXh0KG5vZGUpO1xuICAgIGlmIChjb250ZXh0ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgbFZpZXcgPSBjb250ZXh0LmxWaWV3O1xuICAgIGNvbnN0IHRWaWV3ID0gbFZpZXdbVFZJRVddO1xuICAgIGNvbnN0IG5vZGVJbmRleCA9IGNvbnRleHQubm9kZUluZGV4O1xuICAgIGlmICghKHRWaWV3ID09PSBudWxsIHx8IHRWaWV3ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0Vmlldy5kYXRhW25vZGVJbmRleF0pKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKGNvbnRleHQuZGlyZWN0aXZlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRleHQuZGlyZWN0aXZlcyA9IGdldERpcmVjdGl2ZXNBdE5vZGVJbmRleChub2RlSW5kZXgsIGxWaWV3LCBmYWxzZSk7XG4gICAgfVxuICAgIC8vIFRoZSBgZGlyZWN0aXZlc2AgaW4gdGhpcyBjYXNlIGFyZSBhIG5hbWVkIGFycmF5IGNhbGxlZCBgTENvbXBvbmVudFZpZXdgLiBDbG9uZSB0aGVcbiAgICAvLyByZXN1bHQgc28gd2UgZG9uJ3QgZXhwb3NlIGFuIGludGVybmFsIGRhdGEgc3RydWN0dXJlIGluIHRoZSB1c2VyJ3MgY29uc29sZS5cbiAgICByZXR1cm4gY29udGV4dC5kaXJlY3RpdmVzID09PSBudWxsID8gW10gOiBbLi4uY29udGV4dC5kaXJlY3RpdmVzXTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgZGVidWcgKHBhcnRpYWwpIG1ldGFkYXRhIGZvciBhIHBhcnRpY3VsYXIgZGlyZWN0aXZlIG9yIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAqIFRoZSBmdW5jdGlvbiBhY2NlcHRzIGFuIGluc3RhbmNlIG9mIGEgZGlyZWN0aXZlIG9yIGNvbXBvbmVudCBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZ1xuICogbWV0YWRhdGEuXG4gKlxuICogQHBhcmFtIGRpcmVjdGl2ZU9yQ29tcG9uZW50SW5zdGFuY2UgSW5zdGFuY2Ugb2YgYSBkaXJlY3RpdmUgb3IgY29tcG9uZW50XG4gKiBAcmV0dXJucyBtZXRhZGF0YSBvZiB0aGUgcGFzc2VkIGRpcmVjdGl2ZSBvciBjb21wb25lbnRcbiAqXG4gKiBAcHVibGljQXBpXG4gKiBAZ2xvYmFsQXBpIG5nXG4gKi9cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZU1ldGFkYXRhJDEoZGlyZWN0aXZlT3JDb21wb25lbnRJbnN0YW5jZSkge1xuICAgIGNvbnN0IHsgY29uc3RydWN0b3IgfSA9IGRpcmVjdGl2ZU9yQ29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIHRoZSBpbnN0YW5jZSBjb25zdHJ1Y3RvcicpO1xuICAgIH1cbiAgICAvLyBJbiBjYXNlIGEgY29tcG9uZW50IGluaGVyaXRzIGZyb20gYSBkaXJlY3RpdmUsIHdlIG1heSBoYXZlIGNvbXBvbmVudCBhbmQgZGlyZWN0aXZlIG1ldGFkYXRhXG4gICAgLy8gVG8gZW5zdXJlIHdlIGRvbid0IGdldCB0aGUgbWV0YWRhdGEgb2YgdGhlIGRpcmVjdGl2ZSwgd2Ugd2FudCB0byBjYWxsIGBnZXRDb21wb25lbnREZWZgIGZpcnN0LlxuICAgIGNvbnN0IGNvbXBvbmVudERlZiA9IGdldENvbXBvbmVudERlZihjb25zdHJ1Y3Rvcik7XG4gICAgaWYgKGNvbXBvbmVudERlZikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXRzOiBjb21wb25lbnREZWYuaW5wdXRzLFxuICAgICAgICAgICAgb3V0cHV0czogY29tcG9uZW50RGVmLm91dHB1dHMsXG4gICAgICAgICAgICBlbmNhcHN1bGF0aW9uOiBjb21wb25lbnREZWYuZW5jYXBzdWxhdGlvbixcbiAgICAgICAgICAgIGNoYW5nZURldGVjdGlvbjogY29tcG9uZW50RGVmLm9uUHVzaCA/IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCA6XG4gICAgICAgICAgICAgICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBkaXJlY3RpdmVEZWYgPSBnZXREaXJlY3RpdmVEZWYoY29uc3RydWN0b3IpO1xuICAgIGlmIChkaXJlY3RpdmVEZWYpIHtcbiAgICAgICAgcmV0dXJuIHsgaW5wdXRzOiBkaXJlY3RpdmVEZWYuaW5wdXRzLCBvdXRwdXRzOiBkaXJlY3RpdmVEZWYub3V0cHV0cyB9O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogUmV0cmlldmUgbWFwIG9mIGxvY2FsIHJlZmVyZW5jZXMuXG4gKlxuICogVGhlIHJlZmVyZW5jZXMgYXJlIHJldHJpZXZlZCBhcyBhIG1hcCBvZiBsb2NhbCByZWZlcmVuY2UgbmFtZSB0byBlbGVtZW50IG9yIGRpcmVjdGl2ZSBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gdGFyZ2V0IERPTSBlbGVtZW50LCBjb21wb25lbnQgb3IgZGlyZWN0aXZlIGluc3RhbmNlIGZvciB3aGljaCB0byByZXRyaWV2ZVxuICogICAgdGhlIGxvY2FsIHJlZmVyZW5jZXMuXG4gKi9cbmZ1bmN0aW9uIGdldExvY2FsUmVmcyh0YXJnZXQpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0TENvbnRleHQodGFyZ2V0KTtcbiAgICBpZiAoY29udGV4dCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIGlmIChjb250ZXh0LmxvY2FsUmVmcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRleHQubG9jYWxSZWZzID0gZGlzY292ZXJMb2NhbFJlZnMoY29udGV4dC5sVmlldywgY29udGV4dC5ub2RlSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dC5sb2NhbFJlZnMgfHwge307XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgaG9zdCBlbGVtZW50IG9mIGEgY29tcG9uZW50IG9yIGRpcmVjdGl2ZSBpbnN0YW5jZS5cbiAqIFRoZSBob3N0IGVsZW1lbnQgaXMgdGhlIERPTSBlbGVtZW50IHRoYXQgbWF0Y2hlZCB0aGUgc2VsZWN0b3Igb2YgdGhlIGRpcmVjdGl2ZS5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50T3JEaXJlY3RpdmUgQ29tcG9uZW50IG9yIGRpcmVjdGl2ZSBpbnN0YW5jZSBmb3Igd2hpY2ggdGhlIGhvc3RcbiAqICAgICBlbGVtZW50IHNob3VsZCBiZSByZXRyaWV2ZWQuXG4gKiBAcmV0dXJucyBIb3N0IGVsZW1lbnQgb2YgdGhlIHRhcmdldC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKiBAZ2xvYmFsQXBpIG5nXG4gKi9cbmZ1bmN0aW9uIGdldEhvc3RFbGVtZW50KGNvbXBvbmVudE9yRGlyZWN0aXZlKSB7XG4gICAgcmV0dXJuIGdldExDb250ZXh0KGNvbXBvbmVudE9yRGlyZWN0aXZlKS5uYXRpdmU7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgcmVuZGVyZWQgdGV4dCBmb3IgYSBnaXZlbiBjb21wb25lbnQuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXRyaWV2ZXMgdGhlIGhvc3QgZWxlbWVudCBvZiBhIGNvbXBvbmVudCBhbmRcbiAqIGFuZCB0aGVuIHJldHVybnMgdGhlIGB0ZXh0Q29udGVudGAgZm9yIHRoYXQgZWxlbWVudC4gVGhpcyBpbXBsaWVzXG4gKiB0aGF0IHRoZSB0ZXh0IHJldHVybmVkIHdpbGwgaW5jbHVkZSByZS1wcm9qZWN0ZWQgY29udGVudCBvZlxuICogdGhlIGNvbXBvbmVudCBhcyB3ZWxsLlxuICpcbiAqIEBwYXJhbSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCB0byByZXR1cm4gdGhlIGNvbnRlbnQgdGV4dCBmb3IuXG4gKi9cbmZ1bmN0aW9uIGdldFJlbmRlcmVkVGV4dChjb21wb25lbnQpIHtcbiAgICBjb25zdCBob3N0RWxlbWVudCA9IGdldEhvc3RFbGVtZW50KGNvbXBvbmVudCk7XG4gICAgcmV0dXJuIGhvc3RFbGVtZW50LnRleHRDb250ZW50IHx8ICcnO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgYSBsaXN0IG9mIGV2ZW50IGxpc3RlbmVycyBhc3NvY2lhdGVkIHdpdGggYSBET00gZWxlbWVudC4gVGhlIGxpc3QgZG9lcyBpbmNsdWRlIGhvc3RcbiAqIGxpc3RlbmVycywgYnV0IGl0IGRvZXMgbm90IGluY2x1ZGUgZXZlbnQgbGlzdGVuZXJzIGRlZmluZWQgb3V0c2lkZSBvZiB0aGUgQW5ndWxhciBjb250ZXh0XG4gKiAoZS5nLiB0aHJvdWdoIGBhZGRFdmVudExpc3RlbmVyYCkuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqIEdpdmVuIHRoZSBmb2xsb3dpbmcgRE9NIHN0cnVjdHVyZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8YXBwLXJvb3Q+XG4gKiAgIDxkaXYgKGNsaWNrKT1cImRvU29tZXRoaW5nKClcIj48L2Rpdj5cbiAqIDwvYXBwLXJvb3Q+XG4gKiBgYGBcbiAqXG4gKiBDYWxsaW5nIGBnZXRMaXN0ZW5lcnNgIG9uIGA8ZGl2PmAgd2lsbCByZXR1cm4gYW4gb2JqZWN0IHRoYXQgbG9va3MgYXMgZm9sbG93czpcbiAqXG4gKiBgYGB0c1xuICoge1xuICogICBuYW1lOiAnY2xpY2snLFxuICogICBlbGVtZW50OiA8ZGl2PixcbiAqICAgY2FsbGJhY2s6ICgpID0+IGRvU29tZXRoaW5nKCksXG4gKiAgIHVzZUNhcHR1cmU6IGZhbHNlXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gZWxlbWVudCBFbGVtZW50IGZvciB3aGljaCB0aGUgRE9NIGxpc3RlbmVycyBzaG91bGQgYmUgcmV0cmlldmVkLlxuICogQHJldHVybnMgQXJyYXkgb2YgZXZlbnQgbGlzdGVuZXJzIG9uIHRoZSBET00gZWxlbWVudC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKiBAZ2xvYmFsQXBpIG5nXG4gKi9cbmZ1bmN0aW9uIGdldExpc3RlbmVycyhlbGVtZW50KSB7XG4gICAgYXNzZXJ0RG9tRWxlbWVudChlbGVtZW50KTtcbiAgICBjb25zdCBsQ29udGV4dCA9IGdldExDb250ZXh0KGVsZW1lbnQpO1xuICAgIGlmIChsQ29udGV4dCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIGNvbnN0IGxWaWV3ID0gbENvbnRleHQubFZpZXc7XG4gICAgY29uc3QgdFZpZXcgPSBsVmlld1tUVklFV107XG4gICAgY29uc3QgbENsZWFudXAgPSBsVmlld1tDTEVBTlVQXTtcbiAgICBjb25zdCB0Q2xlYW51cCA9IHRWaWV3LmNsZWFudXA7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gW107XG4gICAgaWYgKHRDbGVhbnVwICYmIGxDbGVhbnVwKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdENsZWFudXAubGVuZ3RoOykge1xuICAgICAgICAgICAgY29uc3QgZmlyc3RQYXJhbSA9IHRDbGVhbnVwW2krK107XG4gICAgICAgICAgICBjb25zdCBzZWNvbmRQYXJhbSA9IHRDbGVhbnVwW2krK107XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpcnN0UGFyYW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGZpcnN0UGFyYW07XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJFbGVtZW50ID0gdW53cmFwUk5vZGUobFZpZXdbc2Vjb25kUGFyYW1dKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGxDbGVhbnVwW3RDbGVhbnVwW2krK11dO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVzZUNhcHR1cmVPckluZHggPSB0Q2xlYW51cFtpKytdO1xuICAgICAgICAgICAgICAgIC8vIGlmIHVzZUNhcHR1cmVPckluZHggaXMgYm9vbGVhbiB0aGVuIHJlcG9ydCBpdCBhcyBpcy5cbiAgICAgICAgICAgICAgICAvLyBpZiB1c2VDYXB0dXJlT3JJbmR4IGlzIHBvc2l0aXZlIG51bWJlciB0aGVuIGl0IGluIHVuc3Vic2NyaWJlIG1ldGhvZFxuICAgICAgICAgICAgICAgIC8vIGlmIHVzZUNhcHR1cmVPckluZHggaXMgbmVnYXRpdmUgbnVtYmVyIHRoZW4gaXQgaXMgYSBTdWJzY3JpcHRpb25cbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gKHR5cGVvZiB1c2VDYXB0dXJlT3JJbmR4ID09PSAnYm9vbGVhbicgfHwgdXNlQ2FwdHVyZU9ySW5keCA+PSAwKSA/ICdkb20nIDogJ291dHB1dCc7XG4gICAgICAgICAgICAgICAgY29uc3QgdXNlQ2FwdHVyZSA9IHR5cGVvZiB1c2VDYXB0dXJlT3JJbmR4ID09PSAnYm9vbGVhbicgPyB1c2VDYXB0dXJlT3JJbmR4IDogZmFsc2U7XG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT0gbGlzdGVuZXJFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoKHsgZWxlbWVudCwgbmFtZSwgY2FsbGJhY2ssIHVzZUNhcHR1cmUsIHR5cGUgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxpc3RlbmVycy5zb3J0KHNvcnRMaXN0ZW5lcnMpO1xuICAgIHJldHVybiBsaXN0ZW5lcnM7XG59XG5mdW5jdGlvbiBzb3J0TGlzdGVuZXJzKGEsIGIpIHtcbiAgICBpZiAoYS5uYW1lID09IGIubmFtZSlcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgcmV0dXJuIGEubmFtZSA8IGIubmFtZSA/IC0xIDogMTtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBzaG91bGQgbm90IGV4aXN0IGJlY2F1c2UgaXQgaXMgbWVnYW1vcnBoaWMgYW5kIG9ubHkgbW9zdGx5IGNvcnJlY3QuXG4gKlxuICogU2VlIGNhbGwgc2l0ZSBmb3IgbW9yZSBpbmZvLlxuICovXG5mdW5jdGlvbiBpc0RpcmVjdGl2ZURlZkhhY2sob2JqKSB7XG4gICAgcmV0dXJuIG9iai50eXBlICE9PSB1bmRlZmluZWQgJiYgb2JqLnRlbXBsYXRlICE9PSB1bmRlZmluZWQgJiYgb2JqLmRlY2xhcmVkSW5wdXRzICE9PSB1bmRlZmluZWQ7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGF0dGFjaGVkIGBEZWJ1Z05vZGVgIGluc3RhbmNlIGZvciBhbiBlbGVtZW50IGluIHRoZSBET00uXG4gKlxuICogQHBhcmFtIGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgb3duZWQgYnkgYW4gZXhpc3RpbmcgY29tcG9uZW50J3Mgdmlldy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVidWdOb2RlJDEoZWxlbWVudCkge1xuICAgIGlmIChuZ0Rldk1vZGUgJiYgIShlbGVtZW50IGluc3RhbmNlb2YgTm9kZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RpbmcgaW5zdGFuY2Ugb2YgRE9NIEVsZW1lbnQnKTtcbiAgICB9XG4gICAgY29uc3QgbENvbnRleHQgPSBnZXRMQ29udGV4dChlbGVtZW50KTtcbiAgICBpZiAobENvbnRleHQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGxWaWV3ID0gbENvbnRleHQubFZpZXc7XG4gICAgY29uc3Qgbm9kZUluZGV4ID0gbENvbnRleHQubm9kZUluZGV4O1xuICAgIGlmIChub2RlSW5kZXggIT09IC0xKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlSW5MVmlldyA9IGxWaWV3W25vZGVJbmRleF07XG4gICAgICAgIC8vIHRoaXMgbWVhbnMgdGhhdCB2YWx1ZSBpbiB0aGUgbFZpZXcgaXMgYSBjb21wb25lbnQgd2l0aCBpdHMgb3duXG4gICAgICAgIC8vIGRhdGEuIEluIHRoaXMgc2l0dWF0aW9uIHRoZSBUTm9kZSBpcyBub3QgYWNjZXNzZWQgYXQgdGhlIHNhbWUgc3BvdC5cbiAgICAgICAgY29uc3QgdE5vZGUgPSBpc0xWaWV3KHZhbHVlSW5MVmlldykgPyB2YWx1ZUluTFZpZXdbVF9IT1NUXSA6IGdldFROb2RlKGxWaWV3W1RWSUVXXSwgbm9kZUluZGV4KTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBhc3NlcnRFcXVhbCh0Tm9kZS5pbmRleCwgbm9kZUluZGV4LCAnRXhwZWN0aW5nIHRoYXQgVE5vZGUgYXQgaW5kZXggaXMgc2FtZSBhcyBpbmRleCcpO1xuICAgICAgICByZXR1cm4gYnVpbGREZWJ1Z05vZGUodE5vZGUsIGxWaWV3KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFJldHJpZXZlIHRoZSBjb21wb25lbnQgYExWaWV3YCBmcm9tIGNvbXBvbmVudC9lbGVtZW50LlxuICpcbiAqIE5PVEU6IGBMVmlld2AgaXMgYSBwcml2YXRlIGFuZCBzaG91bGQgbm90IGJlIGxlYWtlZCBvdXRzaWRlLlxuICogICAgICAgRG9uJ3QgZXhwb3J0IHRoaXMgbWV0aG9kIHRvIGBuZy4qYCBvbiB3aW5kb3cuXG4gKlxuICogQHBhcmFtIHRhcmdldCBET00gZWxlbWVudCBvciBjb21wb25lbnQgaW5zdGFuY2UgZm9yIHdoaWNoIHRvIHJldHJpZXZlIHRoZSBMVmlldy5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TFZpZXcodGFyZ2V0KSB7XG4gICAgY29uc3QgbENvbnRleHQgPSBnZXRMQ29udGV4dCh0YXJnZXQpO1xuICAgIGNvbnN0IG5vZGVJbmR4ID0gbENvbnRleHQubm9kZUluZGV4O1xuICAgIGNvbnN0IGxWaWV3ID0gbENvbnRleHQubFZpZXc7XG4gICAgY29uc3QgY29tcG9uZW50TFZpZXcgPSBsVmlld1tub2RlSW5keF07XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydExWaWV3KGNvbXBvbmVudExWaWV3KTtcbiAgICByZXR1cm4gY29tcG9uZW50TFZpZXc7XG59XG4vKiogQXNzZXJ0cyB0aGF0IGEgdmFsdWUgaXMgYSBET00gRWxlbWVudC4gKi9cbmZ1bmN0aW9uIGFzc2VydERvbUVsZW1lbnQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmICEodmFsdWUgaW5zdGFuY2VvZiBFbGVtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGluZyBpbnN0YW5jZSBvZiBET00gRWxlbWVudCcpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIE1hcmtzIGEgY29tcG9uZW50IGZvciBjaGVjayAoaW4gY2FzZSBvZiBPblB1c2ggY29tcG9uZW50cykgYW5kIHN5bmNocm9ub3VzbHlcbiAqIHBlcmZvcm1zIGNoYW5nZSBkZXRlY3Rpb24gb24gdGhlIGFwcGxpY2F0aW9uIHRoaXMgY29tcG9uZW50IGJlbG9uZ3MgdG8uXG4gKlxuICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgdG8ge0BsaW5rIENoYW5nZURldGVjdG9yUmVmI21hcmtGb3JDaGVjayBtYXJrIGZvciBjaGVja30uXG4gKlxuICogQHB1YmxpY0FwaVxuICogQGdsb2JhbEFwaSBuZ1xuICovXG5mdW5jdGlvbiBhcHBseUNoYW5nZXMoY29tcG9uZW50KSB7XG4gICAgbWFya0RpcnR5KGNvbXBvbmVudCk7XG4gICAgZ2V0Um9vdENvbXBvbmVudHMoY29tcG9uZW50KS5mb3JFYWNoKHJvb3RDb21wb25lbnQgPT4gZGV0ZWN0Q2hhbmdlcyhyb290Q29tcG9uZW50KSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUaGlzIGZpbGUgaW50cm9kdWNlcyBzZXJpZXMgb2YgZ2xvYmFsbHkgYWNjZXNzaWJsZSBkZWJ1ZyB0b29sc1xuICogdG8gYWxsb3cgZm9yIHRoZSBBbmd1bGFyIGRlYnVnZ2luZyBzdG9yeSB0byBmdW5jdGlvbi5cbiAqXG4gKiBUbyBzZWUgdGhpcyBpbiBhY3Rpb24gcnVuIHRoZSBmb2xsb3dpbmcgY29tbWFuZDpcbiAqXG4gKiAgIGJhemVsIHJ1biAvL3BhY2thZ2VzL2NvcmUvdGVzdC9idW5kbGluZy90b2RvOmRldnNlcnZlclxuICpcbiAqICBUaGVuIGxvYWQgYGxvY2FsaG9zdDo1NDMyYCBhbmQgc3RhcnQgdXNpbmcgdGhlIGNvbnNvbGUgdG9vbHMuXG4gKi9cbi8qKlxuICogVGhpcyB2YWx1ZSByZWZsZWN0cyB0aGUgcHJvcGVydHkgb24gdGhlIHdpbmRvdyB3aGVyZSB0aGUgZGV2XG4gKiB0b29scyBhcmUgcGF0Y2hlZCAod2luZG93Lm5nKS5cbiAqICovXG5jb25zdCBHTE9CQUxfUFVCTElTSF9FWFBBTkRPX0tFWSA9ICduZyc7XG5sZXQgX3B1Ymxpc2hlZCA9IGZhbHNlO1xuLyoqXG4gKiBQdWJsaXNoZXMgYSBjb2xsZWN0aW9uIG9mIGRlZmF1bHQgZGVidWcgdG9vbHMgb250b2B3aW5kb3cubmdgLlxuICpcbiAqIFRoZXNlIGZ1bmN0aW9ucyBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5IHdoZW4gQW5ndWxhciBpcyBpbiBkZXZlbG9wbWVudFxuICogbW9kZSBhbmQgYXJlIGF1dG9tYXRpY2FsbHkgc3RyaXBwZWQgYXdheSBmcm9tIHByb2QgbW9kZSBpcyBvbi5cbiAqL1xuZnVuY3Rpb24gcHVibGlzaERlZmF1bHRHbG9iYWxVdGlscyQxKCkge1xuICAgIGlmICghX3B1Ymxpc2hlZCkge1xuICAgICAgICBfcHVibGlzaGVkID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdhcm5pbmc6IHRoaXMgZnVuY3Rpb24gaXMgKklOVEVSTkFMKiBhbmQgc2hvdWxkIG5vdCBiZSByZWxpZWQgdXBvbiBpbiBhcHBsaWNhdGlvbidzIGNvZGUuXG4gICAgICAgICAqIFRoZSBjb250cmFjdCBvZiB0aGUgZnVuY3Rpb24gbWlnaHQgYmUgY2hhbmdlZCBpbiBhbnkgcmVsZWFzZSBhbmQvb3IgdGhlIGZ1bmN0aW9uIGNhbiBiZVxuICAgICAgICAgKiByZW1vdmVkIGNvbXBsZXRlbHkuXG4gICAgICAgICAqL1xuICAgICAgICBwdWJsaXNoR2xvYmFsVXRpbCgnybVzZXRQcm9maWxlcicsIHNldFByb2ZpbGVyKTtcbiAgICAgICAgcHVibGlzaEdsb2JhbFV0aWwoJ2dldERpcmVjdGl2ZU1ldGFkYXRhJywgZ2V0RGlyZWN0aXZlTWV0YWRhdGEkMSk7XG4gICAgICAgIHB1Ymxpc2hHbG9iYWxVdGlsKCdnZXRDb21wb25lbnQnLCBnZXRDb21wb25lbnQkMSk7XG4gICAgICAgIHB1Ymxpc2hHbG9iYWxVdGlsKCdnZXRDb250ZXh0JywgZ2V0Q29udGV4dCk7XG4gICAgICAgIHB1Ymxpc2hHbG9iYWxVdGlsKCdnZXRMaXN0ZW5lcnMnLCBnZXRMaXN0ZW5lcnMpO1xuICAgICAgICBwdWJsaXNoR2xvYmFsVXRpbCgnZ2V0T3duaW5nQ29tcG9uZW50JywgZ2V0T3duaW5nQ29tcG9uZW50KTtcbiAgICAgICAgcHVibGlzaEdsb2JhbFV0aWwoJ2dldEhvc3RFbGVtZW50JywgZ2V0SG9zdEVsZW1lbnQpO1xuICAgICAgICBwdWJsaXNoR2xvYmFsVXRpbCgnZ2V0SW5qZWN0b3InLCBnZXRJbmplY3Rvcik7XG4gICAgICAgIHB1Ymxpc2hHbG9iYWxVdGlsKCdnZXRSb290Q29tcG9uZW50cycsIGdldFJvb3RDb21wb25lbnRzKTtcbiAgICAgICAgcHVibGlzaEdsb2JhbFV0aWwoJ2dldERpcmVjdGl2ZXMnLCBnZXREaXJlY3RpdmVzKTtcbiAgICAgICAgcHVibGlzaEdsb2JhbFV0aWwoJ2FwcGx5Q2hhbmdlcycsIGFwcGx5Q2hhbmdlcyk7XG4gICAgfVxufVxuLyoqXG4gKiBQdWJsaXNoZXMgdGhlIGdpdmVuIGZ1bmN0aW9uIHRvIGB3aW5kb3cubmdgIHNvIHRoYXQgaXQgY2FuIGJlXG4gKiB1c2VkIGZyb20gdGhlIGJyb3dzZXIgY29uc29sZSB3aGVuIGFuIGFwcGxpY2F0aW9uIGlzIG5vdCBpbiBwcm9kdWN0aW9uLlxuICovXG5mdW5jdGlvbiBwdWJsaXNoR2xvYmFsVXRpbChuYW1lLCBmbikge1xuICAgIGlmICh0eXBlb2YgQ09NUElMRUQgPT09ICd1bmRlZmluZWQnIHx8ICFDT01QSUxFRCkge1xuICAgICAgICAvLyBOb3RlOiB3ZSBjYW4ndCBleHBvcnQgYG5nYCB3aGVuIHVzaW5nIGNsb3N1cmUgZW5oYW5jZWQgb3B0aW1pemF0aW9uIGFzOlxuICAgICAgICAvLyAtIGNsb3N1cmUgZGVjbGFyZXMgZ2xvYmFscyBpdHNlbGYgZm9yIG1pbmlmaWVkIG5hbWVzLCB3aGljaCBzb21ldGltZXMgY2xvYmJlciBvdXIgYG5nYCBnbG9iYWxcbiAgICAgICAgLy8gLSB3ZSBjYW4ndCBkZWNsYXJlIGEgY2xvc3VyZSBleHRlcm4gYXMgdGhlIG5hbWVzcGFjZSBgbmdgIGlzIGFscmVhZHkgdXNlZCB3aXRoaW4gR29vZ2xlXG4gICAgICAgIC8vICAgZm9yIHR5cGluZ3MgZm9yIEFuZ3VsYXJKUyAodmlhIGBnb29nLnByb3ZpZGUoJ25nLi4uLicpYCkuXG4gICAgICAgIGNvbnN0IHcgPSBfZ2xvYmFsO1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChmbiwgJ2Z1bmN0aW9uIG5vdCBkZWZpbmVkJyk7XG4gICAgICAgIGlmICh3KSB7XG4gICAgICAgICAgICBsZXQgY29udGFpbmVyID0gd1tHTE9CQUxfUFVCTElTSF9FWFBBTkRPX0tFWV07XG4gICAgICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHdbR0xPQkFMX1BVQkxJU0hfRVhQQU5ET19LRVldID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250YWluZXJbbmFtZV0gPSBmbjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBUT0RPOiBBIGhhY2sgdG8gbm90IHB1bGwgaW4gdGhlIE51bGxJbmplY3RvciBmcm9tIEBhbmd1bGFyL2NvcmUuXG5jb25zdCBOVUxMX0lOSkVDVE9SID0ge1xuICAgIGdldDogKHRva2VuLCBub3RGb3VuZFZhbHVlKSA9PiB7XG4gICAgICAgIHRocm93UHJvdmlkZXJOb3RGb3VuZEVycm9yKHRva2VuLCAnTnVsbEluamVjdG9yJyk7XG4gICAgfVxufTtcbi8qKlxuICogQm9vdHN0cmFwcyBhIENvbXBvbmVudCBpbnRvIGFuIGV4aXN0aW5nIGhvc3QgZWxlbWVudCBhbmQgcmV0dXJucyBhbiBpbnN0YW5jZVxuICogb2YgdGhlIGNvbXBvbmVudC5cbiAqXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiB0byBib290c3RyYXAgYSBjb21wb25lbnQgaW50byB0aGUgRE9NIHRyZWUuIEVhY2ggaW52b2NhdGlvblxuICogb2YgdGhpcyBmdW5jdGlvbiB3aWxsIGNyZWF0ZSBhIHNlcGFyYXRlIHRyZWUgb2YgY29tcG9uZW50cywgaW5qZWN0b3JzIGFuZFxuICogY2hhbmdlIGRldGVjdGlvbiBjeWNsZXMgYW5kIGxpZmV0aW1lcy4gVG8gZHluYW1pY2FsbHkgaW5zZXJ0IGEgbmV3IGNvbXBvbmVudFxuICogaW50byBhbiBleGlzdGluZyB0cmVlIHN1Y2ggdGhhdCBpdCBzaGFyZXMgdGhlIHNhbWUgaW5qZWN0aW9uLCBjaGFuZ2UgZGV0ZWN0aW9uXG4gKiBhbmQgb2JqZWN0IGxpZmV0aW1lLCB1c2Uge0BsaW5rIFZpZXdDb250YWluZXIjY3JlYXRlQ29tcG9uZW50fS5cbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50VHlwZSBDb21wb25lbnQgdG8gYm9vdHN0cmFwXG4gKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25hbCBwYXJhbWV0ZXJzIHdoaWNoIGNvbnRyb2wgYm9vdHN0cmFwcGluZ1xuICovXG5mdW5jdGlvbiByZW5kZXJDb21wb25lbnQoY29tcG9uZW50VHlwZSAvKiBUeXBlIGFzIHdvcmthcm91bmQgZm9yOiBNaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvNDg4MSAqLywgb3B0cyA9IHt9KSB7XG4gICAgbmdEZXZNb2RlICYmIHB1Ymxpc2hEZWZhdWx0R2xvYmFsVXRpbHMkMSgpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRDb21wb25lbnRUeXBlKGNvbXBvbmVudFR5cGUpO1xuICAgIGNvbnN0IHJlbmRlcmVyRmFjdG9yeSA9IG9wdHMucmVuZGVyZXJGYWN0b3J5IHx8IGRvbVJlbmRlcmVyRmFjdG9yeTM7XG4gICAgY29uc3Qgc2FuaXRpemVyID0gb3B0cy5zYW5pdGl6ZXIgfHwgbnVsbDtcbiAgICBjb25zdCBjb21wb25lbnREZWYgPSBnZXRDb21wb25lbnREZWYoY29tcG9uZW50VHlwZSk7XG4gICAgaWYgKGNvbXBvbmVudERlZi50eXBlICE9IGNvbXBvbmVudFR5cGUpXG4gICAgICAgIGNvbXBvbmVudERlZi50eXBlID0gY29tcG9uZW50VHlwZTtcbiAgICAvLyBUaGUgZmlyc3QgaW5kZXggb2YgdGhlIGZpcnN0IHNlbGVjdG9yIGlzIHRoZSB0YWcgbmFtZS5cbiAgICBjb25zdCBjb21wb25lbnRUYWcgPSBjb21wb25lbnREZWYuc2VsZWN0b3JzWzBdWzBdO1xuICAgIGNvbnN0IGhvc3RSZW5kZXJlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcbiAgICBjb25zdCBob3N0Uk5vZGUgPSBsb2NhdGVIb3N0RWxlbWVudChob3N0UmVuZGVyZXIsIG9wdHMuaG9zdCB8fCBjb21wb25lbnRUYWcsIGNvbXBvbmVudERlZi5lbmNhcHN1bGF0aW9uKTtcbiAgICBjb25zdCByb290RmxhZ3MgPSBjb21wb25lbnREZWYub25QdXNoID8gNjQgLyogRGlydHkgKi8gfCA1MTIgLyogSXNSb290ICovIDpcbiAgICAgICAgMTYgLyogQ2hlY2tBbHdheXMgKi8gfCA1MTIgLyogSXNSb290ICovO1xuICAgIGNvbnN0IHJvb3RDb250ZXh0ID0gY3JlYXRlUm9vdENvbnRleHQob3B0cy5zY2hlZHVsZXIsIG9wdHMucGxheWVySGFuZGxlcik7XG4gICAgY29uc3QgcmVuZGVyZXIgPSByZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIoaG9zdFJOb2RlLCBjb21wb25lbnREZWYpO1xuICAgIGNvbnN0IHJvb3RUVmlldyA9IGNyZWF0ZVRWaWV3KDAgLyogUm9vdCAqLywgbnVsbCwgbnVsbCwgMSwgMCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgY29uc3Qgcm9vdFZpZXcgPSBjcmVhdGVMVmlldyhudWxsLCByb290VFZpZXcsIHJvb3RDb250ZXh0LCByb290RmxhZ3MsIG51bGwsIG51bGwsIHJlbmRlcmVyRmFjdG9yeSwgcmVuZGVyZXIsIG51bGwsIG9wdHMuaW5qZWN0b3IgfHwgbnVsbCk7XG4gICAgZW50ZXJWaWV3KHJvb3RWaWV3KTtcbiAgICBsZXQgY29tcG9uZW50O1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChyZW5kZXJlckZhY3RvcnkuYmVnaW4pXG4gICAgICAgICAgICByZW5kZXJlckZhY3RvcnkuYmVnaW4oKTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50VmlldyA9IGNyZWF0ZVJvb3RDb21wb25lbnRWaWV3KGhvc3RSTm9kZSwgY29tcG9uZW50RGVmLCByb290VmlldywgcmVuZGVyZXJGYWN0b3J5LCByZW5kZXJlciwgc2FuaXRpemVyKTtcbiAgICAgICAgY29tcG9uZW50ID0gY3JlYXRlUm9vdENvbXBvbmVudChjb21wb25lbnRWaWV3LCBjb21wb25lbnREZWYsIHJvb3RWaWV3LCByb290Q29udGV4dCwgb3B0cy5ob3N0RmVhdHVyZXMgfHwgbnVsbCk7XG4gICAgICAgIC8vIGNyZWF0ZSBtb2RlIHBhc3NcbiAgICAgICAgcmVuZGVyVmlldyhyb290VFZpZXcsIHJvb3RWaWV3LCBudWxsKTtcbiAgICAgICAgLy8gdXBkYXRlIG1vZGUgcGFzc1xuICAgICAgICByZWZyZXNoVmlldyhyb290VFZpZXcsIHJvb3RWaWV3LCBudWxsLCBudWxsKTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIGxlYXZlVmlldygpO1xuICAgICAgICBpZiAocmVuZGVyZXJGYWN0b3J5LmVuZClcbiAgICAgICAgICAgIHJlbmRlcmVyRmFjdG9yeS5lbmQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbn1cbi8qKlxuICogQ3JlYXRlcyB0aGUgcm9vdCBjb21wb25lbnQgdmlldyBhbmQgdGhlIHJvb3QgY29tcG9uZW50IG5vZGUuXG4gKlxuICogQHBhcmFtIHJOb2RlIFJlbmRlciBob3N0IGVsZW1lbnQuXG4gKiBAcGFyYW0gZGVmIENvbXBvbmVudERlZlxuICogQHBhcmFtIHJvb3RWaWV3IFRoZSBwYXJlbnQgdmlldyB3aGVyZSB0aGUgaG9zdCBub2RlIGlzIHN0b3JlZFxuICogQHBhcmFtIHJlbmRlcmVyRmFjdG9yeSBGYWN0b3J5IHRvIGJlIHVzZWQgZm9yIGNyZWF0aW5nIGNoaWxkIHJlbmRlcmVycy5cbiAqIEBwYXJhbSBob3N0UmVuZGVyZXIgVGhlIGN1cnJlbnQgcmVuZGVyZXJcbiAqIEBwYXJhbSBzYW5pdGl6ZXIgVGhlIHNhbml0aXplciwgaWYgcHJvdmlkZWRcbiAqXG4gKiBAcmV0dXJucyBDb21wb25lbnQgdmlldyBjcmVhdGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RDb21wb25lbnRWaWV3KHJOb2RlLCBkZWYsIHJvb3RWaWV3LCByZW5kZXJlckZhY3RvcnksIGhvc3RSZW5kZXJlciwgc2FuaXRpemVyKSB7XG4gICAgY29uc3QgdFZpZXcgPSByb290Vmlld1tUVklFV107XG4gICAgY29uc3QgaW5kZXggPSBIRUFERVJfT0ZGU0VUO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2Uocm9vdFZpZXcsIGluZGV4KTtcbiAgICByb290Vmlld1tpbmRleF0gPSByTm9kZTtcbiAgICAvLyAnI2hvc3QnIGlzIGFkZGVkIGhlcmUgYXMgd2UgZG9uJ3Qga25vdyB0aGUgcmVhbCBob3N0IERPTSBuYW1lICh3ZSBkb24ndCB3YW50IHRvIHJlYWQgaXQpIGFuZCBhdFxuICAgIC8vIHRoZSBzYW1lIHRpbWUgd2Ugd2FudCB0byBjb21tdW5pY2F0ZSB0aGUgZGVidWcgYFROb2RlYCB0aGF0IHRoaXMgaXMgYSBzcGVjaWFsIGBUTm9kZWBcbiAgICAvLyByZXByZXNlbnRpbmcgYSBob3N0IGVsZW1lbnQuXG4gICAgY29uc3QgdE5vZGUgPSBnZXRPckNyZWF0ZVROb2RlKHRWaWV3LCBpbmRleCwgMiAvKiBFbGVtZW50ICovLCAnI2hvc3QnLCBudWxsKTtcbiAgICBjb25zdCBtZXJnZWRBdHRycyA9IHROb2RlLm1lcmdlZEF0dHJzID0gZGVmLmhvc3RBdHRycztcbiAgICBpZiAobWVyZ2VkQXR0cnMgIT09IG51bGwpIHtcbiAgICAgICAgY29tcHV0ZVN0YXRpY1N0eWxpbmcodE5vZGUsIG1lcmdlZEF0dHJzLCB0cnVlKTtcbiAgICAgICAgaWYgKHJOb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzZXRVcEF0dHJpYnV0ZXMoaG9zdFJlbmRlcmVyLCByTm9kZSwgbWVyZ2VkQXR0cnMpO1xuICAgICAgICAgICAgaWYgKHROb2RlLmNsYXNzZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB3cml0ZURpcmVjdENsYXNzKGhvc3RSZW5kZXJlciwgck5vZGUsIHROb2RlLmNsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHROb2RlLnN0eWxlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHdyaXRlRGlyZWN0U3R5bGUoaG9zdFJlbmRlcmVyLCByTm9kZSwgdE5vZGUuc3R5bGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB2aWV3UmVuZGVyZXIgPSByZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIock5vZGUsIGRlZik7XG4gICAgY29uc3QgY29tcG9uZW50VmlldyA9IGNyZWF0ZUxWaWV3KHJvb3RWaWV3LCBnZXRPckNyZWF0ZVRDb21wb25lbnRWaWV3KGRlZiksIG51bGwsIGRlZi5vblB1c2ggPyA2NCAvKiBEaXJ0eSAqLyA6IDE2IC8qIENoZWNrQWx3YXlzICovLCByb290Vmlld1tpbmRleF0sIHROb2RlLCByZW5kZXJlckZhY3RvcnksIHZpZXdSZW5kZXJlciwgc2FuaXRpemVyIHx8IG51bGwsIG51bGwpO1xuICAgIGlmICh0Vmlldy5maXJzdENyZWF0ZVBhc3MpIHtcbiAgICAgICAgZGlQdWJsaWNJbkluamVjdG9yKGdldE9yQ3JlYXRlTm9kZUluamVjdG9yRm9yTm9kZSh0Tm9kZSwgcm9vdFZpZXcpLCB0VmlldywgZGVmLnR5cGUpO1xuICAgICAgICBtYXJrQXNDb21wb25lbnRIb3N0KHRWaWV3LCB0Tm9kZSk7XG4gICAgICAgIGluaXRUTm9kZUZsYWdzKHROb2RlLCByb290Vmlldy5sZW5ndGgsIDEpO1xuICAgIH1cbiAgICBhZGRUb1ZpZXdUcmVlKHJvb3RWaWV3LCBjb21wb25lbnRWaWV3KTtcbiAgICAvLyBTdG9yZSBjb21wb25lbnQgdmlldyBhdCBub2RlIGluZGV4LCB3aXRoIG5vZGUgYXMgdGhlIEhPU1RcbiAgICByZXR1cm4gcm9vdFZpZXdbaW5kZXhdID0gY29tcG9uZW50Vmlldztcbn1cbi8qKlxuICogQ3JlYXRlcyBhIHJvb3QgY29tcG9uZW50IGFuZCBzZXRzIGl0IHVwIHdpdGggZmVhdHVyZXMgYW5kIGhvc3QgYmluZGluZ3MuIFNoYXJlZCBieVxuICogcmVuZGVyQ29tcG9uZW50KCkgYW5kIFZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KCkuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvb3RDb21wb25lbnQoY29tcG9uZW50VmlldywgY29tcG9uZW50RGVmLCByb290TFZpZXcsIHJvb3RDb250ZXh0LCBob3N0RmVhdHVyZXMpIHtcbiAgICBjb25zdCB0VmlldyA9IHJvb3RMVmlld1tUVklFV107XG4gICAgLy8gQ3JlYXRlIGRpcmVjdGl2ZSBpbnN0YW5jZSB3aXRoIGZhY3RvcnkoKSBhbmQgc3RvcmUgYXQgbmV4dCBpbmRleCBpbiB2aWV3RGF0YVxuICAgIGNvbnN0IGNvbXBvbmVudCA9IGluc3RhbnRpYXRlUm9vdENvbXBvbmVudCh0Vmlldywgcm9vdExWaWV3LCBjb21wb25lbnREZWYpO1xuICAgIHJvb3RDb250ZXh0LmNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgIGNvbXBvbmVudFZpZXdbQ09OVEVYVF0gPSBjb21wb25lbnQ7XG4gICAgaG9zdEZlYXR1cmVzICYmIGhvc3RGZWF0dXJlcy5mb3JFYWNoKChmZWF0dXJlKSA9PiBmZWF0dXJlKGNvbXBvbmVudCwgY29tcG9uZW50RGVmKSk7XG4gICAgLy8gV2Ugd2FudCB0byBnZW5lcmF0ZSBhbiBlbXB0eSBRdWVyeUxpc3QgZm9yIHJvb3QgY29udGVudCBxdWVyaWVzIGZvciBiYWNrd2FyZHNcbiAgICAvLyBjb21wYXRpYmlsaXR5IHdpdGggVmlld0VuZ2luZS5cbiAgICBpZiAoY29tcG9uZW50RGVmLmNvbnRlbnRRdWVyaWVzKSB7XG4gICAgICAgIGNvbnN0IHROb2RlID0gZ2V0Q3VycmVudFROb2RlKCk7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHROb2RlLCAnVE5vZGUgZXhwZWN0ZWQnKTtcbiAgICAgICAgY29tcG9uZW50RGVmLmNvbnRlbnRRdWVyaWVzKDEgLyogQ3JlYXRlICovLCBjb21wb25lbnQsIHROb2RlLmRpcmVjdGl2ZVN0YXJ0KTtcbiAgICB9XG4gICAgY29uc3Qgcm9vdFROb2RlID0gZ2V0Q3VycmVudFROb2RlKCk7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQocm9vdFROb2RlLCAndE5vZGUgc2hvdWxkIGhhdmUgYmVlbiBhbHJlYWR5IGNyZWF0ZWQnKTtcbiAgICBpZiAodFZpZXcuZmlyc3RDcmVhdGVQYXNzICYmXG4gICAgICAgIChjb21wb25lbnREZWYuaG9zdEJpbmRpbmdzICE9PSBudWxsIHx8IGNvbXBvbmVudERlZi5ob3N0QXR0cnMgIT09IG51bGwpKSB7XG4gICAgICAgIHNldFNlbGVjdGVkSW5kZXgocm9vdFROb2RlLmluZGV4KTtcbiAgICAgICAgY29uc3Qgcm9vdFRWaWV3ID0gcm9vdExWaWV3W1RWSUVXXTtcbiAgICAgICAgcmVnaXN0ZXJIb3N0QmluZGluZ09wQ29kZXMocm9vdFRWaWV3LCByb290VE5vZGUsIHJvb3RMVmlldywgcm9vdFROb2RlLmRpcmVjdGl2ZVN0YXJ0LCByb290VE5vZGUuZGlyZWN0aXZlRW5kLCBjb21wb25lbnREZWYpO1xuICAgICAgICBpbnZva2VIb3N0QmluZGluZ3NJbkNyZWF0aW9uTW9kZShjb21wb25lbnREZWYsIGNvbXBvbmVudCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBjcmVhdGVSb290Q29udGV4dChzY2hlZHVsZXIsIHBsYXllckhhbmRsZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb21wb25lbnRzOiBbXSxcbiAgICAgICAgc2NoZWR1bGVyOiBzY2hlZHVsZXIgfHwgZGVmYXVsdFNjaGVkdWxlcixcbiAgICAgICAgY2xlYW46IENMRUFOX1BST01JU0UsXG4gICAgICAgIHBsYXllckhhbmRsZXI6IHBsYXllckhhbmRsZXIgfHwgbnVsbCxcbiAgICAgICAgZmxhZ3M6IDAgLyogRW1wdHkgKi9cbiAgICB9O1xufVxuLyoqXG4gKiBVc2VkIHRvIGVuYWJsZSBsaWZlY3ljbGUgaG9va3Mgb24gdGhlIHJvb3QgY29tcG9uZW50LlxuICpcbiAqIEluY2x1ZGUgdGhpcyBmZWF0dXJlIHdoZW4gY2FsbGluZyBgcmVuZGVyQ29tcG9uZW50YCBpZiB0aGUgcm9vdCBjb21wb25lbnRcbiAqIHlvdSBhcmUgcmVuZGVyaW5nIGhhcyBsaWZlY3ljbGUgaG9va3MgZGVmaW5lZC4gT3RoZXJ3aXNlLCB0aGUgaG9va3Mgd29uJ3RcbiAqIGJlIGNhbGxlZCBwcm9wZXJseS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogcmVuZGVyQ29tcG9uZW50KEFwcENvbXBvbmVudCwge2hvc3RGZWF0dXJlczogW0xpZmVjeWNsZUhvb2tzRmVhdHVyZV19KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBMaWZlY3ljbGVIb29rc0ZlYXR1cmUoY29tcG9uZW50LCBkZWYpIHtcbiAgICBjb25zdCBsVmlldyA9IHJlYWRQYXRjaGVkTFZpZXcoY29tcG9uZW50KTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChsVmlldywgJ0xWaWV3IGlzIHJlcXVpcmVkJyk7XG4gICAgY29uc3QgdFZpZXcgPSBsVmlld1tUVklFV107XG4gICAgY29uc3QgdE5vZGUgPSBnZXRDdXJyZW50VE5vZGUoKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZCh0Tm9kZSwgJ1ROb2RlIGlzIHJlcXVpcmVkJyk7XG4gICAgcmVnaXN0ZXJQb3N0T3JkZXJIb29rcyh0VmlldywgdE5vZGUpO1xufVxuLyoqXG4gKiBXYWl0IG9uIGNvbXBvbmVudCB1bnRpbCBpdCBpcyByZW5kZXJlZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBgUHJvbWlzZWAgd2hpY2ggaXMgcmVzb2x2ZWQgd2hlbiB0aGUgY29tcG9uZW50J3NcbiAqIGNoYW5nZSBkZXRlY3Rpb24gaXMgZXhlY3V0ZWQuIFRoaXMgaXMgZGV0ZXJtaW5lZCBieSBmaW5kaW5nIHRoZSBzY2hlZHVsZXJcbiAqIGFzc29jaWF0ZWQgd2l0aCB0aGUgYGNvbXBvbmVudGAncyByZW5kZXIgdHJlZSBhbmQgd2FpdGluZyB1bnRpbCB0aGUgc2NoZWR1bGVyXG4gKiBmbHVzaGVzLiBJZiBub3RoaW5nIGlzIHNjaGVkdWxlZCwgdGhlIGZ1bmN0aW9uIHJldHVybnMgYSByZXNvbHZlZCBwcm9taXNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBcbiAqIGF3YWl0IHdoZW5SZW5kZXJlZChteUNvbXBvbmVudCk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gY29tcG9uZW50IENvbXBvbmVudCB0byB3YWl0IHVwb25cbiAqIEByZXR1cm5zIFByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgd2hlbiB0aGUgY29tcG9uZW50IGlzIHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB3aGVuUmVuZGVyZWQoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGdldFJvb3RDb250ZXh0KGNvbXBvbmVudCkuY2xlYW47XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gZ2V0U3VwZXJUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHR5cGUucHJvdG90eXBlKS5jb25zdHJ1Y3Rvcjtcbn1cbi8qKlxuICogTWVyZ2VzIHRoZSBkZWZpbml0aW9uIGZyb20gYSBzdXBlciBjbGFzcyB0byBhIHN1YiBjbGFzcy5cbiAqIEBwYXJhbSBkZWZpbml0aW9uIFRoZSBkZWZpbml0aW9uIHRoYXQgaXMgYSBTdWJDbGFzcyBvZiBhbm90aGVyIGRpcmVjdGl2ZSBvZiBjb21wb25lbnRcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1SW5oZXJpdERlZmluaXRpb25GZWF0dXJlKGRlZmluaXRpb24pIHtcbiAgICBsZXQgc3VwZXJUeXBlID0gZ2V0U3VwZXJUeXBlKGRlZmluaXRpb24udHlwZSk7XG4gICAgbGV0IHNob3VsZEluaGVyaXRGaWVsZHMgPSB0cnVlO1xuICAgIGNvbnN0IGluaGVyaXRhbmNlQ2hhaW4gPSBbZGVmaW5pdGlvbl07XG4gICAgd2hpbGUgKHN1cGVyVHlwZSkge1xuICAgICAgICBsZXQgc3VwZXJEZWYgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChpc0NvbXBvbmVudERlZihkZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgdXNlIGdldENvbXBvbmVudERlZi9nZXREaXJlY3RpdmVEZWYuIFRoaXMgbG9naWMgcmVsaWVzIG9uIGluaGVyaXRhbmNlLlxuICAgICAgICAgICAgc3VwZXJEZWYgPSBzdXBlclR5cGUuybVjbXAgfHwgc3VwZXJUeXBlLsm1ZGlyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN1cGVyVHlwZS7JtWNtcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpID9cbiAgICAgICAgICAgICAgICAgICAgJ0RpcmVjdGl2ZXMgY2Fubm90IGluaGVyaXQgQ29tcG9uZW50cycgOlxuICAgICAgICAgICAgICAgICAgICAnJztcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKDkwMyAvKiBJTlZBTElEX0lOSEVSSVRBTkNFICovLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gRG9uJ3QgdXNlIGdldENvbXBvbmVudERlZi9nZXREaXJlY3RpdmVEZWYuIFRoaXMgbG9naWMgcmVsaWVzIG9uIGluaGVyaXRhbmNlLlxuICAgICAgICAgICAgc3VwZXJEZWYgPSBzdXBlclR5cGUuybVkaXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1cGVyRGVmKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkSW5oZXJpdEZpZWxkcykge1xuICAgICAgICAgICAgICAgIGluaGVyaXRhbmNlQ2hhaW4ucHVzaChzdXBlckRlZik7XG4gICAgICAgICAgICAgICAgLy8gU29tZSBmaWVsZHMgaW4gdGhlIGRlZmluaXRpb24gbWF5IGJlIGVtcHR5LCBpZiB0aGVyZSB3ZXJlIG5vIHZhbHVlcyB0byBwdXQgaW4gdGhlbSB0aGF0XG4gICAgICAgICAgICAgICAgLy8gd291bGQndmUganVzdGlmaWVkIG9iamVjdCBjcmVhdGlvbi4gVW53cmFwIHRoZW0gaWYgbmVjZXNzYXJ5LlxuICAgICAgICAgICAgICAgIGNvbnN0IHdyaXRlYWJsZURlZiA9IGRlZmluaXRpb247XG4gICAgICAgICAgICAgICAgd3JpdGVhYmxlRGVmLmlucHV0cyA9IG1heWJlVW53cmFwRW1wdHkoZGVmaW5pdGlvbi5pbnB1dHMpO1xuICAgICAgICAgICAgICAgIHdyaXRlYWJsZURlZi5kZWNsYXJlZElucHV0cyA9IG1heWJlVW53cmFwRW1wdHkoZGVmaW5pdGlvbi5kZWNsYXJlZElucHV0cyk7XG4gICAgICAgICAgICAgICAgd3JpdGVhYmxlRGVmLm91dHB1dHMgPSBtYXliZVVud3JhcEVtcHR5KGRlZmluaXRpb24ub3V0cHV0cyk7XG4gICAgICAgICAgICAgICAgLy8gTWVyZ2UgaG9zdEJpbmRpbmdzXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VwZXJIb3N0QmluZGluZ3MgPSBzdXBlckRlZi5ob3N0QmluZGluZ3M7XG4gICAgICAgICAgICAgICAgc3VwZXJIb3N0QmluZGluZ3MgJiYgaW5oZXJpdEhvc3RCaW5kaW5ncyhkZWZpbml0aW9uLCBzdXBlckhvc3RCaW5kaW5ncyk7XG4gICAgICAgICAgICAgICAgLy8gTWVyZ2UgcXVlcmllc1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1cGVyVmlld1F1ZXJ5ID0gc3VwZXJEZWYudmlld1F1ZXJ5O1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1cGVyQ29udGVudFF1ZXJpZXMgPSBzdXBlckRlZi5jb250ZW50UXVlcmllcztcbiAgICAgICAgICAgICAgICBzdXBlclZpZXdRdWVyeSAmJiBpbmhlcml0Vmlld1F1ZXJ5KGRlZmluaXRpb24sIHN1cGVyVmlld1F1ZXJ5KTtcbiAgICAgICAgICAgICAgICBzdXBlckNvbnRlbnRRdWVyaWVzICYmIGluaGVyaXRDb250ZW50UXVlcmllcyhkZWZpbml0aW9uLCBzdXBlckNvbnRlbnRRdWVyaWVzKTtcbiAgICAgICAgICAgICAgICAvLyBNZXJnZSBpbnB1dHMgYW5kIG91dHB1dHNcbiAgICAgICAgICAgICAgICBmaWxsUHJvcGVydGllcyhkZWZpbml0aW9uLmlucHV0cywgc3VwZXJEZWYuaW5wdXRzKTtcbiAgICAgICAgICAgICAgICBmaWxsUHJvcGVydGllcyhkZWZpbml0aW9uLmRlY2xhcmVkSW5wdXRzLCBzdXBlckRlZi5kZWNsYXJlZElucHV0cyk7XG4gICAgICAgICAgICAgICAgZmlsbFByb3BlcnRpZXMoZGVmaW5pdGlvbi5vdXRwdXRzLCBzdXBlckRlZi5vdXRwdXRzKTtcbiAgICAgICAgICAgICAgICAvLyBNZXJnZSBhbmltYXRpb25zIG1ldGFkYXRhLlxuICAgICAgICAgICAgICAgIC8vIElmIGBzdXBlckRlZmAgaXMgYSBDb21wb25lbnQsIHRoZSBgZGF0YWAgZmllbGQgaXMgcHJlc2VudCAoZGVmYXVsdHMgdG8gYW4gZW1wdHkgb2JqZWN0KS5cbiAgICAgICAgICAgICAgICBpZiAoaXNDb21wb25lbnREZWYoc3VwZXJEZWYpICYmIHN1cGVyRGVmLmRhdGEuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHN1cGVyIGRlZiBpcyBhIENvbXBvbmVudCwgdGhlIGBkZWZpbml0aW9uYCBpcyBhbHNvIGEgQ29tcG9uZW50LCBzaW5jZSBEaXJlY3RpdmVzIGNhblxuICAgICAgICAgICAgICAgICAgICAvLyBub3QgaW5oZXJpdCBDb21wb25lbnRzICh3ZSB0aHJvdyBhbiBlcnJvciBhYm92ZSBhbmQgY2Fubm90IHJlYWNoIHRoaXMgY29kZSkuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZkRhdGEgPSBkZWZpbml0aW9uLmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGRlZkRhdGEuYW5pbWF0aW9uID0gKGRlZkRhdGEuYW5pbWF0aW9uIHx8IFtdKS5jb25jYXQoc3VwZXJEZWYuZGF0YS5hbmltYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFJ1biBwYXJlbnQgZmVhdHVyZXNcbiAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzID0gc3VwZXJEZWYuZmVhdHVyZXM7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmUgPSBmZWF0dXJlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmUgJiYgZmVhdHVyZS5uZ0luaGVyaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUoZGVmaW5pdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgYEluaGVyaXREZWZpbml0aW9uRmVhdHVyZWAgaXMgYSBwYXJ0IG9mIHRoZSBjdXJyZW50IGBzdXBlckRlZmAsIGl0IG1lYW5zIHRoYXQgdGhpc1xuICAgICAgICAgICAgICAgICAgICAvLyBkZWYgYWxyZWFkeSBoYXMgYWxsIHRoZSBuZWNlc3NhcnkgaW5mb3JtYXRpb24gaW5oZXJpdGVkIGZyb20gaXRzIHN1cGVyIGNsYXNzKGVzKSwgc28gd2VcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FuIHN0b3AgbWVyZ2luZyBmaWVsZHMgZnJvbSBzdXBlciBjbGFzc2VzLiBIb3dldmVyIHdlIG5lZWQgdG8gaXRlcmF0ZSB0aHJvdWdoIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBwcm90b3R5cGUgY2hhaW4gdG8gbG9vayBmb3IgY2xhc3NlcyB0aGF0IG1pZ2h0IGNvbnRhaW4gb3RoZXIgXCJmZWF0dXJlc1wiIChsaWtlXG4gICAgICAgICAgICAgICAgICAgIC8vIE5nT25DaGFuZ2VzKSwgd2hpY2ggd2Ugc2hvdWxkIGludm9rZSBmb3IgdGhlIG9yaWdpbmFsIGBkZWZpbml0aW9uYC4gV2Ugc2V0IHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBgc2hvdWxkSW5oZXJpdEZpZWxkc2AgZmxhZyB0byBpbmRpY2F0ZSB0aGF0LCBlc3NlbnRpYWxseSBza2lwcGluZyBmaWVsZHMgaW5oZXJpdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9naWMgYW5kIG9ubHkgaW52b2tpbmcgZnVuY3Rpb25zIGZyb20gdGhlIFwiZmVhdHVyZXNcIiBsaXN0LlxuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZSA9PT0gybXJtUluaGVyaXREZWZpbml0aW9uRmVhdHVyZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkSW5oZXJpdEZpZWxkcyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1cGVyVHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzdXBlclR5cGUpO1xuICAgIH1cbiAgICBtZXJnZUhvc3RBdHRyc0Fjcm9zc0luaGVyaXRhbmNlKGluaGVyaXRhbmNlQ2hhaW4pO1xufVxuLyoqXG4gKiBNZXJnZSB0aGUgYGhvc3RBdHRyc2AgYW5kIGBob3N0VmFyc2AgZnJvbSB0aGUgaW5oZXJpdGVkIHBhcmVudCB0byB0aGUgYmFzZSBjbGFzcy5cbiAqXG4gKiBAcGFyYW0gaW5oZXJpdGFuY2VDaGFpbiBBIGxpc3Qgb2YgYFdyaXRhYmxlRGVmc2Agc3RhcnRpbmcgYXQgdGhlIHRvcCBtb3N0IHR5cGUgYW5kIGxpc3RpbmdcbiAqIHN1Yi10eXBlcyBpbiBvcmRlci4gRm9yIGVhY2ggdHlwZSB0YWtlIHRoZSBgaG9zdEF0dHJzYCBhbmQgYGhvc3RWYXJzYCBhbmQgbWVyZ2UgaXQgd2l0aCB0aGUgY2hpbGRcbiAqIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlSG9zdEF0dHJzQWNyb3NzSW5oZXJpdGFuY2UoaW5oZXJpdGFuY2VDaGFpbikge1xuICAgIGxldCBob3N0VmFycyA9IDA7XG4gICAgbGV0IGhvc3RBdHRycyA9IG51bGw7XG4gICAgLy8gV2UgcHJvY2VzcyB0aGUgaW5oZXJpdGFuY2Ugb3JkZXIgZnJvbSB0aGUgYmFzZSB0byB0aGUgbGVhdmVzIGhlcmUuXG4gICAgZm9yIChsZXQgaSA9IGluaGVyaXRhbmNlQ2hhaW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgZGVmID0gaW5oZXJpdGFuY2VDaGFpbltpXTtcbiAgICAgICAgLy8gRm9yIGVhY2ggYGhvc3RWYXJzYCwgd2UgbmVlZCB0byBhZGQgdGhlIHN1cGVyY2xhc3MgYW1vdW50LlxuICAgICAgICBkZWYuaG9zdFZhcnMgPSAoaG9zdFZhcnMgKz0gZGVmLmhvc3RWYXJzKTtcbiAgICAgICAgLy8gZm9yIGVhY2ggYGhvc3RBdHRyc2Agd2UgbmVlZCB0byBtZXJnZSBpdCB3aXRoIHN1cGVyY2xhc3MuXG4gICAgICAgIGRlZi5ob3N0QXR0cnMgPVxuICAgICAgICAgICAgbWVyZ2VIb3N0QXR0cnMoZGVmLmhvc3RBdHRycywgaG9zdEF0dHJzID0gbWVyZ2VIb3N0QXR0cnMoaG9zdEF0dHJzLCBkZWYuaG9zdEF0dHJzKSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWF5YmVVbndyYXBFbXB0eSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gRU1QVFlfT0JKKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgZWxzZSBpZiAodmFsdWUgPT09IEVNUFRZX0FSUkFZKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbmhlcml0Vmlld1F1ZXJ5KGRlZmluaXRpb24sIHN1cGVyVmlld1F1ZXJ5KSB7XG4gICAgY29uc3QgcHJldlZpZXdRdWVyeSA9IGRlZmluaXRpb24udmlld1F1ZXJ5O1xuICAgIGlmIChwcmV2Vmlld1F1ZXJ5KSB7XG4gICAgICAgIGRlZmluaXRpb24udmlld1F1ZXJ5ID0gKHJmLCBjdHgpID0+IHtcbiAgICAgICAgICAgIHN1cGVyVmlld1F1ZXJ5KHJmLCBjdHgpO1xuICAgICAgICAgICAgcHJldlZpZXdRdWVyeShyZiwgY3R4KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRlZmluaXRpb24udmlld1F1ZXJ5ID0gc3VwZXJWaWV3UXVlcnk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW5oZXJpdENvbnRlbnRRdWVyaWVzKGRlZmluaXRpb24sIHN1cGVyQ29udGVudFF1ZXJpZXMpIHtcbiAgICBjb25zdCBwcmV2Q29udGVudFF1ZXJpZXMgPSBkZWZpbml0aW9uLmNvbnRlbnRRdWVyaWVzO1xuICAgIGlmIChwcmV2Q29udGVudFF1ZXJpZXMpIHtcbiAgICAgICAgZGVmaW5pdGlvbi5jb250ZW50UXVlcmllcyA9IChyZiwgY3R4LCBkaXJlY3RpdmVJbmRleCkgPT4ge1xuICAgICAgICAgICAgc3VwZXJDb250ZW50UXVlcmllcyhyZiwgY3R4LCBkaXJlY3RpdmVJbmRleCk7XG4gICAgICAgICAgICBwcmV2Q29udGVudFF1ZXJpZXMocmYsIGN0eCwgZGlyZWN0aXZlSW5kZXgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZGVmaW5pdGlvbi5jb250ZW50UXVlcmllcyA9IHN1cGVyQ29udGVudFF1ZXJpZXM7XG4gICAgfVxufVxuZnVuY3Rpb24gaW5oZXJpdEhvc3RCaW5kaW5ncyhkZWZpbml0aW9uLCBzdXBlckhvc3RCaW5kaW5ncykge1xuICAgIGNvbnN0IHByZXZIb3N0QmluZGluZ3MgPSBkZWZpbml0aW9uLmhvc3RCaW5kaW5ncztcbiAgICBpZiAocHJldkhvc3RCaW5kaW5ncykge1xuICAgICAgICBkZWZpbml0aW9uLmhvc3RCaW5kaW5ncyA9IChyZiwgY3R4KSA9PiB7XG4gICAgICAgICAgICBzdXBlckhvc3RCaW5kaW5ncyhyZiwgY3R4KTtcbiAgICAgICAgICAgIHByZXZIb3N0QmluZGluZ3MocmYsIGN0eCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBkZWZpbml0aW9uLmhvc3RCaW5kaW5ncyA9IHN1cGVySG9zdEJpbmRpbmdzO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEZpZWxkcyB3aGljaCBleGlzdCBvbiBlaXRoZXIgZGlyZWN0aXZlIG9yIGNvbXBvbmVudCBkZWZpbml0aW9ucywgYW5kIG5lZWQgdG8gYmUgY29waWVkIGZyb21cbiAqIHBhcmVudCB0byBjaGlsZCBjbGFzc2VzIGJ5IHRoZSBgybXJtUNvcHlEZWZpbml0aW9uRmVhdHVyZWAuXG4gKi9cbmNvbnN0IENPUFlfRElSRUNUSVZFX0ZJRUxEUyA9IFtcbiAgICAvLyBUaGUgY2hpbGQgY2xhc3Mgc2hvdWxkIHVzZSB0aGUgcHJvdmlkZXJzIG9mIGl0cyBwYXJlbnQuXG4gICAgJ3Byb3ZpZGVyc1Jlc29sdmVyJyxcbiAgICAvLyBOb3QgbGlzdGVkIGhlcmUgYXJlIGFueSBmaWVsZHMgd2hpY2ggYXJlIGhhbmRsZWQgYnkgdGhlIGDJtcm1SW5oZXJpdERlZmluaXRpb25GZWF0dXJlYCwgc3VjaFxuICAgIC8vIGFzIGlucHV0cywgb3V0cHV0cywgYW5kIGhvc3QgYmluZGluZyBmdW5jdGlvbnMuXG5dO1xuLyoqXG4gKiBGaWVsZHMgd2hpY2ggZXhpc3Qgb25seSBvbiBjb21wb25lbnQgZGVmaW5pdGlvbnMsIGFuZCBuZWVkIHRvIGJlIGNvcGllZCBmcm9tIHBhcmVudCB0byBjaGlsZFxuICogY2xhc3NlcyBieSB0aGUgYMm1ybVDb3B5RGVmaW5pdGlvbkZlYXR1cmVgLlxuICpcbiAqIFRoZSB0eXBlIGhlcmUgYWxsb3dzIGFueSBmaWVsZCBvZiBgQ29tcG9uZW50RGVmYCB3aGljaCBpcyBub3QgYWxzbyBhIHByb3BlcnR5IG9mIGBEaXJlY3RpdmVEZWZgLFxuICogc2luY2UgdGhvc2Ugc2hvdWxkIGdvIGluIGBDT1BZX0RJUkVDVElWRV9GSUVMRFNgIGFib3ZlLlxuICovXG5jb25zdCBDT1BZX0NPTVBPTkVOVF9GSUVMRFMgPSBbXG4gICAgLy8gVGhlIGNoaWxkIGNsYXNzIHNob3VsZCB1c2UgdGhlIHRlbXBsYXRlIGZ1bmN0aW9uIG9mIGl0cyBwYXJlbnQsIGluY2x1ZGluZyBhbGwgdGVtcGxhdGVcbiAgICAvLyBzZW1hbnRpY3MuXG4gICAgJ3RlbXBsYXRlJyxcbiAgICAnZGVjbHMnLFxuICAgICdjb25zdHMnLFxuICAgICd2YXJzJyxcbiAgICAnb25QdXNoJyxcbiAgICAnbmdDb250ZW50U2VsZWN0b3JzJyxcbiAgICAvLyBUaGUgY2hpbGQgY2xhc3Mgc2hvdWxkIHVzZSB0aGUgQ1NTIHN0eWxlcyBvZiBpdHMgcGFyZW50LCBpbmNsdWRpbmcgYWxsIHN0eWxpbmcgc2VtYW50aWNzLlxuICAgICdzdHlsZXMnLFxuICAgICdlbmNhcHN1bGF0aW9uJyxcbiAgICAvLyBUaGUgY2hpbGQgY2xhc3Mgc2hvdWxkIGJlIGNoZWNrZWQgYnkgdGhlIHJ1bnRpbWUgaW4gdGhlIHNhbWUgd2F5IGFzIGl0cyBwYXJlbnQuXG4gICAgJ3NjaGVtYXMnLFxuXTtcbi8qKlxuICogQ29waWVzIHRoZSBmaWVsZHMgbm90IGhhbmRsZWQgYnkgdGhlIGDJtcm1SW5oZXJpdERlZmluaXRpb25GZWF0dXJlYCBmcm9tIHRoZSBzdXBlcnR5cGUgb2YgYVxuICogZGVmaW5pdGlvbi5cbiAqXG4gKiBUaGlzIGV4aXN0cyBwcmltYXJpbHkgdG8gc3VwcG9ydCBuZ2NjIG1pZ3JhdGlvbiBvZiBhbiBleGlzdGluZyBWaWV3IEVuZ2luZSBwYXR0ZXJuLCB3aGVyZSBhblxuICogZW50aXJlIGRlY29yYXRvciBpcyBpbmhlcml0ZWQgZnJvbSBhIHBhcmVudCB0byBhIGNoaWxkIGNsYXNzLiBXaGVuIG5nY2MgZGV0ZWN0cyB0aGlzIGNhc2UsIGl0XG4gKiBnZW5lcmF0ZXMgYSBza2VsZXRvbiBkZWZpbml0aW9uIG9uIHRoZSBjaGlsZCBjbGFzcywgYW5kIGFwcGxpZXMgdGhpcyBmZWF0dXJlLlxuICpcbiAqIFRoZSBgybXJtUNvcHlEZWZpbml0aW9uRmVhdHVyZWAgdGhlbiBjb3BpZXMgYW55IG5lZWRlZCBmaWVsZHMgZnJvbSB0aGUgcGFyZW50IGNsYXNzJyBkZWZpbml0aW9uLFxuICogaW5jbHVkaW5nIHRoaW5ncyBsaWtlIHRoZSBjb21wb25lbnQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIGRlZmluaXRpb24gVGhlIGRlZmluaXRpb24gb2YgYSBjaGlsZCBjbGFzcyB3aGljaCBpbmhlcml0cyBmcm9tIGEgcGFyZW50IGNsYXNzIHdpdGggaXRzXG4gKiBvd24gZGVmaW5pdGlvbi5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Q29weURlZmluaXRpb25GZWF0dXJlKGRlZmluaXRpb24pIHtcbiAgICBsZXQgc3VwZXJUeXBlID0gZ2V0U3VwZXJUeXBlKGRlZmluaXRpb24udHlwZSk7XG4gICAgbGV0IHN1cGVyRGVmID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0NvbXBvbmVudERlZihkZWZpbml0aW9uKSkge1xuICAgICAgICAvLyBEb24ndCB1c2UgZ2V0Q29tcG9uZW50RGVmL2dldERpcmVjdGl2ZURlZi4gVGhpcyBsb2dpYyByZWxpZXMgb24gaW5oZXJpdGFuY2UuXG4gICAgICAgIHN1cGVyRGVmID0gc3VwZXJUeXBlLsm1Y21wO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gRG9uJ3QgdXNlIGdldENvbXBvbmVudERlZi9nZXREaXJlY3RpdmVEZWYuIFRoaXMgbG9naWMgcmVsaWVzIG9uIGluaGVyaXRhbmNlLlxuICAgICAgICBzdXBlckRlZiA9IHN1cGVyVHlwZS7JtWRpcjtcbiAgICB9XG4gICAgLy8gTmVlZGVkIGJlY2F1c2UgYGRlZmluaXRpb25gIGZpZWxkcyBhcmUgcmVhZG9ubHkuXG4gICAgY29uc3QgZGVmQW55ID0gZGVmaW5pdGlvbjtcbiAgICAvLyBDb3B5IG92ZXIgYW55IGZpZWxkcyB0aGF0IGFwcGx5IHRvIGVpdGhlciBkaXJlY3RpdmVzIG9yIGNvbXBvbmVudHMuXG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiBDT1BZX0RJUkVDVElWRV9GSUVMRFMpIHtcbiAgICAgICAgZGVmQW55W2ZpZWxkXSA9IHN1cGVyRGVmW2ZpZWxkXTtcbiAgICB9XG4gICAgaWYgKGlzQ29tcG9uZW50RGVmKHN1cGVyRGVmKSkge1xuICAgICAgICAvLyBDb3B5IG92ZXIgYW55IGNvbXBvbmVudC1zcGVjaWZpYyBmaWVsZHMuXG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgQ09QWV9DT01QT05FTlRfRklFTERTKSB7XG4gICAgICAgICAgICBkZWZBbnlbZmllbGRdID0gc3VwZXJEZWZbZmllbGRdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmxldCBfc3ltYm9sSXRlcmF0b3IgPSBudWxsO1xuZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKCFfc3ltYm9sSXRlcmF0b3IpIHtcbiAgICAgICAgY29uc3QgU3ltYm9sID0gX2dsb2JhbFsnU3ltYm9sJ107XG4gICAgICAgIGlmIChTeW1ib2wgJiYgU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgICAgICBfc3ltYm9sSXRlcmF0b3IgPSBTeW1ib2wuaXRlcmF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlczYtc2hpbSBzcGVjaWZpYyBsb2dpY1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE1hcC5wcm90b3R5cGUpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSAnZW50cmllcycgJiYga2V5ICE9PSAnc2l6ZScgJiZcbiAgICAgICAgICAgICAgICAgICAgTWFwLnByb3RvdHlwZVtrZXldID09PSBNYXAucHJvdG90eXBlWydlbnRyaWVzJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgX3N5bWJvbEl0ZXJhdG9yID0ga2V5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX3N5bWJvbEl0ZXJhdG9yO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGRldk1vZGVFcXVhbChhLCBiKSB7XG4gICAgY29uc3QgaXNMaXN0TGlrZUl0ZXJhYmxlQSA9IGlzTGlzdExpa2VJdGVyYWJsZShhKTtcbiAgICBjb25zdCBpc0xpc3RMaWtlSXRlcmFibGVCID0gaXNMaXN0TGlrZUl0ZXJhYmxlKGIpO1xuICAgIGlmIChpc0xpc3RMaWtlSXRlcmFibGVBICYmIGlzTGlzdExpa2VJdGVyYWJsZUIpIHtcbiAgICAgICAgcmV0dXJuIGFyZUl0ZXJhYmxlc0VxdWFsKGEsIGIsIGRldk1vZGVFcXVhbCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBpc0FPYmplY3QgPSBhICYmICh0eXBlb2YgYSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicpO1xuICAgICAgICBjb25zdCBpc0JPYmplY3QgPSBiICYmICh0eXBlb2YgYiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgPT09ICdmdW5jdGlvbicpO1xuICAgICAgICBpZiAoIWlzTGlzdExpa2VJdGVyYWJsZUEgJiYgaXNBT2JqZWN0ICYmICFpc0xpc3RMaWtlSXRlcmFibGVCICYmIGlzQk9iamVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmlzKGEsIGIpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNMaXN0TGlrZUl0ZXJhYmxlKG9iaikge1xuICAgIGlmICghaXNKc09iamVjdChvYmopKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqKSB8fFxuICAgICAgICAoIShvYmogaW5zdGFuY2VvZiBNYXApICYmIC8vIEpTIE1hcCBhcmUgaXRlcmFibGVzIGJ1dCByZXR1cm4gZW50cmllcyBhcyBbaywgdl1cbiAgICAgICAgICAgIGdldFN5bWJvbEl0ZXJhdG9yKCkgaW4gb2JqKTsgLy8gSlMgSXRlcmFibGUgaGF2ZSBhIFN5bWJvbC5pdGVyYXRvciBwcm9wXG59XG5mdW5jdGlvbiBhcmVJdGVyYWJsZXNFcXVhbChhLCBiLCBjb21wYXJhdG9yKSB7XG4gICAgY29uc3QgaXRlcmF0b3IxID0gYVtnZXRTeW1ib2xJdGVyYXRvcigpXSgpO1xuICAgIGNvbnN0IGl0ZXJhdG9yMiA9IGJbZ2V0U3ltYm9sSXRlcmF0b3IoKV0oKTtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCBpdGVtMSA9IGl0ZXJhdG9yMS5uZXh0KCk7XG4gICAgICAgIGNvbnN0IGl0ZW0yID0gaXRlcmF0b3IyLm5leHQoKTtcbiAgICAgICAgaWYgKGl0ZW0xLmRvbmUgJiYgaXRlbTIuZG9uZSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoaXRlbTEuZG9uZSB8fCBpdGVtMi5kb25lKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoIWNvbXBhcmF0b3IoaXRlbTEudmFsdWUsIGl0ZW0yLnZhbHVlKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5mdW5jdGlvbiBpdGVyYXRlTGlzdExpa2Uob2JqLCBmbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZuKG9ialtpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGl0ZXJhdG9yID0gb2JqW2dldFN5bWJvbEl0ZXJhdG9yKCldKCk7XG4gICAgICAgIGxldCBpdGVtO1xuICAgICAgICB3aGlsZSAoISgoaXRlbSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkpIHtcbiAgICAgICAgICAgIGZuKGl0ZW0udmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaXNKc09iamVjdChvKSB7XG4gICAgcmV0dXJuIG8gIT09IG51bGwgJiYgKHR5cGVvZiBvID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBvID09PSAnb2JqZWN0Jyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gVE9ETyhtaXNrbyk6IGNvbnNpZGVyIGlubGluaW5nXG4vKiogVXBkYXRlcyBiaW5kaW5nIGFuZCByZXR1cm5zIHRoZSB2YWx1ZS4gKi9cbmZ1bmN0aW9uIHVwZGF0ZUJpbmRpbmcobFZpZXcsIGJpbmRpbmdJbmRleCwgdmFsdWUpIHtcbiAgICByZXR1cm4gbFZpZXdbYmluZGluZ0luZGV4XSA9IHZhbHVlO1xufVxuLyoqIEdldHMgdGhlIGN1cnJlbnQgYmluZGluZyB2YWx1ZS4gKi9cbmZ1bmN0aW9uIGdldEJpbmRpbmcobFZpZXcsIGJpbmRpbmdJbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXcsIGJpbmRpbmdJbmRleCk7XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydE5vdFNhbWUobFZpZXdbYmluZGluZ0luZGV4XSwgTk9fQ0hBTkdFLCAnU3RvcmVkIHZhbHVlIHNob3VsZCBuZXZlciBiZSBOT19DSEFOR0UuJyk7XG4gICAgcmV0dXJuIGxWaWV3W2JpbmRpbmdJbmRleF07XG59XG4vKipcbiAqIFVwZGF0ZXMgYmluZGluZyBpZiBjaGFuZ2VkLCB0aGVuIHJldHVybnMgd2hldGhlciBpdCB3YXMgdXBkYXRlZC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFsc28gY2hlY2tzIHRoZSBgQ2hlY2tOb0NoYW5nZXNNb2RlYCBhbmQgdGhyb3dzIGlmIGNoYW5nZXMgYXJlIG1hZGUuXG4gKiBTb21lIGNoYW5nZXMgKE9iamVjdHMvaXRlcmFibGVzKSBkdXJpbmcgYENoZWNrTm9DaGFuZ2VzTW9kZWAgYXJlIGV4ZW1wdCB0byBjb21wbHkgd2l0aCBWRVxuICogYmVoYXZpb3IuXG4gKlxuICogQHBhcmFtIGxWaWV3IGN1cnJlbnQgYExWaWV3YFxuICogQHBhcmFtIGJpbmRpbmdJbmRleCBUaGUgYmluZGluZyBpbiB0aGUgYExWaWV3YCB0byBjaGVja1xuICogQHBhcmFtIHZhbHVlIE5ldyB2YWx1ZSB0byBjaGVjayBhZ2FpbnN0IGBsVmlld1tiaW5kaW5nSW5kZXhdYFxuICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBiaW5kaW5ncyBoYXMgY2hhbmdlZC4gKFRocm93cyBpZiBiaW5kaW5nIGhhcyBjaGFuZ2VkIGR1cmluZ1xuICogICAgICAgICAgYENoZWNrTm9DaGFuZ2VzTW9kZWApXG4gKi9cbmZ1bmN0aW9uIGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXgsIHZhbHVlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE5vdFNhbWUodmFsdWUsIE5PX0NIQU5HRSwgJ0luY29taW5nIHZhbHVlIHNob3VsZCBuZXZlciBiZSBOT19DSEFOR0UuJyk7XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydExlc3NUaGFuKGJpbmRpbmdJbmRleCwgbFZpZXcubGVuZ3RoLCBgU2xvdCBzaG91bGQgaGF2ZSBiZWVuIGluaXRpYWxpemVkIHRvIE5PX0NIQU5HRWApO1xuICAgIGNvbnN0IG9sZFZhbHVlID0gbFZpZXdbYmluZGluZ0luZGV4XTtcbiAgICBpZiAoT2JqZWN0LmlzKG9sZFZhbHVlLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKG5nRGV2TW9kZSAmJiBpc0luQ2hlY2tOb0NoYW5nZXNNb2RlKCkpIHtcbiAgICAgICAgICAgIC8vIFZpZXcgZW5naW5lIGRpZG4ndCByZXBvcnQgdW5kZWZpbmVkIHZhbHVlcyBhcyBjaGFuZ2VkIG9uIHRoZSBmaXJzdCBjaGVja05vQ2hhbmdlcyBwYXNzXG4gICAgICAgICAgICAvLyAoYmVmb3JlIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIHdhcyBydW4pLlxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWVUb0NvbXBhcmUgPSBvbGRWYWx1ZSAhPT0gTk9fQ0hBTkdFID8gb2xkVmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBpZiAoIWRldk1vZGVFcXVhbChvbGRWYWx1ZVRvQ29tcGFyZSwgdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGV0YWlscyA9IGdldEV4cHJlc3Npb25DaGFuZ2VkRXJyb3JEZXRhaWxzKGxWaWV3LCBiaW5kaW5nSW5kZXgsIG9sZFZhbHVlVG9Db21wYXJlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhyb3dFcnJvcklmTm9DaGFuZ2VzTW9kZShvbGRWYWx1ZSA9PT0gTk9fQ0hBTkdFLCBkZXRhaWxzLm9sZFZhbHVlLCBkZXRhaWxzLm5ld1ZhbHVlLCBkZXRhaWxzLnByb3BOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZXJlIHdhcyBhIGNoYW5nZSwgYnV0IHRoZSBgZGV2TW9kZUVxdWFsYCBkZWNpZGVkIHRoYXQgdGhlIGNoYW5nZSBpcyBleGVtcHQgZnJvbSBhbiBlcnJvci5cbiAgICAgICAgICAgIC8vIEZvciB0aGlzIHJlYXNvbiB3ZSBleGl0IGFzIGlmIG5vIGNoYW5nZS4gVGhlIGVhcmx5IGV4aXQgaXMgbmVlZGVkIHRvIHByZXZlbnQgdGhlIGNoYW5nZWRcbiAgICAgICAgICAgIC8vIHZhbHVlIHRvIGJlIHdyaXR0ZW4gaW50byBgTFZpZXdgIChJZiB3ZSB3b3VsZCB3cml0ZSB0aGUgbmV3IHZhbHVlIHRoYXQgd2Ugd291bGQgbm90IHNlZSBpdFxuICAgICAgICAgICAgLy8gYXMgY2hhbmdlIG9uIG5leHQgQ0QuKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxWaWV3W2JpbmRpbmdJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuLyoqIFVwZGF0ZXMgMiBiaW5kaW5ncyBpZiBjaGFuZ2VkLCB0aGVuIHJldHVybnMgd2hldGhlciBlaXRoZXIgd2FzIHVwZGF0ZWQuICovXG5mdW5jdGlvbiBiaW5kaW5nVXBkYXRlZDIobFZpZXcsIGJpbmRpbmdJbmRleCwgZXhwMSwgZXhwMikge1xuICAgIGNvbnN0IGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cDEpO1xuICAgIHJldHVybiBiaW5kaW5nVXBkYXRlZChsVmlldywgYmluZGluZ0luZGV4ICsgMSwgZXhwMikgfHwgZGlmZmVyZW50O1xufVxuLyoqIFVwZGF0ZXMgMyBiaW5kaW5ncyBpZiBjaGFuZ2VkLCB0aGVuIHJldHVybnMgd2hldGhlciBhbnkgd2FzIHVwZGF0ZWQuICovXG5mdW5jdGlvbiBiaW5kaW5nVXBkYXRlZDMobFZpZXcsIGJpbmRpbmdJbmRleCwgZXhwMSwgZXhwMiwgZXhwMykge1xuICAgIGNvbnN0IGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkMihsVmlldywgYmluZGluZ0luZGV4LCBleHAxLCBleHAyKTtcbiAgICByZXR1cm4gYmluZGluZ1VwZGF0ZWQobFZpZXcsIGJpbmRpbmdJbmRleCArIDIsIGV4cDMpIHx8IGRpZmZlcmVudDtcbn1cbi8qKiBVcGRhdGVzIDQgYmluZGluZ3MgaWYgY2hhbmdlZCwgdGhlbiByZXR1cm5zIHdoZXRoZXIgYW55IHdhcyB1cGRhdGVkLiAqL1xuZnVuY3Rpb24gYmluZGluZ1VwZGF0ZWQ0KGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQpIHtcbiAgICBjb25zdCBkaWZmZXJlbnQgPSBiaW5kaW5nVXBkYXRlZDIobFZpZXcsIGJpbmRpbmdJbmRleCwgZXhwMSwgZXhwMik7XG4gICAgcmV0dXJuIGJpbmRpbmdVcGRhdGVkMihsVmlldywgYmluZGluZ0luZGV4ICsgMiwgZXhwMywgZXhwNCkgfHwgZGlmZmVyZW50O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogVXBkYXRlcyB0aGUgdmFsdWUgb2Ygb3IgcmVtb3ZlcyBhIGJvdW5kIGF0dHJpYnV0ZSBvbiBhbiBFbGVtZW50LlxuICpcbiAqIFVzZWQgaW4gdGhlIGNhc2Ugb2YgYFthdHRyLnRpdGxlXT1cInZhbHVlXCJgXG4gKlxuICogQHBhcmFtIG5hbWUgbmFtZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlLlxuICogQHBhcmFtIHZhbHVlIHZhbHVlIFRoZSBhdHRyaWJ1dGUgaXMgcmVtb3ZlZCB3aGVuIHZhbHVlIGlzIGBudWxsYCBvciBgdW5kZWZpbmVkYC5cbiAqICAgICAgICAgICAgICAgICAgT3RoZXJ3aXNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgc2V0IHRvIHRoZSBzdHJpbmdpZmllZCB2YWx1ZS5cbiAqIEBwYXJhbSBzYW5pdGl6ZXIgQW4gb3B0aW9uYWwgZnVuY3Rpb24gdXNlZCB0byBzYW5pdGl6ZSB0aGUgdmFsdWUuXG4gKiBAcGFyYW0gbmFtZXNwYWNlIE9wdGlvbmFsIG5hbWVzcGFjZSB0byB1c2Ugd2hlbiBzZXR0aW5nIHRoZSBhdHRyaWJ1dGUuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgc2FuaXRpemVyLCBuYW1lc3BhY2UpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgYmluZGluZ0luZGV4ID0gbmV4dEJpbmRpbmdJbmRleCgpO1xuICAgIGlmIChiaW5kaW5nVXBkYXRlZChsVmlldywgYmluZGluZ0luZGV4LCB2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgICAgICBjb25zdCB0Tm9kZSA9IGdldFNlbGVjdGVkVE5vZGUoKTtcbiAgICAgICAgZWxlbWVudEF0dHJpYnV0ZUludGVybmFsKHROb2RlLCBsVmlldywgbmFtZSwgdmFsdWUsIHNhbml0aXplciwgbmFtZXNwYWNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmIHN0b3JlUHJvcGVydHlCaW5kaW5nTWV0YWRhdGEodFZpZXcuZGF0YSwgdE5vZGUsICdhdHRyLicgKyBuYW1lLCBiaW5kaW5nSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtWF0dHJpYnV0ZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIENyZWF0ZSBpbnRlcnBvbGF0aW9uIGJpbmRpbmdzIHdpdGggYSB2YXJpYWJsZSBudW1iZXIgb2YgZXhwcmVzc2lvbnMuXG4gKlxuICogSWYgdGhlcmUgYXJlIDEgdG8gOCBleHByZXNzaW9ucyBgaW50ZXJwb2xhdGlvbjEoKWAgdG8gYGludGVycG9sYXRpb244KClgIHNob3VsZCBiZSB1c2VkIGluc3RlYWQuXG4gKiBUaG9zZSBhcmUgZmFzdGVyIGJlY2F1c2UgdGhlcmUgaXMgbm8gbmVlZCB0byBjcmVhdGUgYW4gYXJyYXkgb2YgZXhwcmVzc2lvbnMgYW5kIGl0ZXJhdGUgb3ZlciBpdC5cbiAqXG4gKiBgdmFsdWVzYDpcbiAqIC0gaGFzIHN0YXRpYyB0ZXh0IGF0IGV2ZW4gaW5kZXhlcyxcbiAqIC0gaGFzIGV2YWx1YXRlZCBleHByZXNzaW9ucyBhdCBvZGQgaW5kZXhlcy5cbiAqXG4gKiBSZXR1cm5zIHRoZSBjb25jYXRlbmF0ZWQgc3RyaW5nIHdoZW4gYW55IG9mIHRoZSBhcmd1bWVudHMgY2hhbmdlcywgYE5PX0NIQU5HRWAgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0aW9uVihsVmlldywgdmFsdWVzKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydExlc3NUaGFuKDIsIHZhbHVlcy5sZW5ndGgsICdzaG91bGQgaGF2ZSBhdCBsZWFzdCAzIHZhbHVlcycpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbCh2YWx1ZXMubGVuZ3RoICUgMiwgMSwgJ3Nob3VsZCBoYXZlIGFuIG9kZCBudW1iZXIgb2YgdmFsdWVzJyk7XG4gICAgbGV0IGlzQmluZGluZ1VwZGF0ZWQgPSBmYWxzZTtcbiAgICBsZXQgYmluZGluZ0luZGV4ID0gZ2V0QmluZGluZ0luZGV4KCk7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgYmluZGluZ3MgKG9kZCBpbmRleGVzKSBoYXZlIGNoYW5nZWRcbiAgICAgICAgaXNCaW5kaW5nVXBkYXRlZCA9IGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXgrKywgdmFsdWVzW2ldKSB8fCBpc0JpbmRpbmdVcGRhdGVkO1xuICAgIH1cbiAgICBzZXRCaW5kaW5nSW5kZXgoYmluZGluZ0luZGV4KTtcbiAgICBpZiAoIWlzQmluZGluZ1VwZGF0ZWQpIHtcbiAgICAgICAgcmV0dXJuIE5PX0NIQU5HRTtcbiAgICB9XG4gICAgLy8gQnVpbGQgdGhlIHVwZGF0ZWQgY29udGVudFxuICAgIGxldCBjb250ZW50ID0gdmFsdWVzWzBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gcmVuZGVyU3RyaW5naWZ5KHZhbHVlc1tpXSkgKyB2YWx1ZXNbaSArIDFdO1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgd2l0aCAxIGV4cHJlc3Npb24uXG4gKlxuICogQHBhcmFtIHByZWZpeCBzdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIHZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggc3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGlvbjEobFZpZXcsIHByZWZpeCwgdjAsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBuZXh0QmluZGluZ0luZGV4KCksIHYwKTtcbiAgICByZXR1cm4gZGlmZmVyZW50ID8gcHJlZml4ICsgcmVuZGVyU3RyaW5naWZ5KHYwKSArIHN1ZmZpeCA6IE5PX0NIQU5HRTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgd2l0aCAyIGV4cHJlc3Npb25zLlxuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0aW9uMihsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBzdWZmaXgpIHtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBnZXRCaW5kaW5nSW5kZXgoKTtcbiAgICBjb25zdCBkaWZmZXJlbnQgPSBiaW5kaW5nVXBkYXRlZDIobFZpZXcsIGJpbmRpbmdJbmRleCwgdjAsIHYxKTtcbiAgICBpbmNyZW1lbnRCaW5kaW5nSW5kZXgoMik7XG4gICAgcmV0dXJuIGRpZmZlcmVudCA/IHByZWZpeCArIHJlbmRlclN0cmluZ2lmeSh2MCkgKyBpMCArIHJlbmRlclN0cmluZ2lmeSh2MSkgKyBzdWZmaXggOiBOT19DSEFOR0U7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gaW50ZXJwb2xhdGlvbiBiaW5kaW5nIHdpdGggMyBleHByZXNzaW9ucy5cbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGlvbjMobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBzdWZmaXgpIHtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBnZXRCaW5kaW5nSW5kZXgoKTtcbiAgICBjb25zdCBkaWZmZXJlbnQgPSBiaW5kaW5nVXBkYXRlZDMobFZpZXcsIGJpbmRpbmdJbmRleCwgdjAsIHYxLCB2Mik7XG4gICAgaW5jcmVtZW50QmluZGluZ0luZGV4KDMpO1xuICAgIHJldHVybiBkaWZmZXJlbnQgP1xuICAgICAgICBwcmVmaXggKyByZW5kZXJTdHJpbmdpZnkodjApICsgaTAgKyByZW5kZXJTdHJpbmdpZnkodjEpICsgaTEgKyByZW5kZXJTdHJpbmdpZnkodjIpICsgc3VmZml4IDpcbiAgICAgICAgTk9fQ0hBTkdFO1xufVxuLyoqXG4gKiBDcmVhdGUgYW4gaW50ZXJwb2xhdGlvbiBiaW5kaW5nIHdpdGggNCBleHByZXNzaW9ucy5cbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGlvbjQobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IGdldEJpbmRpbmdJbmRleCgpO1xuICAgIGNvbnN0IGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkNChsVmlldywgYmluZGluZ0luZGV4LCB2MCwgdjEsIHYyLCB2Myk7XG4gICAgaW5jcmVtZW50QmluZGluZ0luZGV4KDQpO1xuICAgIHJldHVybiBkaWZmZXJlbnQgPyBwcmVmaXggKyByZW5kZXJTdHJpbmdpZnkodjApICsgaTAgKyByZW5kZXJTdHJpbmdpZnkodjEpICsgaTEgK1xuICAgICAgICByZW5kZXJTdHJpbmdpZnkodjIpICsgaTIgKyByZW5kZXJTdHJpbmdpZnkodjMpICsgc3VmZml4IDpcbiAgICAgICAgTk9fQ0hBTkdFO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIGludGVycG9sYXRpb24gYmluZGluZyB3aXRoIDUgZXhwcmVzc2lvbnMuXG4gKi9cbmZ1bmN0aW9uIGludGVycG9sYXRpb241KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IGdldEJpbmRpbmdJbmRleCgpO1xuICAgIGxldCBkaWZmZXJlbnQgPSBiaW5kaW5nVXBkYXRlZDQobFZpZXcsIGJpbmRpbmdJbmRleCwgdjAsIHYxLCB2MiwgdjMpO1xuICAgIGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXggKyA0LCB2NCkgfHwgZGlmZmVyZW50O1xuICAgIGluY3JlbWVudEJpbmRpbmdJbmRleCg1KTtcbiAgICByZXR1cm4gZGlmZmVyZW50ID8gcHJlZml4ICsgcmVuZGVyU3RyaW5naWZ5KHYwKSArIGkwICsgcmVuZGVyU3RyaW5naWZ5KHYxKSArIGkxICtcbiAgICAgICAgcmVuZGVyU3RyaW5naWZ5KHYyKSArIGkyICsgcmVuZGVyU3RyaW5naWZ5KHYzKSArIGkzICsgcmVuZGVyU3RyaW5naWZ5KHY0KSArIHN1ZmZpeCA6XG4gICAgICAgIE5PX0NIQU5HRTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgd2l0aCA2IGV4cHJlc3Npb25zLlxuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0aW9uNihsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IGdldEJpbmRpbmdJbmRleCgpO1xuICAgIGxldCBkaWZmZXJlbnQgPSBiaW5kaW5nVXBkYXRlZDQobFZpZXcsIGJpbmRpbmdJbmRleCwgdjAsIHYxLCB2MiwgdjMpO1xuICAgIGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkMihsVmlldywgYmluZGluZ0luZGV4ICsgNCwgdjQsIHY1KSB8fCBkaWZmZXJlbnQ7XG4gICAgaW5jcmVtZW50QmluZGluZ0luZGV4KDYpO1xuICAgIHJldHVybiBkaWZmZXJlbnQgP1xuICAgICAgICBwcmVmaXggKyByZW5kZXJTdHJpbmdpZnkodjApICsgaTAgKyByZW5kZXJTdHJpbmdpZnkodjEpICsgaTEgKyByZW5kZXJTdHJpbmdpZnkodjIpICsgaTIgK1xuICAgICAgICAgICAgcmVuZGVyU3RyaW5naWZ5KHYzKSArIGkzICsgcmVuZGVyU3RyaW5naWZ5KHY0KSArIGk0ICsgcmVuZGVyU3RyaW5naWZ5KHY1KSArIHN1ZmZpeCA6XG4gICAgICAgIE5PX0NIQU5HRTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgd2l0aCA3IGV4cHJlc3Npb25zLlxuICovXG5mdW5jdGlvbiBpbnRlcnBvbGF0aW9uNyhsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2Niwgc3VmZml4KSB7XG4gICAgY29uc3QgYmluZGluZ0luZGV4ID0gZ2V0QmluZGluZ0luZGV4KCk7XG4gICAgbGV0IGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkNChsVmlldywgYmluZGluZ0luZGV4LCB2MCwgdjEsIHYyLCB2Myk7XG4gICAgZGlmZmVyZW50ID0gYmluZGluZ1VwZGF0ZWQzKGxWaWV3LCBiaW5kaW5nSW5kZXggKyA0LCB2NCwgdjUsIHY2KSB8fCBkaWZmZXJlbnQ7XG4gICAgaW5jcmVtZW50QmluZGluZ0luZGV4KDcpO1xuICAgIHJldHVybiBkaWZmZXJlbnQgPyBwcmVmaXggKyByZW5kZXJTdHJpbmdpZnkodjApICsgaTAgKyByZW5kZXJTdHJpbmdpZnkodjEpICsgaTEgK1xuICAgICAgICByZW5kZXJTdHJpbmdpZnkodjIpICsgaTIgKyByZW5kZXJTdHJpbmdpZnkodjMpICsgaTMgKyByZW5kZXJTdHJpbmdpZnkodjQpICsgaTQgK1xuICAgICAgICByZW5kZXJTdHJpbmdpZnkodjUpICsgaTUgKyByZW5kZXJTdHJpbmdpZnkodjYpICsgc3VmZml4IDpcbiAgICAgICAgTk9fQ0hBTkdFO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIGludGVycG9sYXRpb24gYmluZGluZyB3aXRoIDggZXhwcmVzc2lvbnMuXG4gKi9cbmZ1bmN0aW9uIGludGVycG9sYXRpb244KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIGk0LCB2NSwgaTUsIHY2LCBpNiwgdjcsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IGdldEJpbmRpbmdJbmRleCgpO1xuICAgIGxldCBkaWZmZXJlbnQgPSBiaW5kaW5nVXBkYXRlZDQobFZpZXcsIGJpbmRpbmdJbmRleCwgdjAsIHYxLCB2MiwgdjMpO1xuICAgIGRpZmZlcmVudCA9IGJpbmRpbmdVcGRhdGVkNChsVmlldywgYmluZGluZ0luZGV4ICsgNCwgdjQsIHY1LCB2NiwgdjcpIHx8IGRpZmZlcmVudDtcbiAgICBpbmNyZW1lbnRCaW5kaW5nSW5kZXgoOCk7XG4gICAgcmV0dXJuIGRpZmZlcmVudCA/IHByZWZpeCArIHJlbmRlclN0cmluZ2lmeSh2MCkgKyBpMCArIHJlbmRlclN0cmluZ2lmeSh2MSkgKyBpMSArXG4gICAgICAgIHJlbmRlclN0cmluZ2lmeSh2MikgKyBpMiArIHJlbmRlclN0cmluZ2lmeSh2MykgKyBpMyArIHJlbmRlclN0cmluZ2lmeSh2NCkgKyBpNCArXG4gICAgICAgIHJlbmRlclN0cmluZ2lmeSh2NSkgKyBpNSArIHJlbmRlclN0cmluZ2lmeSh2NikgKyBpNiArIHJlbmRlclN0cmluZ2lmeSh2NykgKyBzdWZmaXggOlxuICAgICAgICBOT19DSEFOR0U7XG59XG5cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlIG9uIGFuIGVsZW1lbnQgd2l0aCBzaW5nbGUgYm91bmQgdmFsdWUgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDEgaW50ZXJwb2xhdGVkIHZhbHVlIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgYXR0ci50aXRsZT1cInByZWZpeHt7djB9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtWF0dHJpYnV0ZUludGVycG9sYXRlMSgndGl0bGUnLCAncHJlZml4JywgdjAsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdHRyTmFtZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIHVwZGF0ZVxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSBzYW5pdGl6ZXIgQW4gb3B0aW9uYWwgc2FuaXRpemVyIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUxKGF0dHJOYW1lLCBwcmVmaXgsIHYwLCBzdWZmaXgsIHNhbml0aXplciwgbmFtZXNwYWNlKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjEobFZpZXcsIHByZWZpeCwgdjAsIHN1ZmZpeCk7XG4gICAgaWYgKGludGVycG9sYXRlZFZhbHVlICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRBdHRyaWJ1dGVJbnRlcm5hbCh0Tm9kZSwgbFZpZXcsIGF0dHJOYW1lLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgc2FuaXRpemVyLCBuYW1lc3BhY2UpO1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIHN0b3JlUHJvcGVydHlCaW5kaW5nTWV0YWRhdGEoZ2V0VFZpZXcoKS5kYXRhLCB0Tm9kZSwgJ2F0dHIuJyArIGF0dHJOYW1lLCBnZXRCaW5kaW5nSW5kZXgoKSAtIDEsIHByZWZpeCwgc3VmZml4KTtcbiAgICB9XG4gICAgcmV0dXJuIMm1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTE7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIGF0dHJpYnV0ZSBvbiBhbiBlbGVtZW50IHdpdGggMiBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDIgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IGF0dHIudGl0bGU9XCJwcmVmaXh7e3YwfX0te3t2MX19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6OlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUyKCd0aXRsZScsICdwcmVmaXgnLCB2MCwgJy0nLCB2MSwgJ3N1ZmZpeCcpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGF0dHJOYW1lIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gdXBkYXRlXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBzYW5pdGl6ZXIgZnVuY3Rpb25cbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTIoYXR0ck5hbWUsIHByZWZpeCwgdjAsIGkwLCB2MSwgc3VmZml4LCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb24yKGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIHN1ZmZpeCk7XG4gICAgaWYgKGludGVycG9sYXRlZFZhbHVlICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRBdHRyaWJ1dGVJbnRlcm5hbCh0Tm9kZSwgbFZpZXcsIGF0dHJOYW1lLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgc2FuaXRpemVyLCBuYW1lc3BhY2UpO1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIHN0b3JlUHJvcGVydHlCaW5kaW5nTWV0YWRhdGEoZ2V0VFZpZXcoKS5kYXRhLCB0Tm9kZSwgJ2F0dHIuJyArIGF0dHJOYW1lLCBnZXRCaW5kaW5nSW5kZXgoKSAtIDIsIHByZWZpeCwgaTAsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUyO1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCB3aXRoIDMgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyAzIGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBhdHRyLnRpdGxlPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczo6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTMoXG4gKiAndGl0bGUnLCAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdHRyTmFtZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIHVwZGF0ZVxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYxIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMSBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYyIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSBzYW5pdGl6ZXIgQW4gb3B0aW9uYWwgc2FuaXRpemVyIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUzKGF0dHJOYW1lLCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2Miwgc3VmZml4LCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb24zKGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2Miwgc3VmZml4KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkVmFsdWUgIT09IE5PX0NIQU5HRSkge1xuICAgICAgICBjb25zdCB0Tm9kZSA9IGdldFNlbGVjdGVkVE5vZGUoKTtcbiAgICAgICAgZWxlbWVudEF0dHJpYnV0ZUludGVybmFsKHROb2RlLCBsVmlldywgYXR0ck5hbWUsIGludGVycG9sYXRlZFZhbHVlLCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSk7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgc3RvcmVQcm9wZXJ0eUJpbmRpbmdNZXRhZGF0YShnZXRUVmlldygpLmRhdGEsIHROb2RlLCAnYXR0ci4nICsgYXR0ck5hbWUsIGdldEJpbmRpbmdJbmRleCgpIC0gMywgcHJlZml4LCBpMCwgaTEsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUzO1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCB3aXRoIDQgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA0IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBhdHRyLnRpdGxlPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6OlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU0KFxuICogJ3RpdGxlJywgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXR0ck5hbWUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byB1cGRhdGVcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gc2FuaXRpemVyIEFuIG9wdGlvbmFsIHNhbml0aXplciBmdW5jdGlvblxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWF0dHJpYnV0ZUludGVycG9sYXRlNChhdHRyTmFtZSwgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2Mywgc3VmZml4LCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb240KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBzdWZmaXgpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRWYWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIGNvbnN0IHROb2RlID0gZ2V0U2VsZWN0ZWRUTm9kZSgpO1xuICAgICAgICBlbGVtZW50QXR0cmlidXRlSW50ZXJuYWwodE5vZGUsIGxWaWV3LCBhdHRyTmFtZSwgaW50ZXJwb2xhdGVkVmFsdWUsIHNhbml0aXplciwgbmFtZXNwYWNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKGdldFRWaWV3KCkuZGF0YSwgdE5vZGUsICdhdHRyLicgKyBhdHRyTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSA0LCBwcmVmaXgsIGkwLCBpMSwgaTIsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU0O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCB3aXRoIDUgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA1IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBhdHRyLnRpdGxlPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtWF0dHJpYnV0ZUludGVycG9sYXRlNShcbiAqICd0aXRsZScsICdwcmVmaXgnLCB2MCwgJy0nLCB2MSwgJy0nLCB2MiwgJy0nLCB2MywgJy0nLCB2NCwgJ3N1ZmZpeCcpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGF0dHJOYW1lIFRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgdG8gdXBkYXRlXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkzIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjQgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBzYW5pdGl6ZXIgZnVuY3Rpb25cbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTUoYXR0ck5hbWUsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgc3VmZml4LCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb241KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIHN1ZmZpeCk7XG4gICAgaWYgKGludGVycG9sYXRlZFZhbHVlICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRBdHRyaWJ1dGVJbnRlcm5hbCh0Tm9kZSwgbFZpZXcsIGF0dHJOYW1lLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgc2FuaXRpemVyLCBuYW1lc3BhY2UpO1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIHN0b3JlUHJvcGVydHlCaW5kaW5nTWV0YWRhdGEoZ2V0VFZpZXcoKS5kYXRhLCB0Tm9kZSwgJ2F0dHIuJyArIGF0dHJOYW1lLCBnZXRCaW5kaW5nSW5kZXgoKSAtIDUsIHByZWZpeCwgaTAsIGkxLCBpMiwgaTMsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU1O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCB3aXRoIDYgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA2IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBhdHRyLnRpdGxlPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczo6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTYoXG4gKiAgICAndGl0bGUnLCAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdHRyTmFtZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIHVwZGF0ZVxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYxIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMSBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYyIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMiBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYzIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMyBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY0IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpNCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY1IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSBzYW5pdGl6ZXIgQW4gb3B0aW9uYWwgc2FuaXRpemVyIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU2KGF0dHJOYW1lLCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIGk0LCB2NSwgc3VmZml4LCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb242KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIGk0LCB2NSwgc3VmZml4KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkVmFsdWUgIT09IE5PX0NIQU5HRSkge1xuICAgICAgICBjb25zdCB0Tm9kZSA9IGdldFNlbGVjdGVkVE5vZGUoKTtcbiAgICAgICAgZWxlbWVudEF0dHJpYnV0ZUludGVybmFsKHROb2RlLCBsVmlldywgYXR0ck5hbWUsIGludGVycG9sYXRlZFZhbHVlLCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSk7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgc3RvcmVQcm9wZXJ0eUJpbmRpbmdNZXRhZGF0YShnZXRUVmlldygpLmRhdGEsIHROb2RlLCAnYXR0ci4nICsgYXR0ck5hbWUsIGdldEJpbmRpbmdJbmRleCgpIC0gNiwgcHJlZml4LCBpMCwgaTEsIGkyLCBpMywgaTQsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU2O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCB3aXRoIDcgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA3IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBhdHRyLnRpdGxlPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX0te3t2Nn19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6OlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU3KFxuICogICAgJ3RpdGxlJywgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnLScsIHY1LCAnLScsIHY2LCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXR0ck5hbWUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byB1cGRhdGVcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTUgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gc2FuaXRpemVyIEFuIG9wdGlvbmFsIHNhbml0aXplciBmdW5jdGlvblxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWF0dHJpYnV0ZUludGVycG9sYXRlNyhhdHRyTmFtZSwgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2Niwgc3VmZml4LCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb243KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIGk0LCB2NSwgaTUsIHY2LCBzdWZmaXgpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRWYWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIGNvbnN0IHROb2RlID0gZ2V0U2VsZWN0ZWRUTm9kZSgpO1xuICAgICAgICBlbGVtZW50QXR0cmlidXRlSW50ZXJuYWwodE5vZGUsIGxWaWV3LCBhdHRyTmFtZSwgaW50ZXJwb2xhdGVkVmFsdWUsIHNhbml0aXplciwgbmFtZXNwYWNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKGdldFRWaWV3KCkuZGF0YSwgdE5vZGUsICdhdHRyLicgKyBhdHRyTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSA3LCBwcmVmaXgsIGkwLCBpMSwgaTIsIGkzLCBpNCwgaTUsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU3O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCB3aXRoIDggYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA4IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBhdHRyLnRpdGxlPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX0te3t2Nn19LXt7djd9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtWF0dHJpYnV0ZUludGVycG9sYXRlOChcbiAqICAndGl0bGUnLCAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICctJywgdjYsICctJywgdjcsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBhdHRyTmFtZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlIHRvIHVwZGF0ZVxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYxIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMSBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYyIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMiBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYzIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMyBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY0IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpNCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY1IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpNSBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY2IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpNiBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY3IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSBzYW5pdGl6ZXIgQW4gb3B0aW9uYWwgc2FuaXRpemVyIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU4KGF0dHJOYW1lLCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIGk0LCB2NSwgaTUsIHY2LCBpNiwgdjcsIHN1ZmZpeCwgc2FuaXRpemVyLCBuYW1lc3BhY2UpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uOChsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2NiwgaTYsIHY3LCBzdWZmaXgpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRWYWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIGNvbnN0IHROb2RlID0gZ2V0U2VsZWN0ZWRUTm9kZSgpO1xuICAgICAgICBlbGVtZW50QXR0cmlidXRlSW50ZXJuYWwodE5vZGUsIGxWaWV3LCBhdHRyTmFtZSwgaW50ZXJwb2xhdGVkVmFsdWUsIHNhbml0aXplciwgbmFtZXNwYWNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKGdldFRWaWV3KCkuZGF0YSwgdE5vZGUsICdhdHRyLicgKyBhdHRyTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSA4LCBwcmVmaXgsIGkwLCBpMSwgaTIsIGkzLCBpNCwgaTUsIGk2LCBzdWZmaXgpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtWF0dHJpYnV0ZUludGVycG9sYXRlODtcbn1cbi8qKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUgb24gYW4gZWxlbWVudCB3aXRoIDkgb3IgbW9yZSBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgbnVtYmVyIG9mIGludGVycG9sYXRlZCB2YWx1ZXMgZXhjZWVkcyA4LlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXZcbiAqICB0aXRsZT1cInByZWZpeHt7djB9fS17e3YxfX0te3t2Mn19LXt7djN9fS17e3Y0fX0te3t2NX19LXt7djZ9fS17e3Y3fX0te3t2OH19LXt7djl9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtWF0dHJpYnV0ZUludGVycG9sYXRlVihcbiAqICAndGl0bGUnLCBbJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnLScsIHY1LCAnLScsIHY2LCAnLScsIHY3LCAnLScsIHY5LFxuICogICdzdWZmaXgnXSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYXR0ck5hbWUgVGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byB1cGRhdGUuXG4gKiBAcGFyYW0gdmFsdWVzIFRoZSBjb2xsZWN0aW9uIG9mIHZhbHVlcyBhbmQgdGhlIHN0cmluZ3MgaW4tYmV0d2VlbiB0aG9zZSB2YWx1ZXMsIGJlZ2lubmluZyB3aXRoXG4gKiBhIHN0cmluZyBwcmVmaXggYW5kIGVuZGluZyB3aXRoIGEgc3RyaW5nIHN1ZmZpeC5cbiAqIChlLmcuIGBbJ3ByZWZpeCcsIHZhbHVlMCwgJy0nLCB2YWx1ZTEsICctJywgdmFsdWUyLCAuLi4sIHZhbHVlOTksICdzdWZmaXgnXWApXG4gKiBAcGFyYW0gc2FuaXRpemVyIEFuIG9wdGlvbmFsIHNhbml0aXplciBmdW5jdGlvblxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWF0dHJpYnV0ZUludGVycG9sYXRlVihhdHRyTmFtZSwgdmFsdWVzLCBzYW5pdGl6ZXIsIG5hbWVzcGFjZSkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBpbnRlcnBvbGF0aW9uVihsVmlldywgdmFsdWVzKTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRBdHRyaWJ1dGVJbnRlcm5hbCh0Tm9kZSwgbFZpZXcsIGF0dHJOYW1lLCBpbnRlcnBvbGF0ZWQsIHNhbml0aXplciwgbmFtZXNwYWNlKTtcbiAgICAgICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGlvbkluQmV0d2VlbiA9IFt2YWx1ZXNbMF1dOyAvLyBwcmVmaXhcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAyOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGlvbkluQmV0d2Vlbi5wdXNoKHZhbHVlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKGdldFRWaWV3KCkuZGF0YSwgdE5vZGUsICdhdHRyLicgKyBhdHRyTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSBpbnRlcnBvbGF0aW9uSW5CZXR3ZWVuLmxlbmd0aCArIDEsIC4uLmludGVycG9sYXRpb25JbkJldHdlZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGVWO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIHRlbXBsYXRlRmlyc3RDcmVhdGVQYXNzKGluZGV4LCB0VmlldywgbFZpZXcsIHRlbXBsYXRlRm4sIGRlY2xzLCB2YXJzLCB0YWdOYW1lLCBhdHRyc0luZGV4LCBsb2NhbFJlZnNJbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRGaXJzdENyZWF0ZVBhc3ModFZpZXcpO1xuICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUuZmlyc3RDcmVhdGVQYXNzKys7XG4gICAgY29uc3QgdFZpZXdDb25zdHMgPSB0Vmlldy5jb25zdHM7XG4gICAgLy8gVE9ETyhwayk6IHJlZmFjdG9yIGdldE9yQ3JlYXRlVE5vZGUgdG8gaGF2ZSB0aGUgXCJjcmVhdGVcIiBvbmx5IHZlcnNpb25cbiAgICBjb25zdCB0Tm9kZSA9IGdldE9yQ3JlYXRlVE5vZGUodFZpZXcsIGluZGV4LCA0IC8qIENvbnRhaW5lciAqLywgdGFnTmFtZSB8fCBudWxsLCBnZXRDb25zdGFudCh0Vmlld0NvbnN0cywgYXR0cnNJbmRleCkpO1xuICAgIHJlc29sdmVEaXJlY3RpdmVzKHRWaWV3LCBsVmlldywgdE5vZGUsIGdldENvbnN0YW50KHRWaWV3Q29uc3RzLCBsb2NhbFJlZnNJbmRleCkpO1xuICAgIHJlZ2lzdGVyUG9zdE9yZGVySG9va3ModFZpZXcsIHROb2RlKTtcbiAgICBjb25zdCBlbWJlZGRlZFRWaWV3ID0gdE5vZGUudFZpZXdzID0gY3JlYXRlVFZpZXcoMiAvKiBFbWJlZGRlZCAqLywgdE5vZGUsIHRlbXBsYXRlRm4sIGRlY2xzLCB2YXJzLCB0Vmlldy5kaXJlY3RpdmVSZWdpc3RyeSwgdFZpZXcucGlwZVJlZ2lzdHJ5LCBudWxsLCB0Vmlldy5zY2hlbWFzLCB0Vmlld0NvbnN0cyk7XG4gICAgaWYgKHRWaWV3LnF1ZXJpZXMgIT09IG51bGwpIHtcbiAgICAgICAgdFZpZXcucXVlcmllcy50ZW1wbGF0ZSh0VmlldywgdE5vZGUpO1xuICAgICAgICBlbWJlZGRlZFRWaWV3LnF1ZXJpZXMgPSB0Vmlldy5xdWVyaWVzLmVtYmVkZGVkVFZpZXcodE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdE5vZGU7XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gTENvbnRhaW5lciBmb3IgYW4gbmctdGVtcGxhdGUgKGR5bmFtaWNhbGx5LWluc2VydGVkIHZpZXcpLCBlLmcuXG4gKlxuICogPG5nLXRlbXBsYXRlICNmb28+XG4gKiAgICA8ZGl2PjwvZGl2PlxuICogPC9uZy10ZW1wbGF0ZT5cbiAqXG4gKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBjb250YWluZXIgaW4gdGhlIGRhdGEgYXJyYXlcbiAqIEBwYXJhbSB0ZW1wbGF0ZUZuIElubGluZSB0ZW1wbGF0ZVxuICogQHBhcmFtIGRlY2xzIFRoZSBudW1iZXIgb2Ygbm9kZXMsIGxvY2FsIHJlZnMsIGFuZCBwaXBlcyBmb3IgdGhpcyB0ZW1wbGF0ZVxuICogQHBhcmFtIHZhcnMgVGhlIG51bWJlciBvZiBiaW5kaW5ncyBmb3IgdGhpcyB0ZW1wbGF0ZVxuICogQHBhcmFtIHRhZ05hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnRhaW5lciBlbGVtZW50LCBpZiBhcHBsaWNhYmxlXG4gKiBAcGFyYW0gYXR0cnNJbmRleCBJbmRleCBvZiB0ZW1wbGF0ZSBhdHRyaWJ1dGVzIGluIHRoZSBgY29uc3RzYCBhcnJheS5cbiAqIEBwYXJhbSBsb2NhbFJlZnMgSW5kZXggb2YgdGhlIGxvY2FsIHJlZmVyZW5jZXMgaW4gdGhlIGBjb25zdHNgIGFycmF5LlxuICogQHBhcmFtIGxvY2FsUmVmRXh0cmFjdG9yIEEgZnVuY3Rpb24gd2hpY2ggZXh0cmFjdHMgbG9jYWwtcmVmcyB2YWx1ZXMgZnJvbSB0aGUgdGVtcGxhdGUuXG4gKiAgICAgICAgRGVmYXVsdHMgdG8gdGhlIGN1cnJlbnQgZWxlbWVudCBhc3NvY2lhdGVkIHdpdGggdGhlIGxvY2FsLXJlZi5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1dGVtcGxhdGUoaW5kZXgsIHRlbXBsYXRlRm4sIGRlY2xzLCB2YXJzLCB0YWdOYW1lLCBhdHRyc0luZGV4LCBsb2NhbFJlZnNJbmRleCwgbG9jYWxSZWZFeHRyYWN0b3IpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgIGNvbnN0IGFkanVzdGVkSW5kZXggPSBpbmRleCArIEhFQURFUl9PRkZTRVQ7XG4gICAgY29uc3QgdE5vZGUgPSB0Vmlldy5maXJzdENyZWF0ZVBhc3MgPyB0ZW1wbGF0ZUZpcnN0Q3JlYXRlUGFzcyhhZGp1c3RlZEluZGV4LCB0VmlldywgbFZpZXcsIHRlbXBsYXRlRm4sIGRlY2xzLCB2YXJzLCB0YWdOYW1lLCBhdHRyc0luZGV4LCBsb2NhbFJlZnNJbmRleCkgOlxuICAgICAgICB0Vmlldy5kYXRhW2FkanVzdGVkSW5kZXhdO1xuICAgIHNldEN1cnJlbnRUTm9kZSh0Tm9kZSwgZmFsc2UpO1xuICAgIGNvbnN0IGNvbW1lbnQgPSBsVmlld1tSRU5ERVJFUl0uY3JlYXRlQ29tbWVudChuZ0Rldk1vZGUgPyAnY29udGFpbmVyJyA6ICcnKTtcbiAgICBhcHBlbmRDaGlsZCh0VmlldywgbFZpZXcsIGNvbW1lbnQsIHROb2RlKTtcbiAgICBhdHRhY2hQYXRjaERhdGEoY29tbWVudCwgbFZpZXcpO1xuICAgIGFkZFRvVmlld1RyZWUobFZpZXcsIGxWaWV3W2FkanVzdGVkSW5kZXhdID0gY3JlYXRlTENvbnRhaW5lcihjb21tZW50LCBsVmlldywgY29tbWVudCwgdE5vZGUpKTtcbiAgICBpZiAoaXNEaXJlY3RpdmVIb3N0KHROb2RlKSkge1xuICAgICAgICBjcmVhdGVEaXJlY3RpdmVzSW5zdGFuY2VzKHRWaWV3LCBsVmlldywgdE5vZGUpO1xuICAgIH1cbiAgICBpZiAobG9jYWxSZWZzSW5kZXggIT0gbnVsbCkge1xuICAgICAgICBzYXZlUmVzb2x2ZWRMb2NhbHNJbkRhdGEobFZpZXcsIHROb2RlLCBsb2NhbFJlZkV4dHJhY3Rvcik7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKiBTdG9yZSBhIHZhbHVlIGluIHRoZSBgZGF0YWAgYXQgYSBnaXZlbiBgaW5kZXhgLiAqL1xuZnVuY3Rpb24gc3RvcmUodFZpZXcsIGxWaWV3LCBpbmRleCwgdmFsdWUpIHtcbiAgICAvLyBXZSBkb24ndCBzdG9yZSBhbnkgc3RhdGljIGRhdGEgZm9yIGxvY2FsIHZhcmlhYmxlcywgc28gdGhlIGZpcnN0IHRpbWVcbiAgICAvLyB3ZSBzZWUgdGhlIHRlbXBsYXRlLCB3ZSBzaG91bGQgc3RvcmUgYXMgbnVsbCB0byBhdm9pZCBhIHNwYXJzZSBhcnJheVxuICAgIGlmIChpbmRleCA+PSB0Vmlldy5kYXRhLmxlbmd0aCkge1xuICAgICAgICB0Vmlldy5kYXRhW2luZGV4XSA9IG51bGw7XG4gICAgICAgIHRWaWV3LmJsdWVwcmludFtpbmRleF0gPSBudWxsO1xuICAgIH1cbiAgICBsVmlld1tpbmRleF0gPSB2YWx1ZTtcbn1cbi8qKlxuICogUmV0cmlldmVzIGEgbG9jYWwgcmVmZXJlbmNlIGZyb20gdGhlIGN1cnJlbnQgY29udGV4dFZpZXdEYXRhLlxuICpcbiAqIElmIHRoZSByZWZlcmVuY2UgdG8gcmV0cmlldmUgaXMgaW4gYSBwYXJlbnQgdmlldywgdGhpcyBpbnN0cnVjdGlvbiBpcyB1c2VkIGluIGNvbmp1bmN0aW9uXG4gKiB3aXRoIGEgbmV4dENvbnRleHQoKSBjYWxsLCB3aGljaCB3YWxrcyB1cCB0aGUgdHJlZSBhbmQgdXBkYXRlcyB0aGUgY29udGV4dFZpZXdEYXRhIGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIGxvY2FsIHJlZiBpbiBjb250ZXh0Vmlld0RhdGEuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXJlZmVyZW5jZShpbmRleCkge1xuICAgIGNvbnN0IGNvbnRleHRMVmlldyA9IGdldENvbnRleHRMVmlldygpO1xuICAgIHJldHVybiBsb2FkKGNvbnRleHRMVmlldywgSEVBREVSX09GRlNFVCArIGluZGV4KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEEgbWFwcGluZyBvZiB0aGUgQGFuZ3VsYXIvY29yZSBBUEkgc3VyZmFjZSB1c2VkIGluIGdlbmVyYXRlZCBleHByZXNzaW9ucyB0byB0aGUgYWN0dWFsIHN5bWJvbHMuXG4gKlxuICogVGhpcyBzaG91bGQgYmUga2VwdCB1cCB0byBkYXRlIHdpdGggdGhlIHB1YmxpYyBleHBvcnRzIG9mIEBhbmd1bGFyL2NvcmUuXG4gKi9cbmNvbnN0IGFuZ3VsYXJDb3JlRGlFbnYgPSB7XG4gICAgJ8m1ybVkZWZpbmVJbmplY3RhYmxlJzogybXJtWRlZmluZUluamVjdGFibGUsXG4gICAgJ8m1ybVkZWZpbmVJbmplY3Rvcic6IMm1ybVkZWZpbmVJbmplY3RvcixcbiAgICAnybXJtWluamVjdCc6IMm1ybVpbmplY3QsXG4gICAgJ8m1ybVpbnZhbGlkRmFjdG9yeURlcCc6IMm1ybVpbnZhbGlkRmFjdG9yeURlcCxcbiAgICAncmVzb2x2ZUZvcndhcmRSZWYnOiByZXNvbHZlRm9yd2FyZFJlZixcbn07XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDb21waWxlIGFuIEFuZ3VsYXIgaW5qZWN0YWJsZSBhY2NvcmRpbmcgdG8gaXRzIGBJbmplY3RhYmxlYCBtZXRhZGF0YSwgYW5kIHBhdGNoIHRoZSByZXN1bHRpbmdcbiAqIGluamVjdGFibGUgZGVmIChgybVwcm92YCkgb250byB0aGUgaW5qZWN0YWJsZSB0eXBlLlxuICovXG5mdW5jdGlvbiBjb21waWxlSW5qZWN0YWJsZSh0eXBlLCBtZXRhKSB7XG4gICAgbGV0IG5nSW5qZWN0YWJsZURlZiA9IG51bGw7XG4gICAgbGV0IG5nRmFjdG9yeURlZiA9IG51bGw7XG4gICAgLy8gaWYgTkdfUFJPVl9ERUYgaXMgYWxyZWFkeSBkZWZpbmVkIG9uIHRoaXMgY2xhc3MgdGhlbiBkb24ndCBvdmVyd3JpdGUgaXRcbiAgICBpZiAoIXR5cGUuaGFzT3duUHJvcGVydHkoTkdfUFJPVl9ERUYpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLCBOR19QUk9WX0RFRiwge1xuICAgICAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5nSW5qZWN0YWJsZURlZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHsgdXNhZ2U6IDAgLyogRGVjb3JhdG9yICovLCBraW5kOiAnaW5qZWN0YWJsZScsIHR5cGUgfSk7XG4gICAgICAgICAgICAgICAgICAgIG5nSW5qZWN0YWJsZURlZiA9IGNvbXBpbGVyLmNvbXBpbGVJbmplY3RhYmxlKGFuZ3VsYXJDb3JlRGlFbnYsIGBuZzovLy8ke3R5cGUubmFtZX0vybVwcm92LmpzYCwgZ2V0SW5qZWN0YWJsZU1ldGFkYXRhKHR5cGUsIG1ldGEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nSW5qZWN0YWJsZURlZjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBpZiBOR19GQUNUT1JZX0RFRiBpcyBhbHJlYWR5IGRlZmluZWQgb24gdGhpcyBjbGFzcyB0aGVuIGRvbid0IG92ZXJ3cml0ZSBpdFxuICAgIGlmICghdHlwZS5oYXNPd25Qcm9wZXJ0eShOR19GQUNUT1JZX0RFRikpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHR5cGUsIE5HX0ZBQ1RPUllfREVGLCB7XG4gICAgICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobmdGYWN0b3J5RGVmID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBpbGVyID0gZ2V0Q29tcGlsZXJGYWNhZGUoeyB1c2FnZTogMCAvKiBEZWNvcmF0b3IgKi8sIGtpbmQ6ICdpbmplY3RhYmxlJywgdHlwZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgbmdGYWN0b3J5RGVmID0gY29tcGlsZXIuY29tcGlsZUZhY3RvcnkoYW5ndWxhckNvcmVEaUVudiwgYG5nOi8vLyR7dHlwZS5uYW1lfS/JtWZhYy5qc2AsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHR5cGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRDb3VudDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlcHM6IHJlZmxlY3REZXBlbmRlbmNpZXModHlwZSksXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IGNvbXBpbGVyLkZhY3RvcnlUYXJnZXQuSW5qZWN0YWJsZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5nRmFjdG9yeURlZjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBMZWF2ZSB0aGlzIGNvbmZpZ3VyYWJsZSBzbyB0aGF0IHRoZSBmYWN0b3JpZXMgZnJvbSBkaXJlY3RpdmVzIG9yIHBpcGVzIGNhbiB0YWtlIHByZWNlZGVuY2UuXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxufVxuY29uc3QgVVNFX1ZBTFVFID0gZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSh7IHByb3ZpZGU6IFN0cmluZywgdXNlVmFsdWU6IGdldENsb3N1cmVTYWZlUHJvcGVydHkgfSk7XG5mdW5jdGlvbiBpc1VzZUNsYXNzUHJvdmlkZXIobWV0YSkge1xuICAgIHJldHVybiBtZXRhLnVzZUNsYXNzICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpc1VzZVZhbHVlUHJvdmlkZXIobWV0YSkge1xuICAgIHJldHVybiBVU0VfVkFMVUUgaW4gbWV0YTtcbn1cbmZ1bmN0aW9uIGlzVXNlRmFjdG9yeVByb3ZpZGVyKG1ldGEpIHtcbiAgICByZXR1cm4gbWV0YS51c2VGYWN0b3J5ICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpc1VzZUV4aXN0aW5nUHJvdmlkZXIobWV0YSkge1xuICAgIHJldHVybiBtZXRhLnVzZUV4aXN0aW5nICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRJbmplY3RhYmxlTWV0YWRhdGEodHlwZSwgc3JjTWV0YSkge1xuICAgIC8vIEFsbG93IHRoZSBjb21waWxhdGlvbiBvZiBhIGNsYXNzIHdpdGggYSBgQEluamVjdGFibGUoKWAgZGVjb3JhdG9yIHdpdGhvdXQgcGFyYW1ldGVyc1xuICAgIGNvbnN0IG1ldGEgPSBzcmNNZXRhIHx8IHsgcHJvdmlkZWRJbjogbnVsbCB9O1xuICAgIGNvbnN0IGNvbXBpbGVyTWV0YSA9IHtcbiAgICAgICAgbmFtZTogdHlwZS5uYW1lLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICB0eXBlQXJndW1lbnRDb3VudDogMCxcbiAgICAgICAgcHJvdmlkZWRJbjogbWV0YS5wcm92aWRlZEluLFxuICAgIH07XG4gICAgaWYgKChpc1VzZUNsYXNzUHJvdmlkZXIobWV0YSkgfHwgaXNVc2VGYWN0b3J5UHJvdmlkZXIobWV0YSkpICYmIG1ldGEuZGVwcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbXBpbGVyTWV0YS5kZXBzID0gY29udmVydERlcGVuZGVuY2llcyhtZXRhLmRlcHMpO1xuICAgIH1cbiAgICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIHVzZXIgZXhwbGljaXRseSBwcm92aWRlZCBhIGB1c2VYeHh4YCBwcm9wZXJ0eS5cbiAgICBpZiAoaXNVc2VDbGFzc1Byb3ZpZGVyKG1ldGEpKSB7XG4gICAgICAgIGNvbXBpbGVyTWV0YS51c2VDbGFzcyA9IG1ldGEudXNlQ2xhc3M7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzVXNlVmFsdWVQcm92aWRlcihtZXRhKSkge1xuICAgICAgICBjb21waWxlck1ldGEudXNlVmFsdWUgPSBtZXRhLnVzZVZhbHVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc1VzZUZhY3RvcnlQcm92aWRlcihtZXRhKSkge1xuICAgICAgICBjb21waWxlck1ldGEudXNlRmFjdG9yeSA9IG1ldGEudXNlRmFjdG9yeTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaXNVc2VFeGlzdGluZ1Byb3ZpZGVyKG1ldGEpKSB7XG4gICAgICAgIGNvbXBpbGVyTWV0YS51c2VFeGlzdGluZyA9IG1ldGEudXNlRXhpc3Rpbmc7XG4gICAgfVxuICAgIHJldHVybiBjb21waWxlck1ldGE7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBJbmplY3RhYmxlIGRlY29yYXRvciBhbmQgbWV0YWRhdGEuXG4gKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgSW5qZWN0YWJsZSA9IG1ha2VEZWNvcmF0b3IoJ0luamVjdGFibGUnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAodHlwZSwgbWV0YSkgPT4gY29tcGlsZUluamVjdGFibGUodHlwZSwgbWV0YSkpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGZpbmRGaXJzdENsb3NlZEN5Y2xlKGtleXMpIHtcbiAgICBjb25zdCByZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHJlcy5pbmRleE9mKGtleXNbaV0pID4gLTEpIHtcbiAgICAgICAgICAgIHJlcy5wdXNoKGtleXNbaV0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChrZXlzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdFJlc29sdmluZ1BhdGgoa2V5cykge1xuICAgIGlmIChrZXlzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29uc3QgcmV2ZXJzZWQgPSBmaW5kRmlyc3RDbG9zZWRDeWNsZShrZXlzLnNsaWNlKCkucmV2ZXJzZSgpKTtcbiAgICAgICAgY29uc3QgdG9rZW5TdHJzID0gcmV2ZXJzZWQubWFwKGsgPT4gc3RyaW5naWZ5KGsudG9rZW4pKTtcbiAgICAgICAgcmV0dXJuICcgKCcgKyB0b2tlblN0cnMuam9pbignIC0+ICcpICsgJyknO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5mdW5jdGlvbiBpbmplY3Rpb25FcnJvcihpbmplY3Rvciwga2V5LCBjb25zdHJ1Y3RSZXNvbHZpbmdNZXNzYWdlLCBvcmlnaW5hbEVycm9yKSB7XG4gICAgY29uc3Qga2V5cyA9IFtrZXldO1xuICAgIGNvbnN0IGVyck1zZyA9IGNvbnN0cnVjdFJlc29sdmluZ01lc3NhZ2Uoa2V5cyk7XG4gICAgY29uc3QgZXJyb3IgPSAob3JpZ2luYWxFcnJvciA/IHdyYXBwZWRFcnJvcihlcnJNc2csIG9yaWdpbmFsRXJyb3IpIDogRXJyb3IoZXJyTXNnKSk7XG4gICAgZXJyb3IuYWRkS2V5ID0gYWRkS2V5O1xuICAgIGVycm9yLmtleXMgPSBrZXlzO1xuICAgIGVycm9yLmluamVjdG9ycyA9IFtpbmplY3Rvcl07XG4gICAgZXJyb3IuY29uc3RydWN0UmVzb2x2aW5nTWVzc2FnZSA9IGNvbnN0cnVjdFJlc29sdmluZ01lc3NhZ2U7XG4gICAgZXJyb3JbRVJST1JfT1JJR0lOQUxfRVJST1JdID0gb3JpZ2luYWxFcnJvcjtcbiAgICByZXR1cm4gZXJyb3I7XG59XG5mdW5jdGlvbiBhZGRLZXkoaW5qZWN0b3IsIGtleSkge1xuICAgIHRoaXMuaW5qZWN0b3JzLnB1c2goaW5qZWN0b3IpO1xuICAgIHRoaXMua2V5cy5wdXNoKGtleSk7XG4gICAgLy8gTm90ZTogVGhpcyB1cGRhdGVkIG1lc3NhZ2Ugd29uJ3QgYmUgcmVmbGVjdGVkIGluIHRoZSBgLnN0YWNrYCBwcm9wZXJ0eVxuICAgIHRoaXMubWVzc2FnZSA9IHRoaXMuY29uc3RydWN0UmVzb2x2aW5nTWVzc2FnZSh0aGlzLmtleXMpO1xufVxuLyoqXG4gKiBUaHJvd24gd2hlbiB0cnlpbmcgdG8gcmV0cmlldmUgYSBkZXBlbmRlbmN5IGJ5IGtleSBmcm9tIHtAbGluayBJbmplY3Rvcn0sIGJ1dCB0aGVcbiAqIHtAbGluayBJbmplY3Rvcn0gZG9lcyBub3QgaGF2ZSBhIHtAbGluayBQcm92aWRlcn0gZm9yIHRoZSBnaXZlbiBrZXkuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY2xhc3MgQSB7XG4gKiAgIGNvbnN0cnVjdG9yKGI6Qikge31cbiAqIH1cbiAqXG4gKiBleHBlY3QoKCkgPT4gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQV0pKS50b1Rocm93RXJyb3IoKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBub1Byb3ZpZGVyRXJyb3IoaW5qZWN0b3IsIGtleSkge1xuICAgIHJldHVybiBpbmplY3Rpb25FcnJvcihpbmplY3Rvciwga2V5LCBmdW5jdGlvbiAoa2V5cykge1xuICAgICAgICBjb25zdCBmaXJzdCA9IHN0cmluZ2lmeShrZXlzWzBdLnRva2VuKTtcbiAgICAgICAgcmV0dXJuIGBObyBwcm92aWRlciBmb3IgJHtmaXJzdH0hJHtjb25zdHJ1Y3RSZXNvbHZpbmdQYXRoKGtleXMpfWA7XG4gICAgfSk7XG59XG4vKipcbiAqIFRocm93biB3aGVuIGRlcGVuZGVuY2llcyBmb3JtIGEgY3ljbGUuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbXG4gKiAgIHtwcm92aWRlOiBcIm9uZVwiLCB1c2VGYWN0b3J5OiAodHdvKSA9PiBcInR3b1wiLCBkZXBzOiBbW25ldyBJbmplY3QoXCJ0d29cIildXX0sXG4gKiAgIHtwcm92aWRlOiBcInR3b1wiLCB1c2VGYWN0b3J5OiAob25lKSA9PiBcIm9uZVwiLCBkZXBzOiBbW25ldyBJbmplY3QoXCJvbmVcIildXX1cbiAqIF0pO1xuICpcbiAqIGV4cGVjdCgoKSA9PiBpbmplY3Rvci5nZXQoXCJvbmVcIikpLnRvVGhyb3dFcnJvcigpO1xuICogYGBgXG4gKlxuICogUmV0cmlldmluZyBgQWAgb3IgYEJgIHRocm93cyBhIGBDeWNsaWNEZXBlbmRlbmN5RXJyb3JgIGFzIHRoZSBncmFwaCBhYm92ZSBjYW5ub3QgYmUgY29uc3RydWN0ZWQuXG4gKi9cbmZ1bmN0aW9uIGN5Y2xpY0RlcGVuZGVuY3lFcnJvcihpbmplY3Rvciwga2V5KSB7XG4gICAgcmV0dXJuIGluamVjdGlvbkVycm9yKGluamVjdG9yLCBrZXksIGZ1bmN0aW9uIChrZXlzKSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGluc3RhbnRpYXRlIGN5Y2xpYyBkZXBlbmRlbmN5ISR7Y29uc3RydWN0UmVzb2x2aW5nUGF0aChrZXlzKX1gO1xuICAgIH0pO1xufVxuLyoqXG4gKiBUaHJvd24gd2hlbiBhIGNvbnN0cnVjdGluZyB0eXBlIHJldHVybnMgd2l0aCBhbiBFcnJvci5cbiAqXG4gKiBUaGUgYEluc3RhbnRpYXRpb25FcnJvcmAgY2xhc3MgY29udGFpbnMgdGhlIG9yaWdpbmFsIGVycm9yIHBsdXMgdGhlIGRlcGVuZGVuY3kgZ3JhcGggd2hpY2ggY2F1c2VkXG4gKiB0aGlzIG9iamVjdCB0byBiZSBpbnN0YW50aWF0ZWQuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY2xhc3MgQSB7XG4gKiAgIGNvbnN0cnVjdG9yKCkge1xuICogICAgIHRocm93IG5ldyBFcnJvcignbWVzc2FnZScpO1xuICogICB9XG4gKiB9XG4gKlxuICogdmFyIGluamVjdG9yID0gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQV0pO1xuXG4gKiB0cnkge1xuICogICBpbmplY3Rvci5nZXQoQSk7XG4gKiB9IGNhdGNoIChlKSB7XG4gKiAgIGV4cGVjdChlIGluc3RhbmNlb2YgSW5zdGFudGlhdGlvbkVycm9yKS50b0JlKHRydWUpO1xuICogICBleHBlY3QoZS5vcmlnaW5hbEV4Y2VwdGlvbi5tZXNzYWdlKS50b0VxdWFsKFwibWVzc2FnZVwiKTtcbiAqICAgZXhwZWN0KGUub3JpZ2luYWxTdGFjaykudG9CZURlZmluZWQoKTtcbiAqIH1cbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0YW50aWF0aW9uRXJyb3IoaW5qZWN0b3IsIG9yaWdpbmFsRXhjZXB0aW9uLCBvcmlnaW5hbFN0YWNrLCBrZXkpIHtcbiAgICByZXR1cm4gaW5qZWN0aW9uRXJyb3IoaW5qZWN0b3IsIGtleSwgZnVuY3Rpb24gKGtleXMpIHtcbiAgICAgICAgY29uc3QgZmlyc3QgPSBzdHJpbmdpZnkoa2V5c1swXS50b2tlbik7XG4gICAgICAgIHJldHVybiBgJHtvcmlnaW5hbEV4Y2VwdGlvbi5tZXNzYWdlfTogRXJyb3IgZHVyaW5nIGluc3RhbnRpYXRpb24gb2YgJHtmaXJzdH0hJHtjb25zdHJ1Y3RSZXNvbHZpbmdQYXRoKGtleXMpfS5gO1xuICAgIH0sIG9yaWdpbmFsRXhjZXB0aW9uKTtcbn1cbi8qKlxuICogVGhyb3duIHdoZW4gYW4gb2JqZWN0IG90aGVyIHRoZW4ge0BsaW5rIFByb3ZpZGVyfSAob3IgYFR5cGVgKSBpcyBwYXNzZWQgdG8ge0BsaW5rIEluamVjdG9yfVxuICogY3JlYXRpb24uXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogZXhwZWN0KCgpID0+IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW1wibm90IGEgdHlwZVwiXSkpLnRvVGhyb3dFcnJvcigpO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGludmFsaWRQcm92aWRlckVycm9yKHByb3ZpZGVyKSB7XG4gICAgcmV0dXJuIEVycm9yKGBJbnZhbGlkIHByb3ZpZGVyIC0gb25seSBpbnN0YW5jZXMgb2YgUHJvdmlkZXIgYW5kIFR5cGUgYXJlIGFsbG93ZWQsIGdvdDogJHtwcm92aWRlcn1gKTtcbn1cbi8qKlxuICogVGhyb3duIHdoZW4gdGhlIGNsYXNzIGhhcyBubyBhbm5vdGF0aW9uIGluZm9ybWF0aW9uLlxuICpcbiAqIExhY2sgb2YgYW5ub3RhdGlvbiBpbmZvcm1hdGlvbiBwcmV2ZW50cyB0aGUge0BsaW5rIEluamVjdG9yfSBmcm9tIGRldGVybWluaW5nIHdoaWNoIGRlcGVuZGVuY2llc1xuICogbmVlZCB0byBiZSBpbmplY3RlZCBpbnRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjbGFzcyBBIHtcbiAqICAgY29uc3RydWN0b3IoYikge31cbiAqIH1cbiAqXG4gKiBleHBlY3QoKCkgPT4gSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQV0pKS50b1Rocm93RXJyb3IoKTtcbiAqIGBgYFxuICpcbiAqIFRoaXMgZXJyb3IgaXMgYWxzbyB0aHJvd24gd2hlbiB0aGUgY2xhc3Mgbm90IG1hcmtlZCB3aXRoIHtAbGluayBJbmplY3RhYmxlfSBoYXMgcGFyYW1ldGVyIHR5cGVzLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGNsYXNzIEIge31cbiAqXG4gKiBjbGFzcyBBIHtcbiAqICAgY29uc3RydWN0b3IoYjpCKSB7fSAvLyBubyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcGFyYW1ldGVyIHR5cGVzIG9mIEEgaXMgYXZhaWxhYmxlIGF0IHJ1bnRpbWUuXG4gKiB9XG4gKlxuICogZXhwZWN0KCgpID0+IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0EsQl0pKS50b1Rocm93RXJyb3IoKTtcbiAqIGBgYFxuICpcbiAqL1xuZnVuY3Rpb24gbm9Bbm5vdGF0aW9uRXJyb3IodHlwZU9yRnVuYywgcGFyYW1zKSB7XG4gICAgY29uc3Qgc2lnbmF0dXJlID0gW107XG4gICAgZm9yIChsZXQgaSA9IDAsIGlpID0gcGFyYW1zLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgY29uc3QgcGFyYW1ldGVyID0gcGFyYW1zW2ldO1xuICAgICAgICBpZiAoIXBhcmFtZXRlciB8fCBwYXJhbWV0ZXIubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHNpZ25hdHVyZS5wdXNoKCc/Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzaWduYXR1cmUucHVzaChwYXJhbWV0ZXIubWFwKHN0cmluZ2lmeSkuam9pbignICcpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gRXJyb3IoJ0Nhbm5vdCByZXNvbHZlIGFsbCBwYXJhbWV0ZXJzIGZvciBcXCcnICsgc3RyaW5naWZ5KHR5cGVPckZ1bmMpICsgJ1xcJygnICtcbiAgICAgICAgc2lnbmF0dXJlLmpvaW4oJywgJykgKyAnKS4gJyArXG4gICAgICAgICdNYWtlIHN1cmUgdGhhdCBhbGwgdGhlIHBhcmFtZXRlcnMgYXJlIGRlY29yYXRlZCB3aXRoIEluamVjdCBvciBoYXZlIHZhbGlkIHR5cGUgYW5ub3RhdGlvbnMgYW5kIHRoYXQgXFwnJyArXG4gICAgICAgIHN0cmluZ2lmeSh0eXBlT3JGdW5jKSArICdcXCcgaXMgZGVjb3JhdGVkIHdpdGggSW5qZWN0YWJsZS4nKTtcbn1cbi8qKlxuICogVGhyb3duIHdoZW4gZ2V0dGluZyBhbiBvYmplY3QgYnkgaW5kZXguXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogY2xhc3MgQSB7fVxuICpcbiAqIHZhciBpbmplY3RvciA9IEluamVjdG9yLnJlc29sdmVBbmRDcmVhdGUoW0FdKTtcbiAqXG4gKiBleHBlY3QoKCkgPT4gaW5qZWN0b3IuZ2V0QXQoMTAwKSkudG9UaHJvd0Vycm9yKCk7XG4gKiBgYGBcbiAqXG4gKi9cbmZ1bmN0aW9uIG91dE9mQm91bmRzRXJyb3IoaW5kZXgpIHtcbiAgICByZXR1cm4gRXJyb3IoYEluZGV4ICR7aW5kZXh9IGlzIG91dC1vZi1ib3VuZHMuYCk7XG59XG4vLyBUT0RPOiBhZGQgYSB3b3JraW5nIGV4YW1wbGUgYWZ0ZXIgYWxwaGEzOCBpcyByZWxlYXNlZFxuLyoqXG4gKiBUaHJvd24gd2hlbiBhIG11bHRpIHByb3ZpZGVyIGFuZCBhIHJlZ3VsYXIgcHJvdmlkZXIgYXJlIGJvdW5kIHRvIHRoZSBzYW1lIHRva2VuLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGV4cGVjdCgoKSA9PiBJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtcbiAqICAgeyBwcm92aWRlOiBcIlN0cmluZ3NcIiwgdXNlVmFsdWU6IFwic3RyaW5nMVwiLCBtdWx0aTogdHJ1ZX0sXG4gKiAgIHsgcHJvdmlkZTogXCJTdHJpbmdzXCIsIHVzZVZhbHVlOiBcInN0cmluZzJcIiwgbXVsdGk6IGZhbHNlfVxuICogXSkpLnRvVGhyb3dFcnJvcigpO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIG1peGluZ011bHRpUHJvdmlkZXJzV2l0aFJlZ3VsYXJQcm92aWRlcnNFcnJvcihwcm92aWRlcjEsIHByb3ZpZGVyMikge1xuICAgIHJldHVybiBFcnJvcihgQ2Fubm90IG1peCBtdWx0aSBwcm92aWRlcnMgYW5kIHJlZ3VsYXIgcHJvdmlkZXJzLCBnb3Q6ICR7cHJvdmlkZXIxfSAke3Byb3ZpZGVyMn1gKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEEgdW5pcXVlIG9iamVjdCB1c2VkIGZvciByZXRyaWV2aW5nIGl0ZW1zIGZyb20gdGhlIHtAbGluayBSZWZsZWN0aXZlSW5qZWN0b3J9LlxuICpcbiAqIEtleXMgaGF2ZTpcbiAqIC0gYSBzeXN0ZW0td2lkZSB1bmlxdWUgYGlkYC5cbiAqIC0gYSBgdG9rZW5gLlxuICpcbiAqIGBLZXlgIGlzIHVzZWQgaW50ZXJuYWxseSBieSB7QGxpbmsgUmVmbGVjdGl2ZUluamVjdG9yfSBiZWNhdXNlIGl0cyBzeXN0ZW0td2lkZSB1bmlxdWUgYGlkYCBhbGxvd3NcbiAqIHRoZVxuICogaW5qZWN0b3IgdG8gc3RvcmUgY3JlYXRlZCBvYmplY3RzIGluIGEgbW9yZSBlZmZpY2llbnQgd2F5LlxuICpcbiAqIGBLZXlgIHNob3VsZCBub3QgYmUgY3JlYXRlZCBkaXJlY3RseS4ge0BsaW5rIFJlZmxlY3RpdmVJbmplY3Rvcn0gY3JlYXRlcyBrZXlzIGF1dG9tYXRpY2FsbHkgd2hlblxuICogcmVzb2x2aW5nXG4gKiBwcm92aWRlcnMuXG4gKlxuICogQGRlcHJlY2F0ZWQgTm8gcmVwbGFjZW1lbnRcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgUmVmbGVjdGl2ZUtleSB7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHRva2VuLCBpZCkge1xuICAgICAgICB0aGlzLnRva2VuID0gdG9rZW47XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgaWYgKCF0b2tlbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUb2tlbiBtdXN0IGJlIGRlZmluZWQhJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaXNwbGF5TmFtZSA9IHN0cmluZ2lmeSh0aGlzLnRva2VuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIGEgYEtleWAgZm9yIGEgdG9rZW4uXG4gICAgICovXG4gICAgc3RhdGljIGdldCh0b2tlbikge1xuICAgICAgICByZXR1cm4gX2dsb2JhbEtleVJlZ2lzdHJ5LmdldChyZXNvbHZlRm9yd2FyZFJlZih0b2tlbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB0aGUgbnVtYmVyIG9mIGtleXMgcmVnaXN0ZXJlZCBpbiB0aGUgc3lzdGVtLlxuICAgICAqL1xuICAgIHN0YXRpYyBnZXQgbnVtYmVyT2ZLZXlzKCkge1xuICAgICAgICByZXR1cm4gX2dsb2JhbEtleVJlZ2lzdHJ5Lm51bWJlck9mS2V5cztcbiAgICB9XG59XG5jbGFzcyBLZXlSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX2FsbEtleXMgPSBuZXcgTWFwKCk7XG4gICAgfVxuICAgIGdldCh0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4gaW5zdGFuY2VvZiBSZWZsZWN0aXZlS2V5KVxuICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICBpZiAodGhpcy5fYWxsS2V5cy5oYXModG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYWxsS2V5cy5nZXQodG9rZW4pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5ld0tleSA9IG5ldyBSZWZsZWN0aXZlS2V5KHRva2VuLCBSZWZsZWN0aXZlS2V5Lm51bWJlck9mS2V5cyk7XG4gICAgICAgIHRoaXMuX2FsbEtleXMuc2V0KHRva2VuLCBuZXdLZXkpO1xuICAgICAgICByZXR1cm4gbmV3S2V5O1xuICAgIH1cbiAgICBnZXQgbnVtYmVyT2ZLZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWxsS2V5cy5zaXplO1xuICAgIH1cbn1cbmNvbnN0IF9nbG9iYWxLZXlSZWdpc3RyeSA9IG5ldyBLZXlSZWdpc3RyeSgpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIHJlZmxlY3Rpb24gZGF0YSBhYm91dCBzeW1ib2xzLiBVc2VkIGludGVybmFsbHkgYnkgQW5ndWxhclxuICogdG8gcG93ZXIgZGVwZW5kZW5jeSBpbmplY3Rpb24gYW5kIGNvbXBpbGF0aW9uLlxuICovXG5jbGFzcyBSZWZsZWN0b3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlZmxlY3Rpb25DYXBhYmlsaXRpZXMpIHtcbiAgICAgICAgdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzID0gcmVmbGVjdGlvbkNhcGFiaWxpdGllcztcbiAgICB9XG4gICAgdXBkYXRlQ2FwYWJpbGl0aWVzKGNhcHMpIHtcbiAgICAgICAgdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzID0gY2FwcztcbiAgICB9XG4gICAgZmFjdG9yeSh0eXBlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuZmFjdG9yeSh0eXBlKTtcbiAgICB9XG4gICAgcGFyYW1ldGVycyh0eXBlT3JGdW5jKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucGFyYW1ldGVycyh0eXBlT3JGdW5jKTtcbiAgICB9XG4gICAgYW5ub3RhdGlvbnModHlwZU9yRnVuYykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLmFubm90YXRpb25zKHR5cGVPckZ1bmMpO1xuICAgIH1cbiAgICBwcm9wTWV0YWRhdGEodHlwZU9yRnVuYykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnByb3BNZXRhZGF0YSh0eXBlT3JGdW5jKTtcbiAgICB9XG4gICAgaGFzTGlmZWN5Y2xlSG9vayh0eXBlLCBsY1Byb3BlcnR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuaGFzTGlmZWN5Y2xlSG9vayh0eXBlLCBsY1Byb3BlcnR5KTtcbiAgICB9XG4gICAgZ2V0dGVyKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5nZXR0ZXIobmFtZSk7XG4gICAgfVxuICAgIHNldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMuc2V0dGVyKG5hbWUpO1xuICAgIH1cbiAgICBtZXRob2QobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLm1ldGhvZChuYW1lKTtcbiAgICB9XG4gICAgaW1wb3J0VXJpKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5pbXBvcnRVcmkodHlwZSk7XG4gICAgfVxuICAgIHJlc291cmNlVXJpKHR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVmbGVjdGlvbkNhcGFiaWxpdGllcy5yZXNvdXJjZVVyaSh0eXBlKTtcbiAgICB9XG4gICAgcmVzb2x2ZUlkZW50aWZpZXIobmFtZSwgbW9kdWxlVXJsLCBtZW1iZXJzLCBydW50aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlZmxlY3Rpb25DYXBhYmlsaXRpZXMucmVzb2x2ZUlkZW50aWZpZXIobmFtZSwgbW9kdWxlVXJsLCBtZW1iZXJzLCBydW50aW1lKTtcbiAgICB9XG4gICAgcmVzb2x2ZUVudW0oaWRlbnRpZmllciwgbmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWZsZWN0aW9uQ2FwYWJpbGl0aWVzLnJlc29sdmVFbnVtKGlkZW50aWZpZXIsIG5hbWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoZSB7QGxpbmsgUmVmbGVjdG9yfSB1c2VkIGludGVybmFsbHkgaW4gQW5ndWxhciB0byBhY2Nlc3MgbWV0YWRhdGFcbiAqIGFib3V0IHN5bWJvbHMuXG4gKi9cbmNvbnN0IHJlZmxlY3RvciA9IG5ldyBSZWZsZWN0b3IobmV3IFJlZmxlY3Rpb25DYXBhYmlsaXRpZXMoKSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBgRGVwZW5kZW5jeWAgaXMgdXNlZCBieSB0aGUgZnJhbWV3b3JrIHRvIGV4dGVuZCBESS5cbiAqIFRoaXMgaXMgaW50ZXJuYWwgdG8gQW5ndWxhciBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5LlxuICovXG5jbGFzcyBSZWZsZWN0aXZlRGVwZW5kZW5jeSB7XG4gICAgY29uc3RydWN0b3Ioa2V5LCBvcHRpb25hbCwgdmlzaWJpbGl0eSkge1xuICAgICAgICB0aGlzLmtleSA9IGtleTtcbiAgICAgICAgdGhpcy5vcHRpb25hbCA9IG9wdGlvbmFsO1xuICAgICAgICB0aGlzLnZpc2liaWxpdHkgPSB2aXNpYmlsaXR5O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUtleShrZXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWZsZWN0aXZlRGVwZW5kZW5jeShrZXksIGZhbHNlLCBudWxsKTtcbiAgICB9XG59XG5jb25zdCBfRU1QVFlfTElTVCA9IFtdO1xuY2xhc3MgUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJfIHtcbiAgICBjb25zdHJ1Y3RvcihrZXksIHJlc29sdmVkRmFjdG9yaWVzLCBtdWx0aVByb3ZpZGVyKSB7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnJlc29sdmVkRmFjdG9yaWVzID0gcmVzb2x2ZWRGYWN0b3JpZXM7XG4gICAgICAgIHRoaXMubXVsdGlQcm92aWRlciA9IG11bHRpUHJvdmlkZXI7XG4gICAgICAgIHRoaXMucmVzb2x2ZWRGYWN0b3J5ID0gdGhpcy5yZXNvbHZlZEZhY3Rvcmllc1swXTtcbiAgICB9XG59XG4vKipcbiAqIEFuIGludGVybmFsIHJlc29sdmVkIHJlcHJlc2VudGF0aW9uIG9mIGEgZmFjdG9yeSBmdW5jdGlvbiBjcmVhdGVkIGJ5IHJlc29sdmluZyBgUHJvdmlkZXJgLlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBSZXNvbHZlZFJlZmxlY3RpdmVGYWN0b3J5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAvKipcbiAgICAgKiBGYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGNhbiByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgYW4gb2JqZWN0IHJlcHJlc2VudGVkIGJ5IGEga2V5LlxuICAgICAqL1xuICAgIGZhY3RvcnksIFxuICAgIC8qKlxuICAgICAqIEFyZ3VtZW50cyAoZGVwZW5kZW5jaWVzKSB0byB0aGUgYGZhY3RvcnlgIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGRlcGVuZGVuY2llcykge1xuICAgICAgICB0aGlzLmZhY3RvcnkgPSBmYWN0b3J5O1xuICAgICAgICB0aGlzLmRlcGVuZGVuY2llcyA9IGRlcGVuZGVuY2llcztcbiAgICB9XG59XG4vKipcbiAqIFJlc29sdmUgYSBzaW5nbGUgcHJvdmlkZXIuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVSZWZsZWN0aXZlRmFjdG9yeShwcm92aWRlcikge1xuICAgIGxldCBmYWN0b3J5Rm47XG4gICAgbGV0IHJlc29sdmVkRGVwcztcbiAgICBpZiAocHJvdmlkZXIudXNlQ2xhc3MpIHtcbiAgICAgICAgY29uc3QgdXNlQ2xhc3MgPSByZXNvbHZlRm9yd2FyZFJlZihwcm92aWRlci51c2VDbGFzcyk7XG4gICAgICAgIGZhY3RvcnlGbiA9IHJlZmxlY3Rvci5mYWN0b3J5KHVzZUNsYXNzKTtcbiAgICAgICAgcmVzb2x2ZWREZXBzID0gX2RlcGVuZGVuY2llc0Zvcih1c2VDbGFzcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHByb3ZpZGVyLnVzZUV4aXN0aW5nKSB7XG4gICAgICAgIGZhY3RvcnlGbiA9IChhbGlhc0luc3RhbmNlKSA9PiBhbGlhc0luc3RhbmNlO1xuICAgICAgICByZXNvbHZlZERlcHMgPSBbUmVmbGVjdGl2ZURlcGVuZGVuY3kuZnJvbUtleShSZWZsZWN0aXZlS2V5LmdldChwcm92aWRlci51c2VFeGlzdGluZykpXTtcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvdmlkZXIudXNlRmFjdG9yeSkge1xuICAgICAgICBmYWN0b3J5Rm4gPSBwcm92aWRlci51c2VGYWN0b3J5O1xuICAgICAgICByZXNvbHZlZERlcHMgPSBjb25zdHJ1Y3REZXBlbmRlbmNpZXMocHJvdmlkZXIudXNlRmFjdG9yeSwgcHJvdmlkZXIuZGVwcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmYWN0b3J5Rm4gPSAoKSA9PiBwcm92aWRlci51c2VWYWx1ZTtcbiAgICAgICAgcmVzb2x2ZWREZXBzID0gX0VNUFRZX0xJU1Q7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVzb2x2ZWRSZWZsZWN0aXZlRmFjdG9yeShmYWN0b3J5Rm4sIHJlc29sdmVkRGVwcyk7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBgUHJvdmlkZXJgIGludG8gYFJlc29sdmVkUHJvdmlkZXJgLlxuICpcbiAqIGBJbmplY3RvcmAgaW50ZXJuYWxseSBvbmx5IHVzZXMgYFJlc29sdmVkUHJvdmlkZXJgLCBgUHJvdmlkZXJgIGNvbnRhaW5zIGNvbnZlbmllbmNlIHByb3ZpZGVyXG4gKiBzeW50YXguXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVSZWZsZWN0aXZlUHJvdmlkZXIocHJvdmlkZXIpIHtcbiAgICByZXR1cm4gbmV3IFJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVyXyhSZWZsZWN0aXZlS2V5LmdldChwcm92aWRlci5wcm92aWRlKSwgW3Jlc29sdmVSZWZsZWN0aXZlRmFjdG9yeShwcm92aWRlcildLCBwcm92aWRlci5tdWx0aSB8fCBmYWxzZSk7XG59XG4vKipcbiAqIFJlc29sdmUgYSBsaXN0IG9mIFByb3ZpZGVycy5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVJlZmxlY3RpdmVQcm92aWRlcnMocHJvdmlkZXJzKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IF9ub3JtYWxpemVQcm92aWRlcnMocHJvdmlkZXJzLCBbXSk7XG4gICAgY29uc3QgcmVzb2x2ZWQgPSBub3JtYWxpemVkLm1hcChyZXNvbHZlUmVmbGVjdGl2ZVByb3ZpZGVyKTtcbiAgICBjb25zdCByZXNvbHZlZFByb3ZpZGVyTWFwID0gbWVyZ2VSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcnMocmVzb2x2ZWQsIG5ldyBNYXAoKSk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocmVzb2x2ZWRQcm92aWRlck1hcC52YWx1ZXMoKSk7XG59XG4vKipcbiAqIE1lcmdlcyBhIGxpc3Qgb2YgUmVzb2x2ZWRQcm92aWRlcnMgaW50byBhIGxpc3Qgd2hlcmUgZWFjaCBrZXkgaXMgY29udGFpbmVkIGV4YWN0bHkgb25jZSBhbmRcbiAqIG11bHRpIHByb3ZpZGVycyBoYXZlIGJlZW4gbWVyZ2VkLlxuICovXG5mdW5jdGlvbiBtZXJnZVJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVycyhwcm92aWRlcnMsIG5vcm1hbGl6ZWRQcm92aWRlcnNNYXApIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3ZpZGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IHByb3ZpZGVyc1tpXTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBub3JtYWxpemVkUHJvdmlkZXJzTWFwLmdldChwcm92aWRlci5rZXkuaWQpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIGlmIChwcm92aWRlci5tdWx0aVByb3ZpZGVyICE9PSBleGlzdGluZy5tdWx0aVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbWl4aW5nTXVsdGlQcm92aWRlcnNXaXRoUmVndWxhclByb3ZpZGVyc0Vycm9yKGV4aXN0aW5nLCBwcm92aWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvdmlkZXIubXVsdGlQcm92aWRlcikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcHJvdmlkZXIucmVzb2x2ZWRGYWN0b3JpZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcucmVzb2x2ZWRGYWN0b3JpZXMucHVzaChwcm92aWRlci5yZXNvbHZlZEZhY3Rvcmllc1tqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3ZpZGVyc01hcC5zZXQocHJvdmlkZXIua2V5LmlkLCBwcm92aWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsZXQgcmVzb2x2ZWRQcm92aWRlcjtcbiAgICAgICAgICAgIGlmIChwcm92aWRlci5tdWx0aVByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRQcm92aWRlciA9IG5ldyBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcl8ocHJvdmlkZXIua2V5LCBwcm92aWRlci5yZXNvbHZlZEZhY3Rvcmllcy5zbGljZSgpLCBwcm92aWRlci5tdWx0aVByb3ZpZGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmVkUHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vcm1hbGl6ZWRQcm92aWRlcnNNYXAuc2V0KHByb3ZpZGVyLmtleS5pZCwgcmVzb2x2ZWRQcm92aWRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWRQcm92aWRlcnNNYXA7XG59XG5mdW5jdGlvbiBfbm9ybWFsaXplUHJvdmlkZXJzKHByb3ZpZGVycywgcmVzKSB7XG4gICAgcHJvdmlkZXJzLmZvckVhY2goYiA9PiB7XG4gICAgICAgIGlmIChiIGluc3RhbmNlb2YgVHlwZSkge1xuICAgICAgICAgICAgcmVzLnB1c2goeyBwcm92aWRlOiBiLCB1c2VDbGFzczogYiB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiICYmIHR5cGVvZiBiID09ICdvYmplY3QnICYmIGIucHJvdmlkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXMucHVzaChiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgICAgICBfbm9ybWFsaXplUHJvdmlkZXJzKGIsIHJlcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBpbnZhbGlkUHJvdmlkZXJFcnJvcihiKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXM7XG59XG5mdW5jdGlvbiBjb25zdHJ1Y3REZXBlbmRlbmNpZXModHlwZU9yRnVuYywgZGVwZW5kZW5jaWVzKSB7XG4gICAgaWYgKCFkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgcmV0dXJuIF9kZXBlbmRlbmNpZXNGb3IodHlwZU9yRnVuYyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBkZXBlbmRlbmNpZXMubWFwKHQgPT4gW3RdKTtcbiAgICAgICAgcmV0dXJuIGRlcGVuZGVuY2llcy5tYXAodCA9PiBfZXh0cmFjdFRva2VuKHR5cGVPckZ1bmMsIHQsIHBhcmFtcykpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9kZXBlbmRlbmNpZXNGb3IodHlwZU9yRnVuYykge1xuICAgIGNvbnN0IHBhcmFtcyA9IHJlZmxlY3Rvci5wYXJhbWV0ZXJzKHR5cGVPckZ1bmMpO1xuICAgIGlmICghcGFyYW1zKVxuICAgICAgICByZXR1cm4gW107XG4gICAgaWYgKHBhcmFtcy5zb21lKHAgPT4gcCA9PSBudWxsKSkge1xuICAgICAgICB0aHJvdyBub0Fubm90YXRpb25FcnJvcih0eXBlT3JGdW5jLCBwYXJhbXMpO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zLm1hcChwID0+IF9leHRyYWN0VG9rZW4odHlwZU9yRnVuYywgcCwgcGFyYW1zKSk7XG59XG5mdW5jdGlvbiBfZXh0cmFjdFRva2VuKHR5cGVPckZ1bmMsIG1ldGFkYXRhLCBwYXJhbXMpIHtcbiAgICBsZXQgdG9rZW4gPSBudWxsO1xuICAgIGxldCBvcHRpb25hbCA9IGZhbHNlO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShtZXRhZGF0YSkpIHtcbiAgICAgICAgaWYgKG1ldGFkYXRhIGluc3RhbmNlb2YgSW5qZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gX2NyZWF0ZURlcGVuZGVuY3kobWV0YWRhdGEudG9rZW4sIG9wdGlvbmFsLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfY3JlYXRlRGVwZW5kZW5jeShtZXRhZGF0YSwgb3B0aW9uYWwsIG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB2aXNpYmlsaXR5ID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1ldGFkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtTWV0YWRhdGEgPSBtZXRhZGF0YVtpXTtcbiAgICAgICAgaWYgKHBhcmFtTWV0YWRhdGEgaW5zdGFuY2VvZiBUeXBlKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHBhcmFtTWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIEluamVjdCkge1xuICAgICAgICAgICAgdG9rZW4gPSBwYXJhbU1ldGFkYXRhLnRva2VuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmFtTWV0YWRhdGEgaW5zdGFuY2VvZiBPcHRpb25hbCkge1xuICAgICAgICAgICAgb3B0aW9uYWwgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBhcmFtTWV0YWRhdGEgaW5zdGFuY2VvZiBTZWxmIHx8IHBhcmFtTWV0YWRhdGEgaW5zdGFuY2VvZiBTa2lwU2VsZikge1xuICAgICAgICAgICAgdmlzaWJpbGl0eSA9IHBhcmFtTWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocGFyYW1NZXRhZGF0YSBpbnN0YW5jZW9mIEluamVjdGlvblRva2VuKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHBhcmFtTWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdG9rZW4gPSByZXNvbHZlRm9yd2FyZFJlZih0b2tlbik7XG4gICAgaWYgKHRva2VuICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIF9jcmVhdGVEZXBlbmRlbmN5KHRva2VuLCBvcHRpb25hbCwgdmlzaWJpbGl0eSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBub0Fubm90YXRpb25FcnJvcih0eXBlT3JGdW5jLCBwYXJhbXMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIF9jcmVhdGVEZXBlbmRlbmN5KHRva2VuLCBvcHRpb25hbCwgdmlzaWJpbGl0eSkge1xuICAgIHJldHVybiBuZXcgUmVmbGVjdGl2ZURlcGVuZGVuY3koUmVmbGVjdGl2ZUtleS5nZXQodG9rZW4pLCBvcHRpb25hbCwgdmlzaWJpbGl0eSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gVGhyZXNob2xkIGZvciB0aGUgZHluYW1pYyB2ZXJzaW9uXG5jb25zdCBVTkRFRklORUQgPSB7fTtcbi8qKlxuICogQSBSZWZsZWN0aXZlRGVwZW5kZW5jeSBpbmplY3Rpb24gY29udGFpbmVyIHVzZWQgZm9yIGluc3RhbnRpYXRpbmcgb2JqZWN0cyBhbmQgcmVzb2x2aW5nXG4gKiBkZXBlbmRlbmNpZXMuXG4gKlxuICogQW4gYEluamVjdG9yYCBpcyBhIHJlcGxhY2VtZW50IGZvciBhIGBuZXdgIG9wZXJhdG9yLCB3aGljaCBjYW4gYXV0b21hdGljYWxseSByZXNvbHZlIHRoZVxuICogY29uc3RydWN0b3IgZGVwZW5kZW5jaWVzLlxuICpcbiAqIEluIHR5cGljYWwgdXNlLCBhcHBsaWNhdGlvbiBjb2RlIGFza3MgZm9yIHRoZSBkZXBlbmRlbmNpZXMgaW4gdGhlIGNvbnN0cnVjdG9yIGFuZCB0aGV5IGFyZVxuICogcmVzb2x2ZWQgYnkgdGhlIGBJbmplY3RvcmAuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIGNyZWF0ZXMgYW4gYEluamVjdG9yYCBjb25maWd1cmVkIHRvIGNyZWF0ZSBgRW5naW5lYCBhbmQgYENhcmAuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogQEluamVjdGFibGUoKVxuICogY2xhc3MgRW5naW5lIHtcbiAqIH1cbiAqXG4gKiBASW5qZWN0YWJsZSgpXG4gKiBjbGFzcyBDYXIge1xuICogICBjb25zdHJ1Y3RvcihwdWJsaWMgZW5naW5lOkVuZ2luZSkge31cbiAqIH1cbiAqXG4gKiB2YXIgaW5qZWN0b3IgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZUFuZENyZWF0ZShbQ2FyLCBFbmdpbmVdKTtcbiAqIHZhciBjYXIgPSBpbmplY3Rvci5nZXQoQ2FyKTtcbiAqIGV4cGVjdChjYXIgaW5zdGFuY2VvZiBDYXIpLnRvQmUodHJ1ZSk7XG4gKiBleHBlY3QoY2FyLmVuZ2luZSBpbnN0YW5jZW9mIEVuZ2luZSkudG9CZSh0cnVlKTtcbiAqIGBgYFxuICpcbiAqIE5vdGljZSwgd2UgZG9uJ3QgdXNlIHRoZSBgbmV3YCBvcGVyYXRvciBiZWNhdXNlIHdlIGV4cGxpY2l0bHkgd2FudCB0byBoYXZlIHRoZSBgSW5qZWN0b3JgXG4gKiByZXNvbHZlIGFsbCBvZiB0aGUgb2JqZWN0J3MgZGVwZW5kZW5jaWVzIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogVE9ETzogZGVsZXRlIGluIHYxNC5cbiAqXG4gKiBAZGVwcmVjYXRlZCBmcm9tIHY1IC0gc2xvdyBhbmQgYnJpbmdzIGluIGEgbG90IG9mIGNvZGUsIFVzZSBgSW5qZWN0b3IuY3JlYXRlYCBpbnN0ZWFkLlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBSZWZsZWN0aXZlSW5qZWN0b3Ige1xuICAgIC8qKlxuICAgICAqIFR1cm5zIGFuIGFycmF5IG9mIHByb3ZpZGVyIGRlZmluaXRpb25zIGludG8gYW4gYXJyYXkgb2YgcmVzb2x2ZWQgcHJvdmlkZXJzLlxuICAgICAqXG4gICAgICogQSByZXNvbHV0aW9uIGlzIGEgcHJvY2VzcyBvZiBmbGF0dGVuaW5nIG11bHRpcGxlIG5lc3RlZCBhcnJheXMgYW5kIGNvbnZlcnRpbmcgaW5kaXZpZHVhbFxuICAgICAqIHByb3ZpZGVycyBpbnRvIGFuIGFycmF5IG9mIGBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcmBzLlxuICAgICAqXG4gICAgICogQHVzYWdlTm90ZXNcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBJbmplY3RhYmxlKClcbiAgICAgKiBjbGFzcyBFbmdpbmUge1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEBJbmplY3RhYmxlKClcbiAgICAgKiBjbGFzcyBDYXIge1xuICAgICAqICAgY29uc3RydWN0b3IocHVibGljIGVuZ2luZTpFbmdpbmUpIHt9XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHByb3ZpZGVycyA9IFJlZmxlY3RpdmVJbmplY3Rvci5yZXNvbHZlKFtDYXIsIFtbRW5naW5lXV1dKTtcbiAgICAgKlxuICAgICAqIGV4cGVjdChwcm92aWRlcnMubGVuZ3RoKS50b0VxdWFsKDIpO1xuICAgICAqXG4gICAgICogZXhwZWN0KHByb3ZpZGVyc1swXSBpbnN0YW5jZW9mIFJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVyKS50b0JlKHRydWUpO1xuICAgICAqIGV4cGVjdChwcm92aWRlcnNbMF0ua2V5LmRpc3BsYXlOYW1lKS50b0JlKFwiQ2FyXCIpO1xuICAgICAqIGV4cGVjdChwcm92aWRlcnNbMF0uZGVwZW5kZW5jaWVzLmxlbmd0aCkudG9FcXVhbCgxKTtcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzBdLmZhY3RvcnkpLnRvQmVEZWZpbmVkKCk7XG4gICAgICpcbiAgICAgKiBleHBlY3QocHJvdmlkZXJzWzFdLmtleS5kaXNwbGF5TmFtZSkudG9CZShcIkVuZ2luZVwiKTtcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqL1xuICAgIHN0YXRpYyByZXNvbHZlKHByb3ZpZGVycykge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZVJlZmxlY3RpdmVQcm92aWRlcnMocHJvdmlkZXJzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgYW4gYXJyYXkgb2YgcHJvdmlkZXJzIGFuZCBjcmVhdGVzIGFuIGluamVjdG9yIGZyb20gdGhvc2UgcHJvdmlkZXJzLlxuICAgICAqXG4gICAgICogVGhlIHBhc3NlZC1pbiBwcm92aWRlcnMgY2FuIGJlIGFuIGFycmF5IG9mIGBUeXBlYCwgYFByb3ZpZGVyYCxcbiAgICAgKiBvciBhIHJlY3Vyc2l2ZSBhcnJheSBvZiBtb3JlIHByb3ZpZGVycy5cbiAgICAgKlxuICAgICAqIEB1c2FnZU5vdGVzXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgRW5naW5lIHtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBASW5qZWN0YWJsZSgpXG4gICAgICogY2xhc3MgQ2FyIHtcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbmdpbmU6RW5naW5lKSB7fVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBpbmplY3RvciA9IFJlZmxlY3RpdmVJbmplY3Rvci5yZXNvbHZlQW5kQ3JlYXRlKFtDYXIsIEVuZ2luZV0pO1xuICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXQoQ2FyKSBpbnN0YW5jZW9mIENhcikudG9CZSh0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzdGF0aWMgcmVzb2x2ZUFuZENyZWF0ZShwcm92aWRlcnMsIHBhcmVudCkge1xuICAgICAgICBjb25zdCBSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcnMgPSBSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShwcm92aWRlcnMpO1xuICAgICAgICByZXR1cm4gUmVmbGVjdGl2ZUluamVjdG9yLmZyb21SZXNvbHZlZFByb3ZpZGVycyhSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcnMsIHBhcmVudCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5qZWN0b3IgZnJvbSBwcmV2aW91c2x5IHJlc29sdmVkIHByb3ZpZGVycy5cbiAgICAgKlxuICAgICAqIFRoaXMgQVBJIGlzIHRoZSByZWNvbW1lbmRlZCB3YXkgdG8gY29uc3RydWN0IGluamVjdG9ycyBpbiBwZXJmb3JtYW5jZS1zZW5zaXRpdmUgcGFydHMuXG4gICAgICpcbiAgICAgKiBAdXNhZ2VOb3Rlc1xuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogQEluamVjdGFibGUoKVxuICAgICAqIGNsYXNzIEVuZ2luZSB7XG4gICAgICogfVxuICAgICAqXG4gICAgICogQEluamVjdGFibGUoKVxuICAgICAqIGNsYXNzIENhciB7XG4gICAgICogICBjb25zdHJ1Y3RvcihwdWJsaWMgZW5naW5lOkVuZ2luZSkge31cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgcHJvdmlkZXJzID0gUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmUoW0NhciwgRW5naW5lXSk7XG4gICAgICogdmFyIGluamVjdG9yID0gUmVmbGVjdGl2ZUluamVjdG9yLmZyb21SZXNvbHZlZFByb3ZpZGVycyhwcm92aWRlcnMpO1xuICAgICAqIGV4cGVjdChpbmplY3Rvci5nZXQoQ2FyKSBpbnN0YW5jZW9mIENhcikudG9CZSh0cnVlKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbVJlc29sdmVkUHJvdmlkZXJzKHByb3ZpZGVycywgcGFyZW50KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVmbGVjdGl2ZUluamVjdG9yXyhwcm92aWRlcnMsIHBhcmVudCk7XG4gICAgfVxufVxuY2xhc3MgUmVmbGVjdGl2ZUluamVjdG9yXyB7XG4gICAgLyoqXG4gICAgICogUHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKF9wcm92aWRlcnMsIF9wYXJlbnQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9jb25zdHJ1Y3Rpb25Db3VudGVyID0gMDtcbiAgICAgICAgdGhpcy5fcHJvdmlkZXJzID0gX3Byb3ZpZGVycztcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBfcGFyZW50IHx8IG51bGw7XG4gICAgICAgIGNvbnN0IGxlbiA9IF9wcm92aWRlcnMubGVuZ3RoO1xuICAgICAgICB0aGlzLmtleUlkcyA9IFtdO1xuICAgICAgICB0aGlzLm9ianMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgdGhpcy5rZXlJZHNbaV0gPSBfcHJvdmlkZXJzW2ldLmtleS5pZDtcbiAgICAgICAgICAgIHRoaXMub2Jqc1tpXSA9IFVOREVGSU5FRDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQodG9rZW4sIG5vdEZvdW5kVmFsdWUgPSBUSFJPV19JRl9OT1RfRk9VTkQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJ5S2V5KFJlZmxlY3RpdmVLZXkuZ2V0KHRva2VuKSwgbnVsbCwgbm90Rm91bmRWYWx1ZSk7XG4gICAgfVxuICAgIHJlc29sdmVBbmRDcmVhdGVDaGlsZChwcm92aWRlcnMpIHtcbiAgICAgICAgY29uc3QgUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJzID0gUmVmbGVjdGl2ZUluamVjdG9yLnJlc29sdmUocHJvdmlkZXJzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ2hpbGRGcm9tUmVzb2x2ZWQoUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJzKTtcbiAgICB9XG4gICAgY3JlYXRlQ2hpbGRGcm9tUmVzb2x2ZWQocHJvdmlkZXJzKSB7XG4gICAgICAgIGNvbnN0IGluaiA9IG5ldyBSZWZsZWN0aXZlSW5qZWN0b3JfKHByb3ZpZGVycyk7XG4gICAgICAgIGluai5wYXJlbnQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gaW5qO1xuICAgIH1cbiAgICByZXNvbHZlQW5kSW5zdGFudGlhdGUocHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFudGlhdGVSZXNvbHZlZChSZWZsZWN0aXZlSW5qZWN0b3IucmVzb2x2ZShbcHJvdmlkZXJdKVswXSk7XG4gICAgfVxuICAgIGluc3RhbnRpYXRlUmVzb2x2ZWQocHJvdmlkZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luc3RhbnRpYXRlUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgIH1cbiAgICBnZXRQcm92aWRlckF0SW5kZXgoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9wcm92aWRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBvdXRPZkJvdW5kc0Vycm9yKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXJzW2luZGV4XTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9uZXcocHJvdmlkZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnN0cnVjdGlvbkNvdW50ZXIrKyA+IHRoaXMuX2dldE1heE51bWJlck9mT2JqZWN0cygpKSB7XG4gICAgICAgICAgICB0aHJvdyBjeWNsaWNEZXBlbmRlbmN5RXJyb3IodGhpcywgcHJvdmlkZXIua2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFudGlhdGVQcm92aWRlcihwcm92aWRlcik7XG4gICAgfVxuICAgIF9nZXRNYXhOdW1iZXJPZk9iamVjdHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9ianMubGVuZ3RoO1xuICAgIH1cbiAgICBfaW5zdGFudGlhdGVQcm92aWRlcihwcm92aWRlcikge1xuICAgICAgICBpZiAocHJvdmlkZXIubXVsdGlQcm92aWRlcikge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3ZpZGVyLnJlc29sdmVkRmFjdG9yaWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgcmVzW2ldID0gdGhpcy5faW5zdGFudGlhdGUocHJvdmlkZXIsIHByb3ZpZGVyLnJlc29sdmVkRmFjdG9yaWVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFudGlhdGUocHJvdmlkZXIsIHByb3ZpZGVyLnJlc29sdmVkRmFjdG9yaWVzWzBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW5zdGFudGlhdGUocHJvdmlkZXIsIFJlc29sdmVkUmVmbGVjdGl2ZUZhY3RvcnkpIHtcbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IFJlc29sdmVkUmVmbGVjdGl2ZUZhY3RvcnkuZmFjdG9yeTtcbiAgICAgICAgbGV0IGRlcHM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBkZXBzID1cbiAgICAgICAgICAgICAgICBSZXNvbHZlZFJlZmxlY3RpdmVGYWN0b3J5LmRlcGVuZGVuY2llcy5tYXAoZGVwID0+IHRoaXMuX2dldEJ5UmVmbGVjdGl2ZURlcGVuZGVuY3koZGVwKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmFkZEtleSkge1xuICAgICAgICAgICAgICAgIGUuYWRkS2V5KHRoaXMsIHByb3ZpZGVyLmtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvYmo7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvYmogPSBmYWN0b3J5KC4uLmRlcHMpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBpbnN0YW50aWF0aW9uRXJyb3IodGhpcywgZSwgZS5zdGFjaywgcHJvdmlkZXIua2V5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBfZ2V0QnlSZWZsZWN0aXZlRGVwZW5kZW5jeShkZXApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJ5S2V5KGRlcC5rZXksIGRlcC52aXNpYmlsaXR5LCBkZXAub3B0aW9uYWwgPyBudWxsIDogVEhST1dfSUZfTk9UX0ZPVU5EKTtcbiAgICB9XG4gICAgX2dldEJ5S2V5KGtleSwgdmlzaWJpbGl0eSwgbm90Rm91bmRWYWx1ZSkge1xuICAgICAgICBpZiAoa2V5ID09PSBSZWZsZWN0aXZlSW5qZWN0b3JfLklOSkVDVE9SX0tFWSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZpc2liaWxpdHkgaW5zdGFuY2VvZiBTZWxmKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXlTZWxmKGtleSwgbm90Rm91bmRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QnlLZXlEZWZhdWx0KGtleSwgbm90Rm91bmRWYWx1ZSwgdmlzaWJpbGl0eSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2dldE9iakJ5S2V5SWQoa2V5SWQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmtleUlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMua2V5SWRzW2ldID09PSBrZXlJZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9ianNbaV0gPT09IFVOREVGSU5FRCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9ianNbaV0gPSB0aGlzLl9uZXcodGhpcy5fcHJvdmlkZXJzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Jqc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVU5ERUZJTkVEO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3Rocm93T3JOdWxsKGtleSwgbm90Rm91bmRWYWx1ZSkge1xuICAgICAgICBpZiAobm90Rm91bmRWYWx1ZSAhPT0gVEhST1dfSUZfTk9UX0ZPVU5EKSB7XG4gICAgICAgICAgICByZXR1cm4gbm90Rm91bmRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5vUHJvdmlkZXJFcnJvcih0aGlzLCBrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfZ2V0QnlLZXlTZWxmKGtleSwgbm90Rm91bmRWYWx1ZSkge1xuICAgICAgICBjb25zdCBvYmogPSB0aGlzLl9nZXRPYmpCeUtleUlkKGtleS5pZCk7XG4gICAgICAgIHJldHVybiAob2JqICE9PSBVTkRFRklORUQpID8gb2JqIDogdGhpcy5fdGhyb3dPck51bGwoa2V5LCBub3RGb3VuZFZhbHVlKTtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9nZXRCeUtleURlZmF1bHQoa2V5LCBub3RGb3VuZFZhbHVlLCB2aXNpYmlsaXR5KSB7XG4gICAgICAgIGxldCBpbmo7XG4gICAgICAgIGlmICh2aXNpYmlsaXR5IGluc3RhbmNlb2YgU2tpcFNlbGYpIHtcbiAgICAgICAgICAgIGluaiA9IHRoaXMucGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5qID0gdGhpcztcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoaW5qIGluc3RhbmNlb2YgUmVmbGVjdGl2ZUluamVjdG9yXykge1xuICAgICAgICAgICAgY29uc3QgaW5qXyA9IGluajtcbiAgICAgICAgICAgIGNvbnN0IG9iaiA9IGlual8uX2dldE9iakJ5S2V5SWQoa2V5LmlkKTtcbiAgICAgICAgICAgIGlmIChvYmogIT09IFVOREVGSU5FRClcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgICAgaW5qID0gaW5qXy5wYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluaiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGluai5nZXQoa2V5LnRva2VuLCBub3RGb3VuZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aHJvd09yTnVsbChrZXksIG5vdEZvdW5kVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBkaXNwbGF5TmFtZSgpIHtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gX21hcFByb3ZpZGVycyh0aGlzLCAoYikgPT4gJyBcIicgKyBiLmtleS5kaXNwbGF5TmFtZSArICdcIiAnKVxuICAgICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgIHJldHVybiBgUmVmbGVjdGl2ZUluamVjdG9yKHByb3ZpZGVyczogWyR7cHJvdmlkZXJzfV0pYDtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpc3BsYXlOYW1lO1xuICAgIH1cbn1cblJlZmxlY3RpdmVJbmplY3Rvcl8uSU5KRUNUT1JfS0VZID0gKCAvKiBAX19QVVJFX18gKi9SZWZsZWN0aXZlS2V5LmdldChJbmplY3RvcikpO1xuZnVuY3Rpb24gX21hcFByb3ZpZGVycyhpbmplY3RvciwgZm4pIHtcbiAgICBjb25zdCByZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluamVjdG9yLl9wcm92aWRlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcmVzW2ldID0gZm4oaW5qZWN0b3IuZ2V0UHJvdmlkZXJBdEluZGV4KGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIMm1ybVkaXJlY3RpdmVJbmplY3QodG9rZW4sIGZsYWdzID0gSW5qZWN0RmxhZ3MuRGVmYXVsdCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICAvLyBGYWxsIGJhY2sgdG8gaW5qZWN0KCkgaWYgdmlldyBoYXNuJ3QgYmVlbiBjcmVhdGVkLiBUaGlzIHNpdHVhdGlvbiBjYW4gaGFwcGVuIGluIHRlc3RzXG4gICAgLy8gaWYgaW5qZWN0IHV0aWxpdGllcyBhcmUgdXNlZCBiZWZvcmUgYm9vdHN0cmFwcGluZy5cbiAgICBpZiAobFZpZXcgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVmVyaWZ5IHRoYXQgd2Ugd2lsbCBub3QgZ2V0IGludG8gaW5maW5pdGUgbG9vcC5cbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydEluamVjdEltcGxlbWVudGF0aW9uTm90RXF1YWwoybXJtWRpcmVjdGl2ZUluamVjdCk7XG4gICAgICAgIHJldHVybiDJtcm1aW5qZWN0KHRva2VuLCBmbGFncyk7XG4gICAgfVxuICAgIGNvbnN0IHROb2RlID0gZ2V0Q3VycmVudFROb2RlKCk7XG4gICAgcmV0dXJuIGdldE9yQ3JlYXRlSW5qZWN0YWJsZSh0Tm9kZSwgbFZpZXcsIHJlc29sdmVGb3J3YXJkUmVmKHRva2VuKSwgZmxhZ3MpO1xufVxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaW5kaWNhdGluZyB0aGF0IGEgZmFjdG9yeSBmdW5jdGlvbiBjb3VsZCBub3QgYmUgZ2VuZXJhdGVkIGJ5IHRoZSBjb21waWxlciBmb3IgYVxuICogcGFydGljdWxhciBjbGFzcy5cbiAqXG4gKiBUaGlzIGluc3RydWN0aW9uIGFsbG93cyB0aGUgYWN0dWFsIGVycm9yIG1lc3NhZ2UgdG8gYmUgb3B0aW1pemVkIGF3YXkgd2hlbiBuZ0Rldk1vZGUgaXMgdHVybmVkXG4gKiBvZmYsIHNhdmluZyBieXRlcyBvZiBnZW5lcmF0ZWQgY29kZSB3aGlsZSBzdGlsbCBwcm92aWRpbmcgYSBnb29kIGV4cGVyaWVuY2UgaW4gZGV2IG1vZGUuXG4gKlxuICogVGhlIG5hbWUgb2YgdGhlIGNsYXNzIGlzIG5vdCBtZW50aW9uZWQgaGVyZSwgYnV0IHdpbGwgYmUgaW4gdGhlIGdlbmVyYXRlZCBmYWN0b3J5IGZ1bmN0aW9uIG5hbWVcbiAqIGFuZCB0aHVzIGluIHRoZSBzdGFjayB0cmFjZS5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1aW52YWxpZEZhY3RvcnkoKSB7XG4gICAgY29uc3QgbXNnID0gbmdEZXZNb2RlID8gYFRoaXMgY29uc3RydWN0b3Igd2FzIG5vdCBjb21wYXRpYmxlIHdpdGggRGVwZW5kZW5jeSBJbmplY3Rpb24uYCA6ICdpbnZhbGlkJztcbiAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFVwZGF0ZSBhIHByb3BlcnR5IG9uIGEgc2VsZWN0ZWQgZWxlbWVudC5cbiAqXG4gKiBPcGVyYXRlcyBvbiB0aGUgZWxlbWVudCBzZWxlY3RlZCBieSBpbmRleCB2aWEgdGhlIHtAbGluayBzZWxlY3R9IGluc3RydWN0aW9uLlxuICpcbiAqIElmIHRoZSBwcm9wZXJ0eSBuYW1lIGFsc28gZXhpc3RzIGFzIGFuIGlucHV0IHByb3BlcnR5IG9uIG9uZSBvZiB0aGUgZWxlbWVudCdzIGRpcmVjdGl2ZXMsXG4gKiB0aGUgY29tcG9uZW50IHByb3BlcnR5IHdpbGwgYmUgc2V0IGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgcHJvcGVydHkuIFRoaXMgY2hlY2sgbXVzdFxuICogYmUgY29uZHVjdGVkIGF0IHJ1bnRpbWUgc28gY2hpbGQgY29tcG9uZW50cyB0aGF0IGFkZCBuZXcgYEBJbnB1dHNgIGRvbid0IGhhdmUgdG8gYmUgcmUtY29tcGlsZWRcbiAqXG4gKiBAcGFyYW0gcHJvcE5hbWUgTmFtZSBvZiBwcm9wZXJ0eS4gQmVjYXVzZSBpdCBpcyBnb2luZyB0byBET00sIHRoaXMgaXMgbm90IHN1YmplY3QgdG9cbiAqICAgICAgICByZW5hbWluZyBhcyBwYXJ0IG9mIG1pbmlmaWNhdGlvbi5cbiAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgdG8gd3JpdGUuXG4gKiBAcGFyYW0gc2FuaXRpemVyIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHVzZWQgdG8gc2FuaXRpemUgdGhlIHZhbHVlLlxuICogQHJldHVybnMgVGhpcyBmdW5jdGlvbiByZXR1cm5zIGl0c2VsZiBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkXG4gKiAoZS5nLiBgcHJvcGVydHkoJ25hbWUnLCBjdHgubmFtZSkoJ3RpdGxlJywgY3R4LnRpdGxlKWApXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXByb3BlcnR5KHByb3BOYW1lLCB2YWx1ZSwgc2FuaXRpemVyKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IG5leHRCaW5kaW5nSW5kZXgoKTtcbiAgICBpZiAoYmluZGluZ1VwZGF0ZWQobFZpZXcsIGJpbmRpbmdJbmRleCwgdmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRQcm9wZXJ0eUludGVybmFsKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIHByb3BOYW1lLCB2YWx1ZSwgbFZpZXdbUkVOREVSRVJdLCBzYW5pdGl6ZXIsIGZhbHNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmIHN0b3JlUHJvcGVydHlCaW5kaW5nTWV0YWRhdGEodFZpZXcuZGF0YSwgdE5vZGUsIHByb3BOYW1lLCBiaW5kaW5nSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtXByb3BlcnR5O1xufVxuLyoqXG4gKiBHaXZlbiBgPGRpdiBzdHlsZT1cIi4uLlwiIG15LWRpcj5gIGFuZCBgTXlEaXJgIHdpdGggYEBJbnB1dCgnc3R5bGUnKWAgd2UgbmVlZCB0byB3cml0ZSB0b1xuICogZGlyZWN0aXZlIGlucHV0LlxuICovXG5mdW5jdGlvbiBzZXREaXJlY3RpdmVJbnB1dHNXaGljaFNoYWRvd3NTdHlsaW5nKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIHZhbHVlLCBpc0NsYXNzQmFzZWQpIHtcbiAgICBjb25zdCBpbnB1dHMgPSB0Tm9kZS5pbnB1dHM7XG4gICAgY29uc3QgcHJvcGVydHkgPSBpc0NsYXNzQmFzZWQgPyAnY2xhc3MnIDogJ3N0eWxlJztcbiAgICAvLyBXZSBzdXBwb3J0IGJvdGggJ2NsYXNzJyBhbmQgYGNsYXNzTmFtZWAgaGVuY2UgdGhlIGZhbGxiYWNrLlxuICAgIHNldElucHV0c0ZvclByb3BlcnR5KHRWaWV3LCBsVmlldywgaW5wdXRzW3Byb3BlcnR5XSwgcHJvcGVydHksIHZhbHVlKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5mdW5jdGlvbiBlbGVtZW50U3RhcnRGaXJzdENyZWF0ZVBhc3MoaW5kZXgsIHRWaWV3LCBsVmlldywgbmF0aXZlLCBuYW1lLCBhdHRyc0luZGV4LCBsb2NhbFJlZnNJbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRGaXJzdENyZWF0ZVBhc3ModFZpZXcpO1xuICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUuZmlyc3RDcmVhdGVQYXNzKys7XG4gICAgY29uc3QgdFZpZXdDb25zdHMgPSB0Vmlldy5jb25zdHM7XG4gICAgY29uc3QgYXR0cnMgPSBnZXRDb25zdGFudCh0Vmlld0NvbnN0cywgYXR0cnNJbmRleCk7XG4gICAgY29uc3QgdE5vZGUgPSBnZXRPckNyZWF0ZVROb2RlKHRWaWV3LCBpbmRleCwgMiAvKiBFbGVtZW50ICovLCBuYW1lLCBhdHRycyk7XG4gICAgY29uc3QgaGFzRGlyZWN0aXZlcyA9IHJlc29sdmVEaXJlY3RpdmVzKHRWaWV3LCBsVmlldywgdE5vZGUsIGdldENvbnN0YW50KHRWaWV3Q29uc3RzLCBsb2NhbFJlZnNJbmRleCkpO1xuICAgIG5nRGV2TW9kZSAmJiBsb2dVbmtub3duRWxlbWVudEVycm9yKHRWaWV3LCBuYXRpdmUsIHROb2RlLCBoYXNEaXJlY3RpdmVzKTtcbiAgICBpZiAodE5vZGUuYXR0cnMgIT09IG51bGwpIHtcbiAgICAgICAgY29tcHV0ZVN0YXRpY1N0eWxpbmcodE5vZGUsIHROb2RlLmF0dHJzLCBmYWxzZSk7XG4gICAgfVxuICAgIGlmICh0Tm9kZS5tZXJnZWRBdHRycyAhPT0gbnVsbCkge1xuICAgICAgICBjb21wdXRlU3RhdGljU3R5bGluZyh0Tm9kZSwgdE5vZGUubWVyZ2VkQXR0cnMsIHRydWUpO1xuICAgIH1cbiAgICBpZiAodFZpZXcucXVlcmllcyAhPT0gbnVsbCkge1xuICAgICAgICB0Vmlldy5xdWVyaWVzLmVsZW1lbnRTdGFydCh0VmlldywgdE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gdE5vZGU7XG59XG4vKipcbiAqIENyZWF0ZSBET00gZWxlbWVudC4gVGhlIGluc3RydWN0aW9uIG11c3QgbGF0ZXIgYmUgZm9sbG93ZWQgYnkgYGVsZW1lbnRFbmQoKWAgY2FsbC5cbiAqXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQgaW4gdGhlIExWaWV3IGFycmF5XG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBET00gTm9kZVxuICogQHBhcmFtIGF0dHJzSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQncyBhdHRyaWJ1dGVzIGluIHRoZSBgY29uc3RzYCBhcnJheS5cbiAqIEBwYXJhbSBsb2NhbFJlZnNJbmRleCBJbmRleCBvZiB0aGUgZWxlbWVudCdzIGxvY2FsIHJlZmVyZW5jZXMgaW4gdGhlIGBjb25zdHNgIGFycmF5LlxuICogQHJldHVybnMgVGhpcyBmdW5jdGlvbiByZXR1cm5zIGl0c2VsZiBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICpcbiAqIEF0dHJpYnV0ZXMgYW5kIGxvY2FsUmVmcyBhcmUgcGFzc2VkIGFzIGFuIGFycmF5IG9mIHN0cmluZ3Mgd2hlcmUgZWxlbWVudHMgd2l0aCBhbiBldmVuIGluZGV4XG4gKiBob2xkIGFuIGF0dHJpYnV0ZSBuYW1lIGFuZCBlbGVtZW50cyB3aXRoIGFuIG9kZCBpbmRleCBob2xkIGFuIGF0dHJpYnV0ZSB2YWx1ZSwgZXguOlxuICogWydpZCcsICd3YXJuaW5nNScsICdjbGFzcycsICdhbGVydCddXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWVsZW1lbnRTdGFydChpbmRleCwgbmFtZSwgYXR0cnNJbmRleCwgbG9jYWxSZWZzSW5kZXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgIGNvbnN0IGFkanVzdGVkSW5kZXggPSBIRUFERVJfT0ZGU0VUICsgaW5kZXg7XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydEVxdWFsKGdldEJpbmRpbmdJbmRleCgpLCB0Vmlldy5iaW5kaW5nU3RhcnRJbmRleCwgJ2VsZW1lbnRzIHNob3VsZCBiZSBjcmVhdGVkIGJlZm9yZSBhbnkgYmluZGluZ3MnKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SW5kZXhJblJhbmdlKGxWaWV3LCBhZGp1c3RlZEluZGV4KTtcbiAgICBjb25zdCByZW5kZXJlciA9IGxWaWV3W1JFTkRFUkVSXTtcbiAgICBjb25zdCBuYXRpdmUgPSBsVmlld1thZGp1c3RlZEluZGV4XSA9IGNyZWF0ZUVsZW1lbnROb2RlKHJlbmRlcmVyLCBuYW1lLCBnZXROYW1lc3BhY2UkMSgpKTtcbiAgICBjb25zdCB0Tm9kZSA9IHRWaWV3LmZpcnN0Q3JlYXRlUGFzcyA/XG4gICAgICAgIGVsZW1lbnRTdGFydEZpcnN0Q3JlYXRlUGFzcyhhZGp1c3RlZEluZGV4LCB0VmlldywgbFZpZXcsIG5hdGl2ZSwgbmFtZSwgYXR0cnNJbmRleCwgbG9jYWxSZWZzSW5kZXgpIDpcbiAgICAgICAgdFZpZXcuZGF0YVthZGp1c3RlZEluZGV4XTtcbiAgICBzZXRDdXJyZW50VE5vZGUodE5vZGUsIHRydWUpO1xuICAgIGNvbnN0IG1lcmdlZEF0dHJzID0gdE5vZGUubWVyZ2VkQXR0cnM7XG4gICAgaWYgKG1lcmdlZEF0dHJzICE9PSBudWxsKSB7XG4gICAgICAgIHNldFVwQXR0cmlidXRlcyhyZW5kZXJlciwgbmF0aXZlLCBtZXJnZWRBdHRycyk7XG4gICAgfVxuICAgIGNvbnN0IGNsYXNzZXMgPSB0Tm9kZS5jbGFzc2VzO1xuICAgIGlmIChjbGFzc2VzICE9PSBudWxsKSB7XG4gICAgICAgIHdyaXRlRGlyZWN0Q2xhc3MocmVuZGVyZXIsIG5hdGl2ZSwgY2xhc3Nlcyk7XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlcyA9IHROb2RlLnN0eWxlcztcbiAgICBpZiAoc3R5bGVzICE9PSBudWxsKSB7XG4gICAgICAgIHdyaXRlRGlyZWN0U3R5bGUocmVuZGVyZXIsIG5hdGl2ZSwgc3R5bGVzKTtcbiAgICB9XG4gICAgaWYgKCh0Tm9kZS5mbGFncyAmIDY0IC8qIGlzRGV0YWNoZWQgKi8pICE9PSA2NCAvKiBpc0RldGFjaGVkICovKSB7XG4gICAgICAgIC8vIEluIHRoZSBpMThuIGNhc2UsIHRoZSB0cmFuc2xhdGlvbiBtYXkgaGF2ZSByZW1vdmVkIHRoaXMgZWxlbWVudCwgc28gb25seSBhZGQgaXQgaWYgaXQgaXMgbm90XG4gICAgICAgIC8vIGRldGFjaGVkLiBTZWUgYFROb2RlVHlwZS5QbGFjZWhvbGRlcmAgYW5kIGBMRnJhbWUuaW5JMThuYCBmb3IgbW9yZSBjb250ZXh0LlxuICAgICAgICBhcHBlbmRDaGlsZCh0VmlldywgbFZpZXcsIG5hdGl2ZSwgdE5vZGUpO1xuICAgIH1cbiAgICAvLyBhbnkgaW1tZWRpYXRlIGNoaWxkcmVuIG9mIGEgY29tcG9uZW50IG9yIHRlbXBsYXRlIGNvbnRhaW5lciBtdXN0IGJlIHByZS1lbXB0aXZlbHlcbiAgICAvLyBtb25rZXktcGF0Y2hlZCB3aXRoIHRoZSBjb21wb25lbnQgdmlldyBkYXRhIHNvIHRoYXQgdGhlIGVsZW1lbnQgY2FuIGJlIGluc3BlY3RlZFxuICAgIC8vIGxhdGVyIG9uIHVzaW5nIGFueSBlbGVtZW50IGRpc2NvdmVyeSB1dGlsaXR5IG1ldGhvZHMgKHNlZSBgZWxlbWVudF9kaXNjb3ZlcnkudHNgKVxuICAgIGlmIChnZXRFbGVtZW50RGVwdGhDb3VudCgpID09PSAwKSB7XG4gICAgICAgIGF0dGFjaFBhdGNoRGF0YShuYXRpdmUsIGxWaWV3KTtcbiAgICB9XG4gICAgaW5jcmVhc2VFbGVtZW50RGVwdGhDb3VudCgpO1xuICAgIGlmIChpc0RpcmVjdGl2ZUhvc3QodE5vZGUpKSB7XG4gICAgICAgIGNyZWF0ZURpcmVjdGl2ZXNJbnN0YW5jZXModFZpZXcsIGxWaWV3LCB0Tm9kZSk7XG4gICAgICAgIGV4ZWN1dGVDb250ZW50UXVlcmllcyh0VmlldywgdE5vZGUsIGxWaWV3KTtcbiAgICB9XG4gICAgaWYgKGxvY2FsUmVmc0luZGV4ICE9PSBudWxsKSB7XG4gICAgICAgIHNhdmVSZXNvbHZlZExvY2Fsc0luRGF0YShsVmlldywgdE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtWVsZW1lbnRTdGFydDtcbn1cbi8qKlxuICogTWFyayB0aGUgZW5kIG9mIHRoZSBlbGVtZW50LlxuICogQHJldHVybnMgVGhpcyBmdW5jdGlvbiByZXR1cm5zIGl0c2VsZiBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVlbGVtZW50RW5kKCkge1xuICAgIGxldCBjdXJyZW50VE5vZGUgPSBnZXRDdXJyZW50VE5vZGUoKTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChjdXJyZW50VE5vZGUsICdObyBwYXJlbnQgbm9kZSB0byBjbG9zZS4nKTtcbiAgICBpZiAoaXNDdXJyZW50VE5vZGVQYXJlbnQoKSkge1xuICAgICAgICBzZXRDdXJyZW50VE5vZGVBc05vdFBhcmVudCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydEhhc1BhcmVudChnZXRDdXJyZW50VE5vZGUoKSk7XG4gICAgICAgIGN1cnJlbnRUTm9kZSA9IGN1cnJlbnRUTm9kZS5wYXJlbnQ7XG4gICAgICAgIHNldEN1cnJlbnRUTm9kZShjdXJyZW50VE5vZGUsIGZhbHNlKTtcbiAgICB9XG4gICAgY29uc3QgdE5vZGUgPSBjdXJyZW50VE5vZGU7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlVHlwZSh0Tm9kZSwgMyAvKiBBbnlSTm9kZSAqLyk7XG4gICAgZGVjcmVhc2VFbGVtZW50RGVwdGhDb3VudCgpO1xuICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICBpZiAodFZpZXcuZmlyc3RDcmVhdGVQYXNzKSB7XG4gICAgICAgIHJlZ2lzdGVyUG9zdE9yZGVySG9va3ModFZpZXcsIGN1cnJlbnRUTm9kZSk7XG4gICAgICAgIGlmIChpc0NvbnRlbnRRdWVyeUhvc3QoY3VycmVudFROb2RlKSkge1xuICAgICAgICAgICAgdFZpZXcucXVlcmllcy5lbGVtZW50RW5kKGN1cnJlbnRUTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHROb2RlLmNsYXNzZXNXaXRob3V0SG9zdCAhPSBudWxsICYmIGhhc0NsYXNzSW5wdXQodE5vZGUpKSB7XG4gICAgICAgIHNldERpcmVjdGl2ZUlucHV0c1doaWNoU2hhZG93c1N0eWxpbmcodFZpZXcsIHROb2RlLCBnZXRMVmlldygpLCB0Tm9kZS5jbGFzc2VzV2l0aG91dEhvc3QsIHRydWUpO1xuICAgIH1cbiAgICBpZiAodE5vZGUuc3R5bGVzV2l0aG91dEhvc3QgIT0gbnVsbCAmJiBoYXNTdHlsZUlucHV0KHROb2RlKSkge1xuICAgICAgICBzZXREaXJlY3RpdmVJbnB1dHNXaGljaFNoYWRvd3NTdHlsaW5nKHRWaWV3LCB0Tm9kZSwgZ2V0TFZpZXcoKSwgdE5vZGUuc3R5bGVzV2l0aG91dEhvc3QsIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIMm1ybVlbGVtZW50RW5kO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIGVtcHR5IGVsZW1lbnQgdXNpbmcge0BsaW5rIGVsZW1lbnRTdGFydH0gYW5kIHtAbGluayBlbGVtZW50RW5kfVxuICpcbiAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiB0aGUgZWxlbWVudCBpbiB0aGUgZGF0YSBhcnJheVxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgRE9NIE5vZGVcbiAqIEBwYXJhbSBhdHRyc0luZGV4IEluZGV4IG9mIHRoZSBlbGVtZW50J3MgYXR0cmlidXRlcyBpbiB0aGUgYGNvbnN0c2AgYXJyYXkuXG4gKiBAcGFyYW0gbG9jYWxSZWZzSW5kZXggSW5kZXggb2YgdGhlIGVsZW1lbnQncyBsb2NhbCByZWZlcmVuY2VzIGluIHRoZSBgY29uc3RzYCBhcnJheS5cbiAqIEByZXR1cm5zIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBpdHNlbGYgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1ZWxlbWVudChpbmRleCwgbmFtZSwgYXR0cnNJbmRleCwgbG9jYWxSZWZzSW5kZXgpIHtcbiAgICDJtcm1ZWxlbWVudFN0YXJ0KGluZGV4LCBuYW1lLCBhdHRyc0luZGV4LCBsb2NhbFJlZnNJbmRleCk7XG4gICAgybXJtWVsZW1lbnRFbmQoKTtcbiAgICByZXR1cm4gybXJtWVsZW1lbnQ7XG59XG5mdW5jdGlvbiBsb2dVbmtub3duRWxlbWVudEVycm9yKHRWaWV3LCBlbGVtZW50LCB0Tm9kZSwgaGFzRGlyZWN0aXZlcykge1xuICAgIGNvbnN0IHNjaGVtYXMgPSB0Vmlldy5zY2hlbWFzO1xuICAgIC8vIElmIGBzY2hlbWFzYCBpcyBzZXQgdG8gYG51bGxgLCB0aGF0J3MgYW4gaW5kaWNhdGlvbiB0aGF0IHRoaXMgQ29tcG9uZW50IHdhcyBjb21waWxlZCBpbiBBT1RcbiAgICAvLyBtb2RlIHdoZXJlIHRoaXMgY2hlY2sgaGFwcGVucyBhdCBjb21waWxlIHRpbWUuIEluIEpJVCBtb2RlLCBgc2NoZW1hc2AgaXMgYWx3YXlzIHByZXNlbnQgYW5kXG4gICAgLy8gZGVmaW5lZCBhcyBhbiBhcnJheSAoYXMgYW4gZW1wdHkgYXJyYXkgaW4gY2FzZSBgc2NoZW1hc2AgZmllbGQgaXMgbm90IGRlZmluZWQpIGFuZCB3ZSBzaG91bGRcbiAgICAvLyBleGVjdXRlIHRoZSBjaGVjayBiZWxvdy5cbiAgICBpZiAoc2NoZW1hcyA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHRhZ05hbWUgPSB0Tm9kZS52YWx1ZTtcbiAgICAvLyBJZiB0aGUgZWxlbWVudCBtYXRjaGVzIGFueSBkaXJlY3RpdmUsIGl0J3MgY29uc2lkZXJlZCBhcyB2YWxpZC5cbiAgICBpZiAoIWhhc0RpcmVjdGl2ZXMgJiYgdGFnTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBUaGUgZWxlbWVudCBpcyB1bmtub3duIGlmIGl0J3MgYW4gaW5zdGFuY2Ugb2YgSFRNTFVua25vd25FbGVtZW50IG9yIGl0IGlzbid0IHJlZ2lzdGVyZWRcbiAgICAgICAgLy8gYXMgYSBjdXN0b20gZWxlbWVudC4gTm90ZSB0aGF0IHVua25vd24gZWxlbWVudHMgd2l0aCBhIGRhc2ggaW4gdGhlaXIgbmFtZSB3b24ndCBiZSBpbnN0YW5jZXNcbiAgICAgICAgLy8gb2YgSFRNTFVua25vd25FbGVtZW50IGluIGJyb3dzZXJzIHRoYXQgc3VwcG9ydCB3ZWIgY29tcG9uZW50cy5cbiAgICAgICAgY29uc3QgaXNVbmtub3duID0gXG4gICAgICAgIC8vIE5vdGUgdGhhdCB3ZSBjYW4ndCBjaGVjayBmb3IgYHR5cGVvZiBIVE1MVW5rbm93bkVsZW1lbnQgPT09ICdmdW5jdGlvbidgLFxuICAgICAgICAvLyBiZWNhdXNlIHdoaWxlIG1vc3QgYnJvd3NlcnMgcmV0dXJuICdmdW5jdGlvbicsIElFIHJldHVybnMgJ29iamVjdCcuXG4gICAgICAgICh0eXBlb2YgSFRNTFVua25vd25FbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBIVE1MVW5rbm93bkVsZW1lbnQgJiZcbiAgICAgICAgICAgIGVsZW1lbnQgaW5zdGFuY2VvZiBIVE1MVW5rbm93bkVsZW1lbnQpIHx8XG4gICAgICAgICAgICAodHlwZW9mIGN1c3RvbUVsZW1lbnRzICE9PSAndW5kZWZpbmVkJyAmJiB0YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xICYmXG4gICAgICAgICAgICAgICAgIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSk7XG4gICAgICAgIGlmIChpc1Vua25vd24gJiYgIW1hdGNoaW5nU2NoZW1hcyh0VmlldywgdGFnTmFtZSkpIHtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gYCcke3RhZ05hbWV9JyBpcyBub3QgYSBrbm93biBlbGVtZW50OlxcbmA7XG4gICAgICAgICAgICBtZXNzYWdlICs9IGAxLiBJZiAnJHt0YWdOYW1lfScgaXMgYW4gQW5ndWxhciBjb21wb25lbnQsIHRoZW4gdmVyaWZ5IHRoYXQgaXQgaXMgcGFydCBvZiB0aGlzIG1vZHVsZS5cXG5gO1xuICAgICAgICAgICAgaWYgKHRhZ05hbWUgJiYgdGFnTmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gYDIuIElmICcke3RhZ05hbWV9JyBpcyBhIFdlYiBDb21wb25lbnQgdGhlbiBhZGQgJ0NVU1RPTV9FTEVNRU5UU19TQ0hFTUEnIHRvIHRoZSAnQE5nTW9kdWxlLnNjaGVtYXMnIG9mIHRoaXMgY29tcG9uZW50IHRvIHN1cHByZXNzIHRoaXMgbWVzc2FnZS5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSArPVxuICAgICAgICAgICAgICAgICAgICBgMi4gVG8gYWxsb3cgYW55IGVsZW1lbnQgYWRkICdOT19FUlJPUlNfU0NIRU1BJyB0byB0aGUgJ0BOZ01vZHVsZS5zY2hlbWFzJyBvZiB0aGlzIGNvbXBvbmVudC5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXRSdW50aW1lRXJyb3IoMzA0IC8qIFVOS05PV05fRUxFTUVOVCAqLywgbWVzc2FnZSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGVsZW1lbnRDb250YWluZXJTdGFydEZpcnN0Q3JlYXRlUGFzcyhpbmRleCwgdFZpZXcsIGxWaWV3LCBhdHRyc0luZGV4LCBsb2NhbFJlZnNJbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUuZmlyc3RDcmVhdGVQYXNzKys7XG4gICAgY29uc3QgdFZpZXdDb25zdHMgPSB0Vmlldy5jb25zdHM7XG4gICAgY29uc3QgYXR0cnMgPSBnZXRDb25zdGFudCh0Vmlld0NvbnN0cywgYXR0cnNJbmRleCk7XG4gICAgY29uc3QgdE5vZGUgPSBnZXRPckNyZWF0ZVROb2RlKHRWaWV3LCBpbmRleCwgOCAvKiBFbGVtZW50Q29udGFpbmVyICovLCAnbmctY29udGFpbmVyJywgYXR0cnMpO1xuICAgIC8vIFdoaWxlIG5nLWNvbnRhaW5lciBkb2Vzbid0IG5lY2Vzc2FyaWx5IHN1cHBvcnQgc3R5bGluZywgd2UgdXNlIHRoZSBzdHlsZSBjb250ZXh0IHRvIGlkZW50aWZ5XG4gICAgLy8gYW5kIGV4ZWN1dGUgZGlyZWN0aXZlcyBvbiB0aGUgbmctY29udGFpbmVyLlxuICAgIGlmIChhdHRycyAhPT0gbnVsbCkge1xuICAgICAgICBjb21wdXRlU3RhdGljU3R5bGluZyh0Tm9kZSwgYXR0cnMsIHRydWUpO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbFJlZnMgPSBnZXRDb25zdGFudCh0Vmlld0NvbnN0cywgbG9jYWxSZWZzSW5kZXgpO1xuICAgIHJlc29sdmVEaXJlY3RpdmVzKHRWaWV3LCBsVmlldywgdE5vZGUsIGxvY2FsUmVmcyk7XG4gICAgaWYgKHRWaWV3LnF1ZXJpZXMgIT09IG51bGwpIHtcbiAgICAgICAgdFZpZXcucXVlcmllcy5lbGVtZW50U3RhcnQodFZpZXcsIHROb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIHROb2RlO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbG9naWNhbCBjb250YWluZXIgZm9yIG90aGVyIG5vZGVzICg8bmctY29udGFpbmVyPikgYmFja2VkIGJ5IGEgY29tbWVudCBub2RlIGluIHRoZSBET00uXG4gKiBUaGUgaW5zdHJ1Y3Rpb24gbXVzdCBsYXRlciBiZSBmb2xsb3dlZCBieSBgZWxlbWVudENvbnRhaW5lckVuZCgpYCBjYWxsLlxuICpcbiAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiB0aGUgZWxlbWVudCBpbiB0aGUgTFZpZXcgYXJyYXlcbiAqIEBwYXJhbSBhdHRyc0luZGV4IEluZGV4IG9mIHRoZSBjb250YWluZXIgYXR0cmlidXRlcyBpbiB0aGUgYGNvbnN0c2AgYXJyYXkuXG4gKiBAcGFyYW0gbG9jYWxSZWZzSW5kZXggSW5kZXggb2YgdGhlIGNvbnRhaW5lcidzIGxvY2FsIHJlZmVyZW5jZXMgaW4gdGhlIGBjb25zdHNgIGFycmF5LlxuICogQHJldHVybnMgVGhpcyBmdW5jdGlvbiByZXR1cm5zIGl0c2VsZiBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICpcbiAqIEV2ZW4gaWYgdGhpcyBpbnN0cnVjdGlvbiBhY2NlcHRzIGEgc2V0IG9mIGF0dHJpYnV0ZXMgbm8gYWN0dWFsIGF0dHJpYnV0ZSB2YWx1ZXMgYXJlIHByb3BhZ2F0ZWQgdG9cbiAqIHRoZSBET00gKGFzIGEgY29tbWVudCBub2RlIGNhbid0IGhhdmUgYXR0cmlidXRlcykuIEF0dHJpYnV0ZXMgYXJlIGhlcmUgb25seSBmb3IgZGlyZWN0aXZlXG4gKiBtYXRjaGluZyBwdXJwb3NlcyBhbmQgc2V0dGluZyBpbml0aWFsIGlucHV0cyBvZiBkaXJlY3RpdmVzLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVlbGVtZW50Q29udGFpbmVyU3RhcnQoaW5kZXgsIGF0dHJzSW5kZXgsIGxvY2FsUmVmc0luZGV4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICBjb25zdCBhZGp1c3RlZEluZGV4ID0gaW5kZXggKyBIRUFERVJfT0ZGU0VUO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXcsIGFkanVzdGVkSW5kZXgpO1xuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnRFcXVhbChnZXRCaW5kaW5nSW5kZXgoKSwgdFZpZXcuYmluZGluZ1N0YXJ0SW5kZXgsICdlbGVtZW50IGNvbnRhaW5lcnMgc2hvdWxkIGJlIGNyZWF0ZWQgYmVmb3JlIGFueSBiaW5kaW5ncycpO1xuICAgIGNvbnN0IHROb2RlID0gdFZpZXcuZmlyc3RDcmVhdGVQYXNzID9cbiAgICAgICAgZWxlbWVudENvbnRhaW5lclN0YXJ0Rmlyc3RDcmVhdGVQYXNzKGFkanVzdGVkSW5kZXgsIHRWaWV3LCBsVmlldywgYXR0cnNJbmRleCwgbG9jYWxSZWZzSW5kZXgpIDpcbiAgICAgICAgdFZpZXcuZGF0YVthZGp1c3RlZEluZGV4XTtcbiAgICBzZXRDdXJyZW50VE5vZGUodE5vZGUsIHRydWUpO1xuICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUucmVuZGVyZXJDcmVhdGVDb21tZW50Kys7XG4gICAgY29uc3QgbmF0aXZlID0gbFZpZXdbYWRqdXN0ZWRJbmRleF0gPVxuICAgICAgICBsVmlld1tSRU5ERVJFUl0uY3JlYXRlQ29tbWVudChuZ0Rldk1vZGUgPyAnbmctY29udGFpbmVyJyA6ICcnKTtcbiAgICBhcHBlbmRDaGlsZCh0VmlldywgbFZpZXcsIG5hdGl2ZSwgdE5vZGUpO1xuICAgIGF0dGFjaFBhdGNoRGF0YShuYXRpdmUsIGxWaWV3KTtcbiAgICBpZiAoaXNEaXJlY3RpdmVIb3N0KHROb2RlKSkge1xuICAgICAgICBjcmVhdGVEaXJlY3RpdmVzSW5zdGFuY2VzKHRWaWV3LCBsVmlldywgdE5vZGUpO1xuICAgICAgICBleGVjdXRlQ29udGVudFF1ZXJpZXModFZpZXcsIHROb2RlLCBsVmlldyk7XG4gICAgfVxuICAgIGlmIChsb2NhbFJlZnNJbmRleCAhPSBudWxsKSB7XG4gICAgICAgIHNhdmVSZXNvbHZlZExvY2Fsc0luRGF0YShsVmlldywgdE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtWVsZW1lbnRDb250YWluZXJTdGFydDtcbn1cbi8qKlxuICogTWFyayB0aGUgZW5kIG9mIHRoZSA8bmctY29udGFpbmVyPi5cbiAqIEByZXR1cm5zIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBpdHNlbGYgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1ZWxlbWVudENvbnRhaW5lckVuZCgpIHtcbiAgICBsZXQgY3VycmVudFROb2RlID0gZ2V0Q3VycmVudFROb2RlKCk7XG4gICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgIGlmIChpc0N1cnJlbnRUTm9kZVBhcmVudCgpKSB7XG4gICAgICAgIHNldEN1cnJlbnRUTm9kZUFzTm90UGFyZW50KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SGFzUGFyZW50KGN1cnJlbnRUTm9kZSk7XG4gICAgICAgIGN1cnJlbnRUTm9kZSA9IGN1cnJlbnRUTm9kZS5wYXJlbnQ7XG4gICAgICAgIHNldEN1cnJlbnRUTm9kZShjdXJyZW50VE5vZGUsIGZhbHNlKTtcbiAgICB9XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlVHlwZShjdXJyZW50VE5vZGUsIDggLyogRWxlbWVudENvbnRhaW5lciAqLyk7XG4gICAgaWYgKHRWaWV3LmZpcnN0Q3JlYXRlUGFzcykge1xuICAgICAgICByZWdpc3RlclBvc3RPcmRlckhvb2tzKHRWaWV3LCBjdXJyZW50VE5vZGUpO1xuICAgICAgICBpZiAoaXNDb250ZW50UXVlcnlIb3N0KGN1cnJlbnRUTm9kZSkpIHtcbiAgICAgICAgICAgIHRWaWV3LnF1ZXJpZXMuZWxlbWVudEVuZChjdXJyZW50VE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiDJtcm1ZWxlbWVudENvbnRhaW5lckVuZDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBlbXB0eSBsb2dpY2FsIGNvbnRhaW5lciB1c2luZyB7QGxpbmsgZWxlbWVudENvbnRhaW5lclN0YXJ0fVxuICogYW5kIHtAbGluayBlbGVtZW50Q29udGFpbmVyRW5kfVxuICpcbiAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiB0aGUgZWxlbWVudCBpbiB0aGUgTFZpZXcgYXJyYXlcbiAqIEBwYXJhbSBhdHRyc0luZGV4IEluZGV4IG9mIHRoZSBjb250YWluZXIgYXR0cmlidXRlcyBpbiB0aGUgYGNvbnN0c2AgYXJyYXkuXG4gKiBAcGFyYW0gbG9jYWxSZWZzSW5kZXggSW5kZXggb2YgdGhlIGNvbnRhaW5lcidzIGxvY2FsIHJlZmVyZW5jZXMgaW4gdGhlIGBjb25zdHNgIGFycmF5LlxuICogQHJldHVybnMgVGhpcyBmdW5jdGlvbiByZXR1cm5zIGl0c2VsZiBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVlbGVtZW50Q29udGFpbmVyKGluZGV4LCBhdHRyc0luZGV4LCBsb2NhbFJlZnNJbmRleCkge1xuICAgIMm1ybVlbGVtZW50Q29udGFpbmVyU3RhcnQoaW5kZXgsIGF0dHJzSW5kZXgsIGxvY2FsUmVmc0luZGV4KTtcbiAgICDJtcm1ZWxlbWVudENvbnRhaW5lckVuZCgpO1xuICAgIHJldHVybiDJtcm1ZWxlbWVudENvbnRhaW5lcjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IE9wYXF1ZVZpZXdTdGF0ZSBpbnN0YW5jZS5cbiAqXG4gKiBVc2VkIGluIGNvbmp1bmN0aW9uIHdpdGggdGhlIHJlc3RvcmVWaWV3KCkgaW5zdHJ1Y3Rpb24gdG8gc2F2ZSBhIHNuYXBzaG90XG4gKiBvZiB0aGUgY3VycmVudCB2aWV3IGFuZCByZXN0b3JlIGl0IHdoZW4gbGlzdGVuZXJzIGFyZSBpbnZva2VkLiBUaGlzIGFsbG93c1xuICogd2Fsa2luZyB0aGUgZGVjbGFyYXRpb24gdmlldyB0cmVlIGluIGxpc3RlbmVycyB0byBnZXQgdmFycyBmcm9tIHBhcmVudCB2aWV3cy5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Z2V0Q3VycmVudFZpZXcoKSB7XG4gICAgcmV0dXJuIGdldExWaWV3KCk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGFyZ3VtZW50IGlzIHNoYXBlZCBsaWtlIGEgUHJvbWlzZVxuICovXG5mdW5jdGlvbiBpc1Byb21pc2Uob2JqKSB7XG4gICAgLy8gYWxsb3cgYW55IFByb21pc2UvQSsgY29tcGxpYW50IHRoZW5hYmxlLlxuICAgIC8vIEl0J3MgdXAgdG8gdGhlIGNhbGxlciB0byBlbnN1cmUgdGhhdCBvYmoudGhlbiBjb25mb3JtcyB0byB0aGUgc3BlY1xuICAgIHJldHVybiAhIW9iaiAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG4vKipcbiAqIERldGVybWluZSBpZiB0aGUgYXJndW1lbnQgaXMgYSBTdWJzY3JpYmFibGVcbiAqL1xuZnVuY3Rpb24gaXNTdWJzY3JpYmFibGUob2JqKSB7XG4gICAgcmV0dXJuICEhb2JqICYmIHR5cGVvZiBvYmouc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nO1xufVxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIE9ic2VydmFibGVcbiAqXG4gKiBTdHJpY3RseSB0aGlzIHRlc3RzIHRoYXQgdGhlIGBvYmpgIGlzIGBTdWJzY3JpYmFibGVgLCBzaW5jZSBgT2JzZXJ2YWJsZWBcbiAqIHR5cGVzIG5lZWQgYWRkaXRpb25hbCBtZXRob2RzLCBzdWNoIGFzIGBsaWZ0KClgLiBCdXQgaXQgaXMgYWRlcXVhdGUgZm9yIG91clxuICogbmVlZHMgc2luY2Ugd2l0aGluIHRoZSBBbmd1bGFyIGZyYW1ld29yayBjb2RlIHdlIG9ubHkgZXZlciBuZWVkIHRvIHVzZSB0aGVcbiAqIGBzdWJzY3JpYmUoKWAgbWV0aG9kLCBhbmQgUnhKUyBoYXMgbWVjaGFuaXNtcyB0byB3cmFwIGBTdWJzY3JpYmFibGVgIG9iamVjdHNcbiAqIGludG8gYE9ic2VydmFibGVgIGFzIG5lZWRlZC5cbiAqL1xuY29uc3QgaXNPYnNlcnZhYmxlID0gaXNTdWJzY3JpYmFibGU7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBjdXJyZW50IG5vZGUuXG4gKlxuICogSWYgYW4gb3V0cHV0IGV4aXN0cyBvbiBvbmUgb2YgdGhlIG5vZGUncyBkaXJlY3RpdmVzLCBpdCBhbHNvIHN1YnNjcmliZXMgdG8gdGhlIG91dHB1dFxuICogYW5kIHNhdmVzIHRoZSBzdWJzY3JpcHRpb24gZm9yIGxhdGVyIGNsZWFudXAuXG4gKlxuICogQHBhcmFtIGV2ZW50TmFtZSBOYW1lIG9mIHRoZSBldmVudFxuICogQHBhcmFtIGxpc3RlbmVyRm4gVGhlIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIGV2ZW50IGVtaXRzXG4gKiBAcGFyYW0gdXNlQ2FwdHVyZSBXaGV0aGVyIG9yIG5vdCB0byB1c2UgY2FwdHVyZSBpbiBldmVudCBsaXN0ZW5lclxuICogQHBhcmFtIGV2ZW50VGFyZ2V0UmVzb2x2ZXIgRnVuY3Rpb24gdGhhdCByZXR1cm5zIGdsb2JhbCB0YXJnZXQgaW5mb3JtYXRpb24gaW4gY2FzZSB0aGlzIGxpc3RlbmVyXG4gKiBzaG91bGQgYmUgYXR0YWNoZWQgdG8gYSBnbG9iYWwgb2JqZWN0IGxpa2Ugd2luZG93LCBkb2N1bWVudCBvciBib2R5XG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWxpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXJGbiwgdXNlQ2FwdHVyZSwgZXZlbnRUYXJnZXRSZXNvbHZlcikge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCB0VmlldyA9IGdldFRWaWV3KCk7XG4gICAgY29uc3QgdE5vZGUgPSBnZXRDdXJyZW50VE5vZGUoKTtcbiAgICBsaXN0ZW5lckludGVybmFsKHRWaWV3LCBsVmlldywgbFZpZXdbUkVOREVSRVJdLCB0Tm9kZSwgZXZlbnROYW1lLCBsaXN0ZW5lckZuLCAhIXVzZUNhcHR1cmUsIGV2ZW50VGFyZ2V0UmVzb2x2ZXIpO1xuICAgIHJldHVybiDJtcm1bGlzdGVuZXI7XG59XG4vKipcbiAqIFJlZ2lzdGVycyBhIHN5bnRoZXRpYyBob3N0IGxpc3RlbmVyIChlLmcuIGAoQGZvby5zdGFydClgKSBvbiBhIGNvbXBvbmVudCBvciBkaXJlY3RpdmUuXG4gKlxuICogVGhpcyBpbnN0cnVjdGlvbiBpcyBmb3IgY29tcGF0aWJpbGl0eSBwdXJwb3NlcyBhbmQgaXMgZGVzaWduZWQgdG8gZW5zdXJlIHRoYXQgYVxuICogc3ludGhldGljIGhvc3QgbGlzdGVuZXIgKGUuZy4gYEBIb3N0TGlzdGVuZXIoJ0Bmb28uc3RhcnQnKWApIHByb3Blcmx5IGdldHMgcmVuZGVyZWRcbiAqIGluIHRoZSBjb21wb25lbnQncyByZW5kZXJlci4gTm9ybWFsbHkgYWxsIGhvc3QgbGlzdGVuZXJzIGFyZSBldmFsdWF0ZWQgd2l0aCB0aGVcbiAqIHBhcmVudCBjb21wb25lbnQncyByZW5kZXJlciwgYnV0LCBpbiB0aGUgY2FzZSBvZiBhbmltYXRpb24gQHRyaWdnZXJzLCB0aGV5IG5lZWRcbiAqIHRvIGJlIGV2YWx1YXRlZCB3aXRoIHRoZSBzdWIgY29tcG9uZW50J3MgcmVuZGVyZXIgKGJlY2F1c2UgdGhhdCdzIHdoZXJlIHRoZVxuICogYW5pbWF0aW9uIHRyaWdnZXJzIGFyZSBkZWZpbmVkKS5cbiAqXG4gKiBEbyBub3QgdXNlIHRoaXMgaW5zdHJ1Y3Rpb24gYXMgYSByZXBsYWNlbWVudCBmb3IgYGxpc3RlbmVyYC4gVGhpcyBpbnN0cnVjdGlvblxuICogb25seSBleGlzdHMgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgVmlld0VuZ2luZSdzIGhvc3QgYmluZGluZyBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0gZXZlbnROYW1lIE5hbWUgb2YgdGhlIGV2ZW50XG4gKiBAcGFyYW0gbGlzdGVuZXJGbiBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gZXZlbnQgZW1pdHNcbiAqIEBwYXJhbSB1c2VDYXB0dXJlIFdoZXRoZXIgb3Igbm90IHRvIHVzZSBjYXB0dXJlIGluIGV2ZW50IGxpc3RlbmVyXG4gKiBAcGFyYW0gZXZlbnRUYXJnZXRSZXNvbHZlciBGdW5jdGlvbiB0aGF0IHJldHVybnMgZ2xvYmFsIHRhcmdldCBpbmZvcm1hdGlvbiBpbiBjYXNlIHRoaXMgbGlzdGVuZXJcbiAqIHNob3VsZCBiZSBhdHRhY2hlZCB0byBhIGdsb2JhbCBvYmplY3QgbGlrZSB3aW5kb3csIGRvY3VtZW50IG9yIGJvZHlcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3ludGhldGljSG9zdExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXJGbikge1xuICAgIGNvbnN0IHROb2RlID0gZ2V0Q3VycmVudFROb2RlKCk7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICBjb25zdCBjdXJyZW50RGVmID0gZ2V0Q3VycmVudERpcmVjdGl2ZURlZih0Vmlldy5kYXRhKTtcbiAgICBjb25zdCByZW5kZXJlciA9IGxvYWRDb21wb25lbnRSZW5kZXJlcihjdXJyZW50RGVmLCB0Tm9kZSwgbFZpZXcpO1xuICAgIGxpc3RlbmVySW50ZXJuYWwodFZpZXcsIGxWaWV3LCByZW5kZXJlciwgdE5vZGUsIGV2ZW50TmFtZSwgbGlzdGVuZXJGbiwgZmFsc2UpO1xuICAgIHJldHVybiDJtcm1c3ludGhldGljSG9zdExpc3RlbmVyO1xufVxuLyoqXG4gKiBBIHV0aWxpdHkgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgYSBnaXZlbiBlbGVtZW50IGhhcyBhbHJlYWR5IGFuIGV2ZW50IGhhbmRsZXIgcmVnaXN0ZXJlZCBmb3IgYW5cbiAqIGV2ZW50IHdpdGggYSBzcGVjaWZpZWQgbmFtZS4gVGhlIFRWaWV3LmNsZWFudXAgZGF0YSBzdHJ1Y3R1cmUgaXMgdXNlZCB0byBmaW5kIG91dCB3aGljaCBldmVudHNcbiAqIGFyZSByZWdpc3RlcmVkIGZvciBhIGdpdmVuIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIGZpbmRFeGlzdGluZ0xpc3RlbmVyKHRWaWV3LCBsVmlldywgZXZlbnROYW1lLCB0Tm9kZUlkeCkge1xuICAgIGNvbnN0IHRDbGVhbnVwID0gdFZpZXcuY2xlYW51cDtcbiAgICBpZiAodENsZWFudXAgIT0gbnVsbCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRDbGVhbnVwLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgICAgICAgICAgY29uc3QgY2xlYW51cEV2ZW50TmFtZSA9IHRDbGVhbnVwW2ldO1xuICAgICAgICAgICAgaWYgKGNsZWFudXBFdmVudE5hbWUgPT09IGV2ZW50TmFtZSAmJiB0Q2xlYW51cFtpICsgMV0gPT09IHROb2RlSWR4KSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBmb3VuZCBhIG1hdGNoaW5nIGV2ZW50IG5hbWUgb24gdGhlIHNhbWUgbm9kZSBidXQgaXQgbWlnaHQgbm90IGhhdmUgYmVlblxuICAgICAgICAgICAgICAgIC8vIHJlZ2lzdGVyZWQgeWV0LCBzbyB3ZSBtdXN0IGV4cGxpY2l0bHkgdmVyaWZ5IGVudHJpZXMgaW4gdGhlIExWaWV3IGNsZWFudXAgZGF0YVxuICAgICAgICAgICAgICAgIC8vIHN0cnVjdHVyZXMuXG4gICAgICAgICAgICAgICAgY29uc3QgbENsZWFudXAgPSBsVmlld1tDTEVBTlVQXTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0ZW5lcklkeEluTENsZWFudXAgPSB0Q2xlYW51cFtpICsgMl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxDbGVhbnVwLmxlbmd0aCA+IGxpc3RlbmVySWR4SW5MQ2xlYW51cCA/IGxDbGVhbnVwW2xpc3RlbmVySWR4SW5MQ2xlYW51cF0gOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVFZpZXcuY2xlYW51cCBjYW4gaGF2ZSBhIG1peCBvZiA0LWVsZW1lbnRzIGVudHJpZXMgKGZvciBldmVudCBoYW5kbGVyIGNsZWFudXBzKSBvclxuICAgICAgICAgICAgLy8gMi1lbGVtZW50IGVudHJpZXMgKGZvciBkaXJlY3RpdmUgYW5kIHF1ZXJpZXMgZGVzdHJveSBob29rcykuIEFzIHN1Y2ggd2UgY2FuIGVuY291bnRlclxuICAgICAgICAgICAgLy8gYmxvY2tzIG9mIDQgb3IgMiBpdGVtcyBpbiB0aGUgdFZpZXcuY2xlYW51cCBhbmQgdGhpcyBpcyB3aHkgd2UgaXRlcmF0ZSBvdmVyIDIgZWxlbWVudHNcbiAgICAgICAgICAgIC8vIGZpcnN0IGFuZCBqdW1wIGFub3RoZXIgMiBlbGVtZW50cyBpZiB3ZSBkZXRlY3QgbGlzdGVuZXJzIGNsZWFudXAgKDQgZWxlbWVudHMpLiBBbHNvIGNoZWNrXG4gICAgICAgICAgICAvLyBkb2N1bWVudGF0aW9uIG9mIFRWaWV3LmNsZWFudXAgZm9yIG1vcmUgZGV0YWlscyBvZiB0aGlzIGRhdGEgc3RydWN0dXJlIGxheW91dC5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2xlYW51cEV2ZW50TmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBsaXN0ZW5lckludGVybmFsKHRWaWV3LCBsVmlldywgcmVuZGVyZXIsIHROb2RlLCBldmVudE5hbWUsIGxpc3RlbmVyRm4sIHVzZUNhcHR1cmUsIGV2ZW50VGFyZ2V0UmVzb2x2ZXIpIHtcbiAgICBjb25zdCBpc1ROb2RlRGlyZWN0aXZlSG9zdCA9IGlzRGlyZWN0aXZlSG9zdCh0Tm9kZSk7XG4gICAgY29uc3QgZmlyc3RDcmVhdGVQYXNzID0gdFZpZXcuZmlyc3RDcmVhdGVQYXNzO1xuICAgIGNvbnN0IHRDbGVhbnVwID0gZmlyc3RDcmVhdGVQYXNzICYmIGdldE9yQ3JlYXRlVFZpZXdDbGVhbnVwKHRWaWV3KTtcbiAgICBjb25zdCBjb250ZXh0ID0gbFZpZXdbQ09OVEVYVF07XG4gICAgLy8gV2hlbiB0aGUgybXJtWxpc3RlbmVyIGluc3RydWN0aW9uIHdhcyBnZW5lcmF0ZWQgYW5kIGlzIGV4ZWN1dGVkIHdlIGtub3cgdGhhdCB0aGVyZSBpcyBlaXRoZXIgYVxuICAgIC8vIG5hdGl2ZSBsaXN0ZW5lciBvciBhIGRpcmVjdGl2ZSBvdXRwdXQgb24gdGhpcyBlbGVtZW50LiBBcyBzdWNoIHdlIHdlIGtub3cgdGhhdCB3ZSB3aWxsIGhhdmUgdG9cbiAgICAvLyByZWdpc3RlciBhIGxpc3RlbmVyIGFuZCBzdG9yZSBpdHMgY2xlYW51cCBmdW5jdGlvbiBvbiBMVmlldy5cbiAgICBjb25zdCBsQ2xlYW51cCA9IGdldE9yQ3JlYXRlTFZpZXdDbGVhbnVwKGxWaWV3KTtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0VE5vZGVUeXBlKHROb2RlLCAzIC8qIEFueVJOb2RlICovIHwgMTIgLyogQW55Q29udGFpbmVyICovKTtcbiAgICBsZXQgcHJvY2Vzc091dHB1dHMgPSB0cnVlO1xuICAgIC8vIEFkZGluZyBhIG5hdGl2ZSBldmVudCBsaXN0ZW5lciBpcyBhcHBsaWNhYmxlIHdoZW46XG4gICAgLy8gLSBUaGUgY29ycmVzcG9uZGluZyBUTm9kZSByZXByZXNlbnRzIGEgRE9NIGVsZW1lbnQuXG4gICAgLy8gLSBUaGUgZXZlbnQgdGFyZ2V0IGhhcyBhIHJlc29sdmVyICh1c3VhbGx5IHJlc3VsdGluZyBpbiBhIGdsb2JhbCBvYmplY3QsXG4gICAgLy8gICBzdWNoIGFzIGB3aW5kb3dgIG9yIGBkb2N1bWVudGApLlxuICAgIGlmICgodE5vZGUudHlwZSAmIDMgLyogQW55Uk5vZGUgKi8pIHx8IGV2ZW50VGFyZ2V0UmVzb2x2ZXIpIHtcbiAgICAgICAgY29uc3QgbmF0aXZlID0gZ2V0TmF0aXZlQnlUTm9kZSh0Tm9kZSwgbFZpZXcpO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudFRhcmdldFJlc29sdmVyID8gZXZlbnRUYXJnZXRSZXNvbHZlcihuYXRpdmUpIDogbmF0aXZlO1xuICAgICAgICBjb25zdCBsQ2xlYW51cEluZGV4ID0gbENsZWFudXAubGVuZ3RoO1xuICAgICAgICBjb25zdCBpZHhPclRhcmdldEdldHRlciA9IGV2ZW50VGFyZ2V0UmVzb2x2ZXIgP1xuICAgICAgICAgICAgKF9sVmlldykgPT4gZXZlbnRUYXJnZXRSZXNvbHZlcih1bndyYXBSTm9kZShfbFZpZXdbdE5vZGUuaW5kZXhdKSkgOlxuICAgICAgICAgICAgdE5vZGUuaW5kZXg7XG4gICAgICAgIC8vIEluIG9yZGVyIHRvIG1hdGNoIGN1cnJlbnQgYmVoYXZpb3IsIG5hdGl2ZSBET00gZXZlbnQgbGlzdGVuZXJzIG11c3QgYmUgYWRkZWQgZm9yIGFsbFxuICAgICAgICAvLyBldmVudHMgKGluY2x1ZGluZyBvdXRwdXRzKS5cbiAgICAgICAgaWYgKGlzUHJvY2VkdXJhbFJlbmRlcmVyKHJlbmRlcmVyKSkge1xuICAgICAgICAgICAgLy8gVGhlcmUgbWlnaHQgYmUgY2FzZXMgd2hlcmUgbXVsdGlwbGUgZGlyZWN0aXZlcyBvbiB0aGUgc2FtZSBlbGVtZW50IHRyeSB0byByZWdpc3RlciBhbiBldmVudFxuICAgICAgICAgICAgLy8gaGFuZGxlciBmdW5jdGlvbiBmb3IgdGhlIHNhbWUgZXZlbnQuIEluIHRoaXMgc2l0dWF0aW9uIHdlIHdhbnQgdG8gYXZvaWQgcmVnaXN0cmF0aW9uIG9mXG4gICAgICAgICAgICAvLyBzZXZlcmFsIG5hdGl2ZSBsaXN0ZW5lcnMgYXMgZWFjaCByZWdpc3RyYXRpb24gd291bGQgYmUgaW50ZXJjZXB0ZWQgYnkgTmdab25lIGFuZFxuICAgICAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZGV0ZWN0aW9uLiBUaGlzIHdvdWxkIG1lYW4gdGhhdCBhIHNpbmdsZSB1c2VyIGFjdGlvbiB3b3VsZCByZXN1bHQgaW4gc2V2ZXJhbFxuICAgICAgICAgICAgLy8gY2hhbmdlIGRldGVjdGlvbnMgYmVpbmcgaW52b2tlZC4gVG8gYXZvaWQgdGhpcyBzaXR1YXRpb24gd2Ugd2FudCB0byBoYXZlIG9ubHkgb25lIGNhbGwgdG9cbiAgICAgICAgICAgIC8vIG5hdGl2ZSBoYW5kbGVyIHJlZ2lzdHJhdGlvbiAoZm9yIHRoZSBzYW1lIGVsZW1lbnQgYW5kIHNhbWUgdHlwZSBvZiBldmVudCkuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSW4gb3JkZXIgdG8gaGF2ZSBqdXN0IG9uZSBuYXRpdmUgZXZlbnQgaGFuZGxlciBpbiBwcmVzZW5jZSBvZiBtdWx0aXBsZSBoYW5kbGVyIGZ1bmN0aW9ucyxcbiAgICAgICAgICAgIC8vIHdlIGp1c3QgcmVnaXN0ZXIgYSBmaXJzdCBoYW5kbGVyIGZ1bmN0aW9uIGFzIGEgbmF0aXZlIGV2ZW50IGxpc3RlbmVyIGFuZCB0aGVuIGNoYWluXG4gICAgICAgICAgICAvLyAoY29hbGVzY2UpIG90aGVyIGhhbmRsZXIgZnVuY3Rpb25zIG9uIHRvcCBvZiB0aGUgZmlyc3QgbmF0aXZlIGhhbmRsZXIgZnVuY3Rpb24uXG4gICAgICAgICAgICBsZXQgZXhpc3RpbmdMaXN0ZW5lciA9IG51bGw7XG4gICAgICAgICAgICAvLyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBjb2FsZXNjaW5nIGRlc2NyaWJlZCBoZXJlIGRvZXNuJ3QgaGFwcGVuIGZvciBldmVudHMgc3BlY2lmeWluZyBhblxuICAgICAgICAgICAgLy8gYWx0ZXJuYXRpdmUgdGFyZ2V0IChleC4gKGRvY3VtZW50OmNsaWNrKSkgLSB0aGlzIGlzIHRvIGtlZXAgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIHRoZVxuICAgICAgICAgICAgLy8gdmlldyBlbmdpbmUuXG4gICAgICAgICAgICAvLyBBbHNvLCB3ZSBkb24ndCBoYXZlIHRvIHNlYXJjaCBmb3IgZXhpc3RpbmcgbGlzdGVuZXJzIGlzIHRoZXJlIGFyZSBubyBkaXJlY3RpdmVzXG4gICAgICAgICAgICAvLyBtYXRjaGluZyBvbiBhIGdpdmVuIG5vZGUgYXMgd2UgY2FuJ3QgcmVnaXN0ZXIgbXVsdGlwbGUgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBzYW1lIGV2ZW50IGluXG4gICAgICAgICAgICAvLyBhIHRlbXBsYXRlICh0aGlzIHdvdWxkIG1lYW4gaGF2aW5nIGR1cGxpY2F0ZSBhdHRyaWJ1dGVzKS5cbiAgICAgICAgICAgIGlmICghZXZlbnRUYXJnZXRSZXNvbHZlciAmJiBpc1ROb2RlRGlyZWN0aXZlSG9zdCkge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nTGlzdGVuZXIgPSBmaW5kRXhpc3RpbmdMaXN0ZW5lcih0VmlldywgbFZpZXcsIGV2ZW50TmFtZSwgdE5vZGUuaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV4aXN0aW5nTGlzdGVuZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBBdHRhY2ggYSBuZXcgbGlzdGVuZXIgdG8gY29hbGVzY2VkIGxpc3RlbmVycyBsaXN0LCBtYWludGFpbmluZyB0aGUgb3JkZXIgaW4gd2hpY2hcbiAgICAgICAgICAgICAgICAvLyBsaXN0ZW5lcnMgYXJlIHJlZ2lzdGVyZWQuIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLCB3ZSBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBsYXN0XG4gICAgICAgICAgICAgICAgLy8gbGlzdGVuZXIgaW4gdGhhdCBsaXN0IChpbiBgX19uZ0xhc3RMaXN0ZW5lckZuX19gIGZpZWxkKSwgc28gd2UgY2FuIGF2b2lkIGdvaW5nIHRocm91Z2hcbiAgICAgICAgICAgICAgICAvLyB0aGUgZW50aXJlIHNldCBlYWNoIHRpbWUgd2UgbmVlZCB0byBhZGQgYSBuZXcgbGlzdGVuZXIuXG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdExpc3RlbmVyRm4gPSBleGlzdGluZ0xpc3RlbmVyLl9fbmdMYXN0TGlzdGVuZXJGbl9fIHx8IGV4aXN0aW5nTGlzdGVuZXI7XG4gICAgICAgICAgICAgICAgbGFzdExpc3RlbmVyRm4uX19uZ05leHRMaXN0ZW5lckZuX18gPSBsaXN0ZW5lckZuO1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nTGlzdGVuZXIuX19uZ0xhc3RMaXN0ZW5lckZuX18gPSBsaXN0ZW5lckZuO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NPdXRwdXRzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lckZuID0gd3JhcExpc3RlbmVyKHROb2RlLCBsVmlldywgY29udGV4dCwgbGlzdGVuZXJGbiwgZmFsc2UgLyoqIHByZXZlbnREZWZhdWx0ICovKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGVhbnVwRm4gPSByZW5kZXJlci5saXN0ZW4odGFyZ2V0LCBldmVudE5hbWUsIGxpc3RlbmVyRm4pO1xuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUucmVuZGVyZXJBZGRFdmVudExpc3RlbmVyKys7XG4gICAgICAgICAgICAgICAgbENsZWFudXAucHVzaChsaXN0ZW5lckZuLCBjbGVhbnVwRm4pO1xuICAgICAgICAgICAgICAgIHRDbGVhbnVwICYmIHRDbGVhbnVwLnB1c2goZXZlbnROYW1lLCBpZHhPclRhcmdldEdldHRlciwgbENsZWFudXBJbmRleCwgbENsZWFudXBJbmRleCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXJGbiA9IHdyYXBMaXN0ZW5lcih0Tm9kZSwgbFZpZXcsIGNvbnRleHQsIGxpc3RlbmVyRm4sIHRydWUgLyoqIHByZXZlbnREZWZhdWx0ICovKTtcbiAgICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXJGbiwgdXNlQ2FwdHVyZSk7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyQWRkRXZlbnRMaXN0ZW5lcisrO1xuICAgICAgICAgICAgbENsZWFudXAucHVzaChsaXN0ZW5lckZuKTtcbiAgICAgICAgICAgIHRDbGVhbnVwICYmIHRDbGVhbnVwLnB1c2goZXZlbnROYW1lLCBpZHhPclRhcmdldEdldHRlciwgbENsZWFudXBJbmRleCwgdXNlQ2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIEV2ZW4gaWYgdGhlcmUgaXMgbm8gbmF0aXZlIGxpc3RlbmVyIHRvIGFkZCwgd2Ugc3RpbGwgbmVlZCB0byB3cmFwIHRoZSBsaXN0ZW5lciBzbyB0aGF0IE9uUHVzaFxuICAgICAgICAvLyBhbmNlc3RvcnMgYXJlIG1hcmtlZCBkaXJ0eSB3aGVuIGFuIGV2ZW50IG9jY3Vycy5cbiAgICAgICAgbGlzdGVuZXJGbiA9IHdyYXBMaXN0ZW5lcih0Tm9kZSwgbFZpZXcsIGNvbnRleHQsIGxpc3RlbmVyRm4sIGZhbHNlIC8qKiBwcmV2ZW50RGVmYXVsdCAqLyk7XG4gICAgfVxuICAgIC8vIHN1YnNjcmliZSB0byBkaXJlY3RpdmUgb3V0cHV0c1xuICAgIGNvbnN0IG91dHB1dHMgPSB0Tm9kZS5vdXRwdXRzO1xuICAgIGxldCBwcm9wcztcbiAgICBpZiAocHJvY2Vzc091dHB1dHMgJiYgb3V0cHV0cyAhPT0gbnVsbCAmJiAocHJvcHMgPSBvdXRwdXRzW2V2ZW50TmFtZV0pKSB7XG4gICAgICAgIGNvbnN0IHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuICAgICAgICBpZiAocHJvcHNMZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHNMZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gcHJvcHNbaV07XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydEluZGV4SW5SYW5nZShsVmlldywgaW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pbmlmaWVkTmFtZSA9IHByb3BzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3RpdmVJbnN0YW5jZSA9IGxWaWV3W2luZGV4XTtcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBkaXJlY3RpdmVJbnN0YW5jZVttaW5pZmllZE5hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChuZ0Rldk1vZGUgJiYgIWlzT2JzZXJ2YWJsZShvdXRwdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQE91dHB1dCAke21pbmlmaWVkTmFtZX0gbm90IGluaXRpYWxpemVkIGluICcke2RpcmVjdGl2ZUluc3RhbmNlLmNvbnN0cnVjdG9yLm5hbWV9Jy5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gb3V0cHV0LnN1YnNjcmliZShsaXN0ZW5lckZuKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpZHggPSBsQ2xlYW51cC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgbENsZWFudXAucHVzaChsaXN0ZW5lckZuLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIHRDbGVhbnVwICYmIHRDbGVhbnVwLnB1c2goZXZlbnROYW1lLCB0Tm9kZS5pbmRleCwgaWR4LCAtKGlkeCArIDEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGV4ZWN1dGVMaXN0ZW5lcldpdGhFcnJvckhhbmRsaW5nKGxWaWV3LCBjb250ZXh0LCBsaXN0ZW5lckZuLCBlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcHJvZmlsZXIoNiAvKiBPdXRwdXRTdGFydCAqLywgY29udGV4dCwgbGlzdGVuZXJGbik7XG4gICAgICAgIC8vIE9ubHkgZXhwbGljaXRseSByZXR1cm5pbmcgZmFsc2UgZnJvbSBhIGxpc3RlbmVyIHNob3VsZCBwcmV2ZW50RGVmYXVsdFxuICAgICAgICByZXR1cm4gbGlzdGVuZXJGbihlKSAhPT0gZmFsc2U7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihsVmlldywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICBwcm9maWxlcig3IC8qIE91dHB1dEVuZCAqLywgY29udGV4dCwgbGlzdGVuZXJGbik7XG4gICAgfVxufVxuLyoqXG4gKiBXcmFwcyBhbiBldmVudCBsaXN0ZW5lciB3aXRoIGEgZnVuY3Rpb24gdGhhdCBtYXJrcyBhbmNlc3RvcnMgZGlydHkgYW5kIHByZXZlbnRzIGRlZmF1bHQgYmVoYXZpb3IsXG4gKiBpZiBhcHBsaWNhYmxlLlxuICpcbiAqIEBwYXJhbSB0Tm9kZSBUaGUgVE5vZGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbGlzdGVuZXJcbiAqIEBwYXJhbSBsVmlldyBUaGUgTFZpZXcgdGhhdCBjb250YWlucyB0aGlzIGxpc3RlbmVyXG4gKiBAcGFyYW0gbGlzdGVuZXJGbiBUaGUgbGlzdGVuZXIgZnVuY3Rpb24gdG8gY2FsbFxuICogQHBhcmFtIHdyYXBXaXRoUHJldmVudERlZmF1bHQgV2hldGhlciBvciBub3QgdG8gcHJldmVudCBkZWZhdWx0IGJlaGF2aW9yXG4gKiAodGhlIHByb2NlZHVyYWwgcmVuZGVyZXIgZG9lcyB0aGlzIGFscmVhZHksIHNvIGluIHRob3NlIGNhc2VzLCB3ZSBzaG91bGQgc2tpcClcbiAqL1xuZnVuY3Rpb24gd3JhcExpc3RlbmVyKHROb2RlLCBsVmlldywgY29udGV4dCwgbGlzdGVuZXJGbiwgd3JhcFdpdGhQcmV2ZW50RGVmYXVsdCkge1xuICAgIC8vIE5vdGU6IHdlIGFyZSBwZXJmb3JtaW5nIG1vc3Qgb2YgdGhlIHdvcmsgaW4gdGhlIGxpc3RlbmVyIGZ1bmN0aW9uIGl0c2VsZlxuICAgIC8vIHRvIG9wdGltaXplIGxpc3RlbmVyIHJlZ2lzdHJhdGlvbi5cbiAgICByZXR1cm4gZnVuY3Rpb24gd3JhcExpc3RlbmVySW5fbWFya0RpcnR5QW5kUHJldmVudERlZmF1bHQoZSkge1xuICAgICAgICAvLyBJdnkgdXNlcyBgRnVuY3Rpb25gIGFzIGEgc3BlY2lhbCB0b2tlbiB0aGF0IGFsbG93cyB1cyB0byB1bndyYXAgdGhlIGZ1bmN0aW9uXG4gICAgICAgIC8vIHNvIHRoYXQgaXQgY2FuIGJlIGludm9rZWQgcHJvZ3JhbW1hdGljYWxseSBieSBgRGVidWdOb2RlLnRyaWdnZXJFdmVudEhhbmRsZXJgLlxuICAgICAgICBpZiAoZSA9PT0gRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0ZW5lckZuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluIG9yZGVyIHRvIGJlIGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggVmlldyBFbmdpbmUsIGV2ZW50cyBvbiBjb21wb25lbnQgaG9zdCBub2Rlc1xuICAgICAgICAvLyBtdXN0IGFsc28gbWFyayB0aGUgY29tcG9uZW50IHZpZXcgaXRzZWxmIGRpcnR5IChpLmUuIHRoZSB2aWV3IHRoYXQgaXQgb3ducykuXG4gICAgICAgIGNvbnN0IHN0YXJ0VmlldyA9IHROb2RlLmZsYWdzICYgMiAvKiBpc0NvbXBvbmVudEhvc3QgKi8gP1xuICAgICAgICAgICAgZ2V0Q29tcG9uZW50TFZpZXdCeUluZGV4KHROb2RlLmluZGV4LCBsVmlldykgOlxuICAgICAgICAgICAgbFZpZXc7XG4gICAgICAgIC8vIFNlZSBpbnRlcmZhY2VzL3ZpZXcudHMgZm9yIG1vcmUgb24gTFZpZXdGbGFncy5NYW51YWxPblB1c2hcbiAgICAgICAgaWYgKChsVmlld1tGTEFHU10gJiAzMiAvKiBNYW51YWxPblB1c2ggKi8pID09PSAwKSB7XG4gICAgICAgICAgICBtYXJrVmlld0RpcnR5KHN0YXJ0Vmlldyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IGV4ZWN1dGVMaXN0ZW5lcldpdGhFcnJvckhhbmRsaW5nKGxWaWV3LCBjb250ZXh0LCBsaXN0ZW5lckZuLCBlKTtcbiAgICAgICAgLy8gQSBqdXN0LWludm9rZWQgbGlzdGVuZXIgZnVuY3Rpb24gbWlnaHQgaGF2ZSBjb2FsZXNjZWQgbGlzdGVuZXJzIHNvIHdlIG5lZWQgdG8gY2hlY2sgZm9yXG4gICAgICAgIC8vIHRoZWlyIHByZXNlbmNlIGFuZCBpbnZva2UgYXMgbmVlZGVkLlxuICAgICAgICBsZXQgbmV4dExpc3RlbmVyRm4gPSB3cmFwTGlzdGVuZXJJbl9tYXJrRGlydHlBbmRQcmV2ZW50RGVmYXVsdC5fX25nTmV4dExpc3RlbmVyRm5fXztcbiAgICAgICAgd2hpbGUgKG5leHRMaXN0ZW5lckZuKSB7XG4gICAgICAgICAgICAvLyBXZSBzaG91bGQgcHJldmVudCBkZWZhdWx0IGlmIGFueSBvZiB0aGUgbGlzdGVuZXJzIGV4cGxpY2l0bHkgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICByZXN1bHQgPSBleGVjdXRlTGlzdGVuZXJXaXRoRXJyb3JIYW5kbGluZyhsVmlldywgY29udGV4dCwgbmV4dExpc3RlbmVyRm4sIGUpICYmIHJlc3VsdDtcbiAgICAgICAgICAgIG5leHRMaXN0ZW5lckZuID0gbmV4dExpc3RlbmVyRm4uX19uZ05leHRMaXN0ZW5lckZuX187XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdyYXBXaXRoUHJldmVudERlZmF1bHQgJiYgcmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgLy8gTmVjZXNzYXJ5IGZvciBsZWdhY3kgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHByZXZlbnREZWZhdWx0IChlLmcuIElFKVxuICAgICAgICAgICAgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBSZXRyaWV2ZXMgYSBjb250ZXh0IGF0IHRoZSBsZXZlbCBzcGVjaWZpZWQgYW5kIHNhdmVzIGl0IGFzIHRoZSBnbG9iYWwsIGNvbnRleHRWaWV3RGF0YS5cbiAqIFdpbGwgZ2V0IHRoZSBuZXh0IGxldmVsIHVwIGlmIGxldmVsIGlzIG5vdCBzcGVjaWZpZWQuXG4gKlxuICogVGhpcyBpcyB1c2VkIHRvIHNhdmUgY29udGV4dHMgb2YgcGFyZW50IHZpZXdzIHNvIHRoZXkgY2FuIGJlIGJvdW5kIGluIGVtYmVkZGVkIHZpZXdzLCBvclxuICogaW4gY29uanVuY3Rpb24gd2l0aCByZWZlcmVuY2UoKSB0byBiaW5kIGEgcmVmIGZyb20gYSBwYXJlbnQgdmlldy5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgVGhlIHJlbGF0aXZlIGxldmVsIG9mIHRoZSB2aWV3IGZyb20gd2hpY2ggdG8gZ3JhYiBjb250ZXh0IGNvbXBhcmVkIHRvIGNvbnRleHRWZXdEYXRhXG4gKiBAcmV0dXJucyBjb250ZXh0XG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtW5leHRDb250ZXh0KGxldmVsID0gMSkge1xuICAgIHJldHVybiBuZXh0Q29udGV4dEltcGwobGV2ZWwpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQ2hlY2tzIGEgZ2l2ZW4gbm9kZSBhZ2FpbnN0IG1hdGNoaW5nIHByb2plY3Rpb24gc2xvdHMgYW5kIHJldHVybnMgdGhlXG4gKiBkZXRlcm1pbmVkIHNsb3QgaW5kZXguIFJldHVybnMgXCJudWxsXCIgaWYgbm8gc2xvdCBtYXRjaGVkIHRoZSBnaXZlbiBub2RlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgaW50byBhY2NvdW50IHRoZSBwYXJzZWQgbmdQcm9qZWN0QXMgc2VsZWN0b3IgZnJvbSB0aGVcbiAqIG5vZGUncyBhdHRyaWJ1dGVzLiBJZiBwcmVzZW50LCBpdCB3aWxsIGNoZWNrIHdoZXRoZXIgdGhlIG5nUHJvamVjdEFzIHNlbGVjdG9yXG4gKiBtYXRjaGVzIGFueSBvZiB0aGUgcHJvamVjdGlvbiBzbG90IHNlbGVjdG9ycy5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hpbmdQcm9qZWN0aW9uU2xvdEluZGV4KHROb2RlLCBwcm9qZWN0aW9uU2xvdHMpIHtcbiAgICBsZXQgd2lsZGNhcmROZ0NvbnRlbnRJbmRleCA9IG51bGw7XG4gICAgY29uc3QgbmdQcm9qZWN0QXNBdHRyVmFsID0gZ2V0UHJvamVjdEFzQXR0clZhbHVlKHROb2RlKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3Rpb25TbG90cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzbG90VmFsdWUgPSBwcm9qZWN0aW9uU2xvdHNbaV07XG4gICAgICAgIC8vIFRoZSBsYXN0IHdpbGRjYXJkIHByb2plY3Rpb24gc2xvdCBzaG91bGQgbWF0Y2ggYWxsIG5vZGVzIHdoaWNoIGFyZW4ndCBtYXRjaGluZ1xuICAgICAgICAvLyBhbnkgc2VsZWN0b3IuIFRoaXMgaXMgbmVjZXNzYXJ5IHRvIGJlIGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggdmlldyBlbmdpbmUuXG4gICAgICAgIGlmIChzbG90VmFsdWUgPT09ICcqJykge1xuICAgICAgICAgICAgd2lsZGNhcmROZ0NvbnRlbnRJbmRleCA9IGk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSByYW4gaW50byBhbiBgbmdQcm9qZWN0QXNgIGF0dHJpYnV0ZSwgd2Ugc2hvdWxkIG1hdGNoIGl0cyBwYXJzZWQgc2VsZWN0b3JcbiAgICAgICAgLy8gdG8gdGhlIGxpc3Qgb2Ygc2VsZWN0b3JzLCBvdGhlcndpc2Ugd2UgZmFsbCBiYWNrIHRvIG1hdGNoaW5nIGFnYWluc3QgdGhlIG5vZGUuXG4gICAgICAgIGlmIChuZ1Byb2plY3RBc0F0dHJWYWwgPT09IG51bGwgP1xuICAgICAgICAgICAgaXNOb2RlTWF0Y2hpbmdTZWxlY3Rvckxpc3QodE5vZGUsIHNsb3RWYWx1ZSwgLyogaXNQcm9qZWN0aW9uTW9kZSAqLyB0cnVlKSA6XG4gICAgICAgICAgICBpc1NlbGVjdG9ySW5TZWxlY3Rvckxpc3QobmdQcm9qZWN0QXNBdHRyVmFsLCBzbG90VmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTsgLy8gZmlyc3QgbWF0Y2hpbmcgc2VsZWN0b3IgXCJjYXB0dXJlc1wiIGEgZ2l2ZW4gbm9kZVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB3aWxkY2FyZE5nQ29udGVudEluZGV4O1xufVxuLyoqXG4gKiBJbnN0cnVjdGlvbiB0byBkaXN0cmlidXRlIHByb2plY3RhYmxlIG5vZGVzIGFtb25nIDxuZy1jb250ZW50PiBvY2N1cnJlbmNlcyBpbiBhIGdpdmVuIHRlbXBsYXRlLlxuICogSXQgdGFrZXMgYWxsIHRoZSBzZWxlY3RvcnMgZnJvbSB0aGUgZW50aXJlIGNvbXBvbmVudCdzIHRlbXBsYXRlIGFuZCBkZWNpZGVzIHdoZXJlXG4gKiBlYWNoIHByb2plY3RlZCBub2RlIGJlbG9uZ3MgKGl0IHJlLWRpc3RyaWJ1dGVzIG5vZGVzIGFtb25nIFwiYnVja2V0c1wiIHdoZXJlIGVhY2ggXCJidWNrZXRcIiBpc1xuICogYmFja2VkIGJ5IGEgc2VsZWN0b3IpLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmVxdWlyZXMgQ1NTIHNlbGVjdG9ycyB0byBiZSBwcm92aWRlZCBpbiAyIGZvcm1zOiBwYXJzZWQgKGJ5IGEgY29tcGlsZXIpIGFuZCB0ZXh0LFxuICogdW4tcGFyc2VkIGZvcm0uXG4gKlxuICogVGhlIHBhcnNlZCBmb3JtIGlzIG5lZWRlZCBmb3IgZWZmaWNpZW50IG1hdGNoaW5nIG9mIGEgbm9kZSBhZ2FpbnN0IGEgZ2l2ZW4gQ1NTIHNlbGVjdG9yLlxuICogVGhlIHVuLXBhcnNlZCwgdGV4dHVhbCBmb3JtIGlzIG5lZWRlZCBmb3Igc3VwcG9ydCBvZiB0aGUgbmdQcm9qZWN0QXMgYXR0cmlidXRlLlxuICpcbiAqIEhhdmluZyBhIENTUyBzZWxlY3RvciBpbiAyIGRpZmZlcmVudCBmb3JtYXRzIGlzIG5vdCBpZGVhbCwgYnV0IGFsdGVybmF0aXZlcyBoYXZlIGV2ZW4gbW9yZVxuICogZHJhd2JhY2tzOlxuICogLSBoYXZpbmcgb25seSBhIHRleHR1YWwgZm9ybSB3b3VsZCByZXF1aXJlIHJ1bnRpbWUgcGFyc2luZyBvZiBDU1Mgc2VsZWN0b3JzO1xuICogLSB3ZSBjYW4ndCBoYXZlIG9ubHkgYSBwYXJzZWQgYXMgd2UgY2FuJ3QgcmUtY29uc3RydWN0IHRleHR1YWwgZm9ybSBmcm9tIGl0IChhcyBlbnRlcmVkIGJ5IGFcbiAqIHRlbXBsYXRlIGF1dGhvcikuXG4gKlxuICogQHBhcmFtIHByb2plY3Rpb25TbG90cz8gQSBjb2xsZWN0aW9uIG9mIHByb2plY3Rpb24gc2xvdHMuIEEgcHJvamVjdGlvbiBzbG90IGNhbiBiZSBiYXNlZFxuICogICAgICAgIG9uIGEgcGFyc2VkIENTUyBzZWxlY3RvcnMgb3Igc2V0IHRvIHRoZSB3aWxkY2FyZCBzZWxlY3RvciAoXCIqXCIpIGluIG9yZGVyIHRvIG1hdGNoXG4gKiAgICAgICAgYWxsIG5vZGVzIHdoaWNoIGRvIG5vdCBtYXRjaCBhbnkgc2VsZWN0b3IuIElmIG5vdCBzcGVjaWZpZWQsIGEgc2luZ2xlIHdpbGRjYXJkXG4gKiAgICAgICAgc2VsZWN0b3IgcHJvamVjdGlvbiBzbG90IHdpbGwgYmUgZGVmaW5lZC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHJvamVjdGlvbkRlZihwcm9qZWN0aW9uU2xvdHMpIHtcbiAgICBjb25zdCBjb21wb25lbnROb2RlID0gZ2V0TFZpZXcoKVtERUNMQVJBVElPTl9DT01QT05FTlRfVklFV11bVF9IT1NUXTtcbiAgICBpZiAoIWNvbXBvbmVudE5vZGUucHJvamVjdGlvbikge1xuICAgICAgICAvLyBJZiBubyBleHBsaWNpdCBwcm9qZWN0aW9uIHNsb3RzIGFyZSBkZWZpbmVkLCBmYWxsIGJhY2sgdG8gYSBzaW5nbGVcbiAgICAgICAgLy8gcHJvamVjdGlvbiBzbG90IHdpdGggdGhlIHdpbGRjYXJkIHNlbGVjdG9yLlxuICAgICAgICBjb25zdCBudW1Qcm9qZWN0aW9uU2xvdHMgPSBwcm9qZWN0aW9uU2xvdHMgPyBwcm9qZWN0aW9uU2xvdHMubGVuZ3RoIDogMTtcbiAgICAgICAgY29uc3QgcHJvamVjdGlvbkhlYWRzID0gY29tcG9uZW50Tm9kZS5wcm9qZWN0aW9uID1cbiAgICAgICAgICAgIG5ld0FycmF5KG51bVByb2plY3Rpb25TbG90cywgbnVsbCk7XG4gICAgICAgIGNvbnN0IHRhaWxzID0gcHJvamVjdGlvbkhlYWRzLnNsaWNlKCk7XG4gICAgICAgIGxldCBjb21wb25lbnRDaGlsZCA9IGNvbXBvbmVudE5vZGUuY2hpbGQ7XG4gICAgICAgIHdoaWxlIChjb21wb25lbnRDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3Qgc2xvdEluZGV4ID0gcHJvamVjdGlvblNsb3RzID8gbWF0Y2hpbmdQcm9qZWN0aW9uU2xvdEluZGV4KGNvbXBvbmVudENoaWxkLCBwcm9qZWN0aW9uU2xvdHMpIDogMDtcbiAgICAgICAgICAgIGlmIChzbG90SW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFpbHNbc2xvdEluZGV4XSkge1xuICAgICAgICAgICAgICAgICAgICB0YWlsc1tzbG90SW5kZXhdLnByb2plY3Rpb25OZXh0ID0gY29tcG9uZW50Q2hpbGQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uSGVhZHNbc2xvdEluZGV4XSA9IGNvbXBvbmVudENoaWxkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0YWlsc1tzbG90SW5kZXhdID0gY29tcG9uZW50Q2hpbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnRDaGlsZCA9IGNvbXBvbmVudENoaWxkLm5leHQ7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEluc2VydHMgcHJldmlvdXNseSByZS1kaXN0cmlidXRlZCBwcm9qZWN0ZWQgbm9kZXMuIFRoaXMgaW5zdHJ1Y3Rpb24gbXVzdCBiZSBwcmVjZWRlZCBieSBhIGNhbGxcbiAqIHRvIHRoZSBwcm9qZWN0aW9uRGVmIGluc3RydWN0aW9uLlxuICpcbiAqIEBwYXJhbSBub2RlSW5kZXhcbiAqIEBwYXJhbSBzZWxlY3RvckluZGV4OlxuICogICAgICAgIC0gMCB3aGVuIHRoZSBzZWxlY3RvciBpcyBgKmAgKG9yIHVuc3BlY2lmaWVkIGFzIHRoaXMgaXMgdGhlIGRlZmF1bHQgdmFsdWUpLFxuICogICAgICAgIC0gMSBiYXNlZCBpbmRleCBvZiB0aGUgc2VsZWN0b3IgZnJvbSB0aGUge0BsaW5rIHByb2plY3Rpb25EZWZ9XG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXByb2plY3Rpb24obm9kZUluZGV4LCBzZWxlY3RvckluZGV4ID0gMCwgYXR0cnMpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgIGNvbnN0IHRQcm9qZWN0aW9uTm9kZSA9IGdldE9yQ3JlYXRlVE5vZGUodFZpZXcsIEhFQURFUl9PRkZTRVQgKyBub2RlSW5kZXgsIDE2IC8qIFByb2plY3Rpb24gKi8sIG51bGwsIGF0dHJzIHx8IG51bGwpO1xuICAgIC8vIFdlIGNhbid0IHVzZSB2aWV3RGF0YVtIT1NUX05PREVdIGJlY2F1c2UgcHJvamVjdGlvbiBub2RlcyBjYW4gYmUgbmVzdGVkIGluIGVtYmVkZGVkIHZpZXdzLlxuICAgIGlmICh0UHJvamVjdGlvbk5vZGUucHJvamVjdGlvbiA9PT0gbnVsbClcbiAgICAgICAgdFByb2plY3Rpb25Ob2RlLnByb2plY3Rpb24gPSBzZWxlY3RvckluZGV4O1xuICAgIC8vIGA8bmctY29udGVudD5gIGhhcyBubyBjb250ZW50XG4gICAgc2V0Q3VycmVudFROb2RlQXNOb3RQYXJlbnQoKTtcbiAgICBpZiAoKHRQcm9qZWN0aW9uTm9kZS5mbGFncyAmIDY0IC8qIGlzRGV0YWNoZWQgKi8pICE9PSA2NCAvKiBpc0RldGFjaGVkICovKSB7XG4gICAgICAgIC8vIHJlLWRpc3RyaWJ1dGlvbiBvZiBwcm9qZWN0YWJsZSBub2RlcyBpcyBzdG9yZWQgb24gYSBjb21wb25lbnQncyB2aWV3IGxldmVsXG4gICAgICAgIGFwcGx5UHJvamVjdGlvbih0VmlldywgbFZpZXcsIHRQcm9qZWN0aW9uTm9kZSk7XG4gICAgfVxufVxuXG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCBhIGxvbmUgYm91bmQgdmFsdWVcbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyAxIGludGVycG9sYXRlZCB2YWx1ZSBpbiBpdCwgYW4gbm8gYWRkaXRpb25hbCB0ZXh0XG4gKiBzdXJyb3VuZHMgdGhhdCBpbnRlcnBvbGF0ZWQgdmFsdWU6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiB0aXRsZT1cInt7djB9fVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtXByb3BlcnR5SW50ZXJwb2xhdGUoJ3RpdGxlJywgdjApO1xuICogYGBgXG4gKlxuICogSWYgdGhlIHByb3BlcnR5IG5hbWUgYWxzbyBleGlzdHMgYXMgYW4gaW5wdXQgcHJvcGVydHkgb24gb25lIG9mIHRoZSBlbGVtZW50J3MgZGlyZWN0aXZlcyxcbiAqIHRoZSBjb21wb25lbnQgcHJvcGVydHkgd2lsbCBiZSBzZXQgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBwcm9wZXJ0eS4gVGhpcyBjaGVjayBtdXN0XG4gKiBiZSBjb25kdWN0ZWQgYXQgcnVudGltZSBzbyBjaGlsZCBjb21wb25lbnRzIHRoYXQgYWRkIG5ldyBgQElucHV0c2AgZG9uJ3QgaGF2ZSB0byBiZSByZS1jb21waWxlZC5cbiAqXG4gKiBAcGFyYW0gcHJvcE5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZVxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSBzYW5pdGl6ZXIgQW4gb3B0aW9uYWwgc2FuaXRpemVyIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZShwcm9wTmFtZSwgdjAsIHNhbml0aXplcikge1xuICAgIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlMShwcm9wTmFtZSwgJycsIHYwLCAnJywgc2FuaXRpemVyKTtcbiAgICByZXR1cm4gybXJtXByb3BlcnR5SW50ZXJwb2xhdGU7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCBzaW5nbGUgYm91bmQgdmFsdWUgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDEgaW50ZXJwb2xhdGVkIHZhbHVlIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgdGl0bGU9XCJwcmVmaXh7e3YwfX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczo6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlMSgndGl0bGUnLCAncHJlZml4JywgdjAsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIElmIHRoZSBwcm9wZXJ0eSBuYW1lIGFsc28gZXhpc3RzIGFzIGFuIGlucHV0IHByb3BlcnR5IG9uIG9uZSBvZiB0aGUgZWxlbWVudCdzIGRpcmVjdGl2ZXMsXG4gKiB0aGUgY29tcG9uZW50IHByb3BlcnR5IHdpbGwgYmUgc2V0IGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgcHJvcGVydHkuIFRoaXMgY2hlY2sgbXVzdFxuICogYmUgY29uZHVjdGVkIGF0IHJ1bnRpbWUgc28gY2hpbGQgY29tcG9uZW50cyB0aGF0IGFkZCBuZXcgYEBJbnB1dHNgIGRvbid0IGhhdmUgdG8gYmUgcmUtY29tcGlsZWQuXG4gKlxuICogQHBhcmFtIHByb3BOYW1lIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGVcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gc2FuaXRpemVyIEFuIG9wdGlvbmFsIHNhbml0aXplciBmdW5jdGlvblxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXByb3BlcnR5SW50ZXJwb2xhdGUxKHByb3BOYW1lLCBwcmVmaXgsIHYwLCBzdWZmaXgsIHNhbml0aXplcikge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb24xKGxWaWV3LCBwcmVmaXgsIHYwLCBzdWZmaXgpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRWYWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRQcm9wZXJ0eUludGVybmFsKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIHByb3BOYW1lLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgbFZpZXdbUkVOREVSRVJdLCBzYW5pdGl6ZXIsIGZhbHNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKHRWaWV3LmRhdGEsIHROb2RlLCBwcm9wTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSAxLCBwcmVmaXgsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTE7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCAyIGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgMiBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgdGl0bGU9XCJwcmVmaXh7e3YwfX0te3t2MX19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6OlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTIoJ3RpdGxlJywgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBJZiB0aGUgcHJvcGVydHkgbmFtZSBhbHNvIGV4aXN0cyBhcyBhbiBpbnB1dCBwcm9wZXJ0eSBvbiBvbmUgb2YgdGhlIGVsZW1lbnQncyBkaXJlY3RpdmVzLFxuICogdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB3aWxsIGJlIHNldCBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IHByb3BlcnR5LiBUaGlzIGNoZWNrIG11c3RcbiAqIGJlIGNvbmR1Y3RlZCBhdCBydW50aW1lIHNvIGNoaWxkIGNvbXBvbmVudHMgdGhhdCBhZGQgbmV3IGBASW5wdXRzYCBkb24ndCBoYXZlIHRvIGJlIHJlLWNvbXBpbGVkLlxuICpcbiAqIEBwYXJhbSBwcm9wTmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBzYW5pdGl6ZXIgZnVuY3Rpb25cbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlMihwcm9wTmFtZSwgcHJlZml4LCB2MCwgaTAsIHYxLCBzdWZmaXgsIHNhbml0aXplcikge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb24yKGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIHN1ZmZpeCk7XG4gICAgaWYgKGludGVycG9sYXRlZFZhbHVlICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgICAgICBjb25zdCB0Tm9kZSA9IGdldFNlbGVjdGVkVE5vZGUoKTtcbiAgICAgICAgZWxlbWVudFByb3BlcnR5SW50ZXJuYWwodFZpZXcsIHROb2RlLCBsVmlldywgcHJvcE5hbWUsIGludGVycG9sYXRlZFZhbHVlLCBsVmlld1tSRU5ERVJFUl0sIHNhbml0aXplciwgZmFsc2UpO1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIHN0b3JlUHJvcGVydHlCaW5kaW5nTWV0YWRhdGEodFZpZXcuZGF0YSwgdE5vZGUsIHByb3BOYW1lLCBnZXRCaW5kaW5nSW5kZXgoKSAtIDIsIHByZWZpeCwgaTAsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTI7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCAzIGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgMyBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgdGl0bGU9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtXByb3BlcnR5SW50ZXJwb2xhdGUzKFxuICogJ3RpdGxlJywgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBJZiB0aGUgcHJvcGVydHkgbmFtZSBhbHNvIGV4aXN0cyBhcyBhbiBpbnB1dCBwcm9wZXJ0eSBvbiBvbmUgb2YgdGhlIGVsZW1lbnQncyBkaXJlY3RpdmVzLFxuICogdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB3aWxsIGJlIHNldCBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IHByb3BlcnR5LiBUaGlzIGNoZWNrIG11c3RcbiAqIGJlIGNvbmR1Y3RlZCBhdCBydW50aW1lIHNvIGNoaWxkIGNvbXBvbmVudHMgdGhhdCBhZGQgbmV3IGBASW5wdXRzYCBkb24ndCBoYXZlIHRvIGJlIHJlLWNvbXBpbGVkLlxuICpcbiAqIEBwYXJhbSBwcm9wTmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBzYW5pdGl6ZXIgZnVuY3Rpb25cbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlMyhwcm9wTmFtZSwgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIHN1ZmZpeCwgc2FuaXRpemVyKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjMobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBzdWZmaXgpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRWYWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRQcm9wZXJ0eUludGVybmFsKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIHByb3BOYW1lLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgbFZpZXdbUkVOREVSRVJdLCBzYW5pdGl6ZXIsIGZhbHNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKHRWaWV3LmRhdGEsIHROb2RlLCBwcm9wTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSAzLCBwcmVmaXgsIGkwLCBpMSwgc3VmZml4KTtcbiAgICB9XG4gICAgcmV0dXJuIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlMztcbn1cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgcHJvcGVydHkgb24gYW4gZWxlbWVudCB3aXRoIDQgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA0IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiB0aXRsZT1cInByZWZpeHt7djB9fS17e3YxfX0te3t2Mn19LXt7djN9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtXByb3BlcnR5SW50ZXJwb2xhdGU0KFxuICogJ3RpdGxlJywgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBJZiB0aGUgcHJvcGVydHkgbmFtZSBhbHNvIGV4aXN0cyBhcyBhbiBpbnB1dCBwcm9wZXJ0eSBvbiBvbmUgb2YgdGhlIGVsZW1lbnQncyBkaXJlY3RpdmVzLFxuICogdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB3aWxsIGJlIHNldCBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IHByb3BlcnR5LiBUaGlzIGNoZWNrIG11c3RcbiAqIGJlIGNvbmR1Y3RlZCBhdCBydW50aW1lIHNvIGNoaWxkIGNvbXBvbmVudHMgdGhhdCBhZGQgbmV3IGBASW5wdXRzYCBkb24ndCBoYXZlIHRvIGJlIHJlLWNvbXBpbGVkLlxuICpcbiAqIEBwYXJhbSBwcm9wTmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBzYW5pdGl6ZXIgZnVuY3Rpb25cbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlNChwcm9wTmFtZSwgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2Mywgc3VmZml4LCBzYW5pdGl6ZXIpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uNChsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2Mywgc3VmZml4KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkVmFsdWUgIT09IE5PX0NIQU5HRSkge1xuICAgICAgICBjb25zdCB0VmlldyA9IGdldFRWaWV3KCk7XG4gICAgICAgIGNvbnN0IHROb2RlID0gZ2V0U2VsZWN0ZWRUTm9kZSgpO1xuICAgICAgICBlbGVtZW50UHJvcGVydHlJbnRlcm5hbCh0VmlldywgdE5vZGUsIGxWaWV3LCBwcm9wTmFtZSwgaW50ZXJwb2xhdGVkVmFsdWUsIGxWaWV3W1JFTkRFUkVSXSwgc2FuaXRpemVyLCBmYWxzZSk7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgc3RvcmVQcm9wZXJ0eUJpbmRpbmdNZXRhZGF0YSh0Vmlldy5kYXRhLCB0Tm9kZSwgcHJvcE5hbWUsIGdldEJpbmRpbmdJbmRleCgpIC0gNCwgcHJlZml4LCBpMCwgaTEsIGkyLCBzdWZmaXgpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtXByb3BlcnR5SW50ZXJwb2xhdGU0O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBwcm9wZXJ0eSBvbiBhbiBlbGVtZW50IHdpdGggNSBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDUgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHRpdGxlPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtXByb3BlcnR5SW50ZXJwb2xhdGU1KFxuICogJ3RpdGxlJywgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBJZiB0aGUgcHJvcGVydHkgbmFtZSBhbHNvIGV4aXN0cyBhcyBhbiBpbnB1dCBwcm9wZXJ0eSBvbiBvbmUgb2YgdGhlIGVsZW1lbnQncyBkaXJlY3RpdmVzLFxuICogdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB3aWxsIGJlIHNldCBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IHByb3BlcnR5LiBUaGlzIGNoZWNrIG11c3RcbiAqIGJlIGNvbmR1Y3RlZCBhdCBydW50aW1lIHNvIGNoaWxkIGNvbXBvbmVudHMgdGhhdCBhZGQgbmV3IGBASW5wdXRzYCBkb24ndCBoYXZlIHRvIGJlIHJlLWNvbXBpbGVkLlxuICpcbiAqIEBwYXJhbSBwcm9wTmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkzIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjQgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBzYW5pdGl6ZXIgZnVuY3Rpb25cbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlNShwcm9wTmFtZSwgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBzdWZmaXgsIHNhbml0aXplcikge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb241KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIHN1ZmZpeCk7XG4gICAgaWYgKGludGVycG9sYXRlZFZhbHVlICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgICAgICBjb25zdCB0Tm9kZSA9IGdldFNlbGVjdGVkVE5vZGUoKTtcbiAgICAgICAgZWxlbWVudFByb3BlcnR5SW50ZXJuYWwodFZpZXcsIHROb2RlLCBsVmlldywgcHJvcE5hbWUsIGludGVycG9sYXRlZFZhbHVlLCBsVmlld1tSRU5ERVJFUl0sIHNhbml0aXplciwgZmFsc2UpO1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIHN0b3JlUHJvcGVydHlCaW5kaW5nTWV0YWRhdGEodFZpZXcuZGF0YSwgdE5vZGUsIHByb3BOYW1lLCBnZXRCaW5kaW5nSW5kZXgoKSAtIDUsIHByZWZpeCwgaTAsIGkxLCBpMiwgaTMsIHN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTU7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCA2IGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgNiBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgdGl0bGU9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fS17e3YzfX0te3t2NH19LXt7djV9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtXByb3BlcnR5SW50ZXJwb2xhdGU2KFxuICogICAgJ3RpdGxlJywgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnLScsIHY1LCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBJZiB0aGUgcHJvcGVydHkgbmFtZSBhbHNvIGV4aXN0cyBhcyBhbiBpbnB1dCBwcm9wZXJ0eSBvbiBvbmUgb2YgdGhlIGVsZW1lbnQncyBkaXJlY3RpdmVzLFxuICogdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB3aWxsIGJlIHNldCBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IHByb3BlcnR5LiBUaGlzIGNoZWNrIG11c3RcbiAqIGJlIGNvbmR1Y3RlZCBhdCBydW50aW1lIHNvIGNoaWxkIGNvbXBvbmVudHMgdGhhdCBhZGQgbmV3IGBASW5wdXRzYCBkb24ndCBoYXZlIHRvIGJlIHJlLWNvbXBpbGVkLlxuICpcbiAqIEBwYXJhbSBwcm9wTmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkzIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjQgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGk0IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjUgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBzYW5pdGl6ZXIgZnVuY3Rpb25cbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlNihwcm9wTmFtZSwgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIHN1ZmZpeCwgc2FuaXRpemVyKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjYobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBzdWZmaXgpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRWYWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRQcm9wZXJ0eUludGVybmFsKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIHByb3BOYW1lLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgbFZpZXdbUkVOREVSRVJdLCBzYW5pdGl6ZXIsIGZhbHNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKHRWaWV3LmRhdGEsIHROb2RlLCBwcm9wTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSA2LCBwcmVmaXgsIGkwLCBpMSwgaTIsIGkzLCBpNCwgc3VmZml4KTtcbiAgICB9XG4gICAgcmV0dXJuIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlNjtcbn1cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgcHJvcGVydHkgb24gYW4gZWxlbWVudCB3aXRoIDcgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA3IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiB0aXRsZT1cInByZWZpeHt7djB9fS17e3YxfX0te3t2Mn19LXt7djN9fS17e3Y0fX0te3t2NX19LXt7djZ9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtXByb3BlcnR5SW50ZXJwb2xhdGU3KFxuICogICAgJ3RpdGxlJywgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnLScsIHY1LCAnLScsIHY2LCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBJZiB0aGUgcHJvcGVydHkgbmFtZSBhbHNvIGV4aXN0cyBhcyBhbiBpbnB1dCBwcm9wZXJ0eSBvbiBvbmUgb2YgdGhlIGVsZW1lbnQncyBkaXJlY3RpdmVzLFxuICogdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB3aWxsIGJlIHNldCBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IHByb3BlcnR5LiBUaGlzIGNoZWNrIG11c3RcbiAqIGJlIGNvbmR1Y3RlZCBhdCBydW50aW1lIHNvIGNoaWxkIGNvbXBvbmVudHMgdGhhdCBhZGQgbmV3IGBASW5wdXRzYCBkb24ndCBoYXZlIHRvIGJlIHJlLWNvbXBpbGVkLlxuICpcbiAqIEBwYXJhbSBwcm9wTmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkzIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjQgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGk0IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjUgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGk1IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjYgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBzYW5pdGl6ZXIgZnVuY3Rpb25cbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlNyhwcm9wTmFtZSwgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2Niwgc3VmZml4LCBzYW5pdGl6ZXIpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uNyhsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2Niwgc3VmZml4KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkVmFsdWUgIT09IE5PX0NIQU5HRSkge1xuICAgICAgICBjb25zdCB0VmlldyA9IGdldFRWaWV3KCk7XG4gICAgICAgIGNvbnN0IHROb2RlID0gZ2V0U2VsZWN0ZWRUTm9kZSgpO1xuICAgICAgICBlbGVtZW50UHJvcGVydHlJbnRlcm5hbCh0VmlldywgdE5vZGUsIGxWaWV3LCBwcm9wTmFtZSwgaW50ZXJwb2xhdGVkVmFsdWUsIGxWaWV3W1JFTkRFUkVSXSwgc2FuaXRpemVyLCBmYWxzZSk7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgc3RvcmVQcm9wZXJ0eUJpbmRpbmdNZXRhZGF0YSh0Vmlldy5kYXRhLCB0Tm9kZSwgcHJvcE5hbWUsIGdldEJpbmRpbmdJbmRleCgpIC0gNywgcHJlZml4LCBpMCwgaTEsIGkyLCBpMywgaTQsIGk1LCBzdWZmaXgpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtXByb3BlcnR5SW50ZXJwb2xhdGU3O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBwcm9wZXJ0eSBvbiBhbiBlbGVtZW50IHdpdGggOCBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDggaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHRpdGxlPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX0te3t2Nn19LXt7djd9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOjpcbiAqXG4gKiBgYGB0c1xuICogybXJtXByb3BlcnR5SW50ZXJwb2xhdGU4KFxuICogICd0aXRsZScsICdwcmVmaXgnLCB2MCwgJy0nLCB2MSwgJy0nLCB2MiwgJy0nLCB2MywgJy0nLCB2NCwgJy0nLCB2NSwgJy0nLCB2NiwgJy0nLCB2NywgJ3N1ZmZpeCcpO1xuICogYGBgXG4gKlxuICogSWYgdGhlIHByb3BlcnR5IG5hbWUgYWxzbyBleGlzdHMgYXMgYW4gaW5wdXQgcHJvcGVydHkgb24gb25lIG9mIHRoZSBlbGVtZW50J3MgZGlyZWN0aXZlcyxcbiAqIHRoZSBjb21wb25lbnQgcHJvcGVydHkgd2lsbCBiZSBzZXQgaW5zdGVhZCBvZiB0aGUgZWxlbWVudCBwcm9wZXJ0eS4gVGhpcyBjaGVjayBtdXN0XG4gKiBiZSBjb25kdWN0ZWQgYXQgcnVudGltZSBzbyBjaGlsZCBjb21wb25lbnRzIHRoYXQgYWRkIG5ldyBgQElucHV0c2AgZG9uJ3QgaGF2ZSB0byBiZSByZS1jb21waWxlZC5cbiAqXG4gKiBAcGFyYW0gcHJvcE5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHVwZGF0ZVxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYxIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMSBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYyIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMiBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYzIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMyBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY0IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpNCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY1IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpNSBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY2IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpNiBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY3IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSBzYW5pdGl6ZXIgQW4gb3B0aW9uYWwgc2FuaXRpemVyIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTgocHJvcE5hbWUsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBpNSwgdjYsIGk2LCB2Nywgc3VmZml4LCBzYW5pdGl6ZXIpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uOChsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2NiwgaTYsIHY3LCBzdWZmaXgpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRWYWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRQcm9wZXJ0eUludGVybmFsKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIHByb3BOYW1lLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgbFZpZXdbUkVOREVSRVJdLCBzYW5pdGl6ZXIsIGZhbHNlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKHRWaWV3LmRhdGEsIHROb2RlLCBwcm9wTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSA4LCBwcmVmaXgsIGkwLCBpMSwgaTIsIGkzLCBpNCwgaTUsIGk2LCBzdWZmaXgpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtXByb3BlcnR5SW50ZXJwb2xhdGU4O1xufVxuLyoqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCA5IG9yIG1vcmUgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIG51bWJlciBvZiBpbnRlcnBvbGF0ZWQgdmFsdWVzIGV4Y2VlZHMgOC5cbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2XG4gKiAgdGl0bGU9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fS17e3YzfX0te3t2NH19LXt7djV9fS17e3Y2fX0te3t2N319LXt7djh9fS17e3Y5fX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczo6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlVihcbiAqICAndGl0bGUnLCBbJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnLScsIHY1LCAnLScsIHY2LCAnLScsIHY3LCAnLScsIHY5LFxuICogICdzdWZmaXgnXSk7XG4gKiBgYGBcbiAqXG4gKiBJZiB0aGUgcHJvcGVydHkgbmFtZSBhbHNvIGV4aXN0cyBhcyBhbiBpbnB1dCBwcm9wZXJ0eSBvbiBvbmUgb2YgdGhlIGVsZW1lbnQncyBkaXJlY3RpdmVzLFxuICogdGhlIGNvbXBvbmVudCBwcm9wZXJ0eSB3aWxsIGJlIHNldCBpbnN0ZWFkIG9mIHRoZSBlbGVtZW50IHByb3BlcnR5LiBUaGlzIGNoZWNrIG11c3RcbiAqIGJlIGNvbmR1Y3RlZCBhdCBydW50aW1lIHNvIGNoaWxkIGNvbXBvbmVudHMgdGhhdCBhZGQgbmV3IGBASW5wdXRzYCBkb24ndCBoYXZlIHRvIGJlIHJlLWNvbXBpbGVkLlxuICpcbiAqIEBwYXJhbSBwcm9wTmFtZSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gdXBkYXRlLlxuICogQHBhcmFtIHZhbHVlcyBUaGUgY29sbGVjdGlvbiBvZiB2YWx1ZXMgYW5kIHRoZSBzdHJpbmdzIGluYmV0d2VlbiB0aG9zZSB2YWx1ZXMsIGJlZ2lubmluZyB3aXRoIGFcbiAqIHN0cmluZyBwcmVmaXggYW5kIGVuZGluZyB3aXRoIGEgc3RyaW5nIHN1ZmZpeC5cbiAqIChlLmcuIGBbJ3ByZWZpeCcsIHZhbHVlMCwgJy0nLCB2YWx1ZTEsICctJywgdmFsdWUyLCAuLi4sIHZhbHVlOTksICdzdWZmaXgnXWApXG4gKiBAcGFyYW0gc2FuaXRpemVyIEFuIG9wdGlvbmFsIHNhbml0aXplciBmdW5jdGlvblxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXByb3BlcnR5SW50ZXJwb2xhdGVWKHByb3BOYW1lLCB2YWx1ZXMsIHNhbml0aXplcikge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb25WKGxWaWV3LCB2YWx1ZXMpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRWYWx1ZSAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGVsZW1lbnRQcm9wZXJ0eUludGVybmFsKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIHByb3BOYW1lLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgbFZpZXdbUkVOREVSRVJdLCBzYW5pdGl6ZXIsIGZhbHNlKTtcbiAgICAgICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGlvbkluQmV0d2VlbiA9IFt2YWx1ZXNbMF1dOyAvLyBwcmVmaXhcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAyOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJwb2xhdGlvbkluQmV0d2Vlbi5wdXNoKHZhbHVlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhKHRWaWV3LmRhdGEsIHROb2RlLCBwcm9wTmFtZSwgZ2V0QmluZGluZ0luZGV4KCkgLSBpbnRlcnBvbGF0aW9uSW5CZXR3ZWVuLmxlbmd0aCArIDEsIC4uLmludGVycG9sYXRpb25JbkJldHdlZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZVY7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBOT1RFOiBUaGUgd29yZCBgc3R5bGluZ2AgaXMgdXNlZCBpbnRlcmNoYW5nZWFibHkgYXMgc3R5bGUgb3IgY2xhc3Mgc3R5bGluZy5cbiAqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgY29kZSB0byBsaW5rIHN0eWxpbmcgaW5zdHJ1Y3Rpb25zIHRvZ2V0aGVyIHNvIHRoYXQgdGhleSBjYW4gYmUgcmVwbGF5ZWQgaW5cbiAqIHByaW9yaXR5IG9yZGVyLiBUaGUgZmlsZSBleGlzdHMgYmVjYXVzZSBJdnkgc3R5bGluZyBpbnN0cnVjdGlvbiBleGVjdXRpb24gb3JkZXIgZG9lcyBub3QgbWF0Y2hcbiAqIHRoYXQgb2YgdGhlIHByaW9yaXR5IG9yZGVyLiBUaGUgcHVycG9zZSBvZiB0aGlzIGNvZGUgaXMgdG8gY3JlYXRlIGEgbGlua2VkIGxpc3Qgc28gdGhhdCB0aGVcbiAqIGluc3RydWN0aW9ucyBjYW4gYmUgdHJhdmVyc2VkIGluIHByaW9yaXR5IG9yZGVyIHdoZW4gY29tcHV0aW5nIHRoZSBzdHlsZXMuXG4gKlxuICogQXNzdW1lIHdlIGFyZSBkZWFsaW5nIHdpdGggdGhlIGZvbGxvd2luZyBjb2RlOlxuICogYGBgXG4gKiBAQ29tcG9uZW50KHtcbiAqICAgdGVtcGxhdGU6IGBcbiAqICAgICA8bXktY21wIFtzdHlsZV09XCIge2NvbG9yOiAnIzAwMSd9IFwiXG4gKiAgICAgICAgICAgICBbc3R5bGUuY29sb3JdPVwiICMwMDIgXCJcbiAqICAgICAgICAgICAgIGRpci1zdHlsZS1jb2xvci0xXG4gKiAgICAgICAgICAgICBkaXItc3R5bGUtY29sb3ItMj4gYFxuICogfSlcbiAqIGNsYXNzIEV4YW1wbGVDb21wb25lbnQge1xuICogICBzdGF0aWMgbmdDb21wID0gLi4uIHtcbiAqICAgICAuLi5cbiAqICAgICAvLyBDb21waWxlciBlbnN1cmVzIHRoYXQgYMm1ybVzdHlsZVByb3BgIGlzIGFmdGVyIGDJtcm1c3R5bGVNYXBgXG4gKiAgICAgybXJtXN0eWxlTWFwKHtjb2xvcjogJyMwMDEnfSk7XG4gKiAgICAgybXJtXN0eWxlUHJvcCgnY29sb3InLCAnIzAwMicpO1xuICogICAgIC4uLlxuICogICB9XG4gKiB9XG4gKlxuICogQERpcmVjdGl2ZSh7XG4gKiAgIHNlbGVjdG9yOiBgW2Rpci1zdHlsZS1jb2xvci0xXScsXG4gKiB9KVxuICogY2xhc3MgU3R5bGUxRGlyZWN0aXZlIHtcbiAqICAgQEhvc3RCaW5kaW5nKCdzdHlsZScpIHN0eWxlID0ge2NvbG9yOiAnIzAwNSd9O1xuICogICBASG9zdEJpbmRpbmcoJ3N0eWxlLmNvbG9yJykgY29sb3IgPSAnIzAwNic7XG4gKlxuICogICBzdGF0aWMgbmdEaXIgPSAuLi4ge1xuICogICAgIC4uLlxuICogICAgIC8vIENvbXBpbGVyIGVuc3VyZXMgdGhhdCBgybXJtXN0eWxlUHJvcGAgaXMgYWZ0ZXIgYMm1ybVzdHlsZU1hcGBcbiAqICAgICDJtcm1c3R5bGVNYXAoe2NvbG9yOiAnIzAwNSd9KTtcbiAqICAgICDJtcm1c3R5bGVQcm9wKCdjb2xvcicsICcjMDA2Jyk7XG4gKiAgICAgLi4uXG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBARGlyZWN0aXZlKHtcbiAqICAgc2VsZWN0b3I6IGBbZGlyLXN0eWxlLWNvbG9yLTJdJyxcbiAqIH0pXG4gKiBjbGFzcyBTdHlsZTJEaXJlY3RpdmUge1xuICogICBASG9zdEJpbmRpbmcoJ3N0eWxlJykgc3R5bGUgPSB7Y29sb3I6ICcjMDA3J307XG4gKiAgIEBIb3N0QmluZGluZygnc3R5bGUuY29sb3InKSBjb2xvciA9ICcjMDA4JztcbiAqXG4gKiAgIHN0YXRpYyBuZ0RpciA9IC4uLiB7XG4gKiAgICAgLi4uXG4gKiAgICAgLy8gQ29tcGlsZXIgZW5zdXJlcyB0aGF0IGDJtcm1c3R5bGVQcm9wYCBpcyBhZnRlciBgybXJtXN0eWxlTWFwYFxuICogICAgIMm1ybVzdHlsZU1hcCh7Y29sb3I6ICcjMDA3J30pO1xuICogICAgIMm1ybVzdHlsZVByb3AoJ2NvbG9yJywgJyMwMDgnKTtcbiAqICAgICAuLi5cbiAqICAgfVxuICogfVxuICpcbiAqIEBEaXJlY3RpdmUoe1xuICogICBzZWxlY3RvcjogYG15LWNtcCcsXG4gKiB9KVxuICogY2xhc3MgTXlDb21wb25lbnQge1xuICogICBASG9zdEJpbmRpbmcoJ3N0eWxlJykgc3R5bGUgPSB7Y29sb3I6ICcjMDAzJ307XG4gKiAgIEBIb3N0QmluZGluZygnc3R5bGUuY29sb3InKSBjb2xvciA9ICcjMDA0JztcbiAqXG4gKiAgIHN0YXRpYyBuZ0NvbXAgPSAuLi4ge1xuICogICAgIC4uLlxuICogICAgIC8vIENvbXBpbGVyIGVuc3VyZXMgdGhhdCBgybXJtXN0eWxlUHJvcGAgaXMgYWZ0ZXIgYMm1ybVzdHlsZU1hcGBcbiAqICAgICDJtcm1c3R5bGVNYXAoe2NvbG9yOiAnIzAwMyd9KTtcbiAqICAgICDJtcm1c3R5bGVQcm9wKCdjb2xvcicsICcjMDA0Jyk7XG4gKiAgICAgLi4uXG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoZSBPcmRlciBvZiBpbnN0cnVjdGlvbiBleGVjdXRpb24gaXM6XG4gKlxuICogTk9URTogdGhlIGNvbW1lbnQgYmluZGluZyBsb2NhdGlvbiBpcyBmb3IgaWxsdXN0cmF0aXZlIHB1cnBvc2VzIG9ubHkuXG4gKlxuICogYGBgXG4gKiAvLyBUZW1wbGF0ZTogKEV4YW1wbGVDb21wb25lbnQpXG4gKiAgICAgybXJtXN0eWxlTWFwKHtjb2xvcjogJyMwMDEnfSk7ICAgLy8gQmluZGluZyBpbmRleDogMTBcbiAqICAgICDJtcm1c3R5bGVQcm9wKCdjb2xvcicsICcjMDAyJyk7ICAvLyBCaW5kaW5nIGluZGV4OiAxMlxuICogLy8gTXlDb21wb25lbnRcbiAqICAgICDJtcm1c3R5bGVNYXAoe2NvbG9yOiAnIzAwMyd9KTsgICAvLyBCaW5kaW5nIGluZGV4OiAyMFxuICogICAgIMm1ybVzdHlsZVByb3AoJ2NvbG9yJywgJyMwMDQnKTsgIC8vIEJpbmRpbmcgaW5kZXg6IDIyXG4gKiAvLyBTdHlsZTFEaXJlY3RpdmVcbiAqICAgICDJtcm1c3R5bGVNYXAoe2NvbG9yOiAnIzAwNSd9KTsgICAvLyBCaW5kaW5nIGluZGV4OiAyNFxuICogICAgIMm1ybVzdHlsZVByb3AoJ2NvbG9yJywgJyMwMDYnKTsgIC8vIEJpbmRpbmcgaW5kZXg6IDI2XG4gKiAvLyBTdHlsZTJEaXJlY3RpdmVcbiAqICAgICDJtcm1c3R5bGVNYXAoe2NvbG9yOiAnIzAwNyd9KTsgICAvLyBCaW5kaW5nIGluZGV4OiAyOFxuICogICAgIMm1ybVzdHlsZVByb3AoJ2NvbG9yJywgJyMwMDgnKTsgIC8vIEJpbmRpbmcgaW5kZXg6IDMwXG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCBwcmlvcml0eSBvcmRlciBvZiBjb25jYXRlbmF0aW9uIGlzOlxuICpcbiAqIGBgYFxuICogLy8gTXlDb21wb25lbnRcbiAqICAgICDJtcm1c3R5bGVNYXAoe2NvbG9yOiAnIzAwMyd9KTsgICAvLyBCaW5kaW5nIGluZGV4OiAyMFxuICogICAgIMm1ybVzdHlsZVByb3AoJ2NvbG9yJywgJyMwMDQnKTsgIC8vIEJpbmRpbmcgaW5kZXg6IDIyXG4gKiAvLyBTdHlsZTFEaXJlY3RpdmVcbiAqICAgICDJtcm1c3R5bGVNYXAoe2NvbG9yOiAnIzAwNSd9KTsgICAvLyBCaW5kaW5nIGluZGV4OiAyNFxuICogICAgIMm1ybVzdHlsZVByb3AoJ2NvbG9yJywgJyMwMDYnKTsgIC8vIEJpbmRpbmcgaW5kZXg6IDI2XG4gKiAvLyBTdHlsZTJEaXJlY3RpdmVcbiAqICAgICDJtcm1c3R5bGVNYXAoe2NvbG9yOiAnIzAwNyd9KTsgICAvLyBCaW5kaW5nIGluZGV4OiAyOFxuICogICAgIMm1ybVzdHlsZVByb3AoJ2NvbG9yJywgJyMwMDgnKTsgIC8vIEJpbmRpbmcgaW5kZXg6IDMwXG4gKiAvLyBUZW1wbGF0ZTogKEV4YW1wbGVDb21wb25lbnQpXG4gKiAgICAgybXJtXN0eWxlTWFwKHtjb2xvcjogJyMwMDEnfSk7ICAgLy8gQmluZGluZyBpbmRleDogMTBcbiAqICAgICDJtcm1c3R5bGVQcm9wKCdjb2xvcicsICcjMDAyJyk7ICAvLyBCaW5kaW5nIGluZGV4OiAxMlxuICogYGBgXG4gKlxuICogV2hhdCBjb2xvciBzaG91bGQgYmUgcmVuZGVyZWQ/XG4gKlxuICogT25jZSB0aGUgaXRlbXMgYXJlIGNvcnJlY3RseSBzb3J0ZWQgaW4gdGhlIGxpc3QsIHRoZSBhbnN3ZXIgaXMgc2ltcGx5IHRoZSBsYXN0IGl0ZW0gaW4gdGhlXG4gKiBjb25jYXRlbmF0aW9uIGxpc3Qgd2hpY2ggaXMgYCMwMDJgLlxuICpcbiAqIFRvIGRvIHNvIHdlIGtlZXAgYSBsaW5rZWQgbGlzdCBvZiBhbGwgb2YgdGhlIGJpbmRpbmdzIHdoaWNoIHBlcnRhaW4gdG8gdGhpcyBlbGVtZW50LlxuICogTm90aWNlIHRoYXQgdGhlIGJpbmRpbmdzIGFyZSBpbnNlcnRlZCBpbiB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uLCBidXQgdGhlIGBUVmlldy5kYXRhYCBhbGxvd3NcbiAqIHVzIHRvIHRyYXZlcnNlIHRoZW0gaW4gdGhlIG9yZGVyIG9mIHByaW9yaXR5LlxuICpcbiAqIHxJZHh8YFRWaWV3LmRhdGFgfGBMVmlld2AgICAgICAgICAgfCBOb3Rlc1xuICogfC0tLXwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS1cbiAqIHwuLi58ICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgfFxuICogfDEwIHxgbnVsbGAgICAgICB8YHtjb2xvcjogJyMwMDEnfWB8IGDJtcm1c3R5bGVNYXAoJ2NvbG9yJywge2NvbG9yOiAnIzAwMSd9KWBcbiAqIHwxMSB8YDMwIHwgMTJgICAgfCAuLi4gICAgICAgICAgICAgfFxuICogfDEyIHxgY29sb3JgICAgICB8YCcjMDAyJ2AgICAgICAgICB8IGDJtcm1c3R5bGVQcm9wKCdjb2xvcicsICcjMDAyJylgXG4gKiB8MTMgfGAxMCB8IDBgICAgIHwgLi4uICAgICAgICAgICAgIHxcbiAqIHwuLi58ICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgfFxuICogfDIwIHxgbnVsbGAgICAgICB8YHtjb2xvcjogJyMwMDMnfWB8IGDJtcm1c3R5bGVNYXAoJ2NvbG9yJywge2NvbG9yOiAnIzAwMyd9KWBcbiAqIHwyMSB8YDAgfCAyMmAgICAgfCAuLi4gICAgICAgICAgICAgfFxuICogfDIyIHxgY29sb3JgICAgICB8YCcjMDA0J2AgICAgICAgICB8IGDJtcm1c3R5bGVQcm9wKCdjb2xvcicsICcjMDA0JylgXG4gKiB8MjMgfGAyMCB8IDI0YCAgIHwgLi4uICAgICAgICAgICAgIHxcbiAqIHwyNCB8YG51bGxgICAgICAgfGB7Y29sb3I6ICcjMDA1J31gfCBgybXJtXN0eWxlTWFwKCdjb2xvcicsIHtjb2xvcjogJyMwMDUnfSlgXG4gKiB8MjUgfGAyMiB8IDI2YCAgIHwgLi4uICAgICAgICAgICAgIHxcbiAqIHwyNiB8YGNvbG9yYCAgICAgfGAnIzAwNidgICAgICAgICAgfCBgybXJtXN0eWxlUHJvcCgnY29sb3InLCAnIzAwNicpYFxuICogfDI3IHxgMjQgfCAyOGAgICB8IC4uLiAgICAgICAgICAgICB8XG4gKiB8MjggfGBudWxsYCAgICAgIHxge2NvbG9yOiAnIzAwNyd9YHwgYMm1ybVzdHlsZU1hcCgnY29sb3InLCB7Y29sb3I6ICcjMDA3J30pYFxuICogfDI5IHxgMjYgfCAzMGAgICB8IC4uLiAgICAgICAgICAgICB8XG4gKiB8MzAgfGBjb2xvcmAgICAgIHxgJyMwMDgnYCAgICAgICAgIHwgYMm1ybVzdHlsZVByb3AoJ2NvbG9yJywgJyMwMDgnKWBcbiAqIHwzMSB8YDI4IHwgMTBgICAgfCAuLi4gICAgICAgICAgICAgfFxuICpcbiAqIFRoZSBhYm92ZSBkYXRhIHN0cnVjdHVyZSBhbGxvd3MgdXMgdG8gcmUtY29uY2F0ZW5hdGUgdGhlIHN0eWxpbmcgbm8gbWF0dGVyIHdoaWNoIGRhdGEgYmluZGluZ1xuICogY2hhbmdlcy5cbiAqXG4gKiBOT1RFOiBpbiBhZGRpdGlvbiB0byBrZWVwaW5nIHRyYWNrIG9mIG5leHQvcHJldmlvdXMgaW5kZXggdGhlIGBUVmlldy5kYXRhYCBhbHNvIHN0b3JlcyBwcmV2L25leHRcbiAqIGR1cGxpY2F0ZSBiaXQuIFRoZSBkdXBsaWNhdGUgYml0IGlmIHRydWUgc2F5cyB0aGVyZSBlaXRoZXIgaXMgYSBiaW5kaW5nIHdpdGggdGhlIHNhbWUgbmFtZSBvclxuICogdGhlcmUgaXMgYSBtYXAgKHdoaWNoIG1heSBjb250YWluIHRoZSBuYW1lKS4gVGhpcyBpbmZvcm1hdGlvbiBpcyB1c2VmdWwgaW4ga25vd2luZyBpZiBvdGhlclxuICogc3R5bGVzIHdpdGggaGlnaGVyIHByaW9yaXR5IG5lZWQgdG8gYmUgc2VhcmNoZWQgZm9yIG92ZXJ3cml0ZXMuXG4gKlxuICogTk9URTogU2VlIGBzaG91bGQgc3VwcG9ydCBleGFtcGxlIGluICd0bm9kZV9saW5rZWRfbGlzdC50cycgZG9jdW1lbnRhdGlvbmAgaW5cbiAqIGB0bm9kZV9saW5rZWRfbGlzdF9zcGVjLnRzYCBmb3Igd29ya2luZyBleGFtcGxlLlxuICovXG5sZXQgX191bnVzZWRfY29uc3RfYXNfY2xvc3VyZV9kb2VzX25vdF9saWtlX3N0YW5kYWxvbmVfY29tbWVudF9ibG9ja3NfXztcbi8qKlxuICogSW5zZXJ0IG5ldyBgdFN0eWxlVmFsdWVgIGF0IGBURGF0YWAgYW5kIGxpbmsgZXhpc3Rpbmcgc3R5bGUgYmluZGluZ3Mgc3VjaCB0aGF0IHdlIG1haW50YWluIGxpbmtlZFxuICogbGlzdCBvZiBzdHlsZXMgYW5kIGNvbXB1dGUgdGhlIGR1cGxpY2F0ZSBmbGFnLlxuICpcbiAqIE5vdGU6IHRoaXMgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZHVyaW5nIGBmaXJzdFVwZGF0ZVBhc3NgIG9ubHkgdG8gcG9wdWxhdGUgdGhlIGBUVmlldy5kYXRhYC5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gd29ya3MgYnkga2VlcGluZyB0cmFjayBvZiBgdFN0eWxpbmdSYW5nZWAgd2hpY2ggY29udGFpbnMgdHdvIHBvaW50ZXJzIHBvaW50aW5nIHRvXG4gKiB0aGUgaGVhZC90YWlsIG9mIHRoZSB0ZW1wbGF0ZSBwb3J0aW9uIG9mIHRoZSBzdHlsZXMuXG4gKiAgLSBpZiBgaXNIb3N0ID09PSBmYWxzZWAgKHdlIGFyZSB0ZW1wbGF0ZSkgdGhlbiBpbnNlcnRpb24gaXMgYXQgdGFpbCBvZiBgVFN0eWxpbmdSYW5nZWBcbiAqICAtIGlmIGBpc0hvc3QgPT09IHRydWVgICh3ZSBhcmUgaG9zdCBiaW5kaW5nKSB0aGVuIGluc2VydGlvbiBpcyBhdCBoZWFkIG9mIGBUU3R5bGluZ1JhbmdlYFxuICpcbiAqIEBwYXJhbSB0RGF0YSBUaGUgYFREYXRhYCB0byBpbnNlcnQgaW50by5cbiAqIEBwYXJhbSB0Tm9kZSBgVE5vZGVgIGFzc29jaWF0ZWQgd2l0aCB0aGUgc3R5bGluZyBlbGVtZW50LlxuICogQHBhcmFtIHRTdHlsaW5nS2V5IFNlZSBgVFN0eWxpbmdLZXlgLlxuICogQHBhcmFtIGluZGV4IGxvY2F0aW9uIG9mIHdoZXJlIGB0U3R5bGVWYWx1ZWAgc2hvdWxkIGJlIHN0b3JlZCAoYW5kIGxpbmtlZCBpbnRvIGxpc3QuKVxuICogQHBhcmFtIGlzSG9zdEJpbmRpbmcgYHRydWVgIGlmIHRoZSBpbnNlcnRpb24gaXMgZm9yIGEgYGhvc3RCaW5kaW5nYC4gKGluc2VydGlvbiBpcyBpbiBmcm9udCBvZlxuICogICAgICAgICAgICAgICB0ZW1wbGF0ZS4pXG4gKiBAcGFyYW0gaXNDbGFzc0JpbmRpbmcgVHJ1ZSBpZiB0aGUgYXNzb2NpYXRlZCBgdFN0eWxpbmdLZXlgIGFzIGEgYGNsYXNzYCBzdHlsaW5nLlxuICogICAgICAgICAgICAgICAgICAgICAgIGB0Tm9kZS5jbGFzc0JpbmRpbmdzYCBzaG91bGQgYmUgdXNlZCAob3IgYHROb2RlLnN0eWxlQmluZGluZ3NgIG90aGVyd2lzZS4pXG4gKi9cbmZ1bmN0aW9uIGluc2VydFRTdHlsaW5nQmluZGluZyh0RGF0YSwgdE5vZGUsIHRTdHlsaW5nS2V5V2l0aFN0YXRpYywgaW5kZXgsIGlzSG9zdEJpbmRpbmcsIGlzQ2xhc3NCaW5kaW5nKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEZpcnN0VXBkYXRlUGFzcyhnZXRUVmlldygpKTtcbiAgICBsZXQgdEJpbmRpbmdzID0gaXNDbGFzc0JpbmRpbmcgPyB0Tm9kZS5jbGFzc0JpbmRpbmdzIDogdE5vZGUuc3R5bGVCaW5kaW5ncztcbiAgICBsZXQgdG1wbEhlYWQgPSBnZXRUU3R5bGluZ1JhbmdlUHJldih0QmluZGluZ3MpO1xuICAgIGxldCB0bXBsVGFpbCA9IGdldFRTdHlsaW5nUmFuZ2VOZXh0KHRCaW5kaW5ncyk7XG4gICAgdERhdGFbaW5kZXhdID0gdFN0eWxpbmdLZXlXaXRoU3RhdGljO1xuICAgIGxldCBpc0tleUR1cGxpY2F0ZU9mU3RhdGljID0gZmFsc2U7XG4gICAgbGV0IHRTdHlsaW5nS2V5O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRTdHlsaW5nS2V5V2l0aFN0YXRpYykpIHtcbiAgICAgICAgLy8gV2UgYXJlIGNhc2Ugd2hlbiB0aGUgYFRTdHlsaW5nS2V5YCBjb250YWlucyBzdGF0aWMgZmllbGRzIGFzIHdlbGwuXG4gICAgICAgIGNvbnN0IHN0YXRpY0tleVZhbHVlQXJyYXkgPSB0U3R5bGluZ0tleVdpdGhTdGF0aWM7XG4gICAgICAgIHRTdHlsaW5nS2V5ID0gc3RhdGljS2V5VmFsdWVBcnJheVsxXTsgLy8gdW53cmFwLlxuICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIG91ciBrZXkgaXMgcHJlc2VudCBpbiB0aGUgc3RhdGljIHNvIHRoYXQgd2UgY2FuIG1hcmsgaXQgYXMgZHVwbGljYXRlLlxuICAgICAgICBpZiAodFN0eWxpbmdLZXkgPT09IG51bGwgfHxcbiAgICAgICAgICAgIGtleVZhbHVlQXJyYXlJbmRleE9mKHN0YXRpY0tleVZhbHVlQXJyYXksIHRTdHlsaW5nS2V5KSA+IDApIHtcbiAgICAgICAgICAgIC8vIHRTdHlsaW5nS2V5IGlzIHByZXNlbnQgaW4gdGhlIHN0YXRpY3MsIG5lZWQgdG8gbWFyayBpdCBhcyBkdXBsaWNhdGUuXG4gICAgICAgICAgICBpc0tleUR1cGxpY2F0ZU9mU3RhdGljID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdFN0eWxpbmdLZXkgPSB0U3R5bGluZ0tleVdpdGhTdGF0aWM7XG4gICAgfVxuICAgIGlmIChpc0hvc3RCaW5kaW5nKSB7XG4gICAgICAgIC8vIFdlIGFyZSBpbnNlcnRpbmcgaG9zdCBiaW5kaW5nc1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIHRlbXBsYXRlIGJpbmRpbmdzIHRoZW4gYHRhaWxgIGlzIDAuXG4gICAgICAgIGNvbnN0IGhhc1RlbXBsYXRlQmluZGluZ3MgPSB0bXBsVGFpbCAhPT0gMDtcbiAgICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgdG8ga25vdyBiZWNhdXNlIHRoYXQgbWVhbnMgdGhhdCB0aGUgYGhlYWRgIGNhbid0IHBvaW50IHRvIHRoZSBmaXJzdFxuICAgICAgICAvLyB0ZW1wbGF0ZSBiaW5kaW5ncyAodGhlcmUgYXJlIG5vbmUuKSBJbnN0ZWFkIHRoZSBoZWFkIHBvaW50cyB0byB0aGUgdGFpbCBvZiB0aGUgdGVtcGxhdGUuXG4gICAgICAgIGlmIChoYXNUZW1wbGF0ZUJpbmRpbmdzKSB7XG4gICAgICAgICAgICAvLyB0ZW1wbGF0ZSBoZWFkJ3MgXCJwcmV2XCIgd2lsbCBwb2ludCB0byBsYXN0IGhvc3QgYmluZGluZyBvciB0byAwIGlmIG5vIGhvc3QgYmluZGluZ3MgeWV0XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c05vZGUgPSBnZXRUU3R5bGluZ1JhbmdlUHJldih0RGF0YVt0bXBsSGVhZCArIDFdKTtcbiAgICAgICAgICAgIHREYXRhW2luZGV4ICsgMV0gPSB0b1RTdHlsaW5nUmFuZ2UocHJldmlvdXNOb2RlLCB0bXBsSGVhZCk7XG4gICAgICAgICAgICAvLyBpZiBhIGhvc3QgYmluZGluZyBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQsIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSBuZXh0IG9mIHRoYXQgaG9zdFxuICAgICAgICAgICAgLy8gYmluZGluZyB0byBwb2ludCB0byB0aGlzIG9uZVxuICAgICAgICAgICAgaWYgKHByZXZpb3VzTm9kZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIHRoZSB0ZW1wbGF0ZS10YWlsIHZhbHVlIHRvIHBvaW50IHRvIHVzLlxuICAgICAgICAgICAgICAgIHREYXRhW3ByZXZpb3VzTm9kZSArIDFdID1cbiAgICAgICAgICAgICAgICAgICAgc2V0VFN0eWxpbmdSYW5nZU5leHQodERhdGFbcHJldmlvdXNOb2RlICsgMV0sIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSBcInByZXZpb3VzXCIgb2YgdGhlIHRlbXBsYXRlIGJpbmRpbmcgaGVhZCBzaG91bGQgcG9pbnQgdG8gdGhpcyBob3N0IGJpbmRpbmdcbiAgICAgICAgICAgIHREYXRhW3RtcGxIZWFkICsgMV0gPSBzZXRUU3R5bGluZ1JhbmdlUHJldih0RGF0YVt0bXBsSGVhZCArIDFdLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0RGF0YVtpbmRleCArIDFdID0gdG9UU3R5bGluZ1JhbmdlKHRtcGxIZWFkLCAwKTtcbiAgICAgICAgICAgIC8vIGlmIGEgaG9zdCBiaW5kaW5nIGhhcyBhbHJlYWR5IGJlZW4gcmVnaXN0ZXJlZCwgd2UgbmVlZCB0byB1cGRhdGUgdGhlIG5leHQgb2YgdGhhdCBob3N0XG4gICAgICAgICAgICAvLyBiaW5kaW5nIHRvIHBvaW50IHRvIHRoaXMgb25lXG4gICAgICAgICAgICBpZiAodG1wbEhlYWQgIT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHVwZGF0ZSB0aGUgdGVtcGxhdGUtdGFpbCB2YWx1ZSB0byBwb2ludCB0byB1cy5cbiAgICAgICAgICAgICAgICB0RGF0YVt0bXBsSGVhZCArIDFdID0gc2V0VFN0eWxpbmdSYW5nZU5leHQodERhdGFbdG1wbEhlYWQgKyAxXSwgaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgd2UgZG9uJ3QgaGF2ZSB0ZW1wbGF0ZSwgdGhlIGhlYWQgcG9pbnRzIHRvIHRlbXBsYXRlLXRhaWwsIGFuZCBuZWVkcyB0byBiZSBhZHZhbmNlZC5cbiAgICAgICAgICAgIHRtcGxIZWFkID0gaW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIFdlIGFyZSBpbnNlcnRpbmcgaW4gdGVtcGxhdGUgc2VjdGlvbi5cbiAgICAgICAgLy8gV2UgbmVlZCB0byBzZXQgdGhpcyBiaW5kaW5nJ3MgXCJwcmV2aW91c1wiIHRvIHRoZSBjdXJyZW50IHRlbXBsYXRlIHRhaWxcbiAgICAgICAgdERhdGFbaW5kZXggKyAxXSA9IHRvVFN0eWxpbmdSYW5nZSh0bXBsVGFpbCwgMCk7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgYXNzZXJ0RXF1YWwodG1wbEhlYWQgIT09IDAgJiYgdG1wbFRhaWwgPT09IDAsIGZhbHNlLCAnQWRkaW5nIHRlbXBsYXRlIGJpbmRpbmdzIGFmdGVyIGhvc3RCaW5kaW5ncyBpcyBub3QgYWxsb3dlZC4nKTtcbiAgICAgICAgaWYgKHRtcGxIZWFkID09PSAwKSB7XG4gICAgICAgICAgICB0bXBsSGVhZCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byB1cGRhdGUgdGhlIHByZXZpb3VzIHZhbHVlIFwibmV4dFwiIHRvIHBvaW50IHRvIHRoaXMgYmluZGluZ1xuICAgICAgICAgICAgdERhdGFbdG1wbFRhaWwgKyAxXSA9IHNldFRTdHlsaW5nUmFuZ2VOZXh0KHREYXRhW3RtcGxUYWlsICsgMV0sIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICB0bXBsVGFpbCA9IGluZGV4O1xuICAgIH1cbiAgICAvLyBOb3cgd2UgbmVlZCB0byB1cGRhdGUgLyBjb21wdXRlIHRoZSBkdXBsaWNhdGVzLlxuICAgIC8vIFN0YXJ0aW5nIHdpdGggb3VyIGxvY2F0aW9uIHNlYXJjaCB0b3dhcmRzIGhlYWQgKGxlYXN0IHByaW9yaXR5KVxuICAgIGlmIChpc0tleUR1cGxpY2F0ZU9mU3RhdGljKSB7XG4gICAgICAgIHREYXRhW2luZGV4ICsgMV0gPSBzZXRUU3R5bGluZ1JhbmdlUHJldkR1cGxpY2F0ZSh0RGF0YVtpbmRleCArIDFdKTtcbiAgICB9XG4gICAgbWFya0R1cGxpY2F0ZXModERhdGEsIHRTdHlsaW5nS2V5LCBpbmRleCwgdHJ1ZSwgaXNDbGFzc0JpbmRpbmcpO1xuICAgIG1hcmtEdXBsaWNhdGVzKHREYXRhLCB0U3R5bGluZ0tleSwgaW5kZXgsIGZhbHNlLCBpc0NsYXNzQmluZGluZyk7XG4gICAgbWFya0R1cGxpY2F0ZU9mUmVzaWR1YWxTdHlsaW5nKHROb2RlLCB0U3R5bGluZ0tleSwgdERhdGEsIGluZGV4LCBpc0NsYXNzQmluZGluZyk7XG4gICAgdEJpbmRpbmdzID0gdG9UU3R5bGluZ1JhbmdlKHRtcGxIZWFkLCB0bXBsVGFpbCk7XG4gICAgaWYgKGlzQ2xhc3NCaW5kaW5nKSB7XG4gICAgICAgIHROb2RlLmNsYXNzQmluZGluZ3MgPSB0QmluZGluZ3M7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0Tm9kZS5zdHlsZUJpbmRpbmdzID0gdEJpbmRpbmdzO1xuICAgIH1cbn1cbi8qKlxuICogTG9vayBpbnRvIHRoZSByZXNpZHVhbCBzdHlsaW5nIHRvIHNlZSBpZiB0aGUgY3VycmVudCBgdFN0eWxpbmdLZXlgIGlzIGR1cGxpY2F0ZSBvZiByZXNpZHVhbC5cbiAqXG4gKiBAcGFyYW0gdE5vZGUgYFROb2RlYCB3aGVyZSB0aGUgcmVzaWR1YWwgaXMgc3RvcmVkLlxuICogQHBhcmFtIHRTdHlsaW5nS2V5IGBUU3R5bGluZ0tleWAgdG8gc3RvcmUuXG4gKiBAcGFyYW0gdERhdGEgYFREYXRhYCBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgYExWaWV3YC5cbiAqIEBwYXJhbSBpbmRleCBsb2NhdGlvbiBvZiB3aGVyZSBgdFN0eWxlVmFsdWVgIHNob3VsZCBiZSBzdG9yZWQgKGFuZCBsaW5rZWQgaW50byBsaXN0LilcbiAqIEBwYXJhbSBpc0NsYXNzQmluZGluZyBUcnVlIGlmIHRoZSBhc3NvY2lhdGVkIGB0U3R5bGluZ0tleWAgYXMgYSBgY2xhc3NgIHN0eWxpbmcuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgYHROb2RlLmNsYXNzQmluZGluZ3NgIHNob3VsZCBiZSB1c2VkIChvciBgdE5vZGUuc3R5bGVCaW5kaW5nc2Agb3RoZXJ3aXNlLilcbiAqL1xuZnVuY3Rpb24gbWFya0R1cGxpY2F0ZU9mUmVzaWR1YWxTdHlsaW5nKHROb2RlLCB0U3R5bGluZ0tleSwgdERhdGEsIGluZGV4LCBpc0NsYXNzQmluZGluZykge1xuICAgIGNvbnN0IHJlc2lkdWFsID0gaXNDbGFzc0JpbmRpbmcgPyB0Tm9kZS5yZXNpZHVhbENsYXNzZXMgOiB0Tm9kZS5yZXNpZHVhbFN0eWxlcztcbiAgICBpZiAocmVzaWR1YWwgIT0gbnVsbCAvKiBvciB1bmRlZmluZWQgKi8gJiYgdHlwZW9mIHRTdHlsaW5nS2V5ID09ICdzdHJpbmcnICYmXG4gICAgICAgIGtleVZhbHVlQXJyYXlJbmRleE9mKHJlc2lkdWFsLCB0U3R5bGluZ0tleSkgPj0gMCkge1xuICAgICAgICAvLyBXZSBoYXZlIGR1cGxpY2F0ZSBpbiB0aGUgcmVzaWR1YWwgc28gbWFyayBvdXJzZWx2ZXMgYXMgZHVwbGljYXRlLlxuICAgICAgICB0RGF0YVtpbmRleCArIDFdID0gc2V0VFN0eWxpbmdSYW5nZU5leHREdXBsaWNhdGUodERhdGFbaW5kZXggKyAxXSk7XG4gICAgfVxufVxuLyoqXG4gKiBNYXJrcyBgVFN0eWxlVmFsdWVgcyBhcyBkdXBsaWNhdGVzIGlmIGFub3RoZXIgc3R5bGUgYmluZGluZyBpbiB0aGUgbGlzdCBoYXMgdGhlIHNhbWVcbiAqIGBUU3R5bGVWYWx1ZWAuXG4gKlxuICogTk9URTogdGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgdHdpY2Ugb25jZSB3aXRoIGBpc1ByZXZEaXJgIHNldCB0byBgdHJ1ZWAgYW5kIG9uY2VcbiAqIHdpdGggaXQgc2V0IHRvIGBmYWxzZWAgdG8gc2VhcmNoIGJvdGggdGhlIHByZXZpb3VzIGFzIHdlbGwgYXMgbmV4dCBpdGVtcyBpbiB0aGUgbGlzdC5cbiAqXG4gKiBObyBkdXBsaWNhdGUgY2FzZVxuICogYGBgXG4gKiAgIFtzdHlsZS5jb2xvcl1cbiAqICAgW3N0eWxlLndpZHRoLnB4XSA8PC0gaW5kZXhcbiAqICAgW3N0eWxlLmhlaWdodC5weF1cbiAqIGBgYFxuICpcbiAqIEluIHRoZSBhYm92ZSBjYXNlIGFkZGluZyBgW3N0eWxlLndpZHRoLnB4XWAgdG8gdGhlIGV4aXN0aW5nIGBbc3R5bGUuY29sb3JdYCBwcm9kdWNlcyBub1xuICogZHVwbGljYXRlcyBiZWNhdXNlIGB3aWR0aGAgaXMgbm90IGZvdW5kIGluIGFueSBvdGhlciBwYXJ0IG9mIHRoZSBsaW5rZWQgbGlzdC5cbiAqXG4gKiBEdXBsaWNhdGUgY2FzZVxuICogYGBgXG4gKiAgIFtzdHlsZS5jb2xvcl1cbiAqICAgW3N0eWxlLndpZHRoLmVtXVxuICogICBbc3R5bGUud2lkdGgucHhdIDw8LSBpbmRleFxuICogYGBgXG4gKiBJbiB0aGUgYWJvdmUgY2FzZSBhZGRpbmcgYFtzdHlsZS53aWR0aC5weF1gIHdpbGwgcHJvZHVjZSBhIGR1cGxpY2F0ZSB3aXRoIGBbc3R5bGUud2lkdGguZW1dYFxuICogYmVjYXVzZSBgd2lkdGhgIGlzIGZvdW5kIGluIHRoZSBjaGFpbi5cbiAqXG4gKiBNYXAgY2FzZSAxXG4gKiBgYGBcbiAqICAgW3N0eWxlLndpZHRoLnB4XVxuICogICBbc3R5bGUuY29sb3JdXG4gKiAgIFtzdHlsZV0gIDw8LSBpbmRleFxuICogYGBgXG4gKiBJbiB0aGUgYWJvdmUgY2FzZSBhZGRpbmcgYFtzdHlsZV1gIHdpbGwgcHJvZHVjZSBhIGR1cGxpY2F0ZSB3aXRoIGFueSBvdGhlciBiaW5kaW5ncyBiZWNhdXNlXG4gKiBgW3N0eWxlXWAgaXMgYSBNYXAgYW5kIGFzIHN1Y2ggaXMgZnVsbHkgZHluYW1pYyBhbmQgY291bGQgcHJvZHVjZSBgY29sb3JgIG9yIGB3aWR0aGAuXG4gKlxuICogTWFwIGNhc2UgMlxuICogYGBgXG4gKiAgIFtzdHlsZV1cbiAqICAgW3N0eWxlLndpZHRoLnB4XVxuICogICBbc3R5bGUuY29sb3JdICA8PC0gaW5kZXhcbiAqIGBgYFxuICogSW4gdGhlIGFib3ZlIGNhc2UgYWRkaW5nIGBbc3R5bGUuY29sb3JdYCB3aWxsIHByb2R1Y2UgYSBkdXBsaWNhdGUgYmVjYXVzZSB0aGVyZSBpcyBhbHJlYWR5IGFcbiAqIGBbc3R5bGVdYCBiaW5kaW5nIHdoaWNoIGlzIGEgTWFwIGFuZCBhcyBzdWNoIGlzIGZ1bGx5IGR5bmFtaWMgYW5kIGNvdWxkIHByb2R1Y2UgYGNvbG9yYCBvclxuICogYHdpZHRoYC5cbiAqXG4gKiBOT1RFOiBPbmNlIGBbc3R5bGVdYCAoTWFwKSBpcyBhZGRlZCBpbnRvIHRoZSBzeXN0ZW0gYWxsIHRoaW5ncyBhcmUgbWFwcGVkIGFzIGR1cGxpY2F0ZXMuXG4gKiBOT1RFOiBXZSB1c2UgYHN0eWxlYCBhcyBleGFtcGxlLCBidXQgc2FtZSBsb2dpYyBpcyBhcHBsaWVkIHRvIGBjbGFzc2BlcyBhcyB3ZWxsLlxuICpcbiAqIEBwYXJhbSB0RGF0YSBgVERhdGFgIHdoZXJlIHRoZSBsaW5rZWQgbGlzdCBpcyBzdG9yZWQuXG4gKiBAcGFyYW0gdFN0eWxpbmdLZXkgYFRTdHlsaW5nS2V5UHJpbWl0aXZlYCB3aGljaCBjb250YWlucyB0aGUgdmFsdWUgdG8gY29tcGFyZSB0byBvdGhlciBrZXlzIGluXG4gKiAgICAgICAgdGhlIGxpbmtlZCBsaXN0LlxuICogQHBhcmFtIGluZGV4IFN0YXJ0aW5nIGxvY2F0aW9uIGluIHRoZSBsaW5rZWQgbGlzdCB0byBzZWFyY2ggZnJvbVxuICogQHBhcmFtIGlzUHJldkRpciBEaXJlY3Rpb24uXG4gKiAgICAgICAgLSBgdHJ1ZWAgZm9yIHByZXZpb3VzIChsb3dlciBwcmlvcml0eSk7XG4gKiAgICAgICAgLSBgZmFsc2VgIGZvciBuZXh0IChoaWdoZXIgcHJpb3JpdHkpLlxuICovXG5mdW5jdGlvbiBtYXJrRHVwbGljYXRlcyh0RGF0YSwgdFN0eWxpbmdLZXksIGluZGV4LCBpc1ByZXZEaXIsIGlzQ2xhc3NCaW5kaW5nKSB7XG4gICAgY29uc3QgdFN0eWxpbmdBdEluZGV4ID0gdERhdGFbaW5kZXggKyAxXTtcbiAgICBjb25zdCBpc01hcCA9IHRTdHlsaW5nS2V5ID09PSBudWxsO1xuICAgIGxldCBjdXJzb3IgPSBpc1ByZXZEaXIgPyBnZXRUU3R5bGluZ1JhbmdlUHJldih0U3R5bGluZ0F0SW5kZXgpIDogZ2V0VFN0eWxpbmdSYW5nZU5leHQodFN0eWxpbmdBdEluZGV4KTtcbiAgICBsZXQgZm91bmREdXBsaWNhdGUgPSBmYWxzZTtcbiAgICAvLyBXZSBrZWVwIGl0ZXJhdGluZyBhcyBsb25nIGFzIHdlIGhhdmUgYSBjdXJzb3JcbiAgICAvLyBBTkQgZWl0aGVyOlxuICAgIC8vIC0gd2UgZm91bmQgd2hhdCB3ZSBhcmUgbG9va2luZyBmb3IsIE9SXG4gICAgLy8gLSB3ZSBhcmUgYSBtYXAgaW4gd2hpY2ggY2FzZSB3ZSBoYXZlIHRvIGNvbnRpbnVlIHNlYXJjaGluZyBldmVuIGFmdGVyIHdlIGZpbmQgd2hhdCB3ZSB3ZXJlXG4gICAgLy8gICBsb29raW5nIGZvciBzaW5jZSB3ZSBhcmUgYSB3aWxkIGNhcmQgYW5kIGV2ZXJ5dGhpbmcgbmVlZHMgdG8gYmUgZmxpcHBlZCB0byBkdXBsaWNhdGUuXG4gICAgd2hpbGUgKGN1cnNvciAhPT0gMCAmJiAoZm91bmREdXBsaWNhdGUgPT09IGZhbHNlIHx8IGlzTWFwKSkge1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SW5kZXhJblJhbmdlKHREYXRhLCBjdXJzb3IpO1xuICAgICAgICBjb25zdCB0U3R5bGluZ1ZhbHVlQXRDdXJzb3IgPSB0RGF0YVtjdXJzb3JdO1xuICAgICAgICBjb25zdCB0U3R5bGVSYW5nZUF0Q3Vyc29yID0gdERhdGFbY3Vyc29yICsgMV07XG4gICAgICAgIGlmIChpc1N0eWxpbmdNYXRjaCh0U3R5bGluZ1ZhbHVlQXRDdXJzb3IsIHRTdHlsaW5nS2V5KSkge1xuICAgICAgICAgICAgZm91bmREdXBsaWNhdGUgPSB0cnVlO1xuICAgICAgICAgICAgdERhdGFbY3Vyc29yICsgMV0gPSBpc1ByZXZEaXIgPyBzZXRUU3R5bGluZ1JhbmdlTmV4dER1cGxpY2F0ZSh0U3R5bGVSYW5nZUF0Q3Vyc29yKSA6XG4gICAgICAgICAgICAgICAgc2V0VFN0eWxpbmdSYW5nZVByZXZEdXBsaWNhdGUodFN0eWxlUmFuZ2VBdEN1cnNvcik7XG4gICAgICAgIH1cbiAgICAgICAgY3Vyc29yID0gaXNQcmV2RGlyID8gZ2V0VFN0eWxpbmdSYW5nZVByZXYodFN0eWxlUmFuZ2VBdEN1cnNvcikgOlxuICAgICAgICAgICAgZ2V0VFN0eWxpbmdSYW5nZU5leHQodFN0eWxlUmFuZ2VBdEN1cnNvcik7XG4gICAgfVxuICAgIGlmIChmb3VuZER1cGxpY2F0ZSkge1xuICAgICAgICAvLyBpZiB3ZSBmb3VuZCBhIGR1cGxpY2F0ZSwgdGhhbiBtYXJrIG91cnNlbHZlcy5cbiAgICAgICAgdERhdGFbaW5kZXggKyAxXSA9IGlzUHJldkRpciA/IHNldFRTdHlsaW5nUmFuZ2VQcmV2RHVwbGljYXRlKHRTdHlsaW5nQXRJbmRleCkgOlxuICAgICAgICAgICAgc2V0VFN0eWxpbmdSYW5nZU5leHREdXBsaWNhdGUodFN0eWxpbmdBdEluZGV4KTtcbiAgICB9XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdHdvIGBUU3R5bGluZ0tleWBzIGFyZSBhIG1hdGNoLlxuICpcbiAqIFdoZW4gY29tcHV0aW5nIHdoZXRoZXIgYSBiaW5kaW5nIGNvbnRhaW5zIGEgZHVwbGljYXRlLCB3ZSBuZWVkIHRvIGNvbXBhcmUgaWYgdGhlIGluc3RydWN0aW9uXG4gKiBgVFN0eWxpbmdLZXlgIGhhcyBhIG1hdGNoLlxuICpcbiAqIEhlcmUgYXJlIGV4YW1wbGVzIG9mIGBUU3R5bGluZ0tleWBzIHdoaWNoIG1hdGNoIGdpdmVuIGB0U3R5bGluZ0tleUN1cnNvcmAgaXM6XG4gKiAtIGBjb2xvcmBcbiAqICAgIC0gYGNvbG9yYCAgICAvLyBNYXRjaCBhbm90aGVyIGNvbG9yXG4gKiAgICAtIGBudWxsYCAgICAgLy8gVGhhdCBtZWFucyB0aGF0IGB0U3R5bGluZ0tleWAgaXMgYSBgY2xhc3NNYXBgL2BzdHlsZU1hcGAgaW5zdHJ1Y3Rpb25cbiAqICAgIC0gYFsnJywgJ2NvbG9yJywgJ290aGVyJywgdHJ1ZV1gIC8vIHdyYXBwZWQgYGNvbG9yYCBzbyBtYXRjaFxuICogICAgLSBgWycnLCBudWxsLCAnb3RoZXInLCB0cnVlXWAgICAgICAgLy8gd3JhcHBlZCBgbnVsbGAgc28gbWF0Y2hcbiAqICAgIC0gYFsnJywgJ3dpZHRoJywgJ2NvbG9yJywgJ3ZhbHVlJ11gIC8vIHdyYXBwZWQgc3RhdGljIHZhbHVlIGNvbnRhaW5zIGEgbWF0Y2ggb24gYCdjb2xvcidgXG4gKiAtIGBudWxsYCAgICAgICAvLyBgdFN0eWxpbmdLZXlDdXJzb3JgIGFsd2F5cyBtYXRjaCBhcyBpdCBpcyBgY2xhc3NNYXBgL2BzdHlsZU1hcGAgaW5zdHJ1Y3Rpb25cbiAqXG4gKiBAcGFyYW0gdFN0eWxpbmdLZXlDdXJzb3JcbiAqIEBwYXJhbSB0U3R5bGluZ0tleVxuICovXG5mdW5jdGlvbiBpc1N0eWxpbmdNYXRjaCh0U3R5bGluZ0tleUN1cnNvciwgdFN0eWxpbmdLZXkpIHtcbiAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgYXNzZXJ0Tm90RXF1YWwoQXJyYXkuaXNBcnJheSh0U3R5bGluZ0tleSksIHRydWUsICdFeHBlY3RlZCB0aGF0IFxcJ3RTdHlsaW5nS2V5XFwnIGhhcyBiZWVuIHVud3JhcHBlZCcpO1xuICAgIGlmICh0U3R5bGluZ0tleUN1cnNvciA9PT0gbnVsbCB8fCAvLyBJZiB0aGUgY3Vyc29yIGlzIGBudWxsYCBpdCBtZWFucyB0aGF0IHdlIGhhdmUgbWFwIGF0IHRoYXRcbiAgICAgICAgLy8gbG9jYXRpb24gc28gd2UgbXVzdCBhc3N1bWUgdGhhdCB3ZSBoYXZlIGEgbWF0Y2guXG4gICAgICAgIHRTdHlsaW5nS2V5ID09IG51bGwgfHwgLy8gSWYgYHRTdHlsaW5nS2V5YCBpcyBgbnVsbGAgdGhlbiBpdCBpcyBhIG1hcCB0aGVyZWZvciBhc3N1bWUgdGhhdCBpdFxuICAgICAgICAvLyBjb250YWlucyBhIG1hdGNoLlxuICAgICAgICAoQXJyYXkuaXNBcnJheSh0U3R5bGluZ0tleUN1cnNvcikgPyB0U3R5bGluZ0tleUN1cnNvclsxXSA6IHRTdHlsaW5nS2V5Q3Vyc29yKSA9PT1cbiAgICAgICAgICAgIHRTdHlsaW5nS2V5IC8vIElmIHRoZSBrZXlzIG1hdGNoIGV4cGxpY2l0bHkgdGhhbiB3ZSBhcmUgYSBtYXRjaC5cbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodFN0eWxpbmdLZXlDdXJzb3IpICYmIHR5cGVvZiB0U3R5bGluZ0tleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gaWYgd2UgZGlkIG5vdCBmaW5kIGEgbWF0Y2gsIGJ1dCBgdFN0eWxpbmdLZXlDdXJzb3JgIGlzIGBLZXlWYWx1ZUFycmF5YCB0aGF0IG1lYW5zIGN1cnNvciBoYXNcbiAgICAgICAgLy8gc3RhdGljcyBhbmQgd2UgbmVlZCB0byBjaGVjayB0aG9zZSBhcyB3ZWxsLlxuICAgICAgICByZXR1cm4ga2V5VmFsdWVBcnJheUluZGV4T2YodFN0eWxpbmdLZXlDdXJzb3IsIHRTdHlsaW5nS2V5KSA+PVxuICAgICAgICAgICAgMDsgLy8gc2VlIGlmIHdlIGFyZSBtYXRjaGluZyB0aGUga2V5XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBHbG9iYWwgc3RhdGUgb2YgdGhlIHBhcnNlci4gKFRoaXMgbWFrZXMgcGFyc2VyIG5vbi1yZWVudHJhbnQsIGJ1dCB0aGF0IGlzIG5vdCBhbiBpc3N1ZSlcbmNvbnN0IHBhcnNlclN0YXRlID0ge1xuICAgIHRleHRFbmQ6IDAsXG4gICAga2V5OiAwLFxuICAgIGtleUVuZDogMCxcbiAgICB2YWx1ZTogMCxcbiAgICB2YWx1ZUVuZDogMCxcbn07XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgbGFzdCBwYXJzZWQgYGtleWAgb2Ygc3R5bGUuXG4gKiBAcGFyYW0gdGV4dCB0aGUgdGV4dCB0byBzdWJzdHJpbmcgdGhlIGtleSBmcm9tLlxuICovXG5mdW5jdGlvbiBnZXRMYXN0UGFyc2VkS2V5KHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5zdWJzdHJpbmcocGFyc2VyU3RhdGUua2V5LCBwYXJzZXJTdGF0ZS5rZXlFbmQpO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGxhc3QgcGFyc2VkIGB2YWx1ZWAgb2Ygc3R5bGUuXG4gKiBAcGFyYW0gdGV4dCB0aGUgdGV4dCB0byBzdWJzdHJpbmcgdGhlIGtleSBmcm9tLlxuICovXG5mdW5jdGlvbiBnZXRMYXN0UGFyc2VkVmFsdWUodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnN1YnN0cmluZyhwYXJzZXJTdGF0ZS52YWx1ZSwgcGFyc2VyU3RhdGUudmFsdWVFbmQpO1xufVxuLyoqXG4gKiBJbml0aWFsaXplcyBgY2xhc3NOYW1lYCBzdHJpbmcgZm9yIHBhcnNpbmcgYW5kIHBhcnNlcyB0aGUgZmlyc3QgdG9rZW4uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIHRoaXMgZm9ybWF0OlxuICogYGBgXG4gKiBmb3IgKGxldCBpID0gcGFyc2VDbGFzc05hbWUodGV4dCk7IGkgPj0gMDsgaSA9IHBhcnNlQ2xhc3NOYW1lTmV4dCh0ZXh0LCBpKSkge1xuICogICBjb25zdCBrZXkgPSBnZXRMYXN0UGFyc2VkS2V5KCk7XG4gKiAgIC4uLlxuICogfVxuICogYGBgXG4gKiBAcGFyYW0gdGV4dCBgY2xhc3NOYW1lYCB0byBwYXJzZVxuICogQHJldHVybnMgaW5kZXggd2hlcmUgdGhlIG5leHQgaW52b2NhdGlvbiBvZiBgcGFyc2VDbGFzc05hbWVOZXh0YCBzaG91bGQgcmVzdW1lLlxuICovXG5mdW5jdGlvbiBwYXJzZUNsYXNzTmFtZSh0ZXh0KSB7XG4gICAgcmVzZXRQYXJzZXJTdGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VDbGFzc05hbWVOZXh0KHRleHQsIGNvbnN1bWVXaGl0ZXNwYWNlKHRleHQsIDAsIHBhcnNlclN0YXRlLnRleHRFbmQpKTtcbn1cbi8qKlxuICogUGFyc2VzIG5leHQgYGNsYXNzTmFtZWAgdG9rZW4uXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIHRoaXMgZm9ybWF0OlxuICogYGBgXG4gKiBmb3IgKGxldCBpID0gcGFyc2VDbGFzc05hbWUodGV4dCk7IGkgPj0gMDsgaSA9IHBhcnNlQ2xhc3NOYW1lTmV4dCh0ZXh0LCBpKSkge1xuICogICBjb25zdCBrZXkgPSBnZXRMYXN0UGFyc2VkS2V5KCk7XG4gKiAgIC4uLlxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIHRleHQgYGNsYXNzTmFtZWAgdG8gcGFyc2VcbiAqIEBwYXJhbSBpbmRleCB3aGVyZSB0aGUgcGFyc2luZyBzaG91bGQgcmVzdW1lLlxuICogQHJldHVybnMgaW5kZXggd2hlcmUgdGhlIG5leHQgaW52b2NhdGlvbiBvZiBgcGFyc2VDbGFzc05hbWVOZXh0YCBzaG91bGQgcmVzdW1lLlxuICovXG5mdW5jdGlvbiBwYXJzZUNsYXNzTmFtZU5leHQodGV4dCwgaW5kZXgpIHtcbiAgICBjb25zdCBlbmQgPSBwYXJzZXJTdGF0ZS50ZXh0RW5kO1xuICAgIGlmIChlbmQgPT09IGluZGV4KSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaW5kZXggPSBwYXJzZXJTdGF0ZS5rZXlFbmQgPSBjb25zdW1lQ2xhc3NUb2tlbih0ZXh0LCBwYXJzZXJTdGF0ZS5rZXkgPSBpbmRleCwgZW5kKTtcbiAgICByZXR1cm4gY29uc3VtZVdoaXRlc3BhY2UodGV4dCwgaW5kZXgsIGVuZCk7XG59XG4vKipcbiAqIEluaXRpYWxpemVzIGBjc3NUZXh0YCBzdHJpbmcgZm9yIHBhcnNpbmcgYW5kIHBhcnNlcyB0aGUgZmlyc3Qga2V5L3ZhbHVlcy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGludGVuZGVkIHRvIGJlIHVzZWQgaW4gdGhpcyBmb3JtYXQ6XG4gKiBgYGBcbiAqIGZvciAobGV0IGkgPSBwYXJzZVN0eWxlKHRleHQpOyBpID49IDA7IGkgPSBwYXJzZVN0eWxlTmV4dCh0ZXh0LCBpKSkpIHtcbiAqICAgY29uc3Qga2V5ID0gZ2V0TGFzdFBhcnNlZEtleSgpO1xuICogICBjb25zdCB2YWx1ZSA9IGdldExhc3RQYXJzZWRWYWx1ZSgpO1xuICogICAuLi5cbiAqIH1cbiAqIGBgYFxuICogQHBhcmFtIHRleHQgYGNzc1RleHRgIHRvIHBhcnNlXG4gKiBAcmV0dXJucyBpbmRleCB3aGVyZSB0aGUgbmV4dCBpbnZvY2F0aW9uIG9mIGBwYXJzZVN0eWxlTmV4dGAgc2hvdWxkIHJlc3VtZS5cbiAqL1xuZnVuY3Rpb24gcGFyc2VTdHlsZSh0ZXh0KSB7XG4gICAgcmVzZXRQYXJzZXJTdGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VTdHlsZU5leHQodGV4dCwgY29uc3VtZVdoaXRlc3BhY2UodGV4dCwgMCwgcGFyc2VyU3RhdGUudGV4dEVuZCkpO1xufVxuLyoqXG4gKiBQYXJzZXMgdGhlIG5leHQgYGNzc1RleHRgIGtleS92YWx1ZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGluIHRoaXMgZm9ybWF0OlxuICogYGBgXG4gKiBmb3IgKGxldCBpID0gcGFyc2VTdHlsZSh0ZXh0KTsgaSA+PSAwOyBpID0gcGFyc2VTdHlsZU5leHQodGV4dCwgaSkpKSB7XG4gKiAgIGNvbnN0IGtleSA9IGdldExhc3RQYXJzZWRLZXkoKTtcbiAqICAgY29uc3QgdmFsdWUgPSBnZXRMYXN0UGFyc2VkVmFsdWUoKTtcbiAqICAgLi4uXG4gKiB9XG4gKlxuICogQHBhcmFtIHRleHQgYGNzc1RleHRgIHRvIHBhcnNlXG4gKiBAcGFyYW0gaW5kZXggd2hlcmUgdGhlIHBhcnNpbmcgc2hvdWxkIHJlc3VtZS5cbiAqIEByZXR1cm5zIGluZGV4IHdoZXJlIHRoZSBuZXh0IGludm9jYXRpb24gb2YgYHBhcnNlU3R5bGVOZXh0YCBzaG91bGQgcmVzdW1lLlxuICovXG5mdW5jdGlvbiBwYXJzZVN0eWxlTmV4dCh0ZXh0LCBzdGFydEluZGV4KSB7XG4gICAgY29uc3QgZW5kID0gcGFyc2VyU3RhdGUudGV4dEVuZDtcbiAgICBsZXQgaW5kZXggPSBwYXJzZXJTdGF0ZS5rZXkgPSBjb25zdW1lV2hpdGVzcGFjZSh0ZXh0LCBzdGFydEluZGV4LCBlbmQpO1xuICAgIGlmIChlbmQgPT09IGluZGV4KSB7XG4gICAgICAgIC8vIHdlIHJlYWNoZWQgYW4gZW5kIHNvIGp1c3QgcXVpdFxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGluZGV4ID0gcGFyc2VyU3RhdGUua2V5RW5kID0gY29uc3VtZVN0eWxlS2V5KHRleHQsIGluZGV4LCBlbmQpO1xuICAgIGluZGV4ID0gY29uc3VtZVNlcGFyYXRvcih0ZXh0LCBpbmRleCwgZW5kLCA1OCAvKiBDT0xPTiAqLyk7XG4gICAgaW5kZXggPSBwYXJzZXJTdGF0ZS52YWx1ZSA9IGNvbnN1bWVXaGl0ZXNwYWNlKHRleHQsIGluZGV4LCBlbmQpO1xuICAgIGluZGV4ID0gcGFyc2VyU3RhdGUudmFsdWVFbmQgPSBjb25zdW1lU3R5bGVWYWx1ZSh0ZXh0LCBpbmRleCwgZW5kKTtcbiAgICByZXR1cm4gY29uc3VtZVNlcGFyYXRvcih0ZXh0LCBpbmRleCwgZW5kLCA1OSAvKiBTRU1JX0NPTE9OICovKTtcbn1cbi8qKlxuICogUmVzZXQgdGhlIGdsb2JhbCBzdGF0ZSBvZiB0aGUgc3R5bGluZyBwYXJzZXIuXG4gKiBAcGFyYW0gdGV4dCBUaGUgc3R5bGluZyB0ZXh0IHRvIHBhcnNlLlxuICovXG5mdW5jdGlvbiByZXNldFBhcnNlclN0YXRlKHRleHQpIHtcbiAgICBwYXJzZXJTdGF0ZS5rZXkgPSAwO1xuICAgIHBhcnNlclN0YXRlLmtleUVuZCA9IDA7XG4gICAgcGFyc2VyU3RhdGUudmFsdWUgPSAwO1xuICAgIHBhcnNlclN0YXRlLnZhbHVlRW5kID0gMDtcbiAgICBwYXJzZXJTdGF0ZS50ZXh0RW5kID0gdGV4dC5sZW5ndGg7XG59XG4vKipcbiAqIFJldHVybnMgaW5kZXggb2YgbmV4dCBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIuXG4gKlxuICogQHBhcmFtIHRleHQgVGV4dCB0byBzY2FuXG4gKiBAcGFyYW0gc3RhcnRJbmRleCBTdGFydGluZyBpbmRleCBvZiBjaGFyYWN0ZXIgd2hlcmUgdGhlIHNjYW4gc2hvdWxkIHN0YXJ0LlxuICogQHBhcmFtIGVuZEluZGV4IEVuZGluZyBpbmRleCBvZiBjaGFyYWN0ZXIgd2hlcmUgdGhlIHNjYW4gc2hvdWxkIGVuZC5cbiAqIEByZXR1cm5zIEluZGV4IG9mIG5leHQgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVyIChNYXkgYmUgdGhlIHNhbWUgYXMgYHN0YXJ0YCBpZiBubyB3aGl0ZXNwYWNlIGF0XG4gKiAgICAgICAgICB0aGF0IGxvY2F0aW9uLilcbiAqL1xuZnVuY3Rpb24gY29uc3VtZVdoaXRlc3BhY2UodGV4dCwgc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICB3aGlsZSAoc3RhcnRJbmRleCA8IGVuZEluZGV4ICYmIHRleHQuY2hhckNvZGVBdChzdGFydEluZGV4KSA8PSAzMiAvKiBTUEFDRSAqLykge1xuICAgICAgICBzdGFydEluZGV4Kys7XG4gICAgfVxuICAgIHJldHVybiBzdGFydEluZGV4O1xufVxuLyoqXG4gKiBSZXR1cm5zIGluZGV4IG9mIGxhc3QgY2hhciBpbiBjbGFzcyB0b2tlbi5cbiAqXG4gKiBAcGFyYW0gdGV4dCBUZXh0IHRvIHNjYW5cbiAqIEBwYXJhbSBzdGFydEluZGV4IFN0YXJ0aW5nIGluZGV4IG9mIGNoYXJhY3RlciB3aGVyZSB0aGUgc2NhbiBzaG91bGQgc3RhcnQuXG4gKiBAcGFyYW0gZW5kSW5kZXggRW5kaW5nIGluZGV4IG9mIGNoYXJhY3RlciB3aGVyZSB0aGUgc2NhbiBzaG91bGQgZW5kLlxuICogQHJldHVybnMgSW5kZXggYWZ0ZXIgbGFzdCBjaGFyIGluIGNsYXNzIHRva2VuLlxuICovXG5mdW5jdGlvbiBjb25zdW1lQ2xhc3NUb2tlbih0ZXh0LCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgIHdoaWxlIChzdGFydEluZGV4IDwgZW5kSW5kZXggJiYgdGV4dC5jaGFyQ29kZUF0KHN0YXJ0SW5kZXgpID4gMzIgLyogU1BBQ0UgKi8pIHtcbiAgICAgICAgc3RhcnRJbmRleCsrO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnRJbmRleDtcbn1cbi8qKlxuICogQ29uc3VtZXMgYWxsIG9mIHRoZSBjaGFyYWN0ZXJzIGJlbG9uZ2luZyB0byBzdHlsZSBrZXkgYW5kIHRva2VuLlxuICpcbiAqIEBwYXJhbSB0ZXh0IFRleHQgdG8gc2NhblxuICogQHBhcmFtIHN0YXJ0SW5kZXggU3RhcnRpbmcgaW5kZXggb2YgY2hhcmFjdGVyIHdoZXJlIHRoZSBzY2FuIHNob3VsZCBzdGFydC5cbiAqIEBwYXJhbSBlbmRJbmRleCBFbmRpbmcgaW5kZXggb2YgY2hhcmFjdGVyIHdoZXJlIHRoZSBzY2FuIHNob3VsZCBlbmQuXG4gKiBAcmV0dXJucyBJbmRleCBhZnRlciBsYXN0IHN0eWxlIGtleSBjaGFyYWN0ZXIuXG4gKi9cbmZ1bmN0aW9uIGNvbnN1bWVTdHlsZUtleSh0ZXh0LCBzdGFydEluZGV4LCBlbmRJbmRleCkge1xuICAgIGxldCBjaDtcbiAgICB3aGlsZSAoc3RhcnRJbmRleCA8IGVuZEluZGV4ICYmXG4gICAgICAgICgoY2ggPSB0ZXh0LmNoYXJDb2RlQXQoc3RhcnRJbmRleCkpID09PSA0NSAvKiBEQVNIICovIHx8IGNoID09PSA5NSAvKiBVTkRFUlNDT1JFICovIHx8XG4gICAgICAgICAgICAoKGNoICYgLTMzIC8qIFVQUEVSX0NBU0UgKi8pID49IDY1IC8qIEEgKi8gJiYgKGNoICYgLTMzIC8qIFVQUEVSX0NBU0UgKi8pIDw9IDkwIC8qIFogKi8pIHx8XG4gICAgICAgICAgICAoY2ggPj0gNDggLyogWkVSTyAqLyAmJiBjaCA8PSA1NyAvKiBOSU5FICovKSkpIHtcbiAgICAgICAgc3RhcnRJbmRleCsrO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnRJbmRleDtcbn1cbi8qKlxuICogQ29uc3VtZXMgYWxsIHdoaXRlc3BhY2UgYW5kIHRoZSBzZXBhcmF0b3IgYDpgIGFmdGVyIHRoZSBzdHlsZSBrZXkuXG4gKlxuICogQHBhcmFtIHRleHQgVGV4dCB0byBzY2FuXG4gKiBAcGFyYW0gc3RhcnRJbmRleCBTdGFydGluZyBpbmRleCBvZiBjaGFyYWN0ZXIgd2hlcmUgdGhlIHNjYW4gc2hvdWxkIHN0YXJ0LlxuICogQHBhcmFtIGVuZEluZGV4IEVuZGluZyBpbmRleCBvZiBjaGFyYWN0ZXIgd2hlcmUgdGhlIHNjYW4gc2hvdWxkIGVuZC5cbiAqIEByZXR1cm5zIEluZGV4IGFmdGVyIHNlcGFyYXRvciBhbmQgc3Vycm91bmRpbmcgd2hpdGVzcGFjZS5cbiAqL1xuZnVuY3Rpb24gY29uc3VtZVNlcGFyYXRvcih0ZXh0LCBzdGFydEluZGV4LCBlbmRJbmRleCwgc2VwYXJhdG9yKSB7XG4gICAgc3RhcnRJbmRleCA9IGNvbnN1bWVXaGl0ZXNwYWNlKHRleHQsIHN0YXJ0SW5kZXgsIGVuZEluZGV4KTtcbiAgICBpZiAoc3RhcnRJbmRleCA8IGVuZEluZGV4KSB7XG4gICAgICAgIGlmIChuZ0Rldk1vZGUgJiYgdGV4dC5jaGFyQ29kZUF0KHN0YXJ0SW5kZXgpICE9PSBzZXBhcmF0b3IpIHtcbiAgICAgICAgICAgIG1hbGZvcm1lZFN0eWxlRXJyb3IodGV4dCwgU3RyaW5nLmZyb21DaGFyQ29kZShzZXBhcmF0b3IpLCBzdGFydEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBzdGFydEluZGV4Kys7XG4gICAgfVxuICAgIHJldHVybiBzdGFydEluZGV4O1xufVxuLyoqXG4gKiBDb25zdW1lcyBzdHlsZSB2YWx1ZSBob25vcmluZyBgdXJsKClgIGFuZCBgXCJcImAgdGV4dC5cbiAqXG4gKiBAcGFyYW0gdGV4dCBUZXh0IHRvIHNjYW5cbiAqIEBwYXJhbSBzdGFydEluZGV4IFN0YXJ0aW5nIGluZGV4IG9mIGNoYXJhY3RlciB3aGVyZSB0aGUgc2NhbiBzaG91bGQgc3RhcnQuXG4gKiBAcGFyYW0gZW5kSW5kZXggRW5kaW5nIGluZGV4IG9mIGNoYXJhY3RlciB3aGVyZSB0aGUgc2NhbiBzaG91bGQgZW5kLlxuICogQHJldHVybnMgSW5kZXggYWZ0ZXIgbGFzdCBzdHlsZSB2YWx1ZSBjaGFyYWN0ZXIuXG4gKi9cbmZ1bmN0aW9uIGNvbnN1bWVTdHlsZVZhbHVlKHRleHQsIHN0YXJ0SW5kZXgsIGVuZEluZGV4KSB7XG4gICAgbGV0IGNoMSA9IC0xOyAvLyAxc3QgcHJldmlvdXMgY2hhcmFjdGVyXG4gICAgbGV0IGNoMiA9IC0xOyAvLyAybmQgcHJldmlvdXMgY2hhcmFjdGVyXG4gICAgbGV0IGNoMyA9IC0xOyAvLyAzcmQgcHJldmlvdXMgY2hhcmFjdGVyXG4gICAgbGV0IGkgPSBzdGFydEluZGV4O1xuICAgIGxldCBsYXN0Q2hJbmRleCA9IGk7XG4gICAgd2hpbGUgKGkgPCBlbmRJbmRleCkge1xuICAgICAgICBjb25zdCBjaCA9IHRleHQuY2hhckNvZGVBdChpKyspO1xuICAgICAgICBpZiAoY2ggPT09IDU5IC8qIFNFTUlfQ09MT04gKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0Q2hJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaCA9PT0gMzQgLyogRE9VQkxFX1FVT1RFICovIHx8IGNoID09PSAzOSAvKiBTSU5HTEVfUVVPVEUgKi8pIHtcbiAgICAgICAgICAgIGxhc3RDaEluZGV4ID0gaSA9IGNvbnN1bWVRdW90ZWRUZXh0KHRleHQsIGNoLCBpLCBlbmRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhcnRJbmRleCA9PT1cbiAgICAgICAgICAgIGkgLSA0ICYmIC8vIFdlIGhhdmUgc2VlbiBvbmx5IDQgY2hhcmFjdGVycyBzbyBmYXIgXCJVUkwoXCIgKElnbm9yZSBcImZvb19VUkwoKVwiKVxuICAgICAgICAgICAgY2gzID09PSA4NSAvKiBVICovICYmXG4gICAgICAgICAgICBjaDIgPT09IDgyIC8qIFIgKi8gJiYgY2gxID09PSA3NiAvKiBMICovICYmIGNoID09PSA0MCAvKiBPUEVOX1BBUkVOICovKSB7XG4gICAgICAgICAgICBsYXN0Q2hJbmRleCA9IGkgPSBjb25zdW1lUXVvdGVkVGV4dCh0ZXh0LCA0MSAvKiBDTE9TRV9QQVJFTiAqLywgaSwgZW5kSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNoID4gMzIgLyogU1BBQ0UgKi8pIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXIgdGhlbiBjYXB0dXJlIGl0cyBsb2NhdGlvblxuICAgICAgICAgICAgbGFzdENoSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIGNoMyA9IGNoMjtcbiAgICAgICAgY2gyID0gY2gxO1xuICAgICAgICBjaDEgPSBjaCAmIC0zMyAvKiBVUFBFUl9DQVNFICovO1xuICAgIH1cbiAgICByZXR1cm4gbGFzdENoSW5kZXg7XG59XG4vKipcbiAqIENvbnN1bWVzIGFsbCBvZiB0aGUgcXVvdGVkIGNoYXJhY3RlcnMuXG4gKlxuICogQHBhcmFtIHRleHQgVGV4dCB0byBzY2FuXG4gKiBAcGFyYW0gcXVvdGVDaGFyQ29kZSBDaGFyQ29kZSBvZiBlaXRoZXIgYFwiYCBvciBgJ2AgcXVvdGUgb3IgYClgIGZvciBgdXJsKC4uLilgLlxuICogQHBhcmFtIHN0YXJ0SW5kZXggU3RhcnRpbmcgaW5kZXggb2YgY2hhcmFjdGVyIHdoZXJlIHRoZSBzY2FuIHNob3VsZCBzdGFydC5cbiAqIEBwYXJhbSBlbmRJbmRleCBFbmRpbmcgaW5kZXggb2YgY2hhcmFjdGVyIHdoZXJlIHRoZSBzY2FuIHNob3VsZCBlbmQuXG4gKiBAcmV0dXJucyBJbmRleCBhZnRlciBxdW90ZWQgY2hhcmFjdGVycy5cbiAqL1xuZnVuY3Rpb24gY29uc3VtZVF1b3RlZFRleHQodGV4dCwgcXVvdGVDaGFyQ29kZSwgc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICBsZXQgY2gxID0gLTE7IC8vIDFzdCBwcmV2aW91cyBjaGFyYWN0ZXJcbiAgICBsZXQgaW5kZXggPSBzdGFydEluZGV4O1xuICAgIHdoaWxlIChpbmRleCA8IGVuZEluZGV4KSB7XG4gICAgICAgIGNvbnN0IGNoID0gdGV4dC5jaGFyQ29kZUF0KGluZGV4KyspO1xuICAgICAgICBpZiAoY2ggPT0gcXVvdGVDaGFyQ29kZSAmJiBjaDEgIT09IDkyIC8qIEJBQ0tfU0xBU0ggKi8pIHtcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2ggPT0gOTIgLyogQkFDS19TTEFTSCAqLyAmJiBjaDEgPT09IDkyIC8qIEJBQ0tfU0xBU0ggKi8pIHtcbiAgICAgICAgICAgIC8vIHR3byBiYWNrIHNsYXNoZXMgY2FuY2VsIGVhY2ggb3RoZXIgb3V0LiBGb3IgZXhhbXBsZSBgXCJcXFxcXCJgIHNob3VsZCBwcm9wZXJseSBlbmQgdGhlXG4gICAgICAgICAgICAvLyBxdW90YXRpb24uIChJdCBzaG91bGQgbm90IGFzc3VtZSB0aGF0IHRoZSBsYXN0IGBcImAgaXMgZXNjYXBlZC4pXG4gICAgICAgICAgICBjaDEgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY2gxID0gY2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmdEZXZNb2RlID8gbWFsZm9ybWVkU3R5bGVFcnJvcih0ZXh0LCBTdHJpbmcuZnJvbUNoYXJDb2RlKHF1b3RlQ2hhckNvZGUpLCBlbmRJbmRleCkgOlxuICAgICAgICBuZXcgRXJyb3IoKTtcbn1cbmZ1bmN0aW9uIG1hbGZvcm1lZFN0eWxlRXJyb3IodGV4dCwgZXhwZWN0aW5nLCBpbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRFcXVhbCh0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycsIHRydWUsICdTdHJpbmcgZXhwZWN0ZWQgaGVyZScpO1xuICAgIHRocm93IHRocm93RXJyb3IoYE1hbGZvcm1lZCBzdHlsZSBhdCBsb2NhdGlvbiAke2luZGV4fSBpbiBzdHJpbmcgJ2AgKyB0ZXh0LnN1YnN0cmluZygwLCBpbmRleCkgKyAnWz4+JyArXG4gICAgICAgIHRleHQuc3Vic3RyaW5nKGluZGV4LCBpbmRleCArIDEpICsgJzw8XScgKyB0ZXh0LnN1YnN0cihpbmRleCArIDEpICtcbiAgICAgICAgYCcuIEV4cGVjdGluZyAnJHtleHBlY3Rpbmd9Jy5gKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFVwZGF0ZSBhIHN0eWxlIGJpbmRpbmcgb24gYW4gZWxlbWVudCB3aXRoIHRoZSBwcm92aWRlZCB2YWx1ZS5cbiAqXG4gKiBJZiB0aGUgc3R5bGUgdmFsdWUgaXMgZmFsc3kgdGhlbiBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudFxuICogKG9yIGFzc2lnbmVkIGEgZGlmZmVyZW50IHZhbHVlIGRlcGVuZGluZyBpZiB0aGVyZSBhcmUgYW55IHN0eWxlcyBwbGFjZWRcbiAqIG9uIHRoZSBlbGVtZW50IHdpdGggYHN0eWxlTWFwYCBvciBhbnkgc3RhdGljIHN0eWxlcyB0aGF0IGFyZVxuICogcHJlc2VudCBmcm9tIHdoZW4gdGhlIGVsZW1lbnQgd2FzIGNyZWF0ZWQgd2l0aCBgc3R5bGluZ2ApLlxuICpcbiAqIE5vdGUgdGhhdCB0aGUgc3R5bGluZyBlbGVtZW50IGlzIHVwZGF0ZWQgYXMgcGFydCBvZiBgc3R5bGluZ0FwcGx5YC5cbiAqXG4gKiBAcGFyYW0gcHJvcCBBIHZhbGlkIENTUyBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgdG8gd3JpdGUgKGBudWxsYCBvciBhbiBlbXB0eSBzdHJpbmcgdG8gcmVtb3ZlKS5cbiAqIEBwYXJhbSBzdWZmaXggT3B0aW9uYWwgc3VmZml4LiBVc2VkIHdpdGggc2NhbGFyIHZhbHVlcyB0byBhZGQgdW5pdCBzdWNoIGFzIGBweGAuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgd2lsbCBhcHBseSB0aGUgcHJvdmlkZWQgc3R5bGUgdmFsdWUgdG8gdGhlIGhvc3QgZWxlbWVudCBpZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZFxuICogd2l0aGluIGEgaG9zdCBiaW5kaW5nIGZ1bmN0aW9uLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVzdHlsZVByb3AocHJvcCwgdmFsdWUsIHN1ZmZpeCkge1xuICAgIGNoZWNrU3R5bGluZ1Byb3BlcnR5KHByb3AsIHZhbHVlLCBzdWZmaXgsIGZhbHNlKTtcbiAgICByZXR1cm4gybXJtXN0eWxlUHJvcDtcbn1cbi8qKlxuICogVXBkYXRlIGEgY2xhc3MgYmluZGluZyBvbiBhbiBlbGVtZW50IHdpdGggdGhlIHByb3ZpZGVkIHZhbHVlLlxuICpcbiAqIFRoaXMgaW5zdHJ1Y3Rpb24gaXMgbWVhbnQgdG8gaGFuZGxlIHRoZSBgW2NsYXNzLmZvb109XCJleHBcImAgY2FzZSBhbmQsXG4gKiB0aGVyZWZvcmUsIHRoZSBjbGFzcyBiaW5kaW5nIGl0c2VsZiBtdXN0IGFscmVhZHkgYmUgYWxsb2NhdGVkIHVzaW5nXG4gKiBgc3R5bGluZ2Agd2l0aGluIHRoZSBjcmVhdGlvbiBibG9jay5cbiAqXG4gKiBAcGFyYW0gcHJvcCBBIHZhbGlkIENTUyBjbGFzcyAob25seSBvbmUpLlxuICogQHBhcmFtIHZhbHVlIEEgdHJ1ZS9mYWxzZSB2YWx1ZSB3aGljaCB3aWxsIHR1cm4gdGhlIGNsYXNzIG9uIG9yIG9mZi5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyB3aWxsIGFwcGx5IHRoZSBwcm92aWRlZCBjbGFzcyB2YWx1ZSB0byB0aGUgaG9zdCBlbGVtZW50IGlmIHRoaXMgZnVuY3Rpb25cbiAqIGlzIGNhbGxlZCB3aXRoaW4gYSBob3N0IGJpbmRpbmcgZnVuY3Rpb24uXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWNsYXNzUHJvcChjbGFzc05hbWUsIHZhbHVlKSB7XG4gICAgY2hlY2tTdHlsaW5nUHJvcGVydHkoY2xhc3NOYW1lLCB2YWx1ZSwgbnVsbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIMm1ybVjbGFzc1Byb3A7XG59XG4vKipcbiAqIFVwZGF0ZSBzdHlsZSBiaW5kaW5ncyB1c2luZyBhbiBvYmplY3QgbGl0ZXJhbCBvbiBhbiBlbGVtZW50LlxuICpcbiAqIFRoaXMgaW5zdHJ1Y3Rpb24gaXMgbWVhbnQgdG8gYXBwbHkgc3R5bGluZyB2aWEgdGhlIGBbc3R5bGVdPVwiZXhwXCJgIHRlbXBsYXRlIGJpbmRpbmdzLlxuICogV2hlbiBzdHlsZXMgYXJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgdGhleSB3aWxsIHRoZW4gYmUgdXBkYXRlZCB3aXRoIHJlc3BlY3QgdG9cbiAqIGFueSBzdHlsZXMvY2xhc3NlcyBzZXQgdmlhIGBzdHlsZVByb3BgLiBJZiBhbnkgc3R5bGVzIGFyZSBzZXQgdG8gZmFsc3lcbiAqIHRoZW4gdGhleSB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIHN0eWxpbmcgaW5zdHJ1Y3Rpb24gd2lsbCBub3QgYmUgYXBwbGllZCB1bnRpbCBgc3R5bGluZ0FwcGx5YCBpcyBjYWxsZWQuXG4gKlxuICogQHBhcmFtIHN0eWxlcyBBIGtleS92YWx1ZSBzdHlsZSBtYXAgb2YgdGhlIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAqICAgICAgICBBbnkgbWlzc2luZyBzdHlsZXMgKHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYXBwbGllZCB0byB0aGUgZWxlbWVudCBiZWZvcmVoYW5kKSB3aWxsIGJlXG4gKiAgICAgICAgcmVtb3ZlZCAodW5zZXQpIGZyb20gdGhlIGVsZW1lbnQncyBzdHlsaW5nLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIHdpbGwgYXBwbHkgdGhlIHByb3ZpZGVkIHN0eWxlTWFwIHZhbHVlIHRvIHRoZSBob3N0IGVsZW1lbnQgaWYgdGhpcyBmdW5jdGlvblxuICogaXMgY2FsbGVkIHdpdGhpbiBhIGhvc3QgYmluZGluZy5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVNYXAoc3R5bGVzKSB7XG4gICAgY2hlY2tTdHlsaW5nTWFwKHN0eWxlS2V5VmFsdWVBcnJheVNldCwgc3R5bGVTdHJpbmdQYXJzZXIsIHN0eWxlcywgZmFsc2UpO1xufVxuLyoqXG4gKiBQYXJzZSB0ZXh0IGFzIHN0eWxlIGFuZCBhZGQgdmFsdWVzIHRvIEtleVZhbHVlQXJyYXkuXG4gKlxuICogVGhpcyBjb2RlIGlzIHB1bGxlZCBvdXQgdG8gYSBzZXBhcmF0ZSBmdW5jdGlvbiBzbyB0aGF0IGl0IGNhbiBiZSB0cmVlIHNoYWtlbiBhd2F5IGlmIGl0IGlzIG5vdFxuICogbmVlZGVkLiBJdCBpcyBvbmx5IHJlZmVyZW5jZWQgZnJvbSBgybXJtXN0eWxlTWFwYC5cbiAqXG4gKiBAcGFyYW0ga2V5VmFsdWVBcnJheSBLZXlWYWx1ZUFycmF5IHRvIGFkZCBwYXJzZWQgdmFsdWVzIHRvLlxuICogQHBhcmFtIHRleHQgdGV4dCB0byBwYXJzZS5cbiAqL1xuZnVuY3Rpb24gc3R5bGVTdHJpbmdQYXJzZXIoa2V5VmFsdWVBcnJheSwgdGV4dCkge1xuICAgIGZvciAobGV0IGkgPSBwYXJzZVN0eWxlKHRleHQpOyBpID49IDA7IGkgPSBwYXJzZVN0eWxlTmV4dCh0ZXh0LCBpKSkge1xuICAgICAgICBzdHlsZUtleVZhbHVlQXJyYXlTZXQoa2V5VmFsdWVBcnJheSwgZ2V0TGFzdFBhcnNlZEtleSh0ZXh0KSwgZ2V0TGFzdFBhcnNlZFZhbHVlKHRleHQpKTtcbiAgICB9XG59XG4vKipcbiAqIFVwZGF0ZSBjbGFzcyBiaW5kaW5ncyB1c2luZyBhbiBvYmplY3QgbGl0ZXJhbCBvciBjbGFzcy1zdHJpbmcgb24gYW4gZWxlbWVudC5cbiAqXG4gKiBUaGlzIGluc3RydWN0aW9uIGlzIG1lYW50IHRvIGFwcGx5IHN0eWxpbmcgdmlhIHRoZSBgW2NsYXNzXT1cImV4cFwiYCB0ZW1wbGF0ZSBiaW5kaW5ncy5cbiAqIFdoZW4gY2xhc3NlcyBhcmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCB0aGV5IHdpbGwgdGhlbiBiZSB1cGRhdGVkIHdpdGhcbiAqIHJlc3BlY3QgdG8gYW55IHN0eWxlcy9jbGFzc2VzIHNldCB2aWEgYGNsYXNzUHJvcGAuIElmIGFueVxuICogY2xhc3NlcyBhcmUgc2V0IHRvIGZhbHN5IHRoZW4gdGhleSB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudC5cbiAqXG4gKiBOb3RlIHRoYXQgdGhlIHN0eWxpbmcgaW5zdHJ1Y3Rpb24gd2lsbCBub3QgYmUgYXBwbGllZCB1bnRpbCBgc3R5bGluZ0FwcGx5YCBpcyBjYWxsZWQuXG4gKiBOb3RlIHRoYXQgdGhpcyB3aWxsIHRoZSBwcm92aWRlZCBjbGFzc01hcCB2YWx1ZSB0byB0aGUgaG9zdCBlbGVtZW50IGlmIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkXG4gKiB3aXRoaW4gYSBob3N0IGJpbmRpbmcuXG4gKlxuICogQHBhcmFtIGNsYXNzZXMgQSBrZXkvdmFsdWUgbWFwIG9yIHN0cmluZyBvZiBDU1MgY2xhc3NlcyB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4gKiAgICAgICAgZ2l2ZW4gZWxlbWVudC4gQW55IG1pc3NpbmcgY2xhc3NlcyAodGhhdCBoYXZlIGFscmVhZHkgYmVlbiBhcHBsaWVkIHRvIHRoZSBlbGVtZW50XG4gKiAgICAgICAgYmVmb3JlaGFuZCkgd2lsbCBiZSByZW1vdmVkICh1bnNldCkgZnJvbSB0aGUgZWxlbWVudCdzIGxpc3Qgb2YgQ1NTIGNsYXNzZXMuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWNsYXNzTWFwKGNsYXNzZXMpIHtcbiAgICBjaGVja1N0eWxpbmdNYXAoa2V5VmFsdWVBcnJheVNldCwgY2xhc3NTdHJpbmdQYXJzZXIsIGNsYXNzZXMsIHRydWUpO1xufVxuLyoqXG4gKiBQYXJzZSB0ZXh0IGFzIGNsYXNzIGFuZCBhZGQgdmFsdWVzIHRvIEtleVZhbHVlQXJyYXkuXG4gKlxuICogVGhpcyBjb2RlIGlzIHB1bGxlZCBvdXQgdG8gYSBzZXBhcmF0ZSBmdW5jdGlvbiBzbyB0aGF0IGl0IGNhbiBiZSB0cmVlIHNoYWtlbiBhd2F5IGlmIGl0IGlzIG5vdFxuICogbmVlZGVkLiBJdCBpcyBvbmx5IHJlZmVyZW5jZWQgZnJvbSBgybXJtWNsYXNzTWFwYC5cbiAqXG4gKiBAcGFyYW0ga2V5VmFsdWVBcnJheSBLZXlWYWx1ZUFycmF5IHRvIGFkZCBwYXJzZWQgdmFsdWVzIHRvLlxuICogQHBhcmFtIHRleHQgdGV4dCB0byBwYXJzZS5cbiAqL1xuZnVuY3Rpb24gY2xhc3NTdHJpbmdQYXJzZXIoa2V5VmFsdWVBcnJheSwgdGV4dCkge1xuICAgIGZvciAobGV0IGkgPSBwYXJzZUNsYXNzTmFtZSh0ZXh0KTsgaSA+PSAwOyBpID0gcGFyc2VDbGFzc05hbWVOZXh0KHRleHQsIGkpKSB7XG4gICAgICAgIGtleVZhbHVlQXJyYXlTZXQoa2V5VmFsdWVBcnJheSwgZ2V0TGFzdFBhcnNlZEtleSh0ZXh0KSwgdHJ1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBDb21tb24gY29kZSBiZXR3ZWVuIGDJtcm1Y2xhc3NQcm9wYCBhbmQgYMm1ybVzdHlsZVByb3BgLlxuICpcbiAqIEBwYXJhbSBwcm9wIHByb3BlcnR5IG5hbWUuXG4gKiBAcGFyYW0gdmFsdWUgYmluZGluZyB2YWx1ZS5cbiAqIEBwYXJhbSBzdWZmaXggc3VmZml4IGZvciB0aGUgcHJvcGVydHkgKGUuZy4gYGVtYCBvciBgcHhgKVxuICogQHBhcmFtIGlzQ2xhc3NCYXNlZCBgdHJ1ZWAgaWYgYGNsYXNzYCBjaGFuZ2UgKGBmYWxzZWAgaWYgYHN0eWxlYClcbiAqL1xuZnVuY3Rpb24gY2hlY2tTdHlsaW5nUHJvcGVydHkocHJvcCwgdmFsdWUsIHN1ZmZpeCwgaXNDbGFzc0Jhc2VkKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAvLyBTdHlsaW5nIGluc3RydWN0aW9ucyB1c2UgMiBzbG90cyBwZXIgYmluZGluZy5cbiAgICAvLyAxLiBvbmUgZm9yIHRoZSB2YWx1ZSAvIFRTdHlsaW5nS2V5XG4gICAgLy8gMi4gb25lIGZvciB0aGUgaW50ZXJtaXR0ZW50LXZhbHVlIC8gVFN0eWxpbmdSYW5nZVxuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IGluY3JlbWVudEJpbmRpbmdJbmRleCgyKTtcbiAgICBpZiAodFZpZXcuZmlyc3RVcGRhdGVQYXNzKSB7XG4gICAgICAgIHN0eWxpbmdGaXJzdFVwZGF0ZVBhc3ModFZpZXcsIHByb3AsIGJpbmRpbmdJbmRleCwgaXNDbGFzc0Jhc2VkKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlICE9PSBOT19DSEFOR0UgJiYgYmluZGluZ1VwZGF0ZWQobFZpZXcsIGJpbmRpbmdJbmRleCwgdmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHROb2RlID0gdFZpZXcuZGF0YVtnZXRTZWxlY3RlZEluZGV4KCldO1xuICAgICAgICB1cGRhdGVTdHlsaW5nKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIGxWaWV3W1JFTkRFUkVSXSwgcHJvcCwgbFZpZXdbYmluZGluZ0luZGV4ICsgMV0gPSBub3JtYWxpemVTdWZmaXgodmFsdWUsIHN1ZmZpeCksIGlzQ2xhc3NCYXNlZCwgYmluZGluZ0luZGV4KTtcbiAgICB9XG59XG4vKipcbiAqIENvbW1vbiBjb2RlIGJldHdlZW4gYMm1ybVjbGFzc01hcGAgYW5kIGDJtcm1c3R5bGVNYXBgLlxuICpcbiAqIEBwYXJhbSBrZXlWYWx1ZUFycmF5U2V0IChTZWUgYGtleVZhbHVlQXJyYXlTZXRgIGluIFwidXRpbC9hcnJheV91dGlsc1wiKSBHZXRzIHBhc3NlZCBpbiBhcyBhXG4gKiAgICAgICAgZnVuY3Rpb24gc28gdGhhdCBgc3R5bGVgIGNhbiBiZSBwcm9jZXNzZWQuIFRoaXMgaXMgZG9uZSBmb3IgdHJlZSBzaGFraW5nIHB1cnBvc2VzLlxuICogQHBhcmFtIHN0cmluZ1BhcnNlciBQYXJzZXIgdXNlZCB0byBwYXJzZSBgdmFsdWVgIGlmIGBzdHJpbmdgLiAoUGFzc2VkIGluIGFzIGBzdHlsZWAgYW5kIGBjbGFzc2BcbiAqICAgICAgICBoYXZlIGRpZmZlcmVudCBwYXJzZXJzLilcbiAqIEBwYXJhbSB2YWx1ZSBib3VuZCB2YWx1ZSBmcm9tIGFwcGxpY2F0aW9uXG4gKiBAcGFyYW0gaXNDbGFzc0Jhc2VkIGB0cnVlYCBpZiBgY2xhc3NgIGNoYW5nZSAoYGZhbHNlYCBpZiBgc3R5bGVgKVxuICovXG5mdW5jdGlvbiBjaGVja1N0eWxpbmdNYXAoa2V5VmFsdWVBcnJheVNldCwgc3RyaW5nUGFyc2VyLCB2YWx1ZSwgaXNDbGFzc0Jhc2VkKSB7XG4gICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IGluY3JlbWVudEJpbmRpbmdJbmRleCgyKTtcbiAgICBpZiAodFZpZXcuZmlyc3RVcGRhdGVQYXNzKSB7XG4gICAgICAgIHN0eWxpbmdGaXJzdFVwZGF0ZVBhc3ModFZpZXcsIG51bGwsIGJpbmRpbmdJbmRleCwgaXNDbGFzc0Jhc2VkKTtcbiAgICB9XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGlmICh2YWx1ZSAhPT0gTk9fQ0hBTkdFICYmIGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXgsIHZhbHVlKSkge1xuICAgICAgICAvLyBgZ2V0U2VsZWN0ZWRJbmRleCgpYCBzaG91bGQgYmUgaGVyZSAocmF0aGVyIHRoYW4gaW4gaW5zdHJ1Y3Rpb24pIHNvIHRoYXQgaXQgaXMgZ3VhcmRlZCBieSB0aGVcbiAgICAgICAgLy8gaWYgc28gYXMgbm90IHRvIHJlYWQgdW5uZWNlc3NhcmlseS5cbiAgICAgICAgY29uc3QgdE5vZGUgPSB0Vmlldy5kYXRhW2dldFNlbGVjdGVkSW5kZXgoKV07XG4gICAgICAgIGlmIChoYXNTdHlsaW5nSW5wdXRTaGFkb3codE5vZGUsIGlzQ2xhc3NCYXNlZCkgJiYgIWlzSW5Ib3N0QmluZGluZ3ModFZpZXcsIGJpbmRpbmdJbmRleCkpIHtcbiAgICAgICAgICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgICAgICAgICAvLyB2ZXJpZnkgdGhhdCBpZiB3ZSBhcmUgc2hhZG93aW5nIHRoZW4gYFREYXRhYCBpcyBhcHByb3ByaWF0ZWx5IG1hcmtlZCBzbyB0aGF0IHdlIHNraXBcbiAgICAgICAgICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgYmluZGluZyBpbiBzdHlsaW5nIHJlc29sdXRpb24uXG4gICAgICAgICAgICAgICAgY29uc3QgdFN0eWxpbmdLZXkgPSB0Vmlldy5kYXRhW2JpbmRpbmdJbmRleF07XG4gICAgICAgICAgICAgICAgYXNzZXJ0RXF1YWwoQXJyYXkuaXNBcnJheSh0U3R5bGluZ0tleSkgPyB0U3R5bGluZ0tleVsxXSA6IHRTdHlsaW5nS2V5LCBmYWxzZSwgJ1N0eWxpbmcgbGlua2VkIGxpc3Qgc2hhZG93IGlucHV0IHNob3VsZCBiZSBtYXJrZWQgYXMgXFwnZmFsc2VcXCcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFZFIGRvZXMgbm90IGNvbmNhdGVuYXRlIHRoZSBzdGF0aWMgcG9ydGlvbiBsaWtlIHdlIGFyZSBkb2luZyBoZXJlLlxuICAgICAgICAgICAgLy8gSW5zdGVhZCBWRSBqdXN0IGlnbm9yZXMgdGhlIHN0YXRpYyBjb21wbGV0ZWx5IGlmIGR5bmFtaWMgYmluZGluZyBpcyBwcmVzZW50LlxuICAgICAgICAgICAgLy8gQmVjYXVzZSBvZiBsb2NhbGl0eSB3ZSBoYXZlIGFscmVhZHkgc2V0IHRoZSBzdGF0aWMgcG9ydGlvbiBiZWNhdXNlIHdlIGRvbid0IGtub3cgaWYgdGhlcmVcbiAgICAgICAgICAgIC8vIGlzIGEgZHluYW1pYyBwb3J0aW9uIHVudGlsIGxhdGVyLiBJZiB3ZSB3b3VsZCBpZ25vcmUgdGhlIHN0YXRpYyBwb3J0aW9uIGl0IHdvdWxkIGxvb2sgbGlrZVxuICAgICAgICAgICAgLy8gdGhlIGJpbmRpbmcgaGFzIHJlbW92ZWQgaXQuIFRoaXMgd291bGQgY29uZnVzZSBgW25nU3R5bGVdYC9gW25nQ2xhc3NdYCB0byBkbyB0aGUgd3JvbmdcbiAgICAgICAgICAgIC8vIHRoaW5nIGFzIGl0IHdvdWxkIHRoaW5rIHRoYXQgdGhlIHN0YXRpYyBwb3J0aW9uIHdhcyByZW1vdmVkLiBGb3IgdGhpcyByZWFzb24gd2VcbiAgICAgICAgICAgIC8vIGNvbmNhdGVuYXRlIGl0IHNvIHRoYXQgYFtuZ1N0eWxlXWAvYFtuZ0NsYXNzXWAgIGNhbiBjb250aW51ZSB0byB3b3JrIG9uIGNoYW5nZWQuXG4gICAgICAgICAgICBsZXQgc3RhdGljUHJlZml4ID0gaXNDbGFzc0Jhc2VkID8gdE5vZGUuY2xhc3Nlc1dpdGhvdXRIb3N0IDogdE5vZGUuc3R5bGVzV2l0aG91dEhvc3Q7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgaXNDbGFzc0Jhc2VkID09PSBmYWxzZSAmJiBzdGF0aWNQcmVmaXggIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBhc3NlcnRFcXVhbChzdGF0aWNQcmVmaXguZW5kc1dpdGgoJzsnKSwgdHJ1ZSwgJ0V4cGVjdGluZyBzdGF0aWMgcG9ydGlvbiB0byBlbmQgd2l0aCBcXCc7XFwnJyk7XG4gICAgICAgICAgICBpZiAoc3RhdGljUHJlZml4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gV2Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdCBmYWxzeSB2YWx1ZXMgb2YgYHZhbHVlYCBiZWNvbWUgZW1wdHkgc3RyaW5ncy5cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGNvbmNhdFN0cmluZ3NXaXRoU3BhY2Uoc3RhdGljUHJlZml4LCB2YWx1ZSA/IHZhbHVlIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gR2l2ZW4gYDxkaXYgW3N0eWxlXSBteS1kaXI+YCBzdWNoIHRoYXQgYG15LWRpcmAgaGFzIGBASW5wdXQoJ3N0eWxlJylgLlxuICAgICAgICAgICAgLy8gVGhpcyB0YWtlcyBvdmVyIHRoZSBgW3N0eWxlXWAgYmluZGluZy4gKFNhbWUgZm9yIGBbY2xhc3NdYClcbiAgICAgICAgICAgIHNldERpcmVjdGl2ZUlucHV0c1doaWNoU2hhZG93c1N0eWxpbmcodFZpZXcsIHROb2RlLCBsVmlldywgdmFsdWUsIGlzQ2xhc3NCYXNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB1cGRhdGVTdHlsaW5nTWFwKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIGxWaWV3W1JFTkRFUkVSXSwgbFZpZXdbYmluZGluZ0luZGV4ICsgMV0sIGxWaWV3W2JpbmRpbmdJbmRleCArIDFdID0gdG9TdHlsaW5nS2V5VmFsdWVBcnJheShrZXlWYWx1ZUFycmF5U2V0LCBzdHJpbmdQYXJzZXIsIHZhbHVlKSwgaXNDbGFzc0Jhc2VkLCBiaW5kaW5nSW5kZXgpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZW4gdGhlIGJpbmRpbmcgaXMgaW4gYGhvc3RCaW5kaW5nc2Agc2VjdGlvblxuICpcbiAqIEBwYXJhbSB0VmlldyBDdXJyZW50IGBUVmlld2BcbiAqIEBwYXJhbSBiaW5kaW5nSW5kZXggaW5kZXggb2YgYmluZGluZyB3aGljaCB3ZSB3b3VsZCBsaWtlIGlmIGl0IGlzIGluIGBob3N0QmluZGluZ3NgXG4gKi9cbmZ1bmN0aW9uIGlzSW5Ib3N0QmluZGluZ3ModFZpZXcsIGJpbmRpbmdJbmRleCkge1xuICAgIC8vIEFsbCBob3N0IGJpbmRpbmdzIGFyZSBwbGFjZWQgYWZ0ZXIgdGhlIGV4cGFuZG8gc2VjdGlvbi5cbiAgICByZXR1cm4gYmluZGluZ0luZGV4ID49IHRWaWV3LmV4cGFuZG9TdGFydEluZGV4O1xufVxuLyoqXG4gKiBDb2xsZWN0cyB0aGUgbmVjZXNzYXJ5IGluZm9ybWF0aW9uIHRvIGluc2VydCB0aGUgYmluZGluZyBpbnRvIGEgbGlua2VkIGxpc3Qgb2Ygc3R5bGUgYmluZGluZ3NcbiAqIHVzaW5nIGBpbnNlcnRUU3R5bGluZ0JpbmRpbmdgLlxuICpcbiAqIEBwYXJhbSB0VmlldyBgVFZpZXdgIHdoZXJlIHRoZSBiaW5kaW5nIGxpbmtlZCBsaXN0IHdpbGwgYmUgc3RvcmVkLlxuICogQHBhcmFtIHRTdHlsaW5nS2V5IFByb3BlcnR5L2tleSBvZiB0aGUgYmluZGluZy5cbiAqIEBwYXJhbSBiaW5kaW5nSW5kZXggSW5kZXggb2YgYmluZGluZyBhc3NvY2lhdGVkIHdpdGggdGhlIGBwcm9wYFxuICogQHBhcmFtIGlzQ2xhc3NCYXNlZCBgdHJ1ZWAgaWYgYGNsYXNzYCBjaGFuZ2UgKGBmYWxzZWAgaWYgYHN0eWxlYClcbiAqL1xuZnVuY3Rpb24gc3R5bGluZ0ZpcnN0VXBkYXRlUGFzcyh0VmlldywgdFN0eWxpbmdLZXksIGJpbmRpbmdJbmRleCwgaXNDbGFzc0Jhc2VkKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEZpcnN0VXBkYXRlUGFzcyh0Vmlldyk7XG4gICAgY29uc3QgdERhdGEgPSB0Vmlldy5kYXRhO1xuICAgIGlmICh0RGF0YVtiaW5kaW5nSW5kZXggKyAxXSA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUaGUgYWJvdmUgY2hlY2sgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgZG9uJ3QgY2xlYXIgZmlyc3QgdXBkYXRlIHBhc3MgdW50aWwgZmlyc3Qgc3VjY2Vzc2Z1bFxuICAgICAgICAvLyAobm8gZXhjZXB0aW9uKSB0ZW1wbGF0ZSBleGVjdXRpb24uIFRoaXMgcHJldmVudHMgdGhlIHN0eWxpbmcgaW5zdHJ1Y3Rpb24gZnJvbSBkb3VibGUgYWRkaW5nXG4gICAgICAgIC8vIGl0c2VsZiB0byB0aGUgbGlzdC5cbiAgICAgICAgLy8gYGdldFNlbGVjdGVkSW5kZXgoKWAgc2hvdWxkIGJlIGhlcmUgKHJhdGhlciB0aGFuIGluIGluc3RydWN0aW9uKSBzbyB0aGF0IGl0IGlzIGd1YXJkZWQgYnkgdGhlXG4gICAgICAgIC8vIGlmIHNvIGFzIG5vdCB0byByZWFkIHVubmVjZXNzYXJpbHkuXG4gICAgICAgIGNvbnN0IHROb2RlID0gdERhdGFbZ2V0U2VsZWN0ZWRJbmRleCgpXTtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQodE5vZGUsICdUTm9kZSBleHBlY3RlZCcpO1xuICAgICAgICBjb25zdCBpc0hvc3RCaW5kaW5ncyA9IGlzSW5Ib3N0QmluZGluZ3ModFZpZXcsIGJpbmRpbmdJbmRleCk7XG4gICAgICAgIGlmIChoYXNTdHlsaW5nSW5wdXRTaGFkb3codE5vZGUsIGlzQ2xhc3NCYXNlZCkgJiYgdFN0eWxpbmdLZXkgPT09IG51bGwgJiYgIWlzSG9zdEJpbmRpbmdzKSB7XG4gICAgICAgICAgICAvLyBgdFN0eWxpbmdLZXkgPT09IG51bGxgIGltcGxpZXMgdGhhdCB3ZSBhcmUgZWl0aGVyIGBbc3R5bGVdYCBvciBgW2NsYXNzXWAgYmluZGluZy5cbiAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGEgZGlyZWN0aXZlIHdoaWNoIHVzZXMgYEBJbnB1dCgnc3R5bGUnKWAgb3IgYEBJbnB1dCgnY2xhc3MnKWAgdGhhblxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBuZXV0cmFsaXplIHRoaXMgYmluZGluZyBzaW5jZSB0aGF0IGRpcmVjdGl2ZSBpcyBzaGFkb3dpbmcgaXQuXG4gICAgICAgICAgICAvLyBXZSB0dXJuIHRoaXMgaW50byBhIG5vb3AgYnkgc2V0dGluZyB0aGUga2V5IHRvIGBmYWxzZWBcbiAgICAgICAgICAgIHRTdHlsaW5nS2V5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdFN0eWxpbmdLZXkgPSB3cmFwSW5TdGF0aWNTdHlsaW5nS2V5KHREYXRhLCB0Tm9kZSwgdFN0eWxpbmdLZXksIGlzQ2xhc3NCYXNlZCk7XG4gICAgICAgIGluc2VydFRTdHlsaW5nQmluZGluZyh0RGF0YSwgdE5vZGUsIHRTdHlsaW5nS2V5LCBiaW5kaW5nSW5kZXgsIGlzSG9zdEJpbmRpbmdzLCBpc0NsYXNzQmFzZWQpO1xuICAgIH1cbn1cbi8qKlxuICogQWRkcyBzdGF0aWMgc3R5bGluZyBpbmZvcm1hdGlvbiB0byB0aGUgYmluZGluZyBpZiBhcHBsaWNhYmxlLlxuICpcbiAqIFRoZSBsaW5rZWQgbGlzdCBvZiBzdHlsZXMgbm90IG9ubHkgc3RvcmVzIHRoZSBsaXN0IGFuZCBrZXlzLCBidXQgYWxzbyBzdG9yZXMgc3RhdGljIHN0eWxpbmdcbiAqIGluZm9ybWF0aW9uIG9uIHNvbWUgb2YgdGhlIGtleXMuIFRoaXMgZnVuY3Rpb24gZGV0ZXJtaW5lcyBpZiB0aGUga2V5IHNob3VsZCBjb250YWluIHRoZSBzdHlsaW5nXG4gKiBpbmZvcm1hdGlvbiBhbmQgY29tcHV0ZXMgaXQuXG4gKlxuICogU2VlIGBUU3R5bGluZ1N0YXRpY2AgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAcGFyYW0gdERhdGEgYFREYXRhYCB3aGVyZSB0aGUgbGlua2VkIGxpc3QgaXMgc3RvcmVkLlxuICogQHBhcmFtIHROb2RlIGBUTm9kZWAgZm9yIHdoaWNoIHRoZSBzdHlsaW5nIGlzIGJlaW5nIGNvbXB1dGVkLlxuICogQHBhcmFtIHN0eWxpbmdLZXkgYFRTdHlsaW5nS2V5UHJpbWl0aXZlYCB3aGljaCBtYXkgbmVlZCB0byBiZSB3cmFwcGVkIGludG8gYFRTdHlsaW5nS2V5YFxuICogQHBhcmFtIGlzQ2xhc3NCYXNlZCBgdHJ1ZWAgaWYgYGNsYXNzYCAoYGZhbHNlYCBpZiBgc3R5bGVgKVxuICovXG5mdW5jdGlvbiB3cmFwSW5TdGF0aWNTdHlsaW5nS2V5KHREYXRhLCB0Tm9kZSwgc3R5bGluZ0tleSwgaXNDbGFzc0Jhc2VkKSB7XG4gICAgY29uc3QgaG9zdERpcmVjdGl2ZURlZiA9IGdldEN1cnJlbnREaXJlY3RpdmVEZWYodERhdGEpO1xuICAgIGxldCByZXNpZHVhbCA9IGlzQ2xhc3NCYXNlZCA/IHROb2RlLnJlc2lkdWFsQ2xhc3NlcyA6IHROb2RlLnJlc2lkdWFsU3R5bGVzO1xuICAgIGlmIChob3N0RGlyZWN0aXZlRGVmID09PSBudWxsKSB7XG4gICAgICAgIC8vIFdlIGFyZSBpbiB0ZW1wbGF0ZSBub2RlLlxuICAgICAgICAvLyBJZiB0ZW1wbGF0ZSBub2RlIGFscmVhZHkgaGFkIHN0eWxpbmcgaW5zdHJ1Y3Rpb24gdGhlbiBpdCBoYXMgYWxyZWFkeSBjb2xsZWN0ZWQgdGhlIHN0YXRpY1xuICAgICAgICAvLyBzdHlsaW5nIGFuZCB0aGVyZSBpcyBubyBuZWVkIHRvIGNvbGxlY3QgdGhlbSBhZ2Fpbi4gV2Uga25vdyB0aGF0IHdlIGFyZSB0aGUgZmlyc3Qgc3R5bGluZ1xuICAgICAgICAvLyBpbnN0cnVjdGlvbiBiZWNhdXNlIHRoZSBgVE5vZGUuKkJpbmRpbmdzYCBwb2ludHMgdG8gMCAobm90aGluZyBoYXMgYmVlbiBpbnNlcnRlZCB5ZXQpLlxuICAgICAgICBjb25zdCBpc0ZpcnN0U3R5bGluZ0luc3RydWN0aW9uSW5UZW1wbGF0ZSA9IChpc0NsYXNzQmFzZWQgPyB0Tm9kZS5jbGFzc0JpbmRpbmdzIDogdE5vZGUuc3R5bGVCaW5kaW5ncykgPT09IDA7XG4gICAgICAgIGlmIChpc0ZpcnN0U3R5bGluZ0luc3RydWN0aW9uSW5UZW1wbGF0ZSkge1xuICAgICAgICAgICAgLy8gSXQgd291bGQgYmUgbmljZSB0byBiZSBhYmxlIHRvIGdldCB0aGUgc3RhdGljcyBmcm9tIGBtZXJnZUF0dHJzYCwgaG93ZXZlciwgYXQgdGhpcyBwb2ludFxuICAgICAgICAgICAgLy8gdGhleSBhcmUgYWxyZWFkeSBtZXJnZWQgYW5kIGl0IHdvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBmaWd1cmUgd2hpY2ggcHJvcGVydHkgYmVsb25ncyB3aGVyZVxuICAgICAgICAgICAgLy8gaW4gdGhlIHByaW9yaXR5LlxuICAgICAgICAgICAgc3R5bGluZ0tleSA9IGNvbGxlY3RTdHlsaW5nRnJvbURpcmVjdGl2ZXMobnVsbCwgdERhdGEsIHROb2RlLCBzdHlsaW5nS2V5LCBpc0NsYXNzQmFzZWQpO1xuICAgICAgICAgICAgc3R5bGluZ0tleSA9IGNvbGxlY3RTdHlsaW5nRnJvbVRBdHRycyhzdHlsaW5nS2V5LCB0Tm9kZS5hdHRycywgaXNDbGFzc0Jhc2VkKTtcbiAgICAgICAgICAgIC8vIFdlIGtub3cgdGhhdCBpZiB3ZSBoYXZlIHN0eWxpbmcgYmluZGluZyBpbiB0ZW1wbGF0ZSB3ZSBjYW4ndCBoYXZlIHJlc2lkdWFsLlxuICAgICAgICAgICAgcmVzaWR1YWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBXZSBhcmUgaW4gaG9zdCBiaW5kaW5nIG5vZGUgYW5kIHRoZXJlIHdhcyBubyBiaW5kaW5nIGluc3RydWN0aW9uIGluIHRlbXBsYXRlIG5vZGUuXG4gICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHJlc2lkdWFsLlxuICAgICAgICBjb25zdCBkaXJlY3RpdmVTdHlsaW5nTGFzdCA9IHROb2RlLmRpcmVjdGl2ZVN0eWxpbmdMYXN0O1xuICAgICAgICBjb25zdCBpc0ZpcnN0U3R5bGluZ0luc3RydWN0aW9uSW5Ib3N0QmluZGluZyA9IGRpcmVjdGl2ZVN0eWxpbmdMYXN0ID09PSAtMSB8fCB0RGF0YVtkaXJlY3RpdmVTdHlsaW5nTGFzdF0gIT09IGhvc3REaXJlY3RpdmVEZWY7XG4gICAgICAgIGlmIChpc0ZpcnN0U3R5bGluZ0luc3RydWN0aW9uSW5Ib3N0QmluZGluZykge1xuICAgICAgICAgICAgc3R5bGluZ0tleSA9XG4gICAgICAgICAgICAgICAgY29sbGVjdFN0eWxpbmdGcm9tRGlyZWN0aXZlcyhob3N0RGlyZWN0aXZlRGVmLCB0RGF0YSwgdE5vZGUsIHN0eWxpbmdLZXksIGlzQ2xhc3NCYXNlZCk7XG4gICAgICAgICAgICBpZiAocmVzaWR1YWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyAtIElmIGBudWxsYCB0aGFuIGVpdGhlcjpcbiAgICAgICAgICAgICAgICAvLyAgICAtIFRlbXBsYXRlIHN0eWxpbmcgaW5zdHJ1Y3Rpb24gYWxyZWFkeSByYW4gYW5kIGl0IGhhcyBjb25zdW1lZCB0aGUgc3RhdGljXG4gICAgICAgICAgICAgICAgLy8gICAgICBzdHlsaW5nIGludG8gaXRzIGBUU3R5bGluZ0tleWAgYW5kIHNvIHRoZXJlIGlzIG5vIG5lZWQgdG8gdXBkYXRlIHJlc2lkdWFsLiBJbnN0ZWFkXG4gICAgICAgICAgICAgICAgLy8gICAgICB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgYFRTdHlsaW5nS2V5YCBhc3NvY2lhdGVkIHdpdGggdGhlIGZpcnN0IHRlbXBsYXRlIG5vZGVcbiAgICAgICAgICAgICAgICAvLyAgICAgIGluc3RydWN0aW9uLiBPUlxuICAgICAgICAgICAgICAgIC8vICAgIC0gU29tZSBvdGhlciBzdHlsaW5nIGluc3RydWN0aW9uIHJhbiBhbmQgZGV0ZXJtaW5lZCB0aGF0IHRoZXJlIGFyZSBubyByZXNpZHVhbHNcbiAgICAgICAgICAgICAgICBsZXQgdGVtcGxhdGVTdHlsaW5nS2V5ID0gZ2V0VGVtcGxhdGVIZWFkVFN0eWxpbmdLZXkodERhdGEsIHROb2RlLCBpc0NsYXNzQmFzZWQpO1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZVN0eWxpbmdLZXkgIT09IHVuZGVmaW5lZCAmJiBBcnJheS5pc0FycmF5KHRlbXBsYXRlU3R5bGluZ0tleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSByZWNvbXB1dGUgaWYgYHRlbXBsYXRlU3R5bGluZ0tleWAgaGFkIHN0YXRpYyB2YWx1ZXMuIChJZiBubyBzdGF0aWMgdmFsdWUgZm91bmRcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiB0aGVyZSBpcyBub3RoaW5nIHRvIGRvIHNpbmNlIHRoaXMgb3BlcmF0aW9uIGNhbiBvbmx5IHByb2R1Y2UgbGVzcyBzdGF0aWMga2V5cywgbm90XG4gICAgICAgICAgICAgICAgICAgIC8vIG1vcmUuKVxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVN0eWxpbmdLZXkgPSBjb2xsZWN0U3R5bGluZ0Zyb21EaXJlY3RpdmVzKG51bGwsIHREYXRhLCB0Tm9kZSwgdGVtcGxhdGVTdHlsaW5nS2V5WzFdIC8qIHVud3JhcCBwcmV2aW91cyBzdGF0aWNzICovLCBpc0NsYXNzQmFzZWQpO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVN0eWxpbmdLZXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdFN0eWxpbmdGcm9tVEF0dHJzKHRlbXBsYXRlU3R5bGluZ0tleSwgdE5vZGUuYXR0cnMsIGlzQ2xhc3NCYXNlZCk7XG4gICAgICAgICAgICAgICAgICAgIHNldFRlbXBsYXRlSGVhZFRTdHlsaW5nS2V5KHREYXRhLCB0Tm9kZSwgaXNDbGFzc0Jhc2VkLCB0ZW1wbGF0ZVN0eWxpbmdLZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFdlIG9ubHkgbmVlZCB0byByZWNvbXB1dGUgcmVzaWR1YWwgaWYgaXQgaXMgbm90IGBudWxsYC5cbiAgICAgICAgICAgICAgICAvLyAtIElmIGV4aXN0aW5nIHJlc2lkdWFsIChpbXBsaWVzIHRoZXJlIHdhcyBubyB0ZW1wbGF0ZSBzdHlsaW5nKS4gVGhpcyBtZWFucyB0aGF0IHNvbWUgb2ZcbiAgICAgICAgICAgICAgICAvLyAgIHRoZSBzdGF0aWNzIG1heSBoYXZlIG1vdmVkIGZyb20gdGhlIHJlc2lkdWFsIHRvIHRoZSBgc3R5bGluZ0tleWAgYW5kIHNvIHdlIGhhdmUgdG9cbiAgICAgICAgICAgICAgICAvLyAgIHJlY29tcHV0ZS5cbiAgICAgICAgICAgICAgICAvLyAtIElmIGB1bmRlZmluZWRgIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2UgYXJlIHJ1bm5pbmcuXG4gICAgICAgICAgICAgICAgcmVzaWR1YWwgPSBjb2xsZWN0UmVzaWR1YWwodERhdGEsIHROb2RlLCBpc0NsYXNzQmFzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyZXNpZHVhbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlzQ2xhc3NCYXNlZCA/ICh0Tm9kZS5yZXNpZHVhbENsYXNzZXMgPSByZXNpZHVhbCkgOiAodE5vZGUucmVzaWR1YWxTdHlsZXMgPSByZXNpZHVhbCk7XG4gICAgfVxuICAgIHJldHVybiBzdHlsaW5nS2V5O1xufVxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgYFRTdHlsaW5nS2V5YCBmb3IgdGhlIHRlbXBsYXRlIHN0eWxpbmcgaW5zdHJ1Y3Rpb24uXG4gKlxuICogVGhpcyBpcyBuZWVkZWQgc2luY2UgYGhvc3RCaW5kaW5nYCBzdHlsaW5nIGluc3RydWN0aW9ucyBhcmUgaW5zZXJ0ZWQgYWZ0ZXIgdGhlIHRlbXBsYXRlXG4gKiBpbnN0cnVjdGlvbi4gV2hpbGUgdGhlIHRlbXBsYXRlIGluc3RydWN0aW9uIG5lZWRzIHRvIHVwZGF0ZSB0aGUgcmVzaWR1YWwgaW4gYFROb2RlYCB0aGVcbiAqIGBob3N0QmluZGluZ2AgaW5zdHJ1Y3Rpb25zIG5lZWQgdG8gdXBkYXRlIHRoZSBgVFN0eWxpbmdLZXlgIG9mIHRoZSB0ZW1wbGF0ZSBpbnN0cnVjdGlvbiBiZWNhdXNlXG4gKiB0aGUgdGVtcGxhdGUgaW5zdHJ1Y3Rpb24gaXMgZG93bnN0cmVhbSBmcm9tIHRoZSBgaG9zdEJpbmRpbmdzYCBpbnN0cnVjdGlvbnMuXG4gKlxuICogQHBhcmFtIHREYXRhIGBURGF0YWAgd2hlcmUgdGhlIGxpbmtlZCBsaXN0IGlzIHN0b3JlZC5cbiAqIEBwYXJhbSB0Tm9kZSBgVE5vZGVgIGZvciB3aGljaCB0aGUgc3R5bGluZyBpcyBiZWluZyBjb21wdXRlZC5cbiAqIEBwYXJhbSBpc0NsYXNzQmFzZWQgYHRydWVgIGlmIGBjbGFzc2AgKGBmYWxzZWAgaWYgYHN0eWxlYClcbiAqIEByZXR1cm4gYFRTdHlsaW5nS2V5YCBpZiBmb3VuZCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuXG4gKi9cbmZ1bmN0aW9uIGdldFRlbXBsYXRlSGVhZFRTdHlsaW5nS2V5KHREYXRhLCB0Tm9kZSwgaXNDbGFzc0Jhc2VkKSB7XG4gICAgY29uc3QgYmluZGluZ3MgPSBpc0NsYXNzQmFzZWQgPyB0Tm9kZS5jbGFzc0JpbmRpbmdzIDogdE5vZGUuc3R5bGVCaW5kaW5ncztcbiAgICBpZiAoZ2V0VFN0eWxpbmdSYW5nZU5leHQoYmluZGluZ3MpID09PSAwKSB7XG4gICAgICAgIC8vIFRoZXJlIGRvZXMgbm90IHNlZW0gdG8gYmUgYSBzdHlsaW5nIGluc3RydWN0aW9uIGluIHRoZSBgdGVtcGxhdGVgLlxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdERhdGFbZ2V0VFN0eWxpbmdSYW5nZVByZXYoYmluZGluZ3MpXTtcbn1cbi8qKlxuICogVXBkYXRlIHRoZSBgVFN0eWxpbmdLZXlgIG9mIHRoZSBmaXJzdCB0ZW1wbGF0ZSBpbnN0cnVjdGlvbiBpbiBgVE5vZGVgLlxuICpcbiAqIExvZ2ljYWxseSBgaG9zdEJpbmRpbmdzYCBzdHlsaW5nIGluc3RydWN0aW9ucyBhcmUgb2YgbG93ZXIgcHJpb3JpdHkgdGhhbiB0aGF0IG9mIHRoZSB0ZW1wbGF0ZS5cbiAqIEhvd2V2ZXIsIHRoZXkgZXhlY3V0ZSBhZnRlciB0aGUgdGVtcGxhdGUgc3R5bGluZyBpbnN0cnVjdGlvbnMuIFRoaXMgbWVhbnMgdGhhdCB0aGV5IGdldCBpbnNlcnRlZFxuICogaW4gZnJvbnQgb2YgdGhlIHRlbXBsYXRlIHN0eWxpbmcgaW5zdHJ1Y3Rpb25zLlxuICpcbiAqIElmIHdlIGhhdmUgYSB0ZW1wbGF0ZSBzdHlsaW5nIGluc3RydWN0aW9uIGFuZCBhIG5ldyBgaG9zdEJpbmRpbmdzYCBzdHlsaW5nIGluc3RydWN0aW9uIGlzXG4gKiBleGVjdXRlZCBpdCBtZWFucyB0aGF0IGl0IG1heSBuZWVkIHRvIHN0ZWFsIHN0YXRpYyBmaWVsZHMgZnJvbSB0aGUgdGVtcGxhdGUgaW5zdHJ1Y3Rpb24uIFRoaXNcbiAqIG1ldGhvZCBhbGxvd3MgdXMgdG8gdXBkYXRlIHRoZSBmaXJzdCB0ZW1wbGF0ZSBpbnN0cnVjdGlvbiBgVFN0eWxpbmdLZXlgIHdpdGggYSBuZXcgdmFsdWUuXG4gKlxuICogQXNzdW1lOlxuICogYGBgXG4gKiA8ZGl2IG15LWRpciBzdHlsZT1cImNvbG9yOiByZWRcIiBbc3R5bGUuY29sb3JdPVwidG1wbEV4cFwiPjwvZGl2PlxuICpcbiAqIEBEaXJlY3RpdmUoe1xuICogICBob3N0OiB7XG4gKiAgICAgJ3N0eWxlJzogJ3dpZHRoOiAxMDBweCcsXG4gKiAgICAgJ1tzdHlsZS5jb2xvcl0nOiAnZGlyRXhwJyxcbiAqICAgfVxuICogfSlcbiAqIGNsYXNzIE15RGlyIHt9XG4gKiBgYGBcbiAqXG4gKiB3aGVuIGBbc3R5bGUuY29sb3JdPVwidG1wbEV4cFwiYCBleGVjdXRlcyBpdCBjcmVhdGVzIHRoaXMgZGF0YSBzdHJ1Y3R1cmUuXG4gKiBgYGBcbiAqICBbJycsICdjb2xvcicsICdjb2xvcicsICdyZWQnLCAnd2lkdGgnLCAnMTAwcHgnXSxcbiAqIGBgYFxuICpcbiAqIFRoZSByZWFzb24gZm9yIHRoaXMgaXMgdGhhdCB0aGUgdGVtcGxhdGUgaW5zdHJ1Y3Rpb24gZG9lcyBub3Qga25vdyBpZiB0aGVyZSBhcmUgc3R5bGluZ1xuICogaW5zdHJ1Y3Rpb25zIGFuZCBtdXN0IGFzc3VtZSB0aGF0IHRoZXJlIGFyZSBub25lIGFuZCBtdXN0IGNvbGxlY3QgYWxsIG9mIHRoZSBzdGF0aWMgc3R5bGluZy5cbiAqIChib3RoXG4gKiBgY29sb3InIGFuZCAnd2lkdGhgKVxuICpcbiAqIFdoZW4gYCdbc3R5bGUuY29sb3JdJzogJ2RpckV4cCcsYCBleGVjdXRlcyB3ZSBuZWVkIHRvIGluc2VydCBhIG5ldyBkYXRhIGludG8gdGhlIGxpbmtlZCBsaXN0LlxuICogYGBgXG4gKiAgWycnLCAnY29sb3InLCAnd2lkdGgnLCAnMTAwcHgnXSwgIC8vIG5ld2x5IGluc2VydGVkXG4gKiAgWycnLCAnY29sb3InLCAnY29sb3InLCAncmVkJywgJ3dpZHRoJywgJzEwMHB4J10sIC8vIHRoaXMgaXMgd3JvbmdcbiAqIGBgYFxuICpcbiAqIE5vdGljZSB0aGF0IHRoZSB0ZW1wbGF0ZSBzdGF0aWNzIGlzIG5vdyB3cm9uZyBhcyBpdCBpbmNvcnJlY3RseSBjb250YWlucyBgd2lkdGhgIHNvIHdlIG5lZWQgdG9cbiAqIHVwZGF0ZSBpdCBsaWtlIHNvOlxuICogYGBgXG4gKiAgWycnLCAnY29sb3InLCAnd2lkdGgnLCAnMTAwcHgnXSxcbiAqICBbJycsICdjb2xvcicsICdjb2xvcicsICdyZWQnXSwgICAgLy8gVVBEQVRFXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdERhdGEgYFREYXRhYCB3aGVyZSB0aGUgbGlua2VkIGxpc3QgaXMgc3RvcmVkLlxuICogQHBhcmFtIHROb2RlIGBUTm9kZWAgZm9yIHdoaWNoIHRoZSBzdHlsaW5nIGlzIGJlaW5nIGNvbXB1dGVkLlxuICogQHBhcmFtIGlzQ2xhc3NCYXNlZCBgdHJ1ZWAgaWYgYGNsYXNzYCAoYGZhbHNlYCBpZiBgc3R5bGVgKVxuICogQHBhcmFtIHRTdHlsaW5nS2V5IE5ldyBgVFN0eWxpbmdLZXlgIHdoaWNoIGlzIHJlcGxhY2luZyB0aGUgb2xkIG9uZS5cbiAqL1xuZnVuY3Rpb24gc2V0VGVtcGxhdGVIZWFkVFN0eWxpbmdLZXkodERhdGEsIHROb2RlLCBpc0NsYXNzQmFzZWQsIHRTdHlsaW5nS2V5KSB7XG4gICAgY29uc3QgYmluZGluZ3MgPSBpc0NsYXNzQmFzZWQgPyB0Tm9kZS5jbGFzc0JpbmRpbmdzIDogdE5vZGUuc3R5bGVCaW5kaW5ncztcbiAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgYXNzZXJ0Tm90RXF1YWwoZ2V0VFN0eWxpbmdSYW5nZU5leHQoYmluZGluZ3MpLCAwLCAnRXhwZWN0aW5nIHRvIGhhdmUgYXQgbGVhc3Qgb25lIHRlbXBsYXRlIHN0eWxpbmcgYmluZGluZy4nKTtcbiAgICB0RGF0YVtnZXRUU3R5bGluZ1JhbmdlUHJldihiaW5kaW5ncyldID0gdFN0eWxpbmdLZXk7XG59XG4vKipcbiAqIENvbGxlY3QgYWxsIHN0YXRpYyB2YWx1ZXMgYWZ0ZXIgdGhlIGN1cnJlbnQgYFROb2RlLmRpcmVjdGl2ZVN0eWxpbmdMYXN0YCBpbmRleC5cbiAqXG4gKiBDb2xsZWN0IHRoZSByZW1haW5pbmcgc3R5bGluZyBpbmZvcm1hdGlvbiB3aGljaCBoYXMgbm90IHlldCBiZWVuIGNvbGxlY3RlZCBieSBhbiBleGlzdGluZ1xuICogc3R5bGluZyBpbnN0cnVjdGlvbi5cbiAqXG4gKiBAcGFyYW0gdERhdGEgYFREYXRhYCB3aGVyZSB0aGUgYERpcmVjdGl2ZURlZnNgIGFyZSBzdG9yZWQuXG4gKiBAcGFyYW0gdE5vZGUgYFROb2RlYCB3aGljaCBjb250YWlucyB0aGUgZGlyZWN0aXZlIHJhbmdlLlxuICogQHBhcmFtIGlzQ2xhc3NCYXNlZCBgdHJ1ZWAgaWYgYGNsYXNzYCAoYGZhbHNlYCBpZiBgc3R5bGVgKVxuICovXG5mdW5jdGlvbiBjb2xsZWN0UmVzaWR1YWwodERhdGEsIHROb2RlLCBpc0NsYXNzQmFzZWQpIHtcbiAgICBsZXQgcmVzaWR1YWwgPSB1bmRlZmluZWQ7XG4gICAgY29uc3QgZGlyZWN0aXZlRW5kID0gdE5vZGUuZGlyZWN0aXZlRW5kO1xuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnROb3RFcXVhbCh0Tm9kZS5kaXJlY3RpdmVTdHlsaW5nTGFzdCwgLTEsICdCeSB0aGUgdGltZSB0aGlzIGZ1bmN0aW9uIGdldHMgY2FsbGVkIGF0IGxlYXN0IG9uZSBob3N0QmluZGluZ3Mtbm9kZSBzdHlsaW5nIGluc3RydWN0aW9uIG11c3QgaGF2ZSBleGVjdXRlZC4nKTtcbiAgICAvLyBXZSBhZGQgYDEgKyB0Tm9kZS5kaXJlY3RpdmVTdGFydGAgYmVjYXVzZSB3ZSBuZWVkIHRvIHNraXAgdGhlIGN1cnJlbnQgZGlyZWN0aXZlIChhcyB3ZSBhcmVcbiAgICAvLyBjb2xsZWN0aW5nIHRoaW5ncyBhZnRlciB0aGUgbGFzdCBgaG9zdEJpbmRpbmdzYCBkaXJlY3RpdmUgd2hpY2ggaGFkIGEgc3R5bGluZyBpbnN0cnVjdGlvbi4pXG4gICAgZm9yIChsZXQgaSA9IDEgKyB0Tm9kZS5kaXJlY3RpdmVTdHlsaW5nTGFzdDsgaSA8IGRpcmVjdGl2ZUVuZDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGF0dHJzID0gdERhdGFbaV0uaG9zdEF0dHJzO1xuICAgICAgICByZXNpZHVhbCA9IGNvbGxlY3RTdHlsaW5nRnJvbVRBdHRycyhyZXNpZHVhbCwgYXR0cnMsIGlzQ2xhc3NCYXNlZCk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0U3R5bGluZ0Zyb21UQXR0cnMocmVzaWR1YWwsIHROb2RlLmF0dHJzLCBpc0NsYXNzQmFzZWQpO1xufVxuLyoqXG4gKiBDb2xsZWN0IHRoZSBzdGF0aWMgc3R5bGluZyBpbmZvcm1hdGlvbiB3aXRoIGxvd2VyIHByaW9yaXR5IHRoYW4gYGhvc3REaXJlY3RpdmVEZWZgLlxuICpcbiAqIChUaGlzIGlzIG9wcG9zaXRlIG9mIHJlc2lkdWFsIHN0eWxpbmcuKVxuICpcbiAqIEBwYXJhbSBob3N0RGlyZWN0aXZlRGVmIGBEaXJlY3RpdmVEZWZgIGZvciB3aGljaCB3ZSB3YW50IHRvIGNvbGxlY3QgbG93ZXIgcHJpb3JpdHkgc3RhdGljXG4gKiAgICAgICAgc3R5bGluZy4gKE9yIGBudWxsYCBpZiB0ZW1wbGF0ZSBzdHlsaW5nKVxuICogQHBhcmFtIHREYXRhIGBURGF0YWAgd2hlcmUgdGhlIGxpbmtlZCBsaXN0IGlzIHN0b3JlZC5cbiAqIEBwYXJhbSB0Tm9kZSBgVE5vZGVgIGZvciB3aGljaCB0aGUgc3R5bGluZyBpcyBiZWluZyBjb21wdXRlZC5cbiAqIEBwYXJhbSBzdHlsaW5nS2V5IEV4aXN0aW5nIGBUU3R5bGluZ0tleWAgdG8gdXBkYXRlIG9yIHdyYXAuXG4gKiBAcGFyYW0gaXNDbGFzc0Jhc2VkIGB0cnVlYCBpZiBgY2xhc3NgIChgZmFsc2VgIGlmIGBzdHlsZWApXG4gKi9cbmZ1bmN0aW9uIGNvbGxlY3RTdHlsaW5nRnJvbURpcmVjdGl2ZXMoaG9zdERpcmVjdGl2ZURlZiwgdERhdGEsIHROb2RlLCBzdHlsaW5nS2V5LCBpc0NsYXNzQmFzZWQpIHtcbiAgICAvLyBXZSBuZWVkIHRvIGxvb3AgYmVjYXVzZSB0aGVyZSBjYW4gYmUgZGlyZWN0aXZlcyB3aGljaCBoYXZlIGBob3N0QXR0cnNgIGJ1dCBkb24ndCBoYXZlXG4gICAgLy8gYGhvc3RCaW5kaW5nc2Agc28gdGhpcyBsb29wIGNhdGNoZXMgdXAgdG8gdGhlIGN1cnJlbnQgZGlyZWN0aXZlLi5cbiAgICBsZXQgY3VycmVudERpcmVjdGl2ZSA9IG51bGw7XG4gICAgY29uc3QgZGlyZWN0aXZlRW5kID0gdE5vZGUuZGlyZWN0aXZlRW5kO1xuICAgIGxldCBkaXJlY3RpdmVTdHlsaW5nTGFzdCA9IHROb2RlLmRpcmVjdGl2ZVN0eWxpbmdMYXN0O1xuICAgIGlmIChkaXJlY3RpdmVTdHlsaW5nTGFzdCA9PT0gLTEpIHtcbiAgICAgICAgZGlyZWN0aXZlU3R5bGluZ0xhc3QgPSB0Tm9kZS5kaXJlY3RpdmVTdGFydDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGRpcmVjdGl2ZVN0eWxpbmdMYXN0Kys7XG4gICAgfVxuICAgIHdoaWxlIChkaXJlY3RpdmVTdHlsaW5nTGFzdCA8IGRpcmVjdGl2ZUVuZCkge1xuICAgICAgICBjdXJyZW50RGlyZWN0aXZlID0gdERhdGFbZGlyZWN0aXZlU3R5bGluZ0xhc3RdO1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChjdXJyZW50RGlyZWN0aXZlLCAnZXhwZWN0ZWQgdG8gYmUgZGVmaW5lZCcpO1xuICAgICAgICBzdHlsaW5nS2V5ID0gY29sbGVjdFN0eWxpbmdGcm9tVEF0dHJzKHN0eWxpbmdLZXksIGN1cnJlbnREaXJlY3RpdmUuaG9zdEF0dHJzLCBpc0NsYXNzQmFzZWQpO1xuICAgICAgICBpZiAoY3VycmVudERpcmVjdGl2ZSA9PT0gaG9zdERpcmVjdGl2ZURlZilcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkaXJlY3RpdmVTdHlsaW5nTGFzdCsrO1xuICAgIH1cbiAgICBpZiAoaG9zdERpcmVjdGl2ZURlZiAhPT0gbnVsbCkge1xuICAgICAgICAvLyB3ZSBvbmx5IGFkdmFuY2UgdGhlIHN0eWxpbmcgY3Vyc29yIGlmIHdlIGFyZSBjb2xsZWN0aW5nIGRhdGEgZnJvbSBob3N0IGJpbmRpbmdzLlxuICAgICAgICAvLyBUZW1wbGF0ZSBleGVjdXRlcyBiZWZvcmUgaG9zdCBiaW5kaW5ncyBhbmQgc28gaWYgd2Ugd291bGQgdXBkYXRlIHRoZSBpbmRleCxcbiAgICAgICAgLy8gaG9zdCBiaW5kaW5ncyB3b3VsZCBub3QgZ2V0IHRoZWlyIHN0YXRpY3MuXG4gICAgICAgIHROb2RlLmRpcmVjdGl2ZVN0eWxpbmdMYXN0ID0gZGlyZWN0aXZlU3R5bGluZ0xhc3Q7XG4gICAgfVxuICAgIHJldHVybiBzdHlsaW5nS2V5O1xufVxuLyoqXG4gKiBDb252ZXJ0IGBUQXR0cnNgIGludG8gYFRTdHlsaW5nU3RhdGljYC5cbiAqXG4gKiBAcGFyYW0gc3R5bGluZ0tleSBleGlzdGluZyBgVFN0eWxpbmdLZXlgIHRvIHVwZGF0ZSBvciB3cmFwLlxuICogQHBhcmFtIGF0dHJzIGBUQXR0cmlidXRlc2AgdG8gcHJvY2Vzcy5cbiAqIEBwYXJhbSBpc0NsYXNzQmFzZWQgYHRydWVgIGlmIGBjbGFzc2AgKGBmYWxzZWAgaWYgYHN0eWxlYClcbiAqL1xuZnVuY3Rpb24gY29sbGVjdFN0eWxpbmdGcm9tVEF0dHJzKHN0eWxpbmdLZXksIGF0dHJzLCBpc0NsYXNzQmFzZWQpIHtcbiAgICBjb25zdCBkZXNpcmVkTWFya2VyID0gaXNDbGFzc0Jhc2VkID8gMSAvKiBDbGFzc2VzICovIDogMiAvKiBTdHlsZXMgKi87XG4gICAgbGV0IGN1cnJlbnRNYXJrZXIgPSAtMSAvKiBJbXBsaWNpdEF0dHJpYnV0ZXMgKi87XG4gICAgaWYgKGF0dHJzICE9PSBudWxsKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBhdHRyc1tpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TWFya2VyID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TWFya2VyID09PSBkZXNpcmVkTWFya2VyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzdHlsaW5nS2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGluZ0tleSA9IHN0eWxpbmdLZXkgPT09IHVuZGVmaW5lZCA/IFtdIDogWycnLCBzdHlsaW5nS2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBrZXlWYWx1ZUFycmF5U2V0KHN0eWxpbmdLZXksIGl0ZW0sIGlzQ2xhc3NCYXNlZCA/IHRydWUgOiBhdHRyc1srK2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0eWxpbmdLZXkgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBzdHlsaW5nS2V5O1xufVxuLyoqXG4gKiBDb252ZXJ0IHVzZXIgaW5wdXQgdG8gYEtleVZhbHVlQXJyYXlgLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgdXNlciBpbnB1dCB3aGljaCBjb3VsZCBiZSBgc3RyaW5nYCwgT2JqZWN0IGxpdGVyYWwsIG9yIGl0ZXJhYmxlIGFuZCBjb252ZXJ0c1xuICogaXQgaW50byBhIGNvbnNpc3RlbnQgcmVwcmVzZW50YXRpb24uIFRoZSBvdXRwdXQgb2YgdGhpcyBpcyBgS2V5VmFsdWVBcnJheWAgKHdoaWNoIGlzIGFuIGFycmF5XG4gKiB3aGVyZVxuICogZXZlbiBpbmRleGVzIGNvbnRhaW4ga2V5cyBhbmQgb2RkIGluZGV4ZXMgY29udGFpbiB2YWx1ZXMgZm9yIHRob3NlIGtleXMpLlxuICpcbiAqIFRoZSBhZHZhbnRhZ2Ugb2YgY29udmVydGluZyB0byBgS2V5VmFsdWVBcnJheWAgaXMgdGhhdCB3ZSBjYW4gcGVyZm9ybSBkaWZmIGluIGFuIGlucHV0XG4gKiBpbmRlcGVuZGVudFxuICogd2F5LlxuICogKGllIHdlIGNhbiBjb21wYXJlIGBmb28gYmFyYCB0byBgWydiYXInLCAnYmF6J10gYW5kIGRldGVybWluZSBhIHNldCBvZiBjaGFuZ2VzIHdoaWNoIG5lZWQgdG8gYmVcbiAqIGFwcGxpZWQpXG4gKlxuICogVGhlIGZhY3QgdGhhdCBgS2V5VmFsdWVBcnJheWAgaXMgc29ydGVkIGlzIHZlcnkgaW1wb3J0YW50IGJlY2F1c2UgaXQgYWxsb3dzIHVzIHRvIGNvbXB1dGUgdGhlXG4gKiBkaWZmZXJlbmNlIGluIGxpbmVhciBmYXNoaW9uIHdpdGhvdXQgdGhlIG5lZWQgdG8gYWxsb2NhdGUgYW55IGFkZGl0aW9uYWwgZGF0YS5cbiAqXG4gKiBGb3IgZXhhbXBsZSBpZiB3ZSBrZXB0IHRoaXMgYXMgYSBgTWFwYCB3ZSB3b3VsZCBoYXZlIHRvIGl0ZXJhdGUgb3ZlciBwcmV2aW91cyBgTWFwYCB0byBkZXRlcm1pbmVcbiAqIHdoaWNoIHZhbHVlcyBuZWVkIHRvIGJlIGRlbGV0ZWQsIG92ZXIgdGhlIG5ldyBgTWFwYCB0byBkZXRlcm1pbmUgYWRkaXRpb25zLCBhbmQgd2Ugd291bGQgaGF2ZSB0b1xuICoga2VlcCBhZGRpdGlvbmFsIGBNYXBgIHRvIGtlZXAgdHJhY2sgb2YgZHVwbGljYXRlcyBvciBpdGVtcyB3aGljaCBoYXZlIG5vdCB5ZXQgYmVlbiB2aXNpdGVkLlxuICpcbiAqIEBwYXJhbSBrZXlWYWx1ZUFycmF5U2V0IChTZWUgYGtleVZhbHVlQXJyYXlTZXRgIGluIFwidXRpbC9hcnJheV91dGlsc1wiKSBHZXRzIHBhc3NlZCBpbiBhcyBhXG4gKiAgICAgICAgZnVuY3Rpb24gc28gdGhhdCBgc3R5bGVgIGNhbiBiZSBwcm9jZXNzZWQuIFRoaXMgaXMgZG9uZVxuICogICAgICAgIGZvciB0cmVlIHNoYWtpbmcgcHVycG9zZXMuXG4gKiBAcGFyYW0gc3RyaW5nUGFyc2VyIFRoZSBwYXJzZXIgaXMgcGFzc2VkIGluIHNvIHRoYXQgaXQgd2lsbCBiZSB0cmVlIHNoYWthYmxlLiBTZWVcbiAqICAgICAgICBgc3R5bGVTdHJpbmdQYXJzZXJgIGFuZCBgY2xhc3NTdHJpbmdQYXJzZXJgXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhcnNlL2NvbnZlcnQgdG8gYEtleVZhbHVlQXJyYXlgXG4gKi9cbmZ1bmN0aW9uIHRvU3R5bGluZ0tleVZhbHVlQXJyYXkoa2V5VmFsdWVBcnJheVNldCwgc3RyaW5nUGFyc2VyLCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIC8qfHwgdmFsdWUgPT09IHVuZGVmaW5lZCAqLyB8fCB2YWx1ZSA9PT0gJycpXG4gICAgICAgIHJldHVybiBFTVBUWV9BUlJBWTtcbiAgICBjb25zdCBzdHlsZUtleVZhbHVlQXJyYXkgPSBbXTtcbiAgICBjb25zdCB1bndyYXBwZWRWYWx1ZSA9IHVud3JhcFNhZmVWYWx1ZSh2YWx1ZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodW53cmFwcGVkVmFsdWUpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdW53cmFwcGVkVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGtleVZhbHVlQXJyYXlTZXQoc3R5bGVLZXlWYWx1ZUFycmF5LCB1bndyYXBwZWRWYWx1ZVtpXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHVud3JhcHBlZFZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB1bndyYXBwZWRWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKHVud3JhcHBlZFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBrZXlWYWx1ZUFycmF5U2V0KHN0eWxlS2V5VmFsdWVBcnJheSwga2V5LCB1bndyYXBwZWRWYWx1ZVtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2YgdW53cmFwcGVkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0cmluZ1BhcnNlcihzdHlsZUtleVZhbHVlQXJyYXksIHVud3JhcHBlZFZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgdGhyb3dFcnJvcignVW5zdXBwb3J0ZWQgc3R5bGluZyB0eXBlICcgKyB0eXBlb2YgdW53cmFwcGVkVmFsdWUgKyAnOiAnICsgdW53cmFwcGVkVmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVLZXlWYWx1ZUFycmF5O1xufVxuLyoqXG4gKiBTZXQgYSBgdmFsdWVgIGZvciBhIGBrZXlgLlxuICpcbiAqIFNlZTogYGtleVZhbHVlQXJyYXlTZXRgIGZvciBkZXRhaWxzXG4gKlxuICogQHBhcmFtIGtleVZhbHVlQXJyYXkgS2V5VmFsdWVBcnJheSB0byBhZGQgdG8uXG4gKiBAcGFyYW0ga2V5IFN0eWxlIGtleSB0byBhZGQuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqL1xuZnVuY3Rpb24gc3R5bGVLZXlWYWx1ZUFycmF5U2V0KGtleVZhbHVlQXJyYXksIGtleSwgdmFsdWUpIHtcbiAgICBrZXlWYWx1ZUFycmF5U2V0KGtleVZhbHVlQXJyYXksIGtleSwgdW53cmFwU2FmZVZhbHVlKHZhbHVlKSk7XG59XG4vKipcbiAqIFVwZGF0ZSBtYXAgYmFzZWQgc3R5bGluZy5cbiAqXG4gKiBNYXAgYmFzZWQgc3R5bGluZyBjb3VsZCBiZSBhbnl0aGluZyB3aGljaCBjb250YWlucyBtb3JlIHRoYW4gb25lIGJpbmRpbmcuIEZvciBleGFtcGxlIGBzdHJpbmdgLFxuICogb3Igb2JqZWN0IGxpdGVyYWwuIERlYWxpbmcgd2l0aCBhbGwgb2YgdGhlc2UgdHlwZXMgd291bGQgY29tcGxpY2F0ZSB0aGUgbG9naWMgc29cbiAqIGluc3RlYWQgdGhpcyBmdW5jdGlvbiBleHBlY3RzIHRoYXQgdGhlIGNvbXBsZXggaW5wdXQgaXMgZmlyc3QgY29udmVydGVkIGludG8gbm9ybWFsaXplZFxuICogYEtleVZhbHVlQXJyYXlgLiBUaGUgYWR2YW50YWdlIG9mIG5vcm1hbGl6YXRpb24gaXMgdGhhdCB3ZSBnZXQgdGhlIHZhbHVlcyBzb3J0ZWQsIHdoaWNoIG1ha2VzIGl0XG4gKiB2ZXJ5IGNoZWFwIHRvIGNvbXB1dGUgZGVsdGFzIGJldHdlZW4gdGhlIHByZXZpb3VzIGFuZCBjdXJyZW50IHZhbHVlLlxuICpcbiAqIEBwYXJhbSB0VmlldyBBc3NvY2lhdGVkIGBUVmlldy5kYXRhYCBjb250YWlucyB0aGUgbGlua2VkIGxpc3Qgb2YgYmluZGluZyBwcmlvcml0aWVzLlxuICogQHBhcmFtIHROb2RlIGBUTm9kZWAgd2hlcmUgdGhlIGJpbmRpbmcgaXMgbG9jYXRlZC5cbiAqIEBwYXJhbSBsVmlldyBgTFZpZXdgIGNvbnRhaW5zIHRoZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIG90aGVyIHN0eWxpbmcgYmluZGluZyBhdCB0aGlzIGBUTm9kZWAuXG4gKiBAcGFyYW0gcmVuZGVyZXIgUmVuZGVyZXIgdG8gdXNlIGlmIGFueSB1cGRhdGVzLlxuICogQHBhcmFtIG9sZEtleVZhbHVlQXJyYXkgUHJldmlvdXMgdmFsdWUgcmVwcmVzZW50ZWQgYXMgYEtleVZhbHVlQXJyYXlgXG4gKiBAcGFyYW0gbmV3S2V5VmFsdWVBcnJheSBDdXJyZW50IHZhbHVlIHJlcHJlc2VudGVkIGFzIGBLZXlWYWx1ZUFycmF5YFxuICogQHBhcmFtIGlzQ2xhc3NCYXNlZCBgdHJ1ZWAgaWYgYGNsYXNzYCAoYGZhbHNlYCBpZiBgc3R5bGVgKVxuICogQHBhcmFtIGJpbmRpbmdJbmRleCBCaW5kaW5nIGluZGV4IG9mIHRoZSBiaW5kaW5nLlxuICovXG5mdW5jdGlvbiB1cGRhdGVTdHlsaW5nTWFwKHRWaWV3LCB0Tm9kZSwgbFZpZXcsIHJlbmRlcmVyLCBvbGRLZXlWYWx1ZUFycmF5LCBuZXdLZXlWYWx1ZUFycmF5LCBpc0NsYXNzQmFzZWQsIGJpbmRpbmdJbmRleCkge1xuICAgIGlmIChvbGRLZXlWYWx1ZUFycmF5ID09PSBOT19DSEFOR0UpIHtcbiAgICAgICAgLy8gT24gZmlyc3QgZXhlY3V0aW9uIHRoZSBvbGRLZXlWYWx1ZUFycmF5IGlzIE5PX0NIQU5HRSA9PiB0cmVhdCBpdCBhcyBlbXB0eSBLZXlWYWx1ZUFycmF5LlxuICAgICAgICBvbGRLZXlWYWx1ZUFycmF5ID0gRU1QVFlfQVJSQVk7XG4gICAgfVxuICAgIGxldCBvbGRJbmRleCA9IDA7XG4gICAgbGV0IG5ld0luZGV4ID0gMDtcbiAgICBsZXQgb2xkS2V5ID0gMCA8IG9sZEtleVZhbHVlQXJyYXkubGVuZ3RoID8gb2xkS2V5VmFsdWVBcnJheVswXSA6IG51bGw7XG4gICAgbGV0IG5ld0tleSA9IDAgPCBuZXdLZXlWYWx1ZUFycmF5Lmxlbmd0aCA/IG5ld0tleVZhbHVlQXJyYXlbMF0gOiBudWxsO1xuICAgIHdoaWxlIChvbGRLZXkgIT09IG51bGwgfHwgbmV3S2V5ICE9PSBudWxsKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRMZXNzVGhhbihvbGRJbmRleCwgOTk5LCAnQXJlIHdlIHN0dWNrIGluIGluZmluaXRlIGxvb3A/Jyk7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRMZXNzVGhhbihuZXdJbmRleCwgOTk5LCAnQXJlIHdlIHN0dWNrIGluIGluZmluaXRlIGxvb3A/Jyk7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gb2xkSW5kZXggPCBvbGRLZXlWYWx1ZUFycmF5Lmxlbmd0aCA/IG9sZEtleVZhbHVlQXJyYXlbb2xkSW5kZXggKyAxXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSBuZXdJbmRleCA8IG5ld0tleVZhbHVlQXJyYXkubGVuZ3RoID8gbmV3S2V5VmFsdWVBcnJheVtuZXdJbmRleCArIDFdIDogdW5kZWZpbmVkO1xuICAgICAgICBsZXQgc2V0S2V5ID0gbnVsbDtcbiAgICAgICAgbGV0IHNldFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAob2xkS2V5ID09PSBuZXdLZXkpIHtcbiAgICAgICAgICAgIC8vIFVQREFURTogS2V5cyBhcmUgZXF1YWwgPT4gbmV3IHZhbHVlIGlzIG92ZXJ3cml0aW5nIG9sZCB2YWx1ZS5cbiAgICAgICAgICAgIG9sZEluZGV4ICs9IDI7XG4gICAgICAgICAgICBuZXdJbmRleCArPSAyO1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHNldEtleSA9IG5ld0tleTtcbiAgICAgICAgICAgICAgICBzZXRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5ld0tleSA9PT0gbnVsbCB8fCBvbGRLZXkgIT09IG51bGwgJiYgb2xkS2V5IDwgbmV3S2V5KSB7XG4gICAgICAgICAgICAvLyBERUxFVEU6IG9sZEtleSBrZXkgaXMgbWlzc2luZyBvciB3ZSBkaWQgbm90IGZpbmQgdGhlIG9sZEtleSBpbiB0aGUgbmV3VmFsdWVcbiAgICAgICAgICAgIC8vIChiZWNhdXNlIHRoZSBrZXlWYWx1ZUFycmF5IGlzIHNvcnRlZCBhbmQgYG5ld0tleWAgaXMgZm91bmQgbGF0ZXIgYWxwaGFiZXRpY2FsbHkpLlxuICAgICAgICAgICAgLy8gYFwiYmFja2dyb3VuZFwiIDwgXCJjb2xvclwiYCBzbyB3ZSBuZWVkIHRvIGRlbGV0ZSBgXCJiYWNrZ3JvdW5kXCJgIGJlY2F1c2UgaXQgaXMgbm90IGZvdW5kIGluIHRoZVxuICAgICAgICAgICAgLy8gbmV3IGFycmF5LlxuICAgICAgICAgICAgb2xkSW5kZXggKz0gMjtcbiAgICAgICAgICAgIHNldEtleSA9IG9sZEtleTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIENSRUFURTogbmV3S2V5J3MgaXMgZWFybGllciBhbHBoYWJldGljYWxseSB0aGFuIG9sZEtleSdzIChvciBubyBvbGRLZXkpID0+IHdlIGhhdmUgbmV3IGtleS5cbiAgICAgICAgICAgIC8vIGBcImNvbG9yXCIgPiBcImJhY2tncm91bmRcImAgc28gd2UgbmVlZCB0byBhZGQgYGNvbG9yYCBiZWNhdXNlIGl0IGlzIGluIG5ldyBhcnJheSBidXQgbm90IGluXG4gICAgICAgICAgICAvLyBvbGQgYXJyYXkuXG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZChuZXdLZXksICdFeHBlY3RpbmcgdG8gaGF2ZSBhIHZhbGlkIGtleScpO1xuICAgICAgICAgICAgbmV3SW5kZXggKz0gMjtcbiAgICAgICAgICAgIHNldEtleSA9IG5ld0tleTtcbiAgICAgICAgICAgIHNldFZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldEtleSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdXBkYXRlU3R5bGluZyh0VmlldywgdE5vZGUsIGxWaWV3LCByZW5kZXJlciwgc2V0S2V5LCBzZXRWYWx1ZSwgaXNDbGFzc0Jhc2VkLCBiaW5kaW5nSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIG9sZEtleSA9IG9sZEluZGV4IDwgb2xkS2V5VmFsdWVBcnJheS5sZW5ndGggPyBvbGRLZXlWYWx1ZUFycmF5W29sZEluZGV4XSA6IG51bGw7XG4gICAgICAgIG5ld0tleSA9IG5ld0luZGV4IDwgbmV3S2V5VmFsdWVBcnJheS5sZW5ndGggPyBuZXdLZXlWYWx1ZUFycmF5W25ld0luZGV4XSA6IG51bGw7XG4gICAgfVxufVxuLyoqXG4gKiBVcGRhdGUgYSBzaW1wbGUgKHByb3BlcnR5IG5hbWUpIHN0eWxpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB0YWtlcyBgcHJvcGAgYW5kIHVwZGF0ZXMgdGhlIERPTSB0byB0aGF0IHZhbHVlLiBUaGUgZnVuY3Rpb24gdGFrZXMgdGhlIGJpbmRpbmdcbiAqIHZhbHVlIGFzIHdlbGwgYXMgYmluZGluZyBwcmlvcml0eSBpbnRvIGNvbnNpZGVyYXRpb24gdG8gZGV0ZXJtaW5lIHdoaWNoIHZhbHVlIHNob3VsZCBiZSB3cml0dGVuXG4gKiB0byBET00uIChGb3IgZXhhbXBsZSBpdCBtYXkgYmUgZGV0ZXJtaW5lZCB0aGF0IHRoZXJlIGlzIGEgaGlnaGVyIHByaW9yaXR5IG92ZXJ3cml0ZSB3aGljaCBibG9ja3NcbiAqIHRoZSBET00gd3JpdGUsIG9yIGlmIHRoZSB2YWx1ZSBnb2VzIHRvIGB1bmRlZmluZWRgIGEgbG93ZXIgcHJpb3JpdHkgb3ZlcndyaXRlIG1heSBiZSBjb25zdWx0ZWQuKVxuICpcbiAqIEBwYXJhbSB0VmlldyBBc3NvY2lhdGVkIGBUVmlldy5kYXRhYCBjb250YWlucyB0aGUgbGlua2VkIGxpc3Qgb2YgYmluZGluZyBwcmlvcml0aWVzLlxuICogQHBhcmFtIHROb2RlIGBUTm9kZWAgd2hlcmUgdGhlIGJpbmRpbmcgaXMgbG9jYXRlZC5cbiAqIEBwYXJhbSBsVmlldyBgTFZpZXdgIGNvbnRhaW5zIHRoZSB2YWx1ZXMgYXNzb2NpYXRlZCB3aXRoIG90aGVyIHN0eWxpbmcgYmluZGluZyBhdCB0aGlzIGBUTm9kZWAuXG4gKiBAcGFyYW0gcmVuZGVyZXIgUmVuZGVyZXIgdG8gdXNlIGlmIGFueSB1cGRhdGVzLlxuICogQHBhcmFtIHByb3AgRWl0aGVyIHN0eWxlIHByb3BlcnR5IG5hbWUgb3IgYSBjbGFzcyBuYW1lLlxuICogQHBhcmFtIHZhbHVlIEVpdGhlciBzdHlsZSB2YWx1ZSBmb3IgYHByb3BgIG9yIGB0cnVlYC9gZmFsc2VgIGlmIGBwcm9wYCBpcyBjbGFzcy5cbiAqIEBwYXJhbSBpc0NsYXNzQmFzZWQgYHRydWVgIGlmIGBjbGFzc2AgKGBmYWxzZWAgaWYgYHN0eWxlYClcbiAqIEBwYXJhbSBiaW5kaW5nSW5kZXggQmluZGluZyBpbmRleCBvZiB0aGUgYmluZGluZy5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlU3R5bGluZyh0VmlldywgdE5vZGUsIGxWaWV3LCByZW5kZXJlciwgcHJvcCwgdmFsdWUsIGlzQ2xhc3NCYXNlZCwgYmluZGluZ0luZGV4KSB7XG4gICAgaWYgKCEodE5vZGUudHlwZSAmIDMgLyogQW55Uk5vZGUgKi8pKSB7XG4gICAgICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgc3R5bGluZyBvbiBub24tZWxlbWVudHMgKHN1Y2ggYXMgbmctY29udGFpbmVyKS5cbiAgICAgICAgLy8gVGhpcyBpcyByYXJlLCBidXQgaXQgZG9lcyBoYXBwZW4uIEluIHN1Y2ggYSBjYXNlLCBqdXN0IGlnbm9yZSB0aGUgYmluZGluZy5cbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0RGF0YSA9IHRWaWV3LmRhdGE7XG4gICAgY29uc3QgdFJhbmdlID0gdERhdGFbYmluZGluZ0luZGV4ICsgMV07XG4gICAgY29uc3QgaGlnaGVyUHJpb3JpdHlWYWx1ZSA9IGdldFRTdHlsaW5nUmFuZ2VOZXh0RHVwbGljYXRlKHRSYW5nZSkgP1xuICAgICAgICBmaW5kU3R5bGluZ1ZhbHVlKHREYXRhLCB0Tm9kZSwgbFZpZXcsIHByb3AsIGdldFRTdHlsaW5nUmFuZ2VOZXh0KHRSYW5nZSksIGlzQ2xhc3NCYXNlZCkgOlxuICAgICAgICB1bmRlZmluZWQ7XG4gICAgaWYgKCFpc1N0eWxpbmdWYWx1ZVByZXNlbnQoaGlnaGVyUHJpb3JpdHlWYWx1ZSkpIHtcbiAgICAgICAgLy8gV2UgZG9uJ3QgaGF2ZSBhIG5leHQgZHVwbGljYXRlLCBvciB3ZSBkaWQgbm90IGZpbmQgYSBkdXBsaWNhdGUgdmFsdWUuXG4gICAgICAgIGlmICghaXNTdHlsaW5nVmFsdWVQcmVzZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIGRlbGV0ZSBjdXJyZW50IHZhbHVlIG9yIHJlc3RvcmUgdG8gbG93ZXIgcHJpb3JpdHkgdmFsdWUuXG4gICAgICAgICAgICBpZiAoZ2V0VFN0eWxpbmdSYW5nZVByZXZEdXBsaWNhdGUodFJhbmdlKSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgYSBwb3NzaWJsZSBwcmV2IGR1cGxpY2F0ZSwgbGV0J3MgcmV0cmlldmUgaXQuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBmaW5kU3R5bGluZ1ZhbHVlKHREYXRhLCBudWxsLCBsVmlldywgcHJvcCwgYmluZGluZ0luZGV4LCBpc0NsYXNzQmFzZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJOb2RlID0gZ2V0TmF0aXZlQnlJbmRleChnZXRTZWxlY3RlZEluZGV4KCksIGxWaWV3KTtcbiAgICAgICAgYXBwbHlTdHlsaW5nKHJlbmRlcmVyLCBpc0NsYXNzQmFzZWQsIHJOb2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBTZWFyY2ggZm9yIHN0eWxpbmcgdmFsdWUgd2l0aCBoaWdoZXIgcHJpb3JpdHkgd2hpY2ggaXMgb3ZlcndyaXRpbmcgY3VycmVudCB2YWx1ZSwgb3IgYVxuICogdmFsdWUgb2YgbG93ZXIgcHJpb3JpdHkgdG8gd2hpY2ggd2Ugc2hvdWxkIGZhbGwgYmFjayBpZiB0aGUgdmFsdWUgaXMgYHVuZGVmaW5lZGAuXG4gKlxuICogV2hlbiB2YWx1ZSBpcyBiZWluZyBhcHBsaWVkIGF0IGEgbG9jYXRpb24sIHJlbGF0ZWQgdmFsdWVzIG5lZWQgdG8gYmUgY29uc3VsdGVkLlxuICogLSBJZiB0aGVyZSBpcyBhIGhpZ2hlciBwcmlvcml0eSBiaW5kaW5nLCB3ZSBzaG91bGQgYmUgdXNpbmcgdGhhdCBvbmUgaW5zdGVhZC5cbiAqICAgRm9yIGV4YW1wbGUgYDxkaXYgIFtzdHlsZV09XCJ7Y29sb3I6ZXhwMX1cIiBbc3R5bGUuY29sb3JdPVwiZXhwMlwiPmAgY2hhbmdlIHRvIGBleHAxYFxuICogICByZXF1aXJlcyB0aGF0IHdlIGNoZWNrIGBleHAyYCB0byBzZWUgaWYgaXQgaXMgc2V0IHRvIHZhbHVlIG90aGVyIHRoYW4gYHVuZGVmaW5lZGAuXG4gKiAtIElmIHRoZXJlIGlzIGEgbG93ZXIgcHJpb3JpdHkgYmluZGluZyBhbmQgd2UgYXJlIGNoYW5naW5nIHRvIGB1bmRlZmluZWRgXG4gKiAgIEZvciBleGFtcGxlIGA8ZGl2ICBbc3R5bGVdPVwie2NvbG9yOmV4cDF9XCIgW3N0eWxlLmNvbG9yXT1cImV4cDJcIj5gIGNoYW5nZSB0byBgZXhwMmAgdG9cbiAqICAgYHVuZGVmaW5lZGAgcmVxdWlyZXMgdGhhdCB3ZSBjaGVjayBgZXhwMWAgKGFuZCBzdGF0aWMgdmFsdWVzKSBhbmQgdXNlIHRoYXQgYXMgbmV3IHZhbHVlLlxuICpcbiAqIE5PVEU6IFRoZSBzdHlsaW5nIHN0b3JlcyB0d28gdmFsdWVzLlxuICogMS4gVGhlIHJhdyB2YWx1ZSB3aGljaCBjYW1lIGZyb20gdGhlIGFwcGxpY2F0aW9uIGlzIHN0b3JlZCBhdCBgaW5kZXggKyAwYCBsb2NhdGlvbi4gKFRoaXMgdmFsdWVcbiAqICAgIGlzIHVzZWQgZm9yIGRpcnR5IGNoZWNraW5nKS5cbiAqIDIuIFRoZSBub3JtYWxpemVkIHZhbHVlIGlzIHN0b3JlZCBhdCBgaW5kZXggKyAxYC5cbiAqXG4gKiBAcGFyYW0gdERhdGEgYFREYXRhYCB1c2VkIGZvciB0cmF2ZXJzaW5nIHRoZSBwcmlvcml0eS5cbiAqIEBwYXJhbSB0Tm9kZSBgVE5vZGVgIHRvIHVzZSBmb3IgcmVzb2x2aW5nIHN0YXRpYyBzdHlsaW5nLiBBbHNvIGNvbnRyb2xzIHNlYXJjaCBkaXJlY3Rpb24uXG4gKiAgIC0gYFROb2RlYCBzZWFyY2ggbmV4dCBhbmQgcXVpdCBhcyBzb29uIGFzIGBpc1N0eWxpbmdWYWx1ZVByZXNlbnQodmFsdWUpYCBpcyB0cnVlLlxuICogICAgICBJZiBubyB2YWx1ZSBmb3VuZCBjb25zdWx0IGB0Tm9kZS5yZXNpZHVhbFN0eWxlYC9gdE5vZGUucmVzaWR1YWxDbGFzc2AgZm9yIGRlZmF1bHQgdmFsdWUuXG4gKiAgIC0gYG51bGxgIHNlYXJjaCBwcmV2IGFuZCBnbyBhbGwgdGhlIHdheSB0byBlbmQuIFJldHVybiBsYXN0IHZhbHVlIHdoZXJlXG4gKiAgICAgYGlzU3R5bGluZ1ZhbHVlUHJlc2VudCh2YWx1ZSlgIGlzIHRydWUuXG4gKiBAcGFyYW0gbFZpZXcgYExWaWV3YCB1c2VkIGZvciByZXRyaWV2aW5nIHRoZSBhY3R1YWwgdmFsdWVzLlxuICogQHBhcmFtIHByb3AgUHJvcGVydHkgd2hpY2ggd2UgYXJlIGludGVyZXN0ZWQgaW4uXG4gKiBAcGFyYW0gaW5kZXggU3RhcnRpbmcgaW5kZXggaW4gdGhlIGxpbmtlZCBsaXN0IG9mIHN0eWxpbmcgYmluZGluZ3Mgd2hlcmUgdGhlIHNlYXJjaCBzaG91bGQgc3RhcnQuXG4gKiBAcGFyYW0gaXNDbGFzc0Jhc2VkIGB0cnVlYCBpZiBgY2xhc3NgIChgZmFsc2VgIGlmIGBzdHlsZWApXG4gKi9cbmZ1bmN0aW9uIGZpbmRTdHlsaW5nVmFsdWUodERhdGEsIHROb2RlLCBsVmlldywgcHJvcCwgaW5kZXgsIGlzQ2xhc3NCYXNlZCkge1xuICAgIC8vIGBUTm9kZWAgdG8gdXNlIGZvciByZXNvbHZpbmcgc3RhdGljIHN0eWxpbmcuIEFsc28gY29udHJvbHMgc2VhcmNoIGRpcmVjdGlvbi5cbiAgICAvLyAgIC0gYFROb2RlYCBzZWFyY2ggbmV4dCBhbmQgcXVpdCBhcyBzb29uIGFzIGBpc1N0eWxpbmdWYWx1ZVByZXNlbnQodmFsdWUpYCBpcyB0cnVlLlxuICAgIC8vICAgICAgSWYgbm8gdmFsdWUgZm91bmQgY29uc3VsdCBgdE5vZGUucmVzaWR1YWxTdHlsZWAvYHROb2RlLnJlc2lkdWFsQ2xhc3NgIGZvciBkZWZhdWx0IHZhbHVlLlxuICAgIC8vICAgLSBgbnVsbGAgc2VhcmNoIHByZXYgYW5kIGdvIGFsbCB0aGUgd2F5IHRvIGVuZC4gUmV0dXJuIGxhc3QgdmFsdWUgd2hlcmVcbiAgICAvLyAgICAgYGlzU3R5bGluZ1ZhbHVlUHJlc2VudCh2YWx1ZSlgIGlzIHRydWUuXG4gICAgY29uc3QgaXNQcmV2RGlyZWN0aW9uID0gdE5vZGUgPT09IG51bGw7XG4gICAgbGV0IHZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHdoaWxlIChpbmRleCA+IDApIHtcbiAgICAgICAgY29uc3QgcmF3S2V5ID0gdERhdGFbaW5kZXhdO1xuICAgICAgICBjb25zdCBjb250YWluc1N0YXRpY3MgPSBBcnJheS5pc0FycmF5KHJhd0tleSk7XG4gICAgICAgIC8vIFVud3JhcCB0aGUga2V5IGlmIHdlIGNvbnRhaW4gc3RhdGljIHZhbHVlcy5cbiAgICAgICAgY29uc3Qga2V5ID0gY29udGFpbnNTdGF0aWNzID8gcmF3S2V5WzFdIDogcmF3S2V5O1xuICAgICAgICBjb25zdCBpc1N0eWxpbmdNYXAgPSBrZXkgPT09IG51bGw7XG4gICAgICAgIGxldCB2YWx1ZUF0TFZpZXdJbmRleCA9IGxWaWV3W2luZGV4ICsgMV07XG4gICAgICAgIGlmICh2YWx1ZUF0TFZpZXdJbmRleCA9PT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgICAgICAvLyBJbiBmaXJzdFVwZGF0ZVBhc3MgdGhlIHN0eWxpbmcgaW5zdHJ1Y3Rpb25zIGNyZWF0ZSBhIGxpbmtlZCBsaXN0IG9mIHN0eWxpbmcuXG4gICAgICAgICAgICAvLyBPbiBzdWJzZXF1ZW50IHBhc3NlcyBpdCBpcyBwb3NzaWJsZSBmb3IgYSBzdHlsaW5nIGluc3RydWN0aW9uIHRvIHRyeSB0byByZWFkIGEgYmluZGluZ1xuICAgICAgICAgICAgLy8gd2hpY2hcbiAgICAgICAgICAgIC8vIGhhcyBub3QgeWV0IGV4ZWN1dGVkLiBJbiB0aGF0IGNhc2Ugd2Ugd2lsbCBmaW5kIGBOT19DSEFOR0VgIGFuZCB3ZSBzaG91bGQgYXNzdW1lIHRoYXRcbiAgICAgICAgICAgIC8vIHdlIGhhdmUgYHVuZGVmaW5lZGAgKG9yIGVtcHR5IGFycmF5IGluIGNhc2Ugb2Ygc3R5bGluZy1tYXAgaW5zdHJ1Y3Rpb24pIGluc3RlYWQuIFRoaXNcbiAgICAgICAgICAgIC8vIGFsbG93cyB0aGUgcmVzb2x1dGlvbiB0byBhcHBseSB0aGUgdmFsdWUgKHdoaWNoIG1heSBsYXRlciBiZSBvdmVyd3JpdHRlbiB3aGVuIHRoZVxuICAgICAgICAgICAgLy8gYmluZGluZyBhY3R1YWxseSBleGVjdXRlcy4pXG4gICAgICAgICAgICB2YWx1ZUF0TFZpZXdJbmRleCA9IGlzU3R5bGluZ01hcCA/IEVNUFRZX0FSUkFZIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSBpc1N0eWxpbmdNYXAgPyBrZXlWYWx1ZUFycmF5R2V0KHZhbHVlQXRMVmlld0luZGV4LCBwcm9wKSA6XG4gICAgICAgICAgICBrZXkgPT09IHByb3AgPyB2YWx1ZUF0TFZpZXdJbmRleCA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNvbnRhaW5zU3RhdGljcyAmJiAhaXNTdHlsaW5nVmFsdWVQcmVzZW50KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGtleVZhbHVlQXJyYXlHZXQocmF3S2V5LCBwcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNTdHlsaW5nVmFsdWVQcmVzZW50KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgaWYgKGlzUHJldkRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0UmFuZ2UgPSB0RGF0YVtpbmRleCArIDFdO1xuICAgICAgICBpbmRleCA9IGlzUHJldkRpcmVjdGlvbiA/IGdldFRTdHlsaW5nUmFuZ2VQcmV2KHRSYW5nZSkgOiBnZXRUU3R5bGluZ1JhbmdlTmV4dCh0UmFuZ2UpO1xuICAgIH1cbiAgICBpZiAodE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgLy8gaW4gY2FzZSB3aGVyZSB3ZSBhcmUgZ29pbmcgaW4gbmV4dCBkaXJlY3Rpb24gQU5EIHdlIGRpZCBub3QgZmluZCBhbnl0aGluZywgd2UgbmVlZCB0b1xuICAgICAgICAvLyBjb25zdWx0IHJlc2lkdWFsIHN0eWxpbmdcbiAgICAgICAgbGV0IHJlc2lkdWFsID0gaXNDbGFzc0Jhc2VkID8gdE5vZGUucmVzaWR1YWxDbGFzc2VzIDogdE5vZGUucmVzaWR1YWxTdHlsZXM7XG4gICAgICAgIGlmIChyZXNpZHVhbCAhPSBudWxsIC8qKiBPUiByZXNpZHVhbCAhPT09IHVuZGVmaW5lZCAqLykge1xuICAgICAgICAgICAgdmFsdWUgPSBrZXlWYWx1ZUFycmF5R2V0KHJlc2lkdWFsLCBwcm9wKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJpbmRpbmcgdmFsdWUgc2hvdWxkIGJlIHVzZWQgKG9yIGlmIHRoZSB2YWx1ZSBpcyAndW5kZWZpbmVkJyBhbmQgaGVuY2UgcHJpb3JpdHlcbiAqIHJlc29sdXRpb24gc2hvdWxkIGJlIHVzZWQuKVxuICpcbiAqIEBwYXJhbSB2YWx1ZSBCaW5kaW5nIHN0eWxlIHZhbHVlLlxuICovXG5mdW5jdGlvbiBpc1N0eWxpbmdWYWx1ZVByZXNlbnQodmFsdWUpIHtcbiAgICAvLyBDdXJyZW50bHkgb25seSBgdW5kZWZpbmVkYCB2YWx1ZSBpcyBjb25zaWRlcmVkIG5vbi1iaW5kaW5nLiBUaGF0IGlzIGB1bmRlZmluZWRgIHNheXMgSSBkb24ndFxuICAgIC8vIGhhdmUgYW4gb3BpbmlvbiBhcyB0byB3aGF0IHRoaXMgYmluZGluZyBzaG91bGQgYmUgYW5kIHlvdSBzaG91bGQgY29uc3VsdCBvdGhlciBiaW5kaW5ncyBieVxuICAgIC8vIHByaW9yaXR5IHRvIGRldGVybWluZSB0aGUgdmFsaWQgdmFsdWUuXG4gICAgLy8gVGhpcyBpcyBleHRyYWN0ZWQgaW50byBhIHNpbmdsZSBmdW5jdGlvbiBzbyB0aGF0IHdlIGhhdmUgYSBzaW5nbGUgcGxhY2UgdG8gY29udHJvbCB0aGlzLlxuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xufVxuLyoqXG4gKiBOb3JtYWxpemVzIGFuZC9vciBhZGRzIGEgc3VmZml4IHRvIHRoZSB2YWx1ZS5cbiAqXG4gKiBJZiB2YWx1ZSBpcyBgbnVsbGAvYHVuZGVmaW5lZGAgbm8gc3VmZml4IGlzIGFkZGVkXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSBzdWZmaXhcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplU3VmZml4KHZhbHVlLCBzdWZmaXgpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAvKiogfHwgdmFsdWUgPT09IHVuZGVmaW5lZCAqLykge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBzdWZmaXggPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUgKyBzdWZmaXg7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFsdWUgPSBzdHJpbmdpZnkodW53cmFwU2FmZVZhbHVlKHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogVGVzdHMgaWYgdGhlIGBUTm9kZWAgaGFzIGlucHV0IHNoYWRvdy5cbiAqXG4gKiBBbiBpbnB1dCBzaGFkb3cgaXMgd2hlbiBhIGRpcmVjdGl2ZSBzdGVhbHMgKHNoYWRvd3MpIHRoZSBpbnB1dCBieSB1c2luZyBgQElucHV0KCdzdHlsZScpYCBvclxuICogYEBJbnB1dCgnY2xhc3MnKWAgYXMgaW5wdXQuXG4gKlxuICogQHBhcmFtIHROb2RlIGBUTm9kZWAgd2hpY2ggd2Ugd291bGQgbGlrZSB0byBzZWUgaWYgaXQgaGFzIHNoYWRvdy5cbiAqIEBwYXJhbSBpc0NsYXNzQmFzZWQgYHRydWVgIGlmIGBjbGFzc2AgKGBmYWxzZWAgaWYgYHN0eWxlYClcbiAqL1xuZnVuY3Rpb24gaGFzU3R5bGluZ0lucHV0U2hhZG93KHROb2RlLCBpc0NsYXNzQmFzZWQpIHtcbiAgICByZXR1cm4gKHROb2RlLmZsYWdzICYgKGlzQ2xhc3NCYXNlZCA/IDE2IC8qIGhhc0NsYXNzSW5wdXQgKi8gOiAzMiAvKiBoYXNTdHlsZUlucHV0ICovKSkgIT09IDA7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDcmVhdGUgc3RhdGljIHRleHQgbm9kZVxuICpcbiAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiB0aGUgbm9kZSBpbiB0aGUgZGF0YSBhcnJheVxuICogQHBhcmFtIHZhbHVlIFN0YXRpYyBzdHJpbmcgdmFsdWUgdG8gd3JpdGUuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXRleHQoaW5kZXgsIHZhbHVlID0gJycpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgIGNvbnN0IGFkanVzdGVkSW5kZXggPSBpbmRleCArIEhFQURFUl9PRkZTRVQ7XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydEVxdWFsKGdldEJpbmRpbmdJbmRleCgpLCB0Vmlldy5iaW5kaW5nU3RhcnRJbmRleCwgJ3RleHQgbm9kZXMgc2hvdWxkIGJlIGNyZWF0ZWQgYmVmb3JlIGFueSBiaW5kaW5ncycpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXcsIGFkanVzdGVkSW5kZXgpO1xuICAgIGNvbnN0IHROb2RlID0gdFZpZXcuZmlyc3RDcmVhdGVQYXNzID9cbiAgICAgICAgZ2V0T3JDcmVhdGVUTm9kZSh0VmlldywgYWRqdXN0ZWRJbmRleCwgMSAvKiBUZXh0ICovLCB2YWx1ZSwgbnVsbCkgOlxuICAgICAgICB0Vmlldy5kYXRhW2FkanVzdGVkSW5kZXhdO1xuICAgIGNvbnN0IHRleHROYXRpdmUgPSBsVmlld1thZGp1c3RlZEluZGV4XSA9IGNyZWF0ZVRleHROb2RlKGxWaWV3W1JFTkRFUkVSXSwgdmFsdWUpO1xuICAgIGFwcGVuZENoaWxkKHRWaWV3LCBsVmlldywgdGV4dE5hdGl2ZSwgdE5vZGUpO1xuICAgIC8vIFRleHQgbm9kZXMgYXJlIHNlbGYgY2xvc2luZy5cbiAgICBzZXRDdXJyZW50VE5vZGUodE5vZGUsIGZhbHNlKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqXG4gKiBVcGRhdGUgdGV4dCBjb250ZW50IHdpdGggYSBsb25lIGJvdW5kIHZhbHVlXG4gKlxuICogVXNlZCB3aGVuIGEgdGV4dCBub2RlIGhhcyAxIGludGVycG9sYXRlZCB2YWx1ZSBpbiBpdCwgYW4gbm8gYWRkaXRpb25hbCB0ZXh0XG4gKiBzdXJyb3VuZHMgdGhhdCBpbnRlcnBvbGF0ZWQgdmFsdWU6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdj57e3YwfX08L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXRleHRJbnRlcnBvbGF0ZSh2MCk7XG4gKiBgYGBcbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBzZWUgdGV4dEludGVycG9sYXRlVlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXRleHRJbnRlcnBvbGF0ZSh2MCkge1xuICAgIMm1ybV0ZXh0SW50ZXJwb2xhdGUxKCcnLCB2MCwgJycpO1xuICAgIHJldHVybiDJtcm1dGV4dEludGVycG9sYXRlO1xufVxuLyoqXG4gKlxuICogVXBkYXRlIHRleHQgY29udGVudCB3aXRoIHNpbmdsZSBib3VuZCB2YWx1ZSBzdXJyb3VuZGVkIGJ5IG90aGVyIHRleHQuXG4gKlxuICogVXNlZCB3aGVuIGEgdGV4dCBub2RlIGhhcyAxIGludGVycG9sYXRlZCB2YWx1ZSBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2PnByZWZpeHt7djB9fXN1ZmZpeDwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1dGV4dEludGVycG9sYXRlMSgncHJlZml4JywgdjAsICdzdWZmaXgnKTtcbiAqIGBgYFxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQHNlZSB0ZXh0SW50ZXJwb2xhdGVWXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1dGV4dEludGVycG9sYXRlMShwcmVmaXgsIHYwLCBzdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkID0gaW50ZXJwb2xhdGlvbjEobFZpZXcsIHByZWZpeCwgdjAsIHN1ZmZpeCk7XG4gICAgaWYgKGludGVycG9sYXRlZCAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIHRleHRCaW5kaW5nSW50ZXJuYWwobFZpZXcsIGdldFNlbGVjdGVkSW5kZXgoKSwgaW50ZXJwb2xhdGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIMm1ybV0ZXh0SW50ZXJwb2xhdGUxO1xufVxuLyoqXG4gKlxuICogVXBkYXRlIHRleHQgY29udGVudCB3aXRoIDIgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgb3RoZXIgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gYSB0ZXh0IG5vZGUgaGFzIDIgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2PnByZWZpeHt7djB9fS17e3YxfX1zdWZmaXg8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXRleHRJbnRlcnBvbGF0ZTIoJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBzZWUgdGV4dEludGVycG9sYXRlVlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXRleHRJbnRlcnBvbGF0ZTIocHJlZml4LCB2MCwgaTAsIHYxLCBzdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkID0gaW50ZXJwb2xhdGlvbjIobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgc3VmZml4KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgdGV4dEJpbmRpbmdJbnRlcm5hbChsVmlldywgZ2V0U2VsZWN0ZWRJbmRleCgpLCBpbnRlcnBvbGF0ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtXRleHRJbnRlcnBvbGF0ZTI7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgdGV4dCBjb250ZW50IHdpdGggMyBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSBvdGhlciB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiBhIHRleHQgbm9kZSBoYXMgMyBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXY+cHJlZml4e3t2MH19LXt7djF9fS17e3YyfX1zdWZmaXg8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXRleHRJbnRlcnBvbGF0ZTMoXG4gKiAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICdzdWZmaXgnKTtcbiAqIGBgYFxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQHNlZSB0ZXh0SW50ZXJwb2xhdGVWXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1dGV4dEludGVycG9sYXRlMyhwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2Miwgc3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZCA9IGludGVycG9sYXRpb24zKGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2Miwgc3VmZml4KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgdGV4dEJpbmRpbmdJbnRlcm5hbChsVmlldywgZ2V0U2VsZWN0ZWRJbmRleCgpLCBpbnRlcnBvbGF0ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtXRleHRJbnRlcnBvbGF0ZTM7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgdGV4dCBjb250ZW50IHdpdGggNCBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSBvdGhlciB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiBhIHRleHQgbm9kZSBoYXMgNCBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXY+cHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319c3VmZml4PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybV0ZXh0SW50ZXJwb2xhdGU0KFxuICogJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBzZWUgybXJtXRleHRJbnRlcnBvbGF0ZVZcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybV0ZXh0SW50ZXJwb2xhdGU0KHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBpbnRlcnBvbGF0aW9uNChsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2Mywgc3VmZml4KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgdGV4dEJpbmRpbmdJbnRlcm5hbChsVmlldywgZ2V0U2VsZWN0ZWRJbmRleCgpLCBpbnRlcnBvbGF0ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtXRleHRJbnRlcnBvbGF0ZTQ7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgdGV4dCBjb250ZW50IHdpdGggNSBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSBvdGhlciB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiBhIHRleHQgbm9kZSBoYXMgNSBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXY+cHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fXN1ZmZpeDwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1dGV4dEludGVycG9sYXRlNShcbiAqICdwcmVmaXgnLCB2MCwgJy0nLCB2MSwgJy0nLCB2MiwgJy0nLCB2MywgJy0nLCB2NCwgJ3N1ZmZpeCcpO1xuICogYGBgXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAc2VlIHRleHRJbnRlcnBvbGF0ZVZcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybV0ZXh0SW50ZXJwb2xhdGU1KHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgc3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZCA9IGludGVycG9sYXRpb241KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIHN1ZmZpeCk7XG4gICAgaWYgKGludGVycG9sYXRlZCAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIHRleHRCaW5kaW5nSW50ZXJuYWwobFZpZXcsIGdldFNlbGVjdGVkSW5kZXgoKSwgaW50ZXJwb2xhdGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIMm1ybV0ZXh0SW50ZXJwb2xhdGU1O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIHRleHQgY29udGVudCB3aXRoIDYgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgb3RoZXIgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gYSB0ZXh0IG5vZGUgaGFzIDYgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2PnByZWZpeHt7djB9fS17e3YxfX0te3t2Mn19LXt7djN9fS17e3Y0fX0te3t2NX19c3VmZml4PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybV0ZXh0SW50ZXJwb2xhdGU2KFxuICogICAgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnLScsIHY1LCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuIEByZXR1cm5zIGl0c2VsZiwgc28gdGhhdCBpdCBtYXkgYmUgY2hhaW5lZC5cbiAqIEBzZWUgdGV4dEludGVycG9sYXRlVlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXRleHRJbnRlcnBvbGF0ZTYocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBpbnRlcnBvbGF0aW9uNihsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIHN1ZmZpeCk7XG4gICAgaWYgKGludGVycG9sYXRlZCAhPT0gTk9fQ0hBTkdFKSB7XG4gICAgICAgIHRleHRCaW5kaW5nSW50ZXJuYWwobFZpZXcsIGdldFNlbGVjdGVkSW5kZXgoKSwgaW50ZXJwb2xhdGVkKTtcbiAgICB9XG4gICAgcmV0dXJuIMm1ybV0ZXh0SW50ZXJwb2xhdGU2O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIHRleHQgY29udGVudCB3aXRoIDcgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgb3RoZXIgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gYSB0ZXh0IG5vZGUgaGFzIDcgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2PnByZWZpeHt7djB9fS17e3YxfX0te3t2Mn19LXt7djN9fS17e3Y0fX0te3t2NX19LXt7djZ9fXN1ZmZpeDwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1dGV4dEludGVycG9sYXRlNyhcbiAqICAgICdwcmVmaXgnLCB2MCwgJy0nLCB2MSwgJy0nLCB2MiwgJy0nLCB2MywgJy0nLCB2NCwgJy0nLCB2NSwgJy0nLCB2NiwgJ3N1ZmZpeCcpO1xuICogYGBgXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAc2VlIHRleHRJbnRlcnBvbGF0ZVZcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybV0ZXh0SW50ZXJwb2xhdGU3KHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBpNSwgdjYsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBpbnRlcnBvbGF0aW9uNyhsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2Niwgc3VmZml4KTtcbiAgICBpZiAoaW50ZXJwb2xhdGVkICE9PSBOT19DSEFOR0UpIHtcbiAgICAgICAgdGV4dEJpbmRpbmdJbnRlcm5hbChsVmlldywgZ2V0U2VsZWN0ZWRJbmRleCgpLCBpbnRlcnBvbGF0ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtXRleHRJbnRlcnBvbGF0ZTc7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgdGV4dCBjb250ZW50IHdpdGggOCBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSBvdGhlciB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiBhIHRleHQgbm9kZSBoYXMgOCBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXY+cHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX0te3t2Nn19LXt7djd9fXN1ZmZpeDwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1dGV4dEludGVycG9sYXRlOChcbiAqICAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICctJywgdjYsICctJywgdjcsICdzdWZmaXgnKTtcbiAqIGBgYFxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQHNlZSB0ZXh0SW50ZXJwb2xhdGVWXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1dGV4dEludGVycG9sYXRlOChwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIGk0LCB2NSwgaTUsIHY2LCBpNiwgdjcsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWQgPSBpbnRlcnBvbGF0aW9uOChsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2NiwgaTYsIHY3LCBzdWZmaXgpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWQgIT09IE5PX0NIQU5HRSkge1xuICAgICAgICB0ZXh0QmluZGluZ0ludGVybmFsKGxWaWV3LCBnZXRTZWxlY3RlZEluZGV4KCksIGludGVycG9sYXRlZCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1dGV4dEludGVycG9sYXRlODtcbn1cbi8qKlxuICogVXBkYXRlIHRleHQgY29udGVudCB3aXRoIDkgb3IgbW9yZSBib3VuZCB2YWx1ZXMgb3RoZXIgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgbnVtYmVyIG9mIGludGVycG9sYXRlZCB2YWx1ZXMgZXhjZWVkcyA4LlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXY+cHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX0te3t2Nn19LXt7djd9fS17e3Y4fX0te3t2OX19c3VmZml4PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybV0ZXh0SW50ZXJwb2xhdGVWKFxuICogIFsncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICctJywgdjYsICctJywgdjcsICctJywgdjksXG4gKiAgJ3N1ZmZpeCddKTtcbiAqIGBgYFxuICouXG4gKiBAcGFyYW0gdmFsdWVzIFRoZSBjb2xsZWN0aW9uIG9mIHZhbHVlcyBhbmQgdGhlIHN0cmluZ3MgaW4gYmV0d2VlbiB0aG9zZSB2YWx1ZXMsIGJlZ2lubmluZyB3aXRoXG4gKiBhIHN0cmluZyBwcmVmaXggYW5kIGVuZGluZyB3aXRoIGEgc3RyaW5nIHN1ZmZpeC5cbiAqIChlLmcuIGBbJ3ByZWZpeCcsIHZhbHVlMCwgJy0nLCB2YWx1ZTEsICctJywgdmFsdWUyLCAuLi4sIHZhbHVlOTksICdzdWZmaXgnXWApXG4gKlxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXRleHRJbnRlcnBvbGF0ZVYodmFsdWVzKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZCA9IGludGVycG9sYXRpb25WKGxWaWV3LCB2YWx1ZXMpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWQgIT09IE5PX0NIQU5HRSkge1xuICAgICAgICB0ZXh0QmluZGluZ0ludGVybmFsKGxWaWV3LCBnZXRTZWxlY3RlZEluZGV4KCksIGludGVycG9sYXRlZCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1dGV4dEludGVycG9sYXRlVjtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIGNsYXNzIG9uIGFuIGVsZW1lbnQgd2l0aCBzaW5nbGUgYm91bmQgdmFsdWUgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDEgaW50ZXJwb2xhdGVkIHZhbHVlIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgY2xhc3M9XCJwcmVmaXh7e3YwfX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtWNsYXNzTWFwSW50ZXJwb2xhdGUxKCdwcmVmaXgnLCB2MCwgJ3N1ZmZpeCcpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVjbGFzc01hcEludGVycG9sYXRlMShwcmVmaXgsIHYwLCBzdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uMShsVmlldywgcHJlZml4LCB2MCwgc3VmZml4KTtcbiAgICBjaGVja1N0eWxpbmdNYXAoa2V5VmFsdWVBcnJheVNldCwgY2xhc3NTdHJpbmdQYXJzZXIsIGludGVycG9sYXRlZFZhbHVlLCB0cnVlKTtcbn1cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgY2xhc3Mgb24gYW4gZWxlbWVudCB3aXRoIDIgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyAyIGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBjbGFzcz1cInByZWZpeHt7djB9fS17e3YxfX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtWNsYXNzTWFwSW50ZXJwb2xhdGUyKCdwcmVmaXgnLCB2MCwgJy0nLCB2MSwgJ3N1ZmZpeCcpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYxIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVjbGFzc01hcEludGVycG9sYXRlMihwcmVmaXgsIHYwLCBpMCwgdjEsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb24yKGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIHN1ZmZpeCk7XG4gICAgY2hlY2tTdHlsaW5nTWFwKGtleVZhbHVlQXJyYXlTZXQsIGNsYXNzU3RyaW5nUGFyc2VyLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgdHJ1ZSk7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIGNsYXNzIG9uIGFuIGVsZW1lbnQgd2l0aCAzIGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgMyBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgY2xhc3M9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTMoXG4gKiAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTMocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb24zKGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2Miwgc3VmZml4KTtcbiAgICBjaGVja1N0eWxpbmdNYXAoa2V5VmFsdWVBcnJheVNldCwgY2xhc3NTdHJpbmdQYXJzZXIsIGludGVycG9sYXRlZFZhbHVlLCB0cnVlKTtcbn1cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgY2xhc3Mgb24gYW4gZWxlbWVudCB3aXRoIDQgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA0IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBjbGFzcz1cInByZWZpeHt7djB9fS17e3YxfX0te3t2Mn19LXt7djN9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTQoXG4gKiAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTQocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2Mywgc3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjQobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIHN1ZmZpeCk7XG4gICAgY2hlY2tTdHlsaW5nTWFwKGtleVZhbHVlQXJyYXlTZXQsIGNsYXNzU3RyaW5nUGFyc2VyLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgdHJ1ZSk7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIGNsYXNzIG9uIGFuIGVsZW1lbnQgd2l0aCA1IGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgNSBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgY2xhc3M9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fS17e3YzfX0te3t2NH19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVjbGFzc01hcEludGVycG9sYXRlNShcbiAqICdwcmVmaXgnLCB2MCwgJy0nLCB2MSwgJy0nLCB2MiwgJy0nLCB2MywgJy0nLCB2NCwgJ3N1ZmZpeCcpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHByZWZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYwIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYxIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMSBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYyIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMiBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHYzIFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBpMyBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHY0IFZhbHVlIGNoZWNrZWQgZm9yIGNoYW5nZS5cbiAqIEBwYXJhbSBzdWZmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVjbGFzc01hcEludGVycG9sYXRlNShwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb241KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIHN1ZmZpeCk7XG4gICAgY2hlY2tTdHlsaW5nTWFwKGtleVZhbHVlQXJyYXlTZXQsIGNsYXNzU3RyaW5nUGFyc2VyLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgdHJ1ZSk7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIGNsYXNzIG9uIGFuIGVsZW1lbnQgd2l0aCA2IGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgNiBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgY2xhc3M9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fS17e3YzfX0te3t2NH19LXt7djV9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTYoXG4gKiAgICAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTYocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb242KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIGk0LCB2NSwgc3VmZml4KTtcbiAgICBjaGVja1N0eWxpbmdNYXAoa2V5VmFsdWVBcnJheVNldCwgY2xhc3NTdHJpbmdQYXJzZXIsIGludGVycG9sYXRlZFZhbHVlLCB0cnVlKTtcbn1cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgY2xhc3Mgb24gYW4gZWxlbWVudCB3aXRoIDcgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA3IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBjbGFzcz1cInByZWZpeHt7djB9fS17e3YxfX0te3t2Mn19LXt7djN9fS17e3Y0fX0te3t2NX19LXt7djZ9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTcoXG4gKiAgICAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICctJywgdjYsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTUgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTcocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2Niwgc3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjcobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBpNSwgdjYsIHN1ZmZpeCk7XG4gICAgY2hlY2tTdHlsaW5nTWFwKGtleVZhbHVlQXJyYXlTZXQsIGNsYXNzU3RyaW5nUGFyc2VyLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgdHJ1ZSk7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIGNsYXNzIG9uIGFuIGVsZW1lbnQgd2l0aCA4IGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgOCBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgY2xhc3M9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fS17e3YzfX0te3t2NH19LXt7djV9fS17e3Y2fX0te3t2N319c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVjbGFzc01hcEludGVycG9sYXRlOChcbiAqICAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICctJywgdjYsICctJywgdjcsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTUgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTYgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTgocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2NiwgaTYsIHY3LCBzdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uOChsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2NiwgaTYsIHY3LCBzdWZmaXgpO1xuICAgIGNoZWNrU3R5bGluZ01hcChrZXlWYWx1ZUFycmF5U2V0LCBjbGFzc1N0cmluZ1BhcnNlciwgaW50ZXJwb2xhdGVkVmFsdWUsIHRydWUpO1xufVxuLyoqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIGNsYXNzIG9uIGFuIGVsZW1lbnQgd2l0aCA5IG9yIG1vcmUgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIG51bWJlciBvZiBpbnRlcnBvbGF0ZWQgdmFsdWVzIGV4Y2VlZHMgOC5cbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2XG4gKiAgY2xhc3M9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fS17e3YzfX0te3t2NH19LXt7djV9fS17e3Y2fX0te3t2N319LXt7djh9fS17e3Y5fX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtWNsYXNzTWFwSW50ZXJwb2xhdGVWKFxuICogIFsncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICctJywgdjYsICctJywgdjcsICctJywgdjksXG4gKiAgJ3N1ZmZpeCddKTtcbiAqIGBgYFxuICouXG4gKiBAcGFyYW0gdmFsdWVzIFRoZSBjb2xsZWN0aW9uIG9mIHZhbHVlcyBhbmQgdGhlIHN0cmluZ3MgaW4tYmV0d2VlbiB0aG9zZSB2YWx1ZXMsIGJlZ2lubmluZyB3aXRoXG4gKiBhIHN0cmluZyBwcmVmaXggYW5kIGVuZGluZyB3aXRoIGEgc3RyaW5nIHN1ZmZpeC5cbiAqIChlLmcuIGBbJ3ByZWZpeCcsIHZhbHVlMCwgJy0nLCB2YWx1ZTEsICctJywgdmFsdWUyLCAuLi4sIHZhbHVlOTksICdzdWZmaXgnXWApXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZVYodmFsdWVzKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvblYobFZpZXcsIHZhbHVlcyk7XG4gICAgY2hlY2tTdHlsaW5nTWFwKGtleVZhbHVlQXJyYXlTZXQsIGNsYXNzU3RyaW5nUGFyc2VyLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgdHJ1ZSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBzdHlsZSBvbiBhbiBlbGVtZW50IHdpdGggc2luZ2xlIGJvdW5kIHZhbHVlIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyAxIGludGVycG9sYXRlZCB2YWx1ZSBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHN0eWxlPVwia2V5OiB7e3YwfX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXN0eWxlTWFwSW50ZXJwb2xhdGUxKCdrZXk6ICcsIHYwLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlTWFwSW50ZXJwb2xhdGUxKHByZWZpeCwgdjAsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb24xKGxWaWV3LCBwcmVmaXgsIHYwLCBzdWZmaXgpO1xuICAgIMm1ybVzdHlsZU1hcChpbnRlcnBvbGF0ZWRWYWx1ZSk7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHN0eWxlIG9uIGFuIGVsZW1lbnQgd2l0aCAyIGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgMiBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgc3R5bGU9XCJrZXk6IHt7djB9fTsga2V5MToge3t2MX19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZU1hcEludGVycG9sYXRlMigna2V5OiAnLCB2MCwgJzsga2V5MTogJywgdjEsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTIocHJlZml4LCB2MCwgaTAsIHYxLCBzdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uMihsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBzdWZmaXgpO1xuICAgIMm1ybVzdHlsZU1hcChpbnRlcnBvbGF0ZWRWYWx1ZSk7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHN0eWxlIG9uIGFuIGVsZW1lbnQgd2l0aCAzIGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgMyBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgc3R5bGU9XCJrZXk6IHt7djB9fTsga2V5Mjoge3t2MX19OyBrZXkyOiB7e3YyfX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXN0eWxlTWFwSW50ZXJwb2xhdGUzKFxuICogICAgICdrZXk6ICcsIHYwLCAnOyBrZXkxOiAnLCB2MSwgJzsga2V5MjogJywgdjIsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTMocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb24zKGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2Miwgc3VmZml4KTtcbiAgICDJtcm1c3R5bGVNYXAoaW50ZXJwb2xhdGVkVmFsdWUpO1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBzdHlsZSBvbiBhbiBlbGVtZW50IHdpdGggNCBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDQgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHN0eWxlPVwia2V5OiB7e3YwfX07IGtleTE6IHt7djF9fTsga2V5Mjoge3t2Mn19OyBrZXkzOiB7e3YzfX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU0KFxuICogICAgICdrZXk6ICcsIHYwLCAnOyBrZXkxOiAnLCB2MSwgJzsga2V5MjogJywgdjIsICc7IGtleTM6ICcsIHYzLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU0KHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIHN1ZmZpeCkge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb240KGxWaWV3LCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBzdWZmaXgpO1xuICAgIMm1ybVzdHlsZU1hcChpbnRlcnBvbGF0ZWRWYWx1ZSk7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHN0eWxlIG9uIGFuIGVsZW1lbnQgd2l0aCA1IGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgNSBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgc3R5bGU9XCJrZXk6IHt7djB9fTsga2V5MToge3t2MX19OyBrZXkyOiB7e3YyfX07IGtleTM6IHt7djN9fTsga2V5NDoge3t2NH19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZU1hcEludGVycG9sYXRlNShcbiAqICAgICAna2V5OiAnLCB2MCwgJzsga2V5MTogJywgdjEsICc7IGtleTI6ICcsIHYyLCAnOyBrZXkzOiAnLCB2MywgJzsga2V5NDogJywgdjQsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTUocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBzdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uNShsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBzdWZmaXgpO1xuICAgIMm1ybVzdHlsZU1hcChpbnRlcnBvbGF0ZWRWYWx1ZSk7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHN0eWxlIG9uIGFuIGVsZW1lbnQgd2l0aCA2IGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgNiBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgc3R5bGU9XCJrZXk6IHt7djB9fTsga2V5MToge3t2MX19OyBrZXkyOiB7e3YyfX07IGtleTM6IHt7djN9fTsga2V5NDoge3t2NH19O1xuICogICAgICAgICAgICAga2V5NToge3t2NX19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZU1hcEludGVycG9sYXRlNihcbiAqICAgICdrZXk6ICcsIHYwLCAnOyBrZXkxOiAnLCB2MSwgJzsga2V5MjogJywgdjIsICc7IGtleTM6ICcsIHYzLCAnOyBrZXk0OiAnLCB2NCwgJzsga2V5NTogJywgdjUsXG4gKiAgICAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkzIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjQgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGk0IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjUgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU2KHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBzdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uNihsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIHN1ZmZpeCk7XG4gICAgybXJtXN0eWxlTWFwKGludGVycG9sYXRlZFZhbHVlKTtcbn1cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgc3R5bGUgb24gYW4gZWxlbWVudCB3aXRoIDcgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA3IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBzdHlsZT1cImtleToge3t2MH19OyBrZXkxOiB7e3YxfX07IGtleTI6IHt7djJ9fTsga2V5Mzoge3t2M319OyBrZXk0OiB7e3Y0fX07IGtleTU6IHt7djV9fTtcbiAqICAgICAgICAgICAgIGtleTY6IHt7djZ9fXN1ZmZpeFwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogSXRzIGNvbXBpbGVkIHJlcHJlc2VudGF0aW9uIGlzOlxuICpcbiAqIGBgYHRzXG4gKiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTcoXG4gKiAgICAna2V5OiAnLCB2MCwgJzsga2V5MTogJywgdjEsICc7IGtleTI6ICcsIHYyLCAnOyBrZXkzOiAnLCB2MywgJzsga2V5NDogJywgdjQsICc7IGtleTU6ICcsIHY1LFxuICogICAgJzsga2V5NjogJywgdjYsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTUgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTcocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2Niwgc3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjcobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBpNSwgdjYsIHN1ZmZpeCk7XG4gICAgybXJtXN0eWxlTWFwKGludGVycG9sYXRlZFZhbHVlKTtcbn1cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgc3R5bGUgb24gYW4gZWxlbWVudCB3aXRoIDggYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA4IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBzdHlsZT1cImtleToge3t2MH19OyBrZXkxOiB7e3YxfX07IGtleTI6IHt7djJ9fTsga2V5Mzoge3t2M319OyBrZXk0OiB7e3Y0fX07IGtleTU6IHt7djV9fTtcbiAqICAgICAgICAgICAgIGtleTY6IHt7djZ9fTsga2V5Nzoge3t2N319c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZU1hcEludGVycG9sYXRlOChcbiAqICAgICdrZXk6ICcsIHYwLCAnOyBrZXkxOiAnLCB2MSwgJzsga2V5MjogJywgdjIsICc7IGtleTM6ICcsIHYzLCAnOyBrZXk0OiAnLCB2NCwgJzsga2V5NTogJywgdjUsXG4gKiAgICAnOyBrZXk2OiAnLCB2NiwgJzsga2V5NzogJywgdjcsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTUgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTYgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTgocHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2NiwgaTYsIHY3LCBzdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uOChsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2NiwgaTYsIHY3LCBzdWZmaXgpO1xuICAgIMm1ybVzdHlsZU1hcChpbnRlcnBvbGF0ZWRWYWx1ZSk7XG59XG4vKipcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgc3R5bGUgb24gYW4gZWxlbWVudCB3aXRoIDkgb3IgbW9yZSBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgbnVtYmVyIG9mIGludGVycG9sYXRlZCB2YWx1ZXMgZXhjZWVkcyA4LlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXZcbiAqICBjbGFzcz1cImtleToge3t2MH19OyBrZXkxOiB7e3YxfX07IGtleTI6IHt7djJ9fTsga2V5Mzoge3t2M319OyBrZXk0OiB7e3Y0fX07IGtleTU6IHt7djV9fTtcbiAqICAgICAgICAga2V5Njoge3t2Nn19OyBrZXk3OiB7e3Y3fX07IGtleTg6IHt7djh9fTsga2V5OToge3t2OX19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZU1hcEludGVycG9sYXRlVihcbiAqICAgIFsna2V5OiAnLCB2MCwgJzsga2V5MTogJywgdjEsICc7IGtleTI6ICcsIHYyLCAnOyBrZXkzOiAnLCB2MywgJzsga2V5NDogJywgdjQsICc7IGtleTU6ICcsIHY1LFxuICogICAgICc7IGtleTY6ICcsIHY2LCAnOyBrZXk3OiAnLCB2NywgJzsga2V5ODogJywgdjgsICc7IGtleTk6ICcsIHY5LCAnc3VmZml4J10pO1xuICogYGBgXG4gKi5cbiAqIEBwYXJhbSB2YWx1ZXMgVGhlIGNvbGxlY3Rpb24gb2YgdmFsdWVzIGFuZCB0aGUgc3RyaW5ncyBpbi1iZXR3ZWVuIHRob3NlIHZhbHVlcywgYmVnaW5uaW5nIHdpdGhcbiAqIGEgc3RyaW5nIHByZWZpeCBhbmQgZW5kaW5nIHdpdGggYSBzdHJpbmcgc3VmZml4LlxuICogKGUuZy4gYFsncHJlZml4JywgdmFsdWUwLCAnOyBrZXkyOiAnLCB2YWx1ZTEsICc7IGtleTI6ICcsIHZhbHVlMiwgLi4uLCB2YWx1ZTk5LCAnc3VmZml4J11gKVxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlTWFwSW50ZXJwb2xhdGVWKHZhbHVlcykge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRWYWx1ZSA9IGludGVycG9sYXRpb25WKGxWaWV3LCB2YWx1ZXMpO1xuICAgIMm1ybVzdHlsZU1hcChpbnRlcnBvbGF0ZWRWYWx1ZSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBzdHlsZSBwcm9wZXJ0eSBvbiBhbiBlbGVtZW50IHdpdGggc2luZ2xlIGJvdW5kIHZhbHVlIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyAxIGludGVycG9sYXRlZCB2YWx1ZSBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHN0eWxlLmNvbG9yPVwicHJlZml4e3t2MH19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTEoMCwgJ3ByZWZpeCcsIHYwLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3R5bGVJbmRleCBJbmRleCBvZiBzdHlsZSB0byB1cGRhdGUuIFRoaXMgaW5kZXggdmFsdWUgcmVmZXJzIHRvIHRoZVxuICogICAgICAgIGluZGV4IG9mIHRoZSBzdHlsZSBpbiB0aGUgc3R5bGUgYmluZGluZ3MgYXJyYXkgdGhhdCB3YXMgcGFzc2VkIGludG9cbiAqICAgICAgICBgc3R5bGluZ2AuXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHZhbHVlU3VmZml4IE9wdGlvbmFsIHN1ZmZpeC4gVXNlZCB3aXRoIHNjYWxhciB2YWx1ZXMgdG8gYWRkIHVuaXQgc3VjaCBhcyBgcHhgLlxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlUHJvcEludGVycG9sYXRlMShwcm9wLCBwcmVmaXgsIHYwLCBzdWZmaXgsIHZhbHVlU3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjEobFZpZXcsIHByZWZpeCwgdjAsIHN1ZmZpeCk7XG4gICAgY2hlY2tTdHlsaW5nUHJvcGVydHkocHJvcCwgaW50ZXJwb2xhdGVkVmFsdWUsIHZhbHVlU3VmZml4LCBmYWxzZSk7XG4gICAgcmV0dXJuIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTE7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHN0eWxlIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCAyIGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgMiBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgc3R5bGUuY29sb3I9XCJwcmVmaXh7e3YwfX0te3t2MX19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTIoMCwgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3R5bGVJbmRleCBJbmRleCBvZiBzdHlsZSB0byB1cGRhdGUuIFRoaXMgaW5kZXggdmFsdWUgcmVmZXJzIHRvIHRoZVxuICogICAgICAgIGluZGV4IG9mIHRoZSBzdHlsZSBpbiB0aGUgc3R5bGUgYmluZGluZ3MgYXJyYXkgdGhhdCB3YXMgcGFzc2VkIGludG9cbiAqICAgICAgICBgc3R5bGluZ2AuXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHZhbHVlU3VmZml4IE9wdGlvbmFsIHN1ZmZpeC4gVXNlZCB3aXRoIHNjYWxhciB2YWx1ZXMgdG8gYWRkIHVuaXQgc3VjaCBhcyBgcHhgLlxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlUHJvcEludGVycG9sYXRlMihwcm9wLCBwcmVmaXgsIHYwLCBpMCwgdjEsIHN1ZmZpeCwgdmFsdWVTdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uMihsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBzdWZmaXgpO1xuICAgIGNoZWNrU3R5bGluZ1Byb3BlcnR5KHByb3AsIGludGVycG9sYXRlZFZhbHVlLCB2YWx1ZVN1ZmZpeCwgZmFsc2UpO1xuICAgIHJldHVybiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGUyO1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBzdHlsZSBwcm9wZXJ0eSBvbiBhbiBlbGVtZW50IHdpdGggMyBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDMgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHN0eWxlLmNvbG9yPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXN0eWxlUHJvcEludGVycG9sYXRlMygwLCAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzdHlsZUluZGV4IEluZGV4IG9mIHN0eWxlIHRvIHVwZGF0ZS4gVGhpcyBpbmRleCB2YWx1ZSByZWZlcnMgdG8gdGhlXG4gKiAgICAgICAgaW5kZXggb2YgdGhlIHN0eWxlIGluIHRoZSBzdHlsZSBiaW5kaW5ncyBhcnJheSB0aGF0IHdhcyBwYXNzZWQgaW50b1xuICogICAgICAgIGBzdHlsaW5nYC5cbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdmFsdWVTdWZmaXggT3B0aW9uYWwgc3VmZml4LiBVc2VkIHdpdGggc2NhbGFyIHZhbHVlcyB0byBhZGQgdW5pdCBzdWNoIGFzIGBweGAuXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGUzKHByb3AsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBzdWZmaXgsIHZhbHVlU3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjMobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBzdWZmaXgpO1xuICAgIGNoZWNrU3R5bGluZ1Byb3BlcnR5KHByb3AsIGludGVycG9sYXRlZFZhbHVlLCB2YWx1ZVN1ZmZpeCwgZmFsc2UpO1xuICAgIHJldHVybiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGUzO1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBzdHlsZSBwcm9wZXJ0eSBvbiBhbiBlbGVtZW50IHdpdGggNCBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDQgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHN0eWxlLmNvbG9yPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTQoMCwgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3R5bGVJbmRleCBJbmRleCBvZiBzdHlsZSB0byB1cGRhdGUuIFRoaXMgaW5kZXggdmFsdWUgcmVmZXJzIHRvIHRoZVxuICogICAgICAgIGluZGV4IG9mIHRoZSBzdHlsZSBpbiB0aGUgc3R5bGUgYmluZGluZ3MgYXJyYXkgdGhhdCB3YXMgcGFzc2VkIGludG9cbiAqICAgICAgICBgc3R5bGluZ2AuXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHZhbHVlU3VmZml4IE9wdGlvbmFsIHN1ZmZpeC4gVXNlZCB3aXRoIHNjYWxhciB2YWx1ZXMgdG8gYWRkIHVuaXQgc3VjaCBhcyBgcHhgLlxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlUHJvcEludGVycG9sYXRlNChwcm9wLCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBzdWZmaXgsIHZhbHVlU3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjQobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIHN1ZmZpeCk7XG4gICAgY2hlY2tTdHlsaW5nUHJvcGVydHkocHJvcCwgaW50ZXJwb2xhdGVkVmFsdWUsIHZhbHVlU3VmZml4LCBmYWxzZSk7XG4gICAgcmV0dXJuIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTQ7XG59XG4vKipcbiAqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHN0eWxlIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCA1IGJvdW5kIHZhbHVlcyBzdXJyb3VuZGVkIGJ5IHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSB2YWx1ZSBwYXNzZWQgdG8gYSBwcm9wZXJ0eSBoYXMgNSBpbnRlcnBvbGF0ZWQgdmFsdWVzIGluIGl0OlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgc3R5bGUuY29sb3I9XCJwcmVmaXh7e3YwfX0te3t2MX19LXt7djJ9fS17e3YzfX0te3t2NH19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTUoMCwgJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3R5bGVJbmRleCBJbmRleCBvZiBzdHlsZSB0byB1cGRhdGUuIFRoaXMgaW5kZXggdmFsdWUgcmVmZXJzIHRvIHRoZVxuICogICAgICAgIGluZGV4IG9mIHRoZSBzdHlsZSBpbiB0aGUgc3R5bGUgYmluZGluZ3MgYXJyYXkgdGhhdCB3YXMgcGFzc2VkIGludG9cbiAqICAgICAgICBgc3R5bGluZ2AuXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkzIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjQgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHZhbHVlU3VmZml4IE9wdGlvbmFsIHN1ZmZpeC4gVXNlZCB3aXRoIHNjYWxhciB2YWx1ZXMgdG8gYWRkIHVuaXQgc3VjaCBhcyBgcHhgLlxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlUHJvcEludGVycG9sYXRlNShwcm9wLCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIHN1ZmZpeCwgdmFsdWVTdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uNShsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBzdWZmaXgpO1xuICAgIGNoZWNrU3R5bGluZ1Byb3BlcnR5KHByb3AsIGludGVycG9sYXRlZFZhbHVlLCB2YWx1ZVN1ZmZpeCwgZmFsc2UpO1xuICAgIHJldHVybiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGU1O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBzdHlsZSBwcm9wZXJ0eSBvbiBhbiBlbGVtZW50IHdpdGggNiBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDYgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHN0eWxlLmNvbG9yPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXN0eWxlUHJvcEludGVycG9sYXRlNigwLCAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzdHlsZUluZGV4IEluZGV4IG9mIHN0eWxlIHRvIHVwZGF0ZS4gVGhpcyBpbmRleCB2YWx1ZSByZWZlcnMgdG8gdGhlXG4gKiAgICAgICAgaW5kZXggb2YgdGhlIHN0eWxlIGluIHRoZSBzdHlsZSBiaW5kaW5ncyBhcnJheSB0aGF0IHdhcyBwYXNzZWQgaW50b1xuICogICAgICAgIGBzdHlsaW5nYC5cbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdmFsdWVTdWZmaXggT3B0aW9uYWwgc3VmZml4LiBVc2VkIHdpdGggc2NhbGFyIHZhbHVlcyB0byBhZGQgdW5pdCBzdWNoIGFzIGBweGAuXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGU2KHByb3AsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBzdWZmaXgsIHZhbHVlU3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvbjYobFZpZXcsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBzdWZmaXgpO1xuICAgIGNoZWNrU3R5bGluZ1Byb3BlcnR5KHByb3AsIGludGVycG9sYXRlZFZhbHVlLCB2YWx1ZVN1ZmZpeCwgZmFsc2UpO1xuICAgIHJldHVybiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGU2O1xufVxuLyoqXG4gKlxuICogVXBkYXRlIGFuIGludGVycG9sYXRlZCBzdHlsZSBwcm9wZXJ0eSBvbiBhbiBlbGVtZW50IHdpdGggNyBib3VuZCB2YWx1ZXMgc3Vycm91bmRlZCBieSB0ZXh0LlxuICpcbiAqIFVzZWQgd2hlbiB0aGUgdmFsdWUgcGFzc2VkIHRvIGEgcHJvcGVydHkgaGFzIDcgaW50ZXJwb2xhdGVkIHZhbHVlcyBpbiBpdDpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IHN0eWxlLmNvbG9yPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX0te3t2Nn19c3VmZml4XCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBJdHMgY29tcGlsZWQgcmVwcmVzZW50YXRpb24gaXM6XG4gKlxuICogYGBgdHNcbiAqIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTcoXG4gKiAgICAwLCAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICctJywgdjYsICdzdWZmaXgnKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzdHlsZUluZGV4IEluZGV4IG9mIHN0eWxlIHRvIHVwZGF0ZS4gVGhpcyBpbmRleCB2YWx1ZSByZWZlcnMgdG8gdGhlXG4gKiAgICAgICAgaW5kZXggb2YgdGhlIHN0eWxlIGluIHRoZSBzdHlsZSBiaW5kaW5ncyBhcnJheSB0aGF0IHdhcyBwYXNzZWQgaW50b1xuICogICAgICAgIGBzdHlsaW5nYC5cbiAqIEBwYXJhbSBwcmVmaXggU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTAgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTEgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTIgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2MyBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTMgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NCBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTQgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NSBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gaTUgU3RhdGljIHZhbHVlIHVzZWQgZm9yIGNvbmNhdGVuYXRpb24gb25seS5cbiAqIEBwYXJhbSB2NiBWYWx1ZSBjaGVja2VkIGZvciBjaGFuZ2UuXG4gKiBAcGFyYW0gc3VmZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdmFsdWVTdWZmaXggT3B0aW9uYWwgc3VmZml4LiBVc2VkIHdpdGggc2NhbGFyIHZhbHVlcyB0byBhZGQgdW5pdCBzdWNoIGFzIGBweGAuXG4gKiBAcmV0dXJucyBpdHNlbGYsIHNvIHRoYXQgaXQgbWF5IGJlIGNoYWluZWQuXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGU3KHByb3AsIHByZWZpeCwgdjAsIGkwLCB2MSwgaTEsIHYyLCBpMiwgdjMsIGkzLCB2NCwgaTQsIHY1LCBpNSwgdjYsIHN1ZmZpeCwgdmFsdWVTdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uNyhsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2Niwgc3VmZml4KTtcbiAgICBjaGVja1N0eWxpbmdQcm9wZXJ0eShwcm9wLCBpbnRlcnBvbGF0ZWRWYWx1ZSwgdmFsdWVTdWZmaXgsIGZhbHNlKTtcbiAgICByZXR1cm4gybXJtXN0eWxlUHJvcEludGVycG9sYXRlNztcbn1cbi8qKlxuICpcbiAqIFVwZGF0ZSBhbiBpbnRlcnBvbGF0ZWQgc3R5bGUgcHJvcGVydHkgb24gYW4gZWxlbWVudCB3aXRoIDggYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnkgdGV4dC5cbiAqXG4gKiBVc2VkIHdoZW4gdGhlIHZhbHVlIHBhc3NlZCB0byBhIHByb3BlcnR5IGhhcyA4IGludGVycG9sYXRlZCB2YWx1ZXMgaW4gaXQ6XG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBzdHlsZS5jb2xvcj1cInByZWZpeHt7djB9fS17e3YxfX0te3t2Mn19LXt7djN9fS17e3Y0fX0te3t2NX19LXt7djZ9fS17e3Y3fX1zdWZmaXhcIj48L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXN0eWxlUHJvcEludGVycG9sYXRlOCgwLCAncHJlZml4JywgdjAsICctJywgdjEsICctJywgdjIsICctJywgdjMsICctJywgdjQsICctJywgdjUsICctJywgdjYsXG4gKiAnLScsIHY3LCAnc3VmZml4Jyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3R5bGVJbmRleCBJbmRleCBvZiBzdHlsZSB0byB1cGRhdGUuIFRoaXMgaW5kZXggdmFsdWUgcmVmZXJzIHRvIHRoZVxuICogICAgICAgIGluZGV4IG9mIHRoZSBzdHlsZSBpbiB0aGUgc3R5bGUgYmluZGluZ3MgYXJyYXkgdGhhdCB3YXMgcGFzc2VkIGludG9cbiAqICAgICAgICBgc3R5bGluZ2AuXG4gKiBAcGFyYW0gcHJlZml4IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjAgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkwIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjEgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkxIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjIgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkyIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjMgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGkzIFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjQgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGk0IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjUgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGk1IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjYgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIGk2IFN0YXRpYyB2YWx1ZSB1c2VkIGZvciBjb25jYXRlbmF0aW9uIG9ubHkuXG4gKiBAcGFyYW0gdjcgVmFsdWUgY2hlY2tlZCBmb3IgY2hhbmdlLlxuICogQHBhcmFtIHN1ZmZpeCBTdGF0aWMgdmFsdWUgdXNlZCBmb3IgY29uY2F0ZW5hdGlvbiBvbmx5LlxuICogQHBhcmFtIHZhbHVlU3VmZml4IE9wdGlvbmFsIHN1ZmZpeC4gVXNlZCB3aXRoIHNjYWxhciB2YWx1ZXMgdG8gYWRkIHVuaXQgc3VjaCBhcyBgcHhgLlxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlUHJvcEludGVycG9sYXRlOChwcm9wLCBwcmVmaXgsIHYwLCBpMCwgdjEsIGkxLCB2MiwgaTIsIHYzLCBpMywgdjQsIGk0LCB2NSwgaTUsIHY2LCBpNiwgdjcsIHN1ZmZpeCwgdmFsdWVTdWZmaXgpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgaW50ZXJwb2xhdGVkVmFsdWUgPSBpbnRlcnBvbGF0aW9uOChsVmlldywgcHJlZml4LCB2MCwgaTAsIHYxLCBpMSwgdjIsIGkyLCB2MywgaTMsIHY0LCBpNCwgdjUsIGk1LCB2NiwgaTYsIHY3LCBzdWZmaXgpO1xuICAgIGNoZWNrU3R5bGluZ1Byb3BlcnR5KHByb3AsIGludGVycG9sYXRlZFZhbHVlLCB2YWx1ZVN1ZmZpeCwgZmFsc2UpO1xuICAgIHJldHVybiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGU4O1xufVxuLyoqXG4gKiBVcGRhdGUgYW4gaW50ZXJwb2xhdGVkIHN0eWxlIHByb3BlcnR5IG9uIGFuIGVsZW1lbnQgd2l0aCA5IG9yIG1vcmUgYm91bmQgdmFsdWVzIHN1cnJvdW5kZWQgYnlcbiAqIHRleHQuXG4gKlxuICogVXNlZCB3aGVuIHRoZSBudW1iZXIgb2YgaW50ZXJwb2xhdGVkIHZhbHVlcyBleGNlZWRzIDguXG4gKlxuICogYGBgaHRtbFxuICogPGRpdlxuICogIHN0eWxlLmNvbG9yPVwicHJlZml4e3t2MH19LXt7djF9fS17e3YyfX0te3t2M319LXt7djR9fS17e3Y1fX0te3t2Nn19LXt7djd9fS17e3Y4fX0te3t2OX19c3VmZml4XCI+XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEl0cyBjb21waWxlZCByZXByZXNlbnRhdGlvbiBpczpcbiAqXG4gKiBgYGB0c1xuICogybXJtXN0eWxlUHJvcEludGVycG9sYXRlVihcbiAqICAwLCBbJ3ByZWZpeCcsIHYwLCAnLScsIHYxLCAnLScsIHYyLCAnLScsIHYzLCAnLScsIHY0LCAnLScsIHY1LCAnLScsIHY2LCAnLScsIHY3LCAnLScsIHY5LFxuICogICdzdWZmaXgnXSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gc3R5bGVJbmRleCBJbmRleCBvZiBzdHlsZSB0byB1cGRhdGUuIFRoaXMgaW5kZXggdmFsdWUgcmVmZXJzIHRvIHRoZVxuICogICAgICAgIGluZGV4IG9mIHRoZSBzdHlsZSBpbiB0aGUgc3R5bGUgYmluZGluZ3MgYXJyYXkgdGhhdCB3YXMgcGFzc2VkIGludG9cbiAqICAgICAgICBgc3R5bGluZ2AuLlxuICogQHBhcmFtIHZhbHVlcyBUaGUgY29sbGVjdGlvbiBvZiB2YWx1ZXMgYW5kIHRoZSBzdHJpbmdzIGluLWJldHdlZW4gdGhvc2UgdmFsdWVzLCBiZWdpbm5pbmcgd2l0aFxuICogYSBzdHJpbmcgcHJlZml4IGFuZCBlbmRpbmcgd2l0aCBhIHN0cmluZyBzdWZmaXguXG4gKiAoZS5nLiBgWydwcmVmaXgnLCB2YWx1ZTAsICctJywgdmFsdWUxLCAnLScsIHZhbHVlMiwgLi4uLCB2YWx1ZTk5LCAnc3VmZml4J11gKVxuICogQHBhcmFtIHZhbHVlU3VmZml4IE9wdGlvbmFsIHN1ZmZpeC4gVXNlZCB3aXRoIHNjYWxhciB2YWx1ZXMgdG8gYWRkIHVuaXQgc3VjaCBhcyBgcHhgLlxuICogQHJldHVybnMgaXRzZWxmLCBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkLlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXN0eWxlUHJvcEludGVycG9sYXRlVihwcm9wLCB2YWx1ZXMsIHZhbHVlU3VmZml4KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGludGVycG9sYXRlZFZhbHVlID0gaW50ZXJwb2xhdGlvblYobFZpZXcsIHZhbHVlcyk7XG4gICAgY2hlY2tTdHlsaW5nUHJvcGVydHkocHJvcCwgaW50ZXJwb2xhdGVkVmFsdWUsIHZhbHVlU3VmZml4LCBmYWxzZSk7XG4gICAgcmV0dXJuIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZVY7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBVcGRhdGUgYSBwcm9wZXJ0eSBvbiBhIGhvc3QgZWxlbWVudC4gT25seSBhcHBsaWVzIHRvIG5hdGl2ZSBub2RlIHByb3BlcnRpZXMsIG5vdCBpbnB1dHMuXG4gKlxuICogT3BlcmF0ZXMgb24gdGhlIGVsZW1lbnQgc2VsZWN0ZWQgYnkgaW5kZXggdmlhIHRoZSB7QGxpbmsgc2VsZWN0fSBpbnN0cnVjdGlvbi5cbiAqXG4gKiBAcGFyYW0gcHJvcE5hbWUgTmFtZSBvZiBwcm9wZXJ0eS4gQmVjYXVzZSBpdCBpcyBnb2luZyB0byBET00sIHRoaXMgaXMgbm90IHN1YmplY3QgdG9cbiAqICAgICAgICByZW5hbWluZyBhcyBwYXJ0IG9mIG1pbmlmaWNhdGlvbi5cbiAqIEBwYXJhbSB2YWx1ZSBOZXcgdmFsdWUgdG8gd3JpdGUuXG4gKiBAcGFyYW0gc2FuaXRpemVyIEFuIG9wdGlvbmFsIGZ1bmN0aW9uIHVzZWQgdG8gc2FuaXRpemUgdGhlIHZhbHVlLlxuICogQHJldHVybnMgVGhpcyBmdW5jdGlvbiByZXR1cm5zIGl0c2VsZiBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkXG4gKiAoZS5nLiBgcHJvcGVydHkoJ25hbWUnLCBjdHgubmFtZSkoJ3RpdGxlJywgY3R4LnRpdGxlKWApXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWhvc3RQcm9wZXJ0eShwcm9wTmFtZSwgdmFsdWUsIHNhbml0aXplcikge1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBuZXh0QmluZGluZ0luZGV4KCk7XG4gICAgaWYgKGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXgsIHZhbHVlKSkge1xuICAgICAgICBjb25zdCB0VmlldyA9IGdldFRWaWV3KCk7XG4gICAgICAgIGNvbnN0IHROb2RlID0gZ2V0U2VsZWN0ZWRUTm9kZSgpO1xuICAgICAgICBlbGVtZW50UHJvcGVydHlJbnRlcm5hbCh0VmlldywgdE5vZGUsIGxWaWV3LCBwcm9wTmFtZSwgdmFsdWUsIGxWaWV3W1JFTkRFUkVSXSwgc2FuaXRpemVyLCB0cnVlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmIHN0b3JlUHJvcGVydHlCaW5kaW5nTWV0YWRhdGEodFZpZXcuZGF0YSwgdE5vZGUsIHByb3BOYW1lLCBiaW5kaW5nSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm4gybXJtWhvc3RQcm9wZXJ0eTtcbn1cbi8qKlxuICogVXBkYXRlcyBhIHN5bnRoZXRpYyBob3N0IGJpbmRpbmcgKGUuZy4gYFtAZm9vXWApIG9uIGEgY29tcG9uZW50IG9yIGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGlzIGluc3RydWN0aW9uIGlzIGZvciBjb21wYXRpYmlsaXR5IHB1cnBvc2VzIGFuZCBpcyBkZXNpZ25lZCB0byBlbnN1cmUgdGhhdCBhXG4gKiBzeW50aGV0aWMgaG9zdCBiaW5kaW5nIChlLmcuIGBASG9zdEJpbmRpbmcoJ0Bmb28nKWApIHByb3Blcmx5IGdldHMgcmVuZGVyZWQgaW5cbiAqIHRoZSBjb21wb25lbnQncyByZW5kZXJlci4gTm9ybWFsbHkgYWxsIGhvc3QgYmluZGluZ3MgYXJlIGV2YWx1YXRlZCB3aXRoIHRoZSBwYXJlbnRcbiAqIGNvbXBvbmVudCdzIHJlbmRlcmVyLCBidXQsIGluIHRoZSBjYXNlIG9mIGFuaW1hdGlvbiBAdHJpZ2dlcnMsIHRoZXkgbmVlZCB0byBiZVxuICogZXZhbHVhdGVkIHdpdGggdGhlIHN1YiBjb21wb25lbnQncyByZW5kZXJlciAoYmVjYXVzZSB0aGF0J3Mgd2hlcmUgdGhlIGFuaW1hdGlvblxuICogdHJpZ2dlcnMgYXJlIGRlZmluZWQpLlxuICpcbiAqIERvIG5vdCB1c2UgdGhpcyBpbnN0cnVjdGlvbiBhcyBhIHJlcGxhY2VtZW50IGZvciBgZWxlbWVudFByb3BlcnR5YC4gVGhpcyBpbnN0cnVjdGlvblxuICogb25seSBleGlzdHMgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgVmlld0VuZ2luZSdzIGhvc3QgYmluZGluZyBiZWhhdmlvci5cbiAqXG4gKiBAcGFyYW0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIHVwZGF0ZSBpbiB0aGUgZGF0YSBhcnJheVxuICogQHBhcmFtIHByb3BOYW1lIE5hbWUgb2YgcHJvcGVydHkuIEJlY2F1c2UgaXQgaXMgZ29pbmcgdG8gRE9NLCB0aGlzIGlzIG5vdCBzdWJqZWN0IHRvXG4gKiAgICAgICAgcmVuYW1pbmcgYXMgcGFydCBvZiBtaW5pZmljYXRpb24uXG4gKiBAcGFyYW0gdmFsdWUgTmV3IHZhbHVlIHRvIHdyaXRlLlxuICogQHBhcmFtIHNhbml0aXplciBBbiBvcHRpb25hbCBmdW5jdGlvbiB1c2VkIHRvIHNhbml0aXplIHRoZSB2YWx1ZS5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1c3ludGhldGljSG9zdFByb3BlcnR5KHByb3BOYW1lLCB2YWx1ZSwgc2FuaXRpemVyKSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IG5leHRCaW5kaW5nSW5kZXgoKTtcbiAgICBpZiAoYmluZGluZ1VwZGF0ZWQobFZpZXcsIGJpbmRpbmdJbmRleCwgdmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAgICAgY29uc3QgdE5vZGUgPSBnZXRTZWxlY3RlZFROb2RlKCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnREZWYgPSBnZXRDdXJyZW50RGlyZWN0aXZlRGVmKHRWaWV3LmRhdGEpO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGxvYWRDb21wb25lbnRSZW5kZXJlcihjdXJyZW50RGVmLCB0Tm9kZSwgbFZpZXcpO1xuICAgICAgICBlbGVtZW50UHJvcGVydHlJbnRlcm5hbCh0VmlldywgdE5vZGUsIGxWaWV3LCBwcm9wTmFtZSwgdmFsdWUsIHJlbmRlcmVyLCBzYW5pdGl6ZXIsIHRydWUpO1xuICAgICAgICBuZ0Rldk1vZGUgJiYgc3RvcmVQcm9wZXJ0eUJpbmRpbmdNZXRhZGF0YSh0Vmlldy5kYXRhLCB0Tm9kZSwgcHJvcE5hbWUsIGJpbmRpbmdJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiDJtcm1c3ludGhldGljSG9zdFByb3BlcnR5O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogTk9URTogY2hhbmdlcyB0byB0aGUgYG5nSTE4bkNsb3N1cmVNb2RlYCBuYW1lIG11c3QgYmUgc3luY2VkIHdpdGggYGNvbXBpbGVyLWNsaS9zcmMvdG9vbGluZy50c2AuXG4gKi9cbmlmICh0eXBlb2YgbmdJMThuQ2xvc3VyZU1vZGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gVGhlc2UgcHJvcGVydHkgYWNjZXNzZXMgY2FuIGJlIGlnbm9yZWQgYmVjYXVzZSBuZ0kxOG5DbG9zdXJlTW9kZSB3aWxsIGJlIHNldCB0byBmYWxzZVxuICAgIC8vIHdoZW4gb3B0aW1pemluZyBjb2RlIGFuZCB0aGUgd2hvbGUgaWYgc3RhdGVtZW50IHdpbGwgYmUgZHJvcHBlZC5cbiAgICAvLyBNYWtlIHN1cmUgdG8gcmVmZXIgdG8gbmdJMThuQ2xvc3VyZU1vZGUgYXMgWyduZ0kxOG5DbG9zdXJlTW9kZSddIGZvciBjbG9zdXJlLlxuICAgIC8vIE5PVEU6IHdlIG5lZWQgdG8gaGF2ZSBpdCBpbiBJSUZFIHNvIHRoYXQgdGhlIHRyZWUtc2hha2VyIGlzIGhhcHB5LlxuICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby10b3BsZXZlbC1wcm9wZXJ0eS1hY2Nlc3NcbiAgICAgICAgX2dsb2JhbFsnbmdJMThuQ2xvc3VyZU1vZGUnXSA9XG4gICAgICAgICAgICAvLyBUT0RPKEZXLTEyNTApOiB2YWxpZGF0ZSB0aGF0IHRoaXMgYWN0dWFsbHksIHlvdSBrbm93LCB3b3Jrcy5cbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby10b3BsZXZlbC1wcm9wZXJ0eS1hY2Nlc3NcbiAgICAgICAgICAgIHR5cGVvZiBnb29nICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZ29vZy5nZXRNc2cgPT09ICdmdW5jdGlvbic7XG4gICAgfSkoKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBUSElTIENPREUgSVMgR0VORVJBVEVEIC0gRE8gTk9UIE1PRElGWS5cbmNvbnN0IHUgPSB1bmRlZmluZWQ7XG5mdW5jdGlvbiBwbHVyYWwodmFsKSB7XG4gICAgY29uc3QgbiA9IHZhbCwgaSA9IE1hdGguZmxvb3IoTWF0aC5hYnModmFsKSksIHYgPSB2YWwudG9TdHJpbmcoKS5yZXBsYWNlKC9eW14uXSpcXC4/LywgJycpLmxlbmd0aDtcbiAgICBpZiAoaSA9PT0gMSAmJiB2ID09PSAwKVxuICAgICAgICByZXR1cm4gMTtcbiAgICByZXR1cm4gNTtcbn1cbnZhciBsb2NhbGVFbiA9IFtcImVuXCIsIFtbXCJhXCIsIFwicFwiXSwgW1wiQU1cIiwgXCJQTVwiXSwgdV0sIFtbXCJBTVwiLCBcIlBNXCJdLCB1LCB1XSwgW1tcIlNcIiwgXCJNXCIsIFwiVFwiLCBcIldcIiwgXCJUXCIsIFwiRlwiLCBcIlNcIl0sIFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSwgW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sIFtcIlN1XCIsIFwiTW9cIiwgXCJUdVwiLCBcIldlXCIsIFwiVGhcIiwgXCJGclwiLCBcIlNhXCJdXSwgdSwgW1tcIkpcIiwgXCJGXCIsIFwiTVwiLCBcIkFcIiwgXCJNXCIsIFwiSlwiLCBcIkpcIiwgXCJBXCIsIFwiU1wiLCBcIk9cIiwgXCJOXCIsIFwiRFwiXSwgW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLCBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXV0sIHUsIFtbXCJCXCIsIFwiQVwiXSwgW1wiQkNcIiwgXCJBRFwiXSwgW1wiQmVmb3JlIENocmlzdFwiLCBcIkFubm8gRG9taW5pXCJdXSwgMCwgWzYsIDBdLCBbXCJNL2QveXlcIiwgXCJNTU0gZCwgeVwiLCBcIk1NTU0gZCwgeVwiLCBcIkVFRUUsIE1NTU0gZCwgeVwiXSwgW1wiaDptbSBhXCIsIFwiaDptbTpzcyBhXCIsIFwiaDptbTpzcyBhIHpcIiwgXCJoOm1tOnNzIGEgenp6elwiXSwgW1wiezF9LCB7MH1cIiwgdSwgXCJ7MX0gJ2F0JyB7MH1cIiwgdV0sIFtcIi5cIiwgXCIsXCIsIFwiO1wiLCBcIiVcIiwgXCIrXCIsIFwiLVwiLCBcIkVcIiwgXCLDl1wiLCBcIuKAsFwiLCBcIuKInlwiLCBcIk5hTlwiLCBcIjpcIl0sIFtcIiMsIyMwLiMjI1wiLCBcIiMsIyMwJVwiLCBcIsKkIywjIzAuMDBcIiwgXCIjRTBcIl0sIFwiVVNEXCIsIFwiJFwiLCBcIlVTIERvbGxhclwiLCB7fSwgXCJsdHJcIiwgcGx1cmFsXTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoaXMgY29uc3QgaXMgdXNlZCB0byBzdG9yZSB0aGUgbG9jYWxlIGRhdGEgcmVnaXN0ZXJlZCB3aXRoIGByZWdpc3RlckxvY2FsZURhdGFgXG4gKi9cbmxldCBMT0NBTEVfREFUQSA9IHt9O1xuLyoqXG4gKiBSZWdpc3RlciBsb2NhbGUgZGF0YSB0byBiZSB1c2VkIGludGVybmFsbHkgYnkgQW5ndWxhci4gU2VlIHRoZVxuICogW1wiSTE4biBndWlkZVwiXShndWlkZS9pMThuLWNvbW1vbi1mb3JtYXQtZGF0YS1sb2NhbGUpIHRvIGtub3cgaG93IHRvIGltcG9ydCBhZGRpdGlvbmFsIGxvY2FsZVxuICogZGF0YS5cbiAqXG4gKiBUaGUgc2lnbmF0dXJlIGByZWdpc3RlckxvY2FsZURhdGEoZGF0YTogYW55LCBleHRyYURhdGE/OiBhbnkpYCBpcyBkZXByZWNhdGVkIHNpbmNlIHY1LjFcbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJMb2NhbGVEYXRhKGRhdGEsIGxvY2FsZUlkLCBleHRyYURhdGEpIHtcbiAgICBpZiAodHlwZW9mIGxvY2FsZUlkICE9PSAnc3RyaW5nJykge1xuICAgICAgICBleHRyYURhdGEgPSBsb2NhbGVJZDtcbiAgICAgICAgbG9jYWxlSWQgPSBkYXRhW0xvY2FsZURhdGFJbmRleC5Mb2NhbGVJZF07XG4gICAgfVxuICAgIGxvY2FsZUlkID0gbG9jYWxlSWQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9fL2csICctJyk7XG4gICAgTE9DQUxFX0RBVEFbbG9jYWxlSWRdID0gZGF0YTtcbiAgICBpZiAoZXh0cmFEYXRhKSB7XG4gICAgICAgIExPQ0FMRV9EQVRBW2xvY2FsZUlkXVtMb2NhbGVEYXRhSW5kZXguRXh0cmFEYXRhXSA9IGV4dHJhRGF0YTtcbiAgICB9XG59XG4vKipcbiAqIEZpbmRzIHRoZSBsb2NhbGUgZGF0YSBmb3IgYSBnaXZlbiBsb2NhbGUuXG4gKlxuICogQHBhcmFtIGxvY2FsZSBUaGUgbG9jYWxlIGNvZGUuXG4gKiBAcmV0dXJucyBUaGUgbG9jYWxlIGRhdGEuXG4gKiBAc2VlIFtJbnRlcm5hdGlvbmFsaXphdGlvbiAoaTE4bikgR3VpZGVdKGh0dHBzOi8vYW5ndWxhci5pby9ndWlkZS9pMThuLW92ZXJ2aWV3KVxuICovXG5mdW5jdGlvbiBmaW5kTG9jYWxlRGF0YShsb2NhbGUpIHtcbiAgICBjb25zdCBub3JtYWxpemVkTG9jYWxlID0gbm9ybWFsaXplTG9jYWxlKGxvY2FsZSk7XG4gICAgbGV0IG1hdGNoID0gZ2V0TG9jYWxlRGF0YShub3JtYWxpemVkTG9jYWxlKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH1cbiAgICAvLyBsZXQncyB0cnkgdG8gZmluZCBhIHBhcmVudCBsb2NhbGVcbiAgICBjb25zdCBwYXJlbnRMb2NhbGUgPSBub3JtYWxpemVkTG9jYWxlLnNwbGl0KCctJylbMF07XG4gICAgbWF0Y2ggPSBnZXRMb2NhbGVEYXRhKHBhcmVudExvY2FsZSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG4gICAgaWYgKHBhcmVudExvY2FsZSA9PT0gJ2VuJykge1xuICAgICAgICByZXR1cm4gbG9jYWxlRW47XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBsb2NhbGUgZGF0YSBmb3IgdGhlIGxvY2FsZSBcIiR7bG9jYWxlfVwiLmApO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGRlZmF1bHQgY3VycmVuY3kgY29kZSBmb3IgdGhlIGdpdmVuIGxvY2FsZS5cbiAqXG4gKiBUaGUgZGVmYXVsdCBpcyBkZWZpbmVkIGFzIHRoZSBmaXJzdCBjdXJyZW5jeSB3aGljaCBpcyBzdGlsbCBpbiB1c2UuXG4gKlxuICogQHBhcmFtIGxvY2FsZSBUaGUgY29kZSBvZiB0aGUgbG9jYWxlIHdob3NlIGN1cnJlbmN5IGNvZGUgd2Ugd2FudC5cbiAqIEByZXR1cm5zIFRoZSBjb2RlIG9mIHRoZSBkZWZhdWx0IGN1cnJlbmN5IGZvciB0aGUgZ2l2ZW4gbG9jYWxlLlxuICpcbiAqL1xuZnVuY3Rpb24gZ2V0TG9jYWxlQ3VycmVuY3lDb2RlKGxvY2FsZSkge1xuICAgIGNvbnN0IGRhdGEgPSBmaW5kTG9jYWxlRGF0YShsb2NhbGUpO1xuICAgIHJldHVybiBkYXRhW0xvY2FsZURhdGFJbmRleC5DdXJyZW5jeUNvZGVdIHx8IG51bGw7XG59XG4vKipcbiAqIFJldHJpZXZlcyB0aGUgcGx1cmFsIGZ1bmN0aW9uIHVzZWQgYnkgSUNVIGV4cHJlc3Npb25zIHRvIGRldGVybWluZSB0aGUgcGx1cmFsIGNhc2UgdG8gdXNlXG4gKiBmb3IgYSBnaXZlbiBsb2NhbGUuXG4gKiBAcGFyYW0gbG9jYWxlIEEgbG9jYWxlIGNvZGUgZm9yIHRoZSBsb2NhbGUgZm9ybWF0IHJ1bGVzIHRvIHVzZS5cbiAqIEByZXR1cm5zIFRoZSBwbHVyYWwgZnVuY3Rpb24gZm9yIHRoZSBsb2NhbGUuXG4gKiBAc2VlIGBOZ1BsdXJhbGBcbiAqIEBzZWUgW0ludGVybmF0aW9uYWxpemF0aW9uIChpMThuKSBHdWlkZV0oaHR0cHM6Ly9hbmd1bGFyLmlvL2d1aWRlL2kxOG4tb3ZlcnZpZXcpXG4gKi9cbmZ1bmN0aW9uIGdldExvY2FsZVBsdXJhbENhc2UobG9jYWxlKSB7XG4gICAgY29uc3QgZGF0YSA9IGZpbmRMb2NhbGVEYXRhKGxvY2FsZSk7XG4gICAgcmV0dXJuIGRhdGFbTG9jYWxlRGF0YUluZGV4LlBsdXJhbENhc2VdO1xufVxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBnaXZlbiBgbm9ybWFsaXplZExvY2FsZWAgZnJvbSBgTE9DQUxFX0RBVEFgXG4gKiBvciBmcm9tIHRoZSBnbG9iYWwgYG5nLmNvbW1vbi5sb2NhbGVgLlxuICovXG5mdW5jdGlvbiBnZXRMb2NhbGVEYXRhKG5vcm1hbGl6ZWRMb2NhbGUpIHtcbiAgICBpZiAoIShub3JtYWxpemVkTG9jYWxlIGluIExPQ0FMRV9EQVRBKSkge1xuICAgICAgICBMT0NBTEVfREFUQVtub3JtYWxpemVkTG9jYWxlXSA9IF9nbG9iYWwubmcgJiYgX2dsb2JhbC5uZy5jb21tb24gJiYgX2dsb2JhbC5uZy5jb21tb24ubG9jYWxlcyAmJlxuICAgICAgICAgICAgX2dsb2JhbC5uZy5jb21tb24ubG9jYWxlc1tub3JtYWxpemVkTG9jYWxlXTtcbiAgICB9XG4gICAgcmV0dXJuIExPQ0FMRV9EQVRBW25vcm1hbGl6ZWRMb2NhbGVdO1xufVxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gcmVtb3ZlIGFsbCB0aGUgbG9jYWxlIGRhdGEgZnJvbSBgTE9DQUxFX0RBVEFgLlxuICovXG5mdW5jdGlvbiB1bnJlZ2lzdGVyQWxsTG9jYWxlRGF0YSgpIHtcbiAgICBMT0NBTEVfREFUQSA9IHt9O1xufVxuLyoqXG4gKiBJbmRleCBvZiBlYWNoIHR5cGUgb2YgbG9jYWxlIGRhdGEgZnJvbSB0aGUgbG9jYWxlIGRhdGEgYXJyYXlcbiAqL1xudmFyIExvY2FsZURhdGFJbmRleDtcbihmdW5jdGlvbiAoTG9jYWxlRGF0YUluZGV4KSB7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIkxvY2FsZUlkXCJdID0gMF0gPSBcIkxvY2FsZUlkXCI7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIkRheVBlcmlvZHNGb3JtYXRcIl0gPSAxXSA9IFwiRGF5UGVyaW9kc0Zvcm1hdFwiO1xuICAgIExvY2FsZURhdGFJbmRleFtMb2NhbGVEYXRhSW5kZXhbXCJEYXlQZXJpb2RzU3RhbmRhbG9uZVwiXSA9IDJdID0gXCJEYXlQZXJpb2RzU3RhbmRhbG9uZVwiO1xuICAgIExvY2FsZURhdGFJbmRleFtMb2NhbGVEYXRhSW5kZXhbXCJEYXlzRm9ybWF0XCJdID0gM10gPSBcIkRheXNGb3JtYXRcIjtcbiAgICBMb2NhbGVEYXRhSW5kZXhbTG9jYWxlRGF0YUluZGV4W1wiRGF5c1N0YW5kYWxvbmVcIl0gPSA0XSA9IFwiRGF5c1N0YW5kYWxvbmVcIjtcbiAgICBMb2NhbGVEYXRhSW5kZXhbTG9jYWxlRGF0YUluZGV4W1wiTW9udGhzRm9ybWF0XCJdID0gNV0gPSBcIk1vbnRoc0Zvcm1hdFwiO1xuICAgIExvY2FsZURhdGFJbmRleFtMb2NhbGVEYXRhSW5kZXhbXCJNb250aHNTdGFuZGFsb25lXCJdID0gNl0gPSBcIk1vbnRoc1N0YW5kYWxvbmVcIjtcbiAgICBMb2NhbGVEYXRhSW5kZXhbTG9jYWxlRGF0YUluZGV4W1wiRXJhc1wiXSA9IDddID0gXCJFcmFzXCI7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIkZpcnN0RGF5T2ZXZWVrXCJdID0gOF0gPSBcIkZpcnN0RGF5T2ZXZWVrXCI7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIldlZWtlbmRSYW5nZVwiXSA9IDldID0gXCJXZWVrZW5kUmFuZ2VcIjtcbiAgICBMb2NhbGVEYXRhSW5kZXhbTG9jYWxlRGF0YUluZGV4W1wiRGF0ZUZvcm1hdFwiXSA9IDEwXSA9IFwiRGF0ZUZvcm1hdFwiO1xuICAgIExvY2FsZURhdGFJbmRleFtMb2NhbGVEYXRhSW5kZXhbXCJUaW1lRm9ybWF0XCJdID0gMTFdID0gXCJUaW1lRm9ybWF0XCI7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIkRhdGVUaW1lRm9ybWF0XCJdID0gMTJdID0gXCJEYXRlVGltZUZvcm1hdFwiO1xuICAgIExvY2FsZURhdGFJbmRleFtMb2NhbGVEYXRhSW5kZXhbXCJOdW1iZXJTeW1ib2xzXCJdID0gMTNdID0gXCJOdW1iZXJTeW1ib2xzXCI7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIk51bWJlckZvcm1hdHNcIl0gPSAxNF0gPSBcIk51bWJlckZvcm1hdHNcIjtcbiAgICBMb2NhbGVEYXRhSW5kZXhbTG9jYWxlRGF0YUluZGV4W1wiQ3VycmVuY3lDb2RlXCJdID0gMTVdID0gXCJDdXJyZW5jeUNvZGVcIjtcbiAgICBMb2NhbGVEYXRhSW5kZXhbTG9jYWxlRGF0YUluZGV4W1wiQ3VycmVuY3lTeW1ib2xcIl0gPSAxNl0gPSBcIkN1cnJlbmN5U3ltYm9sXCI7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIkN1cnJlbmN5TmFtZVwiXSA9IDE3XSA9IFwiQ3VycmVuY3lOYW1lXCI7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIkN1cnJlbmNpZXNcIl0gPSAxOF0gPSBcIkN1cnJlbmNpZXNcIjtcbiAgICBMb2NhbGVEYXRhSW5kZXhbTG9jYWxlRGF0YUluZGV4W1wiRGlyZWN0aW9uYWxpdHlcIl0gPSAxOV0gPSBcIkRpcmVjdGlvbmFsaXR5XCI7XG4gICAgTG9jYWxlRGF0YUluZGV4W0xvY2FsZURhdGFJbmRleFtcIlBsdXJhbENhc2VcIl0gPSAyMF0gPSBcIlBsdXJhbENhc2VcIjtcbiAgICBMb2NhbGVEYXRhSW5kZXhbTG9jYWxlRGF0YUluZGV4W1wiRXh0cmFEYXRhXCJdID0gMjFdID0gXCJFeHRyYURhdGFcIjtcbn0pKExvY2FsZURhdGFJbmRleCB8fCAoTG9jYWxlRGF0YUluZGV4ID0ge30pKTtcbi8qKlxuICogUmV0dXJucyB0aGUgY2Fub25pY2FsIGZvcm0gb2YgYSBsb2NhbGUgbmFtZSAtIGxvd2VyY2FzZSB3aXRoIGBfYCByZXBsYWNlZCB3aXRoIGAtYC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTG9jYWxlKGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9fL2csICctJyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgcGx1cmFsTWFwcGluZyA9IFsnemVybycsICdvbmUnLCAndHdvJywgJ2ZldycsICdtYW55J107XG4vKipcbiAqIFJldHVybnMgdGhlIHBsdXJhbCBjYXNlIGJhc2VkIG9uIHRoZSBsb2NhbGVcbiAqL1xuZnVuY3Rpb24gZ2V0UGx1cmFsQ2FzZSh2YWx1ZSwgbG9jYWxlKSB7XG4gICAgY29uc3QgcGx1cmFsID0gZ2V0TG9jYWxlUGx1cmFsQ2FzZShsb2NhbGUpKHBhcnNlSW50KHZhbHVlLCAxMCkpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHBsdXJhbE1hcHBpbmdbcGx1cmFsXTtcbiAgICByZXR1cm4gKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSA/IHJlc3VsdCA6ICdvdGhlcic7XG59XG4vKipcbiAqIFRoZSBsb2NhbGUgaWQgdGhhdCB0aGUgYXBwbGljYXRpb24gaXMgdXNpbmcgYnkgZGVmYXVsdCAoZm9yIHRyYW5zbGF0aW9ucyBhbmQgSUNVIGV4cHJlc3Npb25zKS5cbiAqL1xuY29uc3QgREVGQVVMVF9MT0NBTEVfSUQgPSAnZW4tVVMnO1xuLyoqXG4gKiBVU0QgY3VycmVuY3kgY29kZSB0aGF0IHRoZSBhcHBsaWNhdGlvbiB1c2VzIGJ5IGRlZmF1bHQgZm9yIEN1cnJlbmN5UGlwZSB3aGVuIG5vXG4gKiBERUZBVUxUX0NVUlJFTkNZX0NPREUgaXMgcHJvdmlkZWQuXG4gKi9cbmNvbnN0IFVTRF9DVVJSRU5DWV9DT0RFID0gJ1VTRCc7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBNYXJrcyB0aGF0IHRoZSBuZXh0IHN0cmluZyBpcyBhbiBlbGVtZW50IG5hbWUuXG4gKlxuICogU2VlIGBJMThuTXV0YXRlT3BDb2Rlc2AgZG9jdW1lbnRhdGlvbi5cbiAqL1xuY29uc3QgRUxFTUVOVF9NQVJLRVIgPSB7XG4gICAgbWFya2VyOiAnZWxlbWVudCdcbn07XG4vKipcbiAqIE1hcmtzIHRoYXQgdGhlIG5leHQgc3RyaW5nIGlzIGNvbW1lbnQgdGV4dCBuZWVkIGZvciBJQ1UuXG4gKlxuICogU2VlIGBJMThuTXV0YXRlT3BDb2Rlc2AgZG9jdW1lbnRhdGlvbi5cbiAqL1xuY29uc3QgSUNVX01BUktFUiA9IHtcbiAgICBtYXJrZXI6ICdJQ1UnXG59O1xuLyoqXG4gKiBTZWUgYEkxOG5DcmVhdGVPcENvZGVzYFxuICovXG52YXIgSTE4bkNyZWF0ZU9wQ29kZTtcbihmdW5jdGlvbiAoSTE4bkNyZWF0ZU9wQ29kZSkge1xuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBiaXRzIHRvIHNoaWZ0IGluZGV4IHNvIHRoYXQgaXQgY2FuIGJlIGNvbWJpbmVkIHdpdGggdGhlIGBBUFBFTkRfRUFHRVJMWWAgYW5kXG4gICAgICogYENPTU1FTlRgLlxuICAgICAqL1xuICAgIEkxOG5DcmVhdGVPcENvZGVbSTE4bkNyZWF0ZU9wQ29kZVtcIlNISUZUXCJdID0gMl0gPSBcIlNISUZUXCI7XG4gICAgLyoqXG4gICAgICogU2hvdWxkIHRoZSBub2RlIGJlIGFwcGVuZGVkIHRvIHBhcmVudCBpbWVkZGl0YXRseSBhZnRlciBjcmVhdGlvbi5cbiAgICAgKi9cbiAgICBJMThuQ3JlYXRlT3BDb2RlW0kxOG5DcmVhdGVPcENvZGVbXCJBUFBFTkRfRUFHRVJMWVwiXSA9IDFdID0gXCJBUFBFTkRfRUFHRVJMWVwiO1xuICAgIC8qKlxuICAgICAqIElmIHNldCB0aGUgbm9kZSBzaG91bGQgYmUgY29tbWVudCAocmF0aGVyIHRoYW4gYSB0ZXh0KSBub2RlLlxuICAgICAqL1xuICAgIEkxOG5DcmVhdGVPcENvZGVbSTE4bkNyZWF0ZU9wQ29kZVtcIkNPTU1FTlRcIl0gPSAyXSA9IFwiQ09NTUVOVFwiO1xufSkoSTE4bkNyZWF0ZU9wQ29kZSB8fCAoSTE4bkNyZWF0ZU9wQ29kZSA9IHt9KSk7XG4vLyBOb3RlOiBUaGlzIGhhY2sgaXMgbmVjZXNzYXJ5IHNvIHdlIGRvbid0IGVycm9uZW91c2x5IGdldCBhIGNpcmN1bGFyIGRlcGVuZGVuY3lcbi8vIGZhaWx1cmUgYmFzZWQgb24gdHlwZXMuXG5jb25zdCB1bnVzZWRWYWx1ZUV4cG9ydFRvUGxhY2F0ZUFqZCQyID0gMTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoZSBsb2NhbGUgaWQgdGhhdCB0aGUgYXBwbGljYXRpb24gaXMgY3VycmVudGx5IHVzaW5nIChmb3IgdHJhbnNsYXRpb25zIGFuZCBJQ1UgZXhwcmVzc2lvbnMpLlxuICogVGhpcyBpcyB0aGUgaXZ5IHZlcnNpb24gb2YgYExPQ0FMRV9JRGAgdGhhdCB3YXMgZGVmaW5lZCBhcyBhbiBpbmplY3Rpb24gdG9rZW4gZm9yIHRoZSB2aWV3IGVuZ2luZVxuICogYnV0IGlzIG5vdyBkZWZpbmVkIGFzIGEgZ2xvYmFsIHZhbHVlLlxuICovXG5sZXQgTE9DQUxFX0lEJDEgPSBERUZBVUxUX0xPQ0FMRV9JRDtcbi8qKlxuICogU2V0cyB0aGUgbG9jYWxlIGlkIHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0cmFuc2xhdGlvbnMgYW5kIElDVSBleHByZXNzaW9ucy5cbiAqIFRoaXMgaXMgdGhlIGl2eSB2ZXJzaW9uIG9mIGBMT0NBTEVfSURgIHRoYXQgd2FzIGRlZmluZWQgYXMgYW4gaW5qZWN0aW9uIHRva2VuIGZvciB0aGUgdmlldyBlbmdpbmVcbiAqIGJ1dCBpcyBub3cgZGVmaW5lZCBhcyBhIGdsb2JhbCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gbG9jYWxlSWRcbiAqL1xuZnVuY3Rpb24gc2V0TG9jYWxlSWQobG9jYWxlSWQpIHtcbiAgICBhc3NlcnREZWZpbmVkKGxvY2FsZUlkLCBgRXhwZWN0ZWQgbG9jYWxlSWQgdG8gYmUgZGVmaW5lZGApO1xuICAgIGlmICh0eXBlb2YgbG9jYWxlSWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIExPQ0FMRV9JRCQxID0gbG9jYWxlSWQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9fL2csICctJyk7XG4gICAgfVxufVxuLyoqXG4gKiBHZXRzIHRoZSBsb2NhbGUgaWQgdGhhdCB3aWxsIGJlIHVzZWQgZm9yIHRyYW5zbGF0aW9ucyBhbmQgSUNVIGV4cHJlc3Npb25zLlxuICogVGhpcyBpcyB0aGUgaXZ5IHZlcnNpb24gb2YgYExPQ0FMRV9JRGAgdGhhdCB3YXMgZGVmaW5lZCBhcyBhbiBpbmplY3Rpb24gdG9rZW4gZm9yIHRoZSB2aWV3IGVuZ2luZVxuICogYnV0IGlzIG5vdyBkZWZpbmVkIGFzIGEgZ2xvYmFsIHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRMb2NhbGVJZCgpIHtcbiAgICByZXR1cm4gTE9DQUxFX0lEJDE7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBGaW5kIGEgbm9kZSBpbiBmcm9udCBvZiB3aGljaCBgY3VycmVudFROb2RlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgKHRha2VzIGkxOG4gaW50byBhY2NvdW50KS5cbiAqXG4gKiBUaGlzIG1ldGhvZCBkZXRlcm1pbmVzIHRoZSBgUk5vZGVgIGluIGZyb250IG9mIHdoaWNoIHdlIHNob3VsZCBpbnNlcnQgdGhlIGBjdXJyZW50Uk5vZGVgLiBUaGlzXG4gKiB0YWtlcyBgVE5vZGUuaW5zZXJ0QmVmb3JlSW5kZXhgIGludG8gYWNjb3VudC5cbiAqXG4gKiBAcGFyYW0gcGFyZW50VE5vZGUgcGFyZW50IGBUTm9kZWBcbiAqIEBwYXJhbSBjdXJyZW50VE5vZGUgY3VycmVudCBgVE5vZGVgIChUaGUgbm9kZSB3aGljaCB3ZSB3b3VsZCBsaWtlIHRvIGluc2VydCBpbnRvIHRoZSBET00pXG4gKiBAcGFyYW0gbFZpZXcgY3VycmVudCBgTFZpZXdgXG4gKi9cbmZ1bmN0aW9uIGdldEluc2VydEluRnJvbnRPZlJOb2RlV2l0aEkxOG4ocGFyZW50VE5vZGUsIGN1cnJlbnRUTm9kZSwgbFZpZXcpIHtcbiAgICBjb25zdCB0Tm9kZUluc2VydEJlZm9yZUluZGV4ID0gY3VycmVudFROb2RlLmluc2VydEJlZm9yZUluZGV4O1xuICAgIGNvbnN0IGluc2VydEJlZm9yZUluZGV4ID0gQXJyYXkuaXNBcnJheSh0Tm9kZUluc2VydEJlZm9yZUluZGV4KSA/IHROb2RlSW5zZXJ0QmVmb3JlSW5kZXhbMF0gOiB0Tm9kZUluc2VydEJlZm9yZUluZGV4O1xuICAgIGlmIChpbnNlcnRCZWZvcmVJbmRleCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZ2V0SW5zZXJ0SW5Gcm9udE9mUk5vZGVXaXRoTm9JMThuKHBhcmVudFROb2RlLCBjdXJyZW50VE5vZGUsIGxWaWV3KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXcsIGluc2VydEJlZm9yZUluZGV4KTtcbiAgICAgICAgcmV0dXJuIHVud3JhcFJOb2RlKGxWaWV3W2luc2VydEJlZm9yZUluZGV4XSk7XG4gICAgfVxufVxuLyoqXG4gKiBQcm9jZXNzIGBUTm9kZS5pbnNlcnRCZWZvcmVJbmRleGAgYnkgYWRkaW5nIGkxOG4gdGV4dCBub2Rlcy5cbiAqXG4gKiBTZWUgYFROb2RlLmluc2VydEJlZm9yZUluZGV4YFxuICovXG5mdW5jdGlvbiBwcm9jZXNzSTE4bkluc2VydEJlZm9yZShyZW5kZXJlciwgY2hpbGRUTm9kZSwgbFZpZXcsIGNoaWxkUk5vZGUsIHBhcmVudFJFbGVtZW50KSB7XG4gICAgY29uc3QgdE5vZGVJbnNlcnRCZWZvcmVJbmRleCA9IGNoaWxkVE5vZGUuaW5zZXJ0QmVmb3JlSW5kZXg7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodE5vZGVJbnNlcnRCZWZvcmVJbmRleCkpIHtcbiAgICAgICAgLy8gQW4gYXJyYXkgaW5kaWNhdGVzIHRoYXQgdGhlcmUgYXJlIGkxOG4gbm9kZXMgdGhhdCBuZWVkIHRvIGJlIGFkZGVkIGFzIGNoaWxkcmVuIG9mIHRoaXNcbiAgICAgICAgLy8gYGNoaWxkUk5vZGVgLiBUaGVzZSBpMThuIG5vZGVzIHdlcmUgY3JlYXRlZCBiZWZvcmUgdGhpcyBgY2hpbGRSTm9kZWAgd2FzIGF2YWlsYWJsZSBhbmQgc29cbiAgICAgICAgLy8gb25seSBub3cgY2FuIGJlIGFkZGVkLiBUaGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgYXJyYXkgaXMgdGhlIG5vcm1hbCBpbmRleCB3aGVyZSB3ZSBzaG91bGRcbiAgICAgICAgLy8gaW5zZXJ0IHRoZSBgY2hpbGRSTm9kZWAuIEFkZGl0aW9uYWwgZWxlbWVudHMgYXJlIHRoZSBleHRyYSBub2RlcyB0byBiZSBhZGRlZCBhcyBjaGlsZHJlbiBvZlxuICAgICAgICAvLyBgY2hpbGRSTm9kZWAuXG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREb21Ob2RlKGNoaWxkUk5vZGUpO1xuICAgICAgICBsZXQgaTE4blBhcmVudCA9IGNoaWxkUk5vZGU7XG4gICAgICAgIGxldCBhbmNob3JSTm9kZSA9IG51bGw7XG4gICAgICAgIGlmICghKGNoaWxkVE5vZGUudHlwZSAmIDMgLyogQW55Uk5vZGUgKi8pKSB7XG4gICAgICAgICAgICBhbmNob3JSTm9kZSA9IGkxOG5QYXJlbnQ7XG4gICAgICAgICAgICBpMThuUGFyZW50ID0gcGFyZW50UkVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGkxOG5QYXJlbnQgIT09IG51bGwgJiYgKGNoaWxkVE5vZGUuZmxhZ3MgJiAyIC8qIGlzQ29tcG9uZW50SG9zdCAqLykgPT09IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdE5vZGVJbnNlcnRCZWZvcmVJbmRleC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gYHVud3JhcFJOb2RlYCBiZWNhdXNlIGFsbCBvZiB0aGUgaW5kZXhlcyBwb2ludCB0byBpMThuIHRleHQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gc2VlIGBhc3NlcnREb21Ob2RlYCBiZWxvdy5cbiAgICAgICAgICAgICAgICBjb25zdCBpMThuQ2hpbGQgPSBsVmlld1t0Tm9kZUluc2VydEJlZm9yZUluZGV4W2ldXTtcbiAgICAgICAgICAgICAgICBuYXRpdmVJbnNlcnRCZWZvcmUocmVuZGVyZXIsIGkxOG5QYXJlbnQsIGkxOG5DaGlsZCwgYW5jaG9yUk5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEFkZCBgdE5vZGVgIHRvIGBwcmV2aW91c1ROb2Rlc2AgbGlzdCBhbmQgdXBkYXRlIHJlbGV2YW50IGBUTm9kZWBzIGluIGBwcmV2aW91c1ROb2Rlc2AgbGlzdFxuICogYHROb2RlLmluc2VydEJlZm9yZUluZGV4YC5cbiAqXG4gKiBUaGluZ3MgdG8ga2VlcCBpbiBtaW5kOlxuICogMS4gQWxsIGkxOG4gdGV4dCBub2RlcyBhcmUgZW5jb2RlZCBhcyBgVE5vZGVUeXBlLkVsZW1lbnRgIGFuZCBhcmUgY3JlYXRlZCBlYWdlcmx5IGJ5IHRoZVxuICogICAgYMm1ybVpMThuU3RhcnRgIGluc3RydWN0aW9uLlxuICogMi4gQWxsIGBUTm9kZVR5cGUuUGxhY2Vob2xkZXJgIGBUTm9kZXNgIGFyZSBlbGVtZW50cyB3aGljaCB3aWxsIGJlIGNyZWF0ZWQgbGF0ZXIgYnlcbiAqICAgIGDJtcm1ZWxlbWVudFN0YXJ0YCBpbnN0cnVjdGlvbi5cbiAqIDMuIGDJtcm1ZWxlbWVudFN0YXJ0YCBpbnN0cnVjdGlvbiB3aWxsIGNyZWF0ZSBgVE5vZGVgcyBpbiB0aGUgYXNjZW5kaW5nIGBUTm9kZS5pbmRleGAgb3JkZXIuIChTbyBhXG4gKiAgICBzbWFsbGVyIGluZGV4IGBUTm9kZWAgaXMgZ3VhcmFudGVlZCB0byBiZSBjcmVhdGVkIGJlZm9yZSBhIGxhcmdlciBvbmUpXG4gKlxuICogV2UgdXNlIHRoZSBhYm92ZSB0aHJlZSBpbnZhcmlhbnRzIHRvIGRldGVybWluZSBgVE5vZGUuaW5zZXJ0QmVmb3JlSW5kZXhgLlxuICpcbiAqIEluIGFuIGlkZWFsIHdvcmxkIGBUTm9kZS5pbnNlcnRCZWZvcmVJbmRleGAgd291bGQgYWx3YXlzIGJlIGBUTm9kZS5uZXh0LmluZGV4YC4gSG93ZXZlcixcbiAqIHRoaXMgd2lsbCBub3Qgd29yayBiZWNhdXNlIGBUTm9kZS5uZXh0LmluZGV4YCBtYXkgYmUgbGFyZ2VyIHRoYW4gYFROb2RlLmluZGV4YCB3aGljaCBtZWFucyB0aGF0XG4gKiB0aGUgbmV4dCBub2RlIGlzIG5vdCB5ZXQgY3JlYXRlZCBhbmQgdGhlcmVmb3JlIHdlIGNhbid0IGluc2VydCBpbiBmcm9udCBvZiBpdC5cbiAqXG4gKiBSdWxlMTogYFROb2RlLmluc2VydEJlZm9yZUluZGV4ID0gbnVsbGAgaWYgYFROb2RlLm5leHQgPT09IG51bGxgIChJbml0aWFsIGNvbmRpdGlvbiwgYXMgd2UgZG9uJ3RcbiAqICAgICAgICBrbm93IGlmIHRoZXJlIHdpbGwgYmUgZnVydGhlciBgVE5vZGVgcyBpbnNlcnRlZCBhZnRlci4pXG4gKiBSdWxlMjogSWYgYHByZXZpb3VzVE5vZGVgIGlzIGNyZWF0ZWQgYWZ0ZXIgdGhlIGB0Tm9kZWAgYmVpbmcgaW5zZXJ0ZWQsIHRoZW5cbiAqICAgICAgICBgcHJldmlvdXNUTm9kZS5pbnNlcnRCZWZvcmVOb2RlID0gdE5vZGUuaW5kZXhgIChTbyB3aGVuIGEgbmV3IGB0Tm9kZWAgaXMgYWRkZWQgd2UgY2hlY2tcbiAqICAgICAgICBwcmV2aW91cyB0byBzZWUgaWYgd2UgY2FuIHVwZGF0ZSBpdHMgYGluc2VydEJlZm9yZVROb2RlYClcbiAqXG4gKiBTZWUgYFROb2RlLmluc2VydEJlZm9yZUluZGV4YCBmb3IgbW9yZSBjb250ZXh0LlxuICpcbiAqIEBwYXJhbSBwcmV2aW91c1ROb2RlcyBBIGxpc3Qgb2YgcHJldmlvdXMgVE5vZGVzIHNvIHRoYXQgd2UgY2FuIGVhc2lseSB0cmF2ZXJzZSBgVE5vZGVgcyBpblxuICogICAgIHJldmVyc2Ugb3JkZXIuIChJZiBgVE5vZGVgIHdvdWxkIGhhdmUgYHByZXZpb3VzYCB0aGlzIHdvdWxkIG5vdCBiZSBuZWNlc3NhcnkuKVxuICogQHBhcmFtIG5ld1ROb2RlIEEgVE5vZGUgdG8gYWRkIHRvIHRoZSBgcHJldmlvdXNUTm9kZXNgIGxpc3QuXG4gKi9cbmZ1bmN0aW9uIGFkZFROb2RlQW5kVXBkYXRlSW5zZXJ0QmVmb3JlSW5kZXgocHJldmlvdXNUTm9kZXMsIG5ld1ROb2RlKSB7XG4gICAgLy8gU3RhcnQgd2l0aCBSdWxlMVxuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnRFcXVhbChuZXdUTm9kZS5pbnNlcnRCZWZvcmVJbmRleCwgbnVsbCwgJ1dlIGV4cGVjdCB0aGF0IGluc2VydEJlZm9yZUluZGV4IGlzIG5vdCBzZXQnKTtcbiAgICBwcmV2aW91c1ROb2Rlcy5wdXNoKG5ld1ROb2RlKTtcbiAgICBpZiAocHJldmlvdXNUTm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKGxldCBpID0gcHJldmlvdXNUTm9kZXMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVE5vZGUgPSBwcmV2aW91c1ROb2Rlc1tpXTtcbiAgICAgICAgICAgIC8vIFRleHQgbm9kZXMgYXJlIGNyZWF0ZWQgZWFnZXJseSBhbmQgc28gdGhleSBkb24ndCBuZWVkIHRoZWlyIGBpbmRleEJlZm9yZUluZGV4YCB1cGRhdGVkLlxuICAgICAgICAgICAgLy8gSXQgaXMgc2FmZSB0byBpZ25vcmUgdGhlbS5cbiAgICAgICAgICAgIGlmICghaXNJMThuVGV4dChleGlzdGluZ1ROb2RlKSkge1xuICAgICAgICAgICAgICAgIGlmIChpc05ld1ROb2RlQ3JlYXRlZEJlZm9yZShleGlzdGluZ1ROb2RlLCBuZXdUTm9kZSkgJiZcbiAgICAgICAgICAgICAgICAgICAgZ2V0SW5zZXJ0QmVmb3JlSW5kZXgoZXhpc3RpbmdUTm9kZSkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgaXQgd2FzIGNyZWF0ZWQgYmVmb3JlIHVzIGluIHRpbWUsIChhbmQgaXQgZG9lcyBub3QgeWV0IGhhdmUgYGluc2VydEJlZm9yZUluZGV4YClcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlbiBhZGQgdGhlIGBpbnNlcnRCZWZvcmVJbmRleGAuXG4gICAgICAgICAgICAgICAgICAgIHNldEluc2VydEJlZm9yZUluZGV4KGV4aXN0aW5nVE5vZGUsIG5ld1ROb2RlLmluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBpc0kxOG5UZXh0KHROb2RlKSB7XG4gICAgcmV0dXJuICEodE5vZGUudHlwZSAmIDY0IC8qIFBsYWNlaG9sZGVyICovKTtcbn1cbmZ1bmN0aW9uIGlzTmV3VE5vZGVDcmVhdGVkQmVmb3JlKGV4aXN0aW5nVE5vZGUsIG5ld1ROb2RlKSB7XG4gICAgcmV0dXJuIGlzSTE4blRleHQobmV3VE5vZGUpIHx8IGV4aXN0aW5nVE5vZGUuaW5kZXggPiBuZXdUTm9kZS5pbmRleDtcbn1cbmZ1bmN0aW9uIGdldEluc2VydEJlZm9yZUluZGV4KHROb2RlKSB7XG4gICAgY29uc3QgaW5kZXggPSB0Tm9kZS5pbnNlcnRCZWZvcmVJbmRleDtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShpbmRleCkgPyBpbmRleFswXSA6IGluZGV4O1xufVxuZnVuY3Rpb24gc2V0SW5zZXJ0QmVmb3JlSW5kZXgodE5vZGUsIHZhbHVlKSB7XG4gICAgY29uc3QgaW5kZXggPSB0Tm9kZS5pbnNlcnRCZWZvcmVJbmRleDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpbmRleCkpIHtcbiAgICAgICAgLy8gQXJyYXkgaXMgc3RvcmVkIGlmIHdlIGhhdmUgdG8gaW5zZXJ0IGNoaWxkIG5vZGVzLiBTZWUgYFROb2RlLmluc2VydEJlZm9yZUluZGV4YFxuICAgICAgICBpbmRleFswXSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0STE4bkhhbmRsaW5nKGdldEluc2VydEluRnJvbnRPZlJOb2RlV2l0aEkxOG4sIHByb2Nlc3NJMThuSW5zZXJ0QmVmb3JlKTtcbiAgICAgICAgdE5vZGUuaW5zZXJ0QmVmb3JlSW5kZXggPSB2YWx1ZTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBSZXRyaWV2ZSBgVEljdWAgYXQgYSBnaXZlbiBgaW5kZXhgLlxuICpcbiAqIFRoZSBgVEljdWAgY2FuIGJlIHN0b3JlZCBlaXRoZXIgZGlyZWN0bHkgKGlmIGl0IGlzIG5lc3RlZCBJQ1UpIE9SXG4gKiBpdCBpcyBzdG9yZWQgaW5zaWRlIHRobyBgVEljdUNvbnRhaW5lcmAgaWYgaXQgaXMgdG9wIGxldmVsIElDVS5cbiAqXG4gKiBUaGUgcmVhc29uIGZvciB0aGlzIGlzIHRoYXQgdGhlIHRvcCBsZXZlbCBJQ1UgbmVlZCBhIGBUTm9kZWAgc28gdGhhdCB0aGV5IGFyZSBwYXJ0IG9mIHRoZSByZW5kZXJcbiAqIHRyZWUsIGJ1dCBuZXN0ZWQgSUNVJ3MgaGF2ZSBubyBUTm9kZSwgYmVjYXVzZSB3ZSBkb24ndCBrbm93IGFoZWFkIG9mIHRpbWUgaWYgdGhlIG5lc3RlZCBJQ1UgaXNcbiAqIGV4cHJlc3NlZCAocGFyZW50IElDVSBtYXkgaGF2ZSBzZWxlY3RlZCBhIGNhc2Ugd2hpY2ggZG9lcyBub3QgY29udGFpbiBpdC4pXG4gKlxuICogQHBhcmFtIHRWaWV3IEN1cnJlbnQgYFRWaWV3YC5cbiAqIEBwYXJhbSBpbmRleCBJbmRleCB3aGVyZSB0aGUgdmFsdWUgc2hvdWxkIGJlIHJlYWQgZnJvbS5cbiAqL1xuZnVuY3Rpb24gZ2V0VEljdSh0VmlldywgaW5kZXgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRWaWV3LmRhdGFbaW5kZXhdO1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICBpZiAobmdEZXZNb2RlICYmXG4gICAgICAgICEodmFsdWUuaGFzT3duUHJvcGVydHkoJ3RWaWV3cycpIHx8IHZhbHVlLmhhc093blByb3BlcnR5KCdjdXJyZW50Q2FzZUxWaWV3SW5kZXgnKSkpIHtcbiAgICAgICAgdGhyb3dFcnJvcignV2UgZXhwZWN0IHRvIGdldCBcXCdudWxsXFwnfFxcJ1RJY3VcXCd8XFwnVEljdUNvbnRhaW5lclxcJywgYnV0IGdvdDogJyArIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gSGVyZSB0aGUgYHZhbHVlLmhhc093blByb3BlcnR5KCdjdXJyZW50Q2FzZUxWaWV3SW5kZXgnKWAgaXMgYSBwb2x5bW9ycGhpYyByZWFkIGFzIGl0IGNhbiBiZVxuICAgIC8vIGVpdGhlciBUSWN1IG9yIFRJY3VDb250YWluZXJOb2RlLiBUaGlzIGlzIG5vdCBpZGVhbCwgYnV0IHdlIHN0aWxsIHRoaW5rIGl0IGlzIE9LIGJlY2F1c2UgaXRcbiAgICAvLyB3aWxsIGJlIGp1c3QgdHdvIGNhc2VzIHdoaWNoIGZpdHMgaW50byB0aGUgYnJvd3NlciBpbmxpbmUgY2FjaGUgKGlubGluZSBjYWNoZSBjYW4gdGFrZSB1cCB0b1xuICAgIC8vIDQpXG4gICAgY29uc3QgdEljdSA9IHZhbHVlLmhhc093blByb3BlcnR5KCdjdXJyZW50Q2FzZUxWaWV3SW5kZXgnKSA/IHZhbHVlIDpcbiAgICAgICAgdmFsdWUudmFsdWU7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydFRJY3UodEljdSk7XG4gICAgcmV0dXJuIHRJY3U7XG59XG4vKipcbiAqIFN0b3JlIGBUSWN1YCBhdCBhIGdpdmUgYGluZGV4YC5cbiAqXG4gKiBUaGUgYFRJY3VgIGNhbiBiZSBzdG9yZWQgZWl0aGVyIGRpcmVjdGx5IChpZiBpdCBpcyBuZXN0ZWQgSUNVKSBPUlxuICogaXQgaXMgc3RvcmVkIGluc2lkZSB0aG8gYFRJY3VDb250YWluZXJgIGlmIGl0IGlzIHRvcCBsZXZlbCBJQ1UuXG4gKlxuICogVGhlIHJlYXNvbiBmb3IgdGhpcyBpcyB0aGF0IHRoZSB0b3AgbGV2ZWwgSUNVIG5lZWQgYSBgVE5vZGVgIHNvIHRoYXQgdGhleSBhcmUgcGFydCBvZiB0aGUgcmVuZGVyXG4gKiB0cmVlLCBidXQgbmVzdGVkIElDVSdzIGhhdmUgbm8gVE5vZGUsIGJlY2F1c2Ugd2UgZG9uJ3Qga25vdyBhaGVhZCBvZiB0aW1lIGlmIHRoZSBuZXN0ZWQgSUNVIGlzXG4gKiBleHByZXNzZWQgKHBhcmVudCBJQ1UgbWF5IGhhdmUgc2VsZWN0ZWQgYSBjYXNlIHdoaWNoIGRvZXMgbm90IGNvbnRhaW4gaXQuKVxuICpcbiAqIEBwYXJhbSB0VmlldyBDdXJyZW50IGBUVmlld2AuXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggd2hlcmUgdGhlIHZhbHVlIHNob3VsZCBiZSBzdG9yZWQgYXQgaW4gYFR2aWV3LmRhdGFgXG4gKiBAcGFyYW0gdEljdSBUaGUgVEljdSB0byBzdG9yZS5cbiAqL1xuZnVuY3Rpb24gc2V0VEljdSh0VmlldywgaW5kZXgsIHRJY3UpIHtcbiAgICBjb25zdCB0Tm9kZSA9IHRWaWV3LmRhdGFbaW5kZXhdO1xuICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICBhc3NlcnRFcXVhbCh0Tm9kZSA9PT0gbnVsbCB8fCB0Tm9kZS5oYXNPd25Qcm9wZXJ0eSgndFZpZXdzJyksIHRydWUsICdXZSBleHBlY3QgdG8gZ2V0IFxcJ251bGxcXCd8XFwnVEljdUNvbnRhaW5lclxcJycpO1xuICAgIGlmICh0Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICB0Vmlldy5kYXRhW2luZGV4XSA9IHRJY3U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0VE5vZGVUeXBlKHROb2RlLCAzMiAvKiBJY3UgKi8pO1xuICAgICAgICB0Tm9kZS52YWx1ZSA9IHRJY3U7XG4gICAgfVxufVxuLyoqXG4gKiBTZXQgYFROb2RlLmluc2VydEJlZm9yZUluZGV4YCB0YWtpbmcgdGhlIGBBcnJheWAgaW50byBhY2NvdW50LlxuICpcbiAqIFNlZSBgVE5vZGUuaW5zZXJ0QmVmb3JlSW5kZXhgXG4gKi9cbmZ1bmN0aW9uIHNldFROb2RlSW5zZXJ0QmVmb3JlSW5kZXgodE5vZGUsIGluZGV4KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlKHROb2RlKTtcbiAgICBsZXQgaW5zZXJ0QmVmb3JlSW5kZXggPSB0Tm9kZS5pbnNlcnRCZWZvcmVJbmRleDtcbiAgICBpZiAoaW5zZXJ0QmVmb3JlSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgc2V0STE4bkhhbmRsaW5nKGdldEluc2VydEluRnJvbnRPZlJOb2RlV2l0aEkxOG4sIHByb2Nlc3NJMThuSW5zZXJ0QmVmb3JlKTtcbiAgICAgICAgaW5zZXJ0QmVmb3JlSW5kZXggPSB0Tm9kZS5pbnNlcnRCZWZvcmVJbmRleCA9XG4gICAgICAgICAgICBbbnVsbCAvKiBtYXkgYmUgdXBkYXRlZCB0byBudW1iZXIgbGF0ZXIgKi8sIGluZGV4XTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGFzc2VydEVxdWFsKEFycmF5LmlzQXJyYXkoaW5zZXJ0QmVmb3JlSW5kZXgpLCB0cnVlLCAnRXhwZWN0aW5nIGFycmF5IGhlcmUnKTtcbiAgICAgICAgaW5zZXJ0QmVmb3JlSW5kZXgucHVzaChpbmRleCk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYFROb2RlLnR5cGU9VE5vZGVUeXBlLlBsYWNlaG9sZGVyYCBub2RlLlxuICpcbiAqIFNlZSBgVE5vZGVUeXBlLlBsYWNlaG9sZGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlVE5vZGVQbGFjZWhvbGRlcih0VmlldywgcHJldmlvdXNUTm9kZXMsIGluZGV4KSB7XG4gICAgY29uc3QgdE5vZGUgPSBjcmVhdGVUTm9kZUF0SW5kZXgodFZpZXcsIGluZGV4LCA2NCAvKiBQbGFjZWhvbGRlciAqLywgbnVsbCwgbnVsbCk7XG4gICAgYWRkVE5vZGVBbmRVcGRhdGVJbnNlcnRCZWZvcmVJbmRleChwcmV2aW91c1ROb2RlcywgdE5vZGUpO1xuICAgIHJldHVybiB0Tm9kZTtcbn1cbi8qKlxuICogUmV0dXJucyBjdXJyZW50IElDVSBjYXNlLlxuICpcbiAqIElDVSBjYXNlcyBhcmUgc3RvcmVkIGFzIGluZGV4IGludG8gdGhlIGBUSWN1LmNhc2VzYC5cbiAqIEF0IHRpbWVzIGl0IGlzIG5lY2Vzc2FyeSB0byBjb21tdW5pY2F0ZSB0aGF0IHRoZSBJQ1UgY2FzZSBqdXN0IHN3aXRjaGVkIGFuZCB0aGF0IG5leHQgSUNVIHVwZGF0ZVxuICogc2hvdWxkIHVwZGF0ZSBhbGwgYmluZGluZ3MgcmVnYXJkbGVzcyBvZiB0aGUgbWFzay4gSW4gc3VjaCBhIGNhc2UgdGhlIHdlIHN0b3JlIG5lZ2F0aXZlIG51bWJlcnNcbiAqIGZvciBjYXNlcyB3aGljaCBoYXZlIGp1c3QgYmVlbiBzd2l0Y2hlZC4gVGhpcyBmdW5jdGlvbiByZW1vdmVzIHRoZSBuZWdhdGl2ZSBmbGFnLlxuICovXG5mdW5jdGlvbiBnZXRDdXJyZW50SUNVQ2FzZUluZGV4KHRJY3UsIGxWaWV3KSB7XG4gICAgY29uc3QgY3VycmVudENhc2UgPSBsVmlld1t0SWN1LmN1cnJlbnRDYXNlTFZpZXdJbmRleF07XG4gICAgcmV0dXJuIGN1cnJlbnRDYXNlID09PSBudWxsID8gY3VycmVudENhc2UgOiAoY3VycmVudENhc2UgPCAwID8gfmN1cnJlbnRDYXNlIDogY3VycmVudENhc2UpO1xufVxuZnVuY3Rpb24gZ2V0UGFyZW50RnJvbUljdUNyZWF0ZU9wQ29kZShtZXJnZWRDb2RlKSB7XG4gICAgcmV0dXJuIG1lcmdlZENvZGUgPj4+IDE3IC8qIFNISUZUX1BBUkVOVCAqLztcbn1cbmZ1bmN0aW9uIGdldFJlZkZyb21JY3VDcmVhdGVPcENvZGUobWVyZ2VkQ29kZSkge1xuICAgIHJldHVybiAobWVyZ2VkQ29kZSAmIDEzMTA3MCAvKiBNQVNLX1JFRiAqLykgPj4+IDEgLyogU0hJRlRfUkVGICovO1xufVxuZnVuY3Rpb24gZ2V0SW5zdHJ1Y3Rpb25Gcm9tSWN1Q3JlYXRlT3BDb2RlKG1lcmdlZENvZGUpIHtcbiAgICByZXR1cm4gbWVyZ2VkQ29kZSAmIDEgLyogTUFTS19JTlNUUlVDVElPTiAqLztcbn1cbmZ1bmN0aW9uIGljdUNyZWF0ZU9wQ29kZShvcENvZGUsIHBhcmVudElkeCwgcmVmSWR4KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydEdyZWF0ZXJUaGFuT3JFcXVhbChwYXJlbnRJZHgsIDAsICdNaXNzaW5nIHBhcmVudCBpbmRleCcpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRHcmVhdGVyVGhhbihyZWZJZHgsIDAsICdNaXNzaW5nIHJlZiBpbmRleCcpO1xuICAgIHJldHVybiBvcENvZGUgfCBwYXJlbnRJZHggPDwgMTcgLyogU0hJRlRfUEFSRU5UICovIHwgcmVmSWR4IDw8IDEgLyogU0hJRlRfUkVGICovO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogS2VlcCB0cmFjayBvZiB3aGljaCBpbnB1dCBiaW5kaW5ncyBpbiBgybXJtWkxOG5FeHBgIGhhdmUgY2hhbmdlZC5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgdG8gZWZmaWNpZW50bHkgdXBkYXRlIGV4cHJlc3Npb25zIGluIGkxOG4gb25seSB3aGVuIHRoZSBjb3JyZXNwb25kaW5nIGlucHV0IGhhc1xuICogY2hhbmdlZC5cbiAqXG4gKiAxKSBFYWNoIGJpdCByZXByZXNlbnRzIHdoaWNoIG9mIHRoZSBgybXJtWkxOG5FeHBgIGhhcyBjaGFuZ2VkLlxuICogMikgVGhlcmUgYXJlIDMyIGJpdHMgYWxsb3dlZCBpbiBKUy5cbiAqIDMpIEJpdCAzMiBpcyBzcGVjaWFsIGFzIGl0IGlzIHNoYXJlZCBmb3IgYWxsIGNoYW5nZXMgcGFzdCAzMi4gKEluIG90aGVyIHdvcmRzIGlmIHlvdSBoYXZlIG1vcmVcbiAqIHRoYW4gMzIgYMm1ybVpMThuRXhwYCB0aGVuIGFsbCBjaGFuZ2VzIHBhc3QgMzJuZCBgybXJtWkxOG5FeHBgIHdpbGwgYmUgbWFwcGVkIHRvIHNhbWUgYml0LiBUaGlzIG1lYW5zXG4gKiB0aGF0IHdlIG1heSBlbmQgdXAgY2hhbmdpbmcgbW9yZSB0aGFuIHdlIG5lZWQgdG8uIEJ1dCBpMThuIGV4cHJlc3Npb25zIHdpdGggMzIgYmluZGluZ3MgaXMgcmFyZVxuICogc28gaW4gcHJhY3RpY2UgaXQgc2hvdWxkIG5vdCBiZSBhbiBpc3N1ZS4pXG4gKi9cbmxldCBjaGFuZ2VNYXNrID0gMGIwO1xuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB3aGljaCBiaXQgbmVlZHMgdG8gYmUgdXBkYXRlZCBpbiBgY2hhbmdlTWFza2BcbiAqXG4gKiBUaGlzIHZhbHVlIGdldHMgaW5jcmVtZW50ZWQgb24gZXZlcnkgY2FsbCB0byBgybXJtWkxOG5FeHBgXG4gKi9cbmxldCBjaGFuZ2VNYXNrQ291bnRlciA9IDA7XG4vKipcbiAqIEtlZXAgdHJhY2sgb2Ygd2hpY2ggaW5wdXQgYmluZGluZ3MgaW4gYMm1ybVpMThuRXhwYCBoYXZlIGNoYW5nZWQuXG4gKlxuICogYHNldE1hc2tCaXRgIGdldHMgaW52b2tlZCBieSBlYWNoIGNhbGwgdG8gYMm1ybVpMThuRXhwYC5cbiAqXG4gKiBAcGFyYW0gaGFzQ2hhbmdlIGRpZCBgybXJtWkxOG5FeHBgIGRldGVjdCBhIGNoYW5nZS5cbiAqL1xuZnVuY3Rpb24gc2V0TWFza0JpdChoYXNDaGFuZ2UpIHtcbiAgICBpZiAoaGFzQ2hhbmdlKSB7XG4gICAgICAgIGNoYW5nZU1hc2sgPSBjaGFuZ2VNYXNrIHwgKDEgPDwgTWF0aC5taW4oY2hhbmdlTWFza0NvdW50ZXIsIDMxKSk7XG4gICAgfVxuICAgIGNoYW5nZU1hc2tDb3VudGVyKys7XG59XG5mdW5jdGlvbiBhcHBseUkxOG4odFZpZXcsIGxWaWV3LCBpbmRleCkge1xuICAgIGlmIChjaGFuZ2VNYXNrQ291bnRlciA+IDApIHtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQodFZpZXcsIGB0VmlldyBzaG91bGQgYmUgZGVmaW5lZGApO1xuICAgICAgICBjb25zdCB0STE4biA9IHRWaWV3LmRhdGFbaW5kZXhdO1xuICAgICAgICAvLyBXaGVuIGBpbmRleGAgcG9pbnRzIHRvIGFuIGDJtcm1aTE4bkF0dHJpYnV0ZXNgIHRoZW4gd2UgaGF2ZSBhbiBhcnJheSBvdGhlcndpc2UgYFRJMThuYFxuICAgICAgICBjb25zdCB1cGRhdGVPcENvZGVzID0gQXJyYXkuaXNBcnJheSh0STE4bikgPyB0STE4biA6IHRJMThuLnVwZGF0ZTtcbiAgICAgICAgY29uc3QgYmluZGluZ3NTdGFydEluZGV4ID0gZ2V0QmluZGluZ0luZGV4KCkgLSBjaGFuZ2VNYXNrQ291bnRlciAtIDE7XG4gICAgICAgIGFwcGx5VXBkYXRlT3BDb2Rlcyh0VmlldywgbFZpZXcsIHVwZGF0ZU9wQ29kZXMsIGJpbmRpbmdzU3RhcnRJbmRleCwgY2hhbmdlTWFzayk7XG4gICAgfVxuICAgIC8vIFJlc2V0IGNoYW5nZU1hc2sgJiBtYXNrQml0IHRvIGRlZmF1bHQgZm9yIHRoZSBuZXh0IHVwZGF0ZSBjeWNsZVxuICAgIGNoYW5nZU1hc2sgPSAwYjA7XG4gICAgY2hhbmdlTWFza0NvdW50ZXIgPSAwO1xufVxuLyoqXG4gKiBBcHBseSBgSTE4bkNyZWF0ZU9wQ29kZXNgIG9wLWNvZGVzIGFzIHN0b3JlZCBpbiBgVEkxOG4uY3JlYXRlYC5cbiAqXG4gKiBDcmVhdGVzIHRleHQgKGFuZCBjb21tZW50KSBub2RlcyB3aGljaCBhcmUgaW50ZXJuYXRpb25hbGl6ZWQuXG4gKlxuICogQHBhcmFtIGxWaWV3IEN1cnJlbnQgbFZpZXdcbiAqIEBwYXJhbSBjcmVhdGVPcENvZGVzIFNldCBvZiBvcC1jb2RlcyB0byBhcHBseVxuICogQHBhcmFtIHBhcmVudFJOb2RlIFBhcmVudCBub2RlIChzbyB0aGF0IGRpcmVjdCBjaGlsZHJlbiBjYW4gYmUgYWRkZWQgZWFnZXJseSkgb3IgYG51bGxgIGlmIGl0IGlzXG4gKiAgICAgYSByb290IG5vZGUuXG4gKiBAcGFyYW0gaW5zZXJ0SW5Gcm9udE9mIERPTSBub2RlIHRoYXQgc2hvdWxkIGJlIHVzZWQgYXMgYW4gYW5jaG9yLlxuICovXG5mdW5jdGlvbiBhcHBseUNyZWF0ZU9wQ29kZXMobFZpZXcsIGNyZWF0ZU9wQ29kZXMsIHBhcmVudFJOb2RlLCBpbnNlcnRJbkZyb250T2YpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IGxWaWV3W1JFTkRFUkVSXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNyZWF0ZU9wQ29kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgb3BDb2RlID0gY3JlYXRlT3BDb2Rlc1tpKytdO1xuICAgICAgICBjb25zdCB0ZXh0ID0gY3JlYXRlT3BDb2Rlc1tpXTtcbiAgICAgICAgY29uc3QgaXNDb21tZW50ID0gKG9wQ29kZSAmIEkxOG5DcmVhdGVPcENvZGUuQ09NTUVOVCkgPT09IEkxOG5DcmVhdGVPcENvZGUuQ09NTUVOVDtcbiAgICAgICAgY29uc3QgYXBwZW5kTm93ID0gKG9wQ29kZSAmIEkxOG5DcmVhdGVPcENvZGUuQVBQRU5EX0VBR0VSTFkpID09PSBJMThuQ3JlYXRlT3BDb2RlLkFQUEVORF9FQUdFUkxZO1xuICAgICAgICBjb25zdCBpbmRleCA9IG9wQ29kZSA+Pj4gSTE4bkNyZWF0ZU9wQ29kZS5TSElGVDtcbiAgICAgICAgbGV0IHJOb2RlID0gbFZpZXdbaW5kZXhdO1xuICAgICAgICBpZiAock5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFdlIG9ubHkgY3JlYXRlIG5ldyBET00gbm9kZXMgaWYgdGhleSBkb24ndCBhbHJlYWR5IGV4aXN0OiBJZiBJQ1Ugc3dpdGNoZXMgY2FzZSBiYWNrIHRvIGFcbiAgICAgICAgICAgIC8vIGNhc2Ugd2hpY2ggd2FzIGFscmVhZHkgaW5zdGFudGlhdGVkLCBubyBuZWVkIHRvIGNyZWF0ZSBuZXcgRE9NIG5vZGVzLlxuICAgICAgICAgICAgck5vZGUgPSBsVmlld1tpbmRleF0gPVxuICAgICAgICAgICAgICAgIGlzQ29tbWVudCA/IHJlbmRlcmVyLmNyZWF0ZUNvbW1lbnQodGV4dCkgOiBjcmVhdGVUZXh0Tm9kZShyZW5kZXJlciwgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFwcGVuZE5vdyAmJiBwYXJlbnRSTm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbmF0aXZlSW5zZXJ0QmVmb3JlKHJlbmRlcmVyLCBwYXJlbnRSTm9kZSwgck5vZGUsIGluc2VydEluRnJvbnRPZiwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBBcHBseSBgSTE4bk11dGF0ZU9wQ29kZXNgIE9wQ29kZXMuXG4gKlxuICogQHBhcmFtIHRWaWV3IEN1cnJlbnQgYFRWaWV3YFxuICogQHBhcmFtIG11dGFibGVPcENvZGVzIE11dGFibGUgT3BDb2RlcyB0byBwcm9jZXNzXG4gKiBAcGFyYW0gbFZpZXcgQ3VycmVudCBgTFZpZXdgXG4gKiBAcGFyYW0gYW5jaG9yUk5vZGUgcGxhY2Ugd2hlcmUgdGhlIGkxOG4gbm9kZSBzaG91bGQgYmUgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5TXV0YWJsZU9wQ29kZXModFZpZXcsIG11dGFibGVPcENvZGVzLCBsVmlldywgYW5jaG9yUk5vZGUpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RG9tTm9kZShhbmNob3JSTm9kZSk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBsVmlld1tSRU5ERVJFUl07XG4gICAgLy8gYHJvb3RJZHhgIHJlcHJlc2VudHMgdGhlIG5vZGUgaW50byB3aGljaCBhbGwgaW5zZXJ0cyBoYXBwZW4uXG4gICAgbGV0IHJvb3RJZHggPSBudWxsO1xuICAgIC8vIGByb290Uk5vZGVgIHJlcHJlc2VudHMgdGhlIHJlYWwgbm9kZSBpbnRvIHdoaWNoIHdlIGluc2VydC4gVGhpcyBjYW4gYmUgZGlmZmVyZW50IGZyb21cbiAgICAvLyBgbFZpZXdbcm9vdElkeF1gIGlmIHdlIGhhdmUgcHJvamVjdGlvbi5cbiAgICAvLyAgLSBudWxsIHdlIGRvbid0IGhhdmUgYSBwYXJlbnQgKGFzIGNhbiBiZSB0aGUgY2FzZSBpbiB3aGVuIHdlIGFyZSBpbnNlcnRpbmcgaW50byBhIHJvb3Qgb2ZcbiAgICAvLyAgICBMVmlldyB3aGljaCBoYXMgbm8gcGFyZW50LilcbiAgICAvLyAgLSBgUkVsZW1lbnRgIFRoZSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgcm9vdCBhZnRlciB0YWtpbmcgcHJvamVjdGlvbiBpbnRvIGFjY291bnQuXG4gICAgbGV0IHJvb3RSTm9kZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG11dGFibGVPcENvZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG9wQ29kZSA9IG11dGFibGVPcENvZGVzW2ldO1xuICAgICAgICBpZiAodHlwZW9mIG9wQ29kZSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgdGV4dE5vZGVJbmRleCA9IG11dGFibGVPcENvZGVzWysraV07XG4gICAgICAgICAgICBpZiAobFZpZXdbdGV4dE5vZGVJbmRleF0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyQ3JlYXRlVGV4dE5vZGUrKztcbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SW5kZXhJblJhbmdlKGxWaWV3LCB0ZXh0Tm9kZUluZGV4KTtcbiAgICAgICAgICAgICAgICBsVmlld1t0ZXh0Tm9kZUluZGV4XSA9IGNyZWF0ZVRleHROb2RlKHJlbmRlcmVyLCBvcENvZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvcENvZGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHN3aXRjaCAob3BDb2RlICYgMSAvKiBNQVNLX0lOU1RSVUNUSU9OICovKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIEFwcGVuZENoaWxkICovOlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJZHggPSBnZXRQYXJlbnRGcm9tSWN1Q3JlYXRlT3BDb2RlKG9wQ29kZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb290SWR4ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZmlyc3Qgb3BlcmF0aW9uIHNob3VsZCBzYXZlIHRoZSBgcm9vdElkeGAgYmVjYXVzZSB0aGUgZmlyc3Qgb3BlcmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtdXN0IGluc2VydCBpbnRvIHRoZSByb290LiAoT25seSBzdWJzZXF1ZW50IG9wZXJhdGlvbnMgY2FuIGluc2VydCBpbnRvIGEgZHluYW1pY1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGFyZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcm9vdElkeCA9IHBhcmVudElkeDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RSTm9kZSA9IG5hdGl2ZVBhcmVudE5vZGUocmVuZGVyZXIsIGFuY2hvclJOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5zZXJ0SW5Gcm9udE9mO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyZW50Uk5vZGU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRJZHggPT09IHJvb3RJZHgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEluRnJvbnRPZiA9IGFuY2hvclJOb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Uk5vZGUgPSByb290Uk5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRJbkZyb250T2YgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50Uk5vZGUgPSB1bndyYXBSTm9kZShsVmlld1twYXJlbnRJZHhdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBGSVhNRShtaXNrbyk6IFJlZmFjdG9yIHdpdGggYHByb2Nlc3NJMThuVGV4dGBcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudFJOb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgdGhlIGBMVmlld2Agd2UgYXJlIGFkZGluZyB0byBpcyBub3QgYXR0YWNoZWQgdG8gYSBwYXJlbnQgYExWaWV3YC5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIHN1Y2ggYSBjYXNlIHRoZXJlIGlzIG5vIFwicm9vdFwiIHdlIGNhbiBhdHRhY2ggdG8uIFRoaXMgaXMgZmluZSwgYXMgd2Ugc3RpbGwgbmVlZCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBlbGVtZW50cy4gV2hlbiB0aGUgYExWaWV3YCBnZXRzIGxhdGVyIGFkZGVkIHRvIGEgcGFyZW50IHRoZXNlIFwicm9vdFwiIG5vZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgcGlja2VkIHVwIGFuZCBhZGRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREb21Ob2RlKHBhcmVudFJOb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZklkeCA9IGdldFJlZkZyb21JY3VDcmVhdGVPcENvZGUob3BDb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRHcmVhdGVyVGhhbihyZWZJZHgsIEhFQURFUl9PRkZTRVQsICdNaXNzaW5nIHJlZicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYHVud3JhcFJOb2RlYCBpcyBub3QgbmVlZGVkIGhlcmUgYXMgYWxsIG9mIHRoZXNlIHBvaW50IHRvIFJOb2RlcyBhcyBwYXJ0IG9mIHRoZSBpMThuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBjYW4ndCBoYXZlIGNvbXBvbmVudHMuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IGxWaWV3W3JlZklkeF07XG4gICAgICAgICAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RG9tTm9kZShjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVJbnNlcnRCZWZvcmUocmVuZGVyZXIsIHBhcmVudFJOb2RlLCBjaGlsZCwgaW5zZXJ0SW5Gcm9udE9mLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0SWN1ID0gZ2V0VEljdSh0VmlldywgcmVmSWR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0SWN1ICE9PSBudWxsICYmIHR5cGVvZiB0SWN1ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHdlIGp1c3QgYWRkZWQgYSBjb21tZW50IG5vZGUgd2hpY2ggaGFzIElDVSB0aGVuIHRoYXQgSUNVIG1heSBoYXZlIGFscmVhZHkgYmVlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlbmRlcmVkIGFuZCB0aGVyZWZvcmUgd2UgbmVlZCB0byByZS1hZGQgaXQgaGVyZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0VEljdSh0SWN1KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXNlSW5kZXggPSBnZXRDdXJyZW50SUNVQ2FzZUluZGV4KHRJY3UsIGxWaWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FzZUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5TXV0YWJsZU9wQ29kZXModFZpZXcsIHRJY3UuY3JlYXRlW2Nhc2VJbmRleF0sIGxWaWV3LCBsVmlld1t0SWN1LmFuY2hvcklkeF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDEgLyogQXR0ciAqLzpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudE5vZGVJbmRleCA9IG9wQ29kZSA+Pj4gMSAvKiBTSElGVF9SRUYgKi87XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gbXV0YWJsZU9wQ29kZXNbKytpXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0clZhbHVlID0gbXV0YWJsZU9wQ29kZXNbKytpXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjb2RlIGlzIHVzZWQgZm9yIElDVSBleHByZXNzaW9ucyBvbmx5LCBzaW5jZSB3ZSBkb24ndCBzdXBwb3J0XG4gICAgICAgICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMvY29tcG9uZW50cyBpbiBJQ1VzLCB3ZSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IGlucHV0cyBoZXJlXG4gICAgICAgICAgICAgICAgICAgIHNldEVsZW1lbnRBdHRyaWJ1dGUocmVuZGVyZXIsIGdldE5hdGl2ZUJ5SW5kZXgoZWxlbWVudE5vZGVJbmRleCwgbFZpZXcpLCBudWxsLCBudWxsLCBhdHRyTmFtZSwgYXR0clZhbHVlLCBudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcig3MDAgLyogSU5WQUxJRF9JMThOX1NUUlVDVFVSRSAqLywgYFVuYWJsZSB0byBkZXRlcm1pbmUgdGhlIHR5cGUgb2YgbXV0YXRlIG9wZXJhdGlvbiBmb3IgXCIke29wQ29kZX1cImApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG9wQ29kZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgSUNVX01BUktFUjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudFZhbHVlID0gbXV0YWJsZU9wQ29kZXNbKytpXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudE5vZGVJbmRleCA9IG11dGFibGVPcENvZGVzWysraV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChsVmlld1tjb21tZW50Tm9kZUluZGV4XSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0RXF1YWwodHlwZW9mIGNvbW1lbnRWYWx1ZSwgJ3N0cmluZycsIGBFeHBlY3RlZCBcIiR7Y29tbWVudFZhbHVlfVwiIHRvIGJlIGEgY29tbWVudCBub2RlIHZhbHVlYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyQ3JlYXRlQ29tbWVudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydEluZGV4SW5FeHBhbmRvUmFuZ2UobFZpZXcsIGNvbW1lbnROb2RlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29tbWVudFJOb2RlID0gbFZpZXdbY29tbWVudE5vZGVJbmRleF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUNvbW1lbnROb2RlKHJlbmRlcmVyLCBjb21tZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRklYTUUobWlza28pOiBBdHRhY2hpbmcgcGF0Y2ggZGF0YSBpcyBvbmx5IG5lZWRlZCBmb3IgdGhlIHJvb3QgKEFsc28gYWRkIHRlc3RzKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoUGF0Y2hEYXRhKGNvbW1lbnRSTm9kZSwgbFZpZXcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgRUxFTUVOVF9NQVJLRVI6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZ05hbWUgPSBtdXRhYmxlT3BDb2Rlc1srK2ldO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50Tm9kZUluZGV4ID0gbXV0YWJsZU9wQ29kZXNbKytpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxWaWV3W2VsZW1lbnROb2RlSW5kZXhdID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRFcXVhbCh0eXBlb2YgdGFnTmFtZSwgJ3N0cmluZycsIGBFeHBlY3RlZCBcIiR7dGFnTmFtZX1cIiB0byBiZSBhbiBlbGVtZW50IG5vZGUgdGFnIG5hbWVgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBuZ0Rldk1vZGUucmVuZGVyZXJDcmVhdGVFbGVtZW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0SW5kZXhJbkV4cGFuZG9SYW5nZShsVmlldywgZWxlbWVudE5vZGVJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50Uk5vZGUgPSBsVmlld1tlbGVtZW50Tm9kZUluZGV4XSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudE5vZGUocmVuZGVyZXIsIHRhZ05hbWUsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRklYTUUobWlza28pOiBBdHRhY2hpbmcgcGF0Y2ggZGF0YSBpcyBvbmx5IG5lZWRlZCBmb3IgdGhlIHJvb3QgKEFsc28gYWRkIHRlc3RzKVxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoUGF0Y2hEYXRhKGVsZW1lbnRSTm9kZSwgbFZpZXcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3dFcnJvcihgVW5hYmxlIHRvIGRldGVybWluZSB0aGUgdHlwZSBvZiBtdXRhdGUgb3BlcmF0aW9uIGZvciBcIiR7b3BDb2RlfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEFwcGx5IGBJMThuVXBkYXRlT3BDb2Rlc2AgT3BDb2Rlc1xuICpcbiAqIEBwYXJhbSB0VmlldyBDdXJyZW50IGBUVmlld2BcbiAqIEBwYXJhbSBsVmlldyBDdXJyZW50IGBMVmlld2BcbiAqIEBwYXJhbSB1cGRhdGVPcENvZGVzIE9wQ29kZXMgdG8gcHJvY2Vzc1xuICogQHBhcmFtIGJpbmRpbmdzU3RhcnRJbmRleCBMb2NhdGlvbiBvZiB0aGUgZmlyc3QgYMm1ybVpMThuQXBwbHlgXG4gKiBAcGFyYW0gY2hhbmdlTWFzayBFYWNoIGJpdCBjb3JyZXNwb25kcyB0byBhIGDJtcm1aTE4bkV4cGAgKENvdW50aW5nIGJhY2t3YXJkcyBmcm9tXG4gKiAgICAgYGJpbmRpbmdzU3RhcnRJbmRleGApXG4gKi9cbmZ1bmN0aW9uIGFwcGx5VXBkYXRlT3BDb2Rlcyh0VmlldywgbFZpZXcsIHVwZGF0ZU9wQ29kZXMsIGJpbmRpbmdzU3RhcnRJbmRleCwgY2hhbmdlTWFzaykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdXBkYXRlT3BDb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBiaXQgY29kZSB0byBjaGVjayBpZiB3ZSBzaG91bGQgYXBwbHkgdGhlIG5leHQgdXBkYXRlXG4gICAgICAgIGNvbnN0IGNoZWNrQml0ID0gdXBkYXRlT3BDb2Rlc1tpXTtcbiAgICAgICAgLy8gTnVtYmVyIG9mIG9wQ29kZXMgdG8gc2tpcCB1bnRpbCBuZXh0IHNldCBvZiB1cGRhdGUgY29kZXNcbiAgICAgICAgY29uc3Qgc2tpcENvZGVzID0gdXBkYXRlT3BDb2Rlc1srK2ldO1xuICAgICAgICBpZiAoY2hlY2tCaXQgJiBjaGFuZ2VNYXNrKSB7XG4gICAgICAgICAgICAvLyBUaGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZCBzaW5jZSBsYXN0IGNoZWNrZWRcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9ICcnO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDw9IChpICsgc2tpcENvZGVzKTsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3BDb2RlID0gdXBkYXRlT3BDb2Rlc1tqXTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9wQ29kZSA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBvcENvZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBvcENvZGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wQ29kZSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5lZ2F0aXZlIG9wQ29kZSByZXByZXNlbnQgYGkxOG5FeHBgIHZhbHVlcyBvZmZzZXQuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSByZW5kZXJTdHJpbmdpZnkobFZpZXdbYmluZGluZ3NTdGFydEluZGV4IC0gb3BDb2RlXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlSW5kZXggPSAob3BDb2RlID4+PiAyIC8qIFNISUZUX1JFRiAqLyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG9wQ29kZSAmIDMgLyogTUFTS19PUENPREUgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEgLyogQXR0ciAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvcE5hbWUgPSB1cGRhdGVPcENvZGVzWysral07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNhbml0aXplRm4gPSB1cGRhdGVPcENvZGVzWysral07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHROb2RlT3JUYWdOYW1lID0gdFZpZXcuZGF0YVtub2RlSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0RGVmaW5lZCh0Tm9kZU9yVGFnTmFtZSwgJ0V4cGVydGluZyBUTm9kZSBvciBzdHJpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0Tm9kZU9yVGFnTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElGIHdlIGRvbid0IGhhdmUgYSBgVE5vZGVgLCB0aGVuIHdlIGFyZSBhbiBlbGVtZW50IGluIElDVSAoYXMgSUNVIGNvbnRlbnQgZG9lc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90IGhhdmUgVE5vZGUpLCBpbiB3aGljaCBjYXNlIHdlIGtub3cgdGhhdCB0aGVyZSBhcmUgbm8gZGlyZWN0aXZlcywgYW5kIGhlbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSB1c2UgYXR0cmlidXRlIHNldHRpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFbGVtZW50QXR0cmlidXRlKGxWaWV3W1JFTkRFUkVSXSwgbFZpZXdbbm9kZUluZGV4XSwgbnVsbCwgdE5vZGVPclRhZ05hbWUsIHByb3BOYW1lLCB2YWx1ZSwgc2FuaXRpemVGbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50UHJvcGVydHlJbnRlcm5hbCh0VmlldywgdE5vZGVPclRhZ05hbWUsIGxWaWV3LCBwcm9wTmFtZSwgdmFsdWUsIGxWaWV3W1JFTkRFUkVSXSwgc2FuaXRpemVGbiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMCAvKiBUZXh0ICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByVGV4dCA9IGxWaWV3W25vZGVJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJUZXh0ICE9PSBudWxsICYmIHVwZGF0ZVRleHROb2RlKGxWaWV3W1JFTkRFUkVSXSwgclRleHQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyIC8qIEljdVN3aXRjaCAqLzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlJY3VTd2l0Y2hDYXNlKHRWaWV3LCBnZXRUSWN1KHRWaWV3LCBub2RlSW5kZXgpLCBsVmlldywgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDMgLyogSWN1VXBkYXRlICovOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBseUljdVVwZGF0ZUNhc2UodFZpZXcsIGdldFRJY3UodFZpZXcsIG5vZGVJbmRleCksIGJpbmRpbmdzU3RhcnRJbmRleCwgbFZpZXcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG9wQ29kZSA9IHVwZGF0ZU9wQ29kZXNbaSArIDFdO1xuICAgICAgICAgICAgaWYgKG9wQ29kZSA+IDAgJiYgKG9wQ29kZSAmIDMgLyogTUFTS19PUENPREUgKi8pID09PSAzIC8qIEljdVVwZGF0ZSAqLykge1xuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdGhlIGBpY3VVcGRhdGVDYXNlYC4gSXQgY291bGQgYmUgdGhhdCB0aGUgbWFzayBkaWQgbm90IG1hdGNoLCBidXRcbiAgICAgICAgICAgICAgICAvLyB3ZSBzdGlsbCBuZWVkIHRvIGV4ZWN1dGUgYGljdVVwZGF0ZUNhc2VgIGJlY2F1c2UgdGhlIGNhc2UgaGFzIGNoYW5nZWQgcmVjZW50bHkgZHVlIHRvXG4gICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgYGljdVN3aXRjaENhc2VgIGluc3RydWN0aW9uLiAoYGljdVN3aXRjaENhc2VgIGFuZCBgaWN1VXBkYXRlQ2FzZWAgYWx3YXlzIGNvbWUgaW5cbiAgICAgICAgICAgICAgICAvLyBwYWlycy4pXG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZUluZGV4ID0gKG9wQ29kZSA+Pj4gMiAvKiBTSElGVF9SRUYgKi8pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRJY3UgPSBnZXRUSWN1KHRWaWV3LCBub2RlSW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IGxWaWV3W3RJY3UuY3VycmVudENhc2VMVmlld0luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBhcHBseUljdVVwZGF0ZUNhc2UodFZpZXcsIHRJY3UsIGJpbmRpbmdzU3RhcnRJbmRleCwgbFZpZXcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpICs9IHNraXBDb2RlcztcbiAgICB9XG59XG4vKipcbiAqIEFwcGx5IE9wQ29kZXMgYXNzb2NpYXRlZCB3aXRoIHVwZGF0aW5nIGFuIGV4aXN0aW5nIElDVS5cbiAqXG4gKiBAcGFyYW0gdFZpZXcgQ3VycmVudCBgVFZpZXdgXG4gKiBAcGFyYW0gdEljdSBDdXJyZW50IGBUSWN1YFxuICogQHBhcmFtIGJpbmRpbmdzU3RhcnRJbmRleCBMb2NhdGlvbiBvZiB0aGUgZmlyc3QgYMm1ybVpMThuQXBwbHlgXG4gKiBAcGFyYW0gbFZpZXcgQ3VycmVudCBgTFZpZXdgXG4gKi9cbmZ1bmN0aW9uIGFwcGx5SWN1VXBkYXRlQ2FzZSh0VmlldywgdEljdSwgYmluZGluZ3NTdGFydEluZGV4LCBsVmlldykge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXcsIHRJY3UuY3VycmVudENhc2VMVmlld0luZGV4KTtcbiAgICBsZXQgYWN0aXZlQ2FzZUluZGV4ID0gbFZpZXdbdEljdS5jdXJyZW50Q2FzZUxWaWV3SW5kZXhdO1xuICAgIGlmIChhY3RpdmVDYXNlSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgbGV0IG1hc2sgPSBjaGFuZ2VNYXNrO1xuICAgICAgICBpZiAoYWN0aXZlQ2FzZUluZGV4IDwgMCkge1xuICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGZsYWcuXG4gICAgICAgICAgICAvLyBOZWdhdGl2ZSBudW1iZXIgbWVhbnMgdGhhdCB0aGUgSUNVIHdhcyBmcmVzaGx5IGNyZWF0ZWQgYW5kIHdlIG5lZWQgdG8gZm9yY2UgdGhlIHVwZGF0ZS5cbiAgICAgICAgICAgIGFjdGl2ZUNhc2VJbmRleCA9IGxWaWV3W3RJY3UuY3VycmVudENhc2VMVmlld0luZGV4XSA9IH5hY3RpdmVDYXNlSW5kZXg7XG4gICAgICAgICAgICAvLyAtMSBpcyBzYW1lIGFzIGFsbCBiaXRzIG9uLCB3aGljaCBzaW11bGF0ZXMgY3JlYXRpb24gc2luY2UgaXQgbWFya3MgYWxsIGJpdHMgZGlydHlcbiAgICAgICAgICAgIG1hc2sgPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBhcHBseVVwZGF0ZU9wQ29kZXModFZpZXcsIGxWaWV3LCB0SWN1LnVwZGF0ZVthY3RpdmVDYXNlSW5kZXhdLCBiaW5kaW5nc1N0YXJ0SW5kZXgsIG1hc2spO1xuICAgIH1cbn1cbi8qKlxuICogQXBwbHkgT3BDb2RlcyBhc3NvY2lhdGVkIHdpdGggc3dpdGNoaW5nIGEgY2FzZSBvbiBJQ1UuXG4gKlxuICogVGhpcyBpbnZvbHZlcyB0ZWFyaW5nIGRvd24gZXhpc3RpbmcgY2FzZSBhbmQgdGhhbiBidWlsZGluZyB1cCBhIG5ldyBjYXNlLlxuICpcbiAqIEBwYXJhbSB0VmlldyBDdXJyZW50IGBUVmlld2BcbiAqIEBwYXJhbSB0SWN1IEN1cnJlbnQgYFRJY3VgXG4gKiBAcGFyYW0gbFZpZXcgQ3VycmVudCBgTFZpZXdgXG4gKiBAcGFyYW0gdmFsdWUgVmFsdWUgb2YgdGhlIGNhc2UgdG8gdXBkYXRlIHRvLlxuICovXG5mdW5jdGlvbiBhcHBseUljdVN3aXRjaENhc2UodFZpZXcsIHRJY3UsIGxWaWV3LCB2YWx1ZSkge1xuICAgIC8vIFJlYnVpbGQgYSBuZXcgY2FzZSBmb3IgdGhpcyBJQ1VcbiAgICBjb25zdCBjYXNlSW5kZXggPSBnZXRDYXNlSW5kZXgodEljdSwgdmFsdWUpO1xuICAgIGxldCBhY3RpdmVDYXNlSW5kZXggPSBnZXRDdXJyZW50SUNVQ2FzZUluZGV4KHRJY3UsIGxWaWV3KTtcbiAgICBpZiAoYWN0aXZlQ2FzZUluZGV4ICE9PSBjYXNlSW5kZXgpIHtcbiAgICAgICAgYXBwbHlJY3VTd2l0Y2hDYXNlUmVtb3ZlKHRWaWV3LCB0SWN1LCBsVmlldyk7XG4gICAgICAgIGxWaWV3W3RJY3UuY3VycmVudENhc2VMVmlld0luZGV4XSA9IGNhc2VJbmRleCA9PT0gbnVsbCA/IG51bGwgOiB+Y2FzZUluZGV4O1xuICAgICAgICBpZiAoY2FzZUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBBZGQgdGhlIG5vZGVzIGZvciB0aGUgbmV3IGNhc2VcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvclJOb2RlID0gbFZpZXdbdEljdS5hbmNob3JJZHhdO1xuICAgICAgICAgICAgaWYgKGFuY2hvclJOb2RlKSB7XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERvbU5vZGUoYW5jaG9yUk5vZGUpO1xuICAgICAgICAgICAgICAgIGFwcGx5TXV0YWJsZU9wQ29kZXModFZpZXcsIHRJY3UuY3JlYXRlW2Nhc2VJbmRleF0sIGxWaWV3LCBhbmNob3JSTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEFwcGx5IE9wQ29kZXMgYXNzb2NpYXRlZCB3aXRoIHRlYXJpbmcgSUNVIGNhc2UuXG4gKlxuICogVGhpcyBpbnZvbHZlcyB0ZWFyaW5nIGRvd24gZXhpc3RpbmcgY2FzZSBhbmQgdGhhbiBidWlsZGluZyB1cCBhIG5ldyBjYXNlLlxuICpcbiAqIEBwYXJhbSB0VmlldyBDdXJyZW50IGBUVmlld2BcbiAqIEBwYXJhbSB0SWN1IEN1cnJlbnQgYFRJY3VgXG4gKiBAcGFyYW0gbFZpZXcgQ3VycmVudCBgTFZpZXdgXG4gKi9cbmZ1bmN0aW9uIGFwcGx5SWN1U3dpdGNoQ2FzZVJlbW92ZSh0VmlldywgdEljdSwgbFZpZXcpIHtcbiAgICBsZXQgYWN0aXZlQ2FzZUluZGV4ID0gZ2V0Q3VycmVudElDVUNhc2VJbmRleCh0SWN1LCBsVmlldyk7XG4gICAgaWYgKGFjdGl2ZUNhc2VJbmRleCAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCByZW1vdmVDb2RlcyA9IHRJY3UucmVtb3ZlW2FjdGl2ZUNhc2VJbmRleF07XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZlQ29kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVPckljdUluZGV4ID0gcmVtb3ZlQ29kZXNbaV07XG4gICAgICAgICAgICBpZiAobm9kZU9ySWN1SW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gUG9zaXRpdmUgbnVtYmVycyBhcmUgYFJOb2RlYHMuXG4gICAgICAgICAgICAgICAgY29uc3Qgck5vZGUgPSBnZXROYXRpdmVCeUluZGV4KG5vZGVPckljdUluZGV4LCBsVmlldyk7XG4gICAgICAgICAgICAgICAgck5vZGUgIT09IG51bGwgJiYgbmF0aXZlUmVtb3ZlTm9kZShsVmlld1tSRU5ERVJFUl0sIHJOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5lZ2F0aXZlIG51bWJlcnMgYXJlIElDVXNcbiAgICAgICAgICAgICAgICBhcHBseUljdVN3aXRjaENhc2VSZW1vdmUodFZpZXcsIGdldFRJY3UodFZpZXcsIH5ub2RlT3JJY3VJbmRleCksIGxWaWV3KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgY2FzZSBvZiBhbiBJQ1UgZXhwcmVzc2lvbiBkZXBlbmRpbmcgb24gdGhlIG1haW4gYmluZGluZyB2YWx1ZVxuICpcbiAqIEBwYXJhbSBpY3VFeHByZXNzaW9uXG4gKiBAcGFyYW0gYmluZGluZ1ZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgbWFpbiBiaW5kaW5nIHVzZWQgYnkgdGhpcyBJQ1UgZXhwcmVzc2lvblxuICovXG5mdW5jdGlvbiBnZXRDYXNlSW5kZXgoaWN1RXhwcmVzc2lvbiwgYmluZGluZ1ZhbHVlKSB7XG4gICAgbGV0IGluZGV4ID0gaWN1RXhwcmVzc2lvbi5jYXNlcy5pbmRleE9mKGJpbmRpbmdWYWx1ZSk7XG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICBzd2l0Y2ggKGljdUV4cHJlc3Npb24udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAxIC8qIHBsdXJhbCAqLzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc29sdmVkQ2FzZSA9IGdldFBsdXJhbENhc2UoYmluZGluZ1ZhbHVlLCBnZXRMb2NhbGVJZCgpKTtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGljdUV4cHJlc3Npb24uY2FzZXMuaW5kZXhPZihyZXNvbHZlZENhc2UpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEgJiYgcmVzb2x2ZWRDYXNlICE9PSAnb3RoZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaWN1RXhwcmVzc2lvbi5jYXNlcy5pbmRleE9mKCdvdGhlcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgMCAvKiBzZWxlY3QgKi86IHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGljdUV4cHJlc3Npb24uY2FzZXMuaW5kZXhPZignb3RoZXInKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXggPT09IC0xID8gbnVsbCA6IGluZGV4O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGxvYWRJY3VDb250YWluZXJWaXNpdG9yKCkge1xuICAgIGNvbnN0IF9zdGFjayA9IFtdO1xuICAgIGxldCBfaW5kZXggPSAtMTtcbiAgICBsZXQgX2xWaWV3O1xuICAgIGxldCBfcmVtb3ZlcztcbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgYSBzZXQgb2Ygcm9vdCBub2RlcyBmcm9tIGBUSWN1LnJlbW92ZWAuIFVzZWQgYnkgYFROb2RlVHlwZS5JQ1VDb250YWluZXJgXG4gICAgICogdG8gZGV0ZXJtaW5lIHdoaWNoIHJvb3QgYmVsb25nIHRvIHRoZSBJQ1UuXG4gICAgICpcbiAgICAgKiBFeGFtcGxlIG9mIHVzYWdlLlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IG5leHRSTm9kZSA9IGljdUNvbnRhaW5lckl0ZXJhdG9yU3RhcnQodEljdUNvbnRhaW5lck5vZGUsIGxWaWV3KTtcbiAgICAgKiBsZXQgck5vZGU6IFJOb2RlfG51bGw7XG4gICAgICogd2hpbGUock5vZGUgPSBuZXh0Uk5vZGUoKSkge1xuICAgICAqICAgY29uc29sZS5sb2cock5vZGUpO1xuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB0SWN1Q29udGFpbmVyTm9kZSBDdXJyZW50IGBUSWN1Q29udGFpbmVyTm9kZWBcbiAgICAgKiBAcGFyYW0gbFZpZXcgYExWaWV3YCB3aGVyZSB0aGUgYFJOb2RlYHMgc2hvdWxkIGJlIGxvb2tlZCB1cC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpY3VDb250YWluZXJJdGVyYXRvclN0YXJ0KHRJY3VDb250YWluZXJOb2RlLCBsVmlldykge1xuICAgICAgICBfbFZpZXcgPSBsVmlldztcbiAgICAgICAgd2hpbGUgKF9zdGFjay5sZW5ndGgpXG4gICAgICAgICAgICBfc3RhY2sucG9wKCk7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRUTm9kZUZvckxWaWV3KHRJY3VDb250YWluZXJOb2RlLCBsVmlldyk7XG4gICAgICAgIGVudGVySWN1KHRJY3VDb250YWluZXJOb2RlLnZhbHVlLCBsVmlldyk7XG4gICAgICAgIHJldHVybiBpY3VDb250YWluZXJJdGVyYXRvck5leHQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGVudGVySWN1KHRJY3UsIGxWaWV3KSB7XG4gICAgICAgIF9pbmRleCA9IDA7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRDYXNlID0gZ2V0Q3VycmVudElDVUNhc2VJbmRleCh0SWN1LCBsVmlldyk7XG4gICAgICAgIGlmIChjdXJyZW50Q2FzZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydE51bWJlckluUmFuZ2UoY3VycmVudENhc2UsIDAsIHRJY3UuY2FzZXMubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBfcmVtb3ZlcyA9IHRJY3UucmVtb3ZlW2N1cnJlbnRDYXNlXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF9yZW1vdmVzID0gRU1QVFlfQVJSQVk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaWN1Q29udGFpbmVySXRlcmF0b3JOZXh0KCkge1xuICAgICAgICBpZiAoX2luZGV4IDwgX3JlbW92ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVPcENvZGUgPSBfcmVtb3Zlc1tfaW5kZXgrK107XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TnVtYmVyKHJlbW92ZU9wQ29kZSwgJ0V4cGVjdGluZyBPcENvZGUgbnVtYmVyJyk7XG4gICAgICAgICAgICBpZiAocmVtb3ZlT3BDb2RlID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJOb2RlID0gX2xWaWV3W3JlbW92ZU9wQ29kZV07XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERvbU5vZGUock5vZGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiByTm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF9zdGFjay5wdXNoKF9pbmRleCwgX3JlbW92ZXMpO1xuICAgICAgICAgICAgICAgIC8vIElDVXMgYXJlIHJlcHJlc2VudGVkIGJ5IG5lZ2F0aXZlIGluZGljZXNcbiAgICAgICAgICAgICAgICBjb25zdCB0SWN1SW5kZXggPSB+cmVtb3ZlT3BDb2RlO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRJY3UgPSBfbFZpZXdbVFZJRVddLmRhdGFbdEljdUluZGV4XTtcbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0VEljdSh0SWN1KTtcbiAgICAgICAgICAgICAgICBlbnRlckljdSh0SWN1LCBfbFZpZXcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpY3VDb250YWluZXJJdGVyYXRvck5leHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChfc3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfcmVtb3ZlcyA9IF9zdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICBfaW5kZXggPSBfc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGljdUNvbnRhaW5lckl0ZXJhdG9yTmV4dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpY3VDb250YWluZXJJdGVyYXRvclN0YXJ0O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQ29udmVydHMgYEkxOG5DcmVhdGVPcENvZGVzYCBhcnJheSBpbnRvIGEgaHVtYW4gcmVhZGFibGUgZm9ybWF0LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYXR0YWNoZWQgdG8gdGhlIGBJMThuQ3JlYXRlT3BDb2Rlcy5kZWJ1Z2AgcHJvcGVydHkgaWYgYG5nRGV2TW9kZWAgaXMgZW5hYmxlZC5cbiAqIFRoaXMgZnVuY3Rpb24gcHJvdmlkZXMgYSBodW1hbiByZWFkYWJsZSB2aWV3IG9mIHRoZSBvcGNvZGVzLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGRlYnVnZ2luZyB0aGVcbiAqIGFwcGxpY2F0aW9uIGFzIHdlbGwgYXMgd3JpdGluZyBtb3JlIHJlYWRhYmxlIHRlc3RzLlxuICpcbiAqIEBwYXJhbSB0aGlzIGBJMThuQ3JlYXRlT3BDb2Rlc2AgaWYgYXR0YWNoZWQgYXMgYSBtZXRob2QuXG4gKiBAcGFyYW0gb3Bjb2RlcyBgSTE4bkNyZWF0ZU9wQ29kZXNgIGlmIGludm9rZWQgYXMgYSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gaTE4bkNyZWF0ZU9wQ29kZXNUb1N0cmluZyhvcGNvZGVzKSB7XG4gICAgY29uc3QgY3JlYXRlT3BDb2RlcyA9IG9wY29kZXMgfHwgKEFycmF5LmlzQXJyYXkodGhpcykgPyB0aGlzIDogW10pO1xuICAgIGxldCBsaW5lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3JlYXRlT3BDb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBvcENvZGUgPSBjcmVhdGVPcENvZGVzW2krK107XG4gICAgICAgIGNvbnN0IHRleHQgPSBjcmVhdGVPcENvZGVzW2ldO1xuICAgICAgICBjb25zdCBpc0NvbW1lbnQgPSAob3BDb2RlICYgSTE4bkNyZWF0ZU9wQ29kZS5DT01NRU5UKSA9PT0gSTE4bkNyZWF0ZU9wQ29kZS5DT01NRU5UO1xuICAgICAgICBjb25zdCBhcHBlbmROb3cgPSAob3BDb2RlICYgSTE4bkNyZWF0ZU9wQ29kZS5BUFBFTkRfRUFHRVJMWSkgPT09IEkxOG5DcmVhdGVPcENvZGUuQVBQRU5EX0VBR0VSTFk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gb3BDb2RlID4+PiBJMThuQ3JlYXRlT3BDb2RlLlNISUZUO1xuICAgICAgICBsaW5lcy5wdXNoKGBsVmlld1ske2luZGV4fV0gPSBkb2N1bWVudC4ke2lzQ29tbWVudCA/ICdjcmVhdGVDb21tZW50JyA6ICdjcmVhdGVUZXh0J30oJHtKU09OLnN0cmluZ2lmeSh0ZXh0KX0pO2ApO1xuICAgICAgICBpZiAoYXBwZW5kTm93KSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKGBwYXJlbnQuYXBwZW5kQ2hpbGQobFZpZXdbJHtpbmRleH1dKTtgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGluZXM7XG59XG4vKipcbiAqIENvbnZlcnRzIGBJMThuVXBkYXRlT3BDb2Rlc2AgYXJyYXkgaW50byBhIGh1bWFuIHJlYWRhYmxlIGZvcm1hdC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGF0dGFjaGVkIHRvIHRoZSBgSTE4blVwZGF0ZU9wQ29kZXMuZGVidWdgIHByb3BlcnR5IGlmIGBuZ0Rldk1vZGVgIGlzIGVuYWJsZWQuXG4gKiBUaGlzIGZ1bmN0aW9uIHByb3ZpZGVzIGEgaHVtYW4gcmVhZGFibGUgdmlldyBvZiB0aGUgb3Bjb2Rlcy4gVGhpcyBpcyB1c2VmdWwgd2hlbiBkZWJ1Z2dpbmcgdGhlXG4gKiBhcHBsaWNhdGlvbiBhcyB3ZWxsIGFzIHdyaXRpbmcgbW9yZSByZWFkYWJsZSB0ZXN0cy5cbiAqXG4gKiBAcGFyYW0gdGhpcyBgSTE4blVwZGF0ZU9wQ29kZXNgIGlmIGF0dGFjaGVkIGFzIGEgbWV0aG9kLlxuICogQHBhcmFtIG9wY29kZXMgYEkxOG5VcGRhdGVPcENvZGVzYCBpZiBpbnZva2VkIGFzIGEgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGkxOG5VcGRhdGVPcENvZGVzVG9TdHJpbmcob3Bjb2Rlcykge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBPcENvZGVQYXJzZXIob3Bjb2RlcyB8fCAoQXJyYXkuaXNBcnJheSh0aGlzKSA/IHRoaXMgOiBbXSkpO1xuICAgIGxldCBsaW5lcyA9IFtdO1xuICAgIGZ1bmN0aW9uIGNvbnN1bWVPcENvZGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmVmID0gdmFsdWUgPj4+IDIgLyogU0hJRlRfUkVGICovO1xuICAgICAgICBjb25zdCBvcENvZGUgPSB2YWx1ZSAmIDMgLyogTUFTS19PUENPREUgKi87XG4gICAgICAgIHN3aXRjaCAob3BDb2RlKSB7XG4gICAgICAgICAgICBjYXNlIDAgLyogVGV4dCAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYChsVmlld1ske3JlZn1dIGFzIFRleHQpLnRleHRDb250ZW50ID0gJCQkYDtcbiAgICAgICAgICAgIGNhc2UgMSAvKiBBdHRyICovOlxuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gcGFyc2VyLmNvbnN1bWVTdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzYW5pdGl6YXRpb25GbiA9IHBhcnNlci5jb25zdW1lRnVuY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNhbml0aXphdGlvbkZuID8gYCgke3Nhbml0aXphdGlvbkZufSkoJCQkKWAgOiAnJCQkJztcbiAgICAgICAgICAgICAgICByZXR1cm4gYChsVmlld1ske3JlZn1dIGFzIEVsZW1lbnQpLnNldEF0dHJpYnV0ZSgnJHthdHRyTmFtZX0nLCAke3ZhbHVlfSlgO1xuICAgICAgICAgICAgY2FzZSAyIC8qIEljdVN3aXRjaCAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYGljdVN3aXRjaENhc2UoJHtyZWZ9LCAkJCQpYDtcbiAgICAgICAgICAgIGNhc2UgMyAvKiBJY3VVcGRhdGUgKi86XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBpY3VVcGRhdGVDYXNlKCR7cmVmfSlgO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCBPcENvZGUnKTtcbiAgICB9XG4gICAgd2hpbGUgKHBhcnNlci5oYXNNb3JlKCkpIHtcbiAgICAgICAgbGV0IG1hc2sgPSBwYXJzZXIuY29uc3VtZU51bWJlcigpO1xuICAgICAgICBsZXQgc2l6ZSA9IHBhcnNlci5jb25zdW1lTnVtYmVyKCk7XG4gICAgICAgIGNvbnN0IGVuZCA9IHBhcnNlci5pICsgc2l6ZTtcbiAgICAgICAgY29uc3Qgc3RhdGVtZW50cyA9IFtdO1xuICAgICAgICBsZXQgc3RhdGVtZW50ID0gJyc7XG4gICAgICAgIHdoaWxlIChwYXJzZXIuaSA8IGVuZCkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VyLmNvbnN1bWVOdW1iZXJPclN0cmluZygpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZW1lbnQgKz0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgICAgICAvLyBOZWdhdGl2ZSBudW1iZXJzIGFyZSByZWYgaW5kZXhlc1xuICAgICAgICAgICAgICAgIC8vIEhlcmUgYGlgIHJlZmVycyB0byBjdXJyZW50IGJpbmRpbmcgaW5kZXguIEl0IGlzIHRvIHNpZ25pZnkgdGhhdCB0aGUgdmFsdWUgaXMgcmVsYXRpdmUsXG4gICAgICAgICAgICAgICAgLy8gcmF0aGVyIHRoYW4gYWJzb2x1dGUuXG4gICAgICAgICAgICAgICAgc3RhdGVtZW50ICs9ICcke2xWaWV3W2knICsgdmFsdWUgKyAnXX0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUG9zaXRpdmUgbnVtYmVycyBhcmUgb3BlcmF0aW9ucy5cbiAgICAgICAgICAgICAgICBjb25zdCBvcENvZGVUZXh0ID0gY29uc3VtZU9wQ29kZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3RhdGVtZW50cy5wdXNoKG9wQ29kZVRleHQucmVwbGFjZSgnJCQkJywgJ2AnICsgc3RhdGVtZW50ICsgJ2AnKSArICc7Jyk7XG4gICAgICAgICAgICAgICAgc3RhdGVtZW50ID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGluZXMucHVzaChgaWYgKG1hc2sgJiAwYiR7bWFzay50b1N0cmluZygyKX0pIHsgJHtzdGF0ZW1lbnRzLmpvaW4oJyAnKX0gfWApO1xuICAgIH1cbiAgICByZXR1cm4gbGluZXM7XG59XG4vKipcbiAqIENvbnZlcnRzIGBJMThuQ3JlYXRlT3BDb2Rlc2AgYXJyYXkgaW50byBhIGh1bWFuIHJlYWRhYmxlIGZvcm1hdC5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGF0dGFjaGVkIHRvIHRoZSBgSTE4bkNyZWF0ZU9wQ29kZXMuZGVidWdgIGlmIGBuZ0Rldk1vZGVgIGlzIGVuYWJsZWQuIFRoaXNcbiAqIGZ1bmN0aW9uIHByb3ZpZGVzIGEgaHVtYW4gcmVhZGFibGUgdmlldyBvZiB0aGUgb3Bjb2Rlcy4gVGhpcyBpcyB1c2VmdWwgd2hlbiBkZWJ1Z2dpbmcgdGhlXG4gKiBhcHBsaWNhdGlvbiBhcyB3ZWxsIGFzIHdyaXRpbmcgbW9yZSByZWFkYWJsZSB0ZXN0cy5cbiAqXG4gKiBAcGFyYW0gdGhpcyBgSTE4bkNyZWF0ZU9wQ29kZXNgIGlmIGF0dGFjaGVkIGFzIGEgbWV0aG9kLlxuICogQHBhcmFtIG9wY29kZXMgYEkxOG5DcmVhdGVPcENvZGVzYCBpZiBpbnZva2VkIGFzIGEgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGljdUNyZWF0ZU9wQ29kZXNUb1N0cmluZyhvcGNvZGVzKSB7XG4gICAgY29uc3QgcGFyc2VyID0gbmV3IE9wQ29kZVBhcnNlcihvcGNvZGVzIHx8IChBcnJheS5pc0FycmF5KHRoaXMpID8gdGhpcyA6IFtdKSk7XG4gICAgbGV0IGxpbmVzID0gW107XG4gICAgZnVuY3Rpb24gY29uc3VtZU9wQ29kZShvcENvZGUpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gZ2V0UGFyZW50RnJvbUljdUNyZWF0ZU9wQ29kZShvcENvZGUpO1xuICAgICAgICBjb25zdCByZWYgPSBnZXRSZWZGcm9tSWN1Q3JlYXRlT3BDb2RlKG9wQ29kZSk7XG4gICAgICAgIHN3aXRjaCAoZ2V0SW5zdHJ1Y3Rpb25Gcm9tSWN1Q3JlYXRlT3BDb2RlKG9wQ29kZSkpIHtcbiAgICAgICAgICAgIGNhc2UgMCAvKiBBcHBlbmRDaGlsZCAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYChsVmlld1ske3BhcmVudH1dIGFzIEVsZW1lbnQpLmFwcGVuZENoaWxkKGxWaWV3WyR7bGFzdFJlZn1dKWA7XG4gICAgICAgICAgICBjYXNlIDEgLyogQXR0ciAqLzpcbiAgICAgICAgICAgICAgICByZXR1cm4gYChsVmlld1ske3JlZn1dIGFzIEVsZW1lbnQpLnNldEF0dHJpYnV0ZShcIiR7cGFyc2VyLmNvbnN1bWVTdHJpbmcoKX1cIiwgXCIke3BhcnNlci5jb25zdW1lU3RyaW5nKCl9XCIpYDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgT3BDb2RlOiAnICsgZ2V0SW5zdHJ1Y3Rpb25Gcm9tSWN1Q3JlYXRlT3BDb2RlKG9wQ29kZSkpO1xuICAgIH1cbiAgICBsZXQgbGFzdFJlZiA9IC0xO1xuICAgIHdoaWxlIChwYXJzZXIuaGFzTW9yZSgpKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHBhcnNlci5jb25zdW1lTnVtYmVyU3RyaW5nT3JNYXJrZXIoKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBJQ1VfTUFSS0VSKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gcGFyc2VyLmNvbnN1bWVTdHJpbmcoKTtcbiAgICAgICAgICAgIGxhc3RSZWYgPSBwYXJzZXIuY29uc3VtZU51bWJlcigpO1xuICAgICAgICAgICAgbGluZXMucHVzaChgbFZpZXdbJHtsYXN0UmVmfV0gPSBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiJHt0ZXh0fVwiKWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBFTEVNRU5UX01BUktFUikge1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IHBhcnNlci5jb25zdW1lU3RyaW5nKCk7XG4gICAgICAgICAgICBsYXN0UmVmID0gcGFyc2VyLmNvbnN1bWVOdW1iZXIoKTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYGxWaWV3WyR7bGFzdFJlZn1dID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIiR7dGV4dH1cIilgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBsYXN0UmVmID0gcGFyc2VyLmNvbnN1bWVOdW1iZXIoKTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYGxWaWV3WyR7bGFzdFJlZn1dID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoXCIke3ZhbHVlfVwiKWApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBjb25zdW1lT3BDb2RlKHZhbHVlKTtcbiAgICAgICAgICAgIGxpbmUgJiYgbGluZXMucHVzaChsaW5lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCB2YWx1ZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lcztcbn1cbi8qKlxuICogQ29udmVydHMgYEkxOG5SZW1vdmVPcENvZGVzYCBhcnJheSBpbnRvIGEgaHVtYW4gcmVhZGFibGUgZm9ybWF0LlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYXR0YWNoZWQgdG8gdGhlIGBJMThuUmVtb3ZlT3BDb2Rlcy5kZWJ1Z2AgaWYgYG5nRGV2TW9kZWAgaXMgZW5hYmxlZC4gVGhpc1xuICogZnVuY3Rpb24gcHJvdmlkZXMgYSBodW1hbiByZWFkYWJsZSB2aWV3IG9mIHRoZSBvcGNvZGVzLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGRlYnVnZ2luZyB0aGVcbiAqIGFwcGxpY2F0aW9uIGFzIHdlbGwgYXMgd3JpdGluZyBtb3JlIHJlYWRhYmxlIHRlc3RzLlxuICpcbiAqIEBwYXJhbSB0aGlzIGBJMThuUmVtb3ZlT3BDb2Rlc2AgaWYgYXR0YWNoZWQgYXMgYSBtZXRob2QuXG4gKiBAcGFyYW0gb3Bjb2RlcyBgSTE4blJlbW92ZU9wQ29kZXNgIGlmIGludm9rZWQgYXMgYSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gaTE4blJlbW92ZU9wQ29kZXNUb1N0cmluZyhvcGNvZGVzKSB7XG4gICAgY29uc3QgcmVtb3ZlQ29kZXMgPSBvcGNvZGVzIHx8IChBcnJheS5pc0FycmF5KHRoaXMpID8gdGhpcyA6IFtdKTtcbiAgICBsZXQgbGluZXMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbW92ZUNvZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGVPckljdUluZGV4ID0gcmVtb3ZlQ29kZXNbaV07XG4gICAgICAgIGlmIChub2RlT3JJY3VJbmRleCA+IDApIHtcbiAgICAgICAgICAgIC8vIFBvc2l0aXZlIG51bWJlcnMgYXJlIGBSTm9kZWBzLlxuICAgICAgICAgICAgbGluZXMucHVzaChgcmVtb3ZlKGxWaWV3WyR7bm9kZU9ySWN1SW5kZXh9XSlgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5lZ2F0aXZlIG51bWJlcnMgYXJlIElDVXNcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYHJlbW92ZU5lc3RlZElDVSgke35ub2RlT3JJY3VJbmRleH0pYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpbmVzO1xufVxuY2xhc3MgT3BDb2RlUGFyc2VyIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2Rlcykge1xuICAgICAgICB0aGlzLmkgPSAwO1xuICAgICAgICB0aGlzLmNvZGVzID0gY29kZXM7XG4gICAgfVxuICAgIGhhc01vcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmkgPCB0aGlzLmNvZGVzLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3VtZU51bWJlcigpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5jb2Rlc1t0aGlzLmkrK107XG4gICAgICAgIGFzc2VydE51bWJlcih2YWx1ZSwgJ2V4cGVjdGluZyBudW1iZXIgaW4gT3BDb2RlJyk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3VtZVN0cmluZygpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5jb2Rlc1t0aGlzLmkrK107XG4gICAgICAgIGFzc2VydFN0cmluZyh2YWx1ZSwgJ2V4cGVjdGluZyBzdHJpbmcgaW4gT3BDb2RlJyk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3VtZUZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmNvZGVzW3RoaXMuaSsrXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0aW5nIGZ1bmN0aW9uIGluIE9wQ29kZScpO1xuICAgIH1cbiAgICBjb25zdW1lTnVtYmVyT3JTdHJpbmcoKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuY29kZXNbdGhpcy5pKytdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydE51bWJlcih2YWx1ZSwgJ2V4cGVjdGluZyBudW1iZXIgb3Igc3RyaW5nIGluIE9wQ29kZScpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN1bWVOdW1iZXJTdHJpbmdPck1hcmtlcigpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5jb2Rlc1t0aGlzLmkrK107XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgdmFsdWUgPT0gSUNVX01BUktFUiB8fFxuICAgICAgICAgICAgdmFsdWUgPT0gRUxFTUVOVF9NQVJLRVIpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBhc3NlcnROdW1iZXIodmFsdWUsICdleHBlY3RpbmcgbnVtYmVyLCBzdHJpbmcsIElDVV9NQVJLRVIgb3IgRUxFTUVOVF9NQVJLRVIgaW4gT3BDb2RlJyk7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgQklORElOR19SRUdFWFAgPSAv77+9KFxcZCspOj9cXGQq77+9L2dpO1xuY29uc3QgSUNVX1JFR0VYUCA9IC8oe1xccyrvv71cXGQrOj9cXGQq77+9XFxzKixcXHMqXFxTezZ9XFxzKixbXFxzXFxTXSp9KS9naTtcbmNvbnN0IE5FU1RFRF9JQ1UgPSAv77+9KFxcZCsp77+9LztcbmNvbnN0IElDVV9CTE9DS19SRUdFWFAgPSAvXlxccyoo77+9XFxkKzo/XFxkKu+/vSlcXHMqLFxccyooc2VsZWN0fHBsdXJhbClcXHMqLC87XG5jb25zdCBNQVJLRVIgPSBg77+9YDtcbmNvbnN0IFNVQlRFTVBMQVRFX1JFR0VYUCA9IC/vv71cXC8/XFwqKFxcZCs6XFxkKynvv70vZ2k7XG5jb25zdCBQSF9SRUdFWFAgPSAv77+9KFxcLz9bIypdXFxkKyk6P1xcZCrvv70vZ2k7XG4vKipcbiAqIEFuZ3VsYXIgRGFydCBpbnRyb2R1Y2VkICZuZ3NwOyBhcyBhIHBsYWNlaG9sZGVyIGZvciBub24tcmVtb3ZhYmxlIHNwYWNlLCBzZWU6XG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGFydC1sYW5nL2FuZ3VsYXIvYmxvYi8wYmI2MTEzODdkMjlkNjViNWFmN2Y5ZDI1MTVhYjU3MWZkM2ZiZWU0L190ZXN0cy90ZXN0L2NvbXBpbGVyL3ByZXNlcnZlX3doaXRlc3BhY2VfdGVzdC5kYXJ0I0wyNS1MMzJcbiAqIEluIEFuZ3VsYXIgRGFydCAmbmdzcDsgaXMgY29udmVydGVkIHRvIHRoZSAweEU1MDAgUFVBIChQcml2YXRlIFVzZSBBcmVhcykgdW5pY29kZSBjaGFyYWN0ZXJcbiAqIGFuZCBsYXRlciBvbiByZXBsYWNlZCBieSBhIHNwYWNlLiBXZSBhcmUgcmUtaW1wbGVtZW50aW5nIHRoZSBzYW1lIGlkZWEgaGVyZSwgc2luY2UgdHJhbnNsYXRpb25zXG4gKiBtaWdodCBjb250YWluIHRoaXMgc3BlY2lhbCBjaGFyYWN0ZXIuXG4gKi9cbmNvbnN0IE5HU1BfVU5JQ09ERV9SRUdFWFAgPSAvXFx1RTUwMC9nO1xuZnVuY3Rpb24gcmVwbGFjZU5nc3AodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZShOR1NQX1VOSUNPREVfUkVHRVhQLCAnICcpO1xufVxuLyoqXG4gKiBDcmVhdGUgZHluYW1pYyBub2RlcyBmcm9tIGkxOG4gdHJhbnNsYXRpb24gYmxvY2suXG4gKlxuICogLSBUZXh0IG5vZGVzIGFyZSBjcmVhdGVkIHN5bmNocm9ub3VzbHlcbiAqIC0gVE5vZGVzIGFyZSBsaW5rZWQgaW50byB0cmVlIGxhemlseVxuICpcbiAqIEBwYXJhbSB0VmlldyBDdXJyZW50IGBUVmlld2BcbiAqIEBwYXJlbnRUTm9kZUluZGV4IGluZGV4IHRvIHRoZSBwYXJlbnQgVE5vZGUgb2YgdGhpcyBpMThuIGJsb2NrXG4gKiBAcGFyYW0gbFZpZXcgQ3VycmVudCBgTFZpZXdgXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgYMm1ybVpMThuU3RhcnRgIGluc3RydWN0aW9uLlxuICogQHBhcmFtIG1lc3NhZ2UgTWVzc2FnZSB0byB0cmFuc2xhdGUuXG4gKiBAcGFyYW0gc3ViVGVtcGxhdGVJbmRleCBJbmRleCBpbnRvIHRoZSBzdWIgdGVtcGxhdGUgb2YgbWVzc2FnZSB0cmFuc2xhdGlvbi4gKGllIGluIGNhc2Ugb2ZcbiAqICAgICBgbmdJZmApICgtMSBvdGhlcndpc2UpXG4gKi9cbmZ1bmN0aW9uIGkxOG5TdGFydEZpcnN0Q3JlYXRlUGFzcyh0VmlldywgcGFyZW50VE5vZGVJbmRleCwgbFZpZXcsIGluZGV4LCBtZXNzYWdlLCBzdWJUZW1wbGF0ZUluZGV4KSB7XG4gICAgY29uc3Qgcm9vdFROb2RlID0gZ2V0Q3VycmVudFBhcmVudFROb2RlKCk7XG4gICAgY29uc3QgY3JlYXRlT3BDb2RlcyA9IFtdO1xuICAgIGNvbnN0IHVwZGF0ZU9wQ29kZXMgPSBbXTtcbiAgICBjb25zdCBleGlzdGluZ1ROb2RlU3RhY2sgPSBbW11dO1xuICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgYXR0YWNoRGVidWdHZXR0ZXIoY3JlYXRlT3BDb2RlcywgaTE4bkNyZWF0ZU9wQ29kZXNUb1N0cmluZyk7XG4gICAgICAgIGF0dGFjaERlYnVnR2V0dGVyKHVwZGF0ZU9wQ29kZXMsIGkxOG5VcGRhdGVPcENvZGVzVG9TdHJpbmcpO1xuICAgIH1cbiAgICBtZXNzYWdlID0gZ2V0VHJhbnNsYXRpb25Gb3JUZW1wbGF0ZShtZXNzYWdlLCBzdWJUZW1wbGF0ZUluZGV4KTtcbiAgICBjb25zdCBtc2dQYXJ0cyA9IHJlcGxhY2VOZ3NwKG1lc3NhZ2UpLnNwbGl0KFBIX1JFR0VYUCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtc2dQYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdmFsdWUgPSBtc2dQYXJ0c1tpXTtcbiAgICAgICAgaWYgKChpICYgMSkgPT09IDApIHtcbiAgICAgICAgICAgIC8vIEV2ZW4gaW5kZXhlcyBhcmUgdGV4dCAoaW5jbHVkaW5nIGJpbmRpbmdzICYgSUNVIGV4cHJlc3Npb25zKVxuICAgICAgICAgICAgY29uc3QgcGFydHMgPSBpMThuUGFyc2VUZXh0SW50b1BhcnRzQW5kSUNVKHZhbHVlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgcGFydCA9IHBhcnRzW2pdO1xuICAgICAgICAgICAgICAgIGlmICgoaiAmIDEpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGBqYCBpcyBvZGQgdGhlcmVmb3JlIGBwYXJ0YCBpcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IHBhcnQ7XG4gICAgICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRTdHJpbmcodGV4dCwgJ1BhcnNlZCBJQ1UgcGFydCBzaG91bGQgYmUgc3RyaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0ICE9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaTE4blN0YXJ0Rmlyc3RDcmVhdGVQYXNzUHJvY2Vzc1RleHROb2RlKHRWaWV3LCByb290VE5vZGUsIGV4aXN0aW5nVE5vZGVTdGFja1swXSwgY3JlYXRlT3BDb2RlcywgdXBkYXRlT3BDb2RlcywgbFZpZXcsIHRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBgamAgaXMgRXZlbiB0aGVyZWZvciBgcGFydGAgaXMgYW4gYElDVUV4cHJlc3Npb25gXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGljdUV4cHJlc3Npb24gPSBwYXJ0O1xuICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZnkgdGhhdCBJQ1UgZXhwcmVzc2lvbiBoYXMgdGhlIHJpZ2h0IHNoYXBlLiBUcmFuc2xhdGlvbnMgbWlnaHQgY29udGFpbiBpbnZhbGlkXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0cnVjdGlvbnMgKHdoaWxlIG9yaWdpbmFsIG1lc3NhZ2VzIHdlcmUgY29ycmVjdCksIHNvIElDVSBwYXJzaW5nIGF0IHJ1bnRpbWUgbWF5XG4gICAgICAgICAgICAgICAgICAgIC8vIG5vdCBzdWNjZWVkICh0aHVzIGBpY3VFeHByZXNzaW9uYCByZW1haW5zIGEgc3RyaW5nKS5cbiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZTogd2UgaW50ZW50aW9uYWxseSByZXRhaW4gdGhlIGVycm9yIGhlcmUgYnkgbm90IHVzaW5nIGBuZ0Rldk1vZGVgLCBiZWNhdXNlXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBjYW4gY2hhbmdlIGJhc2VkIG9uIHRoZSBsb2NhbGUgYW5kIHVzZXJzIGFyZW4ndCBndWFyYW50ZWVkIHRvIGhpdFxuICAgICAgICAgICAgICAgICAgICAvLyBhbiBpbnZhbGlkIHN0cmluZyB3aGlsZSB0aGV5J3JlIGRldmVsb3BpbmcuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaWN1RXhwcmVzc2lvbiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHBhcnNlIElDVSBleHByZXNzaW9uIGluIFwiJHttZXNzYWdlfVwiIG1lc3NhZ2UuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWN1Q29udGFpbmVyVE5vZGUgPSBjcmVhdGVUTm9kZUFuZEFkZE9wQ29kZSh0Vmlldywgcm9vdFROb2RlLCBleGlzdGluZ1ROb2RlU3RhY2tbMF0sIGxWaWV3LCBjcmVhdGVPcENvZGVzLCBuZ0Rldk1vZGUgPyBgSUNVICR7aW5kZXh9OiR7aWN1RXhwcmVzc2lvbi5tYWluQmluZGluZ31gIDogJycsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpY3VOb2RlSW5kZXggPSBpY3VDb250YWluZXJUTm9kZS5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRHcmVhdGVyVGhhbk9yRXF1YWwoaWN1Tm9kZUluZGV4LCBIRUFERVJfT0ZGU0VULCAnSW5kZXggbXVzdCBiZSBpbiBhYnNvbHV0ZSBMVmlldyBvZmZzZXQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWN1U3RhcnQodFZpZXcsIGxWaWV3LCB1cGRhdGVPcENvZGVzLCBwYXJlbnRUTm9kZUluZGV4LCBpY3VFeHByZXNzaW9uLCBpY3VOb2RlSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE9kZCBpbmRleGVzIGFyZSBwbGFjZWhvbGRlcnMgKGVsZW1lbnRzIGFuZCBzdWItdGVtcGxhdGVzKVxuICAgICAgICAgICAgLy8gQXQgdGhpcyBwb2ludCB2YWx1ZSBpcyBzb21ldGhpbmcgbGlrZTogJy8jMToyJyAob3JpZ2luYWxseSBjb21pbmcgZnJvbSAn77+9LyMxOjLvv70nKVxuICAgICAgICAgICAgY29uc3QgaXNDbG9zaW5nID0gdmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gNDcgLyogU0xBU0ggKi87XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gdmFsdWUuY2hhckNvZGVBdChpc0Nsb3NpbmcgPyAxIDogMCk7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0T25lT2YodHlwZSwgNDIgLyogU1RBUiAqLywgMzUgLyogSEFTSCAqLyk7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IEhFQURFUl9PRkZTRVQgKyBOdW1iZXIucGFyc2VJbnQodmFsdWUuc3Vic3RyaW5nKChpc0Nsb3NpbmcgPyAyIDogMSkpKTtcbiAgICAgICAgICAgIGlmIChpc0Nsb3NpbmcpIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ1ROb2RlU3RhY2suc2hpZnQoKTtcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50VE5vZGUoZ2V0Q3VycmVudFBhcmVudFROb2RlKCksIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHROb2RlID0gY3JlYXRlVE5vZGVQbGFjZWhvbGRlcih0VmlldywgZXhpc3RpbmdUTm9kZVN0YWNrWzBdLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdUTm9kZVN0YWNrLnVuc2hpZnQoW10pO1xuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRUTm9kZSh0Tm9kZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdFZpZXcuZGF0YVtpbmRleF0gPSB7XG4gICAgICAgIGNyZWF0ZTogY3JlYXRlT3BDb2RlcyxcbiAgICAgICAgdXBkYXRlOiB1cGRhdGVPcENvZGVzLFxuICAgIH07XG59XG4vKipcbiAqIEFsbG9jYXRlIHNwYWNlIGluIGkxOG4gUmFuZ2UgYWRkIGNyZWF0ZSBPcENvZGUgaW5zdHJ1Y3Rpb24gdG8gY3JlYXRlIGEgdGV4dCBvciBjb21tZW50IG5vZGUuXG4gKlxuICogQHBhcmFtIHRWaWV3IEN1cnJlbnQgYFRWaWV3YCBuZWVkZWQgdG8gYWxsb2NhdGUgc3BhY2UgaW4gaTE4biByYW5nZS5cbiAqIEBwYXJhbSByb290VE5vZGUgUm9vdCBgVE5vZGVgIG9mIHRoZSBpMThuIGJsb2NrLiBUaGlzIG5vZGUgZGV0ZXJtaW5lcyBpZiB0aGUgbmV3IFROb2RlIHdpbGwgYmVcbiAqICAgICBhZGRlZCBhcyBwYXJ0IG9mIHRoZSBgaTE4blN0YXJ0YCBpbnN0cnVjdGlvbiBvciBhcyBwYXJ0IG9mIHRoZSBgVE5vZGUuaW5zZXJ0QmVmb3JlSW5kZXhgLlxuICogQHBhcmFtIGV4aXN0aW5nVE5vZGVzIGludGVybmFsIHN0YXRlIGZvciBgYWRkVE5vZGVBbmRVcGRhdGVJbnNlcnRCZWZvcmVJbmRleGAuXG4gKiBAcGFyYW0gbFZpZXcgQ3VycmVudCBgTFZpZXdgIG5lZWRlZCB0byBhbGxvY2F0ZSBzcGFjZSBpbiBpMThuIHJhbmdlLlxuICogQHBhcmFtIGNyZWF0ZU9wQ29kZXMgQXJyYXkgc3RvcmluZyBgSTE4bkNyZWF0ZU9wQ29kZXNgIHdoZXJlIG5ldyBvcENvZGVzIHdpbGwgYmUgYWRkZWQuXG4gKiBAcGFyYW0gdGV4dCBUZXh0IHRvIGJlIGFkZGVkIHdoZW4gdGhlIGBUZXh0YCBvciBgQ29tbWVudGAgbm9kZSB3aWxsIGJlIGNyZWF0ZWQuXG4gKiBAcGFyYW0gaXNJQ1UgdHJ1ZSBpZiBhIGBDb21tZW50YCBub2RlIGZvciBJQ1UgKGluc3RlYWQgb2YgYFRleHRgKSBub2RlIHNob3VsZCBiZSBjcmVhdGVkLlxuICovXG5mdW5jdGlvbiBjcmVhdGVUTm9kZUFuZEFkZE9wQ29kZSh0Vmlldywgcm9vdFROb2RlLCBleGlzdGluZ1ROb2RlcywgbFZpZXcsIGNyZWF0ZU9wQ29kZXMsIHRleHQsIGlzSUNVKSB7XG4gICAgY29uc3QgaTE4bk5vZGVJZHggPSBhbGxvY0V4cGFuZG8odFZpZXcsIGxWaWV3LCAxLCBudWxsKTtcbiAgICBsZXQgb3BDb2RlID0gaTE4bk5vZGVJZHggPDwgSTE4bkNyZWF0ZU9wQ29kZS5TSElGVDtcbiAgICBsZXQgcGFyZW50VE5vZGUgPSBnZXRDdXJyZW50UGFyZW50VE5vZGUoKTtcbiAgICBpZiAocm9vdFROb2RlID09PSBwYXJlbnRUTm9kZSkge1xuICAgICAgICAvLyBGSVhNRShtaXNrbyk6IEEgbnVsbCBgcGFyZW50VE5vZGVgIHNob3VsZCByZXByZXNlbnQgd2hlbiB3ZSBmYWxsIG9mIHRoZSBgTFZpZXdgIGJvdW5kYXJ5LlxuICAgICAgICAvLyAodGhlcmUgaXMgbm8gcGFyZW50KSwgYnV0IGluIHNvbWUgY2lyY3Vtc3RhbmNlcyAoYmVjYXVzZSB3ZSBhcmUgaW5jb25zaXN0ZW50IGFib3V0IGhvdyB3ZSBzZXRcbiAgICAgICAgLy8gYHByZXZpb3VzT3JQYXJlbnRUTm9kZWApIGl0IGNvdWxkIHBvaW50IHRvIGByb290VE5vZGVgIFNvIHRoaXMgaXMgYSB3b3JrIGFyb3VuZC5cbiAgICAgICAgcGFyZW50VE5vZGUgPSBudWxsO1xuICAgIH1cbiAgICBpZiAocGFyZW50VE5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCB0aGF0IG1lYW5zIHRoYXQgd2UgY2FuIGVhZ2VybHkgYWRkIG5vZGVzLlxuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgcGFyZW50IHRoYW4gdGhlc2Ugbm9kZXMgY2FuJ3QgYmUgYWRkZWQgbm93IChhcyB0aGUgcGFyZW50IGhhcyBub3QgYmVlbiBjcmVhdGVkXG4gICAgICAgIC8vIHlldCkgYW5kIGluc3RlYWQgdGhlIGBwYXJlbnRUTm9kZWAgaXMgcmVzcG9uc2libGUgZm9yIGFkZGluZyBpdC4gU2VlXG4gICAgICAgIC8vIGBUTm9kZS5pbnNlcnRCZWZvcmVJbmRleGBcbiAgICAgICAgb3BDb2RlIHw9IEkxOG5DcmVhdGVPcENvZGUuQVBQRU5EX0VBR0VSTFk7XG4gICAgfVxuICAgIGlmIChpc0lDVSkge1xuICAgICAgICBvcENvZGUgfD0gSTE4bkNyZWF0ZU9wQ29kZS5DT01NRU5UO1xuICAgICAgICBlbnN1cmVJY3VDb250YWluZXJWaXNpdG9yTG9hZGVkKGxvYWRJY3VDb250YWluZXJWaXNpdG9yKTtcbiAgICB9XG4gICAgY3JlYXRlT3BDb2Rlcy5wdXNoKG9wQ29kZSwgdGV4dCA9PT0gbnVsbCA/ICcnIDogdGV4dCk7XG4gICAgLy8gV2Ugc3RvcmUgYHt7P319YCBzbyB0aGF0IHdoZW4gbG9va2luZyBhdCBkZWJ1ZyBgVE5vZGVUeXBlLnRlbXBsYXRlYCB3ZSBjYW4gc2VlIHdoZXJlIHRoZVxuICAgIC8vIGJpbmRpbmdzIGFyZS5cbiAgICBjb25zdCB0Tm9kZSA9IGNyZWF0ZVROb2RlQXRJbmRleCh0VmlldywgaTE4bk5vZGVJZHgsIGlzSUNVID8gMzIgLyogSWN1ICovIDogMSAvKiBUZXh0ICovLCB0ZXh0ID09PSBudWxsID8gKG5nRGV2TW9kZSA/ICd7ez99fScgOiAnJykgOiB0ZXh0LCBudWxsKTtcbiAgICBhZGRUTm9kZUFuZFVwZGF0ZUluc2VydEJlZm9yZUluZGV4KGV4aXN0aW5nVE5vZGVzLCB0Tm9kZSk7XG4gICAgY29uc3QgdE5vZGVJZHggPSB0Tm9kZS5pbmRleDtcbiAgICBzZXRDdXJyZW50VE5vZGUodE5vZGUsIGZhbHNlIC8qIFRleHQgbm9kZXMgYXJlIHNlbGYgY2xvc2luZyAqLyk7XG4gICAgaWYgKHBhcmVudFROb2RlICE9PSBudWxsICYmIHJvb3RUTm9kZSAhPT0gcGFyZW50VE5vZGUpIHtcbiAgICAgICAgLy8gV2UgYXJlIGEgY2hpbGQgb2YgZGVlcGVyIG5vZGUgKHJhdGhlciB0aGFuIGEgZGlyZWN0IGNoaWxkIG9mIGBpMThuU3RhcnRgIGluc3RydWN0aW9uLilcbiAgICAgICAgLy8gV2UgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWRkIG91cnNlbHZlcyB0byB0aGUgcGFyZW50LlxuICAgICAgICBzZXRUTm9kZUluc2VydEJlZm9yZUluZGV4KHBhcmVudFROb2RlLCB0Tm9kZUlkeCk7XG4gICAgfVxuICAgIHJldHVybiB0Tm9kZTtcbn1cbi8qKlxuICogUHJvY2Vzc2VzIHRleHQgbm9kZSBpbiBpMThuIGJsb2NrLlxuICpcbiAqIFRleHQgbm9kZXMgY2FuIGhhdmU6XG4gKiAtIENyZWF0ZSBpbnN0cnVjdGlvbiBpbiBgY3JlYXRlT3BDb2Rlc2AgZm9yIGNyZWF0aW5nIHRoZSB0ZXh0IG5vZGUuXG4gKiAtIEFsbG9jYXRlIHNwZWMgZm9yIHRleHQgbm9kZSBpbiBpMThuIHJhbmdlIG9mIGBMVmlld2BcbiAqIC0gSWYgY29udGFpbnMgYmluZGluZzpcbiAqICAgIC0gYmluZGluZ3MgPT4gYWxsb2NhdGUgc3BhY2UgaW4gaTE4biByYW5nZSBvZiBgTFZpZXdgIHRvIHN0b3JlIHRoZSBiaW5kaW5nIHZhbHVlLlxuICogICAgLSBwb3B1bGF0ZSBgdXBkYXRlT3BDb2Rlc2Agd2l0aCB1cGRhdGUgaW5zdHJ1Y3Rpb25zLlxuICpcbiAqIEBwYXJhbSB0VmlldyBDdXJyZW50IGBUVmlld2BcbiAqIEBwYXJhbSByb290VE5vZGUgUm9vdCBgVE5vZGVgIG9mIHRoZSBpMThuIGJsb2NrLiBUaGlzIG5vZGUgZGV0ZXJtaW5lcyBpZiB0aGUgbmV3IFROb2RlIHdpbGxcbiAqICAgICBiZSBhZGRlZCBhcyBwYXJ0IG9mIHRoZSBgaTE4blN0YXJ0YCBpbnN0cnVjdGlvbiBvciBhcyBwYXJ0IG9mIHRoZVxuICogICAgIGBUTm9kZS5pbnNlcnRCZWZvcmVJbmRleGAuXG4gKiBAcGFyYW0gZXhpc3RpbmdUTm9kZXMgaW50ZXJuYWwgc3RhdGUgZm9yIGBhZGRUTm9kZUFuZFVwZGF0ZUluc2VydEJlZm9yZUluZGV4YC5cbiAqIEBwYXJhbSBjcmVhdGVPcENvZGVzIExvY2F0aW9uIHdoZXJlIHRoZSBjcmVhdGlvbiBPcENvZGVzIHdpbGwgYmUgc3RvcmVkLlxuICogQHBhcmFtIGxWaWV3IEN1cnJlbnQgYExWaWV3YFxuICogQHBhcmFtIHRleHQgVGhlIHRyYW5zbGF0ZWQgdGV4dCAod2hpY2ggbWF5IGNvbnRhaW4gYmluZGluZylcbiAqL1xuZnVuY3Rpb24gaTE4blN0YXJ0Rmlyc3RDcmVhdGVQYXNzUHJvY2Vzc1RleHROb2RlKHRWaWV3LCByb290VE5vZGUsIGV4aXN0aW5nVE5vZGVzLCBjcmVhdGVPcENvZGVzLCB1cGRhdGVPcENvZGVzLCBsVmlldywgdGV4dCkge1xuICAgIGNvbnN0IGhhc0JpbmRpbmcgPSB0ZXh0Lm1hdGNoKEJJTkRJTkdfUkVHRVhQKTtcbiAgICBjb25zdCB0Tm9kZSA9IGNyZWF0ZVROb2RlQW5kQWRkT3BDb2RlKHRWaWV3LCByb290VE5vZGUsIGV4aXN0aW5nVE5vZGVzLCBsVmlldywgY3JlYXRlT3BDb2RlcywgaGFzQmluZGluZyA/IG51bGwgOiB0ZXh0LCBmYWxzZSk7XG4gICAgaWYgKGhhc0JpbmRpbmcpIHtcbiAgICAgICAgZ2VuZXJhdGVCaW5kaW5nVXBkYXRlT3BDb2Rlcyh1cGRhdGVPcENvZGVzLCB0ZXh0LCB0Tm9kZS5pbmRleCwgbnVsbCwgMCwgbnVsbCk7XG4gICAgfVxufVxuLyoqXG4gKiBTZWUgYGkxOG5BdHRyaWJ1dGVzYCBhYm92ZS5cbiAqL1xuZnVuY3Rpb24gaTE4bkF0dHJpYnV0ZXNGaXJzdFBhc3ModFZpZXcsIGluZGV4LCB2YWx1ZXMpIHtcbiAgICBjb25zdCBwcmV2aW91c0VsZW1lbnQgPSBnZXRDdXJyZW50VE5vZGUoKTtcbiAgICBjb25zdCBwcmV2aW91c0VsZW1lbnRJbmRleCA9IHByZXZpb3VzRWxlbWVudC5pbmRleDtcbiAgICBjb25zdCB1cGRhdGVPcENvZGVzID0gW107XG4gICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICBhdHRhY2hEZWJ1Z0dldHRlcih1cGRhdGVPcENvZGVzLCBpMThuVXBkYXRlT3BDb2Rlc1RvU3RyaW5nKTtcbiAgICB9XG4gICAgaWYgKHRWaWV3LmZpcnN0Q3JlYXRlUGFzcyAmJiB0Vmlldy5kYXRhW2luZGV4XSA9PT0gbnVsbCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgY29uc3QgYXR0ck5hbWUgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdmFsdWVzW2kgKyAxXTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlICE9PSAnJykge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGF0dHJpYnV0ZSB2YWx1ZSBjb250YWlucyBhbiBJQ1UgYW5kIHRocm93IGFuIGVycm9yIGlmIHRoYXQncyB0aGUgY2FzZS5cbiAgICAgICAgICAgICAgICAvLyBJQ1VzIGluIGVsZW1lbnQgYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAgICAgICAgICAgICAvLyBOb3RlOiB3ZSBpbnRlbnRpb25hbGx5IHJldGFpbiB0aGUgZXJyb3IgaGVyZSBieSBub3QgdXNpbmcgYG5nRGV2TW9kZWAsIGJlY2F1c2VcbiAgICAgICAgICAgICAgICAvLyB0aGUgYHZhbHVlYCBjYW4gY2hhbmdlIGJhc2VkIG9uIHRoZSBsb2NhbGUgYW5kIHVzZXJzIGFyZW4ndCBndWFyYW50ZWVkIHRvIGhpdFxuICAgICAgICAgICAgICAgIC8vIGFuIGludmFsaWQgc3RyaW5nIHdoaWxlIHRoZXkncmUgZGV2ZWxvcGluZy5cbiAgICAgICAgICAgICAgICBpZiAoSUNVX1JFR0VYUC50ZXN0KG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSUNVIGV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkIGluIGF0dHJpYnV0ZXMuIE1lc3NhZ2U6IFwiJHttZXNzYWdlfVwiLmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpMThuIGF0dHJpYnV0ZXMgdGhhdCBoaXQgdGhpcyBjb2RlIHBhdGggYXJlIGd1YXJhbnRlZWQgdG8gaGF2ZSBiaW5kaW5ncywgYmVjYXVzZVxuICAgICAgICAgICAgICAgIC8vIHRoZSBjb21waWxlciB0cmVhdHMgc3RhdGljIGkxOG4gYXR0cmlidXRlcyBhcyByZWd1bGFyIGF0dHJpYnV0ZSBiaW5kaW5ncy5cbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGlzIG1heSBub3QgYmUgdGhlIGZpcnN0IGkxOG4gYXR0cmlidXRlIG9uIHRoaXMgZWxlbWVudCB3ZSBuZWVkIHRvIHBhc3MgaW4gaG93XG4gICAgICAgICAgICAgICAgLy8gbWFueSBwcmV2aW91cyBiaW5kaW5ncyB0aGVyZSBoYXZlIGFscmVhZHkgYmVlbi5cbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUJpbmRpbmdVcGRhdGVPcENvZGVzKHVwZGF0ZU9wQ29kZXMsIG1lc3NhZ2UsIHByZXZpb3VzRWxlbWVudEluZGV4LCBhdHRyTmFtZSwgY291bnRCaW5kaW5ncyh1cGRhdGVPcENvZGVzKSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdFZpZXcuZGF0YVtpbmRleF0gPSB1cGRhdGVPcENvZGVzO1xuICAgIH1cbn1cbi8qKlxuICogR2VuZXJhdGUgdGhlIE9wQ29kZXMgdG8gdXBkYXRlIHRoZSBiaW5kaW5ncyBvZiBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gdXBkYXRlT3BDb2RlcyBQbGFjZSB3aGVyZSB0aGUgdXBkYXRlIG9wY29kZXMgd2lsbCBiZSBzdG9yZWQuXG4gKiBAcGFyYW0gc3RyIFRoZSBzdHJpbmcgY29udGFpbmluZyB0aGUgYmluZGluZ3MuXG4gKiBAcGFyYW0gZGVzdGluYXRpb25Ob2RlIEluZGV4IG9mIHRoZSBkZXN0aW5hdGlvbiBub2RlIHdoaWNoIHdpbGwgcmVjZWl2ZSB0aGUgYmluZGluZy5cbiAqIEBwYXJhbSBhdHRyTmFtZSBOYW1lIG9mIHRoZSBhdHRyaWJ1dGUsIGlmIHRoZSBzdHJpbmcgYmVsb25ncyB0byBhbiBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0gc2FuaXRpemVGbiBTYW5pdGl6YXRpb24gZnVuY3Rpb24gdXNlZCB0byBzYW5pdGl6ZSB0aGUgc3RyaW5nIGFmdGVyIHVwZGF0ZSwgaWYgbmVjZXNzYXJ5LlxuICogQHBhcmFtIGJpbmRpbmdTdGFydCBUaGUgbFZpZXcgaW5kZXggb2YgdGhlIG5leHQgZXhwcmVzc2lvbiB0aGF0IGNhbiBiZSBib3VuZCB2aWEgYW4gb3BDb2RlLlxuICogQHJldHVybnMgVGhlIG1hc2sgdmFsdWUgZm9yIHRoZXNlIGJpbmRpbmdzXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlQmluZGluZ1VwZGF0ZU9wQ29kZXModXBkYXRlT3BDb2Rlcywgc3RyLCBkZXN0aW5hdGlvbk5vZGUsIGF0dHJOYW1lLCBiaW5kaW5nU3RhcnQsIHNhbml0aXplRm4pIHtcbiAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgYXNzZXJ0R3JlYXRlclRoYW5PckVxdWFsKGRlc3RpbmF0aW9uTm9kZSwgSEVBREVSX09GRlNFVCwgJ0luZGV4IG11c3QgYmUgaW4gYWJzb2x1dGUgTFZpZXcgb2Zmc2V0Jyk7XG4gICAgY29uc3QgbWFza0luZGV4ID0gdXBkYXRlT3BDb2Rlcy5sZW5ndGg7IC8vIExvY2F0aW9uIG9mIG1hc2tcbiAgICBjb25zdCBzaXplSW5kZXggPSBtYXNrSW5kZXggKyAxOyAvLyBsb2NhdGlvbiBvZiBzaXplIGZvciBza2lwcGluZ1xuICAgIHVwZGF0ZU9wQ29kZXMucHVzaChudWxsLCBudWxsKTsgLy8gQWxsb2Mgc3BhY2UgZm9yIG1hc2sgYW5kIHNpemVcbiAgICBjb25zdCBzdGFydEluZGV4ID0gbWFza0luZGV4ICsgMjsgLy8gbG9jYXRpb24gb2YgZmlyc3QgYWxsb2NhdGlvbi5cbiAgICBpZiAobmdEZXZNb2RlKSB7XG4gICAgICAgIGF0dGFjaERlYnVnR2V0dGVyKHVwZGF0ZU9wQ29kZXMsIGkxOG5VcGRhdGVPcENvZGVzVG9TdHJpbmcpO1xuICAgIH1cbiAgICBjb25zdCB0ZXh0UGFydHMgPSBzdHIuc3BsaXQoQklORElOR19SRUdFWFApO1xuICAgIGxldCBtYXNrID0gMDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRleHRQYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb25zdCB0ZXh0VmFsdWUgPSB0ZXh0UGFydHNbal07XG4gICAgICAgIGlmIChqICYgMSkge1xuICAgICAgICAgICAgLy8gT2RkIGluZGV4ZXMgYXJlIGJpbmRpbmdzXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBiaW5kaW5nU3RhcnQgKyBwYXJzZUludCh0ZXh0VmFsdWUsIDEwKTtcbiAgICAgICAgICAgIHVwZGF0ZU9wQ29kZXMucHVzaCgtMSAtIGJpbmRpbmdJbmRleCk7XG4gICAgICAgICAgICBtYXNrID0gbWFzayB8IHRvTWFza0JpdChiaW5kaW5nSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRleHRWYWx1ZSAhPT0gJycpIHtcbiAgICAgICAgICAgIC8vIEV2ZW4gaW5kZXhlcyBhcmUgdGV4dFxuICAgICAgICAgICAgdXBkYXRlT3BDb2Rlcy5wdXNoKHRleHRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlT3BDb2Rlcy5wdXNoKGRlc3RpbmF0aW9uTm9kZSA8PCAyIC8qIFNISUZUX1JFRiAqLyB8XG4gICAgICAgIChhdHRyTmFtZSA/IDEgLyogQXR0ciAqLyA6IDAgLyogVGV4dCAqLykpO1xuICAgIGlmIChhdHRyTmFtZSkge1xuICAgICAgICB1cGRhdGVPcENvZGVzLnB1c2goYXR0ck5hbWUsIHNhbml0aXplRm4pO1xuICAgIH1cbiAgICB1cGRhdGVPcENvZGVzW21hc2tJbmRleF0gPSBtYXNrO1xuICAgIHVwZGF0ZU9wQ29kZXNbc2l6ZUluZGV4XSA9IHVwZGF0ZU9wQ29kZXMubGVuZ3RoIC0gc3RhcnRJbmRleDtcbiAgICByZXR1cm4gbWFzaztcbn1cbi8qKlxuICogQ291bnQgdGhlIG51bWJlciBvZiBiaW5kaW5ncyBpbiB0aGUgZ2l2ZW4gYG9wQ29kZXNgLlxuICpcbiAqIEl0IGNvdWxkIGJlIHBvc3NpYmxlIHRvIHNwZWVkIHRoaXMgdXAsIGJ5IHBhc3NpbmcgdGhlIG51bWJlciBvZiBiaW5kaW5ncyBmb3VuZCBiYWNrIGZyb21cbiAqIGBnZW5lcmF0ZUJpbmRpbmdVcGRhdGVPcENvZGVzKClgIHRvIGBpMThuQXR0cmlidXRlc0ZpcnN0UGFzcygpYCBidXQgdGhpcyB3b3VsZCB0aGVuIHJlcXVpcmUgbW9yZVxuICogY29tcGxleGl0eSBpbiB0aGUgY29kZSBhbmQvb3IgdHJhbnNpZW50IG9iamVjdHMgdG8gYmUgY3JlYXRlZC5cbiAqXG4gKiBTaW5jZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkIG9uY2Ugd2hlbiB0aGUgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLCBpcyB0cml2aWFsIGluIHRoZVxuICogZmlyc3QgaW5zdGFuY2UgKHNpbmNlIGBvcENvZGVzYCB3aWxsIGJlIGFuIGVtcHR5IGFycmF5KSwgYW5kIGl0IGlzIG5vdCBjb21tb24gZm9yIGVsZW1lbnRzIHRvXG4gKiBjb250YWluIG11bHRpcGxlIGkxOG4gYm91bmQgYXR0cmlidXRlcywgaXQgc2VlbXMgbGlrZSB0aGlzIGlzIGEgcmVhc29uYWJsZSBjb21wcm9taXNlLlxuICovXG5mdW5jdGlvbiBjb3VudEJpbmRpbmdzKG9wQ29kZXMpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3BDb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBvcENvZGUgPSBvcENvZGVzW2ldO1xuICAgICAgICAvLyBCaW5kaW5ncyBhcmUgbmVnYXRpdmUgbnVtYmVycy5cbiAgICAgICAgaWYgKHR5cGVvZiBvcENvZGUgPT09ICdudW1iZXInICYmIG9wQ29kZSA8IDApIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xufVxuLyoqXG4gKiBDb252ZXJ0IGJpbmRpbmcgaW5kZXggdG8gbWFzayBiaXQuXG4gKlxuICogRWFjaCBpbmRleCByZXByZXNlbnRzIGEgc2luZ2xlIGJpdCBvbiB0aGUgYml0LW1hc2suIEJlY2F1c2UgYml0LW1hc2sgb25seSBoYXMgMzIgYml0cywgd2UgbWFrZVxuICogdGhlIDMybmQgYml0IHNoYXJlIGFsbCBtYXNrcyBmb3IgYWxsIGJpbmRpbmdzIGhpZ2hlciB0aGFuIDMyLiBTaW5jZSBpdCBpcyBleHRyZW1lbHkgcmFyZSB0b1xuICogaGF2ZSBtb3JlIHRoYW4gMzIgYmluZGluZ3MgdGhpcyB3aWxsIGJlIGhpdCB2ZXJ5IHJhcmVseS4gVGhlIGRvd25zaWRlIG9mIGhpdHRpbmcgdGhpcyBjb3JuZXJcbiAqIGNhc2UgaXMgdGhhdCB3ZSB3aWxsIGV4ZWN1dGUgYmluZGluZyBjb2RlIG1vcmUgb2Z0ZW4gdGhhbiBuZWNlc3NhcnkuIChwZW5hbHR5IG9mIHBlcmZvcm1hbmNlKVxuICovXG5mdW5jdGlvbiB0b01hc2tCaXQoYmluZGluZ0luZGV4KSB7XG4gICAgcmV0dXJuIDEgPDwgTWF0aC5taW4oYmluZGluZ0luZGV4LCAzMSk7XG59XG5mdW5jdGlvbiBpc1Jvb3RUZW1wbGF0ZU1lc3NhZ2Uoc3ViVGVtcGxhdGVJbmRleCkge1xuICAgIHJldHVybiBzdWJUZW1wbGF0ZUluZGV4ID09PSAtMTtcbn1cbi8qKlxuICogUmVtb3ZlcyBldmVyeXRoaW5nIGluc2lkZSB0aGUgc3ViLXRlbXBsYXRlcyBvZiBhIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUlubmVyVGVtcGxhdGVUcmFuc2xhdGlvbihtZXNzYWdlKSB7XG4gICAgbGV0IG1hdGNoO1xuICAgIGxldCByZXMgPSAnJztcbiAgICBsZXQgaW5kZXggPSAwO1xuICAgIGxldCBpblRlbXBsYXRlID0gZmFsc2U7XG4gICAgbGV0IHRhZ01hdGNoZWQ7XG4gICAgd2hpbGUgKChtYXRjaCA9IFNVQlRFTVBMQVRFX1JFR0VYUC5leGVjKG1lc3NhZ2UpKSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoIWluVGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHJlcyArPSBtZXNzYWdlLnN1YnN0cmluZyhpbmRleCwgbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgICAgICAgICAgdGFnTWF0Y2hlZCA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgaW5UZW1wbGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAobWF0Y2hbMF0gPT09IGAke01BUktFUn0vKiR7dGFnTWF0Y2hlZH0ke01BUktFUn1gKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAgICAgICAgICAgICBpblRlbXBsYXRlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmdEZXZNb2RlICYmXG4gICAgICAgIGFzc2VydEVxdWFsKGluVGVtcGxhdGUsIGZhbHNlLCBgVGFnIG1pc21hdGNoOiB1bmFibGUgdG8gZmluZCB0aGUgZW5kIG9mIHRoZSBzdWItdGVtcGxhdGUgaW4gdGhlIHRyYW5zbGF0aW9uIFwiJHttZXNzYWdlfVwiYCk7XG4gICAgcmVzICs9IG1lc3NhZ2Uuc3Vic3RyKGluZGV4KTtcbiAgICByZXR1cm4gcmVzO1xufVxuLyoqXG4gKiBFeHRyYWN0cyBhIHBhcnQgb2YgYSBtZXNzYWdlIGFuZCByZW1vdmVzIHRoZSByZXN0LlxuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgZm9yIGV4dHJhY3RpbmcgYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIGFzc29jaWF0ZWQgd2l0aCBhIHRlbXBsYXRlLiBBXG4gKiB0cmFuc2xhdGVkIG1lc3NhZ2UgY2FuIHNwYW4gbXVsdGlwbGUgdGVtcGxhdGVzLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGBcbiAqIDxkaXYgaTE4bj5UcmFuc2xhdGUgPHNwYW4gKm5nSWY+bWU8L3NwYW4+ITwvZGl2PlxuICogYGBgXG4gKlxuICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gY3JvcFxuICogQHBhcmFtIHN1YlRlbXBsYXRlSW5kZXggSW5kZXggb2YgdGhlIHN1Yi10ZW1wbGF0ZSB0byBleHRyYWN0LiBJZiB1bmRlZmluZWQgaXQgcmV0dXJucyB0aGVcbiAqIGV4dGVybmFsIHRlbXBsYXRlIGFuZCByZW1vdmVzIGFsbCBzdWItdGVtcGxhdGVzLlxuICovXG5mdW5jdGlvbiBnZXRUcmFuc2xhdGlvbkZvclRlbXBsYXRlKG1lc3NhZ2UsIHN1YlRlbXBsYXRlSW5kZXgpIHtcbiAgICBpZiAoaXNSb290VGVtcGxhdGVNZXNzYWdlKHN1YlRlbXBsYXRlSW5kZXgpKSB7XG4gICAgICAgIC8vIFdlIHdhbnQgdGhlIHJvb3QgdGVtcGxhdGUgbWVzc2FnZSwgaWdub3JlIGFsbCBzdWItdGVtcGxhdGVzXG4gICAgICAgIHJldHVybiByZW1vdmVJbm5lclRlbXBsYXRlVHJhbnNsYXRpb24obWVzc2FnZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBXZSB3YW50IGEgc3BlY2lmaWMgc3ViLXRlbXBsYXRlXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gbWVzc2FnZS5pbmRleE9mKGA6JHtzdWJUZW1wbGF0ZUluZGV4fSR7TUFSS0VSfWApICsgMiArIHN1YlRlbXBsYXRlSW5kZXgudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGVuZCA9IG1lc3NhZ2Uuc2VhcmNoKG5ldyBSZWdFeHAoYCR7TUFSS0VSfVxcXFwvXFxcXCpcXFxcZCs6JHtzdWJUZW1wbGF0ZUluZGV4fSR7TUFSS0VSfWApKTtcbiAgICAgICAgcmV0dXJuIHJlbW92ZUlubmVyVGVtcGxhdGVUcmFuc2xhdGlvbihtZXNzYWdlLnN1YnN0cmluZyhzdGFydCwgZW5kKSk7XG4gICAgfVxufVxuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgT3BDb2RlcyBmb3IgSUNVIGV4cHJlc3Npb25zLlxuICpcbiAqIEBwYXJhbSBpY3VFeHByZXNzaW9uXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggd2hlcmUgdGhlIGFuY2hvciBpcyBzdG9yZWQgYW5kIGFuIG9wdGlvbmFsIGBUSWN1Q29udGFpbmVyTm9kZWBcbiAqICAgLSBgbFZpZXdbYW5jaG9ySWR4XWAgcG9pbnRzIHRvIGEgYENvbW1lbnRgIG5vZGUgcmVwcmVzZW50aW5nIHRoZSBhbmNob3IgZm9yIHRoZSBJQ1UuXG4gKiAgIC0gYHRWaWV3LmRhdGFbYW5jaG9ySWR4XWAgcG9pbnRzIHRvIHRoZSBgVEljdUNvbnRhaW5lck5vZGVgIGlmIElDVSBpcyByb290IChgbnVsbGAgb3RoZXJ3aXNlKVxuICovXG5mdW5jdGlvbiBpY3VTdGFydCh0VmlldywgbFZpZXcsIHVwZGF0ZU9wQ29kZXMsIHBhcmVudElkeCwgaWN1RXhwcmVzc2lvbiwgYW5jaG9ySWR4KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQoaWN1RXhwcmVzc2lvbiwgJ0lDVSBleHByZXNzaW9uIG11c3QgYmUgZGVmaW5lZCcpO1xuICAgIGxldCBiaW5kaW5nTWFzayA9IDA7XG4gICAgY29uc3QgdEljdSA9IHtcbiAgICAgICAgdHlwZTogaWN1RXhwcmVzc2lvbi50eXBlLFxuICAgICAgICBjdXJyZW50Q2FzZUxWaWV3SW5kZXg6IGFsbG9jRXhwYW5kbyh0VmlldywgbFZpZXcsIDEsIG51bGwpLFxuICAgICAgICBhbmNob3JJZHgsXG4gICAgICAgIGNhc2VzOiBbXSxcbiAgICAgICAgY3JlYXRlOiBbXSxcbiAgICAgICAgcmVtb3ZlOiBbXSxcbiAgICAgICAgdXBkYXRlOiBbXVxuICAgIH07XG4gICAgYWRkVXBkYXRlSWN1U3dpdGNoKHVwZGF0ZU9wQ29kZXMsIGljdUV4cHJlc3Npb24sIGFuY2hvcklkeCk7XG4gICAgc2V0VEljdSh0VmlldywgYW5jaG9ySWR4LCB0SWN1KTtcbiAgICBjb25zdCB2YWx1ZXMgPSBpY3VFeHByZXNzaW9uLnZhbHVlcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBFYWNoIHZhbHVlIGlzIGFuIGFycmF5IG9mIHN0cmluZ3MgJiBvdGhlciBJQ1UgZXhwcmVzc2lvbnNcbiAgICAgICAgY29uc3QgdmFsdWVBcnIgPSB2YWx1ZXNbaV07XG4gICAgICAgIGNvbnN0IG5lc3RlZEljdXMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2YWx1ZUFyci5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZUFycltqXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQgaXMgYW4gbmVzdGVkIElDVSBleHByZXNzaW9uXG4gICAgICAgICAgICAgICAgY29uc3QgaWN1SW5kZXggPSBuZXN0ZWRJY3VzLnB1c2godmFsdWUpIC0gMTtcbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIG5lc3RlZCBJQ1UgZXhwcmVzc2lvbiBieSBhIGNvbW1lbnQgbm9kZVxuICAgICAgICAgICAgICAgIHZhbHVlQXJyW2pdID0gYDwhLS3vv70ke2ljdUluZGV4fe+/vS0tPmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYmluZGluZ01hc2sgPSBwYXJzZUljdUNhc2UodFZpZXcsIHRJY3UsIGxWaWV3LCB1cGRhdGVPcENvZGVzLCBwYXJlbnRJZHgsIGljdUV4cHJlc3Npb24uY2FzZXNbaV0sIHZhbHVlQXJyLmpvaW4oJycpLCBuZXN0ZWRJY3VzKSB8XG4gICAgICAgICAgICBiaW5kaW5nTWFzaztcbiAgICB9XG4gICAgaWYgKGJpbmRpbmdNYXNrKSB7XG4gICAgICAgIGFkZFVwZGF0ZUljdVVwZGF0ZSh1cGRhdGVPcENvZGVzLCBiaW5kaW5nTWFzaywgYW5jaG9ySWR4KTtcbiAgICB9XG59XG4vKipcbiAqIFBhcnNlcyB0ZXh0IGNvbnRhaW5pbmcgYW4gSUNVIGV4cHJlc3Npb24gYW5kIHByb2R1Y2VzIGEgSlNPTiBvYmplY3QgZm9yIGl0LlxuICogT3JpZ2luYWwgY29kZSBmcm9tIGNsb3N1cmUgbGlicmFyeSwgbW9kaWZpZWQgZm9yIEFuZ3VsYXIuXG4gKlxuICogQHBhcmFtIHBhdHRlcm4gVGV4dCBjb250YWluaW5nIGFuIElDVSBleHByZXNzaW9uIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICpcbiAqL1xuZnVuY3Rpb24gcGFyc2VJQ1VCbG9jayhwYXR0ZXJuKSB7XG4gICAgY29uc3QgY2FzZXMgPSBbXTtcbiAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICBsZXQgaWN1VHlwZSA9IDEgLyogcGx1cmFsICovO1xuICAgIGxldCBtYWluQmluZGluZyA9IDA7XG4gICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZShJQ1VfQkxPQ0tfUkVHRVhQLCBmdW5jdGlvbiAoc3RyLCBiaW5kaW5nLCB0eXBlKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnc2VsZWN0Jykge1xuICAgICAgICAgICAgaWN1VHlwZSA9IDAgLyogc2VsZWN0ICovO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWN1VHlwZSA9IDEgLyogcGx1cmFsICovO1xuICAgICAgICB9XG4gICAgICAgIG1haW5CaW5kaW5nID0gcGFyc2VJbnQoYmluZGluZy5zdWJzdHIoMSksIDEwKTtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH0pO1xuICAgIGNvbnN0IHBhcnRzID0gaTE4blBhcnNlVGV4dEludG9QYXJ0c0FuZElDVShwYXR0ZXJuKTtcbiAgICAvLyBMb29raW5nIGZvciAoa2V5IGJsb2NrKSsgc2VxdWVuY2UuIE9uZSBvZiB0aGUga2V5cyBoYXMgdG8gYmUgXCJvdGhlclwiLlxuICAgIGZvciAobGV0IHBvcyA9IDA7IHBvcyA8IHBhcnRzLmxlbmd0aDspIHtcbiAgICAgICAgbGV0IGtleSA9IHBhcnRzW3BvcysrXS50cmltKCk7XG4gICAgICAgIGlmIChpY3VUeXBlID09PSAxIC8qIHBsdXJhbCAqLykge1xuICAgICAgICAgICAgLy8gS2V5IGNhbiBiZSBcIj14XCIsIHdlIGp1c3Qgd2FudCBcInhcIlxuICAgICAgICAgICAga2V5ID0ga2V5LnJlcGxhY2UoL1xccyooPzo9KT8oXFx3KylcXHMqLywgJyQxJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGtleS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2VzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBibG9ja3MgPSBpMThuUGFyc2VUZXh0SW50b1BhcnRzQW5kSUNVKHBhcnRzW3BvcysrXSk7XG4gICAgICAgIGlmIChjYXNlcy5sZW5ndGggPiB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YWx1ZXMucHVzaChibG9ja3MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFRPRE8ob2NvbWJlKTogc3VwcG9ydCBJQ1UgZXhwcmVzc2lvbnMgaW4gYXR0cmlidXRlcywgc2VlICMyMTYxNVxuICAgIHJldHVybiB7IHR5cGU6IGljdVR5cGUsIG1haW5CaW5kaW5nOiBtYWluQmluZGluZywgY2FzZXMsIHZhbHVlcyB9O1xufVxuLyoqXG4gKiBCcmVha3MgcGF0dGVybiBpbnRvIHN0cmluZ3MgYW5kIHRvcCBsZXZlbCB7Li4ufSBibG9ja3MuXG4gKiBDYW4gYmUgdXNlZCB0byBicmVhayBhIG1lc3NhZ2UgaW50byB0ZXh0IGFuZCBJQ1UgZXhwcmVzc2lvbnMsIG9yIHRvIGJyZWFrIGFuIElDVSBleHByZXNzaW9uXG4gKiBpbnRvIGtleXMgYW5kIGNhc2VzLiBPcmlnaW5hbCBjb2RlIGZyb20gY2xvc3VyZSBsaWJyYXJ5LCBtb2RpZmllZCBmb3IgQW5ndWxhci5cbiAqXG4gKiBAcGFyYW0gcGF0dGVybiAoc3ViKVBhdHRlcm4gdG8gYmUgYnJva2VuLlxuICogQHJldHVybnMgQW4gYEFycmF5PHN0cmluZ3xJY3VFeHByZXNzaW9uPmAgd2hlcmU6XG4gKiAgIC0gb2RkIHBvc2l0aW9uczogYHN0cmluZ2AgPT4gdGV4dCBiZXR3ZWVuIElDVSBleHByZXNzaW9uc1xuICogICAtIGV2ZW4gcG9zaXRpb25zOiBgSUNVRXhwcmVzc2lvbmAgPT4gSUNVIGV4cHJlc3Npb24gcGFyc2VkIGludG8gYElDVUV4cHJlc3Npb25gIHJlY29yZC5cbiAqL1xuZnVuY3Rpb24gaTE4blBhcnNlVGV4dEludG9QYXJ0c0FuZElDVShwYXR0ZXJuKSB7XG4gICAgaWYgKCFwYXR0ZXJuKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgbGV0IHByZXZQb3MgPSAwO1xuICAgIGNvbnN0IGJyYWNlU3RhY2sgPSBbXTtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgY29uc3QgYnJhY2VzID0gL1t7fV0vZztcbiAgICAvLyBsYXN0SW5kZXggZG9lc24ndCBnZXQgc2V0IHRvIDAgc28gd2UgaGF2ZSB0by5cbiAgICBicmFjZXMubGFzdEluZGV4ID0gMDtcbiAgICBsZXQgbWF0Y2g7XG4gICAgd2hpbGUgKG1hdGNoID0gYnJhY2VzLmV4ZWMocGF0dGVybikpIHtcbiAgICAgICAgY29uc3QgcG9zID0gbWF0Y2guaW5kZXg7XG4gICAgICAgIGlmIChtYXRjaFswXSA9PSAnfScpIHtcbiAgICAgICAgICAgIGJyYWNlU3RhY2sucG9wKCk7XG4gICAgICAgICAgICBpZiAoYnJhY2VTdGFjay5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIEVuZCBvZiB0aGUgYmxvY2suXG4gICAgICAgICAgICAgICAgY29uc3QgYmxvY2sgPSBwYXR0ZXJuLnN1YnN0cmluZyhwcmV2UG9zLCBwb3MpO1xuICAgICAgICAgICAgICAgIGlmIChJQ1VfQkxPQ0tfUkVHRVhQLnRlc3QoYmxvY2spKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChwYXJzZUlDVUJsb2NrKGJsb2NrKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcmV2UG9zID0gcG9zICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChicmFjZVN0YWNrLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Vic3RyaW5nID0gcGF0dGVybi5zdWJzdHJpbmcocHJldlBvcywgcG9zKTtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goc3Vic3RyaW5nKTtcbiAgICAgICAgICAgICAgICBwcmV2UG9zID0gcG9zICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyYWNlU3RhY2sucHVzaCgneycpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHN1YnN0cmluZyA9IHBhdHRlcm4uc3Vic3RyaW5nKHByZXZQb3MpO1xuICAgIHJlc3VsdHMucHVzaChzdWJzdHJpbmcpO1xuICAgIHJldHVybiByZXN1bHRzO1xufVxuLyoqXG4gKiBQYXJzZXMgYSBub2RlLCBpdHMgY2hpbGRyZW4gYW5kIGl0cyBzaWJsaW5ncywgYW5kIGdlbmVyYXRlcyB0aGUgbXV0YXRlICYgdXBkYXRlIE9wQ29kZXMuXG4gKlxuICovXG5mdW5jdGlvbiBwYXJzZUljdUNhc2UodFZpZXcsIHRJY3UsIGxWaWV3LCB1cGRhdGVPcENvZGVzLCBwYXJlbnRJZHgsIGNhc2VOYW1lLCB1bnNhZmVDYXNlSHRtbCwgbmVzdGVkSWN1cykge1xuICAgIGNvbnN0IGNyZWF0ZSA9IFtdO1xuICAgIGNvbnN0IHJlbW92ZSA9IFtdO1xuICAgIGNvbnN0IHVwZGF0ZSA9IFtdO1xuICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgYXR0YWNoRGVidWdHZXR0ZXIoY3JlYXRlLCBpY3VDcmVhdGVPcENvZGVzVG9TdHJpbmcpO1xuICAgICAgICBhdHRhY2hEZWJ1Z0dldHRlcihyZW1vdmUsIGkxOG5SZW1vdmVPcENvZGVzVG9TdHJpbmcpO1xuICAgICAgICBhdHRhY2hEZWJ1Z0dldHRlcih1cGRhdGUsIGkxOG5VcGRhdGVPcENvZGVzVG9TdHJpbmcpO1xuICAgIH1cbiAgICB0SWN1LmNhc2VzLnB1c2goY2FzZU5hbWUpO1xuICAgIHRJY3UuY3JlYXRlLnB1c2goY3JlYXRlKTtcbiAgICB0SWN1LnJlbW92ZS5wdXNoKHJlbW92ZSk7XG4gICAgdEljdS51cGRhdGUucHVzaCh1cGRhdGUpO1xuICAgIGNvbnN0IGluZXJ0Qm9keUhlbHBlciA9IGdldEluZXJ0Qm9keUhlbHBlcihnZXREb2N1bWVudCgpKTtcbiAgICBjb25zdCBpbmVydEJvZHlFbGVtZW50ID0gaW5lcnRCb2R5SGVscGVyLmdldEluZXJ0Qm9keUVsZW1lbnQodW5zYWZlQ2FzZUh0bWwpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGluZXJ0Qm9keUVsZW1lbnQsICdVbmFibGUgdG8gZ2VuZXJhdGUgaW5lcnQgYm9keSBlbGVtZW50Jyk7XG4gICAgY29uc3QgaW5lcnRSb290Tm9kZSA9IGdldFRlbXBsYXRlQ29udGVudChpbmVydEJvZHlFbGVtZW50KSB8fCBpbmVydEJvZHlFbGVtZW50O1xuICAgIGlmIChpbmVydFJvb3ROb2RlKSB7XG4gICAgICAgIHJldHVybiB3YWxrSWN1VHJlZSh0VmlldywgdEljdSwgbFZpZXcsIHVwZGF0ZU9wQ29kZXMsIGNyZWF0ZSwgcmVtb3ZlLCB1cGRhdGUsIGluZXJ0Um9vdE5vZGUsIHBhcmVudElkeCwgbmVzdGVkSWN1cywgMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG5mdW5jdGlvbiB3YWxrSWN1VHJlZSh0VmlldywgdEljdSwgbFZpZXcsIHNoYXJlZFVwZGF0ZU9wQ29kZXMsIGNyZWF0ZSwgcmVtb3ZlLCB1cGRhdGUsIHBhcmVudE5vZGUsIHBhcmVudElkeCwgbmVzdGVkSWN1cywgZGVwdGgpIHtcbiAgICBsZXQgYmluZGluZ01hc2sgPSAwO1xuICAgIGxldCBjdXJyZW50Tm9kZSA9IHBhcmVudE5vZGUuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoY3VycmVudE5vZGUpIHtcbiAgICAgICAgY29uc3QgbmV3SW5kZXggPSBhbGxvY0V4cGFuZG8odFZpZXcsIGxWaWV3LCAxLCBudWxsKTtcbiAgICAgICAgc3dpdGNoIChjdXJyZW50Tm9kZS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gY3VycmVudE5vZGU7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFnTmFtZSA9IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmIChWQUxJRF9FTEVNRU5UUy5oYXNPd25Qcm9wZXJ0eSh0YWdOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRDcmVhdGVOb2RlQW5kQXBwZW5kKGNyZWF0ZSwgRUxFTUVOVF9NQVJLRVIsIHRhZ05hbWUsIHBhcmVudElkeCwgbmV3SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB0Vmlldy5kYXRhW25ld0luZGV4XSA9IHRhZ05hbWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsQXR0cnMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxBdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXR0ciA9IGVsQXR0cnMuaXRlbShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvd2VyQXR0ck5hbWUgPSBhdHRyLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc0JpbmRpbmcgPSAhIWF0dHIudmFsdWUubWF0Y2goQklORElOR19SRUdFWFApO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXNzdW1lIHRoZSBpbnB1dCBzdHJpbmcgaXMgc2FmZSwgdW5sZXNzIGl0J3MgdXNpbmcgYSBiaW5kaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzQmluZGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChWQUxJRF9BVFRSUy5oYXNPd25Qcm9wZXJ0eShsb3dlckF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVVJJX0FUVFJTW2xvd2VyQXR0ck5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUJpbmRpbmdVcGRhdGVPcENvZGVzKHVwZGF0ZSwgYXR0ci52YWx1ZSwgbmV3SW5kZXgsIGF0dHIubmFtZSwgMCwgX3Nhbml0aXplVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChTUkNTRVRfQVRUUlNbbG93ZXJBdHRyTmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlQmluZGluZ1VwZGF0ZU9wQ29kZXModXBkYXRlLCBhdHRyLnZhbHVlLCBuZXdJbmRleCwgYXR0ci5uYW1lLCAwLCBzYW5pdGl6ZVNyY3NldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZUJpbmRpbmdVcGRhdGVPcENvZGVzKHVwZGF0ZSwgYXR0ci52YWx1ZSwgbmV3SW5kZXgsIGF0dHIubmFtZSwgMCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBXQVJOSU5HOiBpZ25vcmluZyB1bnNhZmUgYXR0cmlidXRlIHZhbHVlIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke2xvd2VyQXR0ck5hbWV9IG9uIGVsZW1lbnQgJHt0YWdOYW1lfSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgKHNlZSBodHRwczovL2cuY28vbmcvc2VjdXJpdHkjeHNzKWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZENyZWF0ZUF0dHJpYnV0ZShjcmVhdGUsIG5ld0luZGV4LCBhdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIChpZiBhbnkpXG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdNYXNrID0gd2Fsa0ljdVRyZWUodFZpZXcsIHRJY3UsIGxWaWV3LCBzaGFyZWRVcGRhdGVPcENvZGVzLCBjcmVhdGUsIHJlbW92ZSwgdXBkYXRlLCBjdXJyZW50Tm9kZSwgbmV3SW5kZXgsIG5lc3RlZEljdXMsIGRlcHRoICsgMSkgfFxuICAgICAgICAgICAgICAgICAgICAgICAgYmluZGluZ01hc2s7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJlbW92ZU5vZGUocmVtb3ZlLCBuZXdJbmRleCwgZGVwdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjdXJyZW50Tm9kZS50ZXh0Q29udGVudCB8fCAnJztcbiAgICAgICAgICAgICAgICBjb25zdCBoYXNCaW5kaW5nID0gdmFsdWUubWF0Y2goQklORElOR19SRUdFWFApO1xuICAgICAgICAgICAgICAgIGFkZENyZWF0ZU5vZGVBbmRBcHBlbmQoY3JlYXRlLCBudWxsLCBoYXNCaW5kaW5nID8gJycgOiB2YWx1ZSwgcGFyZW50SWR4LCBuZXdJbmRleCk7XG4gICAgICAgICAgICAgICAgYWRkUmVtb3ZlTm9kZShyZW1vdmUsIG5ld0luZGV4LCBkZXB0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGhhc0JpbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgYmluZGluZ01hc2sgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVCaW5kaW5nVXBkYXRlT3BDb2Rlcyh1cGRhdGUsIHZhbHVlLCBuZXdJbmRleCwgbnVsbCwgMCwgbnVsbCkgfCBiaW5kaW5nTWFzaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIE5vZGUuQ09NTUVOVF9OT0RFOlxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb21tZW50IG5vZGUgaXMgYSBwbGFjZWhvbGRlciBmb3IgYSBuZXN0ZWQgSUNVXG4gICAgICAgICAgICAgICAgY29uc3QgaXNOZXN0ZWRJY3UgPSBORVNURURfSUNVLmV4ZWMoY3VycmVudE5vZGUudGV4dENvbnRlbnQgfHwgJycpO1xuICAgICAgICAgICAgICAgIGlmIChpc05lc3RlZEljdSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXN0ZWRJY3VJbmRleCA9IHBhcnNlSW50KGlzTmVzdGVkSWN1WzFdLCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGljdUV4cHJlc3Npb24gPSBuZXN0ZWRJY3VzW25lc3RlZEljdUluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBjb21tZW50IG5vZGUgdGhhdCB3aWxsIGFuY2hvciB0aGUgSUNVIGV4cHJlc3Npb25cbiAgICAgICAgICAgICAgICAgICAgYWRkQ3JlYXRlTm9kZUFuZEFwcGVuZChjcmVhdGUsIElDVV9NQVJLRVIsIG5nRGV2TW9kZSA/IGBuZXN0ZWQgSUNVICR7bmVzdGVkSWN1SW5kZXh9YCA6ICcnLCBwYXJlbnRJZHgsIG5ld0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgaWN1U3RhcnQodFZpZXcsIGxWaWV3LCBzaGFyZWRVcGRhdGVPcENvZGVzLCBwYXJlbnRJZHgsIGljdUV4cHJlc3Npb24sIG5ld0luZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgYWRkUmVtb3ZlTmVzdGVkSWN1KHJlbW92ZSwgbmV3SW5kZXgsIGRlcHRoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIGJpbmRpbmdNYXNrO1xufVxuZnVuY3Rpb24gYWRkUmVtb3ZlTm9kZShyZW1vdmUsIGluZGV4LCBkZXB0aCkge1xuICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICByZW1vdmUucHVzaChpbmRleCk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkUmVtb3ZlTmVzdGVkSWN1KHJlbW92ZSwgaW5kZXgsIGRlcHRoKSB7XG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICAgIHJlbW92ZS5wdXNoKH5pbmRleCk7IC8vIHJlbW92ZSBJQ1UgYXQgYGluZGV4YFxuICAgICAgICByZW1vdmUucHVzaChpbmRleCk7IC8vIHJlbW92ZSBJQ1UgY29tbWVudCBhdCBgaW5kZXhgXG4gICAgfVxufVxuZnVuY3Rpb24gYWRkVXBkYXRlSWN1U3dpdGNoKHVwZGF0ZSwgaWN1RXhwcmVzc2lvbiwgaW5kZXgpIHtcbiAgICB1cGRhdGUucHVzaCh0b01hc2tCaXQoaWN1RXhwcmVzc2lvbi5tYWluQmluZGluZyksIDIsIC0xIC0gaWN1RXhwcmVzc2lvbi5tYWluQmluZGluZywgaW5kZXggPDwgMiAvKiBTSElGVF9SRUYgKi8gfCAyIC8qIEljdVN3aXRjaCAqLyk7XG59XG5mdW5jdGlvbiBhZGRVcGRhdGVJY3VVcGRhdGUodXBkYXRlLCBiaW5kaW5nTWFzaywgaW5kZXgpIHtcbiAgICB1cGRhdGUucHVzaChiaW5kaW5nTWFzaywgMSwgaW5kZXggPDwgMiAvKiBTSElGVF9SRUYgKi8gfCAzIC8qIEljdVVwZGF0ZSAqLyk7XG59XG5mdW5jdGlvbiBhZGRDcmVhdGVOb2RlQW5kQXBwZW5kKGNyZWF0ZSwgbWFya2VyLCB0ZXh0LCBhcHBlbmRUb1BhcmVudElkeCwgY3JlYXRlQXRJZHgpIHtcbiAgICBpZiAobWFya2VyICE9PSBudWxsKSB7XG4gICAgICAgIGNyZWF0ZS5wdXNoKG1hcmtlcik7XG4gICAgfVxuICAgIGNyZWF0ZS5wdXNoKHRleHQsIGNyZWF0ZUF0SWR4LCBpY3VDcmVhdGVPcENvZGUoMCAvKiBBcHBlbmRDaGlsZCAqLywgYXBwZW5kVG9QYXJlbnRJZHgsIGNyZWF0ZUF0SWR4KSk7XG59XG5mdW5jdGlvbiBhZGRDcmVhdGVBdHRyaWJ1dGUoY3JlYXRlLCBuZXdJbmRleCwgYXR0cikge1xuICAgIGNyZWF0ZS5wdXNoKG5ld0luZGV4IDw8IDEgLyogU0hJRlRfUkVGICovIHwgMSAvKiBBdHRyICovLCBhdHRyLm5hbWUsIGF0dHIudmFsdWUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIGkxOG5Qb3N0cHJvY2VzcyBjb25zdHNcbmNvbnN0IFJPT1RfVEVNUExBVEVfSUQgPSAwO1xuY29uc3QgUFBfTVVMVElfVkFMVUVfUExBQ0VIT0xERVJTX1JFR0VYUCA9IC9cXFso77+9Lis/77+9PylcXF0vO1xuY29uc3QgUFBfUExBQ0VIT0xERVJTX1JFR0VYUCA9IC9cXFso77+9Lis/77+9PylcXF18KO+/vVxcLz9cXCpcXGQrOlxcZCvvv70pL2c7XG5jb25zdCBQUF9JQ1VfVkFSU19SRUdFWFAgPSAvKHtcXHMqKShWQVJfKFBMVVJBTHxTRUxFQ1QpKF9cXGQrKT8pKFxccyosKS9nO1xuY29uc3QgUFBfSUNVX1BMQUNFSE9MREVSU19SRUdFWFAgPSAveyhbQS1aMC05X10rKX0vZztcbmNvbnN0IFBQX0lDVVNfUkVHRVhQID0gL++/vUkxOE5fRVhQXyhJQ1UoX1xcZCspPynvv70vZztcbmNvbnN0IFBQX0NMT1NFX1RFTVBMQVRFX1JFR0VYUCA9IC9cXC9cXCovO1xuY29uc3QgUFBfVEVNUExBVEVfSURfUkVHRVhQID0gL1xcZCtcXDooXFxkKykvO1xuLyoqXG4gKiBIYW5kbGVzIG1lc3NhZ2Ugc3RyaW5nIHBvc3QtcHJvY2Vzc2luZyBmb3IgaW50ZXJuYXRpb25hbGl6YXRpb24uXG4gKlxuICogSGFuZGxlcyBtZXNzYWdlIHN0cmluZyBwb3N0LXByb2Nlc3NpbmcgYnkgdHJhbnNmb3JtaW5nIGl0IGZyb20gaW50ZXJtZWRpYXRlXG4gKiBmb3JtYXQgKHRoYXQgbWlnaHQgY29udGFpbiBzb21lIG1hcmtlcnMgdGhhdCB3ZSBuZWVkIHRvIHJlcGxhY2UpIHRvIHRoZSBmaW5hbFxuICogZm9ybSwgY29uc3VtYWJsZSBieSBpMThuU3RhcnQgaW5zdHJ1Y3Rpb24uIFBvc3QgcHJvY2Vzc2luZyBzdGVwcyBpbmNsdWRlOlxuICpcbiAqIDEuIFJlc29sdmUgYWxsIG11bHRpLXZhbHVlIGNhc2VzIChsaWtlIFvvv70qMTox77+977+9IzI6Me+/vXzvv70jNDox77+9fO+/vTXvv71dKVxuICogMi4gUmVwbGFjZSBhbGwgSUNVIHZhcnMgKGxpa2UgXCJWQVJfUExVUkFMXCIpXG4gKiAzLiBSZXBsYWNlIGFsbCBwbGFjZWhvbGRlcnMgdXNlZCBpbnNpZGUgSUNVcyBpbiBhIGZvcm0gb2Yge1BMQUNFSE9MREVSfVxuICogNC4gUmVwbGFjZSBhbGwgSUNVIHJlZmVyZW5jZXMgd2l0aCBjb3JyZXNwb25kaW5nIHZhbHVlcyAobGlrZSDvv71JQ1VfRVhQX0lDVV8x77+9KVxuICogICAgaW4gY2FzZSBtdWx0aXBsZSBJQ1VzIGhhdmUgdGhlIHNhbWUgcGxhY2Vob2xkZXIgbmFtZVxuICpcbiAqIEBwYXJhbSBtZXNzYWdlIFJhdyB0cmFuc2xhdGlvbiBzdHJpbmcgZm9yIHBvc3QgcHJvY2Vzc2luZ1xuICogQHBhcmFtIHJlcGxhY2VtZW50cyBTZXQgb2YgcmVwbGFjZW1lbnRzIHRoYXQgc2hvdWxkIGJlIGFwcGxpZWRcbiAqXG4gKiBAcmV0dXJucyBUcmFuc2Zvcm1lZCBzdHJpbmcgdGhhdCBjYW4gYmUgY29uc3VtZWQgYnkgaTE4blN0YXJ0IGluc3RydWN0aW9uXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gaTE4blBvc3Rwcm9jZXNzKG1lc3NhZ2UsIHJlcGxhY2VtZW50cyA9IHt9KSB7XG4gICAgLyoqXG4gICAgICogU3RlcCAxOiByZXNvbHZlIGFsbCBtdWx0aS12YWx1ZSBwbGFjZWhvbGRlcnMgbGlrZSBb77+9IzXvv71877+9KjE6Me+/ve+/vSMyOjHvv71877+9IzQ6Me+/vV1cbiAgICAgKlxuICAgICAqIE5vdGU6IGR1ZSB0byB0aGUgd2F5IHdlIHByb2Nlc3MgbmVzdGVkIHRlbXBsYXRlcyAoQkZTKSwgbXVsdGktdmFsdWUgcGxhY2Vob2xkZXJzIGFyZSB0eXBpY2FsbHlcbiAgICAgKiBncm91cGVkIGJ5IHRlbXBsYXRlcywgZm9yIGV4YW1wbGU6IFvvv70jNe+/vXzvv70jNu+/vXzvv70jMTox77+9fO+/vSMzOjLvv71dIHdoZXJlIO+/vSM177+9IGFuZCDvv70jNu+/vSBiZWxvbmcgdG8gcm9vdFxuICAgICAqIHRlbXBsYXRlLCDvv70jMTox77+9IGJlbG9uZyB0byBuZXN0ZWQgdGVtcGxhdGUgd2l0aCBpbmRleCAxIGFuZCDvv70jMToy77+9IC0gbmVzdGVkIHRlbXBsYXRlIHdpdGggaW5kZXhcbiAgICAgKiAzLiBIb3dldmVyIGluIHJlYWwgdGVtcGxhdGVzIHRoZSBvcmRlciBtaWdodCBiZSBkaWZmZXJlbnQ6IGkuZS4g77+9IzE6Me+/vSBhbmQvb3Ig77+9IzM6Mu+/vSBtYXkgZ28gaW5cbiAgICAgKiBmcm9udCBvZiDvv70jNu+/vS4gVGhlIHBvc3QgcHJvY2Vzc2luZyBzdGVwIHJlc3RvcmVzIHRoZSByaWdodCBvcmRlciBieSBrZWVwaW5nIHRyYWNrIG9mIHRoZVxuICAgICAqIHRlbXBsYXRlIGlkIHN0YWNrIGFuZCBsb29rcyBmb3IgcGxhY2Vob2xkZXJzIHRoYXQgYmVsb25nIHRvIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRlbXBsYXRlLlxuICAgICAqL1xuICAgIGxldCByZXN1bHQgPSBtZXNzYWdlO1xuICAgIGlmIChQUF9NVUxUSV9WQUxVRV9QTEFDRUhPTERFUlNfUkVHRVhQLnRlc3QobWVzc2FnZSkpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IHt9O1xuICAgICAgICBjb25zdCB0ZW1wbGF0ZUlkc1N0YWNrID0gW1JPT1RfVEVNUExBVEVfSURdO1xuICAgICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShQUF9QTEFDRUhPTERFUlNfUkVHRVhQLCAobSwgcGhzLCB0bXBsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gcGhzIHx8IHRtcGw7XG4gICAgICAgICAgICBjb25zdCBwbGFjZWhvbGRlcnMgPSBtYXRjaGVzW2NvbnRlbnRdIHx8IFtdO1xuICAgICAgICAgICAgaWYgKCFwbGFjZWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgY29udGVudC5zcGxpdCgnfCcpLmZvckVhY2goKHBsYWNlaG9sZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gcGxhY2Vob2xkZXIubWF0Y2goUFBfVEVNUExBVEVfSURfUkVHRVhQKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGVJZCA9IG1hdGNoID8gcGFyc2VJbnQobWF0Y2hbMV0sIDEwKSA6IFJPT1RfVEVNUExBVEVfSUQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2xvc2VUZW1wbGF0ZVRhZyA9IFBQX0NMT1NFX1RFTVBMQVRFX1JFR0VYUC50ZXN0KHBsYWNlaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnB1c2goW3RlbXBsYXRlSWQsIGlzQ2xvc2VUZW1wbGF0ZVRhZywgcGxhY2Vob2xkZXJdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtYXRjaGVzW2NvbnRlbnRdID0gcGxhY2Vob2xkZXJzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwbGFjZWhvbGRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpMThuIHBvc3Rwcm9jZXNzOiB1bm1hdGNoZWQgcGxhY2Vob2xkZXIgLSAke2NvbnRlbnR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VGVtcGxhdGVJZCA9IHRlbXBsYXRlSWRzU3RhY2tbdGVtcGxhdGVJZHNTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGxldCBpZHggPSAwO1xuICAgICAgICAgICAgLy8gZmluZCBwbGFjZWhvbGRlciBpbmRleCB0aGF0IG1hdGNoZXMgY3VycmVudCB0ZW1wbGF0ZSBpZFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbGFjZWhvbGRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXJzW2ldWzBdID09PSBjdXJyZW50VGVtcGxhdGVJZCkge1xuICAgICAgICAgICAgICAgICAgICBpZHggPSBpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGVtcGxhdGUgaWQgc3RhY2sgYmFzZWQgb24gdGhlIGN1cnJlbnQgdGFnIGV4dHJhY3RlZFxuICAgICAgICAgICAgY29uc3QgW3RlbXBsYXRlSWQsIGlzQ2xvc2VUZW1wbGF0ZVRhZywgcGxhY2Vob2xkZXJdID0gcGxhY2Vob2xkZXJzW2lkeF07XG4gICAgICAgICAgICBpZiAoaXNDbG9zZVRlbXBsYXRlVGFnKSB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVJZHNTdGFjay5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGN1cnJlbnRUZW1wbGF0ZUlkICE9PSB0ZW1wbGF0ZUlkKSB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVJZHNTdGFjay5wdXNoKHRlbXBsYXRlSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gcmVtb3ZlIHByb2Nlc3NlZCB0YWcgZnJvbSB0aGUgbGlzdFxuICAgICAgICAgICAgcGxhY2Vob2xkZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGN1cnJlbnQgcmVzdWx0IGlmIG5vIHJlcGxhY2VtZW50cyBzcGVjaWZpZWRcbiAgICBpZiAoIU9iamVjdC5rZXlzKHJlcGxhY2VtZW50cykubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0ZXAgMjogcmVwbGFjZSBhbGwgSUNVIHZhcnMgKGxpa2UgXCJWQVJfUExVUkFMXCIpXG4gICAgICovXG4gICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UoUFBfSUNVX1ZBUlNfUkVHRVhQLCAobWF0Y2gsIHN0YXJ0LCBrZXksIF90eXBlLCBfaWR4LCBlbmQpID0+IHtcbiAgICAgICAgcmV0dXJuIHJlcGxhY2VtZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gYCR7c3RhcnR9JHtyZXBsYWNlbWVudHNba2V5XX0ke2VuZH1gIDogbWF0Y2g7XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogU3RlcCAzOiByZXBsYWNlIGFsbCBwbGFjZWhvbGRlcnMgdXNlZCBpbnNpZGUgSUNVcyBpbiBhIGZvcm0gb2Yge1BMQUNFSE9MREVSfVxuICAgICAqL1xuICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKFBQX0lDVV9QTEFDRUhPTERFUlNfUkVHRVhQLCAobWF0Y2gsIGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gcmVwbGFjZW1lbnRzLmhhc093blByb3BlcnR5KGtleSkgPyByZXBsYWNlbWVudHNba2V5XSA6IG1hdGNoO1xuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFN0ZXAgNDogcmVwbGFjZSBhbGwgSUNVIHJlZmVyZW5jZXMgd2l0aCBjb3JyZXNwb25kaW5nIHZhbHVlcyAobGlrZSDvv71JQ1VfRVhQX0lDVV8x77+9KSBpbiBjYXNlXG4gICAgICogbXVsdGlwbGUgSUNVcyBoYXZlIHRoZSBzYW1lIHBsYWNlaG9sZGVyIG5hbWVcbiAgICAgKi9cbiAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShQUF9JQ1VTX1JFR0VYUCwgKG1hdGNoLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKHJlcGxhY2VtZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ID0gcmVwbGFjZW1lbnRzW2tleV07XG4gICAgICAgICAgICBpZiAoIWxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpMThuIHBvc3Rwcm9jZXNzOiB1bm1hdGNoZWQgSUNVIC0gJHttYXRjaH0gd2l0aCBrZXk6ICR7a2V5fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIE1hcmtzIGEgYmxvY2sgb2YgdGV4dCBhcyB0cmFuc2xhdGFibGUuXG4gKlxuICogVGhlIGluc3RydWN0aW9ucyBgaTE4blN0YXJ0YCBhbmQgYGkxOG5FbmRgIG1hcmsgdGhlIHRyYW5zbGF0aW9uIGJsb2NrIGluIHRoZSB0ZW1wbGF0ZS5cbiAqIFRoZSB0cmFuc2xhdGlvbiBgbWVzc2FnZWAgaXMgdGhlIHZhbHVlIHdoaWNoIGlzIGxvY2FsZSBzcGVjaWZpYy4gVGhlIHRyYW5zbGF0aW9uIHN0cmluZyBtYXlcbiAqIGNvbnRhaW4gcGxhY2Vob2xkZXJzIHdoaWNoIGFzc29jaWF0ZSBpbm5lciBlbGVtZW50cyBhbmQgc3ViLXRlbXBsYXRlcyB3aXRoaW4gdGhlIHRyYW5zbGF0aW9uLlxuICpcbiAqIFRoZSB0cmFuc2xhdGlvbiBgbWVzc2FnZWAgcGxhY2Vob2xkZXJzIGFyZTpcbiAqIC0gYO+/vXtpbmRleH0oOntibG9ja30p77+9YDogKkJpbmRpbmcgUGxhY2Vob2xkZXIqOiBNYXJrcyBhIGxvY2F0aW9uIHdoZXJlIGFuIGV4cHJlc3Npb24gd2lsbCBiZVxuICogICBpbnRlcnBvbGF0ZWQgaW50by4gVGhlIHBsYWNlaG9sZGVyIGBpbmRleGAgcG9pbnRzIHRvIHRoZSBleHByZXNzaW9uIGJpbmRpbmcgaW5kZXguIEFuIG9wdGlvbmFsXG4gKiAgIGBibG9ja2AgdGhhdCBtYXRjaGVzIHRoZSBzdWItdGVtcGxhdGUgaW4gd2hpY2ggaXQgd2FzIGRlY2xhcmVkLlxuICogLSBg77+9I3tpbmRleH0oOntibG9ja30p77+9YC9g77+9LyN7aW5kZXh9KDp7YmxvY2t9Ke+/vWA6ICpFbGVtZW50IFBsYWNlaG9sZGVyKjogIE1hcmtzIHRoZSBiZWdpbm5pbmdcbiAqICAgYW5kIGVuZCBvZiBET00gZWxlbWVudCB0aGF0IHdlcmUgZW1iZWRkZWQgaW4gdGhlIG9yaWdpbmFsIHRyYW5zbGF0aW9uIGJsb2NrLiBUaGUgcGxhY2Vob2xkZXJcbiAqICAgYGluZGV4YCBwb2ludHMgdG8gdGhlIGVsZW1lbnQgaW5kZXggaW4gdGhlIHRlbXBsYXRlIGluc3RydWN0aW9ucyBzZXQuIEFuIG9wdGlvbmFsIGBibG9ja2AgdGhhdFxuICogICBtYXRjaGVzIHRoZSBzdWItdGVtcGxhdGUgaW4gd2hpY2ggaXQgd2FzIGRlY2xhcmVkLlxuICogLSBg77+9KntpbmRleH06e2Jsb2Nrfe+/vWAvYO+/vS8qe2luZGV4fTp7YmxvY2t977+9YDogKlN1Yi10ZW1wbGF0ZSBQbGFjZWhvbGRlcio6IFN1Yi10ZW1wbGF0ZXMgbXVzdCBiZVxuICogICBzcGxpdCB1cCBhbmQgdHJhbnNsYXRlZCBzZXBhcmF0ZWx5IGluIGVhY2ggYW5ndWxhciB0ZW1wbGF0ZSBmdW5jdGlvbi4gVGhlIGBpbmRleGAgcG9pbnRzIHRvIHRoZVxuICogICBgdGVtcGxhdGVgIGluc3RydWN0aW9uIGluZGV4LiBBIGBibG9ja2AgdGhhdCBtYXRjaGVzIHRoZSBzdWItdGVtcGxhdGUgaW4gd2hpY2ggaXQgd2FzIGRlY2xhcmVkLlxuICpcbiAqIEBwYXJhbSBpbmRleCBBIHVuaXF1ZSBpbmRleCBvZiB0aGUgdHJhbnNsYXRpb24gaW4gdGhlIHN0YXRpYyBibG9jay5cbiAqIEBwYXJhbSBtZXNzYWdlSW5kZXggQW4gaW5kZXggb2YgdGhlIHRyYW5zbGF0aW9uIG1lc3NhZ2UgZnJvbSB0aGUgYGRlZi5jb25zdHNgIGFycmF5LlxuICogQHBhcmFtIHN1YlRlbXBsYXRlSW5kZXggT3B0aW9uYWwgc3ViLXRlbXBsYXRlIGluZGV4IGluIHRoZSBgbWVzc2FnZWAuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWkxOG5TdGFydChpbmRleCwgbWVzc2FnZUluZGV4LCBzdWJUZW1wbGF0ZUluZGV4ID0gLTEpIHtcbiAgICBjb25zdCB0VmlldyA9IGdldFRWaWV3KCk7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IGFkanVzdGVkSW5kZXggPSBIRUFERVJfT0ZGU0VUICsgaW5kZXg7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQodFZpZXcsIGB0VmlldyBzaG91bGQgYmUgZGVmaW5lZGApO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBnZXRDb25zdGFudCh0Vmlldy5jb25zdHMsIG1lc3NhZ2VJbmRleCk7XG4gICAgY29uc3QgcGFyZW50VE5vZGUgPSBnZXRDdXJyZW50UGFyZW50VE5vZGUoKTtcbiAgICBpZiAodFZpZXcuZmlyc3RDcmVhdGVQYXNzKSB7XG4gICAgICAgIGkxOG5TdGFydEZpcnN0Q3JlYXRlUGFzcyh0VmlldywgcGFyZW50VE5vZGUgPT09IG51bGwgPyAwIDogcGFyZW50VE5vZGUuaW5kZXgsIGxWaWV3LCBhZGp1c3RlZEluZGV4LCBtZXNzYWdlLCBzdWJUZW1wbGF0ZUluZGV4KTtcbiAgICB9XG4gICAgY29uc3QgdEkxOG4gPSB0Vmlldy5kYXRhW2FkanVzdGVkSW5kZXhdO1xuICAgIGNvbnN0IHNhbWVWaWV3UGFyZW50VE5vZGUgPSBwYXJlbnRUTm9kZSA9PT0gbFZpZXdbVF9IT1NUXSA/IG51bGwgOiBwYXJlbnRUTm9kZTtcbiAgICBjb25zdCBwYXJlbnRSTm9kZSA9IGdldENsb3Nlc3RSRWxlbWVudCh0Vmlldywgc2FtZVZpZXdQYXJlbnRUTm9kZSwgbFZpZXcpO1xuICAgIC8vIElmIGBwYXJlbnRUTm9kZWAgaXMgYW4gYEVsZW1lbnRDb250YWluZXJgIHRoYW4gaXQgaGFzIGA8IS0tbmctY29udGFpbmVyLS0tPmAuXG4gICAgLy8gV2hlbiB3ZSBkbyBpbnNlcnRzIHdlIGhhdmUgdG8gbWFrZSBzdXJlIHRvIGluc2VydCBpbiBmcm9udCBvZiBgPCEtLW5nLWNvbnRhaW5lci0tLT5gLlxuICAgIGNvbnN0IGluc2VydEluRnJvbnRPZiA9IHBhcmVudFROb2RlICYmIChwYXJlbnRUTm9kZS50eXBlICYgOCAvKiBFbGVtZW50Q29udGFpbmVyICovKSA/XG4gICAgICAgIGxWaWV3W3BhcmVudFROb2RlLmluZGV4XSA6XG4gICAgICAgIG51bGw7XG4gICAgYXBwbHlDcmVhdGVPcENvZGVzKGxWaWV3LCB0STE4bi5jcmVhdGUsIHBhcmVudFJOb2RlLCBpbnNlcnRJbkZyb250T2YpO1xuICAgIHNldEluSTE4bkJsb2NrKHRydWUpO1xufVxuLyoqXG4gKiBUcmFuc2xhdGVzIGEgdHJhbnNsYXRpb24gYmxvY2sgbWFya2VkIGJ5IGBpMThuU3RhcnRgIGFuZCBgaTE4bkVuZGAuIEl0IGluc2VydHMgdGhlIHRleHQvSUNVIG5vZGVzXG4gKiBpbnRvIHRoZSByZW5kZXIgdHJlZSwgbW92ZXMgdGhlIHBsYWNlaG9sZGVyIG5vZGVzIGFuZCByZW1vdmVzIHRoZSBkZWxldGVkIG5vZGVzLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVpMThuRW5kKCkge1xuICAgIHNldEluSTE4bkJsb2NrKGZhbHNlKTtcbn1cbi8qKlxuICpcbiAqIFVzZSB0aGlzIGluc3RydWN0aW9uIHRvIGNyZWF0ZSBhIHRyYW5zbGF0aW9uIGJsb2NrIHRoYXQgZG9lc24ndCBjb250YWluIGFueSBwbGFjZWhvbGRlci5cbiAqIEl0IGNhbGxzIGJvdGgge0BsaW5rIGkxOG5TdGFydH0gYW5kIHtAbGluayBpMThuRW5kfSBpbiBvbmUgaW5zdHJ1Y3Rpb24uXG4gKlxuICogVGhlIHRyYW5zbGF0aW9uIGBtZXNzYWdlYCBpcyB0aGUgdmFsdWUgd2hpY2ggaXMgbG9jYWxlIHNwZWNpZmljLiBUaGUgdHJhbnNsYXRpb24gc3RyaW5nIG1heVxuICogY29udGFpbiBwbGFjZWhvbGRlcnMgd2hpY2ggYXNzb2NpYXRlIGlubmVyIGVsZW1lbnRzIGFuZCBzdWItdGVtcGxhdGVzIHdpdGhpbiB0aGUgdHJhbnNsYXRpb24uXG4gKlxuICogVGhlIHRyYW5zbGF0aW9uIGBtZXNzYWdlYCBwbGFjZWhvbGRlcnMgYXJlOlxuICogLSBg77+9e2luZGV4fSg6e2Jsb2NrfSnvv71gOiAqQmluZGluZyBQbGFjZWhvbGRlcio6IE1hcmtzIGEgbG9jYXRpb24gd2hlcmUgYW4gZXhwcmVzc2lvbiB3aWxsIGJlXG4gKiAgIGludGVycG9sYXRlZCBpbnRvLiBUaGUgcGxhY2Vob2xkZXIgYGluZGV4YCBwb2ludHMgdG8gdGhlIGV4cHJlc3Npb24gYmluZGluZyBpbmRleC4gQW4gb3B0aW9uYWxcbiAqICAgYGJsb2NrYCB0aGF0IG1hdGNoZXMgdGhlIHN1Yi10ZW1wbGF0ZSBpbiB3aGljaCBpdCB3YXMgZGVjbGFyZWQuXG4gKiAtIGDvv70je2luZGV4fSg6e2Jsb2NrfSnvv71gL2Dvv70vI3tpbmRleH0oOntibG9ja30p77+9YDogKkVsZW1lbnQgUGxhY2Vob2xkZXIqOiAgTWFya3MgdGhlIGJlZ2lubmluZ1xuICogICBhbmQgZW5kIG9mIERPTSBlbGVtZW50IHRoYXQgd2VyZSBlbWJlZGRlZCBpbiB0aGUgb3JpZ2luYWwgdHJhbnNsYXRpb24gYmxvY2suIFRoZSBwbGFjZWhvbGRlclxuICogICBgaW5kZXhgIHBvaW50cyB0byB0aGUgZWxlbWVudCBpbmRleCBpbiB0aGUgdGVtcGxhdGUgaW5zdHJ1Y3Rpb25zIHNldC4gQW4gb3B0aW9uYWwgYGJsb2NrYCB0aGF0XG4gKiAgIG1hdGNoZXMgdGhlIHN1Yi10ZW1wbGF0ZSBpbiB3aGljaCBpdCB3YXMgZGVjbGFyZWQuXG4gKiAtIGDvv70qe2luZGV4fTp7YmxvY2t977+9YC9g77+9Lyp7aW5kZXh9OntibG9ja33vv71gOiAqU3ViLXRlbXBsYXRlIFBsYWNlaG9sZGVyKjogU3ViLXRlbXBsYXRlcyBtdXN0IGJlXG4gKiAgIHNwbGl0IHVwIGFuZCB0cmFuc2xhdGVkIHNlcGFyYXRlbHkgaW4gZWFjaCBhbmd1bGFyIHRlbXBsYXRlIGZ1bmN0aW9uLiBUaGUgYGluZGV4YCBwb2ludHMgdG8gdGhlXG4gKiAgIGB0ZW1wbGF0ZWAgaW5zdHJ1Y3Rpb24gaW5kZXguIEEgYGJsb2NrYCB0aGF0IG1hdGNoZXMgdGhlIHN1Yi10ZW1wbGF0ZSBpbiB3aGljaCBpdCB3YXMgZGVjbGFyZWQuXG4gKlxuICogQHBhcmFtIGluZGV4IEEgdW5pcXVlIGluZGV4IG9mIHRoZSB0cmFuc2xhdGlvbiBpbiB0aGUgc3RhdGljIGJsb2NrLlxuICogQHBhcmFtIG1lc3NhZ2VJbmRleCBBbiBpbmRleCBvZiB0aGUgdHJhbnNsYXRpb24gbWVzc2FnZSBmcm9tIHRoZSBgZGVmLmNvbnN0c2AgYXJyYXkuXG4gKiBAcGFyYW0gc3ViVGVtcGxhdGVJbmRleCBPcHRpb25hbCBzdWItdGVtcGxhdGUgaW5kZXggaW4gdGhlIGBtZXNzYWdlYC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1aTE4bihpbmRleCwgbWVzc2FnZUluZGV4LCBzdWJUZW1wbGF0ZUluZGV4KSB7XG4gICAgybXJtWkxOG5TdGFydChpbmRleCwgbWVzc2FnZUluZGV4LCBzdWJUZW1wbGF0ZUluZGV4KTtcbiAgICDJtcm1aTE4bkVuZCgpO1xufVxuLyoqXG4gKiBNYXJrcyBhIGxpc3Qgb2YgYXR0cmlidXRlcyBhcyB0cmFuc2xhdGFibGUuXG4gKlxuICogQHBhcmFtIGluZGV4IEEgdW5pcXVlIGluZGV4IGluIHRoZSBzdGF0aWMgYmxvY2tcbiAqIEBwYXJhbSB2YWx1ZXNcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1aTE4bkF0dHJpYnV0ZXMoaW5kZXgsIGF0dHJzSW5kZXgpIHtcbiAgICBjb25zdCB0VmlldyA9IGdldFRWaWV3KCk7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQodFZpZXcsIGB0VmlldyBzaG91bGQgYmUgZGVmaW5lZGApO1xuICAgIGNvbnN0IGF0dHJzID0gZ2V0Q29uc3RhbnQodFZpZXcuY29uc3RzLCBhdHRyc0luZGV4KTtcbiAgICBpMThuQXR0cmlidXRlc0ZpcnN0UGFzcyh0VmlldywgaW5kZXggKyBIRUFERVJfT0ZGU0VULCBhdHRycyk7XG59XG4vKipcbiAqIFN0b3JlcyB0aGUgdmFsdWVzIG9mIHRoZSBiaW5kaW5ncyBkdXJpbmcgZWFjaCB1cGRhdGUgY3ljbGUgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGlmIHdlIG5lZWQgdG9cbiAqIHVwZGF0ZSB0aGUgdHJhbnNsYXRlZCBub2Rlcy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGJpbmRpbmcncyB2YWx1ZVxuICogQHJldHVybnMgVGhpcyBmdW5jdGlvbiByZXR1cm5zIGl0c2VsZiBzbyB0aGF0IGl0IG1heSBiZSBjaGFpbmVkXG4gKiAoZS5nLiBgaTE4bkV4cChjdHgubmFtZSkoY3R4LnRpdGxlKWApXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtWkxOG5FeHAodmFsdWUpIHtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgc2V0TWFza0JpdChiaW5kaW5nVXBkYXRlZChsVmlldywgbmV4dEJpbmRpbmdJbmRleCgpLCB2YWx1ZSkpO1xuICAgIHJldHVybiDJtcm1aTE4bkV4cDtcbn1cbi8qKlxuICogVXBkYXRlcyBhIHRyYW5zbGF0aW9uIGJsb2NrIG9yIGFuIGkxOG4gYXR0cmlidXRlIHdoZW4gdGhlIGJpbmRpbmdzIGhhdmUgY2hhbmdlZC5cbiAqXG4gKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgZWl0aGVyIHtAbGluayBpMThuU3RhcnR9ICh0cmFuc2xhdGlvbiBibG9jaykgb3Ige0BsaW5rIGkxOG5BdHRyaWJ1dGVzfVxuICogKGkxOG4gYXR0cmlidXRlKSBvbiB3aGljaCBpdCBzaG91bGQgdXBkYXRlIHRoZSBjb250ZW50LlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVpMThuQXBwbHkoaW5kZXgpIHtcbiAgICBhcHBseUkxOG4oZ2V0VFZpZXcoKSwgZ2V0TFZpZXcoKSwgaW5kZXggKyBIRUFERVJfT0ZGU0VUKTtcbn1cbi8qKlxuICogSGFuZGxlcyBtZXNzYWdlIHN0cmluZyBwb3N0LXByb2Nlc3NpbmcgZm9yIGludGVybmF0aW9uYWxpemF0aW9uLlxuICpcbiAqIEhhbmRsZXMgbWVzc2FnZSBzdHJpbmcgcG9zdC1wcm9jZXNzaW5nIGJ5IHRyYW5zZm9ybWluZyBpdCBmcm9tIGludGVybWVkaWF0ZVxuICogZm9ybWF0ICh0aGF0IG1pZ2h0IGNvbnRhaW4gc29tZSBtYXJrZXJzIHRoYXQgd2UgbmVlZCB0byByZXBsYWNlKSB0byB0aGUgZmluYWxcbiAqIGZvcm0sIGNvbnN1bWFibGUgYnkgaTE4blN0YXJ0IGluc3RydWN0aW9uLiBQb3N0IHByb2Nlc3Npbmcgc3RlcHMgaW5jbHVkZTpcbiAqXG4gKiAxLiBSZXNvbHZlIGFsbCBtdWx0aS12YWx1ZSBjYXNlcyAobGlrZSBb77+9KjE6Me+/ve+/vSMyOjHvv71877+9IzQ6Me+/vXzvv70177+9XSlcbiAqIDIuIFJlcGxhY2UgYWxsIElDVSB2YXJzIChsaWtlIFwiVkFSX1BMVVJBTFwiKVxuICogMy4gUmVwbGFjZSBhbGwgcGxhY2Vob2xkZXJzIHVzZWQgaW5zaWRlIElDVXMgaW4gYSBmb3JtIG9mIHtQTEFDRUhPTERFUn1cbiAqIDQuIFJlcGxhY2UgYWxsIElDVSByZWZlcmVuY2VzIHdpdGggY29ycmVzcG9uZGluZyB2YWx1ZXMgKGxpa2Ug77+9SUNVX0VYUF9JQ1VfMe+/vSlcbiAqICAgIGluIGNhc2UgbXVsdGlwbGUgSUNVcyBoYXZlIHRoZSBzYW1lIHBsYWNlaG9sZGVyIG5hbWVcbiAqXG4gKiBAcGFyYW0gbWVzc2FnZSBSYXcgdHJhbnNsYXRpb24gc3RyaW5nIGZvciBwb3N0IHByb2Nlc3NpbmdcbiAqIEBwYXJhbSByZXBsYWNlbWVudHMgU2V0IG9mIHJlcGxhY2VtZW50cyB0aGF0IHNob3VsZCBiZSBhcHBsaWVkXG4gKlxuICogQHJldHVybnMgVHJhbnNmb3JtZWQgc3RyaW5nIHRoYXQgY2FuIGJlIGNvbnN1bWVkIGJ5IGkxOG5TdGFydCBpbnN0cnVjdGlvblxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVpMThuUG9zdHByb2Nlc3MobWVzc2FnZSwgcmVwbGFjZW1lbnRzID0ge30pIHtcbiAgICByZXR1cm4gaTE4blBvc3Rwcm9jZXNzKG1lc3NhZ2UsIHJlcGxhY2VtZW50cyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHByb3ZpZGVycyB3aGljaCBhcmUgZGVmaW5lZCBpbiB0aGUgRGlyZWN0aXZlRGVmLlxuICpcbiAqIFdoZW4gaW5zZXJ0aW5nIHRoZSB0b2tlbnMgYW5kIHRoZSBmYWN0b3JpZXMgaW4gdGhlaXIgcmVzcGVjdGl2ZSBhcnJheXMsIHdlIGNhbiBhc3N1bWUgdGhhdFxuICogdGhpcyBtZXRob2QgaXMgY2FsbGVkIGZpcnN0IGZvciB0aGUgY29tcG9uZW50IChpZiBhbnkpLCBhbmQgdGhlbiBmb3Igb3RoZXIgZGlyZWN0aXZlcyBvbiB0aGUgc2FtZVxuICogbm9kZS5cbiAqIEFzIGEgY29uc2VxdWVuY2UsdGhlIHByb3ZpZGVycyBhcmUgYWx3YXlzIHByb2Nlc3NlZCBpbiB0aGF0IG9yZGVyOlxuICogMSkgVGhlIHZpZXcgcHJvdmlkZXJzIG9mIHRoZSBjb21wb25lbnRcbiAqIDIpIFRoZSBwcm92aWRlcnMgb2YgdGhlIGNvbXBvbmVudFxuICogMykgVGhlIHByb3ZpZGVycyBvZiB0aGUgb3RoZXIgZGlyZWN0aXZlc1xuICogVGhpcyBtYXRjaGVzIHRoZSBzdHJ1Y3R1cmUgb2YgdGhlIGluamVjdGFibGVzIGFycmF5cyBvZiBhIHZpZXcgKGZvciBlYWNoIG5vZGUpLlxuICogU28gdGhlIHRva2VucyBhbmQgdGhlIGZhY3RvcmllcyBjYW4gYmUgcHVzaGVkIGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5cywgZXhjZXB0XG4gKiBpbiBvbmUgY2FzZSBmb3IgbXVsdGkgcHJvdmlkZXJzLlxuICpcbiAqIEBwYXJhbSBkZWYgdGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uXG4gKiBAcGFyYW0gcHJvdmlkZXJzOiBBcnJheSBvZiBgcHJvdmlkZXJzYC5cbiAqIEBwYXJhbSB2aWV3UHJvdmlkZXJzOiBBcnJheSBvZiBgdmlld1Byb3ZpZGVyc2AuXG4gKi9cbmZ1bmN0aW9uIHByb3ZpZGVyc1Jlc29sdmVyKGRlZiwgcHJvdmlkZXJzLCB2aWV3UHJvdmlkZXJzKSB7XG4gICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgIGlmICh0Vmlldy5maXJzdENyZWF0ZVBhc3MpIHtcbiAgICAgICAgY29uc3QgaXNDb21wb25lbnQgPSBpc0NvbXBvbmVudERlZihkZWYpO1xuICAgICAgICAvLyBUaGUgbGlzdCBvZiB2aWV3IHByb3ZpZGVycyBpcyBwcm9jZXNzZWQgZmlyc3QsIGFuZCB0aGUgZmxhZ3MgYXJlIHVwZGF0ZWRcbiAgICAgICAgcmVzb2x2ZVByb3ZpZGVyKHZpZXdQcm92aWRlcnMsIHRWaWV3LmRhdGEsIHRWaWV3LmJsdWVwcmludCwgaXNDb21wb25lbnQsIHRydWUpO1xuICAgICAgICAvLyBUaGVuLCB0aGUgbGlzdCBvZiBwcm92aWRlcnMgaXMgcHJvY2Vzc2VkLCBhbmQgdGhlIGZsYWdzIGFyZSB1cGRhdGVkXG4gICAgICAgIHJlc29sdmVQcm92aWRlcihwcm92aWRlcnMsIHRWaWV3LmRhdGEsIHRWaWV3LmJsdWVwcmludCwgaXNDb21wb25lbnQsIGZhbHNlKTtcbiAgICB9XG59XG4vKipcbiAqIFJlc29sdmVzIGEgcHJvdmlkZXIgYW5kIHB1Ymxpc2hlcyBpdCB0byB0aGUgREkgc3lzdGVtLlxuICovXG5mdW5jdGlvbiByZXNvbHZlUHJvdmlkZXIocHJvdmlkZXIsIHRJbmplY3RhYmxlcywgbEluamVjdGFibGVzQmx1ZXByaW50LCBpc0NvbXBvbmVudCwgaXNWaWV3UHJvdmlkZXIpIHtcbiAgICBwcm92aWRlciA9IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm92aWRlcikpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY2FsbCBgcmVzb2x2ZVByb3ZpZGVyYFxuICAgICAgICAvLyBSZWN1cnNpb24gaXMgT0sgaW4gdGhpcyBjYXNlIGJlY2F1c2UgdGhpcyBjb2RlIHdpbGwgbm90IGJlIGluIGhvdC1wYXRoIG9uY2Ugd2UgaW1wbGVtZW50XG4gICAgICAgIC8vIGNsb25pbmcgb2YgdGhlIGluaXRpYWwgc3RhdGUuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvdmlkZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc29sdmVQcm92aWRlcihwcm92aWRlcltpXSwgdEluamVjdGFibGVzLCBsSW5qZWN0YWJsZXNCbHVlcHJpbnQsIGlzQ29tcG9uZW50LCBpc1ZpZXdQcm92aWRlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICAgICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgICAgICBsZXQgdG9rZW4gPSBpc1R5cGVQcm92aWRlcihwcm92aWRlcikgPyBwcm92aWRlciA6IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyLnByb3ZpZGUpO1xuICAgICAgICBsZXQgcHJvdmlkZXJGYWN0b3J5ID0gcHJvdmlkZXJUb0ZhY3RvcnkocHJvdmlkZXIpO1xuICAgICAgICBjb25zdCB0Tm9kZSA9IGdldEN1cnJlbnRUTm9kZSgpO1xuICAgICAgICBjb25zdCBiZWdpbkluZGV4ID0gdE5vZGUucHJvdmlkZXJJbmRleGVzICYgMTA0ODU3NSAvKiBQcm92aWRlcnNTdGFydEluZGV4TWFzayAqLztcbiAgICAgICAgY29uc3QgZW5kSW5kZXggPSB0Tm9kZS5kaXJlY3RpdmVTdGFydDtcbiAgICAgICAgY29uc3QgY3B0Vmlld1Byb3ZpZGVyc0NvdW50ID0gdE5vZGUucHJvdmlkZXJJbmRleGVzID4+IDIwIC8qIENwdFZpZXdQcm92aWRlcnNDb3VudFNoaWZ0ICovO1xuICAgICAgICBpZiAoaXNUeXBlUHJvdmlkZXIocHJvdmlkZXIpIHx8ICFwcm92aWRlci5tdWx0aSkge1xuICAgICAgICAgICAgLy8gU2luZ2xlIHByb3ZpZGVyIGNhc2U6IHRoZSBmYWN0b3J5IGlzIGNyZWF0ZWQgYW5kIHB1c2hlZCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IG5ldyBOb2RlSW5qZWN0b3JGYWN0b3J5KHByb3ZpZGVyRmFjdG9yeSwgaXNWaWV3UHJvdmlkZXIsIMm1ybVkaXJlY3RpdmVJbmplY3QpO1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdGYWN0b3J5SW5kZXggPSBpbmRleE9mKHRva2VuLCB0SW5qZWN0YWJsZXMsIGlzVmlld1Byb3ZpZGVyID8gYmVnaW5JbmRleCA6IGJlZ2luSW5kZXggKyBjcHRWaWV3UHJvdmlkZXJzQ291bnQsIGVuZEluZGV4KTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ0ZhY3RvcnlJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBkaVB1YmxpY0luSW5qZWN0b3IoZ2V0T3JDcmVhdGVOb2RlSW5qZWN0b3JGb3JOb2RlKHROb2RlLCBsVmlldyksIHRWaWV3LCB0b2tlbik7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJEZXN0cm95SG9va3NJZlN1cHBvcnRlZCh0VmlldywgcHJvdmlkZXIsIHRJbmplY3RhYmxlcy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHRJbmplY3RhYmxlcy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB0Tm9kZS5kaXJlY3RpdmVTdGFydCsrO1xuICAgICAgICAgICAgICAgIHROb2RlLmRpcmVjdGl2ZUVuZCsrO1xuICAgICAgICAgICAgICAgIGlmIChpc1ZpZXdQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICB0Tm9kZS5wcm92aWRlckluZGV4ZXMgKz0gMTA0ODU3NiAvKiBDcHRWaWV3UHJvdmlkZXJzQ291bnRTaGlmdGVyICovO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsSW5qZWN0YWJsZXNCbHVlcHJpbnQucHVzaChmYWN0b3J5KTtcbiAgICAgICAgICAgICAgICBsVmlldy5wdXNoKGZhY3RvcnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbEluamVjdGFibGVzQmx1ZXByaW50W2V4aXN0aW5nRmFjdG9yeUluZGV4XSA9IGZhY3Rvcnk7XG4gICAgICAgICAgICAgICAgbFZpZXdbZXhpc3RpbmdGYWN0b3J5SW5kZXhdID0gZmFjdG9yeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE11bHRpIHByb3ZpZGVyIGNhc2U6XG4gICAgICAgICAgICAvLyBXZSBjcmVhdGUgYSBtdWx0aSBmYWN0b3J5IHdoaWNoIGlzIGdvaW5nIHRvIGFnZ3JlZ2F0ZSBhbGwgdGhlIHZhbHVlcy5cbiAgICAgICAgICAgIC8vIFNpbmNlIHRoZSBvdXRwdXQgb2Ygc3VjaCBhIGZhY3RvcnkgZGVwZW5kcyBvbiBjb250ZW50IG9yIHZpZXcgaW5qZWN0aW9uLFxuICAgICAgICAgICAgLy8gd2UgY3JlYXRlIHR3byBvZiB0aGVtLCB3aGljaCBhcmUgbGlua2VkIHRvZ2V0aGVyLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFRoZSBmaXJzdCBvbmUgKGZvciB2aWV3IHByb3ZpZGVycykgaXMgYWx3YXlzIGluIHRoZSBmaXJzdCBibG9jayBvZiB0aGUgaW5qZWN0YWJsZXMgYXJyYXksXG4gICAgICAgICAgICAvLyBhbmQgdGhlIHNlY29uZCBvbmUgKGZvciBwcm92aWRlcnMpIGlzIGFsd2F5cyBpbiB0aGUgc2Vjb25kIGJsb2NrLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSB2aWV3IHByb3ZpZGVycyBoYXZlIGhpZ2hlciBwcmlvcml0eS4gV2hlbiBhIG11bHRpIHRva2VuXG4gICAgICAgICAgICAvLyBpcyBiZWluZyBsb29rZWQgdXAsIHRoZSB2aWV3IHByb3ZpZGVycyBzaG91bGQgYmUgZm91bmQgZmlyc3QuXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGhhdmUgYSBtdWx0aSBmYWN0b3J5IGluIHRoZSB0aGlyZCBibG9jayAoZGlyZWN0aXZlIGJsb2NrKS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBUaGUgYWxnb3JpdGhtIHRvIHByb2Nlc3MgbXVsdGkgcHJvdmlkZXJzIGlzIGFzIGZvbGxvd3M6XG4gICAgICAgICAgICAvLyAxKSBJZiB0aGUgbXVsdGkgcHJvdmlkZXIgY29tZXMgZnJvbSB0aGUgYHZpZXdQcm92aWRlcnNgIG9mIHRoZSBjb21wb25lbnQ6XG4gICAgICAgICAgICAvLyAgIGEpIElmIHRoZSBzcGVjaWFsIHZpZXcgcHJvdmlkZXJzIGZhY3RvcnkgZG9lc24ndCBleGlzdCwgaXQgaXMgY3JlYXRlZCBhbmQgcHVzaGVkLlxuICAgICAgICAgICAgLy8gICBiKSBFbHNlLCB0aGUgbXVsdGkgcHJvdmlkZXIgaXMgYWRkZWQgdG8gdGhlIGV4aXN0aW5nIG11bHRpIGZhY3RvcnkuXG4gICAgICAgICAgICAvLyAyKSBJZiB0aGUgbXVsdGkgcHJvdmlkZXIgY29tZXMgZnJvbSB0aGUgYHByb3ZpZGVyc2Agb2YgdGhlIGNvbXBvbmVudCBvciBvZiBhbm90aGVyXG4gICAgICAgICAgICAvLyBkaXJlY3RpdmU6XG4gICAgICAgICAgICAvLyAgIGEpIElmIHRoZSBtdWx0aSBmYWN0b3J5IGRvZXNuJ3QgZXhpc3QsIGl0IGlzIGNyZWF0ZWQgYW5kIHByb3ZpZGVyIHB1c2hlZCBpbnRvIGl0LlxuICAgICAgICAgICAgLy8gICAgICBJdCBpcyBhbHNvIGxpbmtlZCB0byB0aGUgbXVsdGkgZmFjdG9yeSBmb3IgdmlldyBwcm92aWRlcnMsIGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICAgIC8vICAgYikgRWxzZSwgdGhlIG11bHRpIHByb3ZpZGVyIGlzIGFkZGVkIHRvIHRoZSBleGlzdGluZyBtdWx0aSBmYWN0b3J5LlxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdQcm92aWRlcnNGYWN0b3J5SW5kZXggPSBpbmRleE9mKHRva2VuLCB0SW5qZWN0YWJsZXMsIGJlZ2luSW5kZXggKyBjcHRWaWV3UHJvdmlkZXJzQ291bnQsIGVuZEluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVmlld1Byb3ZpZGVyc0ZhY3RvcnlJbmRleCA9IGluZGV4T2YodG9rZW4sIHRJbmplY3RhYmxlcywgYmVnaW5JbmRleCwgYmVnaW5JbmRleCArIGNwdFZpZXdQcm92aWRlcnNDb3VudCk7XG4gICAgICAgICAgICBjb25zdCBkb2VzUHJvdmlkZXJzRmFjdG9yeUV4aXN0ID0gZXhpc3RpbmdQcm92aWRlcnNGYWN0b3J5SW5kZXggPj0gMCAmJlxuICAgICAgICAgICAgICAgIGxJbmplY3RhYmxlc0JsdWVwcmludFtleGlzdGluZ1Byb3ZpZGVyc0ZhY3RvcnlJbmRleF07XG4gICAgICAgICAgICBjb25zdCBkb2VzVmlld1Byb3ZpZGVyc0ZhY3RvcnlFeGlzdCA9IGV4aXN0aW5nVmlld1Byb3ZpZGVyc0ZhY3RvcnlJbmRleCA+PSAwICYmXG4gICAgICAgICAgICAgICAgbEluamVjdGFibGVzQmx1ZXByaW50W2V4aXN0aW5nVmlld1Byb3ZpZGVyc0ZhY3RvcnlJbmRleF07XG4gICAgICAgICAgICBpZiAoaXNWaWV3UHJvdmlkZXIgJiYgIWRvZXNWaWV3UHJvdmlkZXJzRmFjdG9yeUV4aXN0IHx8XG4gICAgICAgICAgICAgICAgIWlzVmlld1Byb3ZpZGVyICYmICFkb2VzUHJvdmlkZXJzRmFjdG9yeUV4aXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FzZXMgMS5hIGFuZCAyLmFcbiAgICAgICAgICAgICAgICBkaVB1YmxpY0luSW5qZWN0b3IoZ2V0T3JDcmVhdGVOb2RlSW5qZWN0b3JGb3JOb2RlKHROb2RlLCBsVmlldyksIHRWaWV3LCB0b2tlbik7XG4gICAgICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IG11bHRpRmFjdG9yeShpc1ZpZXdQcm92aWRlciA/IG11bHRpVmlld1Byb3ZpZGVyc0ZhY3RvcnlSZXNvbHZlciA6IG11bHRpUHJvdmlkZXJzRmFjdG9yeVJlc29sdmVyLCBsSW5qZWN0YWJsZXNCbHVlcHJpbnQubGVuZ3RoLCBpc1ZpZXdQcm92aWRlciwgaXNDb21wb25lbnQsIHByb3ZpZGVyRmFjdG9yeSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZpZXdQcm92aWRlciAmJiBkb2VzVmlld1Byb3ZpZGVyc0ZhY3RvcnlFeGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBsSW5qZWN0YWJsZXNCbHVlcHJpbnRbZXhpc3RpbmdWaWV3UHJvdmlkZXJzRmFjdG9yeUluZGV4XS5wcm92aWRlckZhY3RvcnkgPSBmYWN0b3J5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWdpc3RlckRlc3Ryb3lIb29rc0lmU3VwcG9ydGVkKHRWaWV3LCBwcm92aWRlciwgdEluamVjdGFibGVzLmxlbmd0aCwgMCk7XG4gICAgICAgICAgICAgICAgdEluamVjdGFibGVzLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgICAgIHROb2RlLmRpcmVjdGl2ZVN0YXJ0Kys7XG4gICAgICAgICAgICAgICAgdE5vZGUuZGlyZWN0aXZlRW5kKys7XG4gICAgICAgICAgICAgICAgaWYgKGlzVmlld1Byb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHROb2RlLnByb3ZpZGVySW5kZXhlcyArPSAxMDQ4NTc2IC8qIENwdFZpZXdQcm92aWRlcnNDb3VudFNoaWZ0ZXIgKi87XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxJbmplY3RhYmxlc0JsdWVwcmludC5wdXNoKGZhY3RvcnkpO1xuICAgICAgICAgICAgICAgIGxWaWV3LnB1c2goZmFjdG9yeSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBDYXNlcyAxLmIgYW5kIDIuYlxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4SW5GYWN0b3J5ID0gbXVsdGlGYWN0b3J5QWRkKGxJbmplY3RhYmxlc0JsdWVwcmludFtpc1ZpZXdQcm92aWRlciA/IGV4aXN0aW5nVmlld1Byb3ZpZGVyc0ZhY3RvcnlJbmRleCA6XG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nUHJvdmlkZXJzRmFjdG9yeUluZGV4XSwgcHJvdmlkZXJGYWN0b3J5LCAhaXNWaWV3UHJvdmlkZXIgJiYgaXNDb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyRGVzdHJveUhvb2tzSWZTdXBwb3J0ZWQodFZpZXcsIHByb3ZpZGVyLCBleGlzdGluZ1Byb3ZpZGVyc0ZhY3RvcnlJbmRleCA+IC0xID8gZXhpc3RpbmdQcm92aWRlcnNGYWN0b3J5SW5kZXggOlxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1ZpZXdQcm92aWRlcnNGYWN0b3J5SW5kZXgsIGluZGV4SW5GYWN0b3J5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNWaWV3UHJvdmlkZXIgJiYgaXNDb21wb25lbnQgJiYgZG9lc1ZpZXdQcm92aWRlcnNGYWN0b3J5RXhpc3QpIHtcbiAgICAgICAgICAgICAgICBsSW5qZWN0YWJsZXNCbHVlcHJpbnRbZXhpc3RpbmdWaWV3UHJvdmlkZXJzRmFjdG9yeUluZGV4XS5jb21wb25lbnRQcm92aWRlcnMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogUmVnaXN0ZXJzIHRoZSBgbmdPbkRlc3Ryb3lgIGhvb2sgb2YgYSBwcm92aWRlciwgaWYgdGhlIHByb3ZpZGVyIHN1cHBvcnRzIGRlc3Ryb3kgaG9va3MuXG4gKiBAcGFyYW0gdFZpZXcgYFRWaWV3YCBpbiB3aGljaCB0byByZWdpc3RlciB0aGUgaG9vay5cbiAqIEBwYXJhbSBwcm92aWRlciBQcm92aWRlciB3aG9zZSBob29rIHNob3VsZCBiZSByZWdpc3RlcmVkLlxuICogQHBhcmFtIGNvbnRleHRJbmRleCBJbmRleCB1bmRlciB3aGljaCB0byBmaW5kIHRoZSBjb250ZXh0IGZvciB0aGUgaG9vayB3aGVuIGl0J3MgYmVpbmcgaW52b2tlZC5cbiAqIEBwYXJhbSBpbmRleEluRmFjdG9yeSBPbmx5IHJlcXVpcmVkIGZvciBgbXVsdGlgIHByb3ZpZGVycy4gSW5kZXggb2YgdGhlIHByb3ZpZGVyIGluIHRoZSBtdWx0aVxuICogcHJvdmlkZXIgZmFjdG9yeS5cbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJEZXN0cm95SG9va3NJZlN1cHBvcnRlZCh0VmlldywgcHJvdmlkZXIsIGNvbnRleHRJbmRleCwgaW5kZXhJbkZhY3RvcnkpIHtcbiAgICBjb25zdCBwcm92aWRlcklzVHlwZVByb3ZpZGVyID0gaXNUeXBlUHJvdmlkZXIocHJvdmlkZXIpO1xuICAgIGNvbnN0IHByb3ZpZGVySXNDbGFzc1Byb3ZpZGVyID0gaXNDbGFzc1Byb3ZpZGVyKHByb3ZpZGVyKTtcbiAgICBpZiAocHJvdmlkZXJJc1R5cGVQcm92aWRlciB8fCBwcm92aWRlcklzQ2xhc3NQcm92aWRlcikge1xuICAgICAgICAvLyBSZXNvbHZlIGZvcndhcmQgcmVmZXJlbmNlcyBhcyBgdXNlQ2xhc3NgIGNhbiBob2xkIGEgZm9yd2FyZCByZWZlcmVuY2UuXG4gICAgICAgIGNvbnN0IGNsYXNzVG9rZW4gPSBwcm92aWRlcklzQ2xhc3NQcm92aWRlciA/IHJlc29sdmVGb3J3YXJkUmVmKHByb3ZpZGVyLnVzZUNsYXNzKSA6IHByb3ZpZGVyO1xuICAgICAgICBjb25zdCBwcm90b3R5cGUgPSBjbGFzc1Rva2VuLnByb3RvdHlwZTtcbiAgICAgICAgY29uc3QgbmdPbkRlc3Ryb3kgPSBwcm90b3R5cGUubmdPbkRlc3Ryb3k7XG4gICAgICAgIGlmIChuZ09uRGVzdHJveSkge1xuICAgICAgICAgICAgY29uc3QgaG9va3MgPSB0Vmlldy5kZXN0cm95SG9va3MgfHwgKHRWaWV3LmRlc3Ryb3lIb29rcyA9IFtdKTtcbiAgICAgICAgICAgIGlmICghcHJvdmlkZXJJc1R5cGVQcm92aWRlciAmJiBwcm92aWRlci5tdWx0aSkge1xuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgICAgICAgICBhc3NlcnREZWZpbmVkKGluZGV4SW5GYWN0b3J5LCAnaW5kZXhJbkZhY3Rvcnkgd2hlbiByZWdpc3RlcmluZyBtdWx0aSBmYWN0b3J5IGRlc3Ryb3kgaG9vaycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nQ2FsbGJhY2tzSW5kZXggPSBob29rcy5pbmRleE9mKGNvbnRleHRJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ2FsbGJhY2tzSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnB1c2goY29udGV4dEluZGV4LCBbaW5kZXhJbkZhY3RvcnksIG5nT25EZXN0cm95XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBob29rc1tleGlzdGluZ0NhbGxiYWNrc0luZGV4ICsgMV0ucHVzaChpbmRleEluRmFjdG9yeSwgbmdPbkRlc3Ryb3kpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGhvb2tzLnB1c2goY29udGV4dEluZGV4LCBuZ09uRGVzdHJveSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEFkZCBhIGZhY3RvcnkgaW4gYSBtdWx0aSBmYWN0b3J5LlxuICogQHJldHVybnMgSW5kZXggYXQgd2hpY2ggdGhlIGZhY3Rvcnkgd2FzIGluc2VydGVkLlxuICovXG5mdW5jdGlvbiBtdWx0aUZhY3RvcnlBZGQobXVsdGlGYWN0b3J5LCBmYWN0b3J5LCBpc0NvbXBvbmVudFByb3ZpZGVyKSB7XG4gICAgaWYgKGlzQ29tcG9uZW50UHJvdmlkZXIpIHtcbiAgICAgICAgbXVsdGlGYWN0b3J5LmNvbXBvbmVudFByb3ZpZGVycysrO1xuICAgIH1cbiAgICByZXR1cm4gbXVsdGlGYWN0b3J5Lm11bHRpLnB1c2goZmFjdG9yeSkgLSAxO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBpbmRleCBvZiBpdGVtIGluIHRoZSBhcnJheSwgYnV0IG9ubHkgaW4gdGhlIGJlZ2luIHRvIGVuZCByYW5nZS5cbiAqL1xuZnVuY3Rpb24gaW5kZXhPZihpdGVtLCBhcnIsIGJlZ2luLCBlbmQpIHtcbiAgICBmb3IgKGxldCBpID0gYmVnaW47IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICBpZiAoYXJyW2ldID09PSBpdGVtKVxuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8qKlxuICogVXNlIHRoaXMgd2l0aCBgbXVsdGlgIGBwcm92aWRlcnNgLlxuICovXG5mdW5jdGlvbiBtdWx0aVByb3ZpZGVyc0ZhY3RvcnlSZXNvbHZlcihfLCB0RGF0YSwgbERhdGEsIHROb2RlKSB7XG4gICAgcmV0dXJuIG11bHRpUmVzb2x2ZSh0aGlzLm11bHRpLCBbXSk7XG59XG4vKipcbiAqIFVzZSB0aGlzIHdpdGggYG11bHRpYCBgdmlld1Byb3ZpZGVyc2AuXG4gKlxuICogVGhpcyBmYWN0b3J5IGtub3dzIGhvdyB0byBjb25jYXRlbmF0ZSBpdHNlbGYgd2l0aCB0aGUgZXhpc3RpbmcgYG11bHRpYCBgcHJvdmlkZXJzYC5cbiAqL1xuZnVuY3Rpb24gbXVsdGlWaWV3UHJvdmlkZXJzRmFjdG9yeVJlc29sdmVyKF8sIHREYXRhLCBsVmlldywgdE5vZGUpIHtcbiAgICBjb25zdCBmYWN0b3JpZXMgPSB0aGlzLm11bHRpO1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKHRoaXMucHJvdmlkZXJGYWN0b3J5KSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudENvdW50ID0gdGhpcy5wcm92aWRlckZhY3RvcnkuY29tcG9uZW50UHJvdmlkZXJzO1xuICAgICAgICBjb25zdCBtdWx0aVByb3ZpZGVycyA9IGdldE5vZGVJbmplY3RhYmxlKGxWaWV3LCBsVmlld1tUVklFV10sIHRoaXMucHJvdmlkZXJGYWN0b3J5LmluZGV4LCB0Tm9kZSk7XG4gICAgICAgIC8vIENvcHkgdGhlIHNlY3Rpb24gb2YgdGhlIGFycmF5IHdoaWNoIGNvbnRhaW5zIGBtdWx0aWAgYHByb3ZpZGVyc2AgZnJvbSB0aGUgY29tcG9uZW50XG4gICAgICAgIHJlc3VsdCA9IG11bHRpUHJvdmlkZXJzLnNsaWNlKDAsIGNvbXBvbmVudENvdW50KTtcbiAgICAgICAgLy8gSW5zZXJ0IHRoZSBgdmlld1Byb3ZpZGVyYCBpbnN0YW5jZXMuXG4gICAgICAgIG11bHRpUmVzb2x2ZShmYWN0b3JpZXMsIHJlc3VsdCk7XG4gICAgICAgIC8vIENvcHkgdGhlIHNlY3Rpb24gb2YgdGhlIGFycmF5IHdoaWNoIGNvbnRhaW5zIGBtdWx0aWAgYHByb3ZpZGVyc2AgZnJvbSBvdGhlciBkaXJlY3RpdmVzXG4gICAgICAgIGZvciAobGV0IGkgPSBjb21wb25lbnRDb3VudDsgaSA8IG11bHRpUHJvdmlkZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChtdWx0aVByb3ZpZGVyc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IFtdO1xuICAgICAgICAvLyBJbnNlcnQgdGhlIGB2aWV3UHJvdmlkZXJgIGluc3RhbmNlcy5cbiAgICAgICAgbXVsdGlSZXNvbHZlKGZhY3RvcmllcywgcmVzdWx0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogTWFwcyBhbiBhcnJheSBvZiBmYWN0b3JpZXMgaW50byBhbiBhcnJheSBvZiB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIG11bHRpUmVzb2x2ZShmYWN0b3JpZXMsIHJlc3VsdCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmFjdG9yaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSBmYWN0b3JpZXNbaV07XG4gICAgICAgIHJlc3VsdC5wdXNoKGZhY3RvcnkoKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBtdWx0aSBmYWN0b3J5LlxuICovXG5mdW5jdGlvbiBtdWx0aUZhY3RvcnkoZmFjdG9yeUZuLCBpbmRleCwgaXNWaWV3UHJvdmlkZXIsIGlzQ29tcG9uZW50LCBmKSB7XG4gICAgY29uc3QgZmFjdG9yeSA9IG5ldyBOb2RlSW5qZWN0b3JGYWN0b3J5KGZhY3RvcnlGbiwgaXNWaWV3UHJvdmlkZXIsIMm1ybVkaXJlY3RpdmVJbmplY3QpO1xuICAgIGZhY3RvcnkubXVsdGkgPSBbXTtcbiAgICBmYWN0b3J5LmluZGV4ID0gaW5kZXg7XG4gICAgZmFjdG9yeS5jb21wb25lbnRQcm92aWRlcnMgPSAwO1xuICAgIG11bHRpRmFjdG9yeUFkZChmYWN0b3J5LCBmLCBpc0NvbXBvbmVudCAmJiAhaXNWaWV3UHJvdmlkZXIpO1xuICAgIHJldHVybiBmYWN0b3J5O1xufVxuXG4vKipcbiAqIFRoaXMgZmVhdHVyZSByZXNvbHZlcyB0aGUgcHJvdmlkZXJzIG9mIGEgZGlyZWN0aXZlIChvciBjb21wb25lbnQpLFxuICogYW5kIHB1Ymxpc2ggdGhlbSBpbnRvIHRoZSBESSBzeXN0ZW0sIG1ha2luZyBpdCB2aXNpYmxlIHRvIG90aGVycyBmb3IgaW5qZWN0aW9uLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIENvbXBvbmVudFdpdGhQcm92aWRlcnMge1xuICogICBjb25zdHJ1Y3Rvcihwcml2YXRlIGdyZWV0ZXI6IEdyZWV0ZXJERSkge31cbiAqXG4gKiAgIHN0YXRpYyDJtWNtcCA9IGRlZmluZUNvbXBvbmVudCh7XG4gKiAgICAgdHlwZTogQ29tcG9uZW50V2l0aFByb3ZpZGVycyxcbiAqICAgICBzZWxlY3RvcnM6IFtbJ2NvbXBvbmVudC13aXRoLXByb3ZpZGVycyddXSxcbiAqICAgIGZhY3Rvcnk6ICgpID0+IG5ldyBDb21wb25lbnRXaXRoUHJvdmlkZXJzKGRpcmVjdGl2ZUluamVjdChHcmVldGVyREUgYXMgYW55KSksXG4gKiAgICBkZWNsczogMSxcbiAqICAgIHZhcnM6IDEsXG4gKiAgICB0ZW1wbGF0ZTogZnVuY3Rpb24oZnM6IFJlbmRlckZsYWdzLCBjdHg6IENvbXBvbmVudFdpdGhQcm92aWRlcnMpIHtcbiAqICAgICAgaWYgKGZzICYgUmVuZGVyRmxhZ3MuQ3JlYXRlKSB7XG4gKiAgICAgICAgybXJtXRleHQoMCk7XG4gKiAgICAgIH1cbiAqICAgICAgaWYgKGZzICYgUmVuZGVyRmxhZ3MuVXBkYXRlKSB7XG4gKiAgICAgICAgybXJtXRleHRJbnRlcnBvbGF0ZShjdHguZ3JlZXRlci5ncmVldCgpKTtcbiAqICAgICAgfVxuICogICAgfSxcbiAqICAgIGZlYXR1cmVzOiBbybXJtVByb3ZpZGVyc0ZlYXR1cmUoW0dyZWV0ZXJERV0pXVxuICogIH0pO1xuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIGRlZmluaXRpb25cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1UHJvdmlkZXJzRmVhdHVyZShwcm92aWRlcnMsIHZpZXdQcm92aWRlcnMgPSBbXSkge1xuICAgIHJldHVybiAoZGVmaW5pdGlvbikgPT4ge1xuICAgICAgICBkZWZpbml0aW9uLnByb3ZpZGVyc1Jlc29sdmVyID1cbiAgICAgICAgICAgIChkZWYsIHByb2Nlc3NQcm92aWRlcnNGbikgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm92aWRlcnNSZXNvbHZlcihkZWYsIC8vXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1Byb3ZpZGVyc0ZuID8gcHJvY2Vzc1Byb3ZpZGVyc0ZuKHByb3ZpZGVycykgOiBwcm92aWRlcnMsIC8vXG4gICAgICAgICAgICAgICAgdmlld1Byb3ZpZGVycyk7XG4gICAgICAgICAgICB9O1xuICAgIH07XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29tcG9uZW50IGNyZWF0ZWQgYnkgYSBgQ29tcG9uZW50RmFjdG9yeWAuXG4gKiBQcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGNvbXBvbmVudCBpbnN0YW5jZSBhbmQgcmVsYXRlZCBvYmplY3RzLFxuICogYW5kIHByb3ZpZGVzIHRoZSBtZWFucyBvZiBkZXN0cm95aW5nIHRoZSBpbnN0YW5jZS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIENvbXBvbmVudFJlZiQxIHtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYSBmYWN0b3J5IHRoYXQgY2FuIGNyZWF0ZSBhIGNvbXBvbmVudCBkeW5hbWljYWxseS5cbiAqIEluc3RhbnRpYXRlIGEgZmFjdG9yeSBmb3IgYSBnaXZlbiB0eXBlIG9mIGNvbXBvbmVudCB3aXRoIGByZXNvbHZlQ29tcG9uZW50RmFjdG9yeSgpYC5cbiAqIFVzZSB0aGUgcmVzdWx0aW5nIGBDb21wb25lbnRGYWN0b3J5LmNyZWF0ZSgpYCBtZXRob2QgdG8gY3JlYXRlIGEgY29tcG9uZW50IG9mIHRoYXQgdHlwZS5cbiAqXG4gKiBAc2VlIFtEeW5hbWljIENvbXBvbmVudHNdKGd1aWRlL2R5bmFtaWMtY29tcG9uZW50LWxvYWRlcilcbiAqXG4gKiBAcHVibGljQXBpXG4gKlxuICogQGRlcHJlY2F0ZWQgQW5ndWxhciBubyBsb25nZXIgcmVxdWlyZXMgQ29tcG9uZW50IGZhY3Rvcmllcy4gUGxlYXNlIHVzZSBvdGhlciBBUElzIHdoZXJlXG4gKiAgICAgQ29tcG9uZW50IGNsYXNzIGNhbiBiZSB1c2VkIGRpcmVjdGx5LlxuICovXG5jbGFzcyBDb21wb25lbnRGYWN0b3J5JDEge1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIG5vQ29tcG9uZW50RmFjdG9yeUVycm9yKGNvbXBvbmVudCkge1xuICAgIGNvbnN0IGVycm9yID0gRXJyb3IoYE5vIGNvbXBvbmVudCBmYWN0b3J5IGZvdW5kIGZvciAke3N0cmluZ2lmeShjb21wb25lbnQpfS4gRGlkIHlvdSBhZGQgaXQgdG8gQE5nTW9kdWxlLmVudHJ5Q29tcG9uZW50cz9gKTtcbiAgICBlcnJvcltFUlJPUl9DT01QT05FTlRdID0gY29tcG9uZW50O1xuICAgIHJldHVybiBlcnJvcjtcbn1cbmNvbnN0IEVSUk9SX0NPTVBPTkVOVCA9ICduZ0NvbXBvbmVudCc7XG5mdW5jdGlvbiBnZXRDb21wb25lbnQoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3JbRVJST1JfQ09NUE9ORU5UXTtcbn1cbmNsYXNzIF9OdWxsQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIHtcbiAgICByZXNvbHZlQ29tcG9uZW50RmFjdG9yeShjb21wb25lbnQpIHtcbiAgICAgICAgdGhyb3cgbm9Db21wb25lbnRGYWN0b3J5RXJyb3IoY29tcG9uZW50KTtcbiAgICB9XG59XG4vKipcbiAqIEEgc2ltcGxlIHJlZ2lzdHJ5IHRoYXQgbWFwcyBgQ29tcG9uZW50c2AgdG8gZ2VuZXJhdGVkIGBDb21wb25lbnRGYWN0b3J5YCBjbGFzc2VzXG4gKiB0aGF0IGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBpbnN0YW5jZXMgb2YgY29tcG9uZW50cy5cbiAqIFVzZSB0byBvYnRhaW4gdGhlIGZhY3RvcnkgZm9yIGEgZ2l2ZW4gY29tcG9uZW50IHR5cGUsXG4gKiB0aGVuIHVzZSB0aGUgZmFjdG9yeSdzIGBjcmVhdGUoKWAgbWV0aG9kIHRvIGNyZWF0ZSBhIGNvbXBvbmVudCBvZiB0aGF0IHR5cGUuXG4gKlxuICogTm90ZTogc2luY2UgdjEzLCBkeW5hbWljIGNvbXBvbmVudCBjcmVhdGlvbiB2aWFcbiAqIFtgVmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnRgXShhcGkvY29yZS9WaWV3Q29udGFpbmVyUmVmI2NyZWF0ZUNvbXBvbmVudClcbiAqIGRvZXMgKipub3QqKiByZXF1aXJlIHJlc29sdmluZyBjb21wb25lbnQgZmFjdG9yeTogY29tcG9uZW50IGNsYXNzIGNhbiBiZSB1c2VkIGRpcmVjdGx5LlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqXG4gKiBAZGVwcmVjYXRlZCBBbmd1bGFyIG5vIGxvbmdlciByZXF1aXJlcyBDb21wb25lbnQgZmFjdG9yaWVzLiBQbGVhc2UgdXNlIG90aGVyIEFQSXMgd2hlcmVcbiAqICAgICBDb21wb25lbnQgY2xhc3MgY2FuIGJlIHVzZWQgZGlyZWN0bHkuXG4gKi9cbmNsYXNzIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciQxIHtcbn1cbkNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciQxLk5VTEwgPSAoIC8qIEBfX1BVUkVfXyAqL25ldyBfTnVsbENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcigpKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIENyZWF0ZXMgYW4gRWxlbWVudFJlZiBmcm9tIHRoZSBtb3N0IHJlY2VudCBub2RlLlxuICpcbiAqIEByZXR1cm5zIFRoZSBFbGVtZW50UmVmIGluc3RhbmNlIHRvIHVzZVxuICovXG5mdW5jdGlvbiBpbmplY3RFbGVtZW50UmVmKCkge1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50UmVmKGdldEN1cnJlbnRUTm9kZSgpLCBnZXRMVmlldygpKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBFbGVtZW50UmVmIGdpdmVuIGEgbm9kZS5cbiAqXG4gKiBAcGFyYW0gdE5vZGUgVGhlIG5vZGUgZm9yIHdoaWNoIHlvdSdkIGxpa2UgYW4gRWxlbWVudFJlZlxuICogQHBhcmFtIGxWaWV3IFRoZSB2aWV3IHRvIHdoaWNoIHRoZSBub2RlIGJlbG9uZ3NcbiAqIEByZXR1cm5zIFRoZSBFbGVtZW50UmVmIGluc3RhbmNlIHRvIHVzZVxuICovXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50UmVmKHROb2RlLCBsVmlldykge1xuICAgIHJldHVybiBuZXcgRWxlbWVudFJlZihnZXROYXRpdmVCeVROb2RlKHROb2RlLCBsVmlldykpO1xufVxuLyoqXG4gKiBBIHdyYXBwZXIgYXJvdW5kIGEgbmF0aXZlIGVsZW1lbnQgaW5zaWRlIG9mIGEgVmlldy5cbiAqXG4gKiBBbiBgRWxlbWVudFJlZmAgaXMgYmFja2VkIGJ5IGEgcmVuZGVyLXNwZWNpZmljIGVsZW1lbnQuIEluIHRoZSBicm93c2VyLCB0aGlzIGlzIHVzdWFsbHkgYSBET01cbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlY3VyaXR5IFBlcm1pdHRpbmcgZGlyZWN0IGFjY2VzcyB0byB0aGUgRE9NIGNhbiBtYWtlIHlvdXIgYXBwbGljYXRpb24gbW9yZSB2dWxuZXJhYmxlIHRvXG4gKiBYU1MgYXR0YWNrcy4gQ2FyZWZ1bGx5IHJldmlldyBhbnkgdXNlIG9mIGBFbGVtZW50UmVmYCBpbiB5b3VyIGNvZGUuIEZvciBtb3JlIGRldGFpbCwgc2VlIHRoZVxuICogW1NlY3VyaXR5IEd1aWRlXShodHRwczovL2cuY28vbmcvc2VjdXJpdHkpLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuLy8gTm90ZTogV2UgZG9uJ3QgZXhwb3NlIHRoaW5ncyBsaWtlIGBJbmplY3RvcmAsIGBWaWV3Q29udGFpbmVyYCwgLi4uIGhlcmUsXG4vLyBpLmUuIHVzZXJzIGhhdmUgdG8gYXNrIGZvciB3aGF0IHRoZXkgbmVlZC4gV2l0aCB0aGF0LCB3ZSBjYW4gYnVpbGQgYmV0dGVyIGFuYWx5c2lzIHRvb2xzXG4vLyBhbmQgY291bGQgZG8gYmV0dGVyIGNvZGVnZW4gaW4gdGhlIGZ1dHVyZS5cbmNsYXNzIEVsZW1lbnRSZWYge1xuICAgIGNvbnN0cnVjdG9yKG5hdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5uYXRpdmVFbGVtZW50ID0gbmF0aXZlRWxlbWVudDtcbiAgICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQG5vY29sbGFwc2VcbiAqL1xuRWxlbWVudFJlZi5fX05HX0VMRU1FTlRfSURfXyA9IGluamVjdEVsZW1lbnRSZWY7XG4vKipcbiAqIFVud3JhcHMgYEVsZW1lbnRSZWZgIGFuZCByZXR1cm4gdGhlIGBuYXRpdmVFbGVtZW50YC5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgdmFsdWUgdG8gdW53cmFwXG4gKiBAcmV0dXJucyBgbmF0aXZlRWxlbWVudGAgaWYgYEVsZW1lbnRSZWZgIG90aGVyd2lzZSByZXR1cm5zIHZhbHVlIGFzIGlzLlxuICovXG5mdW5jdGlvbiB1bndyYXBFbGVtZW50UmVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRWxlbWVudFJlZiA/IHZhbHVlLm5hdGl2ZUVsZW1lbnQgOiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jb25zdCBSZW5kZXJlcjJJbnRlcmNlcHRvciA9IG5ldyBJbmplY3Rpb25Ub2tlbignUmVuZGVyZXIySW50ZXJjZXB0b3InKTtcbi8qKlxuICogQ3JlYXRlcyBhbmQgaW5pdGlhbGl6ZXMgYSBjdXN0b20gcmVuZGVyZXIgdGhhdCBpbXBsZW1lbnRzIHRoZSBgUmVuZGVyZXIyYCBiYXNlIGNsYXNzLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgUmVuZGVyZXJGYWN0b3J5MiB7XG59XG4vKipcbiAqIEV4dGVuZCB0aGlzIGJhc2UgY2xhc3MgdG8gaW1wbGVtZW50IGN1c3RvbSByZW5kZXJpbmcuIEJ5IGRlZmF1bHQsIEFuZ3VsYXJcbiAqIHJlbmRlcnMgYSB0ZW1wbGF0ZSBpbnRvIERPTS4gWW91IGNhbiB1c2UgY3VzdG9tIHJlbmRlcmluZyB0byBpbnRlcmNlcHRcbiAqIHJlbmRlcmluZyBjYWxscywgb3IgdG8gcmVuZGVyIHRvIHNvbWV0aGluZyBvdGhlciB0aGFuIERPTS5cbiAqXG4gKiBDcmVhdGUgeW91ciBjdXN0b20gcmVuZGVyZXIgdXNpbmcgYFJlbmRlcmVyRmFjdG9yeTJgLlxuICpcbiAqIFVzZSBhIGN1c3RvbSByZW5kZXJlciB0byBieXBhc3MgQW5ndWxhcidzIHRlbXBsYXRpbmcgYW5kXG4gKiBtYWtlIGN1c3RvbSBVSSBjaGFuZ2VzIHRoYXQgY2FuJ3QgYmUgZXhwcmVzc2VkIGRlY2xhcmF0aXZlbHkuXG4gKiBGb3IgZXhhbXBsZSBpZiB5b3UgbmVlZCB0byBzZXQgYSBwcm9wZXJ0eSBvciBhbiBhdHRyaWJ1dGUgd2hvc2UgbmFtZSBpc1xuICogbm90IHN0YXRpY2FsbHkga25vd24sIHVzZSB0aGUgYHNldFByb3BlcnR5KClgIG9yXG4gKiBgc2V0QXR0cmlidXRlKClgIG1ldGhvZC5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIFJlbmRlcmVyMiB7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQG5vY29sbGFwc2VcbiAqL1xuUmVuZGVyZXIyLl9fTkdfRUxFTUVOVF9JRF9fID0gKCkgPT4gaW5qZWN0UmVuZGVyZXIyKCk7XG4vKiogUmV0dXJucyBhIFJlbmRlcmVyMiAob3IgdGhyb3dzIHdoZW4gYXBwbGljYXRpb24gd2FzIGJvb3RzdHJhcHBlZCB3aXRoIFJlbmRlcmVyMykgKi9cbmZ1bmN0aW9uIGdldE9yQ3JlYXRlUmVuZGVyZXIyKGxWaWV3KSB7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBsVmlld1tSRU5ERVJFUl07XG4gICAgaWYgKG5nRGV2TW9kZSAmJiAhaXNQcm9jZWR1cmFsUmVuZGVyZXIocmVuZGVyZXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGluamVjdCBSZW5kZXJlcjIgd2hlbiB0aGUgYXBwbGljYXRpb24gdXNlcyBSZW5kZXJlcjMhJyk7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJlcjtcbn1cbi8qKiBJbmplY3RzIGEgUmVuZGVyZXIyIGZvciB0aGUgY3VycmVudCBjb21wb25lbnQuICovXG5mdW5jdGlvbiBpbmplY3RSZW5kZXJlcjIoKSB7XG4gICAgLy8gV2UgbmVlZCB0aGUgUmVuZGVyZXIgdG8gYmUgYmFzZWQgb24gdGhlIGNvbXBvbmVudCB0aGF0IGl0J3MgYmVpbmcgaW5qZWN0ZWQgaW50bywgaG93ZXZlciBzaW5jZVxuICAgIC8vIERJIGhhcHBlbnMgYmVmb3JlIHdlJ3ZlIGVudGVyZWQgaXRzIHZpZXcsIGBnZXRMVmlld2Agd2lsbCByZXR1cm4gdGhlIHBhcmVudCB2aWV3IGluc3RlYWQuXG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IHROb2RlID0gZ2V0Q3VycmVudFROb2RlKCk7XG4gICAgY29uc3Qgbm9kZUF0SW5kZXggPSBnZXRDb21wb25lbnRMVmlld0J5SW5kZXgodE5vZGUuaW5kZXgsIGxWaWV3KTtcbiAgICByZXR1cm4gZ2V0T3JDcmVhdGVSZW5kZXJlcjIoaXNMVmlldyhub2RlQXRJbmRleCkgPyBub2RlQXRJbmRleCA6IGxWaWV3KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFNhbml0aXplciBpcyB1c2VkIGJ5IHRoZSB2aWV3cyB0byBzYW5pdGl6ZSBwb3RlbnRpYWxseSBkYW5nZXJvdXMgdmFsdWVzLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgU2FuaXRpemVyIHtcbn1cbi8qKiBAbm9jb2xsYXBzZSAqL1xuU2FuaXRpemVyLsm1cHJvdiA9IMm1ybVkZWZpbmVJbmplY3RhYmxlKHtcbiAgICB0b2tlbjogU2FuaXRpemVyLFxuICAgIHByb3ZpZGVkSW46ICdyb290JyxcbiAgICBmYWN0b3J5OiAoKSA9PiBudWxsLFxufSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBAZGVzY3JpcHRpb24gUmVwcmVzZW50cyB0aGUgdmVyc2lvbiBvZiBBbmd1bGFyXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBWZXJzaW9uIHtcbiAgICBjb25zdHJ1Y3RvcihmdWxsKSB7XG4gICAgICAgIHRoaXMuZnVsbCA9IGZ1bGw7XG4gICAgICAgIHRoaXMubWFqb3IgPSBmdWxsLnNwbGl0KCcuJylbMF07XG4gICAgICAgIHRoaXMubWlub3IgPSBmdWxsLnNwbGl0KCcuJylbMV07XG4gICAgICAgIHRoaXMucGF0Y2ggPSBmdWxsLnNwbGl0KCcuJykuc2xpY2UoMikuam9pbignLicpO1xuICAgIH1cbn1cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBWRVJTSU9OID0gbmV3IFZlcnNpb24oJzEzLjIuNicpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIFRoaXMgZGVmYXVsdCB2YWx1ZSBpcyB3aGVuIGNoZWNraW5nIHRoZSBoaWVyYXJjaHkgZm9yIGEgdG9rZW4uXG4vL1xuLy8gSXQgbWVhbnMgYm90aDpcbi8vIC0gdGhlIHRva2VuIGlzIG5vdCBwcm92aWRlZCBieSB0aGUgY3VycmVudCBpbmplY3Rvcixcbi8vIC0gb25seSB0aGUgZWxlbWVudCBpbmplY3RvcnMgc2hvdWxkIGJlIGNoZWNrZWQgKGllIGRvIG5vdCBjaGVjayBtb2R1bGUgaW5qZWN0b3JzXG4vL1xuLy8gICAgICAgICAgbW9kMVxuLy8gICAgICAgICAvXG4vLyAgICAgICBlbDEgICBtb2QyXG4vLyAgICAgICAgIFxcICAvXG4vLyAgICAgICAgIGVsMlxuLy9cbi8vIFdoZW4gcmVxdWVzdGluZyBlbDIuaW5qZWN0b3IuZ2V0KHRva2VuKSwgd2Ugc2hvdWxkIGNoZWNrIGluIHRoZSBmb2xsb3dpbmcgb3JkZXIgYW5kIHJldHVybiB0aGVcbi8vIGZpcnN0IGZvdW5kIHZhbHVlOlxuLy8gLSBlbDIuaW5qZWN0b3IuZ2V0KHRva2VuLCBkZWZhdWx0KVxuLy8gLSBlbDEuaW5qZWN0b3IuZ2V0KHRva2VuLCBOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SKSAtPiBkbyBub3QgY2hlY2sgdGhlIG1vZHVsZVxuLy8gLSBtb2QyLmluamVjdG9yLmdldCh0b2tlbiwgZGVmYXVsdClcbmNvbnN0IE5PVF9GT1VORF9DSEVDS19PTkxZX0VMRU1FTlRfSU5KRUNUT1IgPSB7fTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5mdW5jdGlvbiBjb2xsZWN0TmF0aXZlTm9kZXModFZpZXcsIGxWaWV3LCB0Tm9kZSwgcmVzdWx0LCBpc1Byb2plY3Rpb24gPSBmYWxzZSkge1xuICAgIHdoaWxlICh0Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIGFzc2VydFROb2RlVHlwZSh0Tm9kZSwgMyAvKiBBbnlSTm9kZSAqLyB8IDEyIC8qIEFueUNvbnRhaW5lciAqLyB8IDE2IC8qIFByb2plY3Rpb24gKi8gfCAzMiAvKiBJY3UgKi8pO1xuICAgICAgICBjb25zdCBsTm9kZSA9IGxWaWV3W3ROb2RlLmluZGV4XTtcbiAgICAgICAgaWYgKGxOb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh1bndyYXBSTm9kZShsTm9kZSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIEEgZ2l2ZW4gbE5vZGUgY2FuIHJlcHJlc2VudCBlaXRoZXIgYSBuYXRpdmUgbm9kZSBvciBhIExDb250YWluZXIgKHdoZW4gaXQgaXMgYSBob3N0IG9mIGFcbiAgICAgICAgLy8gVmlld0NvbnRhaW5lclJlZikuIFdoZW4gd2UgZmluZCBhIExDb250YWluZXIgd2UgbmVlZCB0byBkZXNjZW5kIGludG8gaXQgdG8gY29sbGVjdCByb290IG5vZGVzXG4gICAgICAgIC8vIGZyb20gdGhlIHZpZXdzIGluIHRoaXMgY29udGFpbmVyLlxuICAgICAgICBpZiAoaXNMQ29udGFpbmVyKGxOb2RlKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IENPTlRBSU5FUl9IRUFERVJfT0ZGU0VUOyBpIDwgbE5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsVmlld0luQUNvbnRhaW5lciA9IGxOb2RlW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGxWaWV3Rmlyc3RDaGlsZFROb2RlID0gbFZpZXdJbkFDb250YWluZXJbVFZJRVddLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICAgICAgaWYgKGxWaWV3Rmlyc3RDaGlsZFROb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbGxlY3ROYXRpdmVOb2RlcyhsVmlld0luQUNvbnRhaW5lcltUVklFV10sIGxWaWV3SW5BQ29udGFpbmVyLCBsVmlld0ZpcnN0Q2hpbGRUTm9kZSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdE5vZGVUeXBlID0gdE5vZGUudHlwZTtcbiAgICAgICAgaWYgKHROb2RlVHlwZSAmIDggLyogRWxlbWVudENvbnRhaW5lciAqLykge1xuICAgICAgICAgICAgY29sbGVjdE5hdGl2ZU5vZGVzKHRWaWV3LCBsVmlldywgdE5vZGUuY2hpbGQsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodE5vZGVUeXBlICYgMzIgLyogSWN1ICovKSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0Uk5vZGUgPSBpY3VDb250YWluZXJJdGVyYXRlKHROb2RlLCBsVmlldyk7XG4gICAgICAgICAgICBsZXQgck5vZGU7XG4gICAgICAgICAgICB3aGlsZSAock5vZGUgPSBuZXh0Uk5vZGUoKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0Tm9kZVR5cGUgJiAxNiAvKiBQcm9qZWN0aW9uICovKSB7XG4gICAgICAgICAgICBjb25zdCBub2Rlc0luU2xvdCA9IGdldFByb2plY3Rpb25Ob2RlcyhsVmlldywgdE5vZGUpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZXNJblNsb3QpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4ubm9kZXNJblNsb3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50VmlldyA9IGdldExWaWV3UGFyZW50KGxWaWV3W0RFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXXSk7XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydFBhcmVudFZpZXcocGFyZW50Vmlldyk7XG4gICAgICAgICAgICAgICAgY29sbGVjdE5hdGl2ZU5vZGVzKHBhcmVudFZpZXdbVFZJRVddLCBwYXJlbnRWaWV3LCBub2Rlc0luU2xvdCwgcmVzdWx0LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0Tm9kZSA9IGlzUHJvamVjdGlvbiA/IHROb2RlLnByb2plY3Rpb25OZXh0IDogdE5vZGUubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jbGFzcyBWaWV3UmVmJDEge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgIC8qKlxuICAgICAqIFRoaXMgcmVwcmVzZW50cyBgTFZpZXdgIGFzc29jaWF0ZWQgd2l0aCB0aGUgY29tcG9uZW50IHdoZW4gVmlld1JlZiBpcyBhIENoYW5nZURldGVjdG9yUmVmLlxuICAgICAqXG4gICAgICogV2hlbiBWaWV3UmVmIGlzIGNyZWF0ZWQgZm9yIGEgZHluYW1pYyBjb21wb25lbnQsIHRoaXMgYWxzbyByZXByZXNlbnRzIHRoZSBgTFZpZXdgIGZvciB0aGVcbiAgICAgKiBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBGb3IgYSBcInJlZ3VsYXJcIiBWaWV3UmVmIGNyZWF0ZWQgZm9yIGFuIGVtYmVkZGVkIHZpZXcsIHRoaXMgaXMgdGhlIGBMVmlld2AgZm9yIHRoZSBlbWJlZGRlZFxuICAgICAqIHZpZXcuXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfbFZpZXcsIFxuICAgIC8qKlxuICAgICAqIFRoaXMgcmVwcmVzZW50cyB0aGUgYExWaWV3YCBhc3NvY2lhdGVkIHdpdGggdGhlIHBvaW50IHdoZXJlIGBDaGFuZ2VEZXRlY3RvclJlZmAgd2FzXG4gICAgICogcmVxdWVzdGVkLlxuICAgICAqXG4gICAgICogVGhpcyBtYXkgYmUgZGlmZmVyZW50IGZyb20gYF9sVmlld2AgaWYgdGhlIGBfY2RSZWZJbmplY3RpbmdWaWV3YCBpcyBhbiBlbWJlZGRlZCB2aWV3LlxuICAgICAqL1xuICAgIF9jZFJlZkluamVjdGluZ1ZpZXcpIHtcbiAgICAgICAgdGhpcy5fbFZpZXcgPSBfbFZpZXc7XG4gICAgICAgIHRoaXMuX2NkUmVmSW5qZWN0aW5nVmlldyA9IF9jZFJlZkluamVjdGluZ1ZpZXc7XG4gICAgICAgIHRoaXMuX2FwcFJlZiA9IG51bGw7XG4gICAgICAgIHRoaXMuX2F0dGFjaGVkVG9WaWV3Q29udGFpbmVyID0gZmFsc2U7XG4gICAgfVxuICAgIGdldCByb290Tm9kZXMoKSB7XG4gICAgICAgIGNvbnN0IGxWaWV3ID0gdGhpcy5fbFZpZXc7XG4gICAgICAgIGNvbnN0IHRWaWV3ID0gbFZpZXdbVFZJRVddO1xuICAgICAgICByZXR1cm4gY29sbGVjdE5hdGl2ZU5vZGVzKHRWaWV3LCBsVmlldywgdFZpZXcuZmlyc3RDaGlsZCwgW10pO1xuICAgIH1cbiAgICBnZXQgY29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xWaWV3W0NPTlRFWFRdO1xuICAgIH1cbiAgICBzZXQgY29udGV4dCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9sVmlld1tDT05URVhUXSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgZGVzdHJveWVkKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2xWaWV3W0ZMQUdTXSAmIDI1NiAvKiBEZXN0cm95ZWQgKi8pID09PSAyNTYgLyogRGVzdHJveWVkICovO1xuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fYXBwUmVmKSB7XG4gICAgICAgICAgICB0aGlzLl9hcHBSZWYuZGV0YWNoVmlldyh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9hdHRhY2hlZFRvVmlld0NvbnRhaW5lcikge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5fbFZpZXdbUEFSRU5UXTtcbiAgICAgICAgICAgIGlmIChpc0xDb250YWluZXIocGFyZW50KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXdSZWZzID0gcGFyZW50W1ZJRVdfUkVGU107XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB2aWV3UmVmcyA/IHZpZXdSZWZzLmluZGV4T2YodGhpcykgOiAtMTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydEVxdWFsKGluZGV4LCBwYXJlbnQuaW5kZXhPZih0aGlzLl9sVmlldykgLSBDT05UQUlORVJfSEVBREVSX09GRlNFVCwgJ0FuIGF0dGFjaGVkIHZpZXcgc2hvdWxkIGJlIGluIHRoZSBzYW1lIHBvc2l0aW9uIHdpdGhpbiBpdHMgY29udGFpbmVyIGFzIGl0cyBWaWV3UmVmIGluIHRoZSBWSUVXX1JFRlMgYXJyYXkuJyk7XG4gICAgICAgICAgICAgICAgICAgIGRldGFjaFZpZXcocGFyZW50LCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUZyb21BcnJheSh2aWV3UmVmcywgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2F0dGFjaGVkVG9WaWV3Q29udGFpbmVyID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVzdHJveUxWaWV3KHRoaXMuX2xWaWV3W1RWSUVXXSwgdGhpcy5fbFZpZXcpO1xuICAgIH1cbiAgICBvbkRlc3Ryb3koY2FsbGJhY2spIHtcbiAgICAgICAgc3RvcmVDbGVhbnVwV2l0aENvbnRleHQodGhpcy5fbFZpZXdbVFZJRVddLCB0aGlzLl9sVmlldywgbnVsbCwgY2FsbGJhY2spO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYXJrcyBhIHZpZXcgYW5kIGFsbCBvZiBpdHMgYW5jZXN0b3JzIGRpcnR5LlxuICAgICAqXG4gICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBlbnN1cmUgYW4ge0BsaW5rIENoYW5nZURldGVjdGlvblN0cmF0ZWd5I09uUHVzaCBPblB1c2h9IGNvbXBvbmVudCBpc1xuICAgICAqIGNoZWNrZWQgd2hlbiBpdCBuZWVkcyB0byBiZSByZS1yZW5kZXJlZCBidXQgdGhlIHR3byBub3JtYWwgdHJpZ2dlcnMgaGF2ZW4ndCBtYXJrZWQgaXRcbiAgICAgKiBkaXJ0eSAoaS5lLiBpbnB1dHMgaGF2ZW4ndCBjaGFuZ2VkIGFuZCBldmVudHMgaGF2ZW4ndCBmaXJlZCBpbiB0aGUgdmlldykuXG4gICAgICpcbiAgICAgKiA8IS0tIFRPRE86IEFkZCBhIGxpbmsgdG8gYSBjaGFwdGVyIG9uIE9uUHVzaCBjb21wb25lbnRzIC0tPlxuICAgICAqXG4gICAgICogQHVzYWdlTm90ZXNcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIEBDb21wb25lbnQoe1xuICAgICAqICAgc2VsZWN0b3I6ICdhcHAtcm9vdCcsXG4gICAgICogICB0ZW1wbGF0ZTogYE51bWJlciBvZiB0aWNrczoge3tudW1iZXJPZlRpY2tzfX1gXG4gICAgICogICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICAgKiB9KVxuICAgICAqIGNsYXNzIEFwcENvbXBvbmVudCB7XG4gICAgICogICBudW1iZXJPZlRpY2tzID0gMDtcbiAgICAgKlxuICAgICAqICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgICogICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgKiAgICAgICB0aGlzLm51bWJlck9mVGlja3MrKztcbiAgICAgKiAgICAgICAvLyB0aGUgZm9sbG93aW5nIGlzIHJlcXVpcmVkLCBvdGhlcndpc2UgdGhlIHZpZXcgd2lsbCBub3QgYmUgdXBkYXRlZFxuICAgICAqICAgICAgIHRoaXMucmVmLm1hcmtGb3JDaGVjaygpO1xuICAgICAqICAgICB9LCAxMDAwKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgbWFya0ZvckNoZWNrKCkge1xuICAgICAgICBtYXJrVmlld0RpcnR5KHRoaXMuX2NkUmVmSW5qZWN0aW5nVmlldyB8fCB0aGlzLl9sVmlldyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGFjaGVzIHRoZSB2aWV3IGZyb20gdGhlIGNoYW5nZSBkZXRlY3Rpb24gdHJlZS5cbiAgICAgKlxuICAgICAqIERldGFjaGVkIHZpZXdzIHdpbGwgbm90IGJlIGNoZWNrZWQgZHVyaW5nIGNoYW5nZSBkZXRlY3Rpb24gcnVucyB1bnRpbCB0aGV5IGFyZVxuICAgICAqIHJlLWF0dGFjaGVkLCBldmVuIGlmIHRoZXkgYXJlIGRpcnR5LiBgZGV0YWNoYCBjYW4gYmUgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoXG4gICAgICoge0BsaW5rIENoYW5nZURldGVjdG9yUmVmI2RldGVjdENoYW5nZXMgZGV0ZWN0Q2hhbmdlc30gdG8gaW1wbGVtZW50IGxvY2FsIGNoYW5nZVxuICAgICAqIGRldGVjdGlvbiBjaGVja3MuXG4gICAgICpcbiAgICAgKiA8IS0tIFRPRE86IEFkZCBhIGxpbmsgdG8gYSBjaGFwdGVyIG9uIGRldGFjaC9yZWF0dGFjaC9sb2NhbCBkaWdlc3QgLS0+XG4gICAgICogPCEtLSBUT0RPOiBBZGQgYSBsaXZlIGRlbW8gb25jZSByZWYuZGV0ZWN0Q2hhbmdlcyBpcyBtZXJnZWQgaW50byBtYXN0ZXIgLS0+XG4gICAgICpcbiAgICAgKiBAdXNhZ2VOb3Rlc1xuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgZGVmaW5lcyBhIGNvbXBvbmVudCB3aXRoIGEgbGFyZ2UgbGlzdCBvZiByZWFkb25seSBkYXRhLlxuICAgICAqIEltYWdpbmUgdGhlIGRhdGEgY2hhbmdlcyBjb25zdGFudGx5LCBtYW55IHRpbWVzIHBlciBzZWNvbmQuIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLFxuICAgICAqIHdlIHdhbnQgdG8gY2hlY2sgYW5kIHVwZGF0ZSB0aGUgbGlzdCBldmVyeSBmaXZlIHNlY29uZHMuIFdlIGNhbiBkbyB0aGF0IGJ5IGRldGFjaGluZ1xuICAgICAqIHRoZSBjb21wb25lbnQncyBjaGFuZ2UgZGV0ZWN0b3IgYW5kIGRvaW5nIGEgbG9jYWwgY2hlY2sgZXZlcnkgZml2ZSBzZWNvbmRzLlxuICAgICAqXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGNsYXNzIERhdGFQcm92aWRlciB7XG4gICAgICogICAvLyBpbiBhIHJlYWwgYXBwbGljYXRpb24gdGhlIHJldHVybmVkIGRhdGEgd2lsbCBiZSBkaWZmZXJlbnQgZXZlcnkgdGltZVxuICAgICAqICAgZ2V0IGRhdGEoKSB7XG4gICAgICogICAgIHJldHVybiBbMSwyLDMsNCw1XTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBAQ29tcG9uZW50KHtcbiAgICAgKiAgIHNlbGVjdG9yOiAnZ2lhbnQtbGlzdCcsXG4gICAgICogICB0ZW1wbGF0ZTogYFxuICAgICAqICAgICA8bGkgKm5nRm9yPVwibGV0IGQgb2YgZGF0YVByb3ZpZGVyLmRhdGFcIj5EYXRhIHt7ZH19PC9saT5cbiAgICAgKiAgIGAsXG4gICAgICogfSlcbiAgICAgKiBjbGFzcyBHaWFudExpc3Qge1xuICAgICAqICAgY29uc3RydWN0b3IocHJpdmF0ZSByZWY6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGRhdGFQcm92aWRlcjogRGF0YVByb3ZpZGVyKSB7XG4gICAgICogICAgIHJlZi5kZXRhY2goKTtcbiAgICAgKiAgICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAqICAgICAgIHRoaXMucmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICAgKiAgICAgfSwgNTAwMCk7XG4gICAgICogICB9XG4gICAgICogfVxuICAgICAqXG4gICAgICogQENvbXBvbmVudCh7XG4gICAgICogICBzZWxlY3RvcjogJ2FwcCcsXG4gICAgICogICBwcm92aWRlcnM6IFtEYXRhUHJvdmlkZXJdLFxuICAgICAqICAgdGVtcGxhdGU6IGBcbiAgICAgKiAgICAgPGdpYW50LWxpc3Q+PGdpYW50LWxpc3Q+XG4gICAgICogICBgLFxuICAgICAqIH0pXG4gICAgICogY2xhc3MgQXBwIHtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZGV0YWNoKCkge1xuICAgICAgICB0aGlzLl9sVmlld1tGTEFHU10gJj0gfjEyOCAvKiBBdHRhY2hlZCAqLztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmUtYXR0YWNoZXMgYSB2aWV3IHRvIHRoZSBjaGFuZ2UgZGV0ZWN0aW9uIHRyZWUuXG4gICAgICpcbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIHRvIHJlLWF0dGFjaCB2aWV3cyB0aGF0IHdlcmUgcHJldmlvdXNseSBkZXRhY2hlZCBmcm9tIHRoZSB0cmVlXG4gICAgICogdXNpbmcge0BsaW5rIENoYW5nZURldGVjdG9yUmVmI2RldGFjaCBkZXRhY2h9LiBWaWV3cyBhcmUgYXR0YWNoZWQgdG8gdGhlIHRyZWUgYnkgZGVmYXVsdC5cbiAgICAgKlxuICAgICAqIDwhLS0gVE9ETzogQWRkIGEgbGluayB0byBhIGNoYXB0ZXIgb24gZGV0YWNoL3JlYXR0YWNoL2xvY2FsIGRpZ2VzdCAtLT5cbiAgICAgKlxuICAgICAqIEB1c2FnZU5vdGVzXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBjcmVhdGVzIGEgY29tcG9uZW50IGRpc3BsYXlpbmcgYGxpdmVgIGRhdGEuIFRoZSBjb21wb25lbnQgd2lsbCBkZXRhY2hcbiAgICAgKiBpdHMgY2hhbmdlIGRldGVjdG9yIGZyb20gdGhlIG1haW4gY2hhbmdlIGRldGVjdG9yIHRyZWUgd2hlbiB0aGUgY29tcG9uZW50J3MgbGl2ZSBwcm9wZXJ0eVxuICAgICAqIGlzIHNldCB0byBmYWxzZS5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBjbGFzcyBEYXRhUHJvdmlkZXIge1xuICAgICAqICAgZGF0YSA9IDE7XG4gICAgICpcbiAgICAgKiAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAqICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICogICAgICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhICogMjtcbiAgICAgKiAgICAgfSwgNTAwKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBAQ29tcG9uZW50KHtcbiAgICAgKiAgIHNlbGVjdG9yOiAnbGl2ZS1kYXRhJyxcbiAgICAgKiAgIGlucHV0czogWydsaXZlJ10sXG4gICAgICogICB0ZW1wbGF0ZTogJ0RhdGE6IHt7ZGF0YVByb3ZpZGVyLmRhdGF9fSdcbiAgICAgKiB9KVxuICAgICAqIGNsYXNzIExpdmVEYXRhIHtcbiAgICAgKiAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBkYXRhUHJvdmlkZXI6IERhdGFQcm92aWRlcikge31cbiAgICAgKlxuICAgICAqICAgc2V0IGxpdmUodmFsdWUpIHtcbiAgICAgKiAgICAgaWYgKHZhbHVlKSB7XG4gICAgICogICAgICAgdGhpcy5yZWYucmVhdHRhY2goKTtcbiAgICAgKiAgICAgfSBlbHNlIHtcbiAgICAgKiAgICAgICB0aGlzLnJlZi5kZXRhY2goKTtcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEBDb21wb25lbnQoe1xuICAgICAqICAgc2VsZWN0b3I6ICdhcHAtcm9vdCcsXG4gICAgICogICBwcm92aWRlcnM6IFtEYXRhUHJvdmlkZXJdLFxuICAgICAqICAgdGVtcGxhdGU6IGBcbiAgICAgKiAgICAgTGl2ZSBVcGRhdGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBbKG5nTW9kZWwpXT1cImxpdmVcIj5cbiAgICAgKiAgICAgPGxpdmUtZGF0YSBbbGl2ZV09XCJsaXZlXCI+PGxpdmUtZGF0YT5cbiAgICAgKiAgIGAsXG4gICAgICogfSlcbiAgICAgKiBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgICAqICAgbGl2ZSA9IHRydWU7XG4gICAgICogfVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHJlYXR0YWNoKCkge1xuICAgICAgICB0aGlzLl9sVmlld1tGTEFHU10gfD0gMTI4IC8qIEF0dGFjaGVkICovO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgdGhlIHZpZXcgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgKlxuICAgICAqIFRoaXMgY2FuIGFsc28gYmUgdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIHtAbGluayBDaGFuZ2VEZXRlY3RvclJlZiNkZXRhY2ggZGV0YWNofSB0byBpbXBsZW1lbnRcbiAgICAgKiBsb2NhbCBjaGFuZ2UgZGV0ZWN0aW9uIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIDwhLS0gVE9ETzogQWRkIGEgbGluayB0byBhIGNoYXB0ZXIgb24gZGV0YWNoL3JlYXR0YWNoL2xvY2FsIGRpZ2VzdCAtLT5cbiAgICAgKiA8IS0tIFRPRE86IEFkZCBhIGxpdmUgZGVtbyBvbmNlIHJlZi5kZXRlY3RDaGFuZ2VzIGlzIG1lcmdlZCBpbnRvIG1hc3RlciAtLT5cbiAgICAgKlxuICAgICAqIEB1c2FnZU5vdGVzXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZWZpbmVzIGEgY29tcG9uZW50IHdpdGggYSBsYXJnZSBsaXN0IG9mIHJlYWRvbmx5IGRhdGEuXG4gICAgICogSW1hZ2luZSwgdGhlIGRhdGEgY2hhbmdlcyBjb25zdGFudGx5LCBtYW55IHRpbWVzIHBlciBzZWNvbmQuIEZvciBwZXJmb3JtYW5jZSByZWFzb25zLFxuICAgICAqIHdlIHdhbnQgdG8gY2hlY2sgYW5kIHVwZGF0ZSB0aGUgbGlzdCBldmVyeSBmaXZlIHNlY29uZHMuXG4gICAgICpcbiAgICAgKiBXZSBjYW4gZG8gdGhhdCBieSBkZXRhY2hpbmcgdGhlIGNvbXBvbmVudCdzIGNoYW5nZSBkZXRlY3RvciBhbmQgZG9pbmcgYSBsb2NhbCBjaGFuZ2UgZGV0ZWN0aW9uXG4gICAgICogY2hlY2sgZXZlcnkgZml2ZSBzZWNvbmRzLlxuICAgICAqXG4gICAgICogU2VlIHtAbGluayBDaGFuZ2VEZXRlY3RvclJlZiNkZXRhY2ggZGV0YWNofSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBkZXRlY3RDaGFuZ2VzKCkge1xuICAgICAgICBkZXRlY3RDaGFuZ2VzSW50ZXJuYWwodGhpcy5fbFZpZXdbVFZJRVddLCB0aGlzLl9sVmlldywgdGhpcy5jb250ZXh0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBjaGFuZ2UgZGV0ZWN0b3IgYW5kIGl0cyBjaGlsZHJlbiwgYW5kIHRocm93cyBpZiBhbnkgY2hhbmdlcyBhcmUgZGV0ZWN0ZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHVzZWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSB0byB2ZXJpZnkgdGhhdCBydW5uaW5nIGNoYW5nZSBkZXRlY3Rpb24gZG9lc24ndFxuICAgICAqIGludHJvZHVjZSBvdGhlciBjaGFuZ2VzLlxuICAgICAqL1xuICAgIGNoZWNrTm9DaGFuZ2VzKCkge1xuICAgICAgICBjaGVja05vQ2hhbmdlc0ludGVybmFsKHRoaXMuX2xWaWV3W1RWSUVXXSwgdGhpcy5fbFZpZXcsIHRoaXMuY29udGV4dCk7XG4gICAgfVxuICAgIGF0dGFjaFRvVmlld0NvbnRhaW5lclJlZigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FwcFJlZikge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gbmdEZXZNb2RlID8gJ1RoaXMgdmlldyBpcyBhbHJlYWR5IGF0dGFjaGVkIGRpcmVjdGx5IHRvIHRoZSBBcHBsaWNhdGlvblJlZiEnIDogJyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKDkwMiAvKiBWSUVXX0FMUkVBRFlfQVRUQUNIRUQgKi8sIGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYXR0YWNoZWRUb1ZpZXdDb250YWluZXIgPSB0cnVlO1xuICAgIH1cbiAgICBkZXRhY2hGcm9tQXBwUmVmKCkge1xuICAgICAgICB0aGlzLl9hcHBSZWYgPSBudWxsO1xuICAgICAgICByZW5kZXJEZXRhY2hWaWV3KHRoaXMuX2xWaWV3W1RWSUVXXSwgdGhpcy5fbFZpZXcpO1xuICAgIH1cbiAgICBhdHRhY2hUb0FwcFJlZihhcHBSZWYpIHtcbiAgICAgICAgaWYgKHRoaXMuX2F0dGFjaGVkVG9WaWV3Q29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBuZ0Rldk1vZGUgPyAnVGhpcyB2aWV3IGlzIGFscmVhZHkgYXR0YWNoZWQgdG8gYSBWaWV3Q29udGFpbmVyIScgOiAnJztcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoOTAyIC8qIFZJRVdfQUxSRUFEWV9BVFRBQ0hFRCAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9hcHBSZWYgPSBhcHBSZWY7XG4gICAgfVxufVxuLyoqIEBpbnRlcm5hbCAqL1xuY2xhc3MgUm9vdFZpZXdSZWYgZXh0ZW5kcyBWaWV3UmVmJDEge1xuICAgIGNvbnN0cnVjdG9yKF92aWV3KSB7XG4gICAgICAgIHN1cGVyKF92aWV3KTtcbiAgICAgICAgdGhpcy5fdmlldyA9IF92aWV3O1xuICAgIH1cbiAgICBkZXRlY3RDaGFuZ2VzKCkge1xuICAgICAgICBkZXRlY3RDaGFuZ2VzSW5Sb290Vmlldyh0aGlzLl92aWV3KTtcbiAgICB9XG4gICAgY2hlY2tOb0NoYW5nZXMoKSB7XG4gICAgICAgIGNoZWNrTm9DaGFuZ2VzSW5Sb290Vmlldyh0aGlzLl92aWV3KTtcbiAgICB9XG4gICAgZ2V0IGNvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jbGFzcyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgZXh0ZW5kcyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIkMSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG5nTW9kdWxlIFRoZSBOZ01vZHVsZVJlZiB0byB3aGljaCBhbGwgcmVzb2x2ZWQgZmFjdG9yaWVzIGFyZSBib3VuZC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuZ01vZHVsZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5nTW9kdWxlID0gbmdNb2R1bGU7XG4gICAgfVxuICAgIHJlc29sdmVDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudCkge1xuICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0Q29tcG9uZW50VHlwZShjb21wb25lbnQpO1xuICAgICAgICBjb25zdCBjb21wb25lbnREZWYgPSBnZXRDb21wb25lbnREZWYoY29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudERlZiwgdGhpcy5uZ01vZHVsZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gdG9SZWZBcnJheShtYXApIHtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGZvciAobGV0IG5vbk1pbmlmaWVkIGluIG1hcCkge1xuICAgICAgICBpZiAobWFwLmhhc093blByb3BlcnR5KG5vbk1pbmlmaWVkKSkge1xuICAgICAgICAgICAgY29uc3QgbWluaWZpZWQgPSBtYXBbbm9uTWluaWZpZWRdO1xuICAgICAgICAgICAgYXJyYXkucHVzaCh7IHByb3BOYW1lOiBtaW5pZmllZCwgdGVtcGxhdGVOYW1lOiBub25NaW5pZmllZCB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBnZXROYW1lc3BhY2UoZWxlbWVudE5hbWUpIHtcbiAgICBjb25zdCBuYW1lID0gZWxlbWVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbmFtZSA9PT0gJ3N2ZycgPyBTVkdfTkFNRVNQQUNFIDogKG5hbWUgPT09ICdtYXRoJyA/IE1BVEhfTUxfTkFNRVNQQUNFIDogbnVsbCk7XG59XG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkSW5qZWN0b3Iocm9vdFZpZXdJbmplY3RvciwgbW9kdWxlSW5qZWN0b3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQ6ICh0b2tlbiwgbm90Rm91bmRWYWx1ZSwgZmxhZ3MpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcm9vdFZpZXdJbmplY3Rvci5nZXQodG9rZW4sIE5PVF9GT1VORF9DSEVDS19PTkxZX0VMRU1FTlRfSU5KRUNUT1IsIGZsYWdzKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gTk9UX0ZPVU5EX0NIRUNLX09OTFlfRUxFTUVOVF9JTkpFQ1RPUiB8fFxuICAgICAgICAgICAgICAgIG5vdEZvdW5kVmFsdWUgPT09IE5PVF9GT1VORF9DSEVDS19PTkxZX0VMRU1FTlRfSU5KRUNUT1IpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gdGhlIHZhbHVlIGZyb20gdGhlIHJvb3QgZWxlbWVudCBpbmplY3RvciB3aGVuXG4gICAgICAgICAgICAgICAgLy8gLSBpdCBwcm92aWRlcyBpdFxuICAgICAgICAgICAgICAgIC8vICAgKHZhbHVlICE9PSBOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SKVxuICAgICAgICAgICAgICAgIC8vIC0gdGhlIG1vZHVsZSBpbmplY3RvciBzaG91bGQgbm90IGJlIGNoZWNrZWRcbiAgICAgICAgICAgICAgICAvLyAgIChub3RGb3VuZFZhbHVlID09PSBOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SKVxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVJbmplY3Rvci5nZXQodG9rZW4sIG5vdEZvdW5kVmFsdWUsIGZsYWdzKTtcbiAgICAgICAgfVxuICAgIH07XG59XG4vKipcbiAqIFJlbmRlcjMgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIHZpZXdFbmdpbmVfQ29tcG9uZW50RmFjdG9yeX0uXG4gKi9cbmNsYXNzIENvbXBvbmVudEZhY3RvcnkgZXh0ZW5kcyBDb21wb25lbnRGYWN0b3J5JDEge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjb21wb25lbnREZWYgVGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLlxuICAgICAqIEBwYXJhbSBuZ01vZHVsZSBUaGUgTmdNb2R1bGVSZWYgdG8gd2hpY2ggdGhlIGZhY3RvcnkgaXMgYm91bmQuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29tcG9uZW50RGVmLCBuZ01vZHVsZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudERlZiA9IGNvbXBvbmVudERlZjtcbiAgICAgICAgdGhpcy5uZ01vZHVsZSA9IG5nTW9kdWxlO1xuICAgICAgICB0aGlzLmNvbXBvbmVudFR5cGUgPSBjb21wb25lbnREZWYudHlwZTtcbiAgICAgICAgdGhpcy5zZWxlY3RvciA9IHN0cmluZ2lmeUNTU1NlbGVjdG9yTGlzdChjb21wb25lbnREZWYuc2VsZWN0b3JzKTtcbiAgICAgICAgdGhpcy5uZ0NvbnRlbnRTZWxlY3RvcnMgPVxuICAgICAgICAgICAgY29tcG9uZW50RGVmLm5nQ29udGVudFNlbGVjdG9ycyA/IGNvbXBvbmVudERlZi5uZ0NvbnRlbnRTZWxlY3RvcnMgOiBbXTtcbiAgICAgICAgdGhpcy5pc0JvdW5kVG9Nb2R1bGUgPSAhIW5nTW9kdWxlO1xuICAgIH1cbiAgICBnZXQgaW5wdXRzKCkge1xuICAgICAgICByZXR1cm4gdG9SZWZBcnJheSh0aGlzLmNvbXBvbmVudERlZi5pbnB1dHMpO1xuICAgIH1cbiAgICBnZXQgb3V0cHV0cygpIHtcbiAgICAgICAgcmV0dXJuIHRvUmVmQXJyYXkodGhpcy5jb21wb25lbnREZWYub3V0cHV0cyk7XG4gICAgfVxuICAgIGNyZWF0ZShpbmplY3RvciwgcHJvamVjdGFibGVOb2Rlcywgcm9vdFNlbGVjdG9yT3JOb2RlLCBuZ01vZHVsZSkge1xuICAgICAgICBuZ01vZHVsZSA9IG5nTW9kdWxlIHx8IHRoaXMubmdNb2R1bGU7XG4gICAgICAgIGNvbnN0IHJvb3RWaWV3SW5qZWN0b3IgPSBuZ01vZHVsZSA/IGNyZWF0ZUNoYWluZWRJbmplY3RvcihpbmplY3RvciwgbmdNb2R1bGUuaW5qZWN0b3IpIDogaW5qZWN0b3I7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyRmFjdG9yeSA9IHJvb3RWaWV3SW5qZWN0b3IuZ2V0KFJlbmRlcmVyRmFjdG9yeTIsIGRvbVJlbmRlcmVyRmFjdG9yeTMpO1xuICAgICAgICBjb25zdCBzYW5pdGl6ZXIgPSByb290Vmlld0luamVjdG9yLmdldChTYW5pdGl6ZXIsIG51bGwpO1xuICAgICAgICBjb25zdCBob3N0UmVuZGVyZXIgPSByZW5kZXJlckZhY3RvcnkuY3JlYXRlUmVuZGVyZXIobnVsbCwgdGhpcy5jb21wb25lbnREZWYpO1xuICAgICAgICAvLyBEZXRlcm1pbmUgYSB0YWcgbmFtZSB1c2VkIGZvciBjcmVhdGluZyBob3N0IGVsZW1lbnRzIHdoZW4gdGhpcyBjb21wb25lbnQgaXMgY3JlYXRlZFxuICAgICAgICAvLyBkeW5hbWljYWxseS4gRGVmYXVsdCB0byAnZGl2JyBpZiB0aGlzIGNvbXBvbmVudCBkaWQgbm90IHNwZWNpZnkgYW55IHRhZyBuYW1lIGluIGl0cyBzZWxlY3Rvci5cbiAgICAgICAgY29uc3QgZWxlbWVudE5hbWUgPSB0aGlzLmNvbXBvbmVudERlZi5zZWxlY3RvcnNbMF1bMF0gfHwgJ2Rpdic7XG4gICAgICAgIGNvbnN0IGhvc3RSTm9kZSA9IHJvb3RTZWxlY3Rvck9yTm9kZSA/XG4gICAgICAgICAgICBsb2NhdGVIb3N0RWxlbWVudChob3N0UmVuZGVyZXIsIHJvb3RTZWxlY3Rvck9yTm9kZSwgdGhpcy5jb21wb25lbnREZWYuZW5jYXBzdWxhdGlvbikgOlxuICAgICAgICAgICAgY3JlYXRlRWxlbWVudE5vZGUocmVuZGVyZXJGYWN0b3J5LmNyZWF0ZVJlbmRlcmVyKG51bGwsIHRoaXMuY29tcG9uZW50RGVmKSwgZWxlbWVudE5hbWUsIGdldE5hbWVzcGFjZShlbGVtZW50TmFtZSkpO1xuICAgICAgICBjb25zdCByb290RmxhZ3MgPSB0aGlzLmNvbXBvbmVudERlZi5vblB1c2ggPyA2NCAvKiBEaXJ0eSAqLyB8IDUxMiAvKiBJc1Jvb3QgKi8gOlxuICAgICAgICAgICAgMTYgLyogQ2hlY2tBbHdheXMgKi8gfCA1MTIgLyogSXNSb290ICovO1xuICAgICAgICBjb25zdCByb290Q29udGV4dCA9IGNyZWF0ZVJvb3RDb250ZXh0KCk7XG4gICAgICAgIC8vIENyZWF0ZSB0aGUgcm9vdCB2aWV3LiBVc2VzIGVtcHR5IFRWaWV3IGFuZCBDb250ZW50VGVtcGxhdGUuXG4gICAgICAgIGNvbnN0IHJvb3RUVmlldyA9IGNyZWF0ZVRWaWV3KDAgLyogUm9vdCAqLywgbnVsbCwgbnVsbCwgMSwgMCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgIGNvbnN0IHJvb3RMVmlldyA9IGNyZWF0ZUxWaWV3KG51bGwsIHJvb3RUVmlldywgcm9vdENvbnRleHQsIHJvb3RGbGFncywgbnVsbCwgbnVsbCwgcmVuZGVyZXJGYWN0b3J5LCBob3N0UmVuZGVyZXIsIHNhbml0aXplciwgcm9vdFZpZXdJbmplY3Rvcik7XG4gICAgICAgIC8vIHJvb3RWaWV3IGlzIHRoZSBwYXJlbnQgd2hlbiBib290c3RyYXBwaW5nXG4gICAgICAgIC8vIFRPRE8obWlza28pOiBpdCBsb29rcyBsaWtlIHdlIGFyZSBlbnRlcmluZyB2aWV3IGhlcmUgYnV0IHdlIGRvbid0IHJlYWxseSBuZWVkIHRvIGFzXG4gICAgICAgIC8vIGByZW5kZXJWaWV3YCBkb2VzIHRoYXQuIEhvd2V2ZXIgYXMgdGhlIGNvZGUgaXMgd3JpdHRlbiBpdCBpcyBuZWVkZWQgYmVjYXVzZVxuICAgICAgICAvLyBgY3JlYXRlUm9vdENvbXBvbmVudFZpZXdgIGFuZCBgY3JlYXRlUm9vdENvbXBvbmVudGAgYm90aCByZWFkIGdsb2JhbCBzdGF0ZS4gRml4aW5nIHRob3NlXG4gICAgICAgIC8vIGlzc3VlcyB3b3VsZCBhbGxvdyB1cyB0byBkcm9wIHRoaXMuXG4gICAgICAgIGVudGVyVmlldyhyb290TFZpZXcpO1xuICAgICAgICBsZXQgY29tcG9uZW50O1xuICAgICAgICBsZXQgdEVsZW1lbnROb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50VmlldyA9IGNyZWF0ZVJvb3RDb21wb25lbnRWaWV3KGhvc3RSTm9kZSwgdGhpcy5jb21wb25lbnREZWYsIHJvb3RMVmlldywgcmVuZGVyZXJGYWN0b3J5LCBob3N0UmVuZGVyZXIpO1xuICAgICAgICAgICAgaWYgKGhvc3RSTm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChyb290U2VsZWN0b3JPck5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VXBBdHRyaWJ1dGVzKGhvc3RSZW5kZXJlciwgaG9zdFJOb2RlLCBbJ25nLXZlcnNpb24nLCBWRVJTSU9OLmZ1bGxdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGhvc3QgZWxlbWVudCBpcyBjcmVhdGVkIGFzIGEgcGFydCBvZiB0aGlzIGZ1bmN0aW9uIGNhbGwgKGkuZS4gYHJvb3RTZWxlY3Rvck9yTm9kZWBcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgbm90IGRlZmluZWQpLCBhbHNvIGFwcGx5IGF0dHJpYnV0ZXMgYW5kIGNsYXNzZXMgZXh0cmFjdGVkIGZyb20gY29tcG9uZW50IHNlbGVjdG9yLlxuICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGF0dHJpYnV0ZXMgYW5kIGNsYXNzZXMgZnJvbSB0aGUgZmlyc3Qgc2VsZWN0b3Igb25seSB0byBtYXRjaCBWRSBiZWhhdmlvci5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBhdHRycywgY2xhc3NlcyB9ID0gZXh0cmFjdEF0dHJzQW5kQ2xhc3Nlc0Zyb21TZWxlY3Rvcih0aGlzLmNvbXBvbmVudERlZi5zZWxlY3RvcnNbMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFVwQXR0cmlidXRlcyhob3N0UmVuZGVyZXIsIGhvc3RSTm9kZSwgYXR0cnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGFzc2VzICYmIGNsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVEaXJlY3RDbGFzcyhob3N0UmVuZGVyZXIsIGhvc3RSTm9kZSwgY2xhc3Nlcy5qb2luKCcgJykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdEVsZW1lbnROb2RlID0gZ2V0VE5vZGUocm9vdFRWaWV3LCBIRUFERVJfT0ZGU0VUKTtcbiAgICAgICAgICAgIGlmIChwcm9qZWN0YWJsZU5vZGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9qZWN0aW9uID0gdEVsZW1lbnROb2RlLnByb2plY3Rpb24gPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubmdDb250ZW50U2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVzZm9yU2xvdCA9IHByb2plY3RhYmxlTm9kZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIC8vIFByb2plY3RhYmxlIG5vZGVzIGNhbiBiZSBwYXNzZWQgYXMgYXJyYXkgb2YgYXJyYXlzIG9yIGFuIGFycmF5IG9mIGl0ZXJhYmxlcyAobmdVcGdyYWRlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhc2UpLiBIZXJlIHdlIGRvIG5vcm1hbGl6ZSBwYXNzZWQgZGF0YSBzdHJ1Y3R1cmUgdG8gYmUgYW4gYXJyYXkgb2YgYXJyYXlzIHRvIGF2b2lkXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbXBsZXggY2hlY2tzIGRvd24gdGhlIGxpbmUuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGFsc28gbm9ybWFsaXplIHRoZSBsZW5ndGggb2YgdGhlIHBhc3NlZCBpbiBwcm9qZWN0YWJsZSBub2RlcyAodG8gbWF0Y2ggdGhlIG51bWJlciBvZlxuICAgICAgICAgICAgICAgICAgICAvLyA8bmctY29udGFpbmVyPiBzbG90cyBkZWZpbmVkIGJ5IGEgY29tcG9uZW50KS5cbiAgICAgICAgICAgICAgICAgICAgcHJvamVjdGlvbi5wdXNoKG5vZGVzZm9yU2xvdCAhPSBudWxsID8gQXJyYXkuZnJvbShub2Rlc2ZvclNsb3QpIDogbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVE9ETzogc2hvdWxkIExpZmVjeWNsZUhvb2tzRmVhdHVyZSBhbmQgb3RoZXIgaG9zdCBmZWF0dXJlcyBiZSBnZW5lcmF0ZWQgYnkgdGhlIGNvbXBpbGVyIGFuZFxuICAgICAgICAgICAgLy8gZXhlY3V0ZWQgaGVyZT9cbiAgICAgICAgICAgIC8vIEFuZ3VsYXIgNSByZWZlcmVuY2U6IGh0dHBzOi8vc3RhY2tibGl0ei5jb20vZWRpdC9saWZlY3ljbGUtaG9va3MtdmNyZWZcbiAgICAgICAgICAgIGNvbXBvbmVudCA9IGNyZWF0ZVJvb3RDb21wb25lbnQoY29tcG9uZW50VmlldywgdGhpcy5jb21wb25lbnREZWYsIHJvb3RMVmlldywgcm9vdENvbnRleHQsIFtMaWZlY3ljbGVIb29rc0ZlYXR1cmVdKTtcbiAgICAgICAgICAgIHJlbmRlclZpZXcocm9vdFRWaWV3LCByb290TFZpZXcsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgbGVhdmVWaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb21wb25lbnRSZWYodGhpcy5jb21wb25lbnRUeXBlLCBjb21wb25lbnQsIGNyZWF0ZUVsZW1lbnRSZWYodEVsZW1lbnROb2RlLCByb290TFZpZXcpLCByb290TFZpZXcsIHRFbGVtZW50Tm9kZSk7XG4gICAgfVxufVxuY29uc3QgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gbmV3IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcigpO1xuLyoqXG4gKiBDcmVhdGVzIGEgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIGFuZCBzdG9yZXMgaXQgb24gdGhlIGluamVjdG9yLiBPciwgaWYgdGhlXG4gKiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAqIGFscmVhZHkgZXhpc3RzLCByZXRyaWV2ZXMgdGhlIGV4aXN0aW5nIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5cbiAqXG4gKiBAcmV0dXJucyBUaGUgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIGluc3RhbmNlIHRvIHVzZVxuICovXG5mdW5jdGlvbiBpbmplY3RDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIoKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcbn1cbi8qKlxuICogUmVwcmVzZW50cyBhbiBpbnN0YW5jZSBvZiBhIENvbXBvbmVudCBjcmVhdGVkIHZpYSBhIHtAbGluayBDb21wb25lbnRGYWN0b3J5fS5cbiAqXG4gKiBgQ29tcG9uZW50UmVmYCBwcm92aWRlcyBhY2Nlc3MgdG8gdGhlIENvbXBvbmVudCBJbnN0YW5jZSBhcyB3ZWxsIG90aGVyIG9iamVjdHMgcmVsYXRlZCB0byB0aGlzXG4gKiBDb21wb25lbnQgSW5zdGFuY2UgYW5kIGFsbG93cyB5b3UgdG8gZGVzdHJveSB0aGUgQ29tcG9uZW50IEluc3RhbmNlIHZpYSB0aGUge0BsaW5rICNkZXN0cm95fVxuICogbWV0aG9kLlxuICpcbiAqL1xuY2xhc3MgQ29tcG9uZW50UmVmIGV4dGVuZHMgQ29tcG9uZW50UmVmJDEge1xuICAgIGNvbnN0cnVjdG9yKGNvbXBvbmVudFR5cGUsIGluc3RhbmNlLCBsb2NhdGlvbiwgX3Jvb3RMVmlldywgX3ROb2RlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgdGhpcy5fcm9vdExWaWV3ID0gX3Jvb3RMVmlldztcbiAgICAgICAgdGhpcy5fdE5vZGUgPSBfdE5vZGU7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgICAgdGhpcy5ob3N0VmlldyA9IHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYgPSBuZXcgUm9vdFZpZXdSZWYoX3Jvb3RMVmlldyk7XG4gICAgICAgIHRoaXMuY29tcG9uZW50VHlwZSA9IGNvbXBvbmVudFR5cGU7XG4gICAgfVxuICAgIGdldCBpbmplY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlSW5qZWN0b3IodGhpcy5fdE5vZGUsIHRoaXMuX3Jvb3RMVmlldyk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuaG9zdFZpZXcuZGVzdHJveSgpO1xuICAgIH1cbiAgICBvbkRlc3Ryb3koY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5ob3N0Vmlldy5vbkRlc3Ryb3koY2FsbGJhY2spO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEFkZHMgZGVjb3JhdG9yLCBjb25zdHJ1Y3RvciwgYW5kIHByb3BlcnR5IG1ldGFkYXRhIHRvIGEgZ2l2ZW4gdHlwZSB2aWEgc3RhdGljIG1ldGFkYXRhIGZpZWxkc1xuICogb24gdGhlIHR5cGUuXG4gKlxuICogVGhlc2UgbWV0YWRhdGEgZmllbGRzIGNhbiBsYXRlciBiZSByZWFkIHdpdGggQW5ndWxhcidzIGBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzYCBBUEkuXG4gKlxuICogQ2FsbHMgdG8gYHNldENsYXNzTWV0YWRhdGFgIGNhbiBiZSBndWFyZGVkIGJ5IG5nRGV2TW9kZSwgcmVzdWx0aW5nIGluIHRoZSBtZXRhZGF0YSBhc3NpZ25tZW50c1xuICogYmVpbmcgdHJlZS1zaGFrZW4gYXdheSBkdXJpbmcgcHJvZHVjdGlvbiBidWlsZHMuXG4gKi9cbmZ1bmN0aW9uIHNldENsYXNzTWV0YWRhdGEodHlwZSwgZGVjb3JhdG9ycywgY3RvclBhcmFtZXRlcnMsIHByb3BEZWNvcmF0b3JzKSB7XG4gICAgcmV0dXJuIG5vU2lkZUVmZmVjdHMoKCkgPT4ge1xuICAgICAgICBjb25zdCBjbGF6eiA9IHR5cGU7XG4gICAgICAgIGlmIChkZWNvcmF0b3JzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY2xhenouaGFzT3duUHJvcGVydHkoJ2RlY29yYXRvcnMnKSAmJiBjbGF6ei5kZWNvcmF0b3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjbGF6ei5kZWNvcmF0b3JzLnB1c2goLi4uZGVjb3JhdG9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGF6ei5kZWNvcmF0b3JzID0gZGVjb3JhdG9ycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY3RvclBhcmFtZXRlcnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFJhdGhlciB0aGFuIG1lcmdpbmcsIGNsb2JiZXIgdGhlIGV4aXN0aW5nIHBhcmFtZXRlcnMuIElmIG90aGVyIHByb2plY3RzIGV4aXN0IHdoaWNoXG4gICAgICAgICAgICAvLyB1c2UgdHNpY2tsZS1zdHlsZSBhbm5vdGF0aW9ucyBhbmQgcmVmbGVjdCBvdmVyIHRoZW0gaW4gdGhlIHNhbWUgd2F5LCB0aGlzIGNvdWxkXG4gICAgICAgICAgICAvLyBjYXVzZSBpc3N1ZXMsIGJ1dCB0aGF0IGlzIHZhbmlzaGluZ2x5IHVubGlrZWx5LlxuICAgICAgICAgICAgY2xhenouY3RvclBhcmFtZXRlcnMgPSBjdG9yUGFyYW1ldGVycztcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcERlY29yYXRvcnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFRoZSBwcm9wZXJ0eSBkZWNvcmF0b3Igb2JqZWN0cyBhcmUgbWVyZ2VkIGFzIGl0IGlzIHBvc3NpYmxlIGRpZmZlcmVudCBmaWVsZHMgaGF2ZVxuICAgICAgICAgICAgLy8gZGlmZmVyZW50IGRlY29yYXRvciB0eXBlcy4gRGVjb3JhdG9ycyBvbiBpbmRpdmlkdWFsIGZpZWxkcyBhcmUgbm90IG1lcmdlZCwgYXMgaXQnc1xuICAgICAgICAgICAgLy8gYWxzbyBpbmNyZWRpYmx5IHVubGlrZWx5IHRoYXQgYSBmaWVsZCB3aWxsIGJlIGRlY29yYXRlZCBib3RoIHdpdGggYW4gQW5ndWxhclxuICAgICAgICAgICAgLy8gZGVjb3JhdG9yIGFuZCBhIG5vbi1Bbmd1bGFyIGRlY29yYXRvciB0aGF0J3MgYWxzbyBiZWVuIGRvd25sZXZlbGVkLlxuICAgICAgICAgICAgaWYgKGNsYXp6Lmhhc093blByb3BlcnR5KCdwcm9wRGVjb3JhdG9ycycpICYmIGNsYXp6LnByb3BEZWNvcmF0b3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjbGF6ei5wcm9wRGVjb3JhdG9ycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY2xhenoucHJvcERlY29yYXRvcnMpLCBwcm9wRGVjb3JhdG9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGF6ei5wcm9wRGVjb3JhdG9ycyA9IHByb3BEZWNvcmF0b3JzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGluc3RhbmNlIG9mIGFuIGBOZ01vZHVsZWAgY3JlYXRlZCBieSBhbiBgTmdNb2R1bGVGYWN0b3J5YC5cbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYE5nTW9kdWxlYCBpbnN0YW5jZSBhbmQgcmVsYXRlZCBvYmplY3RzLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgTmdNb2R1bGVSZWYkMSB7XG59XG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqXG4gKiBAZGVwcmVjYXRlZFxuICogVGhpcyBjbGFzcyB3YXMgbW9zdGx5IHVzZWQgYXMgYSBwYXJ0IG9mIFZpZXdFbmdpbmUtYmFzZWQgSklUIEFQSSBhbmQgaXMgbm8gbG9uZ2VyIG5lZWRlZCBpbiBJdnlcbiAqIEpJVCBtb2RlLiBTZWUgW0pJVCBBUEkgY2hhbmdlcyBkdWUgdG8gVmlld0VuZ2luZSBkZXByZWNhdGlvbl0oZ3VpZGUvZGVwcmVjYXRpb25zI2ppdC1hcGktY2hhbmdlcylcbiAqIGZvciBhZGRpdGlvbmFsIGNvbnRleHQuIEFuZ3VsYXIgcHJvdmlkZXMgQVBJcyB0aGF0IGFjY2VwdCBOZ01vZHVsZSBjbGFzc2VzIGRpcmVjdGx5IChzdWNoIGFzXG4gKiBbUGxhdGZvcm1SZWYuYm9vdHN0cmFwTW9kdWxlXShhcGkvY29yZS9QbGF0Zm9ybVJlZiNib290c3RyYXBNb2R1bGUpIGFuZFxuICogW2NyZWF0ZU5nTW9kdWxlUmVmXShhcGkvY29yZS9jcmVhdGVOZ01vZHVsZVJlZikpLCBjb25zaWRlciBzd2l0Y2hpbmcgdG8gdGhvc2UgQVBJcyBpbnN0ZWFkIG9mXG4gKiB1c2luZyBmYWN0b3J5LWJhc2VkIG9uZXMuXG4gKi9cbmNsYXNzIE5nTW9kdWxlRmFjdG9yeSQxIHtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIE1hcCBvZiBtb2R1bGUtaWQgdG8gdGhlIGNvcnJlc3BvbmRpbmcgTmdNb2R1bGUuXG4gKiAtIEluIHByZSBJdnkgd2UgdHJhY2sgTmdNb2R1bGVGYWN0b3J5LFxuICogLSBJbiBwb3N0IEl2eSB3ZSB0cmFjayB0aGUgTmdNb2R1bGVUeXBlXG4gKi9cbmNvbnN0IG1vZHVsZXMgPSBuZXcgTWFwKCk7XG4vKipcbiAqIFJlZ2lzdGVycyBhIGxvYWRlZCBtb2R1bGUuIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBmcm9tIGdlbmVyYXRlZCBOZ01vZHVsZUZhY3RvcnkgY29kZS5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuZnVuY3Rpb24gcmVnaXN0ZXJNb2R1bGVGYWN0b3J5KGlkLCBmYWN0b3J5KSB7XG4gICAgY29uc3QgZXhpc3RpbmcgPSBtb2R1bGVzLmdldChpZCk7XG4gICAgYXNzZXJ0U2FtZU9yTm90RXhpc3RpbmcoaWQsIGV4aXN0aW5nICYmIGV4aXN0aW5nLm1vZHVsZVR5cGUsIGZhY3RvcnkubW9kdWxlVHlwZSk7XG4gICAgbW9kdWxlcy5zZXQoaWQsIGZhY3RvcnkpO1xufVxuZnVuY3Rpb24gYXNzZXJ0U2FtZU9yTm90RXhpc3RpbmcoaWQsIHR5cGUsIGluY29taW5nKSB7XG4gICAgaWYgKHR5cGUgJiYgdHlwZSAhPT0gaW5jb21pbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEdXBsaWNhdGUgbW9kdWxlIHJlZ2lzdGVyZWQgZm9yICR7aWR9IC0gJHtzdHJpbmdpZnkodHlwZSl9IHZzICR7c3RyaW5naWZ5KHR5cGUubmFtZSl9YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJOZ01vZHVsZVR5cGUobmdNb2R1bGVUeXBlKSB7XG4gICAgY29uc3QgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgICByZWN1cnNlKG5nTW9kdWxlVHlwZSk7XG4gICAgZnVuY3Rpb24gcmVjdXJzZShuZ01vZHVsZVR5cGUpIHtcbiAgICAgICAgLy8gVGhlIGltcG9ydHMgYXJyYXkgb2YgYW4gTmdNb2R1bGUgbXVzdCByZWZlciB0byBvdGhlciBOZ01vZHVsZXMsXG4gICAgICAgIC8vIHNvIGFuIGVycm9yIGlzIHRocm93biBpZiBubyBtb2R1bGUgZGVmaW5pdGlvbiBpcyBhdmFpbGFibGUuXG4gICAgICAgIGNvbnN0IGRlZiA9IGdldE5nTW9kdWxlRGVmKG5nTW9kdWxlVHlwZSwgLyogdGhyb3dOb3RGb3VuZCAqLyB0cnVlKTtcbiAgICAgICAgY29uc3QgaWQgPSBkZWYuaWQ7XG4gICAgICAgIGlmIChpZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBtb2R1bGVzLmdldChpZCk7XG4gICAgICAgICAgICBhc3NlcnRTYW1lT3JOb3RFeGlzdGluZyhpZCwgZXhpc3RpbmcsIG5nTW9kdWxlVHlwZSk7XG4gICAgICAgICAgICBtb2R1bGVzLnNldChpZCwgbmdNb2R1bGVUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbXBvcnRzID0gbWF5YmVVbndyYXBGbihkZWYuaW1wb3J0cyk7XG4gICAgICAgIGZvciAoY29uc3QgaSBvZiBpbXBvcnRzKSB7XG4gICAgICAgICAgICBpZiAoIXZpc2l0ZWQuaGFzKGkpKSB7XG4gICAgICAgICAgICAgICAgdmlzaXRlZC5hZGQoaSk7XG4gICAgICAgICAgICAgICAgcmVjdXJzZShpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFyTW9kdWxlc0ZvclRlc3QoKSB7XG4gICAgbW9kdWxlcy5jbGVhcigpO1xufVxuZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZE5nTW9kdWxlVHlwZShpZCkge1xuICAgIHJldHVybiAobW9kdWxlcy5nZXQoaWQpIHx8IGF1dG9SZWdpc3Rlck1vZHVsZUJ5SWRbaWRdKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFJldHVybnMgYSBuZXcgTmdNb2R1bGVSZWYgaW5zdGFuY2UgYmFzZWQgb24gdGhlIE5nTW9kdWxlIGNsYXNzIGFuZCBwYXJlbnQgaW5qZWN0b3IgcHJvdmlkZWQuXG4gKiBAcGFyYW0gbmdNb2R1bGUgTmdNb2R1bGUgY2xhc3MuXG4gKiBAcGFyYW0gcGFyZW50SW5qZWN0b3IgT3B0aW9uYWwgaW5qZWN0b3IgaW5zdGFuY2UgdG8gdXNlIGFzIGEgcGFyZW50IGZvciB0aGUgbW9kdWxlIGluamVjdG9yLiBJZlxuICogICAgIG5vdCBwcm92aWRlZCwgYE51bGxJbmplY3RvcmAgd2lsbCBiZSB1c2VkIGluc3RlYWQuXG4gKiBAcHVibGljQXBpXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU5nTW9kdWxlUmVmKG5nTW9kdWxlLCBwYXJlbnRJbmplY3Rvcikge1xuICAgIHJldHVybiBuZXcgTmdNb2R1bGVSZWYobmdNb2R1bGUsIHBhcmVudEluamVjdG9yICE9PSBudWxsICYmIHBhcmVudEluamVjdG9yICE9PSB2b2lkIDAgPyBwYXJlbnRJbmplY3RvciA6IG51bGwpO1xufVxuY2xhc3MgTmdNb2R1bGVSZWYgZXh0ZW5kcyBOZ01vZHVsZVJlZiQxIHtcbiAgICBjb25zdHJ1Y3RvcihuZ01vZHVsZVR5cGUsIF9wYXJlbnQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fcGFyZW50ID0gX3BhcmVudDtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnJlcXVpcmUtaW50ZXJuYWwtd2l0aC11bmRlcnNjb3JlXG4gICAgICAgIHRoaXMuX2Jvb3RzdHJhcENvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgdGhpcy5pbmplY3RvciA9IHRoaXM7XG4gICAgICAgIHRoaXMuZGVzdHJveUNicyA9IFtdO1xuICAgICAgICAvLyBXaGVuIGJvb3RzdHJhcHBpbmcgYSBtb2R1bGUgd2UgaGF2ZSBhIGRlcGVuZGVuY3kgZ3JhcGggdGhhdCBsb29rcyBsaWtlIHRoaXM6XG4gICAgICAgIC8vIEFwcGxpY2F0aW9uUmVmIC0+IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciAtPiBOZ01vZHVsZVJlZi4gVGhlIHByb2JsZW0gaXMgdGhhdCBpZiB0aGVcbiAgICAgICAgLy8gbW9kdWxlIGJlaW5nIHJlc29sdmVkIHRyaWVzIHRvIGluamVjdCB0aGUgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBpdCdsbCBjcmVhdGUgYVxuICAgICAgICAvLyBjaXJjdWxhciBkZXBlbmRlbmN5IHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgcnVudGltZSBlcnJvciwgYmVjYXVzZSB0aGUgaW5qZWN0b3IgZG9lc24ndFxuICAgICAgICAvLyBleGlzdCB5ZXQuIFdlIHdvcmsgYXJvdW5kIHRoZSBpc3N1ZSBieSBjcmVhdGluZyB0aGUgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIG91cnNlbHZlc1xuICAgICAgICAvLyBhbmQgcHJvdmlkaW5nIGl0LCByYXRoZXIgdGhhbiBsZXR0aW5nIHRoZSBpbmplY3RvciByZXNvbHZlIGl0LlxuICAgICAgICB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciA9IG5ldyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIodGhpcyk7XG4gICAgICAgIGNvbnN0IG5nTW9kdWxlRGVmID0gZ2V0TmdNb2R1bGVEZWYobmdNb2R1bGVUeXBlKTtcbiAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICBhc3NlcnREZWZpbmVkKG5nTW9kdWxlRGVmLCBgTmdNb2R1bGUgJyR7c3RyaW5naWZ5KG5nTW9kdWxlVHlwZSl9JyBpcyBub3QgYSBzdWJ0eXBlIG9mICdOZ01vZHVsZVR5cGUnLmApO1xuICAgICAgICB0aGlzLl9ib290c3RyYXBDb21wb25lbnRzID0gbWF5YmVVbndyYXBGbihuZ01vZHVsZURlZi5ib290c3RyYXApO1xuICAgICAgICB0aGlzLl9yM0luamVjdG9yID0gY3JlYXRlSW5qZWN0b3JXaXRob3V0SW5qZWN0b3JJbnN0YW5jZXMobmdNb2R1bGVUeXBlLCBfcGFyZW50LCBbXG4gICAgICAgICAgICB7IHByb3ZpZGU6IE5nTW9kdWxlUmVmJDEsIHVzZVZhbHVlOiB0aGlzIH0sIHtcbiAgICAgICAgICAgICAgICBwcm92aWRlOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIkMSxcbiAgICAgICAgICAgICAgICB1c2VWYWx1ZTogdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSwgc3RyaW5naWZ5KG5nTW9kdWxlVHlwZSkpO1xuICAgICAgICAvLyBXZSBuZWVkIHRvIHJlc29sdmUgdGhlIGluamVjdG9yIHR5cGVzIHNlcGFyYXRlbHkgZnJvbSB0aGUgaW5qZWN0b3IgY3JlYXRpb24sIGJlY2F1c2VcbiAgICAgICAgLy8gdGhlIG1vZHVsZSBtaWdodCBiZSB0cnlpbmcgdG8gdXNlIHRoaXMgcmVmIGluIGl0cyBjb25zdHJ1Y3RvciBmb3IgREkgd2hpY2ggd2lsbCBjYXVzZSBhXG4gICAgICAgIC8vIGNpcmN1bGFyIGVycm9yIHRoYXQgd2lsbCBldmVudHVhbGx5IGVycm9yIG91dCwgYmVjYXVzZSB0aGUgaW5qZWN0b3IgaXNuJ3QgY3JlYXRlZCB5ZXQuXG4gICAgICAgIHRoaXMuX3IzSW5qZWN0b3IuX3Jlc29sdmVJbmplY3RvckRlZlR5cGVzKCk7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSB0aGlzLmdldChuZ01vZHVsZVR5cGUpO1xuICAgIH1cbiAgICBnZXQodG9rZW4sIG5vdEZvdW5kVmFsdWUgPSBJbmplY3Rvci5USFJPV19JRl9OT1RfRk9VTkQsIGluamVjdEZsYWdzID0gSW5qZWN0RmxhZ3MuRGVmYXVsdCkge1xuICAgICAgICBpZiAodG9rZW4gPT09IEluamVjdG9yIHx8IHRva2VuID09PSBOZ01vZHVsZVJlZiQxIHx8IHRva2VuID09PSBJTkpFQ1RPUikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3IzSW5qZWN0b3IuZ2V0KHRva2VuLCBub3RGb3VuZFZhbHVlLCBpbmplY3RGbGFncyk7XG4gICAgfVxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHRoaXMuZGVzdHJveUNicywgJ05nTW9kdWxlIGFscmVhZHkgZGVzdHJveWVkJyk7XG4gICAgICAgIGNvbnN0IGluamVjdG9yID0gdGhpcy5fcjNJbmplY3RvcjtcbiAgICAgICAgIWluamVjdG9yLmRlc3Ryb3llZCAmJiBpbmplY3Rvci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZGVzdHJveUNicy5mb3JFYWNoKGZuID0+IGZuKCkpO1xuICAgICAgICB0aGlzLmRlc3Ryb3lDYnMgPSBudWxsO1xuICAgIH1cbiAgICBvbkRlc3Ryb3koY2FsbGJhY2spIHtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQodGhpcy5kZXN0cm95Q2JzLCAnTmdNb2R1bGUgYWxyZWFkeSBkZXN0cm95ZWQnKTtcbiAgICAgICAgdGhpcy5kZXN0cm95Q2JzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbn1cbmNsYXNzIE5nTW9kdWxlRmFjdG9yeSBleHRlbmRzIE5nTW9kdWxlRmFjdG9yeSQxIHtcbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGVUeXBlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubW9kdWxlVHlwZSA9IG1vZHVsZVR5cGU7XG4gICAgICAgIGNvbnN0IG5nTW9kdWxlRGVmID0gZ2V0TmdNb2R1bGVEZWYobW9kdWxlVHlwZSk7XG4gICAgICAgIGlmIChuZ01vZHVsZURlZiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIE5nTW9kdWxlIHdpdGggQW5ndWxhcidzIG1vZHVsZSByZWdpc3RyeS4gVGhlIGxvY2F0aW9uIChhbmQgaGVuY2UgdGltaW5nKSBvZlxuICAgICAgICAgICAgLy8gdGhpcyBjYWxsIGlzIGNyaXRpY2FsIHRvIGVuc3VyZSB0aGlzIHdvcmtzIGNvcnJlY3RseSAobW9kdWxlcyBnZXQgcmVnaXN0ZXJlZCB3aGVuIGV4cGVjdGVkKVxuICAgICAgICAgICAgLy8gd2l0aG91dCBibG9hdGluZyBidW5kbGVzIChtb2R1bGVzIGFyZSByZWdpc3RlcmVkIHdoZW4gb3RoZXJ3aXNlIG5vdCByZWZlcmVuY2VkKS5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBJbiBWaWV3IEVuZ2luZSwgcmVnaXN0cmF0aW9uIG9jY3VycyBpbiB0aGUgLm5nZmFjdG9yeS5qcyBmaWxlIGFzIGEgc2lkZSBlZmZlY3QuIFRoaXMgaGFzXG4gICAgICAgICAgICAvLyBzZXZlcmFsIHByYWN0aWNhbCBjb25zZXF1ZW5jZXM6XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gLSBJZiBhbiAubmdmYWN0b3J5IGZpbGUgaXMgbm90IGltcG9ydGVkIGZyb20sIHRoZSBtb2R1bGUgd29uJ3QgYmUgcmVnaXN0ZXJlZCAoYW5kIGNhbiBiZVxuICAgICAgICAgICAgLy8gICB0cmVlIHNoYWtlbikuXG4gICAgICAgICAgICAvLyAtIElmIGFuIC5uZ2ZhY3RvcnkgZmlsZSBpcyBpbXBvcnRlZCBmcm9tLCB0aGUgbW9kdWxlIHdpbGwgYmUgcmVnaXN0ZXJlZCBldmVuIGlmIGFuIGluc3RhbmNlXG4gICAgICAgICAgICAvLyAgIGlzIG5vdCBhY3R1YWxseSBjcmVhdGVkICh2aWEgYGNyZWF0ZWAgYmVsb3cpLlxuICAgICAgICAgICAgLy8gLSBTaW5jZSBhbiAubmdmYWN0b3J5IGZpbGUgaW4gVmlldyBFbmdpbmUgcmVmZXJlbmNlcyB0aGUgLm5nZmFjdG9yeSBmaWxlcyBvZiB0aGUgTmdNb2R1bGUnc1xuICAgICAgICAgICAgLy8gICBpbXBvcnRzLFxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEluIEl2eSwgdGhpbmdzIGFyZSBhIGJpdCBkaWZmZXJlbnQuIC5uZ2ZhY3RvcnkgZmlsZXMgc3RpbGwgZXhpc3QgZm9yIGNvbXBhdGliaWxpdHksIGJ1dCBhcmVcbiAgICAgICAgICAgIC8vIG5vdCBhIHJlcXVpcmVkIEFQSSB0byB1c2UgLSB0aGVyZSBhcmUgb3RoZXIgd2F5cyB0byBvYnRhaW4gYW4gTmdNb2R1bGVGYWN0b3J5IGZvciBhIGdpdmVuXG4gICAgICAgICAgICAvLyBOZ01vZHVsZS4gVGh1cywgcmVseWluZyBvbiBhIHNpZGUgZWZmZWN0IGluIHRoZSAubmdmYWN0b3J5IGZpbGUgaXMgbm90IHN1ZmZpY2llbnQuIEluc3RlYWQsXG4gICAgICAgICAgICAvLyB0aGUgc2lkZSBlZmZlY3Qgb2YgcmVnaXN0cmF0aW9uIGlzIGFkZGVkIGhlcmUsIGluIHRoZSBjb25zdHJ1Y3RvciBvZiBOZ01vZHVsZUZhY3RvcnksXG4gICAgICAgICAgICAvLyBlbnN1cmluZyBubyBtYXR0ZXIgaG93IGEgZmFjdG9yeSBpcyBjcmVhdGVkLCB0aGUgbW9kdWxlIGlzIHJlZ2lzdGVyZWQgY29ycmVjdGx5LlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEFuIGFsdGVybmF0aXZlIHdvdWxkIGJlIHRvIGluY2x1ZGUgdGhlIHJlZ2lzdHJhdGlvbiBzaWRlIGVmZmVjdCBpbmxpbmUgZm9sbG93aW5nIHRoZSBhY3R1YWxcbiAgICAgICAgICAgIC8vIE5nTW9kdWxlIGRlZmluaXRpb24uIFRoaXMgYWxzbyBoYXMgdGhlIGNvcnJlY3QgdGltaW5nLCBidXQgYnJlYWtzIHRyZWUtc2hha2luZyAtIG1vZHVsZXNcbiAgICAgICAgICAgIC8vIHdpbGwgYmUgcmVnaXN0ZXJlZCBhbmQgcmV0YWluZWQgZXZlbiBpZiB0aGV5J3JlIG90aGVyd2lzZSBuZXZlciByZWZlcmVuY2VkLlxuICAgICAgICAgICAgcmVnaXN0ZXJOZ01vZHVsZVR5cGUobW9kdWxlVHlwZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlKHBhcmVudEluamVjdG9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgTmdNb2R1bGVSZWYodGhpcy5tb2R1bGVUeXBlLCBwYXJlbnRJbmplY3Rvcik7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQmluZGluZ3MgZm9yIHB1cmUgZnVuY3Rpb25zIGFyZSBzdG9yZWQgYWZ0ZXIgcmVndWxhciBiaW5kaW5ncy5cbiAqXG4gKiB8LS0tLS0tLWRlY2xzLS0tLS0tfC0tLS0tLS0tLXZhcnMtLS0tLS0tLS18ICAgICAgICAgICAgICAgICB8LS0tLS0gaG9zdFZhcnMgKGRpcjEpIC0tLS0tLXxcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogfCBub2Rlcy9yZWZzL3BpcGVzIHwgYmluZGluZ3MgfCBmbiBzbG90cyAgfCBpbmplY3RvciB8IGRpcjEgfCBob3N0IGJpbmRpbmdzIHwgaG9zdCBzbG90cyB8XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICAgICAgICAgICAgICAgICAgICBeICAgICAgICAgICAgICAgICAgICAgIF5cbiAqICAgICAgVFZpZXcuYmluZGluZ1N0YXJ0SW5kZXggICAgICBUVmlldy5leHBhbmRvU3RhcnRJbmRleFxuICpcbiAqIFB1cmUgZnVuY3Rpb24gaW5zdHJ1Y3Rpb25zIGFyZSBnaXZlbiBhbiBvZmZzZXQgZnJvbSB0aGUgYmluZGluZyByb290LiBBZGRpbmcgdGhlIG9mZnNldCB0byB0aGVcbiAqIGJpbmRpbmcgcm9vdCBnaXZlcyB0aGUgZmlyc3QgaW5kZXggd2hlcmUgdGhlIGJpbmRpbmdzIGFyZSBzdG9yZWQuIEluIGNvbXBvbmVudCB2aWV3cywgdGhlIGJpbmRpbmdcbiAqIHJvb3QgaXMgdGhlIGJpbmRpbmdTdGFydEluZGV4LiBJbiBob3N0IGJpbmRpbmdzLCB0aGUgYmluZGluZyByb290IGlzIHRoZSBleHBhbmRvU3RhcnRJbmRleCArXG4gKiBhbnkgZGlyZWN0aXZlIGluc3RhbmNlcyArIGFueSBob3N0VmFycyBpbiBkaXJlY3RpdmVzIGV2YWx1YXRlZCBiZWZvcmUgaXQuXG4gKlxuICogU2VlIFZJRVdfREFUQS5tZCBmb3IgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBob3N0IGJpbmRpbmcgcmVzb2x1dGlvbi5cbiAqL1xuLyoqXG4gKiBJZiB0aGUgdmFsdWUgaGFzbid0IGJlZW4gc2F2ZWQsIGNhbGxzIHRoZSBwdXJlIGZ1bmN0aW9uIHRvIHN0b3JlIGFuZCByZXR1cm4gdGhlXG4gKiB2YWx1ZS4gSWYgaXQgaGFzIGJlZW4gc2F2ZWQsIHJldHVybnMgdGhlIHNhdmVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgZnJvbSBiaW5kaW5nIHJvb3QgdG8gdGhlIHJlc2VydmVkIHNsb3RcbiAqIEBwYXJhbSBwdXJlRm4gRnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgdmFsdWVcbiAqIEBwYXJhbSB0aGlzQXJnIE9wdGlvbmFsIGNhbGxpbmcgY29udGV4dCBvZiBwdXJlRm5cbiAqIEByZXR1cm5zIHZhbHVlXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXB1cmVGdW5jdGlvbjAoc2xvdE9mZnNldCwgcHVyZUZuLCB0aGlzQXJnKSB7XG4gICAgY29uc3QgYmluZGluZ0luZGV4ID0gZ2V0QmluZGluZ1Jvb3QoKSArIHNsb3RPZmZzZXQ7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIHJldHVybiBsVmlld1tiaW5kaW5nSW5kZXhdID09PSBOT19DSEFOR0UgP1xuICAgICAgICB1cGRhdGVCaW5kaW5nKGxWaWV3LCBiaW5kaW5nSW5kZXgsIHRoaXNBcmcgPyBwdXJlRm4uY2FsbCh0aGlzQXJnKSA6IHB1cmVGbigpKSA6XG4gICAgICAgIGdldEJpbmRpbmcobFZpZXcsIGJpbmRpbmdJbmRleCk7XG59XG4vKipcbiAqIElmIHRoZSB2YWx1ZSBvZiB0aGUgcHJvdmlkZWQgZXhwIGhhcyBjaGFuZ2VkLCBjYWxscyB0aGUgcHVyZSBmdW5jdGlvbiB0byByZXR1cm5cbiAqIGFuIHVwZGF0ZWQgdmFsdWUuIE9yIGlmIHRoZSB2YWx1ZSBoYXMgbm90IGNoYW5nZWQsIHJldHVybnMgY2FjaGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgZnJvbSBiaW5kaW5nIHJvb3QgdG8gdGhlIHJlc2VydmVkIHNsb3RcbiAqIEBwYXJhbSBwdXJlRm4gRnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIHVwZGF0ZWQgdmFsdWVcbiAqIEBwYXJhbSBleHAgVXBkYXRlZCBleHByZXNzaW9uIHZhbHVlXG4gKiBAcGFyYW0gdGhpc0FyZyBPcHRpb25hbCBjYWxsaW5nIGNvbnRleHQgb2YgcHVyZUZuXG4gKiBAcmV0dXJucyBVcGRhdGVkIG9yIGNhY2hlZCB2YWx1ZVxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwdXJlRnVuY3Rpb24xKHNsb3RPZmZzZXQsIHB1cmVGbiwgZXhwLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIHB1cmVGdW5jdGlvbjFJbnRlcm5hbChnZXRMVmlldygpLCBnZXRCaW5kaW5nUm9vdCgpLCBzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cCwgdGhpc0FyZyk7XG59XG4vKipcbiAqIElmIHRoZSB2YWx1ZSBvZiBhbnkgcHJvdmlkZWQgZXhwIGhhcyBjaGFuZ2VkLCBjYWxscyB0aGUgcHVyZSBmdW5jdGlvbiB0byByZXR1cm5cbiAqIGFuIHVwZGF0ZWQgdmFsdWUuIE9yIGlmIG5vIHZhbHVlcyBoYXZlIGNoYW5nZWQsIHJldHVybnMgY2FjaGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgZnJvbSBiaW5kaW5nIHJvb3QgdG8gdGhlIHJlc2VydmVkIHNsb3RcbiAqIEBwYXJhbSBwdXJlRm5cbiAqIEBwYXJhbSBleHAxXG4gKiBAcGFyYW0gZXhwMlxuICogQHBhcmFtIHRoaXNBcmcgT3B0aW9uYWwgY2FsbGluZyBjb250ZXh0IG9mIHB1cmVGblxuICogQHJldHVybnMgVXBkYXRlZCBvciBjYWNoZWQgdmFsdWVcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHVyZUZ1bmN0aW9uMihzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cDEsIGV4cDIsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gcHVyZUZ1bmN0aW9uMkludGVybmFsKGdldExWaWV3KCksIGdldEJpbmRpbmdSb290KCksIHNsb3RPZmZzZXQsIHB1cmVGbiwgZXhwMSwgZXhwMiwgdGhpc0FyZyk7XG59XG4vKipcbiAqIElmIHRoZSB2YWx1ZSBvZiBhbnkgcHJvdmlkZWQgZXhwIGhhcyBjaGFuZ2VkLCBjYWxscyB0aGUgcHVyZSBmdW5jdGlvbiB0byByZXR1cm5cbiAqIGFuIHVwZGF0ZWQgdmFsdWUuIE9yIGlmIG5vIHZhbHVlcyBoYXZlIGNoYW5nZWQsIHJldHVybnMgY2FjaGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgZnJvbSBiaW5kaW5nIHJvb3QgdG8gdGhlIHJlc2VydmVkIHNsb3RcbiAqIEBwYXJhbSBwdXJlRm5cbiAqIEBwYXJhbSBleHAxXG4gKiBAcGFyYW0gZXhwMlxuICogQHBhcmFtIGV4cDNcbiAqIEBwYXJhbSB0aGlzQXJnIE9wdGlvbmFsIGNhbGxpbmcgY29udGV4dCBvZiBwdXJlRm5cbiAqIEByZXR1cm5zIFVwZGF0ZWQgb3IgY2FjaGVkIHZhbHVlXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXB1cmVGdW5jdGlvbjMoc2xvdE9mZnNldCwgcHVyZUZuLCBleHAxLCBleHAyLCBleHAzLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIHB1cmVGdW5jdGlvbjNJbnRlcm5hbChnZXRMVmlldygpLCBnZXRCaW5kaW5nUm9vdCgpLCBzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cDEsIGV4cDIsIGV4cDMsIHRoaXNBcmcpO1xufVxuLyoqXG4gKiBJZiB0aGUgdmFsdWUgb2YgYW55IHByb3ZpZGVkIGV4cCBoYXMgY2hhbmdlZCwgY2FsbHMgdGhlIHB1cmUgZnVuY3Rpb24gdG8gcmV0dXJuXG4gKiBhbiB1cGRhdGVkIHZhbHVlLiBPciBpZiBubyB2YWx1ZXMgaGF2ZSBjaGFuZ2VkLCByZXR1cm5zIGNhY2hlZCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gc2xvdE9mZnNldCB0aGUgb2Zmc2V0IGZyb20gYmluZGluZyByb290IHRvIHRoZSByZXNlcnZlZCBzbG90XG4gKiBAcGFyYW0gcHVyZUZuXG4gKiBAcGFyYW0gZXhwMVxuICogQHBhcmFtIGV4cDJcbiAqIEBwYXJhbSBleHAzXG4gKiBAcGFyYW0gZXhwNFxuICogQHBhcmFtIHRoaXNBcmcgT3B0aW9uYWwgY2FsbGluZyBjb250ZXh0IG9mIHB1cmVGblxuICogQHJldHVybnMgVXBkYXRlZCBvciBjYWNoZWQgdmFsdWVcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHVyZUZ1bmN0aW9uNChzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gcHVyZUZ1bmN0aW9uNEludGVybmFsKGdldExWaWV3KCksIGdldEJpbmRpbmdSb290KCksIHNsb3RPZmZzZXQsIHB1cmVGbiwgZXhwMSwgZXhwMiwgZXhwMywgZXhwNCwgdGhpc0FyZyk7XG59XG4vKipcbiAqIElmIHRoZSB2YWx1ZSBvZiBhbnkgcHJvdmlkZWQgZXhwIGhhcyBjaGFuZ2VkLCBjYWxscyB0aGUgcHVyZSBmdW5jdGlvbiB0byByZXR1cm5cbiAqIGFuIHVwZGF0ZWQgdmFsdWUuIE9yIGlmIG5vIHZhbHVlcyBoYXZlIGNoYW5nZWQsIHJldHVybnMgY2FjaGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgZnJvbSBiaW5kaW5nIHJvb3QgdG8gdGhlIHJlc2VydmVkIHNsb3RcbiAqIEBwYXJhbSBwdXJlRm5cbiAqIEBwYXJhbSBleHAxXG4gKiBAcGFyYW0gZXhwMlxuICogQHBhcmFtIGV4cDNcbiAqIEBwYXJhbSBleHA0XG4gKiBAcGFyYW0gZXhwNVxuICogQHBhcmFtIHRoaXNBcmcgT3B0aW9uYWwgY2FsbGluZyBjb250ZXh0IG9mIHB1cmVGblxuICogQHJldHVybnMgVXBkYXRlZCBvciBjYWNoZWQgdmFsdWVcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHVyZUZ1bmN0aW9uNShzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQsIGV4cDUsIHRoaXNBcmcpIHtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBnZXRCaW5kaW5nUm9vdCgpICsgc2xvdE9mZnNldDtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgZGlmZmVyZW50ID0gYmluZGluZ1VwZGF0ZWQ0KGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQpO1xuICAgIHJldHVybiBiaW5kaW5nVXBkYXRlZChsVmlldywgYmluZGluZ0luZGV4ICsgNCwgZXhwNSkgfHwgZGlmZmVyZW50ID9cbiAgICAgICAgdXBkYXRlQmluZGluZyhsVmlldywgYmluZGluZ0luZGV4ICsgNSwgdGhpc0FyZyA/IHB1cmVGbi5jYWxsKHRoaXNBcmcsIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQsIGV4cDUpIDpcbiAgICAgICAgICAgIHB1cmVGbihleHAxLCBleHAyLCBleHAzLCBleHA0LCBleHA1KSkgOlxuICAgICAgICBnZXRCaW5kaW5nKGxWaWV3LCBiaW5kaW5nSW5kZXggKyA1KTtcbn1cbi8qKlxuICogSWYgdGhlIHZhbHVlIG9mIGFueSBwcm92aWRlZCBleHAgaGFzIGNoYW5nZWQsIGNhbGxzIHRoZSBwdXJlIGZ1bmN0aW9uIHRvIHJldHVyblxuICogYW4gdXBkYXRlZCB2YWx1ZS4gT3IgaWYgbm8gdmFsdWVzIGhhdmUgY2hhbmdlZCwgcmV0dXJucyBjYWNoZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHNsb3RPZmZzZXQgdGhlIG9mZnNldCBmcm9tIGJpbmRpbmcgcm9vdCB0byB0aGUgcmVzZXJ2ZWQgc2xvdFxuICogQHBhcmFtIHB1cmVGblxuICogQHBhcmFtIGV4cDFcbiAqIEBwYXJhbSBleHAyXG4gKiBAcGFyYW0gZXhwM1xuICogQHBhcmFtIGV4cDRcbiAqIEBwYXJhbSBleHA1XG4gKiBAcGFyYW0gZXhwNlxuICogQHBhcmFtIHRoaXNBcmcgT3B0aW9uYWwgY2FsbGluZyBjb250ZXh0IG9mIHB1cmVGblxuICogQHJldHVybnMgVXBkYXRlZCBvciBjYWNoZWQgdmFsdWVcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHVyZUZ1bmN0aW9uNihzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQsIGV4cDUsIGV4cDYsIHRoaXNBcmcpIHtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBnZXRCaW5kaW5nUm9vdCgpICsgc2xvdE9mZnNldDtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgZGlmZmVyZW50ID0gYmluZGluZ1VwZGF0ZWQ0KGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQpO1xuICAgIHJldHVybiBiaW5kaW5nVXBkYXRlZDIobFZpZXcsIGJpbmRpbmdJbmRleCArIDQsIGV4cDUsIGV4cDYpIHx8IGRpZmZlcmVudCA/XG4gICAgICAgIHVwZGF0ZUJpbmRpbmcobFZpZXcsIGJpbmRpbmdJbmRleCArIDYsIHRoaXNBcmcgPyBwdXJlRm4uY2FsbCh0aGlzQXJnLCBleHAxLCBleHAyLCBleHAzLCBleHA0LCBleHA1LCBleHA2KSA6XG4gICAgICAgICAgICBwdXJlRm4oZXhwMSwgZXhwMiwgZXhwMywgZXhwNCwgZXhwNSwgZXhwNikpIDpcbiAgICAgICAgZ2V0QmluZGluZyhsVmlldywgYmluZGluZ0luZGV4ICsgNik7XG59XG4vKipcbiAqIElmIHRoZSB2YWx1ZSBvZiBhbnkgcHJvdmlkZWQgZXhwIGhhcyBjaGFuZ2VkLCBjYWxscyB0aGUgcHVyZSBmdW5jdGlvbiB0byByZXR1cm5cbiAqIGFuIHVwZGF0ZWQgdmFsdWUuIE9yIGlmIG5vIHZhbHVlcyBoYXZlIGNoYW5nZWQsIHJldHVybnMgY2FjaGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgZnJvbSBiaW5kaW5nIHJvb3QgdG8gdGhlIHJlc2VydmVkIHNsb3RcbiAqIEBwYXJhbSBwdXJlRm5cbiAqIEBwYXJhbSBleHAxXG4gKiBAcGFyYW0gZXhwMlxuICogQHBhcmFtIGV4cDNcbiAqIEBwYXJhbSBleHA0XG4gKiBAcGFyYW0gZXhwNVxuICogQHBhcmFtIGV4cDZcbiAqIEBwYXJhbSBleHA3XG4gKiBAcGFyYW0gdGhpc0FyZyBPcHRpb25hbCBjYWxsaW5nIGNvbnRleHQgb2YgcHVyZUZuXG4gKiBAcmV0dXJucyBVcGRhdGVkIG9yIGNhY2hlZCB2YWx1ZVxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwdXJlRnVuY3Rpb243KHNsb3RPZmZzZXQsIHB1cmVGbiwgZXhwMSwgZXhwMiwgZXhwMywgZXhwNCwgZXhwNSwgZXhwNiwgZXhwNywgdGhpc0FyZykge1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IGdldEJpbmRpbmdSb290KCkgKyBzbG90T2Zmc2V0O1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBsZXQgZGlmZmVyZW50ID0gYmluZGluZ1VwZGF0ZWQ0KGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQpO1xuICAgIHJldHVybiBiaW5kaW5nVXBkYXRlZDMobFZpZXcsIGJpbmRpbmdJbmRleCArIDQsIGV4cDUsIGV4cDYsIGV4cDcpIHx8IGRpZmZlcmVudCA/XG4gICAgICAgIHVwZGF0ZUJpbmRpbmcobFZpZXcsIGJpbmRpbmdJbmRleCArIDcsIHRoaXNBcmcgPyBwdXJlRm4uY2FsbCh0aGlzQXJnLCBleHAxLCBleHAyLCBleHAzLCBleHA0LCBleHA1LCBleHA2LCBleHA3KSA6XG4gICAgICAgICAgICBwdXJlRm4oZXhwMSwgZXhwMiwgZXhwMywgZXhwNCwgZXhwNSwgZXhwNiwgZXhwNykpIDpcbiAgICAgICAgZ2V0QmluZGluZyhsVmlldywgYmluZGluZ0luZGV4ICsgNyk7XG59XG4vKipcbiAqIElmIHRoZSB2YWx1ZSBvZiBhbnkgcHJvdmlkZWQgZXhwIGhhcyBjaGFuZ2VkLCBjYWxscyB0aGUgcHVyZSBmdW5jdGlvbiB0byByZXR1cm5cbiAqIGFuIHVwZGF0ZWQgdmFsdWUuIE9yIGlmIG5vIHZhbHVlcyBoYXZlIGNoYW5nZWQsIHJldHVybnMgY2FjaGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgZnJvbSBiaW5kaW5nIHJvb3QgdG8gdGhlIHJlc2VydmVkIHNsb3RcbiAqIEBwYXJhbSBwdXJlRm5cbiAqIEBwYXJhbSBleHAxXG4gKiBAcGFyYW0gZXhwMlxuICogQHBhcmFtIGV4cDNcbiAqIEBwYXJhbSBleHA0XG4gKiBAcGFyYW0gZXhwNVxuICogQHBhcmFtIGV4cDZcbiAqIEBwYXJhbSBleHA3XG4gKiBAcGFyYW0gZXhwOFxuICogQHBhcmFtIHRoaXNBcmcgT3B0aW9uYWwgY2FsbGluZyBjb250ZXh0IG9mIHB1cmVGblxuICogQHJldHVybnMgVXBkYXRlZCBvciBjYWNoZWQgdmFsdWVcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHVyZUZ1bmN0aW9uOChzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQsIGV4cDUsIGV4cDYsIGV4cDcsIGV4cDgsIHRoaXNBcmcpIHtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBnZXRCaW5kaW5nUm9vdCgpICsgc2xvdE9mZnNldDtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgZGlmZmVyZW50ID0gYmluZGluZ1VwZGF0ZWQ0KGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQpO1xuICAgIHJldHVybiBiaW5kaW5nVXBkYXRlZDQobFZpZXcsIGJpbmRpbmdJbmRleCArIDQsIGV4cDUsIGV4cDYsIGV4cDcsIGV4cDgpIHx8IGRpZmZlcmVudCA/XG4gICAgICAgIHVwZGF0ZUJpbmRpbmcobFZpZXcsIGJpbmRpbmdJbmRleCArIDgsIHRoaXNBcmcgPyBwdXJlRm4uY2FsbCh0aGlzQXJnLCBleHAxLCBleHAyLCBleHAzLCBleHA0LCBleHA1LCBleHA2LCBleHA3LCBleHA4KSA6XG4gICAgICAgICAgICBwdXJlRm4oZXhwMSwgZXhwMiwgZXhwMywgZXhwNCwgZXhwNSwgZXhwNiwgZXhwNywgZXhwOCkpIDpcbiAgICAgICAgZ2V0QmluZGluZyhsVmlldywgYmluZGluZ0luZGV4ICsgOCk7XG59XG4vKipcbiAqIHB1cmVGdW5jdGlvbiBpbnN0cnVjdGlvbiB0aGF0IGNhbiBzdXBwb3J0IGFueSBudW1iZXIgb2YgYmluZGluZ3MuXG4gKlxuICogSWYgdGhlIHZhbHVlIG9mIGFueSBwcm92aWRlZCBleHAgaGFzIGNoYW5nZWQsIGNhbGxzIHRoZSBwdXJlIGZ1bmN0aW9uIHRvIHJldHVyblxuICogYW4gdXBkYXRlZCB2YWx1ZS4gT3IgaWYgbm8gdmFsdWVzIGhhdmUgY2hhbmdlZCwgcmV0dXJucyBjYWNoZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHNsb3RPZmZzZXQgdGhlIG9mZnNldCBmcm9tIGJpbmRpbmcgcm9vdCB0byB0aGUgcmVzZXJ2ZWQgc2xvdFxuICogQHBhcmFtIHB1cmVGbiBBIHB1cmUgZnVuY3Rpb24gdGhhdCB0YWtlcyBiaW5kaW5nIHZhbHVlcyBhbmQgYnVpbGRzIGFuIG9iamVjdCBvciBhcnJheVxuICogY29udGFpbmluZyB0aG9zZSB2YWx1ZXMuXG4gKiBAcGFyYW0gZXhwcyBBbiBhcnJheSBvZiBiaW5kaW5nIHZhbHVlc1xuICogQHBhcmFtIHRoaXNBcmcgT3B0aW9uYWwgY2FsbGluZyBjb250ZXh0IG9mIHB1cmVGblxuICogQHJldHVybnMgVXBkYXRlZCBvciBjYWNoZWQgdmFsdWVcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cHVyZUZ1bmN0aW9uVihzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cHMsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gcHVyZUZ1bmN0aW9uVkludGVybmFsKGdldExWaWV3KCksIGdldEJpbmRpbmdSb290KCksIHNsb3RPZmZzZXQsIHB1cmVGbiwgZXhwcywgdGhpc0FyZyk7XG59XG4vKipcbiAqIFJlc3VsdHMgb2YgYSBwdXJlIGZ1bmN0aW9uIGludm9jYXRpb24gYXJlIHN0b3JlZCBpbiBMVmlldyBpbiBhIGRlZGljYXRlZCBzbG90IHRoYXQgaXMgaW5pdGlhbGl6ZWRcbiAqIHRvIE5PX0NIQU5HRS4gSW4gcmFyZSBzaXR1YXRpb25zIGEgcHVyZSBwaXBlIG1pZ2h0IHRocm93IGFuIGV4Y2VwdGlvbiBvbiB0aGUgdmVyeSBmaXJzdFxuICogaW52b2NhdGlvbiBhbmQgbm90IHByb2R1Y2UgYW55IHZhbGlkIHJlc3VsdHMuIEluIHRoaXMgY2FzZSBMVmlldyB3b3VsZCBrZWVwIGhvbGRpbmcgdGhlIE5PX0NIQU5HRVxuICogdmFsdWUuIFRoZSBOT19DSEFOR0UgaXMgbm90IHNvbWV0aGluZyB0aGF0IHdlIGNhbiB1c2UgaW4gZXhwcmVzc2lvbnMgLyBiaW5kaW5ncyB0aHVzIHdlIGNvbnZlcnRcbiAqIGl0IHRvIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXRQdXJlRnVuY3Rpb25SZXR1cm5WYWx1ZShsVmlldywgcmV0dXJuVmFsdWVJbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXcsIHJldHVyblZhbHVlSW5kZXgpO1xuICAgIGNvbnN0IGxhc3RSZXR1cm5WYWx1ZSA9IGxWaWV3W3JldHVyblZhbHVlSW5kZXhdO1xuICAgIHJldHVybiBsYXN0UmV0dXJuVmFsdWUgPT09IE5PX0NIQU5HRSA/IHVuZGVmaW5lZCA6IGxhc3RSZXR1cm5WYWx1ZTtcbn1cbi8qKlxuICogSWYgdGhlIHZhbHVlIG9mIHRoZSBwcm92aWRlZCBleHAgaGFzIGNoYW5nZWQsIGNhbGxzIHRoZSBwdXJlIGZ1bmN0aW9uIHRvIHJldHVyblxuICogYW4gdXBkYXRlZCB2YWx1ZS4gT3IgaWYgdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZCwgcmV0dXJucyBjYWNoZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIGxWaWV3IExWaWV3IGluIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyBiZWluZyBleGVjdXRlZC5cbiAqIEBwYXJhbSBiaW5kaW5nUm9vdCBCaW5kaW5nIHJvb3QgaW5kZXguXG4gKiBAcGFyYW0gc2xvdE9mZnNldCB0aGUgb2Zmc2V0IGZyb20gYmluZGluZyByb290IHRvIHRoZSByZXNlcnZlZCBzbG90XG4gKiBAcGFyYW0gcHVyZUZuIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiB1cGRhdGVkIHZhbHVlXG4gKiBAcGFyYW0gZXhwIFVwZGF0ZWQgZXhwcmVzc2lvbiB2YWx1ZVxuICogQHBhcmFtIHRoaXNBcmcgT3B0aW9uYWwgY2FsbGluZyBjb250ZXh0IG9mIHB1cmVGblxuICogQHJldHVybnMgVXBkYXRlZCBvciBjYWNoZWQgdmFsdWVcbiAqL1xuZnVuY3Rpb24gcHVyZUZ1bmN0aW9uMUludGVybmFsKGxWaWV3LCBiaW5kaW5nUm9vdCwgc2xvdE9mZnNldCwgcHVyZUZuLCBleHAsIHRoaXNBcmcpIHtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBiaW5kaW5nUm9vdCArIHNsb3RPZmZzZXQ7XG4gICAgcmV0dXJuIGJpbmRpbmdVcGRhdGVkKGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cCkgP1xuICAgICAgICB1cGRhdGVCaW5kaW5nKGxWaWV3LCBiaW5kaW5nSW5kZXggKyAxLCB0aGlzQXJnID8gcHVyZUZuLmNhbGwodGhpc0FyZywgZXhwKSA6IHB1cmVGbihleHApKSA6XG4gICAgICAgIGdldFB1cmVGdW5jdGlvblJldHVyblZhbHVlKGxWaWV3LCBiaW5kaW5nSW5kZXggKyAxKTtcbn1cbi8qKlxuICogSWYgdGhlIHZhbHVlIG9mIGFueSBwcm92aWRlZCBleHAgaGFzIGNoYW5nZWQsIGNhbGxzIHRoZSBwdXJlIGZ1bmN0aW9uIHRvIHJldHVyblxuICogYW4gdXBkYXRlZCB2YWx1ZS4gT3IgaWYgbm8gdmFsdWVzIGhhdmUgY2hhbmdlZCwgcmV0dXJucyBjYWNoZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIGxWaWV3IExWaWV3IGluIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyBiZWluZyBleGVjdXRlZC5cbiAqIEBwYXJhbSBiaW5kaW5nUm9vdCBCaW5kaW5nIHJvb3QgaW5kZXguXG4gKiBAcGFyYW0gc2xvdE9mZnNldCB0aGUgb2Zmc2V0IGZyb20gYmluZGluZyByb290IHRvIHRoZSByZXNlcnZlZCBzbG90XG4gKiBAcGFyYW0gcHVyZUZuXG4gKiBAcGFyYW0gZXhwMVxuICogQHBhcmFtIGV4cDJcbiAqIEBwYXJhbSB0aGlzQXJnIE9wdGlvbmFsIGNhbGxpbmcgY29udGV4dCBvZiBwdXJlRm5cbiAqIEByZXR1cm5zIFVwZGF0ZWQgb3IgY2FjaGVkIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHB1cmVGdW5jdGlvbjJJbnRlcm5hbChsVmlldywgYmluZGluZ1Jvb3QsIHNsb3RPZmZzZXQsIHB1cmVGbiwgZXhwMSwgZXhwMiwgdGhpc0FyZykge1xuICAgIGNvbnN0IGJpbmRpbmdJbmRleCA9IGJpbmRpbmdSb290ICsgc2xvdE9mZnNldDtcbiAgICByZXR1cm4gYmluZGluZ1VwZGF0ZWQyKGxWaWV3LCBiaW5kaW5nSW5kZXgsIGV4cDEsIGV4cDIpID9cbiAgICAgICAgdXBkYXRlQmluZGluZyhsVmlldywgYmluZGluZ0luZGV4ICsgMiwgdGhpc0FyZyA/IHB1cmVGbi5jYWxsKHRoaXNBcmcsIGV4cDEsIGV4cDIpIDogcHVyZUZuKGV4cDEsIGV4cDIpKSA6XG4gICAgICAgIGdldFB1cmVGdW5jdGlvblJldHVyblZhbHVlKGxWaWV3LCBiaW5kaW5nSW5kZXggKyAyKTtcbn1cbi8qKlxuICogSWYgdGhlIHZhbHVlIG9mIGFueSBwcm92aWRlZCBleHAgaGFzIGNoYW5nZWQsIGNhbGxzIHRoZSBwdXJlIGZ1bmN0aW9uIHRvIHJldHVyblxuICogYW4gdXBkYXRlZCB2YWx1ZS4gT3IgaWYgbm8gdmFsdWVzIGhhdmUgY2hhbmdlZCwgcmV0dXJucyBjYWNoZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIGxWaWV3IExWaWV3IGluIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyBiZWluZyBleGVjdXRlZC5cbiAqIEBwYXJhbSBiaW5kaW5nUm9vdCBCaW5kaW5nIHJvb3QgaW5kZXguXG4gKiBAcGFyYW0gc2xvdE9mZnNldCB0aGUgb2Zmc2V0IGZyb20gYmluZGluZyByb290IHRvIHRoZSByZXNlcnZlZCBzbG90XG4gKiBAcGFyYW0gcHVyZUZuXG4gKiBAcGFyYW0gZXhwMVxuICogQHBhcmFtIGV4cDJcbiAqIEBwYXJhbSBleHAzXG4gKiBAcGFyYW0gdGhpc0FyZyBPcHRpb25hbCBjYWxsaW5nIGNvbnRleHQgb2YgcHVyZUZuXG4gKiBAcmV0dXJucyBVcGRhdGVkIG9yIGNhY2hlZCB2YWx1ZVxuICovXG5mdW5jdGlvbiBwdXJlRnVuY3Rpb24zSW50ZXJuYWwobFZpZXcsIGJpbmRpbmdSb290LCBzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cDEsIGV4cDIsIGV4cDMsIHRoaXNBcmcpIHtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBiaW5kaW5nUm9vdCArIHNsb3RPZmZzZXQ7XG4gICAgcmV0dXJuIGJpbmRpbmdVcGRhdGVkMyhsVmlldywgYmluZGluZ0luZGV4LCBleHAxLCBleHAyLCBleHAzKSA/XG4gICAgICAgIHVwZGF0ZUJpbmRpbmcobFZpZXcsIGJpbmRpbmdJbmRleCArIDMsIHRoaXNBcmcgPyBwdXJlRm4uY2FsbCh0aGlzQXJnLCBleHAxLCBleHAyLCBleHAzKSA6IHB1cmVGbihleHAxLCBleHAyLCBleHAzKSkgOlxuICAgICAgICBnZXRQdXJlRnVuY3Rpb25SZXR1cm5WYWx1ZShsVmlldywgYmluZGluZ0luZGV4ICsgMyk7XG59XG4vKipcbiAqIElmIHRoZSB2YWx1ZSBvZiBhbnkgcHJvdmlkZWQgZXhwIGhhcyBjaGFuZ2VkLCBjYWxscyB0aGUgcHVyZSBmdW5jdGlvbiB0byByZXR1cm5cbiAqIGFuIHVwZGF0ZWQgdmFsdWUuIE9yIGlmIG5vIHZhbHVlcyBoYXZlIGNoYW5nZWQsIHJldHVybnMgY2FjaGVkIHZhbHVlLlxuICpcbiAqIEBwYXJhbSBsVmlldyBMVmlldyBpbiB3aGljaCB0aGUgZnVuY3Rpb24gaXMgYmVpbmcgZXhlY3V0ZWQuXG4gKiBAcGFyYW0gYmluZGluZ1Jvb3QgQmluZGluZyByb290IGluZGV4LlxuICogQHBhcmFtIHNsb3RPZmZzZXQgdGhlIG9mZnNldCBmcm9tIGJpbmRpbmcgcm9vdCB0byB0aGUgcmVzZXJ2ZWQgc2xvdFxuICogQHBhcmFtIHB1cmVGblxuICogQHBhcmFtIGV4cDFcbiAqIEBwYXJhbSBleHAyXG4gKiBAcGFyYW0gZXhwM1xuICogQHBhcmFtIGV4cDRcbiAqIEBwYXJhbSB0aGlzQXJnIE9wdGlvbmFsIGNhbGxpbmcgY29udGV4dCBvZiBwdXJlRm5cbiAqIEByZXR1cm5zIFVwZGF0ZWQgb3IgY2FjaGVkIHZhbHVlXG4gKlxuICovXG5mdW5jdGlvbiBwdXJlRnVuY3Rpb240SW50ZXJuYWwobFZpZXcsIGJpbmRpbmdSb290LCBzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cDEsIGV4cDIsIGV4cDMsIGV4cDQsIHRoaXNBcmcpIHtcbiAgICBjb25zdCBiaW5kaW5nSW5kZXggPSBiaW5kaW5nUm9vdCArIHNsb3RPZmZzZXQ7XG4gICAgcmV0dXJuIGJpbmRpbmdVcGRhdGVkNChsVmlldywgYmluZGluZ0luZGV4LCBleHAxLCBleHAyLCBleHAzLCBleHA0KSA/XG4gICAgICAgIHVwZGF0ZUJpbmRpbmcobFZpZXcsIGJpbmRpbmdJbmRleCArIDQsIHRoaXNBcmcgPyBwdXJlRm4uY2FsbCh0aGlzQXJnLCBleHAxLCBleHAyLCBleHAzLCBleHA0KSA6IHB1cmVGbihleHAxLCBleHAyLCBleHAzLCBleHA0KSkgOlxuICAgICAgICBnZXRQdXJlRnVuY3Rpb25SZXR1cm5WYWx1ZShsVmlldywgYmluZGluZ0luZGV4ICsgNCk7XG59XG4vKipcbiAqIHB1cmVGdW5jdGlvbiBpbnN0cnVjdGlvbiB0aGF0IGNhbiBzdXBwb3J0IGFueSBudW1iZXIgb2YgYmluZGluZ3MuXG4gKlxuICogSWYgdGhlIHZhbHVlIG9mIGFueSBwcm92aWRlZCBleHAgaGFzIGNoYW5nZWQsIGNhbGxzIHRoZSBwdXJlIGZ1bmN0aW9uIHRvIHJldHVyblxuICogYW4gdXBkYXRlZCB2YWx1ZS4gT3IgaWYgbm8gdmFsdWVzIGhhdmUgY2hhbmdlZCwgcmV0dXJucyBjYWNoZWQgdmFsdWUuXG4gKlxuICogQHBhcmFtIGxWaWV3IExWaWV3IGluIHdoaWNoIHRoZSBmdW5jdGlvbiBpcyBiZWluZyBleGVjdXRlZC5cbiAqIEBwYXJhbSBiaW5kaW5nUm9vdCBCaW5kaW5nIHJvb3QgaW5kZXguXG4gKiBAcGFyYW0gc2xvdE9mZnNldCB0aGUgb2Zmc2V0IGZyb20gYmluZGluZyByb290IHRvIHRoZSByZXNlcnZlZCBzbG90XG4gKiBAcGFyYW0gcHVyZUZuIEEgcHVyZSBmdW5jdGlvbiB0aGF0IHRha2VzIGJpbmRpbmcgdmFsdWVzIGFuZCBidWlsZHMgYW4gb2JqZWN0IG9yIGFycmF5XG4gKiBjb250YWluaW5nIHRob3NlIHZhbHVlcy5cbiAqIEBwYXJhbSBleHBzIEFuIGFycmF5IG9mIGJpbmRpbmcgdmFsdWVzXG4gKiBAcGFyYW0gdGhpc0FyZyBPcHRpb25hbCBjYWxsaW5nIGNvbnRleHQgb2YgcHVyZUZuXG4gKiBAcmV0dXJucyBVcGRhdGVkIG9yIGNhY2hlZCB2YWx1ZVxuICovXG5mdW5jdGlvbiBwdXJlRnVuY3Rpb25WSW50ZXJuYWwobFZpZXcsIGJpbmRpbmdSb290LCBzbG90T2Zmc2V0LCBwdXJlRm4sIGV4cHMsIHRoaXNBcmcpIHtcbiAgICBsZXQgYmluZGluZ0luZGV4ID0gYmluZGluZ1Jvb3QgKyBzbG90T2Zmc2V0O1xuICAgIGxldCBkaWZmZXJlbnQgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV4cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYmluZGluZ1VwZGF0ZWQobFZpZXcsIGJpbmRpbmdJbmRleCsrLCBleHBzW2ldKSAmJiAoZGlmZmVyZW50ID0gdHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBkaWZmZXJlbnQgPyB1cGRhdGVCaW5kaW5nKGxWaWV3LCBiaW5kaW5nSW5kZXgsIHB1cmVGbi5hcHBseSh0aGlzQXJnLCBleHBzKSkgOlxuICAgICAgICBnZXRQdXJlRnVuY3Rpb25SZXR1cm5WYWx1ZShsVmlldywgYmluZGluZ0luZGV4KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIENyZWF0ZSBhIHBpcGUuXG4gKlxuICogQHBhcmFtIGluZGV4IFBpcGUgaW5kZXggd2hlcmUgdGhlIHBpcGUgd2lsbCBiZSBzdG9yZWQuXG4gKiBAcGFyYW0gcGlwZU5hbWUgVGhlIG5hbWUgb2YgdGhlIHBpcGVcbiAqIEByZXR1cm5zIFQgdGhlIGluc3RhbmNlIG9mIHRoZSBwaXBlLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwaXBlKGluZGV4LCBwaXBlTmFtZSkge1xuICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICBsZXQgcGlwZURlZjtcbiAgICBjb25zdCBhZGp1c3RlZEluZGV4ID0gaW5kZXggKyBIRUFERVJfT0ZGU0VUO1xuICAgIGlmICh0Vmlldy5maXJzdENyZWF0ZVBhc3MpIHtcbiAgICAgICAgLy8gVGhlIGBnZXRQaXBlRGVmYCB0aHJvd3MgaWYgYSBwaXBlIHdpdGggYSBnaXZlbiBuYW1lIGlzIG5vdCBmb3VuZFxuICAgICAgICAvLyAoc28gd2UgdXNlIG5vbi1udWxsIGFzc2VydGlvbiBiZWxvdykuXG4gICAgICAgIHBpcGVEZWYgPSBnZXRQaXBlRGVmKHBpcGVOYW1lLCB0Vmlldy5waXBlUmVnaXN0cnkpO1xuICAgICAgICB0Vmlldy5kYXRhW2FkanVzdGVkSW5kZXhdID0gcGlwZURlZjtcbiAgICAgICAgaWYgKHBpcGVEZWYub25EZXN0cm95KSB7XG4gICAgICAgICAgICAodFZpZXcuZGVzdHJveUhvb2tzIHx8ICh0Vmlldy5kZXN0cm95SG9va3MgPSBbXSkpLnB1c2goYWRqdXN0ZWRJbmRleCwgcGlwZURlZi5vbkRlc3Ryb3kpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBwaXBlRGVmID0gdFZpZXcuZGF0YVthZGp1c3RlZEluZGV4XTtcbiAgICB9XG4gICAgY29uc3QgcGlwZUZhY3RvcnkgPSBwaXBlRGVmLmZhY3RvcnkgfHwgKHBpcGVEZWYuZmFjdG9yeSA9IGdldEZhY3RvcnlEZWYocGlwZURlZi50eXBlLCB0cnVlKSk7XG4gICAgY29uc3QgcHJldmlvdXNJbmplY3RJbXBsZW1lbnRhdGlvbiA9IHNldEluamVjdEltcGxlbWVudGF0aW9uKMm1ybVkaXJlY3RpdmVJbmplY3QpO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIERJIGZvciBwaXBlcyBpcyBzdXBwb3NlZCB0byBiZWhhdmUgbGlrZSBkaXJlY3RpdmVzIHdoZW4gcGxhY2VkIG9uIGEgY29tcG9uZW50XG4gICAgICAgIC8vIGhvc3Qgbm9kZSwgd2hpY2ggbWVhbnMgdGhhdCB3ZSBoYXZlIHRvIGRpc2FibGUgYWNjZXNzIHRvIGB2aWV3UHJvdmlkZXJzYC5cbiAgICAgICAgY29uc3QgcHJldmlvdXNJbmNsdWRlVmlld1Byb3ZpZGVycyA9IHNldEluY2x1ZGVWaWV3UHJvdmlkZXJzKGZhbHNlKTtcbiAgICAgICAgY29uc3QgcGlwZUluc3RhbmNlID0gcGlwZUZhY3RvcnkoKTtcbiAgICAgICAgc2V0SW5jbHVkZVZpZXdQcm92aWRlcnMocHJldmlvdXNJbmNsdWRlVmlld1Byb3ZpZGVycyk7XG4gICAgICAgIHN0b3JlKHRWaWV3LCBnZXRMVmlldygpLCBhZGp1c3RlZEluZGV4LCBwaXBlSW5zdGFuY2UpO1xuICAgICAgICByZXR1cm4gcGlwZUluc3RhbmNlO1xuICAgIH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgLy8gd2UgaGF2ZSB0byByZXN0b3JlIHRoZSBpbmplY3RvciBpbXBsZW1lbnRhdGlvbiBpbiBmaW5hbGx5LCBqdXN0IGluIGNhc2UgdGhlIGNyZWF0aW9uIG9mIHRoZVxuICAgICAgICAvLyBwaXBlIHRocm93cyBhbiBlcnJvci5cbiAgICAgICAgc2V0SW5qZWN0SW1wbGVtZW50YXRpb24ocHJldmlvdXNJbmplY3RJbXBsZW1lbnRhdGlvbik7XG4gICAgfVxufVxuLyoqXG4gKiBTZWFyY2hlcyB0aGUgcGlwZSByZWdpc3RyeSBmb3IgYSBwaXBlIHdpdGggdGhlIGdpdmVuIG5hbWUuIElmIG9uZSBpcyBmb3VuZCxcbiAqIHJldHVybnMgdGhlIHBpcGUuIE90aGVyd2lzZSwgYW4gZXJyb3IgaXMgdGhyb3duIGJlY2F1c2UgdGhlIHBpcGUgY2Fubm90IGJlIHJlc29sdmVkLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgcGlwZSB0byByZXNvbHZlXG4gKiBAcGFyYW0gcmVnaXN0cnkgRnVsbCBsaXN0IG9mIGF2YWlsYWJsZSBwaXBlc1xuICogQHJldHVybnMgTWF0Y2hpbmcgUGlwZURlZlxuICovXG5mdW5jdGlvbiBnZXRQaXBlRGVmKG5hbWUsIHJlZ2lzdHJ5KSB7XG4gICAgaWYgKHJlZ2lzdHJ5KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSByZWdpc3RyeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3QgcGlwZURlZiA9IHJlZ2lzdHJ5W2ldO1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09IHBpcGVEZWYubmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwaXBlRGVmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgICAgICBjb25zdCBkZWNsYXJhdGlvbkxWaWV3ID0gbFZpZXdbREVDTEFSQVRJT05fQ09NUE9ORU5UX1ZJRVddO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZGVjbGFyYXRpb25MVmlld1tDT05URVhUXTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50ID0gY29udGV4dCA/IGAgaW4gdGhlICcke2NvbnRleHQuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudGAgOiAnJztcbiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcigtMzAyIC8qIFBJUEVfTk9UX0ZPVU5EICovLCBgVGhlIHBpcGUgJyR7bmFtZX0nIGNvdWxkIG5vdCBiZSBmb3VuZCR7Y29tcG9uZW50fSFgKTtcbiAgICB9XG59XG4vKipcbiAqIEludm9rZXMgYSBwaXBlIHdpdGggMSBhcmd1bWVudHMuXG4gKlxuICogVGhpcyBpbnN0cnVjdGlvbiBhY3RzIGFzIGEgZ3VhcmQgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfSBpbnZva2luZ1xuICogdGhlIHBpcGUgb25seSB3aGVuIGFuIGlucHV0IHRvIHRoZSBwaXBlIGNoYW5nZXMuXG4gKlxuICogQHBhcmFtIGluZGV4IFBpcGUgaW5kZXggd2hlcmUgdGhlIHBpcGUgd2FzIHN0b3JlZCBvbiBjcmVhdGlvbi5cbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgaW4gdGhlIHJlc2VydmVkIHNsb3Qgc3BhY2VcbiAqIEBwYXJhbSB2MSAxc3QgYXJndW1lbnQgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfS5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cGlwZUJpbmQxKGluZGV4LCBzbG90T2Zmc2V0LCB2MSkge1xuICAgIGNvbnN0IGFkanVzdGVkSW5kZXggPSBpbmRleCArIEhFQURFUl9PRkZTRVQ7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IHBpcGVJbnN0YW5jZSA9IGxvYWQobFZpZXcsIGFkanVzdGVkSW5kZXgpO1xuICAgIHJldHVybiBpc1B1cmUobFZpZXcsIGFkanVzdGVkSW5kZXgpID9cbiAgICAgICAgcHVyZUZ1bmN0aW9uMUludGVybmFsKGxWaWV3LCBnZXRCaW5kaW5nUm9vdCgpLCBzbG90T2Zmc2V0LCBwaXBlSW5zdGFuY2UudHJhbnNmb3JtLCB2MSwgcGlwZUluc3RhbmNlKSA6XG4gICAgICAgIHBpcGVJbnN0YW5jZS50cmFuc2Zvcm0odjEpO1xufVxuLyoqXG4gKiBJbnZva2VzIGEgcGlwZSB3aXRoIDIgYXJndW1lbnRzLlxuICpcbiAqIFRoaXMgaW5zdHJ1Y3Rpb24gYWN0cyBhcyBhIGd1YXJkIHRvIHtAbGluayBQaXBlVHJhbnNmb3JtI3RyYW5zZm9ybX0gaW52b2tpbmdcbiAqIHRoZSBwaXBlIG9ubHkgd2hlbiBhbiBpbnB1dCB0byB0aGUgcGlwZSBjaGFuZ2VzLlxuICpcbiAqIEBwYXJhbSBpbmRleCBQaXBlIGluZGV4IHdoZXJlIHRoZSBwaXBlIHdhcyBzdG9yZWQgb24gY3JlYXRpb24uXG4gKiBAcGFyYW0gc2xvdE9mZnNldCB0aGUgb2Zmc2V0IGluIHRoZSByZXNlcnZlZCBzbG90IHNwYWNlXG4gKiBAcGFyYW0gdjEgMXN0IGFyZ3VtZW50IHRvIHtAbGluayBQaXBlVHJhbnNmb3JtI3RyYW5zZm9ybX0uXG4gKiBAcGFyYW0gdjIgMm5kIGFyZ3VtZW50IHRvIHtAbGluayBQaXBlVHJhbnNmb3JtI3RyYW5zZm9ybX0uXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXBpcGVCaW5kMihpbmRleCwgc2xvdE9mZnNldCwgdjEsIHYyKSB7XG4gICAgY29uc3QgYWRqdXN0ZWRJbmRleCA9IGluZGV4ICsgSEVBREVSX09GRlNFVDtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgcGlwZUluc3RhbmNlID0gbG9hZChsVmlldywgYWRqdXN0ZWRJbmRleCk7XG4gICAgcmV0dXJuIGlzUHVyZShsVmlldywgYWRqdXN0ZWRJbmRleCkgP1xuICAgICAgICBwdXJlRnVuY3Rpb24ySW50ZXJuYWwobFZpZXcsIGdldEJpbmRpbmdSb290KCksIHNsb3RPZmZzZXQsIHBpcGVJbnN0YW5jZS50cmFuc2Zvcm0sIHYxLCB2MiwgcGlwZUluc3RhbmNlKSA6XG4gICAgICAgIHBpcGVJbnN0YW5jZS50cmFuc2Zvcm0odjEsIHYyKTtcbn1cbi8qKlxuICogSW52b2tlcyBhIHBpcGUgd2l0aCAzIGFyZ3VtZW50cy5cbiAqXG4gKiBUaGlzIGluc3RydWN0aW9uIGFjdHMgYXMgYSBndWFyZCB0byB7QGxpbmsgUGlwZVRyYW5zZm9ybSN0cmFuc2Zvcm19IGludm9raW5nXG4gKiB0aGUgcGlwZSBvbmx5IHdoZW4gYW4gaW5wdXQgdG8gdGhlIHBpcGUgY2hhbmdlcy5cbiAqXG4gKiBAcGFyYW0gaW5kZXggUGlwZSBpbmRleCB3aGVyZSB0aGUgcGlwZSB3YXMgc3RvcmVkIG9uIGNyZWF0aW9uLlxuICogQHBhcmFtIHNsb3RPZmZzZXQgdGhlIG9mZnNldCBpbiB0aGUgcmVzZXJ2ZWQgc2xvdCBzcGFjZVxuICogQHBhcmFtIHYxIDFzdCBhcmd1bWVudCB0byB7QGxpbmsgUGlwZVRyYW5zZm9ybSN0cmFuc2Zvcm19LlxuICogQHBhcmFtIHYyIDJuZCBhcmd1bWVudCB0byB7QGxpbmsgUGlwZVRyYW5zZm9ybSN0cmFuc2Zvcm19LlxuICogQHBhcmFtIHYzIDRyZCBhcmd1bWVudCB0byB7QGxpbmsgUGlwZVRyYW5zZm9ybSN0cmFuc2Zvcm19LlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVwaXBlQmluZDMoaW5kZXgsIHNsb3RPZmZzZXQsIHYxLCB2MiwgdjMpIHtcbiAgICBjb25zdCBhZGp1c3RlZEluZGV4ID0gaW5kZXggKyBIRUFERVJfT0ZGU0VUO1xuICAgIGNvbnN0IGxWaWV3ID0gZ2V0TFZpZXcoKTtcbiAgICBjb25zdCBwaXBlSW5zdGFuY2UgPSBsb2FkKGxWaWV3LCBhZGp1c3RlZEluZGV4KTtcbiAgICByZXR1cm4gaXNQdXJlKGxWaWV3LCBhZGp1c3RlZEluZGV4KSA/XG4gICAgICAgIHB1cmVGdW5jdGlvbjNJbnRlcm5hbChsVmlldywgZ2V0QmluZGluZ1Jvb3QoKSwgc2xvdE9mZnNldCwgcGlwZUluc3RhbmNlLnRyYW5zZm9ybSwgdjEsIHYyLCB2MywgcGlwZUluc3RhbmNlKSA6XG4gICAgICAgIHBpcGVJbnN0YW5jZS50cmFuc2Zvcm0odjEsIHYyLCB2Myk7XG59XG4vKipcbiAqIEludm9rZXMgYSBwaXBlIHdpdGggNCBhcmd1bWVudHMuXG4gKlxuICogVGhpcyBpbnN0cnVjdGlvbiBhY3RzIGFzIGEgZ3VhcmQgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfSBpbnZva2luZ1xuICogdGhlIHBpcGUgb25seSB3aGVuIGFuIGlucHV0IHRvIHRoZSBwaXBlIGNoYW5nZXMuXG4gKlxuICogQHBhcmFtIGluZGV4IFBpcGUgaW5kZXggd2hlcmUgdGhlIHBpcGUgd2FzIHN0b3JlZCBvbiBjcmVhdGlvbi5cbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgaW4gdGhlIHJlc2VydmVkIHNsb3Qgc3BhY2VcbiAqIEBwYXJhbSB2MSAxc3QgYXJndW1lbnQgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfS5cbiAqIEBwYXJhbSB2MiAybmQgYXJndW1lbnQgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfS5cbiAqIEBwYXJhbSB2MyAzcmQgYXJndW1lbnQgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfS5cbiAqIEBwYXJhbSB2NCA0dGggYXJndW1lbnQgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfS5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1cGlwZUJpbmQ0KGluZGV4LCBzbG90T2Zmc2V0LCB2MSwgdjIsIHYzLCB2NCkge1xuICAgIGNvbnN0IGFkanVzdGVkSW5kZXggPSBpbmRleCArIEhFQURFUl9PRkZTRVQ7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IHBpcGVJbnN0YW5jZSA9IGxvYWQobFZpZXcsIGFkanVzdGVkSW5kZXgpO1xuICAgIHJldHVybiBpc1B1cmUobFZpZXcsIGFkanVzdGVkSW5kZXgpID8gcHVyZUZ1bmN0aW9uNEludGVybmFsKGxWaWV3LCBnZXRCaW5kaW5nUm9vdCgpLCBzbG90T2Zmc2V0LCBwaXBlSW5zdGFuY2UudHJhbnNmb3JtLCB2MSwgdjIsIHYzLCB2NCwgcGlwZUluc3RhbmNlKSA6XG4gICAgICAgIHBpcGVJbnN0YW5jZS50cmFuc2Zvcm0odjEsIHYyLCB2MywgdjQpO1xufVxuLyoqXG4gKiBJbnZva2VzIGEgcGlwZSB3aXRoIHZhcmlhYmxlIG51bWJlciBvZiBhcmd1bWVudHMuXG4gKlxuICogVGhpcyBpbnN0cnVjdGlvbiBhY3RzIGFzIGEgZ3VhcmQgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfSBpbnZva2luZ1xuICogdGhlIHBpcGUgb25seSB3aGVuIGFuIGlucHV0IHRvIHRoZSBwaXBlIGNoYW5nZXMuXG4gKlxuICogQHBhcmFtIGluZGV4IFBpcGUgaW5kZXggd2hlcmUgdGhlIHBpcGUgd2FzIHN0b3JlZCBvbiBjcmVhdGlvbi5cbiAqIEBwYXJhbSBzbG90T2Zmc2V0IHRoZSBvZmZzZXQgaW4gdGhlIHJlc2VydmVkIHNsb3Qgc3BhY2VcbiAqIEBwYXJhbSB2YWx1ZXMgQXJyYXkgb2YgYXJndW1lbnRzIHRvIHBhc3MgdG8ge0BsaW5rIFBpcGVUcmFuc2Zvcm0jdHJhbnNmb3JtfSBtZXRob2QuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtXBpcGVCaW5kVihpbmRleCwgc2xvdE9mZnNldCwgdmFsdWVzKSB7XG4gICAgY29uc3QgYWRqdXN0ZWRJbmRleCA9IGluZGV4ICsgSEVBREVSX09GRlNFVDtcbiAgICBjb25zdCBsVmlldyA9IGdldExWaWV3KCk7XG4gICAgY29uc3QgcGlwZUluc3RhbmNlID0gbG9hZChsVmlldywgYWRqdXN0ZWRJbmRleCk7XG4gICAgcmV0dXJuIGlzUHVyZShsVmlldywgYWRqdXN0ZWRJbmRleCkgP1xuICAgICAgICBwdXJlRnVuY3Rpb25WSW50ZXJuYWwobFZpZXcsIGdldEJpbmRpbmdSb290KCksIHNsb3RPZmZzZXQsIHBpcGVJbnN0YW5jZS50cmFuc2Zvcm0sIHZhbHVlcywgcGlwZUluc3RhbmNlKSA6XG4gICAgICAgIHBpcGVJbnN0YW5jZS50cmFuc2Zvcm0uYXBwbHkocGlwZUluc3RhbmNlLCB2YWx1ZXMpO1xufVxuZnVuY3Rpb24gaXNQdXJlKGxWaWV3LCBpbmRleCkge1xuICAgIHJldHVybiBsVmlld1tUVklFV10uZGF0YVtpbmRleF0ucHVyZTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jbGFzcyBFdmVudEVtaXR0ZXJfIGV4dGVuZHMgU3ViamVjdCB7XG4gICAgY29uc3RydWN0b3IoaXNBc3luYyA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX19pc0FzeW5jID0gaXNBc3luYztcbiAgICB9XG4gICAgZW1pdCh2YWx1ZSkge1xuICAgICAgICBzdXBlci5uZXh0KHZhbHVlKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGxldCBuZXh0Rm4gPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgbGV0IGVycm9yRm4gPSBlcnJvciB8fCAoKCkgPT4gbnVsbCk7XG4gICAgICAgIGxldCBjb21wbGV0ZUZuID0gY29tcGxldGU7XG4gICAgICAgIGlmIChvYnNlcnZlck9yTmV4dCAmJiB0eXBlb2Ygb2JzZXJ2ZXJPck5leHQgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgbmV4dEZuID0gKF9hID0gb2JzZXJ2ZXIubmV4dCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmJpbmQob2JzZXJ2ZXIpO1xuICAgICAgICAgICAgZXJyb3JGbiA9IChfYiA9IG9ic2VydmVyLmVycm9yKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuYmluZChvYnNlcnZlcik7XG4gICAgICAgICAgICBjb21wbGV0ZUZuID0gKF9jID0gb2JzZXJ2ZXIuY29tcGxldGUpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5iaW5kKG9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fX2lzQXN5bmMpIHtcbiAgICAgICAgICAgIGVycm9yRm4gPSBfd3JhcEluVGltZW91dChlcnJvckZuKTtcbiAgICAgICAgICAgIGlmIChuZXh0Rm4pIHtcbiAgICAgICAgICAgICAgICBuZXh0Rm4gPSBfd3JhcEluVGltZW91dChuZXh0Rm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbXBsZXRlRm4pIHtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUZuID0gX3dyYXBJblRpbWVvdXQoY29tcGxldGVGbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2luayA9IHN1cGVyLnN1YnNjcmliZSh7IG5leHQ6IG5leHRGbiwgZXJyb3I6IGVycm9yRm4sIGNvbXBsZXRlOiBjb21wbGV0ZUZuIH0pO1xuICAgICAgICBpZiAob2JzZXJ2ZXJPck5leHQgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG9ic2VydmVyT3JOZXh0LmFkZChzaW5rKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2luaztcbiAgICB9XG59XG5mdW5jdGlvbiBfd3JhcEluVGltZW91dChmbikge1xuICAgIHJldHVybiAodmFsdWUpID0+IHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgdW5kZWZpbmVkLCB2YWx1ZSk7XG4gICAgfTtcbn1cbi8qKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBFdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXJfO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIHN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXN1bHRzW2dldFN5bWJvbEl0ZXJhdG9yKCldKCk7XG59XG4vKipcbiAqIEFuIHVubW9kaWZpYWJsZSBsaXN0IG9mIGl0ZW1zIHRoYXQgQW5ndWxhciBrZWVwcyB1cCB0byBkYXRlIHdoZW4gdGhlIHN0YXRlXG4gKiBvZiB0aGUgYXBwbGljYXRpb24gY2hhbmdlcy5cbiAqXG4gKiBUaGUgdHlwZSBvZiBvYmplY3QgdGhhdCB7QGxpbmsgVmlld0NoaWxkcmVufSwge0BsaW5rIENvbnRlbnRDaGlsZHJlbn0sIGFuZCB7QGxpbmsgUXVlcnlMaXN0fVxuICogcHJvdmlkZS5cbiAqXG4gKiBJbXBsZW1lbnRzIGFuIGl0ZXJhYmxlIGludGVyZmFjZSwgdGhlcmVmb3JlIGl0IGNhbiBiZSB1c2VkIGluIGJvdGggRVM2XG4gKiBqYXZhc2NyaXB0IGBmb3IgKHZhciBpIG9mIGl0ZW1zKWAgbG9vcHMgYXMgd2VsbCBhcyBpbiBBbmd1bGFyIHRlbXBsYXRlcyB3aXRoXG4gKiBgKm5nRm9yPVwibGV0IGkgb2YgbXlMaXN0XCJgLlxuICpcbiAqIENoYW5nZXMgY2FuIGJlIG9ic2VydmVkIGJ5IHN1YnNjcmliaW5nIHRvIHRoZSBjaGFuZ2VzIGBPYnNlcnZhYmxlYC5cbiAqXG4gKiBOT1RFOiBJbiB0aGUgZnV0dXJlIHRoaXMgY2xhc3Mgd2lsbCBpbXBsZW1lbnQgYW4gYE9ic2VydmFibGVgIGludGVyZmFjZS5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIEBDb21wb25lbnQoey4uLn0pXG4gKiBjbGFzcyBDb250YWluZXIge1xuICogICBAVmlld0NoaWxkcmVuKEl0ZW0pIGl0ZW1zOlF1ZXJ5TGlzdDxJdGVtPjtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgUXVlcnlMaXN0IHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZW1pdERpc3RpbmN0Q2hhbmdlc09ubHkgV2hldGhlciBgUXVlcnlMaXN0LmNoYW5nZXNgIHNob3VsZCBmaXJlIG9ubHkgd2hlbiBhY3R1YWwgY2hhbmdlXG4gICAgICogICAgIGhhcyBvY2N1cnJlZC4gT3IgaWYgaXQgc2hvdWxkIGZpcmUgd2hlbiBxdWVyeSBpcyByZWNvbXB1dGVkLiAocmVjb21wdXRpbmcgY291bGQgcmVzb2x2ZSBpblxuICAgICAqICAgICB0aGUgc2FtZSByZXN1bHQpXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoX2VtaXREaXN0aW5jdENoYW5nZXNPbmx5ID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5fZW1pdERpc3RpbmN0Q2hhbmdlc09ubHkgPSBfZW1pdERpc3RpbmN0Q2hhbmdlc09ubHk7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZXN1bHRzID0gW107XG4gICAgICAgIHRoaXMuX2NoYW5nZXNEZXRlY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jaGFuZ2VzID0gbnVsbDtcbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLmZpcnN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGRlY2xhcmVkIG9uIHRoZSBwcm90b3R5cGUsIGJ1dCBkb2luZyBzbyB0aGVyZSB3aWxsIGNhdXNlIHRoZSBjbGFzc1xuICAgICAgICAvLyBkZWNsYXJhdGlvbiB0byBoYXZlIHNpZGUtZWZmZWN0cyBhbmQgYmVjb21lIG5vdCB0cmVlLXNoYWthYmxlLiBGb3IgdGhpcyByZWFzb24gd2UgZG8gaXQgaW5cbiAgICAgICAgLy8gdGhlIGNvbnN0cnVjdG9yLlxuICAgICAgICAvLyBbZ2V0U3ltYm9sSXRlcmF0b3IoKV0oKTogSXRlcmF0b3I8VD4geyAuLi4gfVxuICAgICAgICBjb25zdCBzeW1ib2wgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuICAgICAgICBjb25zdCBwcm90byA9IFF1ZXJ5TGlzdC5wcm90b3R5cGU7XG4gICAgICAgIGlmICghcHJvdG9bc3ltYm9sXSlcbiAgICAgICAgICAgIHByb3RvW3N5bWJvbF0gPSBzeW1ib2xJdGVyYXRvcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgT2JzZXJ2YWJsZWAgb2YgYFF1ZXJ5TGlzdGAgbm90aWZ5aW5nIHRoZSBzdWJzY3JpYmVyIG9mIGNoYW5nZXMuXG4gICAgICovXG4gICAgZ2V0IGNoYW5nZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFuZ2VzIHx8ICh0aGlzLl9jaGFuZ2VzID0gbmV3IEV2ZW50RW1pdHRlcigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgUXVlcnlMaXN0IGVudHJ5IGF0IGBpbmRleGAuXG4gICAgICovXG4gICAgZ2V0KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHRzW2luZGV4XTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VlXG4gICAgICogW0FycmF5Lm1hcF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvbWFwKVxuICAgICAqL1xuICAgIG1hcChmbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0cy5tYXAoZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkuZmlsdGVyXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maWx0ZXIpXG4gICAgICovXG4gICAgZmlsdGVyKGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHRzLmZpbHRlcihmbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5maW5kXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9maW5kKVxuICAgICAqL1xuICAgIGZpbmQoZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMuZmluZChmbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlZVxuICAgICAqIFtBcnJheS5yZWR1Y2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3JlZHVjZSlcbiAgICAgKi9cbiAgICByZWR1Y2UoZm4sIGluaXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3VsdHMucmVkdWNlKGZuLCBpbml0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VlXG4gICAgICogW0FycmF5LmZvckVhY2hdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2ZvckVhY2gpXG4gICAgICovXG4gICAgZm9yRWFjaChmbikge1xuICAgICAgICB0aGlzLl9yZXN1bHRzLmZvckVhY2goZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWVcbiAgICAgKiBbQXJyYXkuc29tZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvc29tZSlcbiAgICAgKi9cbiAgICBzb21lKGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHRzLnNvbWUoZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgcmVzdWx0cyBsaXN0IGFzIGFuIEFycmF5LlxuICAgICAqL1xuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXN1bHRzLnNsaWNlKCk7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVzdWx0cy50b1N0cmluZygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBzdG9yZWQgZGF0YSBvZiB0aGUgcXVlcnkgbGlzdCwgYW5kIHJlc2V0cyB0aGUgYGRpcnR5YCBmbGFnIHRvIGBmYWxzZWAsIHNvIHRoYXRcbiAgICAgKiBvbiBjaGFuZ2UgZGV0ZWN0aW9uLCBpdCB3aWxsIG5vdCBub3RpZnkgb2YgY2hhbmdlcyB0byB0aGUgcXVlcmllcywgdW5sZXNzIGEgbmV3IGNoYW5nZVxuICAgICAqIG9jY3Vycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZXN1bHRzVHJlZSBUaGUgcXVlcnkgcmVzdWx0cyB0byBzdG9yZVxuICAgICAqIEBwYXJhbSBpZGVudGl0eUFjY2Vzc29yIE9wdGlvbmFsIGZ1bmN0aW9uIGZvciBleHRyYWN0aW5nIHN0YWJsZSBvYmplY3QgaWRlbnRpdHkgZnJvbSBhIHZhbHVlXG4gICAgICogICAgaW4gdGhlIGFycmF5LiBUaGlzIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGZvciBlYWNoIGVsZW1lbnQgb2YgdGhlIHF1ZXJ5IHJlc3VsdCBsaXN0IHdoaWxlXG4gICAgICogICAgY29tcGFyaW5nIGN1cnJlbnQgcXVlcnkgbGlzdCB3aXRoIHRoZSBuZXcgb25lIChwcm92aWRlZCBhcyBhIGZpcnN0IGFyZ3VtZW50IG9mIHRoZSBgcmVzZXRgXG4gICAgICogICAgZnVuY3Rpb24pIHRvIGRldGVjdCBpZiB0aGUgbGlzdHMgYXJlIGRpZmZlcmVudC4gSWYgdGhlIGZ1bmN0aW9uIGlzIG5vdCBwcm92aWRlZCwgZWxlbWVudHNcbiAgICAgKiAgICBhcmUgY29tcGFyZWQgYXMgaXMgKHdpdGhvdXQgYW55IHByZS1wcm9jZXNzaW5nKS5cbiAgICAgKi9cbiAgICByZXNldChyZXN1bHRzVHJlZSwgaWRlbnRpdHlBY2Nlc3Nvcikge1xuICAgICAgICAvLyBDYXN0IHRvIGBRdWVyeUxpc3RJbnRlcm5hbGAgc28gdGhhdCB3ZSBjYW4gbXV0YXRlIGZpZWxkcyB3aGljaCBhcmUgcmVhZG9ubHkgZm9yIHRoZSB1c2FnZSBvZlxuICAgICAgICAvLyBRdWVyeUxpc3QgKGJ1dCBub3QgZm9yIFF1ZXJ5TGlzdCBpdHNlbGYuKVxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgc2VsZi5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICBjb25zdCBuZXdSZXN1bHRGbGF0ID0gZmxhdHRlbihyZXN1bHRzVHJlZSk7XG4gICAgICAgIGlmICh0aGlzLl9jaGFuZ2VzRGV0ZWN0ZWQgPSAhYXJyYXlFcXVhbHMoc2VsZi5fcmVzdWx0cywgbmV3UmVzdWx0RmxhdCwgaWRlbnRpdHlBY2Nlc3NvcikpIHtcbiAgICAgICAgICAgIHNlbGYuX3Jlc3VsdHMgPSBuZXdSZXN1bHRGbGF0O1xuICAgICAgICAgICAgc2VsZi5sZW5ndGggPSBuZXdSZXN1bHRGbGF0Lmxlbmd0aDtcbiAgICAgICAgICAgIHNlbGYubGFzdCA9IG5ld1Jlc3VsdEZsYXRbdGhpcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHNlbGYuZmlyc3QgPSBuZXdSZXN1bHRGbGF0WzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIGEgY2hhbmdlIGV2ZW50IGJ5IGVtaXR0aW5nIG9uIHRoZSBgY2hhbmdlc2Age0BsaW5rIEV2ZW50RW1pdHRlcn0uXG4gICAgICovXG4gICAgbm90aWZ5T25DaGFuZ2VzKCkge1xuICAgICAgICBpZiAodGhpcy5fY2hhbmdlcyAmJiAodGhpcy5fY2hhbmdlc0RldGVjdGVkIHx8ICF0aGlzLl9lbWl0RGlzdGluY3RDaGFuZ2VzT25seSkpXG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VzLmVtaXQodGhpcyk7XG4gICAgfVxuICAgIC8qKiBpbnRlcm5hbCAqL1xuICAgIHNldERpcnR5KCkge1xuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB9XG4gICAgLyoqIGludGVybmFsICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VzLmNvbXBsZXRlKCk7XG4gICAgICAgIHRoaXMuY2hhbmdlcy51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cblN5bWJvbC5pdGVyYXRvcjtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFJlcHJlc2VudHMgYW4gZW1iZWRkZWQgdGVtcGxhdGUgdGhhdCBjYW4gYmUgdXNlZCB0byBpbnN0YW50aWF0ZSBlbWJlZGRlZCB2aWV3cy5cbiAqIFRvIGluc3RhbnRpYXRlIGVtYmVkZGVkIHZpZXdzIGJhc2VkIG9uIGEgdGVtcGxhdGUsIHVzZSB0aGUgYFZpZXdDb250YWluZXJSZWZgXG4gKiBtZXRob2QgYGNyZWF0ZUVtYmVkZGVkVmlldygpYC5cbiAqXG4gKiBBY2Nlc3MgYSBgVGVtcGxhdGVSZWZgIGluc3RhbmNlIGJ5IHBsYWNpbmcgYSBkaXJlY3RpdmUgb24gYW4gYDxuZy10ZW1wbGF0ZT5gXG4gKiBlbGVtZW50IChvciBkaXJlY3RpdmUgcHJlZml4ZWQgd2l0aCBgKmApLiBUaGUgYFRlbXBsYXRlUmVmYCBmb3IgdGhlIGVtYmVkZGVkIHZpZXdcbiAqIGlzIGluamVjdGVkIGludG8gdGhlIGNvbnN0cnVjdG9yIG9mIHRoZSBkaXJlY3RpdmUsXG4gKiB1c2luZyB0aGUgYFRlbXBsYXRlUmVmYCB0b2tlbi5cbiAqXG4gKiBZb3UgY2FuIGFsc28gdXNlIGEgYFF1ZXJ5YCB0byBmaW5kIGEgYFRlbXBsYXRlUmVmYCBhc3NvY2lhdGVkIHdpdGhcbiAqIGEgY29tcG9uZW50IG9yIGEgZGlyZWN0aXZlLlxuICpcbiAqIEBzZWUgYFZpZXdDb250YWluZXJSZWZgXG4gKiBAc2VlIFtOYXZpZ2F0ZSB0aGUgQ29tcG9uZW50IFRyZWUgd2l0aCBESV0oZ3VpZGUvZGVwZW5kZW5jeS1pbmplY3Rpb24tbmF2dHJlZSlcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIFRlbXBsYXRlUmVmIHtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKiBAbm9jb2xsYXBzZVxuICovXG5UZW1wbGF0ZVJlZi5fX05HX0VMRU1FTlRfSURfXyA9IGluamVjdFRlbXBsYXRlUmVmO1xuY29uc3QgVmlld0VuZ2luZVRlbXBsYXRlUmVmID0gVGVtcGxhdGVSZWY7XG4vLyBUT0RPKGFseGh1Yik6IGNvbWJpbmUgaW50ZXJmYWNlIGFuZCBpbXBsZW1lbnRhdGlvbi4gQ3VycmVudGx5IHRoaXMgaXMgY2hhbGxlbmdpbmcgc2luY2Ugc29tZXRoaW5nXG4vLyBpbiBnMyBkZXBlbmRzIG9uIHRoZW0gYmVpbmcgc2VwYXJhdGUuXG5jb25zdCBSM1RlbXBsYXRlUmVmID0gY2xhc3MgVGVtcGxhdGVSZWYgZXh0ZW5kcyBWaWV3RW5naW5lVGVtcGxhdGVSZWYge1xuICAgIGNvbnN0cnVjdG9yKF9kZWNsYXJhdGlvbkxWaWV3LCBfZGVjbGFyYXRpb25UQ29udGFpbmVyLCBlbGVtZW50UmVmKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX2RlY2xhcmF0aW9uTFZpZXcgPSBfZGVjbGFyYXRpb25MVmlldztcbiAgICAgICAgdGhpcy5fZGVjbGFyYXRpb25UQ29udGFpbmVyID0gX2RlY2xhcmF0aW9uVENvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5lbGVtZW50UmVmID0gZWxlbWVudFJlZjtcbiAgICB9XG4gICAgY3JlYXRlRW1iZWRkZWRWaWV3KGNvbnRleHQpIHtcbiAgICAgICAgY29uc3QgZW1iZWRkZWRUVmlldyA9IHRoaXMuX2RlY2xhcmF0aW9uVENvbnRhaW5lci50Vmlld3M7XG4gICAgICAgIGNvbnN0IGVtYmVkZGVkTFZpZXcgPSBjcmVhdGVMVmlldyh0aGlzLl9kZWNsYXJhdGlvbkxWaWV3LCBlbWJlZGRlZFRWaWV3LCBjb250ZXh0LCAxNiAvKiBDaGVja0Fsd2F5cyAqLywgbnVsbCwgZW1iZWRkZWRUVmlldy5kZWNsVE5vZGUsIG51bGwsIG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgICBjb25zdCBkZWNsYXJhdGlvbkxDb250YWluZXIgPSB0aGlzLl9kZWNsYXJhdGlvbkxWaWV3W3RoaXMuX2RlY2xhcmF0aW9uVENvbnRhaW5lci5pbmRleF07XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRMQ29udGFpbmVyKGRlY2xhcmF0aW9uTENvbnRhaW5lcik7XG4gICAgICAgIGVtYmVkZGVkTFZpZXdbREVDTEFSQVRJT05fTENPTlRBSU5FUl0gPSBkZWNsYXJhdGlvbkxDb250YWluZXI7XG4gICAgICAgIGNvbnN0IGRlY2xhcmF0aW9uVmlld0xRdWVyaWVzID0gdGhpcy5fZGVjbGFyYXRpb25MVmlld1tRVUVSSUVTXTtcbiAgICAgICAgaWYgKGRlY2xhcmF0aW9uVmlld0xRdWVyaWVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBlbWJlZGRlZExWaWV3W1FVRVJJRVNdID0gZGVjbGFyYXRpb25WaWV3TFF1ZXJpZXMuY3JlYXRlRW1iZWRkZWRWaWV3KGVtYmVkZGVkVFZpZXcpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlclZpZXcoZW1iZWRkZWRUVmlldywgZW1iZWRkZWRMVmlldywgY29udGV4dCk7XG4gICAgICAgIHJldHVybiBuZXcgVmlld1JlZiQxKGVtYmVkZGVkTFZpZXcpO1xuICAgIH1cbn07XG4vKipcbiAqIENyZWF0ZXMgYSBUZW1wbGF0ZVJlZiBnaXZlbiBhIG5vZGUuXG4gKlxuICogQHJldHVybnMgVGhlIFRlbXBsYXRlUmVmIGluc3RhbmNlIHRvIHVzZVxuICovXG5mdW5jdGlvbiBpbmplY3RUZW1wbGF0ZVJlZigpIHtcbiAgICByZXR1cm4gY3JlYXRlVGVtcGxhdGVSZWYoZ2V0Q3VycmVudFROb2RlKCksIGdldExWaWV3KCkpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgVGVtcGxhdGVSZWYgYW5kIHN0b3JlcyBpdCBvbiB0aGUgaW5qZWN0b3IuXG4gKlxuICogQHBhcmFtIGhvc3RUTm9kZSBUaGUgbm9kZSBvbiB3aGljaCBhIFRlbXBsYXRlUmVmIGlzIHJlcXVlc3RlZFxuICogQHBhcmFtIGhvc3RMVmlldyBUaGUgYExWaWV3YCB0byB3aGljaCB0aGUgbm9kZSBiZWxvbmdzXG4gKiBAcmV0dXJucyBUaGUgVGVtcGxhdGVSZWYgaW5zdGFuY2Ugb3IgbnVsbCBpZiB3ZSBjYW4ndCBjcmVhdGUgYSBUZW1wbGF0ZVJlZiBvbiBhIGdpdmVuIG5vZGUgdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVUZW1wbGF0ZVJlZihob3N0VE5vZGUsIGhvc3RMVmlldykge1xuICAgIGlmIChob3N0VE5vZGUudHlwZSAmIDQgLyogQ29udGFpbmVyICovKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKGhvc3RUTm9kZS50Vmlld3MsICdUVmlldyBtdXN0IGJlIGFsbG9jYXRlZCcpO1xuICAgICAgICByZXR1cm4gbmV3IFIzVGVtcGxhdGVSZWYoaG9zdExWaWV3LCBob3N0VE5vZGUsIGNyZWF0ZUVsZW1lbnRSZWYoaG9zdFROb2RlLCBob3N0TFZpZXcpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY29udGFpbmVyIHdoZXJlIG9uZSBvciBtb3JlIHZpZXdzIGNhbiBiZSBhdHRhY2hlZCB0byBhIGNvbXBvbmVudC5cbiAqXG4gKiBDYW4gY29udGFpbiAqaG9zdCB2aWV3cyogKGNyZWF0ZWQgYnkgaW5zdGFudGlhdGluZyBhXG4gKiBjb21wb25lbnQgd2l0aCB0aGUgYGNyZWF0ZUNvbXBvbmVudCgpYCBtZXRob2QpLCBhbmQgKmVtYmVkZGVkIHZpZXdzKlxuICogKGNyZWF0ZWQgYnkgaW5zdGFudGlhdGluZyBhIGBUZW1wbGF0ZVJlZmAgd2l0aCB0aGUgYGNyZWF0ZUVtYmVkZGVkVmlldygpYCBtZXRob2QpLlxuICpcbiAqIEEgdmlldyBjb250YWluZXIgaW5zdGFuY2UgY2FuIGNvbnRhaW4gb3RoZXIgdmlldyBjb250YWluZXJzLFxuICogY3JlYXRpbmcgYSBbdmlldyBoaWVyYXJjaHldKGd1aWRlL2dsb3NzYXJ5I3ZpZXctdHJlZSkuXG4gKlxuICogQHNlZSBgQ29tcG9uZW50UmVmYFxuICogQHNlZSBgRW1iZWRkZWRWaWV3UmVmYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgVmlld0NvbnRhaW5lclJlZiB7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQG5vY29sbGFwc2VcbiAqL1xuVmlld0NvbnRhaW5lclJlZi5fX05HX0VMRU1FTlRfSURfXyA9IGluamVjdFZpZXdDb250YWluZXJSZWY7XG4vKipcbiAqIENyZWF0ZXMgYSBWaWV3Q29udGFpbmVyUmVmIGFuZCBzdG9yZXMgaXQgb24gdGhlIGluamVjdG9yLiBPciwgaWYgdGhlIFZpZXdDb250YWluZXJSZWZcbiAqIGFscmVhZHkgZXhpc3RzLCByZXRyaWV2ZXMgdGhlIGV4aXN0aW5nIFZpZXdDb250YWluZXJSZWYuXG4gKlxuICogQHJldHVybnMgVGhlIFZpZXdDb250YWluZXJSZWYgaW5zdGFuY2UgdG8gdXNlXG4gKi9cbmZ1bmN0aW9uIGluamVjdFZpZXdDb250YWluZXJSZWYoKSB7XG4gICAgY29uc3QgcHJldmlvdXNUTm9kZSA9IGdldEN1cnJlbnRUTm9kZSgpO1xuICAgIHJldHVybiBjcmVhdGVDb250YWluZXJSZWYocHJldmlvdXNUTm9kZSwgZ2V0TFZpZXcoKSk7XG59XG5jb25zdCBWRV9WaWV3Q29udGFpbmVyUmVmID0gVmlld0NvbnRhaW5lclJlZjtcbi8vIFRPRE8oYWx4aHViKTogY2xlYW5pbmcgdXAgdGhpcyBpbmRpcmVjdGlvbiB0cmlnZ2VycyBhIHN1YnRsZSBidWcgaW4gQ2xvc3VyZSBpbiBnMy4gT25jZSB0aGUgZml4XG4vLyBmb3IgdGhhdCBsYW5kcywgdGhpcyBjYW4gYmUgY2xlYW5lZCB1cC5cbmNvbnN0IFIzVmlld0NvbnRhaW5lclJlZiA9IGNsYXNzIFZpZXdDb250YWluZXJSZWYgZXh0ZW5kcyBWRV9WaWV3Q29udGFpbmVyUmVmIHtcbiAgICBjb25zdHJ1Y3RvcihfbENvbnRhaW5lciwgX2hvc3RUTm9kZSwgX2hvc3RMVmlldykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9sQ29udGFpbmVyID0gX2xDb250YWluZXI7XG4gICAgICAgIHRoaXMuX2hvc3RUTm9kZSA9IF9ob3N0VE5vZGU7XG4gICAgICAgIHRoaXMuX2hvc3RMVmlldyA9IF9ob3N0TFZpZXc7XG4gICAgfVxuICAgIGdldCBlbGVtZW50KCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRWxlbWVudFJlZih0aGlzLl9ob3N0VE5vZGUsIHRoaXMuX2hvc3RMVmlldyk7XG4gICAgfVxuICAgIGdldCBpbmplY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBOb2RlSW5qZWN0b3IodGhpcy5faG9zdFROb2RlLCB0aGlzLl9ob3N0TFZpZXcpO1xuICAgIH1cbiAgICAvKiogQGRlcHJlY2F0ZWQgTm8gcmVwbGFjZW1lbnQgKi9cbiAgICBnZXQgcGFyZW50SW5qZWN0b3IoKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudExvY2F0aW9uID0gZ2V0UGFyZW50SW5qZWN0b3JMb2NhdGlvbih0aGlzLl9ob3N0VE5vZGUsIHRoaXMuX2hvc3RMVmlldyk7XG4gICAgICAgIGlmIChoYXNQYXJlbnRJbmplY3RvcihwYXJlbnRMb2NhdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudFZpZXcgPSBnZXRQYXJlbnRJbmplY3RvclZpZXcocGFyZW50TG9jYXRpb24sIHRoaXMuX2hvc3RMVmlldyk7XG4gICAgICAgICAgICBjb25zdCBpbmplY3RvckluZGV4ID0gZ2V0UGFyZW50SW5qZWN0b3JJbmRleChwYXJlbnRMb2NhdGlvbik7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0Tm9kZUluamVjdG9yKHBhcmVudFZpZXcsIGluamVjdG9ySW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50VE5vZGUgPSBwYXJlbnRWaWV3W1RWSUVXXS5kYXRhW2luamVjdG9ySW5kZXggKyA4IC8qIFROT0RFICovXTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZUluamVjdG9yKHBhcmVudFROb2RlLCBwYXJlbnRWaWV3KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZUluamVjdG9yKG51bGwsIHRoaXMuX2hvc3RMVmlldyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRoaXMubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHZpZXdSZWZzID0gZ2V0Vmlld1JlZnModGhpcy5fbENvbnRhaW5lcik7XG4gICAgICAgIHJldHVybiB2aWV3UmVmcyAhPT0gbnVsbCAmJiB2aWV3UmVmc1tpbmRleF0gfHwgbnVsbDtcbiAgICB9XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xDb250YWluZXIubGVuZ3RoIC0gQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQ7XG4gICAgfVxuICAgIGNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZVJlZiwgY29udGV4dCwgaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgdmlld1JlZiA9IHRlbXBsYXRlUmVmLmNyZWF0ZUVtYmVkZGVkVmlldyhjb250ZXh0IHx8IHt9KTtcbiAgICAgICAgdGhpcy5pbnNlcnQodmlld1JlZiwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gdmlld1JlZjtcbiAgICB9XG4gICAgY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnlPclR5cGUsIGluZGV4T3JPcHRpb25zLCBpbmplY3RvciwgcHJvamVjdGFibGVOb2RlcywgbmdNb2R1bGVSZWYpIHtcbiAgICAgICAgY29uc3QgaXNDb21wb25lbnRGYWN0b3J5ID0gY29tcG9uZW50RmFjdG9yeU9yVHlwZSAmJiAhaXNUeXBlKGNvbXBvbmVudEZhY3RvcnlPclR5cGUpO1xuICAgICAgICBsZXQgaW5kZXg7XG4gICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gc3VwcG9ydHMgMiBzaWduYXR1cmVzIGFuZCB3ZSBuZWVkIHRvIGhhbmRsZSBvcHRpb25zIGNvcnJlY3RseSBmb3IgYm90aDpcbiAgICAgICAgLy8gICAxLiBXaGVuIGZpcnN0IGFyZ3VtZW50IGlzIGEgQ29tcG9uZW50IHR5cGUuIFRoaXMgc2lnbmF0dXJlIGFsc28gcmVxdWlyZXMgZXh0cmFcbiAgICAgICAgLy8gICAgICBvcHRpb25zIHRvIGJlIHByb3ZpZGVkIGFzIGFzIG9iamVjdCAobW9yZSBlcmdvbm9taWMgb3B0aW9uKS5cbiAgICAgICAgLy8gICAyLiBGaXJzdCBhcmd1bWVudCBpcyBhIENvbXBvbmVudCBmYWN0b3J5LiBJbiB0aGlzIGNhc2UgZXh0cmEgb3B0aW9ucyBhcmUgcmVwcmVzZW50ZWQgYXNcbiAgICAgICAgLy8gICAgICBwb3NpdGlvbmFsIGFyZ3VtZW50cy4gVGhpcyBzaWduYXR1cmUgaXMgbGVzcyBlcmdvbm9taWMgYW5kIHdpbGwgYmUgZGVwcmVjYXRlZC5cbiAgICAgICAgaWYgKGlzQ29tcG9uZW50RmFjdG9yeSkge1xuICAgICAgICAgICAgaWYgKG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgICAgIGFzc2VydEVxdWFsKHR5cGVvZiBpbmRleE9yT3B0aW9ucyAhPT0gJ29iamVjdCcsIHRydWUsICdJdCBsb29rcyBsaWtlIENvbXBvbmVudCBmYWN0b3J5IHdhcyBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgJyArXG4gICAgICAgICAgICAgICAgICAgICdhbmQgYW4gb3B0aW9ucyBvYmplY3QgYXMgdGhlIHNlY29uZCBhcmd1bWVudC4gVGhpcyBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgJyArXG4gICAgICAgICAgICAgICAgICAgICdpcyBpbmNvbXBhdGlibGUuIFlvdSBjYW4gZWl0aGVyIGNoYW5nZSB0aGUgZmlyc3QgYXJndW1lbnQgdG8gcHJvdmlkZSBDb21wb25lbnQgJyArXG4gICAgICAgICAgICAgICAgICAgICd0eXBlIG9yIGNoYW5nZSB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyIChyZXByZXNlbnRpbmcgYW4gaW5kZXggYXQgJyArXG4gICAgICAgICAgICAgICAgICAgICd3aGljaCB0byBpbnNlcnQgdGhlIG5ldyBjb21wb25lbnRcXCdzIGhvc3QgdmlldyBpbnRvIHRoaXMgY29udGFpbmVyKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggPSBpbmRleE9yT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnREZWZpbmVkKGdldENvbXBvbmVudERlZihjb21wb25lbnRGYWN0b3J5T3JUeXBlKSwgYFByb3ZpZGVkIENvbXBvbmVudCBjbGFzcyBkb2Vzbid0IGNvbnRhaW4gQ29tcG9uZW50IGRlZmluaXRpb24uIGAgK1xuICAgICAgICAgICAgICAgICAgICBgUGxlYXNlIGNoZWNrIHdoZXRoZXIgcHJvdmlkZWQgY2xhc3MgaGFzIEBDb21wb25lbnQgZGVjb3JhdG9yLmApO1xuICAgICAgICAgICAgICAgIGFzc2VydEVxdWFsKHR5cGVvZiBpbmRleE9yT3B0aW9ucyAhPT0gJ251bWJlcicsIHRydWUsICdJdCBsb29rcyBsaWtlIENvbXBvbmVudCB0eXBlIHdhcyBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgJyArXG4gICAgICAgICAgICAgICAgICAgICdhbmQgYSBudW1iZXIgKHJlcHJlc2VudGluZyBhbiBpbmRleCBhdCB3aGljaCB0byBpbnNlcnQgdGhlIG5ldyBjb21wb25lbnRcXCdzICcgK1xuICAgICAgICAgICAgICAgICAgICAnaG9zdCB2aWV3IGludG8gdGhpcyBjb250YWluZXIgYXMgdGhlIHNlY29uZCBhcmd1bWVudC4gVGhpcyBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgJyArXG4gICAgICAgICAgICAgICAgICAgICdpcyBpbmNvbXBhdGlibGUuIFBsZWFzZSB1c2UgYW4gb2JqZWN0IGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgaW5zdGVhZC4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSAoaW5kZXhPck9wdGlvbnMgfHwge30pO1xuICAgICAgICAgICAgaW5kZXggPSBvcHRpb25zLmluZGV4O1xuICAgICAgICAgICAgaW5qZWN0b3IgPSBvcHRpb25zLmluamVjdG9yO1xuICAgICAgICAgICAgcHJvamVjdGFibGVOb2RlcyA9IG9wdGlvbnMucHJvamVjdGFibGVOb2RlcztcbiAgICAgICAgICAgIG5nTW9kdWxlUmVmID0gb3B0aW9ucy5uZ01vZHVsZVJlZjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb21wb25lbnRGYWN0b3J5ID0gaXNDb21wb25lbnRGYWN0b3J5ID9cbiAgICAgICAgICAgIGNvbXBvbmVudEZhY3RvcnlPclR5cGUgOlxuICAgICAgICAgICAgbmV3IENvbXBvbmVudEZhY3RvcnkoZ2V0Q29tcG9uZW50RGVmKGNvbXBvbmVudEZhY3RvcnlPclR5cGUpKTtcbiAgICAgICAgY29uc3QgY29udGV4dEluamVjdG9yID0gaW5qZWN0b3IgfHwgdGhpcy5wYXJlbnRJbmplY3RvcjtcbiAgICAgICAgLy8gSWYgYW4gYE5nTW9kdWxlUmVmYCBpcyBub3QgcHJvdmlkZWQgZXhwbGljaXRseSwgdHJ5IHJldHJpZXZpbmcgaXQgZnJvbSB0aGUgREkgdHJlZS5cbiAgICAgICAgaWYgKCFuZ01vZHVsZVJlZiAmJiBjb21wb25lbnRGYWN0b3J5Lm5nTW9kdWxlID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZvciB0aGUgYENvbXBvbmVudEZhY3RvcnlgIGNhc2UsIGVudGVyaW5nIHRoaXMgbG9naWMgaXMgdmVyeSB1bmxpa2VseSwgc2luY2Ugd2UgZXhwZWN0IHRoYXRcbiAgICAgICAgICAgIC8vIGFuIGluc3RhbmNlIG9mIGEgYENvbXBvbmVudEZhY3RvcnlgLCByZXNvbHZlZCB2aWEgYENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcmAgd291bGQgaGF2ZSBhblxuICAgICAgICAgICAgLy8gYG5nTW9kdWxlYCBmaWVsZC4gVGhpcyBpcyBwb3NzaWJsZSBpbiBzb21lIHRlc3Qgc2NlbmFyaW9zIGFuZCBwb3RlbnRpYWxseSBpbiBzb21lIEpJVC1iYXNlZFxuICAgICAgICAgICAgLy8gdXNlLWNhc2VzLiBGb3IgdGhlIGBDb21wb25lbnRGYWN0b3J5YCBjYXNlIHdlIHByZXNlcnZlIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGFuZCB0cnlcbiAgICAgICAgICAgIC8vIHVzaW5nIGEgcHJvdmlkZWQgaW5qZWN0b3IgZmlyc3QsIHRoZW4gZmFsbCBiYWNrIHRvIHRoZSBwYXJlbnQgaW5qZWN0b3Igb2YgdGhpc1xuICAgICAgICAgICAgLy8gYFZpZXdDb250YWluZXJSZWZgIGluc3RhbmNlLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIEZvciB0aGUgZmFjdG9yeS1sZXNzIGNhc2UsIGl0J3MgY3JpdGljYWwgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB3aXRoIHRoZSBtb2R1bGVcbiAgICAgICAgICAgIC8vIGluamVjdG9yIHRyZWUgKGJ5IHJldHJpZXZpbmcgYW4gaW5zdGFuY2Ugb2YgYW4gYE5nTW9kdWxlUmVmYCBhbmQgYWNjZXNzaW5nIGl0cyBpbmplY3RvciksXG4gICAgICAgICAgICAvLyBzbyB0aGF0IGEgY29tcG9uZW50IGNhbiB1c2UgREkgdG9rZW5zIHByb3ZpZGVkIGluIE1nTW9kdWxlcy4gRm9yIHRoaXMgcmVhc29uLCB3ZSBjYW4gbm90XG4gICAgICAgICAgICAvLyByZWx5IG9uIHRoZSBwcm92aWRlZCBpbmplY3Rvciwgc2luY2UgaXQgbWlnaHQgYmUgZGV0YWNoZWQgZnJvbSB0aGUgREkgdHJlZSAoZm9yIGV4YW1wbGUsIGlmXG4gICAgICAgICAgICAvLyBpdCB3YXMgY3JlYXRlZCB2aWEgYEluamVjdG9yLmNyZWF0ZWAgd2l0aG91dCBzcGVjaWZ5aW5nIGEgcGFyZW50IGluamVjdG9yLCBvciBpZiBhblxuICAgICAgICAgICAgLy8gaW5qZWN0b3IgaXMgcmV0cmlldmVkIGZyb20gYW4gYE5nTW9kdWxlUmVmYCBjcmVhdGVkIHZpYSBgY3JlYXRlTmdNb2R1bGVSZWZgIHVzaW5nIGFuXG4gICAgICAgICAgICAvLyBOZ01vZHVsZSBvdXRzaWRlIG9mIGEgbW9kdWxlIHRyZWUpLiBJbnN0ZWFkLCB3ZSBhbHdheXMgdXNlIGBWaWV3Q29udGFpbmVyUmVmYCdzIHBhcmVudFxuICAgICAgICAgICAgLy8gaW5qZWN0b3IsIHdoaWNoIGlzIG5vcm1hbGx5IGNvbm5lY3RlZCB0byB0aGUgREkgdHJlZSwgd2hpY2ggaW5jbHVkZXMgbW9kdWxlIGluamVjdG9yXG4gICAgICAgICAgICAvLyBzdWJ0cmVlLlxuICAgICAgICAgICAgY29uc3QgX2luamVjdG9yID0gaXNDb21wb25lbnRGYWN0b3J5ID8gY29udGV4dEluamVjdG9yIDogdGhpcy5wYXJlbnRJbmplY3RvcjtcbiAgICAgICAgICAgIC8vIERPIE5PVCBSRUZBQ1RPUi4gVGhlIGNvZGUgaGVyZSB1c2VkIHRvIGhhdmUgYSBgaW5qZWN0b3IuZ2V0KE5nTW9kdWxlUmVmLCBudWxsKSB8fFxuICAgICAgICAgICAgLy8gdW5kZWZpbmVkYCBleHByZXNzaW9uIHdoaWNoIHNlZW1zIHRvIGNhdXNlIGludGVybmFsIGdvb2dsZSBhcHBzIHRvIGZhaWwuIFRoaXMgaXMgZG9jdW1lbnRlZFxuICAgICAgICAgICAgLy8gaW4gdGhlIGZvbGxvd2luZyBpbnRlcm5hbCBidWcgaXNzdWU6IGdvL2IvMTQyOTY3ODAyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBfaW5qZWN0b3IuZ2V0KE5nTW9kdWxlUmVmJDEsIG51bGwpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIG5nTW9kdWxlUmVmID0gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGNvbXBvbmVudEZhY3RvcnkuY3JlYXRlKGNvbnRleHRJbmplY3RvciwgcHJvamVjdGFibGVOb2RlcywgdW5kZWZpbmVkLCBuZ01vZHVsZVJlZik7XG4gICAgICAgIHRoaXMuaW5zZXJ0KGNvbXBvbmVudFJlZi5ob3N0VmlldywgaW5kZXgpO1xuICAgICAgICByZXR1cm4gY29tcG9uZW50UmVmO1xuICAgIH1cbiAgICBpbnNlcnQodmlld1JlZiwgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbFZpZXcgPSB2aWV3UmVmLl9sVmlldztcbiAgICAgICAgY29uc3QgdFZpZXcgPSBsVmlld1tUVklFV107XG4gICAgICAgIGlmIChuZ0Rldk1vZGUgJiYgdmlld1JlZi5kZXN0cm95ZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGluc2VydCBhIGRlc3Ryb3llZCBWaWV3IGluIGEgVmlld0NvbnRhaW5lciEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlld0F0dGFjaGVkVG9Db250YWluZXIobFZpZXcpKSB7XG4gICAgICAgICAgICAvLyBJZiB2aWV3IGlzIGFscmVhZHkgYXR0YWNoZWQsIGRldGFjaCBpdCBmaXJzdCBzbyB3ZSBjbGVhbiB1cCByZWZlcmVuY2VzIGFwcHJvcHJpYXRlbHkuXG4gICAgICAgICAgICBjb25zdCBwcmV2SWR4ID0gdGhpcy5pbmRleE9mKHZpZXdSZWYpO1xuICAgICAgICAgICAgLy8gQSB2aWV3IG1pZ2h0IGJlIGF0dGFjaGVkIGVpdGhlciB0byB0aGlzIG9yIGEgZGlmZmVyZW50IGNvbnRhaW5lci4gVGhlIGBwcmV2SWR4YCBmb3JcbiAgICAgICAgICAgIC8vIHRob3NlIGNhc2VzIHdpbGwgYmU6XG4gICAgICAgICAgICAvLyBlcXVhbCB0byAtMSBmb3Igdmlld3MgYXR0YWNoZWQgdG8gdGhpcyBWaWV3Q29udGFpbmVyUmVmXG4gICAgICAgICAgICAvLyA+PSAwIGZvciB2aWV3cyBhdHRhY2hlZCB0byBhIGRpZmZlcmVudCBWaWV3Q29udGFpbmVyUmVmXG4gICAgICAgICAgICBpZiAocHJldklkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRldGFjaChwcmV2SWR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZMQ29udGFpbmVyID0gbFZpZXdbUEFSRU5UXTtcbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0RXF1YWwoaXNMQ29udGFpbmVyKHByZXZMQ29udGFpbmVyKSwgdHJ1ZSwgJ0FuIGF0dGFjaGVkIHZpZXcgc2hvdWxkIGhhdmUgaXRzIFBBUkVOVCBwb2ludCB0byBhIGNvbnRhaW5lci4nKTtcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHJlLWNyZWF0ZSBhIFIzVmlld0NvbnRhaW5lclJlZiBpbnN0YW5jZSBzaW5jZSB0aG9zZSBhcmUgbm90IHN0b3JlZCBvblxuICAgICAgICAgICAgICAgIC8vIExWaWV3IChub3IgYW55d2hlcmUgZWxzZSkuXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlZDUmVmID0gbmV3IFIzVmlld0NvbnRhaW5lclJlZihwcmV2TENvbnRhaW5lciwgcHJldkxDb250YWluZXJbVF9IT1NUXSwgcHJldkxDb250YWluZXJbUEFSRU5UXSk7XG4gICAgICAgICAgICAgICAgcHJldlZDUmVmLmRldGFjaChwcmV2VkNSZWYuaW5kZXhPZih2aWV3UmVmKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTG9naWNhbCBvcGVyYXRpb24gb2YgYWRkaW5nIGBMVmlld2AgdG8gYExDb250YWluZXJgXG4gICAgICAgIGNvbnN0IGFkanVzdGVkSWR4ID0gdGhpcy5fYWRqdXN0SW5kZXgoaW5kZXgpO1xuICAgICAgICBjb25zdCBsQ29udGFpbmVyID0gdGhpcy5fbENvbnRhaW5lcjtcbiAgICAgICAgaW5zZXJ0Vmlldyh0VmlldywgbFZpZXcsIGxDb250YWluZXIsIGFkanVzdGVkSWR4KTtcbiAgICAgICAgLy8gUGh5c2ljYWwgb3BlcmF0aW9uIG9mIGFkZGluZyB0aGUgRE9NIG5vZGVzLlxuICAgICAgICBjb25zdCBiZWZvcmVOb2RlID0gZ2V0QmVmb3JlTm9kZUZvclZpZXcoYWRqdXN0ZWRJZHgsIGxDb250YWluZXIpO1xuICAgICAgICBjb25zdCByZW5kZXJlciA9IGxWaWV3W1JFTkRFUkVSXTtcbiAgICAgICAgY29uc3QgcGFyZW50Uk5vZGUgPSBuYXRpdmVQYXJlbnROb2RlKHJlbmRlcmVyLCBsQ29udGFpbmVyW05BVElWRV0pO1xuICAgICAgICBpZiAocGFyZW50Uk5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGFkZFZpZXdUb0NvbnRhaW5lcih0VmlldywgbENvbnRhaW5lcltUX0hPU1RdLCByZW5kZXJlciwgbFZpZXcsIHBhcmVudFJOb2RlLCBiZWZvcmVOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICB2aWV3UmVmLmF0dGFjaFRvVmlld0NvbnRhaW5lclJlZigpO1xuICAgICAgICBhZGRUb0FycmF5KGdldE9yQ3JlYXRlVmlld1JlZnMobENvbnRhaW5lciksIGFkanVzdGVkSWR4LCB2aWV3UmVmKTtcbiAgICAgICAgcmV0dXJuIHZpZXdSZWY7XG4gICAgfVxuICAgIG1vdmUodmlld1JlZiwgbmV3SW5kZXgpIHtcbiAgICAgICAgaWYgKG5nRGV2TW9kZSAmJiB2aWV3UmVmLmRlc3Ryb3llZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbW92ZSBhIGRlc3Ryb3llZCBWaWV3IGluIGEgVmlld0NvbnRhaW5lciEnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnQodmlld1JlZiwgbmV3SW5kZXgpO1xuICAgIH1cbiAgICBpbmRleE9mKHZpZXdSZWYpIHtcbiAgICAgICAgY29uc3Qgdmlld1JlZnNBcnIgPSBnZXRWaWV3UmVmcyh0aGlzLl9sQ29udGFpbmVyKTtcbiAgICAgICAgcmV0dXJuIHZpZXdSZWZzQXJyICE9PSBudWxsID8gdmlld1JlZnNBcnIuaW5kZXhPZih2aWV3UmVmKSA6IC0xO1xuICAgIH1cbiAgICByZW1vdmUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgYWRqdXN0ZWRJZHggPSB0aGlzLl9hZGp1c3RJbmRleChpbmRleCwgLTEpO1xuICAgICAgICBjb25zdCBkZXRhY2hlZFZpZXcgPSBkZXRhY2hWaWV3KHRoaXMuX2xDb250YWluZXIsIGFkanVzdGVkSWR4KTtcbiAgICAgICAgaWYgKGRldGFjaGVkVmlldykge1xuICAgICAgICAgICAgLy8gQmVmb3JlIGRlc3Ryb3lpbmcgdGhlIHZpZXcsIHJlbW92ZSBpdCBmcm9tIHRoZSBjb250YWluZXIncyBhcnJheSBvZiBgVmlld1JlZmBzLlxuICAgICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSB2aWV3IGNvbnRhaW5lciBsZW5ndGggaXMgdXBkYXRlZCBiZWZvcmUgY2FsbGluZ1xuICAgICAgICAgICAgLy8gYGRlc3Ryb3lMVmlld2AsIHdoaWNoIGNvdWxkIHJlY3Vyc2l2ZWx5IGNhbGwgdmlldyBjb250YWluZXIgbWV0aG9kcyB0aGF0XG4gICAgICAgICAgICAvLyByZWx5IG9uIGFuIGFjY3VyYXRlIGNvbnRhaW5lciBsZW5ndGguXG4gICAgICAgICAgICAvLyAoZS5nLiBhIG1ldGhvZCBvbiB0aGlzIHZpZXcgY29udGFpbmVyIGJlaW5nIGNhbGxlZCBieSBhIGNoaWxkIGRpcmVjdGl2ZSdzIE9uRGVzdHJveVxuICAgICAgICAgICAgLy8gbGlmZWN5Y2xlIGhvb2spXG4gICAgICAgICAgICByZW1vdmVGcm9tQXJyYXkoZ2V0T3JDcmVhdGVWaWV3UmVmcyh0aGlzLl9sQ29udGFpbmVyKSwgYWRqdXN0ZWRJZHgpO1xuICAgICAgICAgICAgZGVzdHJveUxWaWV3KGRldGFjaGVkVmlld1tUVklFV10sIGRldGFjaGVkVmlldyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGV0YWNoKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGFkanVzdGVkSWR4ID0gdGhpcy5fYWRqdXN0SW5kZXgoaW5kZXgsIC0xKTtcbiAgICAgICAgY29uc3QgdmlldyA9IGRldGFjaFZpZXcodGhpcy5fbENvbnRhaW5lciwgYWRqdXN0ZWRJZHgpO1xuICAgICAgICBjb25zdCB3YXNEZXRhY2hlZCA9IHZpZXcgJiYgcmVtb3ZlRnJvbUFycmF5KGdldE9yQ3JlYXRlVmlld1JlZnModGhpcy5fbENvbnRhaW5lciksIGFkanVzdGVkSWR4KSAhPSBudWxsO1xuICAgICAgICByZXR1cm4gd2FzRGV0YWNoZWQgPyBuZXcgVmlld1JlZiQxKHZpZXcpIDogbnVsbDtcbiAgICB9XG4gICAgX2FkanVzdEluZGV4KGluZGV4LCBzaGlmdCA9IDApIHtcbiAgICAgICAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCArIHNoaWZ0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZ0Rldk1vZGUpIHtcbiAgICAgICAgICAgIGFzc2VydEdyZWF0ZXJUaGFuKGluZGV4LCAtMSwgYFZpZXdSZWYgaW5kZXggbXVzdCBiZSBwb3NpdGl2ZSwgZ290ICR7aW5kZXh9YCk7XG4gICAgICAgICAgICAvLyArMSBiZWNhdXNlIGl0J3MgbGVnYWwgdG8gaW5zZXJ0IGF0IHRoZSBlbmQuXG4gICAgICAgICAgICBhc3NlcnRMZXNzVGhhbihpbmRleCwgdGhpcy5sZW5ndGggKyAxICsgc2hpZnQsICdpbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG59O1xuZnVuY3Rpb24gZ2V0Vmlld1JlZnMobENvbnRhaW5lcikge1xuICAgIHJldHVybiBsQ29udGFpbmVyW1ZJRVdfUkVGU107XG59XG5mdW5jdGlvbiBnZXRPckNyZWF0ZVZpZXdSZWZzKGxDb250YWluZXIpIHtcbiAgICByZXR1cm4gKGxDb250YWluZXJbVklFV19SRUZTXSB8fCAobENvbnRhaW5lcltWSUVXX1JFRlNdID0gW10pKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFZpZXdDb250YWluZXJSZWYgYW5kIHN0b3JlcyBpdCBvbiB0aGUgaW5qZWN0b3IuXG4gKlxuICogQHBhcmFtIFZpZXdDb250YWluZXJSZWZUb2tlbiBUaGUgVmlld0NvbnRhaW5lclJlZiB0eXBlXG4gKiBAcGFyYW0gRWxlbWVudFJlZlRva2VuIFRoZSBFbGVtZW50UmVmIHR5cGVcbiAqIEBwYXJhbSBob3N0VE5vZGUgVGhlIG5vZGUgdGhhdCBpcyByZXF1ZXN0aW5nIGEgVmlld0NvbnRhaW5lclJlZlxuICogQHBhcmFtIGhvc3RMVmlldyBUaGUgdmlldyB0byB3aGljaCB0aGUgbm9kZSBiZWxvbmdzXG4gKiBAcmV0dXJucyBUaGUgVmlld0NvbnRhaW5lclJlZiBpbnN0YW5jZSB0byB1c2VcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyUmVmKGhvc3RUTm9kZSwgaG9zdExWaWV3KSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlVHlwZShob3N0VE5vZGUsIDEyIC8qIEFueUNvbnRhaW5lciAqLyB8IDMgLyogQW55Uk5vZGUgKi8pO1xuICAgIGxldCBsQ29udGFpbmVyO1xuICAgIGNvbnN0IHNsb3RWYWx1ZSA9IGhvc3RMVmlld1tob3N0VE5vZGUuaW5kZXhdO1xuICAgIGlmIChpc0xDb250YWluZXIoc2xvdFZhbHVlKSkge1xuICAgICAgICAvLyBJZiB0aGUgaG9zdCBpcyBhIGNvbnRhaW5lciwgd2UgZG9uJ3QgbmVlZCB0byBjcmVhdGUgYSBuZXcgTENvbnRhaW5lclxuICAgICAgICBsQ29udGFpbmVyID0gc2xvdFZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGNvbW1lbnROb2RlO1xuICAgICAgICAvLyBJZiB0aGUgaG9zdCBpcyBhbiBlbGVtZW50IGNvbnRhaW5lciwgdGhlIG5hdGl2ZSBob3N0IGVsZW1lbnQgaXMgZ3VhcmFudGVlZCB0byBiZSBhXG4gICAgICAgIC8vIGNvbW1lbnQgYW5kIHdlIGNhbiByZXVzZSB0aGF0IGNvbW1lbnQgYXMgYW5jaG9yIGVsZW1lbnQgZm9yIHRoZSBuZXcgTENvbnRhaW5lci5cbiAgICAgICAgLy8gVGhlIGNvbW1lbnQgbm9kZSBpbiBxdWVzdGlvbiBpcyBhbHJlYWR5IHBhcnQgb2YgdGhlIERPTSBzdHJ1Y3R1cmUgc28gd2UgZG9uJ3QgbmVlZCB0byBhcHBlbmRcbiAgICAgICAgLy8gaXQgYWdhaW4uXG4gICAgICAgIGlmIChob3N0VE5vZGUudHlwZSAmIDggLyogRWxlbWVudENvbnRhaW5lciAqLykge1xuICAgICAgICAgICAgY29tbWVudE5vZGUgPSB1bndyYXBSTm9kZShzbG90VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGhvc3QgaXMgYSByZWd1bGFyIGVsZW1lbnQsIHdlIGhhdmUgdG8gaW5zZXJ0IGEgY29tbWVudCBub2RlIG1hbnVhbGx5IHdoaWNoIHdpbGxcbiAgICAgICAgICAgIC8vIGJlIHVzZWQgYXMgYW4gYW5jaG9yIHdoZW4gaW5zZXJ0aW5nIGVsZW1lbnRzLiBJbiB0aGlzIHNwZWNpZmljIGNhc2Ugd2UgdXNlIGxvdy1sZXZlbCBET01cbiAgICAgICAgICAgIC8vIG1hbmlwdWxhdGlvbiB0byBpbnNlcnQgaXQuXG4gICAgICAgICAgICBjb25zdCByZW5kZXJlciA9IGhvc3RMVmlld1tSRU5ERVJFUl07XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiYgbmdEZXZNb2RlLnJlbmRlcmVyQ3JlYXRlQ29tbWVudCsrO1xuICAgICAgICAgICAgY29tbWVudE5vZGUgPSByZW5kZXJlci5jcmVhdGVDb21tZW50KG5nRGV2TW9kZSA/ICdjb250YWluZXInIDogJycpO1xuICAgICAgICAgICAgY29uc3QgaG9zdE5hdGl2ZSA9IGdldE5hdGl2ZUJ5VE5vZGUoaG9zdFROb2RlLCBob3N0TFZpZXcpO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50T2ZIb3N0TmF0aXZlID0gbmF0aXZlUGFyZW50Tm9kZShyZW5kZXJlciwgaG9zdE5hdGl2ZSk7XG4gICAgICAgICAgICBuYXRpdmVJbnNlcnRCZWZvcmUocmVuZGVyZXIsIHBhcmVudE9mSG9zdE5hdGl2ZSwgY29tbWVudE5vZGUsIG5hdGl2ZU5leHRTaWJsaW5nKHJlbmRlcmVyLCBob3N0TmF0aXZlKSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGhvc3RMVmlld1tob3N0VE5vZGUuaW5kZXhdID0gbENvbnRhaW5lciA9XG4gICAgICAgICAgICBjcmVhdGVMQ29udGFpbmVyKHNsb3RWYWx1ZSwgaG9zdExWaWV3LCBjb21tZW50Tm9kZSwgaG9zdFROb2RlKTtcbiAgICAgICAgYWRkVG9WaWV3VHJlZShob3N0TFZpZXcsIGxDb250YWluZXIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFIzVmlld0NvbnRhaW5lclJlZihsQ29udGFpbmVyLCBob3N0VE5vZGUsIGhvc3RMVmlldyk7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuY29uc3QgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQkMSA9IDE7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLy8gTm90ZTogVGhpcyBoYWNrIGlzIG5lY2Vzc2FyeSBzbyB3ZSBkb24ndCBlcnJvbmVvdXNseSBnZXQgYSBjaXJjdWxhciBkZXBlbmRlbmN5XG4vLyBmYWlsdXJlIGJhc2VkIG9uIHR5cGVzLlxuY29uc3QgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQgPSAxO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmNvbnN0IHVudXNlZFZhbHVlVG9QbGFjYXRlQWpkID0gdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQkMSArIHVudXNlZFZhbHVlRXhwb3J0VG9QbGFjYXRlQWpkJDUgKyB1bnVzZWRWYWx1ZUV4cG9ydFRvUGxhY2F0ZUFqZCQ0ICsgdW51c2VkVmFsdWVFeHBvcnRUb1BsYWNhdGVBamQ7XG5jbGFzcyBMUXVlcnlfIHtcbiAgICBjb25zdHJ1Y3RvcihxdWVyeUxpc3QpIHtcbiAgICAgICAgdGhpcy5xdWVyeUxpc3QgPSBxdWVyeUxpc3Q7XG4gICAgICAgIHRoaXMubWF0Y2hlcyA9IG51bGw7XG4gICAgfVxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IExRdWVyeV8odGhpcy5xdWVyeUxpc3QpO1xuICAgIH1cbiAgICBzZXREaXJ0eSgpIHtcbiAgICAgICAgdGhpcy5xdWVyeUxpc3Quc2V0RGlydHkoKTtcbiAgICB9XG59XG5jbGFzcyBMUXVlcmllc18ge1xuICAgIGNvbnN0cnVjdG9yKHF1ZXJpZXMgPSBbXSkge1xuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBxdWVyaWVzO1xuICAgIH1cbiAgICBjcmVhdGVFbWJlZGRlZFZpZXcodFZpZXcpIHtcbiAgICAgICAgY29uc3QgdFF1ZXJpZXMgPSB0Vmlldy5xdWVyaWVzO1xuICAgICAgICBpZiAodFF1ZXJpZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vT2ZJbmhlcml0ZWRRdWVyaWVzID0gdFZpZXcuY29udGVudFF1ZXJpZXMgIT09IG51bGwgPyB0Vmlldy5jb250ZW50UXVlcmllc1swXSA6IHRRdWVyaWVzLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHZpZXdMUXVlcmllcyA9IFtdO1xuICAgICAgICAgICAgLy8gQW4gZW1iZWRkZWQgdmlldyBoYXMgcXVlcmllcyBwcm9wYWdhdGVkIGZyb20gYSBkZWNsYXJhdGlvbiB2aWV3IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlXG4gICAgICAgICAgICAvLyBUUXVlcmllcyBjb2xsZWN0aW9uIGFuZCB1cCB1bnRpbCBhIGZpcnN0IGNvbnRlbnQgcXVlcnkgZGVjbGFyZWQgaW4gdGhlIGVtYmVkZGVkIHZpZXcuIE9ubHlcbiAgICAgICAgICAgIC8vIHByb3BhZ2F0ZWQgTFF1ZXJpZXMgYXJlIGNyZWF0ZWQgYXQgdGhpcyBwb2ludCAoTFF1ZXJ5IGNvcnJlc3BvbmRpbmcgdG8gZGVjbGFyZWQgY29udGVudFxuICAgICAgICAgICAgLy8gcXVlcmllcyB3aWxsIGJlIGluc3RhbnRpYXRlZCBmcm9tIHRoZSBjb250ZW50IHF1ZXJ5IGluc3RydWN0aW9ucyBmb3IgZWFjaCBkaXJlY3RpdmUpLlxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub09mSW5oZXJpdGVkUXVlcmllczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdFF1ZXJ5ID0gdFF1ZXJpZXMuZ2V0QnlJbmRleChpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRMUXVlcnkgPSB0aGlzLnF1ZXJpZXNbdFF1ZXJ5LmluZGV4SW5EZWNsYXJhdGlvblZpZXddO1xuICAgICAgICAgICAgICAgIHZpZXdMUXVlcmllcy5wdXNoKHBhcmVudExRdWVyeS5jbG9uZSgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgTFF1ZXJpZXNfKHZpZXdMUXVlcmllcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGluc2VydFZpZXcodFZpZXcpIHtcbiAgICAgICAgdGhpcy5kaXJ0eVF1ZXJpZXNXaXRoTWF0Y2hlcyh0Vmlldyk7XG4gICAgfVxuICAgIGRldGFjaFZpZXcodFZpZXcpIHtcbiAgICAgICAgdGhpcy5kaXJ0eVF1ZXJpZXNXaXRoTWF0Y2hlcyh0Vmlldyk7XG4gICAgfVxuICAgIGRpcnR5UXVlcmllc1dpdGhNYXRjaGVzKHRWaWV3KSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5xdWVyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZ2V0VFF1ZXJ5KHRWaWV3LCBpKS5tYXRjaGVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5xdWVyaWVzW2ldLnNldERpcnR5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBUUXVlcnlNZXRhZGF0YV8ge1xuICAgIGNvbnN0cnVjdG9yKHByZWRpY2F0ZSwgZmxhZ3MsIHJlYWQgPSBudWxsKSB7XG4gICAgICAgIHRoaXMucHJlZGljYXRlID0gcHJlZGljYXRlO1xuICAgICAgICB0aGlzLmZsYWdzID0gZmxhZ3M7XG4gICAgICAgIHRoaXMucmVhZCA9IHJlYWQ7XG4gICAgfVxufVxuY2xhc3MgVFF1ZXJpZXNfIHtcbiAgICBjb25zdHJ1Y3RvcihxdWVyaWVzID0gW10pIHtcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gcXVlcmllcztcbiAgICB9XG4gICAgZWxlbWVudFN0YXJ0KHRWaWV3LCB0Tm9kZSkge1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIGFzc2VydEZpcnN0Q3JlYXRlUGFzcyh0VmlldywgJ1F1ZXJpZXMgc2hvdWxkIGNvbGxlY3QgcmVzdWx0cyBvbiB0aGUgZmlyc3QgdGVtcGxhdGUgcGFzcyBvbmx5Jyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5xdWVyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXJpZXNbaV0uZWxlbWVudFN0YXJ0KHRWaWV3LCB0Tm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxlbWVudEVuZCh0Tm9kZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucXVlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5xdWVyaWVzW2ldLmVsZW1lbnRFbmQodE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVtYmVkZGVkVFZpZXcodE5vZGUpIHtcbiAgICAgICAgbGV0IHF1ZXJpZXNGb3JUZW1wbGF0ZVJlZiA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRRdWVyeUluZGV4ID0gcXVlcmllc0ZvclRlbXBsYXRlUmVmICE9PSBudWxsID8gcXVlcmllc0ZvclRlbXBsYXRlUmVmLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBjb25zdCB0cXVlcnlDbG9uZSA9IHRoaXMuZ2V0QnlJbmRleChpKS5lbWJlZGRlZFRWaWV3KHROb2RlLCBjaGlsZFF1ZXJ5SW5kZXgpO1xuICAgICAgICAgICAgaWYgKHRxdWVyeUNsb25lKSB7XG4gICAgICAgICAgICAgICAgdHF1ZXJ5Q2xvbmUuaW5kZXhJbkRlY2xhcmF0aW9uVmlldyA9IGk7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJpZXNGb3JUZW1wbGF0ZVJlZiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBxdWVyaWVzRm9yVGVtcGxhdGVSZWYucHVzaCh0cXVlcnlDbG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBxdWVyaWVzRm9yVGVtcGxhdGVSZWYgPSBbdHF1ZXJ5Q2xvbmVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcXVlcmllc0ZvclRlbXBsYXRlUmVmICE9PSBudWxsID8gbmV3IFRRdWVyaWVzXyhxdWVyaWVzRm9yVGVtcGxhdGVSZWYpIDogbnVsbDtcbiAgICB9XG4gICAgdGVtcGxhdGUodFZpZXcsIHROb2RlKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgYXNzZXJ0Rmlyc3RDcmVhdGVQYXNzKHRWaWV3LCAnUXVlcmllcyBzaG91bGQgY29sbGVjdCByZXN1bHRzIG9uIHRoZSBmaXJzdCB0ZW1wbGF0ZSBwYXNzIG9ubHknKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnF1ZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMucXVlcmllc1tpXS50ZW1wbGF0ZSh0VmlldywgdE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEJ5SW5kZXgoaW5kZXgpIHtcbiAgICAgICAgbmdEZXZNb2RlICYmIGFzc2VydEluZGV4SW5SYW5nZSh0aGlzLnF1ZXJpZXMsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcmllc1tpbmRleF07XG4gICAgfVxuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJpZXMubGVuZ3RoO1xuICAgIH1cbiAgICB0cmFjayh0cXVlcnkpIHtcbiAgICAgICAgdGhpcy5xdWVyaWVzLnB1c2godHF1ZXJ5KTtcbiAgICB9XG59XG5jbGFzcyBUUXVlcnlfIHtcbiAgICBjb25zdHJ1Y3RvcihtZXRhZGF0YSwgbm9kZUluZGV4ID0gLTEpIHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICB0aGlzLm1hdGNoZXMgPSBudWxsO1xuICAgICAgICB0aGlzLmluZGV4SW5EZWNsYXJhdGlvblZpZXcgPSAtMTtcbiAgICAgICAgdGhpcy5jcm9zc2VzTmdUZW1wbGF0ZSA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBmbGFnIGluZGljYXRpbmcgaWYgYSBnaXZlbiBxdWVyeSBzdGlsbCBhcHBsaWVzIHRvIG5vZGVzIGl0IGlzIGNyb3NzaW5nLiBXZSB1c2UgdGhpcyBmbGFnXG4gICAgICAgICAqIChhbG9uZ3NpZGUgd2l0aCBfZGVjbGFyYXRpb25Ob2RlSW5kZXgpIHRvIGtub3cgd2hlbiB0byBzdG9wIGFwcGx5aW5nIGNvbnRlbnQgcXVlcmllcyB0b1xuICAgICAgICAgKiBlbGVtZW50cyBpbiBhIHRlbXBsYXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fYXBwbGllc1RvTmV4dE5vZGUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9kZWNsYXJhdGlvbk5vZGVJbmRleCA9IG5vZGVJbmRleDtcbiAgICB9XG4gICAgZWxlbWVudFN0YXJ0KHRWaWV3LCB0Tm9kZSkge1xuICAgICAgICBpZiAodGhpcy5pc0FwcGx5aW5nVG9Ob2RlKHROb2RlKSkge1xuICAgICAgICAgICAgdGhpcy5tYXRjaFROb2RlKHRWaWV3LCB0Tm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxlbWVudEVuZCh0Tm9kZSkge1xuICAgICAgICBpZiAodGhpcy5fZGVjbGFyYXRpb25Ob2RlSW5kZXggPT09IHROb2RlLmluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9hcHBsaWVzVG9OZXh0Tm9kZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRlbXBsYXRlKHRWaWV3LCB0Tm9kZSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRTdGFydCh0VmlldywgdE5vZGUpO1xuICAgIH1cbiAgICBlbWJlZGRlZFRWaWV3KHROb2RlLCBjaGlsZFF1ZXJ5SW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBcHBseWluZ1RvTm9kZSh0Tm9kZSkpIHtcbiAgICAgICAgICAgIHRoaXMuY3Jvc3Nlc05nVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgICAgLy8gQSBtYXJrZXIgaW5kaWNhdGluZyBhIGA8bmctdGVtcGxhdGU+YCBlbGVtZW50IChhIHBsYWNlaG9sZGVyIGZvciBxdWVyeSByZXN1bHRzIGZyb21cbiAgICAgICAgICAgIC8vIGVtYmVkZGVkIHZpZXdzIGNyZWF0ZWQgYmFzZWQgb24gdGhpcyBgPG5nLXRlbXBsYXRlPmApLlxuICAgICAgICAgICAgdGhpcy5hZGRNYXRjaCgtdE5vZGUuaW5kZXgsIGNoaWxkUXVlcnlJbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFRRdWVyeV8odGhpcy5tZXRhZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlzQXBwbHlpbmdUb05vZGUodE5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FwcGxpZXNUb05leHROb2RlICYmXG4gICAgICAgICAgICAodGhpcy5tZXRhZGF0YS5mbGFncyAmIDEgLyogZGVzY2VuZGFudHMgKi8pICE9PSAxIC8qIGRlc2NlbmRhbnRzICovKSB7XG4gICAgICAgICAgICBjb25zdCBkZWNsYXJhdGlvbk5vZGVJZHggPSB0aGlzLl9kZWNsYXJhdGlvbk5vZGVJbmRleDtcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSB0Tm9kZS5wYXJlbnQ7XG4gICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgYSBnaXZlbiBUTm9kZSBpcyBhIFwiZGlyZWN0XCIgY2hpbGQgb2YgYSBub2RlIG9uIHdoaWNoIGEgY29udGVudCBxdWVyeSB3YXNcbiAgICAgICAgICAgIC8vIGRlY2xhcmVkIChvbmx5IGRpcmVjdCBjaGlsZHJlbiBvZiBxdWVyeSdzIGhvc3Qgbm9kZSBjYW4gbWF0Y2ggd2l0aCB0aGUgZGVzY2VuZGFudHM6IGZhbHNlXG4gICAgICAgICAgICAvLyBvcHRpb24pLiBUaGVyZSBhcmUgMyBtYWluIHVzZS1jYXNlIC8gY29uZGl0aW9ucyB0byBjb25zaWRlciBoZXJlOlxuICAgICAgICAgICAgLy8gLSA8bmVlZHMtdGFyZ2V0PjxpICN0YXJnZXQ+PC9pPjwvbmVlZHMtdGFyZ2V0PjogaGVyZSA8aSAjdGFyZ2V0PiBwYXJlbnQgbm9kZSBpcyBhIHF1ZXJ5XG4gICAgICAgICAgICAvLyBob3N0IG5vZGU7XG4gICAgICAgICAgICAvLyAtIDxuZWVkcy10YXJnZXQ+PG5nLXRlbXBsYXRlIFtuZ0lmXT1cInRydWVcIj48aSAjdGFyZ2V0PjwvaT48L25nLXRlbXBsYXRlPjwvbmVlZHMtdGFyZ2V0PjpcbiAgICAgICAgICAgIC8vIGhlcmUgPGkgI3RhcmdldD4gcGFyZW50IG5vZGUgaXMgbnVsbDtcbiAgICAgICAgICAgIC8vIC0gPG5lZWRzLXRhcmdldD48bmctY29udGFpbmVyPjxpICN0YXJnZXQ+PC9pPjwvbmctY29udGFpbmVyPjwvbmVlZHMtdGFyZ2V0PjogaGVyZSB3ZSBuZWVkXG4gICAgICAgICAgICAvLyB0byBnbyBwYXN0IGA8bmctY29udGFpbmVyPmAgdG8gZGV0ZXJtaW5lIDxpICN0YXJnZXQ+IHBhcmVudCBub2RlIChidXQgd2Ugc2hvdWxkbid0IHRyYXZlcnNlXG4gICAgICAgICAgICAvLyB1cCBwYXN0IHRoZSBxdWVyeSdzIGhvc3Qgbm9kZSEpLlxuICAgICAgICAgICAgd2hpbGUgKHBhcmVudCAhPT0gbnVsbCAmJiAocGFyZW50LnR5cGUgJiA4IC8qIEVsZW1lbnRDb250YWluZXIgKi8pICYmXG4gICAgICAgICAgICAgICAgcGFyZW50LmluZGV4ICE9PSBkZWNsYXJhdGlvbk5vZGVJZHgpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRlY2xhcmF0aW9uTm9kZUlkeCA9PT0gKHBhcmVudCAhPT0gbnVsbCA/IHBhcmVudC5pbmRleCA6IC0xKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYXBwbGllc1RvTmV4dE5vZGU7XG4gICAgfVxuICAgIG1hdGNoVE5vZGUodFZpZXcsIHROb2RlKSB7XG4gICAgICAgIGNvbnN0IHByZWRpY2F0ZSA9IHRoaXMubWV0YWRhdGEucHJlZGljYXRlO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcmVkaWNhdGUpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWRpY2F0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwcmVkaWNhdGVbaV07XG4gICAgICAgICAgICAgICAgdGhpcy5tYXRjaFROb2RlV2l0aFJlYWRPcHRpb24odFZpZXcsIHROb2RlLCBnZXRJZHhPZk1hdGNoaW5nU2VsZWN0b3IodE5vZGUsIG5hbWUpKTtcbiAgICAgICAgICAgICAgICAvLyBBbHNvIHRyeSBtYXRjaGluZyB0aGUgbmFtZSB0byBhIHByb3ZpZGVyIHNpbmNlIHN0cmluZ3MgY2FuIGJlIHVzZWQgYXMgREkgdG9rZW5zIHRvby5cbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoVE5vZGVXaXRoUmVhZE9wdGlvbih0VmlldywgdE5vZGUsIGxvY2F0ZURpcmVjdGl2ZU9yUHJvdmlkZXIodE5vZGUsIHRWaWV3LCBuYW1lLCBmYWxzZSwgZmFsc2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUgPT09IFRlbXBsYXRlUmVmKSB7XG4gICAgICAgICAgICAgICAgaWYgKHROb2RlLnR5cGUgJiA0IC8qIENvbnRhaW5lciAqLykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoVE5vZGVXaXRoUmVhZE9wdGlvbih0VmlldywgdE5vZGUsIC0xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoVE5vZGVXaXRoUmVhZE9wdGlvbih0VmlldywgdE5vZGUsIGxvY2F0ZURpcmVjdGl2ZU9yUHJvdmlkZXIodE5vZGUsIHRWaWV3LCBwcmVkaWNhdGUsIGZhbHNlLCBmYWxzZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIG1hdGNoVE5vZGVXaXRoUmVhZE9wdGlvbih0VmlldywgdE5vZGUsIG5vZGVNYXRjaElkeCkge1xuICAgICAgICBpZiAobm9kZU1hdGNoSWR4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCByZWFkID0gdGhpcy5tZXRhZGF0YS5yZWFkO1xuICAgICAgICAgICAgaWYgKHJlYWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVhZCA9PT0gRWxlbWVudFJlZiB8fCByZWFkID09PSBWaWV3Q29udGFpbmVyUmVmIHx8XG4gICAgICAgICAgICAgICAgICAgIHJlYWQgPT09IFRlbXBsYXRlUmVmICYmICh0Tm9kZS50eXBlICYgNCAvKiBDb250YWluZXIgKi8pKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTWF0Y2godE5vZGUuaW5kZXgsIC0yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpcmVjdGl2ZU9yUHJvdmlkZXJJZHggPSBsb2NhdGVEaXJlY3RpdmVPclByb3ZpZGVyKHROb2RlLCB0VmlldywgcmVhZCwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGl2ZU9yUHJvdmlkZXJJZHggIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkTWF0Y2godE5vZGUuaW5kZXgsIGRpcmVjdGl2ZU9yUHJvdmlkZXJJZHgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRNYXRjaCh0Tm9kZS5pbmRleCwgbm9kZU1hdGNoSWR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRNYXRjaCh0Tm9kZUlkeCwgbWF0Y2hJZHgpIHtcbiAgICAgICAgaWYgKHRoaXMubWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5tYXRjaGVzID0gW3ROb2RlSWR4LCBtYXRjaElkeF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1hdGNoZXMucHVzaCh0Tm9kZUlkeCwgbWF0Y2hJZHgpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGxvY2FsIG5hbWVzIGZvciBhIGdpdmVuIG5vZGUgYW5kIHJldHVybnMgZGlyZWN0aXZlIGluZGV4XG4gKiAob3IgLTEgaWYgYSBsb2NhbCBuYW1lIHBvaW50cyB0byBhbiBlbGVtZW50KS5cbiAqXG4gKiBAcGFyYW0gdE5vZGUgc3RhdGljIGRhdGEgb2YgYSBub2RlIHRvIGNoZWNrXG4gKiBAcGFyYW0gc2VsZWN0b3Igc2VsZWN0b3IgdG8gbWF0Y2hcbiAqIEByZXR1cm5zIGRpcmVjdGl2ZSBpbmRleCwgLTEgb3IgbnVsbCBpZiBhIHNlbGVjdG9yIGRpZG4ndCBtYXRjaCBhbnkgb2YgdGhlIGxvY2FsIG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGdldElkeE9mTWF0Y2hpbmdTZWxlY3Rvcih0Tm9kZSwgc2VsZWN0b3IpIHtcbiAgICBjb25zdCBsb2NhbE5hbWVzID0gdE5vZGUubG9jYWxOYW1lcztcbiAgICBpZiAobG9jYWxOYW1lcyAhPT0gbnVsbCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2FsTmFtZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGlmIChsb2NhbE5hbWVzW2ldID09PSBzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2NhbE5hbWVzW2kgKyAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlc3VsdEJ5VE5vZGVUeXBlKHROb2RlLCBjdXJyZW50Vmlldykge1xuICAgIGlmICh0Tm9kZS50eXBlICYgKDMgLyogQW55Uk5vZGUgKi8gfCA4IC8qIEVsZW1lbnRDb250YWluZXIgKi8pKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50UmVmKHROb2RlLCBjdXJyZW50Vmlldyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHROb2RlLnR5cGUgJiA0IC8qIENvbnRhaW5lciAqLykge1xuICAgICAgICByZXR1cm4gY3JlYXRlVGVtcGxhdGVSZWYodE5vZGUsIGN1cnJlbnRWaWV3KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVSZXN1bHRGb3JOb2RlKGxWaWV3LCB0Tm9kZSwgbWF0Y2hpbmdJZHgsIHJlYWQpIHtcbiAgICBpZiAobWF0Y2hpbmdJZHggPT09IC0xKSB7XG4gICAgICAgIC8vIGlmIHJlYWQgdG9rZW4gYW5kIC8gb3Igc3RyYXRlZ3kgaXMgbm90IHNwZWNpZmllZCwgZGV0ZWN0IGl0IHVzaW5nIGFwcHJvcHJpYXRlIHROb2RlIHR5cGVcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVJlc3VsdEJ5VE5vZGVUeXBlKHROb2RlLCBsVmlldyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1hdGNoaW5nSWR4ID09PSAtMikge1xuICAgICAgICAvLyByZWFkIGEgc3BlY2lhbCB0b2tlbiBmcm9tIGEgbm9kZSBpbmplY3RvclxuICAgICAgICByZXR1cm4gY3JlYXRlU3BlY2lhbFRva2VuKGxWaWV3LCB0Tm9kZSwgcmVhZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyByZWFkIGEgdG9rZW5cbiAgICAgICAgcmV0dXJuIGdldE5vZGVJbmplY3RhYmxlKGxWaWV3LCBsVmlld1tUVklFV10sIG1hdGNoaW5nSWR4LCB0Tm9kZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlU3BlY2lhbFRva2VuKGxWaWV3LCB0Tm9kZSwgcmVhZCkge1xuICAgIGlmIChyZWFkID09PSBFbGVtZW50UmVmKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50UmVmKHROb2RlLCBsVmlldyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlYWQgPT09IFRlbXBsYXRlUmVmKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVUZW1wbGF0ZVJlZih0Tm9kZSwgbFZpZXcpO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZWFkID09PSBWaWV3Q29udGFpbmVyUmVmKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRUTm9kZVR5cGUodE5vZGUsIDMgLyogQW55Uk5vZGUgKi8gfCAxMiAvKiBBbnlDb250YWluZXIgKi8pO1xuICAgICAgICByZXR1cm4gY3JlYXRlQ29udGFpbmVyUmVmKHROb2RlLCBsVmlldyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIHRocm93RXJyb3IoYFNwZWNpYWwgdG9rZW4gdG8gcmVhZCBzaG91bGQgYmUgb25lIG9mIEVsZW1lbnRSZWYsIFRlbXBsYXRlUmVmIG9yIFZpZXdDb250YWluZXJSZWYgYnV0IGdvdCAke3N0cmluZ2lmeShyZWFkKX0uYCk7XG4gICAgfVxufVxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgcXVlcnkgcmVzdWx0cyBmb3IgYSBnaXZlbiB2aWV3LiBUaGlzIGZ1bmN0aW9uIGlzIG1lYW50IHRvIGRvIHRoZVxuICogcHJvY2Vzc2luZyBvbmNlIGFuZCBvbmx5IG9uY2UgZm9yIGEgZ2l2ZW4gdmlldyBpbnN0YW5jZSAoYSBzZXQgb2YgcmVzdWx0cyBmb3IgYSBnaXZlbiB2aWV3XG4gKiBkb2Vzbid0IGNoYW5nZSkuXG4gKi9cbmZ1bmN0aW9uIG1hdGVyaWFsaXplVmlld1Jlc3VsdHModFZpZXcsIGxWaWV3LCB0UXVlcnksIHF1ZXJ5SW5kZXgpIHtcbiAgICBjb25zdCBsUXVlcnkgPSBsVmlld1tRVUVSSUVTXS5xdWVyaWVzW3F1ZXJ5SW5kZXhdO1xuICAgIGlmIChsUXVlcnkubWF0Y2hlcyA9PT0gbnVsbCkge1xuICAgICAgICBjb25zdCB0Vmlld0RhdGEgPSB0Vmlldy5kYXRhO1xuICAgICAgICBjb25zdCB0UXVlcnlNYXRjaGVzID0gdFF1ZXJ5Lm1hdGNoZXM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRRdWVyeU1hdGNoZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoZWROb2RlSWR4ID0gdFF1ZXJ5TWF0Y2hlc1tpXTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVkTm9kZUlkeCA8IDApIHtcbiAgICAgICAgICAgICAgICAvLyB3ZSBhdCB0aGUgPG5nLXRlbXBsYXRlPiBtYXJrZXIgd2hpY2ggbWlnaHQgaGF2ZSByZXN1bHRzIGluIHZpZXdzIGNyZWF0ZWQgYmFzZWQgb24gdGhpc1xuICAgICAgICAgICAgICAgIC8vIDxuZy10ZW1wbGF0ZT4gLSB0aG9zZSByZXN1bHRzIHdpbGwgYmUgaW4gc2VwYXJhdGUgdmlld3MgdGhvdWdoLCBzbyBoZXJlIHdlIGp1c3QgbGVhdmVcbiAgICAgICAgICAgICAgICAvLyBudWxsIGFzIGEgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UodFZpZXdEYXRhLCBtYXRjaGVkTm9kZUlkeCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdE5vZGUgPSB0Vmlld0RhdGFbbWF0Y2hlZE5vZGVJZHhdO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNyZWF0ZVJlc3VsdEZvck5vZGUobFZpZXcsIHROb2RlLCB0UXVlcnlNYXRjaGVzW2kgKyAxXSwgdFF1ZXJ5Lm1ldGFkYXRhLnJlYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsUXVlcnkubWF0Y2hlcyA9IHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIGxRdWVyeS5tYXRjaGVzO1xufVxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB0aGF0IGNvbGxlY3RzIChhbHJlYWR5IG1hdGVyaWFsaXplZCkgcXVlcnkgcmVzdWx0cyBmcm9tIGEgdHJlZSBvZiB2aWV3cyxcbiAqIHN0YXJ0aW5nIHdpdGggYSBwcm92aWRlZCBMVmlldy5cbiAqL1xuZnVuY3Rpb24gY29sbGVjdFF1ZXJ5UmVzdWx0cyh0VmlldywgbFZpZXcsIHF1ZXJ5SW5kZXgsIHJlc3VsdCkge1xuICAgIGNvbnN0IHRRdWVyeSA9IHRWaWV3LnF1ZXJpZXMuZ2V0QnlJbmRleChxdWVyeUluZGV4KTtcbiAgICBjb25zdCB0UXVlcnlNYXRjaGVzID0gdFF1ZXJ5Lm1hdGNoZXM7XG4gICAgaWYgKHRRdWVyeU1hdGNoZXMgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgbFZpZXdSZXN1bHRzID0gbWF0ZXJpYWxpemVWaWV3UmVzdWx0cyh0VmlldywgbFZpZXcsIHRRdWVyeSwgcXVlcnlJbmRleCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdFF1ZXJ5TWF0Y2hlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgY29uc3QgdE5vZGVJZHggPSB0UXVlcnlNYXRjaGVzW2ldO1xuICAgICAgICAgICAgaWYgKHROb2RlSWR4ID4gMCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGxWaWV3UmVzdWx0c1tpIC8gMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRRdWVyeUluZGV4ID0gdFF1ZXJ5TWF0Y2hlc1tpICsgMV07XG4gICAgICAgICAgICAgICAgY29uc3QgZGVjbGFyYXRpb25MQ29udGFpbmVyID0gbFZpZXdbLXROb2RlSWR4XTtcbiAgICAgICAgICAgICAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TENvbnRhaW5lcihkZWNsYXJhdGlvbkxDb250YWluZXIpO1xuICAgICAgICAgICAgICAgIC8vIGNvbGxlY3QgbWF0Y2hlcyBmb3Igdmlld3MgaW5zZXJ0ZWQgaW4gdGhpcyBjb250YWluZXJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gQ09OVEFJTkVSX0hFQURFUl9PRkZTRVQ7IGkgPCBkZWNsYXJhdGlvbkxDb250YWluZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW1iZWRkZWRMVmlldyA9IGRlY2xhcmF0aW9uTENvbnRhaW5lcltpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtYmVkZGVkTFZpZXdbREVDTEFSQVRJT05fTENPTlRBSU5FUl0gPT09IGVtYmVkZGVkTFZpZXdbUEFSRU5UXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdFF1ZXJ5UmVzdWx0cyhlbWJlZGRlZExWaWV3W1RWSUVXXSwgZW1iZWRkZWRMVmlldywgY2hpbGRRdWVyeUluZGV4LCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGNvbGxlY3QgbWF0Y2hlcyBmb3Igdmlld3MgY3JlYXRlZCBmcm9tIHRoaXMgZGVjbGFyYXRpb24gY29udGFpbmVyIGFuZCBpbnNlcnRlZCBpbnRvXG4gICAgICAgICAgICAgICAgLy8gZGlmZmVyZW50IGNvbnRhaW5lcnNcbiAgICAgICAgICAgICAgICBpZiAoZGVjbGFyYXRpb25MQ29udGFpbmVyW01PVkVEX1ZJRVdTXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbWJlZGRlZExWaWV3cyA9IGRlY2xhcmF0aW9uTENvbnRhaW5lcltNT1ZFRF9WSUVXU107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW1iZWRkZWRMVmlld3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVtYmVkZGVkTFZpZXcgPSBlbWJlZGRlZExWaWV3c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3RRdWVyeVJlc3VsdHMoZW1iZWRkZWRMVmlld1tUVklFV10sIGVtYmVkZGVkTFZpZXcsIGNoaWxkUXVlcnlJbmRleCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBSZWZyZXNoZXMgYSBxdWVyeSBieSBjb21iaW5pbmcgbWF0Y2hlcyBmcm9tIGFsbCBhY3RpdmUgdmlld3MgYW5kIHJlbW92aW5nIG1hdGNoZXMgZnJvbSBkZWxldGVkXG4gKiB2aWV3cy5cbiAqXG4gKiBAcmV0dXJucyBgdHJ1ZWAgaWYgYSBxdWVyeSBnb3QgZGlydHkgZHVyaW5nIGNoYW5nZSBkZXRlY3Rpb24gb3IgaWYgdGhpcyBpcyBhIHN0YXRpYyBxdWVyeVxuICogcmVzb2x2aW5nIGluIGNyZWF0aW9uIG1vZGUsIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVxdWVyeVJlZnJlc2gocXVlcnlMaXN0KSB7XG4gICAgY29uc3QgbFZpZXcgPSBnZXRMVmlldygpO1xuICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICBjb25zdCBxdWVyeUluZGV4ID0gZ2V0Q3VycmVudFF1ZXJ5SW5kZXgoKTtcbiAgICBzZXRDdXJyZW50UXVlcnlJbmRleChxdWVyeUluZGV4ICsgMSk7XG4gICAgY29uc3QgdFF1ZXJ5ID0gZ2V0VFF1ZXJ5KHRWaWV3LCBxdWVyeUluZGV4KTtcbiAgICBpZiAocXVlcnlMaXN0LmRpcnR5ICYmXG4gICAgICAgIChpc0NyZWF0aW9uTW9kZShsVmlldykgPT09XG4gICAgICAgICAgICAoKHRRdWVyeS5tZXRhZGF0YS5mbGFncyAmIDIgLyogaXNTdGF0aWMgKi8pID09PSAyIC8qIGlzU3RhdGljICovKSkpIHtcbiAgICAgICAgaWYgKHRRdWVyeS5tYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICBxdWVyeUxpc3QucmVzZXQoW10pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdFF1ZXJ5LmNyb3NzZXNOZ1RlbXBsYXRlID9cbiAgICAgICAgICAgICAgICBjb2xsZWN0UXVlcnlSZXN1bHRzKHRWaWV3LCBsVmlldywgcXVlcnlJbmRleCwgW10pIDpcbiAgICAgICAgICAgICAgICBtYXRlcmlhbGl6ZVZpZXdSZXN1bHRzKHRWaWV3LCBsVmlldywgdFF1ZXJ5LCBxdWVyeUluZGV4KTtcbiAgICAgICAgICAgIHF1ZXJ5TGlzdC5yZXNldChyZXN1bHQsIHVud3JhcEVsZW1lbnRSZWYpO1xuICAgICAgICAgICAgcXVlcnlMaXN0Lm5vdGlmeU9uQ2hhbmdlcygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIENyZWF0ZXMgbmV3IFF1ZXJ5TGlzdCwgc3RvcmVzIHRoZSByZWZlcmVuY2UgaW4gTFZpZXcgYW5kIHJldHVybnMgUXVlcnlMaXN0LlxuICpcbiAqIEBwYXJhbSBwcmVkaWNhdGUgVGhlIHR5cGUgZm9yIHdoaWNoIHRoZSBxdWVyeSB3aWxsIHNlYXJjaFxuICogQHBhcmFtIGZsYWdzIEZsYWdzIGFzc29jaWF0ZWQgd2l0aCB0aGUgcXVlcnlcbiAqIEBwYXJhbSByZWFkIFdoYXQgdG8gc2F2ZSBpbiB0aGUgcXVlcnlcbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1dmlld1F1ZXJ5KHByZWRpY2F0ZSwgZmxhZ3MsIHJlYWQpIHtcbiAgICBuZ0Rldk1vZGUgJiYgYXNzZXJ0TnVtYmVyKGZsYWdzLCAnRXhwZWN0aW5nIGZsYWdzJyk7XG4gICAgY29uc3QgdFZpZXcgPSBnZXRUVmlldygpO1xuICAgIGlmICh0Vmlldy5maXJzdENyZWF0ZVBhc3MpIHtcbiAgICAgICAgY3JlYXRlVFF1ZXJ5KHRWaWV3LCBuZXcgVFF1ZXJ5TWV0YWRhdGFfKHByZWRpY2F0ZSwgZmxhZ3MsIHJlYWQpLCAtMSk7XG4gICAgICAgIGlmICgoZmxhZ3MgJiAyIC8qIGlzU3RhdGljICovKSA9PT0gMiAvKiBpc1N0YXRpYyAqLykge1xuICAgICAgICAgICAgdFZpZXcuc3RhdGljVmlld1F1ZXJpZXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZUxRdWVyeSh0VmlldywgZ2V0TFZpZXcoKSwgZmxhZ3MpO1xufVxuLyoqXG4gKiBSZWdpc3RlcnMgYSBRdWVyeUxpc3QsIGFzc29jaWF0ZWQgd2l0aCBhIGNvbnRlbnQgcXVlcnksIGZvciBsYXRlciByZWZyZXNoIChwYXJ0IG9mIGEgdmlld1xuICogcmVmcmVzaCkuXG4gKlxuICogQHBhcmFtIGRpcmVjdGl2ZUluZGV4IEN1cnJlbnQgZGlyZWN0aXZlIGluZGV4XG4gKiBAcGFyYW0gcHJlZGljYXRlIFRoZSB0eXBlIGZvciB3aGljaCB0aGUgcXVlcnkgd2lsbCBzZWFyY2hcbiAqIEBwYXJhbSBmbGFncyBGbGFncyBhc3NvY2lhdGVkIHdpdGggdGhlIHF1ZXJ5XG4gKiBAcGFyYW0gcmVhZCBXaGF0IHRvIHNhdmUgaW4gdGhlIHF1ZXJ5XG4gKiBAcmV0dXJucyBRdWVyeUxpc3Q8VD5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1Y29udGVudFF1ZXJ5KGRpcmVjdGl2ZUluZGV4LCBwcmVkaWNhdGUsIGZsYWdzLCByZWFkKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE51bWJlcihmbGFncywgJ0V4cGVjdGluZyBmbGFncycpO1xuICAgIGNvbnN0IHRWaWV3ID0gZ2V0VFZpZXcoKTtcbiAgICBpZiAodFZpZXcuZmlyc3RDcmVhdGVQYXNzKSB7XG4gICAgICAgIGNvbnN0IHROb2RlID0gZ2V0Q3VycmVudFROb2RlKCk7XG4gICAgICAgIGNyZWF0ZVRRdWVyeSh0VmlldywgbmV3IFRRdWVyeU1ldGFkYXRhXyhwcmVkaWNhdGUsIGZsYWdzLCByZWFkKSwgdE5vZGUuaW5kZXgpO1xuICAgICAgICBzYXZlQ29udGVudFF1ZXJ5QW5kRGlyZWN0aXZlSW5kZXgodFZpZXcsIGRpcmVjdGl2ZUluZGV4KTtcbiAgICAgICAgaWYgKChmbGFncyAmIDIgLyogaXNTdGF0aWMgKi8pID09PSAyIC8qIGlzU3RhdGljICovKSB7XG4gICAgICAgICAgICB0Vmlldy5zdGF0aWNDb250ZW50UXVlcmllcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlTFF1ZXJ5KHRWaWV3LCBnZXRMVmlldygpLCBmbGFncyk7XG59XG4vKipcbiAqIExvYWRzIGEgUXVlcnlMaXN0IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGN1cnJlbnQgdmlldyBvciBjb250ZW50IHF1ZXJ5LlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVsb2FkUXVlcnkoKSB7XG4gICAgcmV0dXJuIGxvYWRRdWVyeUludGVybmFsKGdldExWaWV3KCksIGdldEN1cnJlbnRRdWVyeUluZGV4KCkpO1xufVxuZnVuY3Rpb24gbG9hZFF1ZXJ5SW50ZXJuYWwobFZpZXcsIHF1ZXJ5SW5kZXgpIHtcbiAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgYXNzZXJ0RGVmaW5lZChsVmlld1tRVUVSSUVTXSwgJ0xRdWVyaWVzIHNob3VsZCBiZSBkZWZpbmVkIHdoZW4gdHJ5aW5nIHRvIGxvYWQgYSBxdWVyeScpO1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnRJbmRleEluUmFuZ2UobFZpZXdbUVVFUklFU10ucXVlcmllcywgcXVlcnlJbmRleCk7XG4gICAgcmV0dXJuIGxWaWV3W1FVRVJJRVNdLnF1ZXJpZXNbcXVlcnlJbmRleF0ucXVlcnlMaXN0O1xufVxuZnVuY3Rpb24gY3JlYXRlTFF1ZXJ5KHRWaWV3LCBsVmlldywgZmxhZ3MpIHtcbiAgICBjb25zdCBxdWVyeUxpc3QgPSBuZXcgUXVlcnlMaXN0KChmbGFncyAmIDQgLyogZW1pdERpc3RpbmN0Q2hhbmdlc09ubHkgKi8pID09PSA0IC8qIGVtaXREaXN0aW5jdENoYW5nZXNPbmx5ICovKTtcbiAgICBzdG9yZUNsZWFudXBXaXRoQ29udGV4dCh0VmlldywgbFZpZXcsIHF1ZXJ5TGlzdCwgcXVlcnlMaXN0LmRlc3Ryb3kpO1xuICAgIGlmIChsVmlld1tRVUVSSUVTXSA9PT0gbnVsbClcbiAgICAgICAgbFZpZXdbUVVFUklFU10gPSBuZXcgTFF1ZXJpZXNfKCk7XG4gICAgbFZpZXdbUVVFUklFU10ucXVlcmllcy5wdXNoKG5ldyBMUXVlcnlfKHF1ZXJ5TGlzdCkpO1xufVxuZnVuY3Rpb24gY3JlYXRlVFF1ZXJ5KHRWaWV3LCBtZXRhZGF0YSwgbm9kZUluZGV4KSB7XG4gICAgaWYgKHRWaWV3LnF1ZXJpZXMgPT09IG51bGwpXG4gICAgICAgIHRWaWV3LnF1ZXJpZXMgPSBuZXcgVFF1ZXJpZXNfKCk7XG4gICAgdFZpZXcucXVlcmllcy50cmFjayhuZXcgVFF1ZXJ5XyhtZXRhZGF0YSwgbm9kZUluZGV4KSk7XG59XG5mdW5jdGlvbiBzYXZlQ29udGVudFF1ZXJ5QW5kRGlyZWN0aXZlSW5kZXgodFZpZXcsIGRpcmVjdGl2ZUluZGV4KSB7XG4gICAgY29uc3QgdFZpZXdDb250ZW50UXVlcmllcyA9IHRWaWV3LmNvbnRlbnRRdWVyaWVzIHx8ICh0Vmlldy5jb250ZW50UXVlcmllcyA9IFtdKTtcbiAgICBjb25zdCBsYXN0U2F2ZWREaXJlY3RpdmVJbmRleCA9IHRWaWV3Q29udGVudFF1ZXJpZXMubGVuZ3RoID8gdFZpZXdDb250ZW50UXVlcmllc1t0Vmlld0NvbnRlbnRRdWVyaWVzLmxlbmd0aCAtIDFdIDogLTE7XG4gICAgaWYgKGRpcmVjdGl2ZUluZGV4ICE9PSBsYXN0U2F2ZWREaXJlY3RpdmVJbmRleCkge1xuICAgICAgICB0Vmlld0NvbnRlbnRRdWVyaWVzLnB1c2godFZpZXcucXVlcmllcy5sZW5ndGggLSAxLCBkaXJlY3RpdmVJbmRleCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0VFF1ZXJ5KHRWaWV3LCBpbmRleCkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKHRWaWV3LnF1ZXJpZXMsICdUUXVlcmllcyBtdXN0IGJlIGRlZmluZWQgdG8gcmV0cmlldmUgYSBUUXVlcnknKTtcbiAgICByZXR1cm4gdFZpZXcucXVlcmllcy5nZXRCeUluZGV4KGluZGV4KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFJldHJpZXZlcyBgVGVtcGxhdGVSZWZgIGluc3RhbmNlIGZyb20gYEluamVjdG9yYCB3aGVuIGEgbG9jYWwgcmVmZXJlbmNlIGlzIHBsYWNlZCBvbiB0aGVcbiAqIGA8bmctdGVtcGxhdGU+YCBlbGVtZW50LlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybV0ZW1wbGF0ZVJlZkV4dHJhY3Rvcih0Tm9kZSwgbFZpZXcpIHtcbiAgICByZXR1cm4gY3JlYXRlVGVtcGxhdGVSZWYodE5vZGUsIGxWaWV3KTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBBIG1hcHBpbmcgb2YgdGhlIEBhbmd1bGFyL2NvcmUgQVBJIHN1cmZhY2UgdXNlZCBpbiBnZW5lcmF0ZWQgZXhwcmVzc2lvbnMgdG8gdGhlIGFjdHVhbCBzeW1ib2xzLlxuICpcbiAqIFRoaXMgc2hvdWxkIGJlIGtlcHQgdXAgdG8gZGF0ZSB3aXRoIHRoZSBwdWJsaWMgZXhwb3J0cyBvZiBAYW5ndWxhci9jb3JlLlxuICovXG5jb25zdCBhbmd1bGFyQ29yZUVudiA9ICgoKSA9PiAoe1xuICAgICfJtcm1YXR0cmlidXRlJzogybXJtWF0dHJpYnV0ZSxcbiAgICAnybXJtWF0dHJpYnV0ZUludGVycG9sYXRlMSc6IMm1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTEsXG4gICAgJ8m1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTInOiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUyLFxuICAgICfJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUzJzogybXJtWF0dHJpYnV0ZUludGVycG9sYXRlMyxcbiAgICAnybXJtWF0dHJpYnV0ZUludGVycG9sYXRlNCc6IMm1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTQsXG4gICAgJ8m1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTUnOiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU1LFxuICAgICfJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU2JzogybXJtWF0dHJpYnV0ZUludGVycG9sYXRlNixcbiAgICAnybXJtWF0dHJpYnV0ZUludGVycG9sYXRlNyc6IMm1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTcsXG4gICAgJ8m1ybVhdHRyaWJ1dGVJbnRlcnBvbGF0ZTgnOiDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU4LFxuICAgICfJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGVWJzogybXJtWF0dHJpYnV0ZUludGVycG9sYXRlVixcbiAgICAnybXJtWRlZmluZUNvbXBvbmVudCc6IMm1ybVkZWZpbmVDb21wb25lbnQsXG4gICAgJ8m1ybVkZWZpbmVEaXJlY3RpdmUnOiDJtcm1ZGVmaW5lRGlyZWN0aXZlLFxuICAgICfJtcm1ZGVmaW5lSW5qZWN0YWJsZSc6IMm1ybVkZWZpbmVJbmplY3RhYmxlLFxuICAgICfJtcm1ZGVmaW5lSW5qZWN0b3InOiDJtcm1ZGVmaW5lSW5qZWN0b3IsXG4gICAgJ8m1ybVkZWZpbmVOZ01vZHVsZSc6IMm1ybVkZWZpbmVOZ01vZHVsZSxcbiAgICAnybXJtWRlZmluZVBpcGUnOiDJtcm1ZGVmaW5lUGlwZSxcbiAgICAnybXJtWRpcmVjdGl2ZUluamVjdCc6IMm1ybVkaXJlY3RpdmVJbmplY3QsXG4gICAgJ8m1ybVnZXRJbmhlcml0ZWRGYWN0b3J5JzogybXJtWdldEluaGVyaXRlZEZhY3RvcnksXG4gICAgJ8m1ybVpbmplY3QnOiDJtcm1aW5qZWN0LFxuICAgICfJtcm1aW5qZWN0QXR0cmlidXRlJzogybXJtWluamVjdEF0dHJpYnV0ZSxcbiAgICAnybXJtWludmFsaWRGYWN0b3J5JzogybXJtWludmFsaWRGYWN0b3J5LFxuICAgICfJtcm1aW52YWxpZEZhY3RvcnlEZXAnOiDJtcm1aW52YWxpZEZhY3RvcnlEZXAsXG4gICAgJ8m1ybV0ZW1wbGF0ZVJlZkV4dHJhY3Rvcic6IMm1ybV0ZW1wbGF0ZVJlZkV4dHJhY3RvcixcbiAgICAnybXJtU5nT25DaGFuZ2VzRmVhdHVyZSc6IMm1ybVOZ09uQ2hhbmdlc0ZlYXR1cmUsXG4gICAgJ8m1ybVQcm92aWRlcnNGZWF0dXJlJzogybXJtVByb3ZpZGVyc0ZlYXR1cmUsXG4gICAgJ8m1ybVDb3B5RGVmaW5pdGlvbkZlYXR1cmUnOiDJtcm1Q29weURlZmluaXRpb25GZWF0dXJlLFxuICAgICfJtcm1SW5oZXJpdERlZmluaXRpb25GZWF0dXJlJzogybXJtUluaGVyaXREZWZpbml0aW9uRmVhdHVyZSxcbiAgICAnybXJtW5leHRDb250ZXh0JzogybXJtW5leHRDb250ZXh0LFxuICAgICfJtcm1bmFtZXNwYWNlSFRNTCc6IMm1ybVuYW1lc3BhY2VIVE1MLFxuICAgICfJtcm1bmFtZXNwYWNlTWF0aE1MJzogybXJtW5hbWVzcGFjZU1hdGhNTCxcbiAgICAnybXJtW5hbWVzcGFjZVNWRyc6IMm1ybVuYW1lc3BhY2VTVkcsXG4gICAgJ8m1ybVlbmFibGVCaW5kaW5ncyc6IMm1ybVlbmFibGVCaW5kaW5ncyxcbiAgICAnybXJtWRpc2FibGVCaW5kaW5ncyc6IMm1ybVkaXNhYmxlQmluZGluZ3MsXG4gICAgJ8m1ybVlbGVtZW50U3RhcnQnOiDJtcm1ZWxlbWVudFN0YXJ0LFxuICAgICfJtcm1ZWxlbWVudEVuZCc6IMm1ybVlbGVtZW50RW5kLFxuICAgICfJtcm1ZWxlbWVudCc6IMm1ybVlbGVtZW50LFxuICAgICfJtcm1ZWxlbWVudENvbnRhaW5lclN0YXJ0JzogybXJtWVsZW1lbnRDb250YWluZXJTdGFydCxcbiAgICAnybXJtWVsZW1lbnRDb250YWluZXJFbmQnOiDJtcm1ZWxlbWVudENvbnRhaW5lckVuZCxcbiAgICAnybXJtWVsZW1lbnRDb250YWluZXInOiDJtcm1ZWxlbWVudENvbnRhaW5lcixcbiAgICAnybXJtXB1cmVGdW5jdGlvbjAnOiDJtcm1cHVyZUZ1bmN0aW9uMCxcbiAgICAnybXJtXB1cmVGdW5jdGlvbjEnOiDJtcm1cHVyZUZ1bmN0aW9uMSxcbiAgICAnybXJtXB1cmVGdW5jdGlvbjInOiDJtcm1cHVyZUZ1bmN0aW9uMixcbiAgICAnybXJtXB1cmVGdW5jdGlvbjMnOiDJtcm1cHVyZUZ1bmN0aW9uMyxcbiAgICAnybXJtXB1cmVGdW5jdGlvbjQnOiDJtcm1cHVyZUZ1bmN0aW9uNCxcbiAgICAnybXJtXB1cmVGdW5jdGlvbjUnOiDJtcm1cHVyZUZ1bmN0aW9uNSxcbiAgICAnybXJtXB1cmVGdW5jdGlvbjYnOiDJtcm1cHVyZUZ1bmN0aW9uNixcbiAgICAnybXJtXB1cmVGdW5jdGlvbjcnOiDJtcm1cHVyZUZ1bmN0aW9uNyxcbiAgICAnybXJtXB1cmVGdW5jdGlvbjgnOiDJtcm1cHVyZUZ1bmN0aW9uOCxcbiAgICAnybXJtXB1cmVGdW5jdGlvblYnOiDJtcm1cHVyZUZ1bmN0aW9uVixcbiAgICAnybXJtWdldEN1cnJlbnRWaWV3JzogybXJtWdldEN1cnJlbnRWaWV3LFxuICAgICfJtcm1cmVzdG9yZVZpZXcnOiDJtcm1cmVzdG9yZVZpZXcsXG4gICAgJ8m1ybVsaXN0ZW5lcic6IMm1ybVsaXN0ZW5lcixcbiAgICAnybXJtXByb2plY3Rpb24nOiDJtcm1cHJvamVjdGlvbixcbiAgICAnybXJtXN5bnRoZXRpY0hvc3RQcm9wZXJ0eSc6IMm1ybVzeW50aGV0aWNIb3N0UHJvcGVydHksXG4gICAgJ8m1ybVzeW50aGV0aWNIb3N0TGlzdGVuZXInOiDJtcm1c3ludGhldGljSG9zdExpc3RlbmVyLFxuICAgICfJtcm1cGlwZUJpbmQxJzogybXJtXBpcGVCaW5kMSxcbiAgICAnybXJtXBpcGVCaW5kMic6IMm1ybVwaXBlQmluZDIsXG4gICAgJ8m1ybVwaXBlQmluZDMnOiDJtcm1cGlwZUJpbmQzLFxuICAgICfJtcm1cGlwZUJpbmQ0JzogybXJtXBpcGVCaW5kNCxcbiAgICAnybXJtXBpcGVCaW5kVic6IMm1ybVwaXBlQmluZFYsXG4gICAgJ8m1ybVwcm9qZWN0aW9uRGVmJzogybXJtXByb2plY3Rpb25EZWYsXG4gICAgJ8m1ybVob3N0UHJvcGVydHknOiDJtcm1aG9zdFByb3BlcnR5LFxuICAgICfJtcm1cHJvcGVydHknOiDJtcm1cHJvcGVydHksXG4gICAgJ8m1ybVwcm9wZXJ0eUludGVycG9sYXRlJzogybXJtXByb3BlcnR5SW50ZXJwb2xhdGUsXG4gICAgJ8m1ybVwcm9wZXJ0eUludGVycG9sYXRlMSc6IMm1ybVwcm9wZXJ0eUludGVycG9sYXRlMSxcbiAgICAnybXJtXByb3BlcnR5SW50ZXJwb2xhdGUyJzogybXJtXByb3BlcnR5SW50ZXJwb2xhdGUyLFxuICAgICfJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTMnOiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTMsXG4gICAgJ8m1ybVwcm9wZXJ0eUludGVycG9sYXRlNCc6IMm1ybVwcm9wZXJ0eUludGVycG9sYXRlNCxcbiAgICAnybXJtXByb3BlcnR5SW50ZXJwb2xhdGU1JzogybXJtXByb3BlcnR5SW50ZXJwb2xhdGU1LFxuICAgICfJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTYnOiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTYsXG4gICAgJ8m1ybVwcm9wZXJ0eUludGVycG9sYXRlNyc6IMm1ybVwcm9wZXJ0eUludGVycG9sYXRlNyxcbiAgICAnybXJtXByb3BlcnR5SW50ZXJwb2xhdGU4JzogybXJtXByb3BlcnR5SW50ZXJwb2xhdGU4LFxuICAgICfJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZVYnOiDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZVYsXG4gICAgJ8m1ybVwaXBlJzogybXJtXBpcGUsXG4gICAgJ8m1ybVxdWVyeVJlZnJlc2gnOiDJtcm1cXVlcnlSZWZyZXNoLFxuICAgICfJtcm1dmlld1F1ZXJ5JzogybXJtXZpZXdRdWVyeSxcbiAgICAnybXJtWxvYWRRdWVyeSc6IMm1ybVsb2FkUXVlcnksXG4gICAgJ8m1ybVjb250ZW50UXVlcnknOiDJtcm1Y29udGVudFF1ZXJ5LFxuICAgICfJtcm1cmVmZXJlbmNlJzogybXJtXJlZmVyZW5jZSxcbiAgICAnybXJtWNsYXNzTWFwJzogybXJtWNsYXNzTWFwLFxuICAgICfJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTEnOiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTEsXG4gICAgJ8m1ybVjbGFzc01hcEludGVycG9sYXRlMic6IMm1ybVjbGFzc01hcEludGVycG9sYXRlMixcbiAgICAnybXJtWNsYXNzTWFwSW50ZXJwb2xhdGUzJzogybXJtWNsYXNzTWFwSW50ZXJwb2xhdGUzLFxuICAgICfJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTQnOiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTQsXG4gICAgJ8m1ybVjbGFzc01hcEludGVycG9sYXRlNSc6IMm1ybVjbGFzc01hcEludGVycG9sYXRlNSxcbiAgICAnybXJtWNsYXNzTWFwSW50ZXJwb2xhdGU2JzogybXJtWNsYXNzTWFwSW50ZXJwb2xhdGU2LFxuICAgICfJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTcnOiDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTcsXG4gICAgJ8m1ybVjbGFzc01hcEludGVycG9sYXRlOCc6IMm1ybVjbGFzc01hcEludGVycG9sYXRlOCxcbiAgICAnybXJtWNsYXNzTWFwSW50ZXJwb2xhdGVWJzogybXJtWNsYXNzTWFwSW50ZXJwb2xhdGVWLFxuICAgICfJtcm1c3R5bGVNYXAnOiDJtcm1c3R5bGVNYXAsXG4gICAgJ8m1ybVzdHlsZU1hcEludGVycG9sYXRlMSc6IMm1ybVzdHlsZU1hcEludGVycG9sYXRlMSxcbiAgICAnybXJtXN0eWxlTWFwSW50ZXJwb2xhdGUyJzogybXJtXN0eWxlTWFwSW50ZXJwb2xhdGUyLFxuICAgICfJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTMnOiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTMsXG4gICAgJ8m1ybVzdHlsZU1hcEludGVycG9sYXRlNCc6IMm1ybVzdHlsZU1hcEludGVycG9sYXRlNCxcbiAgICAnybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU1JzogybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU1LFxuICAgICfJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTYnOiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTYsXG4gICAgJ8m1ybVzdHlsZU1hcEludGVycG9sYXRlNyc6IMm1ybVzdHlsZU1hcEludGVycG9sYXRlNyxcbiAgICAnybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU4JzogybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU4LFxuICAgICfJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZVYnOiDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZVYsXG4gICAgJ8m1ybVzdHlsZVByb3AnOiDJtcm1c3R5bGVQcm9wLFxuICAgICfJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGUxJzogybXJtXN0eWxlUHJvcEludGVycG9sYXRlMSxcbiAgICAnybXJtXN0eWxlUHJvcEludGVycG9sYXRlMic6IMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTIsXG4gICAgJ8m1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTMnOiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGUzLFxuICAgICfJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGU0JzogybXJtXN0eWxlUHJvcEludGVycG9sYXRlNCxcbiAgICAnybXJtXN0eWxlUHJvcEludGVycG9sYXRlNSc6IMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTUsXG4gICAgJ8m1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTYnOiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGU2LFxuICAgICfJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGU3JzogybXJtXN0eWxlUHJvcEludGVycG9sYXRlNyxcbiAgICAnybXJtXN0eWxlUHJvcEludGVycG9sYXRlOCc6IMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTgsXG4gICAgJ8m1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZVYnOiDJtcm1c3R5bGVQcm9wSW50ZXJwb2xhdGVWLFxuICAgICfJtcm1Y2xhc3NQcm9wJzogybXJtWNsYXNzUHJvcCxcbiAgICAnybXJtWFkdmFuY2UnOiDJtcm1YWR2YW5jZSxcbiAgICAnybXJtXRlbXBsYXRlJzogybXJtXRlbXBsYXRlLFxuICAgICfJtcm1dGV4dCc6IMm1ybV0ZXh0LFxuICAgICfJtcm1dGV4dEludGVycG9sYXRlJzogybXJtXRleHRJbnRlcnBvbGF0ZSxcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZTEnOiDJtcm1dGV4dEludGVycG9sYXRlMSxcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZTInOiDJtcm1dGV4dEludGVycG9sYXRlMixcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZTMnOiDJtcm1dGV4dEludGVycG9sYXRlMyxcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZTQnOiDJtcm1dGV4dEludGVycG9sYXRlNCxcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZTUnOiDJtcm1dGV4dEludGVycG9sYXRlNSxcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZTYnOiDJtcm1dGV4dEludGVycG9sYXRlNixcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZTcnOiDJtcm1dGV4dEludGVycG9sYXRlNyxcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZTgnOiDJtcm1dGV4dEludGVycG9sYXRlOCxcbiAgICAnybXJtXRleHRJbnRlcnBvbGF0ZVYnOiDJtcm1dGV4dEludGVycG9sYXRlVixcbiAgICAnybXJtWkxOG4nOiDJtcm1aTE4bixcbiAgICAnybXJtWkxOG5BdHRyaWJ1dGVzJzogybXJtWkxOG5BdHRyaWJ1dGVzLFxuICAgICfJtcm1aTE4bkV4cCc6IMm1ybVpMThuRXhwLFxuICAgICfJtcm1aTE4blN0YXJ0JzogybXJtWkxOG5TdGFydCxcbiAgICAnybXJtWkxOG5FbmQnOiDJtcm1aTE4bkVuZCxcbiAgICAnybXJtWkxOG5BcHBseSc6IMm1ybVpMThuQXBwbHksXG4gICAgJ8m1ybVpMThuUG9zdHByb2Nlc3MnOiDJtcm1aTE4blBvc3Rwcm9jZXNzLFxuICAgICfJtcm1cmVzb2x2ZVdpbmRvdyc6IMm1ybVyZXNvbHZlV2luZG93LFxuICAgICfJtcm1cmVzb2x2ZURvY3VtZW50JzogybXJtXJlc29sdmVEb2N1bWVudCxcbiAgICAnybXJtXJlc29sdmVCb2R5JzogybXJtXJlc29sdmVCb2R5LFxuICAgICfJtcm1c2V0Q29tcG9uZW50U2NvcGUnOiDJtcm1c2V0Q29tcG9uZW50U2NvcGUsXG4gICAgJ8m1ybVzZXROZ01vZHVsZVNjb3BlJzogybXJtXNldE5nTW9kdWxlU2NvcGUsXG4gICAgJ8m1ybVzYW5pdGl6ZUh0bWwnOiDJtcm1c2FuaXRpemVIdG1sLFxuICAgICfJtcm1c2FuaXRpemVTdHlsZSc6IMm1ybVzYW5pdGl6ZVN0eWxlLFxuICAgICfJtcm1c2FuaXRpemVSZXNvdXJjZVVybCc6IMm1ybVzYW5pdGl6ZVJlc291cmNlVXJsLFxuICAgICfJtcm1c2FuaXRpemVTY3JpcHQnOiDJtcm1c2FuaXRpemVTY3JpcHQsXG4gICAgJ8m1ybVzYW5pdGl6ZVVybCc6IMm1ybVzYW5pdGl6ZVVybCxcbiAgICAnybXJtXNhbml0aXplVXJsT3JSZXNvdXJjZVVybCc6IMm1ybVzYW5pdGl6ZVVybE9yUmVzb3VyY2VVcmwsXG4gICAgJ8m1ybV0cnVzdENvbnN0YW50SHRtbCc6IMm1ybV0cnVzdENvbnN0YW50SHRtbCxcbiAgICAnybXJtXRydXN0Q29uc3RhbnRSZXNvdXJjZVVybCc6IMm1ybV0cnVzdENvbnN0YW50UmVzb3VyY2VVcmwsXG4gICAgJ2ZvcndhcmRSZWYnOiBmb3J3YXJkUmVmLFxuICAgICdyZXNvbHZlRm9yd2FyZFJlZic6IHJlc29sdmVGb3J3YXJkUmVmLFxufSkpKCk7XG5cbmxldCBqaXRPcHRpb25zID0gbnVsbDtcbmZ1bmN0aW9uIHNldEppdE9wdGlvbnMob3B0aW9ucykge1xuICAgIGlmIChqaXRPcHRpb25zICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRFbmNhcHN1bGF0aW9uICE9PSBqaXRPcHRpb25zLmRlZmF1bHRFbmNhcHN1bGF0aW9uKSB7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdQcm92aWRlZCB2YWx1ZSBmb3IgYGRlZmF1bHRFbmNhcHN1bGF0aW9uYCBjYW4gbm90IGJlIGNoYW5nZWQgb25jZSBpdCBoYXMgYmVlbiBzZXQuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlcyAhPT0gaml0T3B0aW9ucy5wcmVzZXJ2ZVdoaXRlc3BhY2VzKSB7XG4gICAgICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdQcm92aWRlZCB2YWx1ZSBmb3IgYHByZXNlcnZlV2hpdGVzcGFjZXNgIGNhbiBub3QgYmUgY2hhbmdlZCBvbmNlIGl0IGhhcyBiZWVuIHNldC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBqaXRPcHRpb25zID0gb3B0aW9ucztcbn1cbmZ1bmN0aW9uIGdldEppdE9wdGlvbnMoKSB7XG4gICAgcmV0dXJuIGppdE9wdGlvbnM7XG59XG5mdW5jdGlvbiByZXNldEppdE9wdGlvbnMoKSB7XG4gICAgaml0T3B0aW9ucyA9IG51bGw7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgbW9kdWxlUXVldWUgPSBbXTtcbi8qKlxuICogRW5xdWV1ZXMgbW9kdWxlRGVmIHRvIGJlIGNoZWNrZWQgbGF0ZXIgdG8gc2VlIGlmIHNjb3BlIGNhbiBiZSBzZXQgb24gaXRzXG4gKiBjb21wb25lbnQgZGVjbGFyYXRpb25zLlxuICovXG5mdW5jdGlvbiBlbnF1ZXVlTW9kdWxlRm9yRGVsYXllZFNjb3BpbmcobW9kdWxlVHlwZSwgbmdNb2R1bGUpIHtcbiAgICBtb2R1bGVRdWV1ZS5wdXNoKHsgbW9kdWxlVHlwZSwgbmdNb2R1bGUgfSk7XG59XG5sZXQgZmx1c2hpbmdNb2R1bGVRdWV1ZSA9IGZhbHNlO1xuLyoqXG4gKiBMb29wcyBvdmVyIHF1ZXVlZCBtb2R1bGUgZGVmaW5pdGlvbnMsIGlmIGEgZ2l2ZW4gbW9kdWxlIGRlZmluaXRpb24gaGFzIGFsbCBvZiBpdHNcbiAqIGRlY2xhcmF0aW9ucyByZXNvbHZlZCwgaXQgZGVxdWV1ZXMgdGhhdCBtb2R1bGUgZGVmaW5pdGlvbiBhbmQgc2V0cyB0aGUgc2NvcGUgb25cbiAqIGl0cyBkZWNsYXJhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoTW9kdWxlU2NvcGluZ1F1ZXVlQXNNdWNoQXNQb3NzaWJsZSgpIHtcbiAgICBpZiAoIWZsdXNoaW5nTW9kdWxlUXVldWUpIHtcbiAgICAgICAgZmx1c2hpbmdNb2R1bGVRdWV1ZSA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gbW9kdWxlUXVldWUubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG1vZHVsZVR5cGUsIG5nTW9kdWxlIH0gPSBtb2R1bGVRdWV1ZVtpXTtcbiAgICAgICAgICAgICAgICBpZiAobmdNb2R1bGUuZGVjbGFyYXRpb25zICYmIG5nTW9kdWxlLmRlY2xhcmF0aW9ucy5ldmVyeShpc1Jlc29sdmVkRGVjbGFyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRlcXVldWVcbiAgICAgICAgICAgICAgICAgICAgbW9kdWxlUXVldWUuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBzZXRTY29wZU9uRGVjbGFyZWRDb21wb25lbnRzKG1vZHVsZVR5cGUsIG5nTW9kdWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICBmbHVzaGluZ01vZHVsZVF1ZXVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdHJ1dGh5IGlmIGEgZGVjbGFyYXRpb24gaGFzIHJlc29sdmVkLiBJZiB0aGUgZGVjbGFyYXRpb24gaGFwcGVucyB0byBiZVxuICogYW4gYXJyYXkgb2YgZGVjbGFyYXRpb25zLCBpdCB3aWxsIHJlY3Vyc2UgdG8gY2hlY2sgZWFjaCBkZWNsYXJhdGlvbiBpbiB0aGF0IGFycmF5XG4gKiAod2hpY2ggbWF5IGFsc28gYmUgYXJyYXlzKS5cbiAqL1xuZnVuY3Rpb24gaXNSZXNvbHZlZERlY2xhcmF0aW9uKGRlY2xhcmF0aW9uKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVjbGFyYXRpb24pKSB7XG4gICAgICAgIHJldHVybiBkZWNsYXJhdGlvbi5ldmVyeShpc1Jlc29sdmVkRGVjbGFyYXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gISFyZXNvbHZlRm9yd2FyZFJlZihkZWNsYXJhdGlvbik7XG59XG4vKipcbiAqIENvbXBpbGVzIGEgbW9kdWxlIGluIEpJVCBtb2RlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gYXV0b21hdGljYWxseSBnZXRzIGNhbGxlZCB3aGVuIGEgY2xhc3MgaGFzIGEgYEBOZ01vZHVsZWAgZGVjb3JhdG9yLlxuICovXG5mdW5jdGlvbiBjb21waWxlTmdNb2R1bGUobW9kdWxlVHlwZSwgbmdNb2R1bGUgPSB7fSkge1xuICAgIGNvbXBpbGVOZ01vZHVsZURlZnMobW9kdWxlVHlwZSwgbmdNb2R1bGUpO1xuICAgIC8vIEJlY2F1c2Ugd2UgZG9uJ3Qga25vdyBpZiBhbGwgZGVjbGFyYXRpb25zIGhhdmUgcmVzb2x2ZWQgeWV0IGF0IHRoZSBtb21lbnQgdGhlXG4gICAgLy8gTmdNb2R1bGUgZGVjb3JhdG9yIGlzIGV4ZWN1dGluZywgd2UncmUgZW5xdWV1ZWluZyB0aGUgc2V0dGluZyBvZiBtb2R1bGUgc2NvcGVcbiAgICAvLyBvbiBpdHMgZGVjbGFyYXRpb25zIHRvIGJlIHJ1biBhdCBhIGxhdGVyIHRpbWUgd2hlbiBhbGwgZGVjbGFyYXRpb25zIGZvciB0aGUgbW9kdWxlLFxuICAgIC8vIGluY2x1ZGluZyBmb3J3YXJkIHJlZnMsIGhhdmUgcmVzb2x2ZWQuXG4gICAgZW5xdWV1ZU1vZHVsZUZvckRlbGF5ZWRTY29waW5nKG1vZHVsZVR5cGUsIG5nTW9kdWxlKTtcbn1cbi8qKlxuICogQ29tcGlsZXMgYW5kIGFkZHMgdGhlIGDJtW1vZGAsIGDJtWZhY2AgYW5kIGDJtWluamAgcHJvcGVydGllcyB0byB0aGUgbW9kdWxlIGNsYXNzLlxuICpcbiAqIEl0J3MgcG9zc2libGUgdG8gY29tcGlsZSBhIG1vZHVsZSB2aWEgdGhpcyBBUEkgd2hpY2ggd2lsbCBhbGxvdyBkdXBsaWNhdGUgZGVjbGFyYXRpb25zIGluIGl0c1xuICogcm9vdC5cbiAqL1xuZnVuY3Rpb24gY29tcGlsZU5nTW9kdWxlRGVmcyhtb2R1bGVUeXBlLCBuZ01vZHVsZSwgYWxsb3dEdXBsaWNhdGVEZWNsYXJhdGlvbnNJblJvb3QgPSBmYWxzZSkge1xuICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREZWZpbmVkKG1vZHVsZVR5cGUsICdSZXF1aXJlZCB2YWx1ZSBtb2R1bGVUeXBlJyk7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydERlZmluZWQobmdNb2R1bGUsICdSZXF1aXJlZCB2YWx1ZSBuZ01vZHVsZScpO1xuICAgIGNvbnN0IGRlY2xhcmF0aW9ucyA9IGZsYXR0ZW4obmdNb2R1bGUuZGVjbGFyYXRpb25zIHx8IEVNUFRZX0FSUkFZKTtcbiAgICBsZXQgbmdNb2R1bGVEZWYgPSBudWxsO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGVUeXBlLCBOR19NT0RfREVGLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAobmdNb2R1bGVEZWYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobmdEZXZNb2RlICYmIG5nTW9kdWxlLmltcG9ydHMgJiYgbmdNb2R1bGUuaW1wb3J0cy5pbmRleE9mKG1vZHVsZVR5cGUpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBhc3NlcnQgdGhpcyBpbW1lZGlhdGVseSwgYmVjYXVzZSBhbGxvd2luZyBpdCB0byBjb250aW51ZSB3aWxsIGNhdXNlIGl0IHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIGdvIGludG8gYW4gaW5maW5pdGUgbG9vcCBiZWZvcmUgd2UndmUgcmVhY2hlZCB0aGUgcG9pbnQgd2hlcmUgd2UgdGhyb3cgYWxsIHRoZSBlcnJvcnMuXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7c3RyaW5naWZ5Rm9yRXJyb3IobW9kdWxlVHlwZSl9JyBtb2R1bGUgY2FuJ3QgaW1wb3J0IGl0c2VsZmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHsgdXNhZ2U6IDAgLyogRGVjb3JhdG9yICovLCBraW5kOiAnTmdNb2R1bGUnLCB0eXBlOiBtb2R1bGVUeXBlIH0pO1xuICAgICAgICAgICAgICAgIG5nTW9kdWxlRGVmID0gY29tcGlsZXIuY29tcGlsZU5nTW9kdWxlKGFuZ3VsYXJDb3JlRW52LCBgbmc6Ly8vJHttb2R1bGVUeXBlLm5hbWV9L8m1bW9kLmpzYCwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBtb2R1bGVUeXBlLFxuICAgICAgICAgICAgICAgICAgICBib290c3RyYXA6IGZsYXR0ZW4obmdNb2R1bGUuYm9vdHN0cmFwIHx8IEVNUFRZX0FSUkFZKS5tYXAocmVzb2x2ZUZvcndhcmRSZWYpLFxuICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IGRlY2xhcmF0aW9ucy5tYXAocmVzb2x2ZUZvcndhcmRSZWYpLFxuICAgICAgICAgICAgICAgICAgICBpbXBvcnRzOiBmbGF0dGVuKG5nTW9kdWxlLmltcG9ydHMgfHwgRU1QVFlfQVJSQVkpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKHJlc29sdmVGb3J3YXJkUmVmKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChleHBhbmRNb2R1bGVXaXRoUHJvdmlkZXJzKSxcbiAgICAgICAgICAgICAgICAgICAgZXhwb3J0czogZmxhdHRlbihuZ01vZHVsZS5leHBvcnRzIHx8IEVNUFRZX0FSUkFZKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChyZXNvbHZlRm9yd2FyZFJlZilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZXhwYW5kTW9kdWxlV2l0aFByb3ZpZGVycyksXG4gICAgICAgICAgICAgICAgICAgIHNjaGVtYXM6IG5nTW9kdWxlLnNjaGVtYXMgPyBmbGF0dGVuKG5nTW9kdWxlLnNjaGVtYXMpIDogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG5nTW9kdWxlLmlkIHx8IG51bGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLy8gU2V0IGBzY2hlbWFzYCBvbiBuZ01vZHVsZURlZiB0byBhbiBlbXB0eSBhcnJheSBpbiBKSVQgbW9kZSB0byBpbmRpY2F0ZSB0aGF0IHJ1bnRpbWVcbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgdmVyaWZ5IHRoYXQgdGhlcmUgYXJlIG5vIHVua25vd24gZWxlbWVudHMgaW4gYSB0ZW1wbGF0ZS4gSW4gQU9UIG1vZGUsIHRoYXQgY2hlY2tcbiAgICAgICAgICAgICAgICAvLyBoYXBwZW5zIGF0IGNvbXBpbGUgdGltZSBhbmQgYHNjaGVtYXNgIGluZm9ybWF0aW9uIGlzIG5vdCBwcmVzZW50IG9uIENvbXBvbmVudCBhbmQgTW9kdWxlXG4gICAgICAgICAgICAgICAgLy8gZGVmcyBhZnRlciBjb21waWxhdGlvbiAoc28gdGhlIGNoZWNrIGRvZXNuJ3QgaGFwcGVuIHRoZSBzZWNvbmQgdGltZSBhdCBydW50aW1lKS5cbiAgICAgICAgICAgICAgICBpZiAoIW5nTW9kdWxlRGVmLnNjaGVtYXMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmdNb2R1bGVEZWYuc2NoZW1hcyA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZ01vZHVsZURlZjtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBuZ0ZhY3RvcnlEZWYgPSBudWxsO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGVUeXBlLCBOR19GQUNUT1JZX0RFRiwge1xuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChuZ0ZhY3RvcnlEZWYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHsgdXNhZ2U6IDAgLyogRGVjb3JhdG9yICovLCBraW5kOiAnTmdNb2R1bGUnLCB0eXBlOiBtb2R1bGVUeXBlIH0pO1xuICAgICAgICAgICAgICAgIG5nRmFjdG9yeURlZiA9IGNvbXBpbGVyLmNvbXBpbGVGYWN0b3J5KGFuZ3VsYXJDb3JlRW52LCBgbmc6Ly8vJHttb2R1bGVUeXBlLm5hbWV9L8m1ZmFjLmpzYCwge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBtb2R1bGVUeXBlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG1vZHVsZVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGRlcHM6IHJlZmxlY3REZXBlbmRlbmNpZXMobW9kdWxlVHlwZSksXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogY29tcGlsZXIuRmFjdG9yeVRhcmdldC5OZ01vZHVsZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZUFyZ3VtZW50Q291bnQ6IDAsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmdGYWN0b3J5RGVmO1xuICAgICAgICB9LFxuICAgICAgICAvLyBNYWtlIHRoZSBwcm9wZXJ0eSBjb25maWd1cmFibGUgaW4gZGV2IG1vZGUgdG8gYWxsb3cgb3ZlcnJpZGluZyBpbiB0ZXN0c1xuICAgICAgICBjb25maWd1cmFibGU6ICEhbmdEZXZNb2RlLFxuICAgIH0pO1xuICAgIGxldCBuZ0luamVjdG9yRGVmID0gbnVsbDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlVHlwZSwgTkdfSU5KX0RFRiwge1xuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChuZ0luamVjdG9yRGVmID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgICAgIHZlcmlmeVNlbWFudGljc09mTmdNb2R1bGVEZWYobW9kdWxlVHlwZSwgYWxsb3dEdXBsaWNhdGVEZWNsYXJhdGlvbnNJblJvb3QpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IG1vZHVsZVR5cGUubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbW9kdWxlVHlwZSxcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBuZ01vZHVsZS5wcm92aWRlcnMgfHwgRU1QVFlfQVJSQVksXG4gICAgICAgICAgICAgICAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIChuZ01vZHVsZS5pbXBvcnRzIHx8IEVNUFRZX0FSUkFZKS5tYXAocmVzb2x2ZUZvcndhcmRSZWYpLFxuICAgICAgICAgICAgICAgICAgICAgICAgKG5nTW9kdWxlLmV4cG9ydHMgfHwgRU1QVFlfQVJSQVkpLm1hcChyZXNvbHZlRm9yd2FyZFJlZiksXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHsgdXNhZ2U6IDAgLyogRGVjb3JhdG9yICovLCBraW5kOiAnTmdNb2R1bGUnLCB0eXBlOiBtb2R1bGVUeXBlIH0pO1xuICAgICAgICAgICAgICAgIG5nSW5qZWN0b3JEZWYgPVxuICAgICAgICAgICAgICAgICAgICBjb21waWxlci5jb21waWxlSW5qZWN0b3IoYW5ndWxhckNvcmVFbnYsIGBuZzovLy8ke21vZHVsZVR5cGUubmFtZX0vybVpbmouanNgLCBtZXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZ0luamVjdG9yRGVmO1xuICAgICAgICB9LFxuICAgICAgICAvLyBNYWtlIHRoZSBwcm9wZXJ0eSBjb25maWd1cmFibGUgaW4gZGV2IG1vZGUgdG8gYWxsb3cgb3ZlcnJpZGluZyBpbiB0ZXN0c1xuICAgICAgICBjb25maWd1cmFibGU6ICEhbmdEZXZNb2RlLFxuICAgIH0pO1xufVxuZnVuY3Rpb24gdmVyaWZ5U2VtYW50aWNzT2ZOZ01vZHVsZURlZihtb2R1bGVUeXBlLCBhbGxvd0R1cGxpY2F0ZURlY2xhcmF0aW9uc0luUm9vdCwgaW1wb3J0aW5nTW9kdWxlKSB7XG4gICAgaWYgKHZlcmlmaWVkTmdNb2R1bGUuZ2V0KG1vZHVsZVR5cGUpKVxuICAgICAgICByZXR1cm47XG4gICAgdmVyaWZpZWROZ01vZHVsZS5zZXQobW9kdWxlVHlwZSwgdHJ1ZSk7XG4gICAgbW9kdWxlVHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKG1vZHVsZVR5cGUpO1xuICAgIGxldCBuZ01vZHVsZURlZjtcbiAgICBpZiAoaW1wb3J0aW5nTW9kdWxlKSB7XG4gICAgICAgIG5nTW9kdWxlRGVmID0gZ2V0TmdNb2R1bGVEZWYobW9kdWxlVHlwZSk7XG4gICAgICAgIGlmICghbmdNb2R1bGVEZWYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB2YWx1ZSAnJHttb2R1bGVUeXBlLm5hbWV9JyBpbXBvcnRlZCBieSB0aGUgbW9kdWxlICcke2ltcG9ydGluZ01vZHVsZS5uYW1lfScuIFBsZWFzZSBhZGQgYW4gQE5nTW9kdWxlIGFubm90YXRpb24uYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5nTW9kdWxlRGVmID0gZ2V0TmdNb2R1bGVEZWYobW9kdWxlVHlwZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xuICAgIGNvbnN0IGRlY2xhcmF0aW9ucyA9IG1heWJlVW53cmFwRm4obmdNb2R1bGVEZWYuZGVjbGFyYXRpb25zKTtcbiAgICBjb25zdCBpbXBvcnRzID0gbWF5YmVVbndyYXBGbihuZ01vZHVsZURlZi5pbXBvcnRzKTtcbiAgICBmbGF0dGVuKGltcG9ydHMpLm1hcCh1bndyYXBNb2R1bGVXaXRoUHJvdmlkZXJzSW1wb3J0cykuZm9yRWFjaChtb2QgPT4ge1xuICAgICAgICB2ZXJpZnlTZW1hbnRpY3NPZk5nTW9kdWxlSW1wb3J0KG1vZCwgbW9kdWxlVHlwZSk7XG4gICAgICAgIHZlcmlmeVNlbWFudGljc09mTmdNb2R1bGVEZWYobW9kLCBmYWxzZSwgbW9kdWxlVHlwZSk7XG4gICAgfSk7XG4gICAgY29uc3QgZXhwb3J0cyA9IG1heWJlVW53cmFwRm4obmdNb2R1bGVEZWYuZXhwb3J0cyk7XG4gICAgZGVjbGFyYXRpb25zLmZvckVhY2godmVyaWZ5RGVjbGFyYXRpb25zSGF2ZURlZmluaXRpb25zKTtcbiAgICBkZWNsYXJhdGlvbnMuZm9yRWFjaCh2ZXJpZnlEaXJlY3RpdmVzSGF2ZVNlbGVjdG9yKTtcbiAgICBjb25zdCBjb21iaW5lZERlY2xhcmF0aW9ucyA9IFtcbiAgICAgICAgLi4uZGVjbGFyYXRpb25zLm1hcChyZXNvbHZlRm9yd2FyZFJlZiksXG4gICAgICAgIC4uLmZsYXR0ZW4oaW1wb3J0cy5tYXAoY29tcHV0ZUNvbWJpbmVkRXhwb3J0cykpLm1hcChyZXNvbHZlRm9yd2FyZFJlZiksXG4gICAgXTtcbiAgICBleHBvcnRzLmZvckVhY2godmVyaWZ5RXhwb3J0c0FyZURlY2xhcmVkT3JSZUV4cG9ydGVkKTtcbiAgICBkZWNsYXJhdGlvbnMuZm9yRWFjaChkZWNsID0+IHZlcmlmeURlY2xhcmF0aW9uSXNVbmlxdWUoZGVjbCwgYWxsb3dEdXBsaWNhdGVEZWNsYXJhdGlvbnNJblJvb3QpKTtcbiAgICBkZWNsYXJhdGlvbnMuZm9yRWFjaCh2ZXJpZnlDb21wb25lbnRFbnRyeUNvbXBvbmVudHNJc1BhcnRPZk5nTW9kdWxlKTtcbiAgICBjb25zdCBuZ01vZHVsZSA9IGdldEFubm90YXRpb24obW9kdWxlVHlwZSwgJ05nTW9kdWxlJyk7XG4gICAgaWYgKG5nTW9kdWxlKSB7XG4gICAgICAgIG5nTW9kdWxlLmltcG9ydHMgJiZcbiAgICAgICAgICAgIGZsYXR0ZW4obmdNb2R1bGUuaW1wb3J0cykubWFwKHVud3JhcE1vZHVsZVdpdGhQcm92aWRlcnNJbXBvcnRzKS5mb3JFYWNoKG1vZCA9PiB7XG4gICAgICAgICAgICAgICAgdmVyaWZ5U2VtYW50aWNzT2ZOZ01vZHVsZUltcG9ydChtb2QsIG1vZHVsZVR5cGUpO1xuICAgICAgICAgICAgICAgIHZlcmlmeVNlbWFudGljc09mTmdNb2R1bGVEZWYobW9kLCBmYWxzZSwgbW9kdWxlVHlwZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmdNb2R1bGUuYm9vdHN0cmFwICYmIGRlZXBGb3JFYWNoKG5nTW9kdWxlLmJvb3RzdHJhcCwgdmVyaWZ5Q29ycmVjdEJvb3RzdHJhcFR5cGUpO1xuICAgICAgICBuZ01vZHVsZS5ib290c3RyYXAgJiYgZGVlcEZvckVhY2gobmdNb2R1bGUuYm9vdHN0cmFwLCB2ZXJpZnlDb21wb25lbnRJc1BhcnRPZk5nTW9kdWxlKTtcbiAgICAgICAgbmdNb2R1bGUuZW50cnlDb21wb25lbnRzICYmXG4gICAgICAgICAgICBkZWVwRm9yRWFjaChuZ01vZHVsZS5lbnRyeUNvbXBvbmVudHMsIHZlcmlmeUNvbXBvbmVudElzUGFydE9mTmdNb2R1bGUpO1xuICAgIH1cbiAgICAvLyBUaHJvdyBFcnJvciBpZiBhbnkgZXJyb3JzIHdlcmUgZGV0ZWN0ZWQuXG4gICAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5qb2luKCdcXG4nKSk7XG4gICAgfVxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGZ1bmN0aW9uIHZlcmlmeURlY2xhcmF0aW9uc0hhdmVEZWZpbml0aW9ucyh0eXBlKSB7XG4gICAgICAgIHR5cGUgPSByZXNvbHZlRm9yd2FyZFJlZih0eXBlKTtcbiAgICAgICAgY29uc3QgZGVmID0gZ2V0Q29tcG9uZW50RGVmKHR5cGUpIHx8IGdldERpcmVjdGl2ZURlZih0eXBlKSB8fCBnZXRQaXBlRGVmJDEodHlwZSk7XG4gICAgICAgIGlmICghZGVmKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChgVW5leHBlY3RlZCB2YWx1ZSAnJHtzdHJpbmdpZnlGb3JFcnJvcih0eXBlKX0nIGRlY2xhcmVkIGJ5IHRoZSBtb2R1bGUgJyR7c3RyaW5naWZ5Rm9yRXJyb3IobW9kdWxlVHlwZSl9Jy4gUGxlYXNlIGFkZCBhIEBQaXBlL0BEaXJlY3RpdmUvQENvbXBvbmVudCBhbm5vdGF0aW9uLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcmlmeURpcmVjdGl2ZXNIYXZlU2VsZWN0b3IodHlwZSkge1xuICAgICAgICB0eXBlID0gcmVzb2x2ZUZvcndhcmRSZWYodHlwZSk7XG4gICAgICAgIGNvbnN0IGRlZiA9IGdldERpcmVjdGl2ZURlZih0eXBlKTtcbiAgICAgICAgaWYgKCFnZXRDb21wb25lbnREZWYodHlwZSkgJiYgZGVmICYmIGRlZi5zZWxlY3RvcnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKGBEaXJlY3RpdmUgJHtzdHJpbmdpZnlGb3JFcnJvcih0eXBlKX0gaGFzIG5vIHNlbGVjdG9yLCBwbGVhc2UgYWRkIGl0IWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcmlmeUV4cG9ydHNBcmVEZWNsYXJlZE9yUmVFeHBvcnRlZCh0eXBlKSB7XG4gICAgICAgIHR5cGUgPSByZXNvbHZlRm9yd2FyZFJlZih0eXBlKTtcbiAgICAgICAgY29uc3Qga2luZCA9IGdldENvbXBvbmVudERlZih0eXBlKSAmJiAnY29tcG9uZW50JyB8fCBnZXREaXJlY3RpdmVEZWYodHlwZSkgJiYgJ2RpcmVjdGl2ZScgfHxcbiAgICAgICAgICAgIGdldFBpcGVEZWYkMSh0eXBlKSAmJiAncGlwZSc7XG4gICAgICAgIGlmIChraW5kKSB7XG4gICAgICAgICAgICAvLyBvbmx5IGNoZWNrZWQgaWYgd2UgYXJlIGRlY2xhcmVkIGFzIENvbXBvbmVudCwgRGlyZWN0aXZlLCBvciBQaXBlXG4gICAgICAgICAgICAvLyBNb2R1bGVzIGRvbid0IG5lZWQgdG8gYmUgZGVjbGFyZWQgb3IgaW1wb3J0ZWQuXG4gICAgICAgICAgICBpZiAoY29tYmluZWREZWNsYXJhdGlvbnMubGFzdEluZGV4T2YodHlwZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgYXJlIGV4cG9ydGluZyBzb21ldGhpbmcgd2hpY2ggd2UgZG9uJ3QgZXhwbGljaXRseSBkZWNsYXJlIG9yIGltcG9ydC5cbiAgICAgICAgICAgICAgICBlcnJvcnMucHVzaChgQ2FuJ3QgZXhwb3J0ICR7a2luZH0gJHtzdHJpbmdpZnlGb3JFcnJvcih0eXBlKX0gZnJvbSAke3N0cmluZ2lmeUZvckVycm9yKG1vZHVsZVR5cGUpfSBhcyBpdCB3YXMgbmVpdGhlciBkZWNsYXJlZCBub3IgaW1wb3J0ZWQhYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdmVyaWZ5RGVjbGFyYXRpb25Jc1VuaXF1ZSh0eXBlLCBzdXBwcmVzc0Vycm9ycykge1xuICAgICAgICB0eXBlID0gcmVzb2x2ZUZvcndhcmRSZWYodHlwZSk7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nTW9kdWxlID0gb3duZXJOZ01vZHVsZS5nZXQodHlwZSk7XG4gICAgICAgIGlmIChleGlzdGluZ01vZHVsZSAmJiBleGlzdGluZ01vZHVsZSAhPT0gbW9kdWxlVHlwZSkge1xuICAgICAgICAgICAgaWYgKCFzdXBwcmVzc0Vycm9ycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZHVsZXMgPSBbZXhpc3RpbmdNb2R1bGUsIG1vZHVsZVR5cGVdLm1hcChzdHJpbmdpZnlGb3JFcnJvcikuc29ydCgpO1xuICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGBUeXBlICR7c3RyaW5naWZ5Rm9yRXJyb3IodHlwZSl9IGlzIHBhcnQgb2YgdGhlIGRlY2xhcmF0aW9ucyBvZiAyIG1vZHVsZXM6ICR7bW9kdWxlc1swXX0gYW5kICR7bW9kdWxlc1sxXX0hIGAgK1xuICAgICAgICAgICAgICAgICAgICBgUGxlYXNlIGNvbnNpZGVyIG1vdmluZyAke3N0cmluZ2lmeUZvckVycm9yKHR5cGUpfSB0byBhIGhpZ2hlciBtb2R1bGUgdGhhdCBpbXBvcnRzICR7bW9kdWxlc1swXX0gYW5kICR7bW9kdWxlc1sxXX0uIGAgK1xuICAgICAgICAgICAgICAgICAgICBgWW91IGNhbiBhbHNvIGNyZWF0ZSBhIG5ldyBOZ01vZHVsZSB0aGF0IGV4cG9ydHMgYW5kIGluY2x1ZGVzICR7c3RyaW5naWZ5Rm9yRXJyb3IodHlwZSl9IHRoZW4gaW1wb3J0IHRoYXQgTmdNb2R1bGUgaW4gJHttb2R1bGVzWzBdfSBhbmQgJHttb2R1bGVzWzFdfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE1hcmsgdHlwZSBhcyBoYXZpbmcgb3duZXIuXG4gICAgICAgICAgICBvd25lck5nTW9kdWxlLnNldCh0eXBlLCBtb2R1bGVUeXBlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB2ZXJpZnlDb21wb25lbnRJc1BhcnRPZk5nTW9kdWxlKHR5cGUpIHtcbiAgICAgICAgdHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKHR5cGUpO1xuICAgICAgICBjb25zdCBleGlzdGluZ01vZHVsZSA9IG93bmVyTmdNb2R1bGUuZ2V0KHR5cGUpO1xuICAgICAgICBpZiAoIWV4aXN0aW5nTW9kdWxlKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChgQ29tcG9uZW50ICR7c3RyaW5naWZ5Rm9yRXJyb3IodHlwZSl9IGlzIG5vdCBwYXJ0IG9mIGFueSBOZ01vZHVsZSBvciB0aGUgbW9kdWxlIGhhcyBub3QgYmVlbiBpbXBvcnRlZCBpbnRvIHlvdXIgbW9kdWxlLmApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZlcmlmeUNvcnJlY3RCb290c3RyYXBUeXBlKHR5cGUpIHtcbiAgICAgICAgdHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKHR5cGUpO1xuICAgICAgICBpZiAoIWdldENvbXBvbmVudERlZih0eXBlKSkge1xuICAgICAgICAgICAgZXJyb3JzLnB1c2goYCR7c3RyaW5naWZ5Rm9yRXJyb3IodHlwZSl9IGNhbm5vdCBiZSB1c2VkIGFzIGFuIGVudHJ5IGNvbXBvbmVudC5gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB2ZXJpZnlDb21wb25lbnRFbnRyeUNvbXBvbmVudHNJc1BhcnRPZk5nTW9kdWxlKHR5cGUpIHtcbiAgICAgICAgdHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKHR5cGUpO1xuICAgICAgICBpZiAoZ2V0Q29tcG9uZW50RGVmKHR5cGUpKSB7XG4gICAgICAgICAgICAvLyBXZSBrbm93IHdlIGFyZSBjb21wb25lbnRcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldEFubm90YXRpb24odHlwZSwgJ0NvbXBvbmVudCcpO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQuZW50cnlDb21wb25lbnRzKSB7XG4gICAgICAgICAgICAgICAgZGVlcEZvckVhY2goY29tcG9uZW50LmVudHJ5Q29tcG9uZW50cywgdmVyaWZ5Q29tcG9uZW50SXNQYXJ0T2ZOZ01vZHVsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdmVyaWZ5U2VtYW50aWNzT2ZOZ01vZHVsZUltcG9ydCh0eXBlLCBpbXBvcnRpbmdNb2R1bGUpIHtcbiAgICAgICAgdHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKHR5cGUpO1xuICAgICAgICBpZiAoZ2V0Q29tcG9uZW50RGVmKHR5cGUpIHx8IGdldERpcmVjdGl2ZURlZih0eXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGRpcmVjdGl2ZSAnJHt0eXBlLm5hbWV9JyBpbXBvcnRlZCBieSB0aGUgbW9kdWxlICcke2ltcG9ydGluZ01vZHVsZS5uYW1lfScuIFBsZWFzZSBhZGQgYW4gQE5nTW9kdWxlIGFubm90YXRpb24uYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFBpcGVEZWYkMSh0eXBlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHBpcGUgJyR7dHlwZS5uYW1lfScgaW1wb3J0ZWQgYnkgdGhlIG1vZHVsZSAnJHtpbXBvcnRpbmdNb2R1bGUubmFtZX0nLiBQbGVhc2UgYWRkIGFuIEBOZ01vZHVsZSBhbm5vdGF0aW9uLmApO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdW53cmFwTW9kdWxlV2l0aFByb3ZpZGVyc0ltcG9ydHModHlwZU9yV2l0aFByb3ZpZGVycykge1xuICAgIHR5cGVPcldpdGhQcm92aWRlcnMgPSByZXNvbHZlRm9yd2FyZFJlZih0eXBlT3JXaXRoUHJvdmlkZXJzKTtcbiAgICByZXR1cm4gdHlwZU9yV2l0aFByb3ZpZGVycy5uZ01vZHVsZSB8fCB0eXBlT3JXaXRoUHJvdmlkZXJzO1xufVxuZnVuY3Rpb24gZ2V0QW5ub3RhdGlvbih0eXBlLCBuYW1lKSB7XG4gICAgbGV0IGFubm90YXRpb24gPSBudWxsO1xuICAgIGNvbGxlY3QodHlwZS5fX2Fubm90YXRpb25zX18pO1xuICAgIGNvbGxlY3QodHlwZS5kZWNvcmF0b3JzKTtcbiAgICByZXR1cm4gYW5ub3RhdGlvbjtcbiAgICBmdW5jdGlvbiBjb2xsZWN0KGFubm90YXRpb25zKSB7XG4gICAgICAgIGlmIChhbm5vdGF0aW9ucykge1xuICAgICAgICAgICAgYW5ub3RhdGlvbnMuZm9yRWFjaChyZWFkQW5ub3RhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVhZEFubm90YXRpb24oZGVjb3JhdG9yKSB7XG4gICAgICAgIGlmICghYW5ub3RhdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZGVjb3JhdG9yKTtcbiAgICAgICAgICAgIGlmIChwcm90by5uZ01ldGFkYXRhTmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbiA9IGRlY29yYXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRlY29yYXRvci50eXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZGVjb3JhdG9yLnR5cGUpO1xuICAgICAgICAgICAgICAgIGlmIChwcm90by5uZ01ldGFkYXRhTmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb24gPSBkZWNvcmF0b3IuYXJnc1swXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEtlZXAgdHJhY2sgb2YgY29tcGlsZWQgY29tcG9uZW50cy4gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBpbiB0ZXN0cyB3ZSBvZnRlbiB3YW50IHRvIGNvbXBpbGUgdGhlXG4gKiBzYW1lIGNvbXBvbmVudCB3aXRoIG1vcmUgdGhhbiBvbmUgTmdNb2R1bGUuIFRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3IgdW5sZXNzIHdlIHJlc2V0IHdoaWNoXG4gKiBOZ01vZHVsZSB0aGUgY29tcG9uZW50IGJlbG9uZ3MgdG8uIFdlIGtlZXAgdGhlIGxpc3Qgb2YgY29tcGlsZWQgY29tcG9uZW50cyBoZXJlIHNvIHRoYXQgdGhlXG4gKiBUZXN0QmVkIGNhbiByZXNldCBpdCBsYXRlci5cbiAqL1xubGV0IG93bmVyTmdNb2R1bGUgPSBuZXcgV2Vha01hcCgpO1xubGV0IHZlcmlmaWVkTmdNb2R1bGUgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gcmVzZXRDb21waWxlZENvbXBvbmVudHMoKSB7XG4gICAgb3duZXJOZ01vZHVsZSA9IG5ldyBXZWFrTWFwKCk7XG4gICAgdmVyaWZpZWROZ01vZHVsZSA9IG5ldyBXZWFrTWFwKCk7XG4gICAgbW9kdWxlUXVldWUubGVuZ3RoID0gMDtcbn1cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGNvbWJpbmVkIGRlY2xhcmF0aW9ucyBvZiBleHBsaWNpdCBkZWNsYXJhdGlvbnMsIGFzIHdlbGwgYXMgZGVjbGFyYXRpb25zIGluaGVyaXRlZCBieVxuICogdHJhdmVyc2luZyB0aGUgZXhwb3J0cyBvZiBpbXBvcnRlZCBtb2R1bGVzLlxuICogQHBhcmFtIHR5cGVcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUNvbWJpbmVkRXhwb3J0cyh0eXBlKSB7XG4gICAgdHlwZSA9IHJlc29sdmVGb3J3YXJkUmVmKHR5cGUpO1xuICAgIGNvbnN0IG5nTW9kdWxlRGVmID0gZ2V0TmdNb2R1bGVEZWYodHlwZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIFsuLi5mbGF0dGVuKG1heWJlVW53cmFwRm4obmdNb2R1bGVEZWYuZXhwb3J0cykubWFwKCh0eXBlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZ01vZHVsZURlZiA9IGdldE5nTW9kdWxlRGVmKHR5cGUpO1xuICAgICAgICAgICAgaWYgKG5nTW9kdWxlRGVmKSB7XG4gICAgICAgICAgICAgICAgdmVyaWZ5U2VtYW50aWNzT2ZOZ01vZHVsZURlZih0eXBlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVDb21iaW5lZEV4cG9ydHModHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpXTtcbn1cbi8qKlxuICogU29tZSBkZWNsYXJlZCBjb21wb25lbnRzIG1heSBiZSBjb21waWxlZCBhc3luY2hyb25vdXNseSwgYW5kIHRodXMgbWF5IG5vdCBoYXZlIHRoZWlyXG4gKiDJtWNtcCBzZXQgeWV0LiBJZiB0aGlzIGlzIHRoZSBjYXNlLCB0aGVuIGEgcmVmZXJlbmNlIHRvIHRoZSBtb2R1bGUgaXMgd3JpdHRlbiBpbnRvXG4gKiB0aGUgYG5nU2VsZWN0b3JTY29wZWAgcHJvcGVydHkgb2YgdGhlIGRlY2xhcmVkIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHNldFNjb3BlT25EZWNsYXJlZENvbXBvbmVudHMobW9kdWxlVHlwZSwgbmdNb2R1bGUpIHtcbiAgICBjb25zdCBkZWNsYXJhdGlvbnMgPSBmbGF0dGVuKG5nTW9kdWxlLmRlY2xhcmF0aW9ucyB8fCBFTVBUWV9BUlJBWSk7XG4gICAgY29uc3QgdHJhbnNpdGl2ZVNjb3BlcyA9IHRyYW5zaXRpdmVTY29wZXNGb3IobW9kdWxlVHlwZSk7XG4gICAgZGVjbGFyYXRpb25zLmZvckVhY2goZGVjbGFyYXRpb24gPT4ge1xuICAgICAgICBpZiAoZGVjbGFyYXRpb24uaGFzT3duUHJvcGVydHkoTkdfQ09NUF9ERUYpKSB7XG4gICAgICAgICAgICAvLyBBIGDJtWNtcGAgZmllbGQgZXhpc3RzIC0gZ28gYWhlYWQgYW5kIHBhdGNoIHRoZSBjb21wb25lbnQgZGlyZWN0bHkuXG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBkZWNsYXJhdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudERlZiA9IGdldENvbXBvbmVudERlZihjb21wb25lbnQpO1xuICAgICAgICAgICAgcGF0Y2hDb21wb25lbnREZWZXaXRoU2NvcGUoY29tcG9uZW50RGVmLCB0cmFuc2l0aXZlU2NvcGVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghZGVjbGFyYXRpb24uaGFzT3duUHJvcGVydHkoTkdfRElSX0RFRikgJiYgIWRlY2xhcmF0aW9uLmhhc093blByb3BlcnR5KE5HX1BJUEVfREVGKSkge1xuICAgICAgICAgICAgLy8gU2V0IGBuZ1NlbGVjdG9yU2NvcGVgIGZvciBmdXR1cmUgcmVmZXJlbmNlIHdoZW4gdGhlIGNvbXBvbmVudCBjb21waWxhdGlvbiBmaW5pc2hlcy5cbiAgICAgICAgICAgIGRlY2xhcmF0aW9uLm5nU2VsZWN0b3JTY29wZSA9IG1vZHVsZVR5cGU7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogUGF0Y2ggdGhlIGRlZmluaXRpb24gb2YgYSBjb21wb25lbnQgd2l0aCBkaXJlY3RpdmVzIGFuZCBwaXBlcyBmcm9tIHRoZSBjb21waWxhdGlvbiBzY29wZSBvZlxuICogYSBnaXZlbiBtb2R1bGUuXG4gKi9cbmZ1bmN0aW9uIHBhdGNoQ29tcG9uZW50RGVmV2l0aFNjb3BlKGNvbXBvbmVudERlZiwgdHJhbnNpdGl2ZVNjb3Blcykge1xuICAgIGNvbXBvbmVudERlZi5kaXJlY3RpdmVEZWZzID0gKCkgPT4gQXJyYXkuZnJvbSh0cmFuc2l0aXZlU2NvcGVzLmNvbXBpbGF0aW9uLmRpcmVjdGl2ZXMpXG4gICAgICAgIC5tYXAoZGlyID0+IGRpci5oYXNPd25Qcm9wZXJ0eShOR19DT01QX0RFRikgPyBnZXRDb21wb25lbnREZWYoZGlyKSA6IGdldERpcmVjdGl2ZURlZihkaXIpKVxuICAgICAgICAuZmlsdGVyKGRlZiA9PiAhIWRlZik7XG4gICAgY29tcG9uZW50RGVmLnBpcGVEZWZzID0gKCkgPT4gQXJyYXkuZnJvbSh0cmFuc2l0aXZlU2NvcGVzLmNvbXBpbGF0aW9uLnBpcGVzKS5tYXAocGlwZSA9PiBnZXRQaXBlRGVmJDEocGlwZSkpO1xuICAgIGNvbXBvbmVudERlZi5zY2hlbWFzID0gdHJhbnNpdGl2ZVNjb3Blcy5zY2hlbWFzO1xuICAgIC8vIFNpbmNlIHdlIGF2b2lkIENvbXBvbmVudHMvRGlyZWN0aXZlcy9QaXBlcyByZWNvbXBpbGluZyBpbiBjYXNlIHRoZXJlIGFyZSBubyBvdmVycmlkZXMsIHdlXG4gICAgLy8gbWF5IGZhY2UgYSBwcm9ibGVtIHdoZXJlIHByZXZpb3VzbHkgY29tcGlsZWQgZGVmcyBhdmFpbGFibGUgdG8gYSBnaXZlbiBDb21wb25lbnQvRGlyZWN0aXZlXG4gICAgLy8gYXJlIGNhY2hlZCBpbiBUVmlldyBhbmQgbWF5IGJlY29tZSBzdGFsZSAoaW4gY2FzZSBhbnkgb2YgdGhlc2UgZGVmcyBnZXRzIHJlY29tcGlsZWQpLiBJblxuICAgIC8vIG9yZGVyIHRvIGF2b2lkIHRoaXMgcHJvYmxlbSwgd2UgZm9yY2UgZnJlc2ggVFZpZXcgdG8gYmUgY3JlYXRlZC5cbiAgICBjb21wb25lbnREZWYudFZpZXcgPSBudWxsO1xufVxuLyoqXG4gKiBDb21wdXRlIHRoZSBwYWlyIG9mIHRyYW5zaXRpdmUgc2NvcGVzIChjb21waWxhdGlvbiBzY29wZSBhbmQgZXhwb3J0ZWQgc2NvcGUpIGZvciBhIGdpdmVuIG1vZHVsZS5cbiAqXG4gKiBUaGlzIG9wZXJhdGlvbiBpcyBtZW1vaXplZCBhbmQgdGhlIHJlc3VsdCBpcyBjYWNoZWQgb24gdGhlIG1vZHVsZSdzIGRlZmluaXRpb24uIFRoaXMgZnVuY3Rpb24gY2FuXG4gKiBiZSBjYWxsZWQgb24gbW9kdWxlcyB3aXRoIGNvbXBvbmVudHMgdGhhdCBoYXZlIG5vdCBmdWxseSBjb21waWxlZCB5ZXQsIGJ1dCB0aGUgcmVzdWx0IHNob3VsZCBub3RcbiAqIGJlIHVzZWQgdW50aWwgdGhleSBoYXZlLlxuICpcbiAqIEBwYXJhbSBtb2R1bGVUeXBlIG1vZHVsZSB0aGF0IHRyYW5zaXRpdmUgc2NvcGUgc2hvdWxkIGJlIGNhbGN1bGF0ZWQgZm9yLlxuICovXG5mdW5jdGlvbiB0cmFuc2l0aXZlU2NvcGVzRm9yKG1vZHVsZVR5cGUpIHtcbiAgICBpZiAoIWlzTmdNb2R1bGUobW9kdWxlVHlwZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke21vZHVsZVR5cGUubmFtZX0gZG9lcyBub3QgaGF2ZSBhIG1vZHVsZSBkZWYgKMm1bW9kIHByb3BlcnR5KWApO1xuICAgIH1cbiAgICBjb25zdCBkZWYgPSBnZXROZ01vZHVsZURlZihtb2R1bGVUeXBlKTtcbiAgICBpZiAoZGVmLnRyYW5zaXRpdmVDb21waWxlU2NvcGVzICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBkZWYudHJhbnNpdGl2ZUNvbXBpbGVTY29wZXM7XG4gICAgfVxuICAgIGNvbnN0IHNjb3BlcyA9IHtcbiAgICAgICAgc2NoZW1hczogZGVmLnNjaGVtYXMgfHwgbnVsbCxcbiAgICAgICAgY29tcGlsYXRpb246IHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IG5ldyBTZXQoKSxcbiAgICAgICAgICAgIHBpcGVzOiBuZXcgU2V0KCksXG4gICAgICAgIH0sXG4gICAgICAgIGV4cG9ydGVkOiB7XG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBuZXcgU2V0KCksXG4gICAgICAgICAgICBwaXBlczogbmV3IFNldCgpLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgbWF5YmVVbndyYXBGbihkZWYuaW1wb3J0cykuZm9yRWFjaCgoaW1wb3J0ZWQpID0+IHtcbiAgICAgICAgY29uc3QgaW1wb3J0ZWRUeXBlID0gaW1wb3J0ZWQ7XG4gICAgICAgIGlmICghaXNOZ01vZHVsZShpbXBvcnRlZFR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEltcG9ydGluZyAke2ltcG9ydGVkVHlwZS5uYW1lfSB3aGljaCBkb2VzIG5vdCBoYXZlIGEgybVtb2QgcHJvcGVydHlgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXaGVuIHRoaXMgbW9kdWxlIGltcG9ydHMgYW5vdGhlciwgdGhlIGltcG9ydGVkIG1vZHVsZSdzIGV4cG9ydGVkIGRpcmVjdGl2ZXMgYW5kIHBpcGVzIGFyZVxuICAgICAgICAvLyBhZGRlZCB0byB0aGUgY29tcGlsYXRpb24gc2NvcGUgb2YgdGhpcyBtb2R1bGUuXG4gICAgICAgIGNvbnN0IGltcG9ydGVkU2NvcGUgPSB0cmFuc2l0aXZlU2NvcGVzRm9yKGltcG9ydGVkVHlwZSk7XG4gICAgICAgIGltcG9ydGVkU2NvcGUuZXhwb3J0ZWQuZGlyZWN0aXZlcy5mb3JFYWNoKGVudHJ5ID0+IHNjb3Blcy5jb21waWxhdGlvbi5kaXJlY3RpdmVzLmFkZChlbnRyeSkpO1xuICAgICAgICBpbXBvcnRlZFNjb3BlLmV4cG9ydGVkLnBpcGVzLmZvckVhY2goZW50cnkgPT4gc2NvcGVzLmNvbXBpbGF0aW9uLnBpcGVzLmFkZChlbnRyeSkpO1xuICAgIH0pO1xuICAgIG1heWJlVW53cmFwRm4oZGVmLmRlY2xhcmF0aW9ucykuZm9yRWFjaChkZWNsYXJlZCA9PiB7XG4gICAgICAgIGNvbnN0IGRlY2xhcmVkV2l0aERlZnMgPSBkZWNsYXJlZDtcbiAgICAgICAgaWYgKGdldFBpcGVEZWYkMShkZWNsYXJlZFdpdGhEZWZzKSkge1xuICAgICAgICAgICAgc2NvcGVzLmNvbXBpbGF0aW9uLnBpcGVzLmFkZChkZWNsYXJlZCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBFaXRoZXIgZGVjbGFyZWQgaGFzIGEgybVjbXAgb3IgybVkaXIsIG9yIGl0J3MgYSBjb21wb25lbnQgd2hpY2ggaGFzbid0XG4gICAgICAgICAgICAvLyBoYWQgaXRzIHRlbXBsYXRlIGNvbXBpbGVkIHlldC4gSW4gZWl0aGVyIGNhc2UsIGl0IGdldHMgYWRkZWQgdG8gdGhlIGNvbXBpbGF0aW9uJ3NcbiAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMuXG4gICAgICAgICAgICBzY29wZXMuY29tcGlsYXRpb24uZGlyZWN0aXZlcy5hZGQoZGVjbGFyZWQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbWF5YmVVbndyYXBGbihkZWYuZXhwb3J0cykuZm9yRWFjaCgoZXhwb3J0ZWQpID0+IHtcbiAgICAgICAgY29uc3QgZXhwb3J0ZWRUeXBlID0gZXhwb3J0ZWQ7XG4gICAgICAgIC8vIEVpdGhlciB0aGUgdHlwZSBpcyBhIG1vZHVsZSwgYSBwaXBlLCBvciBhIGNvbXBvbmVudC9kaXJlY3RpdmUgKHdoaWNoIG1heSBub3QgaGF2ZSBhXG4gICAgICAgIC8vIMm1Y21wIGFzIGl0IG1pZ2h0IGJlIGNvbXBpbGVkIGFzeW5jaHJvbm91c2x5KS5cbiAgICAgICAgaWYgKGlzTmdNb2R1bGUoZXhwb3J0ZWRUeXBlKSkge1xuICAgICAgICAgICAgLy8gV2hlbiB0aGlzIG1vZHVsZSBleHBvcnRzIGFub3RoZXIsIHRoZSBleHBvcnRlZCBtb2R1bGUncyBleHBvcnRlZCBkaXJlY3RpdmVzIGFuZCBwaXBlcyBhcmVcbiAgICAgICAgICAgIC8vIGFkZGVkIHRvIGJvdGggdGhlIGNvbXBpbGF0aW9uIGFuZCBleHBvcnRlZCBzY29wZXMgb2YgdGhpcyBtb2R1bGUuXG4gICAgICAgICAgICBjb25zdCBleHBvcnRlZFNjb3BlID0gdHJhbnNpdGl2ZVNjb3Blc0ZvcihleHBvcnRlZFR5cGUpO1xuICAgICAgICAgICAgZXhwb3J0ZWRTY29wZS5leHBvcnRlZC5kaXJlY3RpdmVzLmZvckVhY2goZW50cnkgPT4ge1xuICAgICAgICAgICAgICAgIHNjb3Blcy5jb21waWxhdGlvbi5kaXJlY3RpdmVzLmFkZChlbnRyeSk7XG4gICAgICAgICAgICAgICAgc2NvcGVzLmV4cG9ydGVkLmRpcmVjdGl2ZXMuYWRkKGVudHJ5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZXhwb3J0ZWRTY29wZS5leHBvcnRlZC5waXBlcy5mb3JFYWNoKGVudHJ5ID0+IHtcbiAgICAgICAgICAgICAgICBzY29wZXMuY29tcGlsYXRpb24ucGlwZXMuYWRkKGVudHJ5KTtcbiAgICAgICAgICAgICAgICBzY29wZXMuZXhwb3J0ZWQucGlwZXMuYWRkKGVudHJ5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdldFBpcGVEZWYkMShleHBvcnRlZFR5cGUpKSB7XG4gICAgICAgICAgICBzY29wZXMuZXhwb3J0ZWQucGlwZXMuYWRkKGV4cG9ydGVkVHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzY29wZXMuZXhwb3J0ZWQuZGlyZWN0aXZlcy5hZGQoZXhwb3J0ZWRUeXBlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGRlZi50cmFuc2l0aXZlQ29tcGlsZVNjb3BlcyA9IHNjb3BlcztcbiAgICByZXR1cm4gc2NvcGVzO1xufVxuZnVuY3Rpb24gZXhwYW5kTW9kdWxlV2l0aFByb3ZpZGVycyh2YWx1ZSkge1xuICAgIGlmIChpc01vZHVsZVdpdGhQcm92aWRlcnModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5uZ01vZHVsZTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gaXNNb2R1bGVXaXRoUHJvdmlkZXJzKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLm5nTW9kdWxlICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBpc05nTW9kdWxlKHZhbHVlKSB7XG4gICAgcmV0dXJuICEhZ2V0TmdNb2R1bGVEZWYodmFsdWUpO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogS2VlcCB0cmFjayBvZiB0aGUgY29tcGlsYXRpb24gZGVwdGggdG8gYXZvaWQgcmVlbnRyYW5jeSBpc3N1ZXMgZHVyaW5nIEpJVCBjb21waWxhdGlvbi4gVGhpc1xuICogbWF0dGVycyBpbiB0aGUgZm9sbG93aW5nIHNjZW5hcmlvOlxuICpcbiAqIENvbnNpZGVyIGEgY29tcG9uZW50ICdBJyB0aGF0IGV4dGVuZHMgY29tcG9uZW50ICdCJywgYm90aCBkZWNsYXJlZCBpbiBtb2R1bGUgJ00nLiBEdXJpbmdcbiAqIHRoZSBjb21waWxhdGlvbiBvZiAnQScgdGhlIGRlZmluaXRpb24gb2YgJ0InIGlzIHJlcXVlc3RlZCB0byBjYXB0dXJlIHRoZSBpbmhlcml0YW5jZSBjaGFpbixcbiAqIHBvdGVudGlhbGx5IHRyaWdnZXJpbmcgY29tcGlsYXRpb24gb2YgJ0InLiBJZiB0aGlzIG5lc3RlZCBjb21waWxhdGlvbiB3ZXJlIHRvIHRyaWdnZXJcbiAqIGBmbHVzaE1vZHVsZVNjb3BpbmdRdWV1ZUFzTXVjaEFzUG9zc2libGVgIGl0IG1heSBoYXBwZW4gdGhhdCBtb2R1bGUgJ00nIGlzIHN0aWxsIHBlbmRpbmcgaW4gdGhlXG4gKiBxdWV1ZSwgcmVzdWx0aW5nIGluICdBJyBhbmQgJ0InIHRvIGJlIHBhdGNoZWQgd2l0aCB0aGUgTmdNb2R1bGUgc2NvcGUuIEFzIHRoZSBjb21waWxhdGlvbiBvZlxuICogJ0EnIGlzIHN0aWxsIGluIHByb2dyZXNzLCB0aGlzIHdvdWxkIGludHJvZHVjZSBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgb24gaXRzIGNvbXBpbGF0aW9uLiBUbyBhdm9pZFxuICogdGhpcyBpc3N1ZSwgdGhlIG1vZHVsZSBzY29wZSBxdWV1ZSBpcyBvbmx5IGZsdXNoZWQgZm9yIGNvbXBpbGF0aW9ucyBhdCB0aGUgZGVwdGggMCwgdG8gZW5zdXJlXG4gKiBhbGwgY29tcGlsYXRpb25zIGhhdmUgZmluaXNoZWQuXG4gKi9cbmxldCBjb21waWxhdGlvbkRlcHRoID0gMDtcbi8qKlxuICogQ29tcGlsZSBhbiBBbmd1bGFyIGNvbXBvbmVudCBhY2NvcmRpbmcgdG8gaXRzIGRlY29yYXRvciBtZXRhZGF0YSwgYW5kIHBhdGNoIHRoZSByZXN1bHRpbmdcbiAqIGNvbXBvbmVudCBkZWYgKMm1Y21wKSBvbnRvIHRoZSBjb21wb25lbnQgdHlwZS5cbiAqXG4gKiBDb21waWxhdGlvbiBtYXkgYmUgYXN5bmNocm9ub3VzIChkdWUgdG8gdGhlIG5lZWQgdG8gcmVzb2x2ZSBVUkxzIGZvciB0aGUgY29tcG9uZW50IHRlbXBsYXRlIG9yXG4gKiBvdGhlciByZXNvdXJjZXMsIGZvciBleGFtcGxlKS4gSW4gdGhlIGV2ZW50IHRoYXQgY29tcGlsYXRpb24gaXMgbm90IGltbWVkaWF0ZSwgYGNvbXBpbGVDb21wb25lbnRgXG4gKiB3aWxsIGVucXVldWUgcmVzb3VyY2UgcmVzb2x1dGlvbiBpbnRvIGEgZ2xvYmFsIHF1ZXVlIGFuZCB3aWxsIGZhaWwgdG8gcmV0dXJuIHRoZSBgybVjbXBgXG4gKiB1bnRpbCB0aGUgZ2xvYmFsIHF1ZXVlIGhhcyBiZWVuIHJlc29sdmVkIHdpdGggYSBjYWxsIHRvIGByZXNvbHZlQ29tcG9uZW50UmVzb3VyY2VzYC5cbiAqL1xuZnVuY3Rpb24gY29tcGlsZUNvbXBvbmVudCh0eXBlLCBtZXRhZGF0YSkge1xuICAgIC8vIEluaXRpYWxpemUgbmdEZXZNb2RlLiBUaGlzIG11c3QgYmUgdGhlIGZpcnN0IHN0YXRlbWVudCBpbiBjb21waWxlQ29tcG9uZW50LlxuICAgIC8vIFNlZSB0aGUgYGluaXROZ0Rldk1vZGVgIGRvY3N0cmluZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSAmJiBpbml0TmdEZXZNb2RlKCk7XG4gICAgbGV0IG5nQ29tcG9uZW50RGVmID0gbnVsbDtcbiAgICAvLyBNZXRhZGF0YSBtYXkgaGF2ZSByZXNvdXJjZXMgd2hpY2ggbmVlZCB0byBiZSByZXNvbHZlZC5cbiAgICBtYXliZVF1ZXVlUmVzb2x1dGlvbk9mQ29tcG9uZW50UmVzb3VyY2VzKHR5cGUsIG1ldGFkYXRhKTtcbiAgICAvLyBOb3RlIHRoYXQgd2UncmUgdXNpbmcgdGhlIHNhbWUgZnVuY3Rpb24gYXMgYERpcmVjdGl2ZWAsIGJlY2F1c2UgdGhhdCdzIG9ubHkgc3Vic2V0IG9mIG1ldGFkYXRhXG4gICAgLy8gdGhhdCB3ZSBuZWVkIHRvIGNyZWF0ZSB0aGUgbmdGYWN0b3J5RGVmLiBXZSdyZSBhdm9pZGluZyB1c2luZyB0aGUgY29tcG9uZW50IG1ldGFkYXRhXG4gICAgLy8gYmVjYXVzZSB3ZSdkIGhhdmUgdG8gcmVzb2x2ZSB0aGUgYXN5bmNocm9ub3VzIHRlbXBsYXRlcy5cbiAgICBhZGREaXJlY3RpdmVGYWN0b3J5RGVmKHR5cGUsIG1ldGFkYXRhKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHlwZSwgTkdfQ09NUF9ERUYsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAobmdDb21wb25lbnREZWYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHsgdXNhZ2U6IDAgLyogRGVjb3JhdG9yICovLCBraW5kOiAnY29tcG9uZW50JywgdHlwZTogdHlwZSB9KTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50TmVlZHNSZXNvbHV0aW9uKG1ldGFkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IFtgQ29tcG9uZW50ICcke3R5cGUubmFtZX0nIGlzIG5vdCByZXNvbHZlZDpgXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGFkYXRhLnRlbXBsYXRlVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5wdXNoKGAgLSB0ZW1wbGF0ZVVybDogJHttZXRhZGF0YS50ZW1wbGF0ZVVybH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWV0YWRhdGEuc3R5bGVVcmxzICYmIG1ldGFkYXRhLnN0eWxlVXJscy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yLnB1c2goYCAtIHN0eWxlVXJsczogJHtKU09OLnN0cmluZ2lmeShtZXRhZGF0YS5zdHlsZVVybHMpfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLnB1c2goYERpZCB5b3UgcnVuIGFuZCB3YWl0IGZvciAncmVzb2x2ZUNvbXBvbmVudFJlc291cmNlcygpJz9gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjb25zdCB3YXMgY2FsbGVkIGBqaXRPcHRpb25zYCBwcmV2aW91c2x5IGJ1dCBoYWQgdG8gYmUgcmVuYW1lZCB0byBgb3B0aW9uc2AgYmVjYXVzZVxuICAgICAgICAgICAgICAgIC8vIG9mIGEgYnVnIHdpdGggVGVyc2VyIHRoYXQgY2F1c2VkIG9wdGltaXplZCBKSVQgYnVpbGRzIHRvIHRocm93IGEgYFJlZmVyZW5jZUVycm9yYC5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGJ1ZyB3YXMgaW52ZXN0aWdhdGVkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXItY2xpL2lzc3Vlcy8xNzI2NC5cbiAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQgbm90IHJlbmFtZSBpdCBiYWNrIHVudGlsIGh0dHBzOi8vZ2l0aHViLmNvbS90ZXJzZXIvdGVyc2VyL2lzc3Vlcy82MTUgaXMgZml4ZWQuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGdldEppdE9wdGlvbnMoKTtcbiAgICAgICAgICAgICAgICBsZXQgcHJlc2VydmVXaGl0ZXNwYWNlcyA9IG1ldGFkYXRhLnByZXNlcnZlV2hpdGVzcGFjZXM7XG4gICAgICAgICAgICAgICAgaWYgKHByZXNlcnZlV2hpdGVzcGFjZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJlc2VydmVXaGl0ZXNwYWNlcyA9IG9wdGlvbnMucHJlc2VydmVXaGl0ZXNwYWNlcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXNlcnZlV2hpdGVzcGFjZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgZW5jYXBzdWxhdGlvbiA9IG1ldGFkYXRhLmVuY2Fwc3VsYXRpb247XG4gICAgICAgICAgICAgICAgaWYgKGVuY2Fwc3VsYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zLmRlZmF1bHRFbmNhcHN1bGF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuY2Fwc3VsYXRpb24gPSBvcHRpb25zLmRlZmF1bHRFbmNhcHN1bGF0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5jYXBzdWxhdGlvbiA9IFZpZXdFbmNhcHN1bGF0aW9uJDEuRW11bGF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGVVcmwgPSBtZXRhZGF0YS50ZW1wbGF0ZVVybCB8fCBgbmc6Ly8vJHt0eXBlLm5hbWV9L3RlbXBsYXRlLmh0bWxgO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGRpcmVjdGl2ZU1ldGFkYXRhKHR5cGUsIG1ldGFkYXRhKSksIHsgdHlwZVNvdXJjZVNwYW46IGNvbXBpbGVyLmNyZWF0ZVBhcnNlU291cmNlU3BhbignQ29tcG9uZW50JywgdHlwZS5uYW1lLCB0ZW1wbGF0ZVVybCksIHRlbXBsYXRlOiBtZXRhZGF0YS50ZW1wbGF0ZSB8fCAnJywgcHJlc2VydmVXaGl0ZXNwYWNlcywgc3R5bGVzOiBtZXRhZGF0YS5zdHlsZXMgfHwgRU1QVFlfQVJSQVksIGFuaW1hdGlvbnM6IG1ldGFkYXRhLmFuaW1hdGlvbnMsIGRpcmVjdGl2ZXM6IFtdLCBjaGFuZ2VEZXRlY3Rpb246IG1ldGFkYXRhLmNoYW5nZURldGVjdGlvbiwgcGlwZXM6IG5ldyBNYXAoKSwgZW5jYXBzdWxhdGlvbiwgaW50ZXJwb2xhdGlvbjogbWV0YWRhdGEuaW50ZXJwb2xhdGlvbiwgdmlld1Byb3ZpZGVyczogbWV0YWRhdGEudmlld1Byb3ZpZGVycyB8fCBudWxsIH0pO1xuICAgICAgICAgICAgICAgIGNvbXBpbGF0aW9uRGVwdGgrKztcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWV0YS51c2VzSW5oZXJpdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZERpcmVjdGl2ZURlZlRvVW5kZWNvcmF0ZWRQYXJlbnRzKHR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5nQ29tcG9uZW50RGVmID0gY29tcGlsZXIuY29tcGlsZUNvbXBvbmVudChhbmd1bGFyQ29yZUVudiwgdGVtcGxhdGVVcmwsIG1ldGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGNvbXBpbGF0aW9uIGRlcHRoIGlzIGRlY3JlbWVudGVkIGV2ZW4gd2hlbiB0aGUgY29tcGlsYXRpb24gZmFpbGVkLlxuICAgICAgICAgICAgICAgICAgICBjb21waWxhdGlvbkRlcHRoLS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb21waWxhdGlvbkRlcHRoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gTmdNb2R1bGUgZGVjb3JhdG9yIGV4ZWN1dGVkLCB3ZSBlbnF1ZXVlZCB0aGUgbW9kdWxlIGRlZmluaXRpb24gc3VjaCB0aGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIGl0IHdvdWxkIG9ubHkgZGVxdWV1ZSBhbmQgYWRkIGl0c2VsZiBhcyBtb2R1bGUgc2NvcGUgdG8gYWxsIG9mIGl0cyBkZWNsYXJhdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBvbmx5IGlmICBpZiBhbGwgb2YgaXRzIGRlY2xhcmF0aW9ucyBoYWQgcmVzb2x2ZWQuIFRoaXMgY2FsbCBydW5zIHRoZSBjaGVja1xuICAgICAgICAgICAgICAgICAgICAvLyB0byBzZWUgaWYgYW55IG1vZHVsZXMgdGhhdCBhcmUgaW4gdGhlIHF1ZXVlIGNhbiBiZSBkZXF1ZXVlZCBhbmQgYWRkIHNjb3BlIHRvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZWlyIGRlY2xhcmF0aW9ucy5cbiAgICAgICAgICAgICAgICAgICAgZmx1c2hNb2R1bGVTY29waW5nUXVldWVBc011Y2hBc1Bvc3NpYmxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIGNvbXBvbmVudCBjb21waWxhdGlvbiBpcyBhc3luYywgdGhlbiB0aGUgQE5nTW9kdWxlIGFubm90YXRpb24gd2hpY2ggZGVjbGFyZXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gY29tcG9uZW50IG1heSBleGVjdXRlIGFuZCBzZXQgYW4gbmdTZWxlY3RvclNjb3BlIHByb3BlcnR5IG9uIHRoZSBjb21wb25lbnQgdHlwZS4gVGhpc1xuICAgICAgICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29tcG9uZW50IHRvIHBhdGNoIGl0c2VsZiB3aXRoIGRpcmVjdGl2ZURlZnMgZnJvbSB0aGUgbW9kdWxlIGFmdGVyIGl0XG4gICAgICAgICAgICAgICAgLy8gZmluaXNoZXMgY29tcGlsaW5nLlxuICAgICAgICAgICAgICAgIGlmIChoYXNTZWxlY3RvclNjb3BlKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjb3BlcyA9IHRyYW5zaXRpdmVTY29wZXNGb3IodHlwZS5uZ1NlbGVjdG9yU2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICBwYXRjaENvbXBvbmVudERlZldpdGhTY29wZShuZ0NvbXBvbmVudERlZiwgc2NvcGVzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmdDb21wb25lbnREZWY7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE1ha2UgdGhlIHByb3BlcnR5IGNvbmZpZ3VyYWJsZSBpbiBkZXYgbW9kZSB0byBhbGxvdyBvdmVycmlkaW5nIGluIHRlc3RzXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogISFuZ0Rldk1vZGUsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBoYXNTZWxlY3RvclNjb3BlKGNvbXBvbmVudCkge1xuICAgIHJldHVybiBjb21wb25lbnQubmdTZWxlY3RvclNjb3BlICE9PSB1bmRlZmluZWQ7XG59XG4vKipcbiAqIENvbXBpbGUgYW4gQW5ndWxhciBkaXJlY3RpdmUgYWNjb3JkaW5nIHRvIGl0cyBkZWNvcmF0b3IgbWV0YWRhdGEsIGFuZCBwYXRjaCB0aGUgcmVzdWx0aW5nXG4gKiBkaXJlY3RpdmUgZGVmIG9udG8gdGhlIGNvbXBvbmVudCB0eXBlLlxuICpcbiAqIEluIHRoZSBldmVudCB0aGF0IGNvbXBpbGF0aW9uIGlzIG5vdCBpbW1lZGlhdGUsIGBjb21waWxlRGlyZWN0aXZlYCB3aWxsIHJldHVybiBhIGBQcm9taXNlYCB3aGljaFxuICogd2lsbCByZXNvbHZlIHdoZW4gY29tcGlsYXRpb24gY29tcGxldGVzIGFuZCB0aGUgZGlyZWN0aXZlIGJlY29tZXMgdXNhYmxlLlxuICovXG5mdW5jdGlvbiBjb21waWxlRGlyZWN0aXZlKHR5cGUsIGRpcmVjdGl2ZSkge1xuICAgIGxldCBuZ0RpcmVjdGl2ZURlZiA9IG51bGw7XG4gICAgYWRkRGlyZWN0aXZlRmFjdG9yeURlZih0eXBlLCBkaXJlY3RpdmUgfHwge30pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLCBOR19ESVJfREVGLCB7XG4gICAgICAgIGdldDogKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG5nRGlyZWN0aXZlRGVmID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gYGRpcmVjdGl2ZWAgY2FuIGJlIG51bGwgaW4gdGhlIGNhc2Ugb2YgYWJzdHJhY3QgZGlyZWN0aXZlcyBhcyBhIGJhc2UgY2xhc3NcbiAgICAgICAgICAgICAgICAvLyB0aGF0IHVzZSBgQERpcmVjdGl2ZSgpYCB3aXRoIG5vIHNlbGVjdG9yLiBJbiB0aGF0IGNhc2UsIHBhc3MgZW1wdHkgb2JqZWN0IHRvIHRoZVxuICAgICAgICAgICAgICAgIC8vIGBkaXJlY3RpdmVNZXRhZGF0YWAgZnVuY3Rpb24gaW5zdGVhZCBvZiBudWxsLlxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBnZXREaXJlY3RpdmVNZXRhZGF0YSh0eXBlLCBkaXJlY3RpdmUgfHwge30pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBpbGVyID0gZ2V0Q29tcGlsZXJGYWNhZGUoeyB1c2FnZTogMCAvKiBEZWNvcmF0b3IgKi8sIGtpbmQ6ICdkaXJlY3RpdmUnLCB0eXBlIH0pO1xuICAgICAgICAgICAgICAgIG5nRGlyZWN0aXZlRGVmID1cbiAgICAgICAgICAgICAgICAgICAgY29tcGlsZXIuY29tcGlsZURpcmVjdGl2ZShhbmd1bGFyQ29yZUVudiwgbWV0YS5zb3VyY2VNYXBVcmwsIG1ldGEubWV0YWRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5nRGlyZWN0aXZlRGVmO1xuICAgICAgICB9LFxuICAgICAgICAvLyBNYWtlIHRoZSBwcm9wZXJ0eSBjb25maWd1cmFibGUgaW4gZGV2IG1vZGUgdG8gYWxsb3cgb3ZlcnJpZGluZyBpbiB0ZXN0c1xuICAgICAgICBjb25maWd1cmFibGU6ICEhbmdEZXZNb2RlLFxuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTWV0YWRhdGEodHlwZSwgbWV0YWRhdGEpIHtcbiAgICBjb25zdCBuYW1lID0gdHlwZSAmJiB0eXBlLm5hbWU7XG4gICAgY29uc3Qgc291cmNlTWFwVXJsID0gYG5nOi8vLyR7bmFtZX0vybVkaXIuanNgO1xuICAgIGNvbnN0IGNvbXBpbGVyID0gZ2V0Q29tcGlsZXJGYWNhZGUoeyB1c2FnZTogMCAvKiBEZWNvcmF0b3IgKi8sIGtpbmQ6ICdkaXJlY3RpdmUnLCB0eXBlIH0pO1xuICAgIGNvbnN0IGZhY2FkZSA9IGRpcmVjdGl2ZU1ldGFkYXRhKHR5cGUsIG1ldGFkYXRhKTtcbiAgICBmYWNhZGUudHlwZVNvdXJjZVNwYW4gPSBjb21waWxlci5jcmVhdGVQYXJzZVNvdXJjZVNwYW4oJ0RpcmVjdGl2ZScsIG5hbWUsIHNvdXJjZU1hcFVybCk7XG4gICAgaWYgKGZhY2FkZS51c2VzSW5oZXJpdGFuY2UpIHtcbiAgICAgICAgYWRkRGlyZWN0aXZlRGVmVG9VbmRlY29yYXRlZFBhcmVudHModHlwZSk7XG4gICAgfVxuICAgIHJldHVybiB7IG1ldGFkYXRhOiBmYWNhZGUsIHNvdXJjZU1hcFVybCB9O1xufVxuZnVuY3Rpb24gYWRkRGlyZWN0aXZlRmFjdG9yeURlZih0eXBlLCBtZXRhZGF0YSkge1xuICAgIGxldCBuZ0ZhY3RvcnlEZWYgPSBudWxsO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLCBOR19GQUNUT1JZX0RFRiwge1xuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChuZ0ZhY3RvcnlEZWYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhID0gZ2V0RGlyZWN0aXZlTWV0YWRhdGEodHlwZSwgbWV0YWRhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbXBpbGVyID0gZ2V0Q29tcGlsZXJGYWNhZGUoeyB1c2FnZTogMCAvKiBEZWNvcmF0b3IgKi8sIGtpbmQ6ICdkaXJlY3RpdmUnLCB0eXBlIH0pO1xuICAgICAgICAgICAgICAgIG5nRmFjdG9yeURlZiA9IGNvbXBpbGVyLmNvbXBpbGVGYWN0b3J5KGFuZ3VsYXJDb3JlRW52LCBgbmc6Ly8vJHt0eXBlLm5hbWV9L8m1ZmFjLmpzYCwge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBtZXRhLm1ldGFkYXRhLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG1ldGEubWV0YWRhdGEudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZUFyZ3VtZW50Q291bnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGRlcHM6IHJlZmxlY3REZXBlbmRlbmNpZXModHlwZSksXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogY29tcGlsZXIuRmFjdG9yeVRhcmdldC5EaXJlY3RpdmVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZ0ZhY3RvcnlEZWY7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE1ha2UgdGhlIHByb3BlcnR5IGNvbmZpZ3VyYWJsZSBpbiBkZXYgbW9kZSB0byBhbGxvdyBvdmVycmlkaW5nIGluIHRlc3RzXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogISFuZ0Rldk1vZGUsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBleHRlbmRzRGlyZWN0bHlGcm9tT2JqZWN0KHR5cGUpIHtcbiAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHR5cGUucHJvdG90eXBlKSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cbi8qKlxuICogRXh0cmFjdCB0aGUgYFIzRGlyZWN0aXZlTWV0YWRhdGFgIGZvciBhIHBhcnRpY3VsYXIgZGlyZWN0aXZlIChlaXRoZXIgYSBgRGlyZWN0aXZlYCBvciBhXG4gKiBgQ29tcG9uZW50YCkuXG4gKi9cbmZ1bmN0aW9uIGRpcmVjdGl2ZU1ldGFkYXRhKHR5cGUsIG1ldGFkYXRhKSB7XG4gICAgLy8gUmVmbGVjdCBpbnB1dHMgYW5kIG91dHB1dHMuXG4gICAgY29uc3QgcmVmbGVjdCA9IGdldFJlZmxlY3QoKTtcbiAgICBjb25zdCBwcm9wTWV0YWRhdGEgPSByZWZsZWN0Lm93blByb3BNZXRhZGF0YSh0eXBlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiB0eXBlLm5hbWUsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIHNlbGVjdG9yOiBtZXRhZGF0YS5zZWxlY3RvciAhPT0gdW5kZWZpbmVkID8gbWV0YWRhdGEuc2VsZWN0b3IgOiBudWxsLFxuICAgICAgICBob3N0OiBtZXRhZGF0YS5ob3N0IHx8IEVNUFRZX09CSixcbiAgICAgICAgcHJvcE1ldGFkYXRhOiBwcm9wTWV0YWRhdGEsXG4gICAgICAgIGlucHV0czogbWV0YWRhdGEuaW5wdXRzIHx8IEVNUFRZX0FSUkFZLFxuICAgICAgICBvdXRwdXRzOiBtZXRhZGF0YS5vdXRwdXRzIHx8IEVNUFRZX0FSUkFZLFxuICAgICAgICBxdWVyaWVzOiBleHRyYWN0UXVlcmllc01ldGFkYXRhKHR5cGUsIHByb3BNZXRhZGF0YSwgaXNDb250ZW50UXVlcnkpLFxuICAgICAgICBsaWZlY3ljbGU6IHsgdXNlc09uQ2hhbmdlczogcmVmbGVjdC5oYXNMaWZlY3ljbGVIb29rKHR5cGUsICduZ09uQ2hhbmdlcycpIH0sXG4gICAgICAgIHR5cGVTb3VyY2VTcGFuOiBudWxsLFxuICAgICAgICB1c2VzSW5oZXJpdGFuY2U6ICFleHRlbmRzRGlyZWN0bHlGcm9tT2JqZWN0KHR5cGUpLFxuICAgICAgICBleHBvcnRBczogZXh0cmFjdEV4cG9ydEFzKG1ldGFkYXRhLmV4cG9ydEFzKSxcbiAgICAgICAgcHJvdmlkZXJzOiBtZXRhZGF0YS5wcm92aWRlcnMgfHwgbnVsbCxcbiAgICAgICAgdmlld1F1ZXJpZXM6IGV4dHJhY3RRdWVyaWVzTWV0YWRhdGEodHlwZSwgcHJvcE1ldGFkYXRhLCBpc1ZpZXdRdWVyeSlcbiAgICB9O1xufVxuLyoqXG4gKiBBZGRzIGEgZGlyZWN0aXZlIGRlZmluaXRpb24gdG8gYWxsIHBhcmVudCBjbGFzc2VzIG9mIGEgdHlwZSB0aGF0IGRvbid0IGhhdmUgYW4gQW5ndWxhciBkZWNvcmF0b3IuXG4gKi9cbmZ1bmN0aW9uIGFkZERpcmVjdGl2ZURlZlRvVW5kZWNvcmF0ZWRQYXJlbnRzKHR5cGUpIHtcbiAgICBjb25zdCBvYmpQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuICAgIGxldCBwYXJlbnQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodHlwZS5wcm90b3R5cGUpLmNvbnN0cnVjdG9yO1xuICAgIC8vIEdvIHVwIHRoZSBwcm90b3R5cGUgdW50aWwgd2UgaGl0IGBPYmplY3RgLlxuICAgIHdoaWxlIChwYXJlbnQgJiYgcGFyZW50ICE9PSBvYmpQcm90b3R5cGUpIHtcbiAgICAgICAgLy8gU2luY2UgaW5oZXJpdGFuY2Ugd29ya3MgaWYgdGhlIGNsYXNzIHdhcyBhbm5vdGF0ZWQgYWxyZWFkeSwgd2Ugb25seSBuZWVkIHRvIGFkZFxuICAgICAgICAvLyB0aGUgZGVmIGlmIHRoZXJlIGFyZSBubyBhbm5vdGF0aW9ucyBhbmQgdGhlIGRlZiBoYXNuJ3QgYmVlbiBjcmVhdGVkIGFscmVhZHkuXG4gICAgICAgIGlmICghZ2V0RGlyZWN0aXZlRGVmKHBhcmVudCkgJiYgIWdldENvbXBvbmVudERlZihwYXJlbnQpICYmXG4gICAgICAgICAgICBzaG91bGRBZGRBYnN0cmFjdERpcmVjdGl2ZShwYXJlbnQpKSB7XG4gICAgICAgICAgICBjb21waWxlRGlyZWN0aXZlKHBhcmVudCwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHBhcmVudCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY29udmVydFRvUjNRdWVyeVByZWRpY2F0ZShzZWxlY3Rvcikge1xuICAgIHJldHVybiB0eXBlb2Ygc2VsZWN0b3IgPT09ICdzdHJpbmcnID8gc3BsaXRCeUNvbW1hKHNlbGVjdG9yKSA6IHJlc29sdmVGb3J3YXJkUmVmKHNlbGVjdG9yKTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRUb1IzUXVlcnlNZXRhZGF0YShwcm9wZXJ0eU5hbWUsIGFubikge1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb3BlcnR5TmFtZTogcHJvcGVydHlOYW1lLFxuICAgICAgICBwcmVkaWNhdGU6IGNvbnZlcnRUb1IzUXVlcnlQcmVkaWNhdGUoYW5uLnNlbGVjdG9yKSxcbiAgICAgICAgZGVzY2VuZGFudHM6IGFubi5kZXNjZW5kYW50cyxcbiAgICAgICAgZmlyc3Q6IGFubi5maXJzdCxcbiAgICAgICAgcmVhZDogYW5uLnJlYWQgPyBhbm4ucmVhZCA6IG51bGwsXG4gICAgICAgIHN0YXRpYzogISFhbm4uc3RhdGljLFxuICAgICAgICBlbWl0RGlzdGluY3RDaGFuZ2VzT25seTogISFhbm4uZW1pdERpc3RpbmN0Q2hhbmdlc09ubHksXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGV4dHJhY3RRdWVyaWVzTWV0YWRhdGEodHlwZSwgcHJvcE1ldGFkYXRhLCBpc1F1ZXJ5QW5uKSB7XG4gICAgY29uc3QgcXVlcmllc01ldGEgPSBbXTtcbiAgICBmb3IgKGNvbnN0IGZpZWxkIGluIHByb3BNZXRhZGF0YSkge1xuICAgICAgICBpZiAocHJvcE1ldGFkYXRhLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgICAgICAgICAgY29uc3QgYW5ub3RhdGlvbnMgPSBwcm9wTWV0YWRhdGFbZmllbGRdO1xuICAgICAgICAgICAgYW5ub3RhdGlvbnMuZm9yRWFjaChhbm4gPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc1F1ZXJ5QW5uKGFubikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbm4uc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgY29uc3RydWN0IGEgcXVlcnkgZm9yIHRoZSBwcm9wZXJ0eSBcIiR7ZmllbGR9XCIgb2YgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFwiJHtzdHJpbmdpZnlGb3JFcnJvcih0eXBlKX1cIiBzaW5jZSB0aGUgcXVlcnkgc2VsZWN0b3Igd2Fzbid0IGRlZmluZWQuYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFubm90YXRpb25zLnNvbWUoaXNJbnB1dEFubm90YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBjb21iaW5lIEBJbnB1dCBkZWNvcmF0b3JzIHdpdGggcXVlcnkgZGVjb3JhdG9yc2ApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHF1ZXJpZXNNZXRhLnB1c2goY29udmVydFRvUjNRdWVyeU1ldGFkYXRhKGZpZWxkLCBhbm4pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcXVlcmllc01ldGE7XG59XG5mdW5jdGlvbiBleHRyYWN0RXhwb3J0QXMoZXhwb3J0QXMpIHtcbiAgICByZXR1cm4gZXhwb3J0QXMgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBzcGxpdEJ5Q29tbWEoZXhwb3J0QXMpO1xufVxuZnVuY3Rpb24gaXNDb250ZW50UXVlcnkodmFsdWUpIHtcbiAgICBjb25zdCBuYW1lID0gdmFsdWUubmdNZXRhZGF0YU5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09ICdDb250ZW50Q2hpbGQnIHx8IG5hbWUgPT09ICdDb250ZW50Q2hpbGRyZW4nO1xufVxuZnVuY3Rpb24gaXNWaWV3UXVlcnkodmFsdWUpIHtcbiAgICBjb25zdCBuYW1lID0gdmFsdWUubmdNZXRhZGF0YU5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09ICdWaWV3Q2hpbGQnIHx8IG5hbWUgPT09ICdWaWV3Q2hpbGRyZW4nO1xufVxuZnVuY3Rpb24gaXNJbnB1dEFubm90YXRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUubmdNZXRhZGF0YU5hbWUgPT09ICdJbnB1dCc7XG59XG5mdW5jdGlvbiBzcGxpdEJ5Q29tbWEodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUuc3BsaXQoJywnKS5tYXAocGllY2UgPT4gcGllY2UudHJpbSgpKTtcbn1cbmNvbnN0IExJRkVDWUNMRV9IT09LUyA9IFtcbiAgICAnbmdPbkNoYW5nZXMnLCAnbmdPbkluaXQnLCAnbmdPbkRlc3Ryb3knLCAnbmdEb0NoZWNrJywgJ25nQWZ0ZXJWaWV3SW5pdCcsICduZ0FmdGVyVmlld0NoZWNrZWQnLFxuICAgICduZ0FmdGVyQ29udGVudEluaXQnLCAnbmdBZnRlckNvbnRlbnRDaGVja2VkJ1xuXTtcbmZ1bmN0aW9uIHNob3VsZEFkZEFic3RyYWN0RGlyZWN0aXZlKHR5cGUpIHtcbiAgICBjb25zdCByZWZsZWN0ID0gZ2V0UmVmbGVjdCgpO1xuICAgIGlmIChMSUZFQ1lDTEVfSE9PS1Muc29tZShob29rTmFtZSA9PiByZWZsZWN0Lmhhc0xpZmVjeWNsZUhvb2sodHlwZSwgaG9va05hbWUpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcHJvcE1ldGFkYXRhID0gcmVmbGVjdC5wcm9wTWV0YWRhdGEodHlwZSk7XG4gICAgZm9yIChjb25zdCBmaWVsZCBpbiBwcm9wTWV0YWRhdGEpIHtcbiAgICAgICAgY29uc3QgYW5ub3RhdGlvbnMgPSBwcm9wTWV0YWRhdGFbZmllbGRdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFubm90YXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gYW5ub3RhdGlvbnNbaV07XG4gICAgICAgICAgICBjb25zdCBtZXRhZGF0YU5hbWUgPSBjdXJyZW50Lm5nTWV0YWRhdGFOYW1lO1xuICAgICAgICAgICAgaWYgKGlzSW5wdXRBbm5vdGF0aW9uKGN1cnJlbnQpIHx8IGlzQ29udGVudFF1ZXJ5KGN1cnJlbnQpIHx8IGlzVmlld1F1ZXJ5KGN1cnJlbnQpIHx8XG4gICAgICAgICAgICAgICAgbWV0YWRhdGFOYW1lID09PSAnT3V0cHV0JyB8fCBtZXRhZGF0YU5hbWUgPT09ICdIb3N0QmluZGluZycgfHxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YU5hbWUgPT09ICdIb3N0TGlzdGVuZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGVQaXBlKHR5cGUsIG1ldGEpIHtcbiAgICBsZXQgbmdQaXBlRGVmID0gbnVsbDtcbiAgICBsZXQgbmdGYWN0b3J5RGVmID0gbnVsbDtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodHlwZSwgTkdfRkFDVE9SWV9ERUYsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgICBpZiAobmdGYWN0b3J5RGVmID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBnZXRQaXBlTWV0YWRhdGEodHlwZSwgbWV0YSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tcGlsZXIgPSBnZXRDb21waWxlckZhY2FkZSh7IHVzYWdlOiAwIC8qIERlY29yYXRvciAqLywga2luZDogJ3BpcGUnLCB0eXBlOiBtZXRhZGF0YS50eXBlIH0pO1xuICAgICAgICAgICAgICAgIG5nRmFjdG9yeURlZiA9IGNvbXBpbGVyLmNvbXBpbGVGYWN0b3J5KGFuZ3VsYXJDb3JlRW52LCBgbmc6Ly8vJHttZXRhZGF0YS5uYW1lfS/JtWZhYy5qc2AsIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogbWV0YWRhdGEubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbWV0YWRhdGEudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZUFyZ3VtZW50Q291bnQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGRlcHM6IHJlZmxlY3REZXBlbmRlbmNpZXModHlwZSksXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogY29tcGlsZXIuRmFjdG9yeVRhcmdldC5QaXBlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmdGYWN0b3J5RGVmO1xuICAgICAgICB9LFxuICAgICAgICAvLyBNYWtlIHRoZSBwcm9wZXJ0eSBjb25maWd1cmFibGUgaW4gZGV2IG1vZGUgdG8gYWxsb3cgb3ZlcnJpZGluZyBpbiB0ZXN0c1xuICAgICAgICBjb25maWd1cmFibGU6ICEhbmdEZXZNb2RlLFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0eXBlLCBOR19QSVBFX0RFRiwge1xuICAgICAgICBnZXQ6ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChuZ1BpcGVEZWYgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXRhZGF0YSA9IGdldFBpcGVNZXRhZGF0YSh0eXBlLCBtZXRhKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHsgdXNhZ2U6IDAgLyogRGVjb3JhdG9yICovLCBraW5kOiAncGlwZScsIHR5cGU6IG1ldGFkYXRhLnR5cGUgfSk7XG4gICAgICAgICAgICAgICAgbmdQaXBlRGVmID1cbiAgICAgICAgICAgICAgICAgICAgY29tcGlsZXIuY29tcGlsZVBpcGUoYW5ndWxhckNvcmVFbnYsIGBuZzovLy8ke21ldGFkYXRhLm5hbWV9L8m1cGlwZS5qc2AsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZ1BpcGVEZWY7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIE1ha2UgdGhlIHByb3BlcnR5IGNvbmZpZ3VyYWJsZSBpbiBkZXYgbW9kZSB0byBhbGxvdyBvdmVycmlkaW5nIGluIHRlc3RzXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogISFuZ0Rldk1vZGUsXG4gICAgfSk7XG59XG5mdW5jdGlvbiBnZXRQaXBlTWV0YWRhdGEodHlwZSwgbWV0YSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIG5hbWU6IHR5cGUubmFtZSxcbiAgICAgICAgcGlwZU5hbWU6IG1ldGEubmFtZSxcbiAgICAgICAgcHVyZTogbWV0YS5wdXJlICE9PSB1bmRlZmluZWQgPyBtZXRhLnB1cmUgOiB0cnVlXG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFR5cGUgb2YgdGhlIERpcmVjdGl2ZSBtZXRhZGF0YS5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IERpcmVjdGl2ZSA9IG1ha2VEZWNvcmF0b3IoJ0RpcmVjdGl2ZScsIChkaXIgPSB7fSkgPT4gZGlyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgKHR5cGUsIG1ldGEpID0+IGNvbXBpbGVEaXJlY3RpdmUodHlwZSwgbWV0YSkpO1xuLyoqXG4gKiBDb21wb25lbnQgZGVjb3JhdG9yIGFuZCBtZXRhZGF0YS5cbiAqXG4gKiBAQW5ub3RhdGlvblxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBDb21wb25lbnQgPSBtYWtlRGVjb3JhdG9yKCdDb21wb25lbnQnLCAoYyA9IHt9KSA9PiAoT2JqZWN0LmFzc2lnbih7IGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdCB9LCBjKSksIERpcmVjdGl2ZSwgdW5kZWZpbmVkLCAodHlwZSwgbWV0YSkgPT4gY29tcGlsZUNvbXBvbmVudCh0eXBlLCBtZXRhKSk7XG4vKipcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IFBpcGUgPSBtYWtlRGVjb3JhdG9yKCdQaXBlJywgKHApID0+IChPYmplY3QuYXNzaWduKHsgcHVyZTogdHJ1ZSB9LCBwKSksIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCAodHlwZSwgbWV0YSkgPT4gY29tcGlsZVBpcGUodHlwZSwgbWV0YSkpO1xuLyoqXG4gKiBAQW5ub3RhdGlvblxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBJbnB1dCA9IG1ha2VQcm9wRGVjb3JhdG9yKCdJbnB1dCcsIChiaW5kaW5nUHJvcGVydHlOYW1lKSA9PiAoeyBiaW5kaW5nUHJvcGVydHlOYW1lIH0pKTtcbi8qKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgT3V0cHV0ID0gbWFrZVByb3BEZWNvcmF0b3IoJ091dHB1dCcsIChiaW5kaW5nUHJvcGVydHlOYW1lKSA9PiAoeyBiaW5kaW5nUHJvcGVydHlOYW1lIH0pKTtcbi8qKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgSG9zdEJpbmRpbmcgPSBtYWtlUHJvcERlY29yYXRvcignSG9zdEJpbmRpbmcnLCAoaG9zdFByb3BlcnR5TmFtZSkgPT4gKHsgaG9zdFByb3BlcnR5TmFtZSB9KSk7XG4vKipcbiAqIERlY29yYXRvciB0aGF0IGJpbmRzIGEgRE9NIGV2ZW50IHRvIGEgaG9zdCBsaXN0ZW5lciBhbmQgc3VwcGxpZXMgY29uZmlndXJhdGlvbiBtZXRhZGF0YS5cbiAqIEFuZ3VsYXIgaW52b2tlcyB0aGUgc3VwcGxpZWQgaGFuZGxlciBtZXRob2Qgd2hlbiB0aGUgaG9zdCBlbGVtZW50IGVtaXRzIHRoZSBzcGVjaWZpZWQgZXZlbnQsXG4gKiBhbmQgdXBkYXRlcyB0aGUgYm91bmQgZWxlbWVudCB3aXRoIHRoZSByZXN1bHQuXG4gKlxuICogSWYgdGhlIGhhbmRsZXIgbWV0aG9kIHJldHVybnMgZmFsc2UsIGFwcGxpZXMgYHByZXZlbnREZWZhdWx0YCBvbiB0aGUgYm91bmQgZWxlbWVudC5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBkZWNsYXJlcyBhIGRpcmVjdGl2ZVxuICogdGhhdCBhdHRhY2hlcyBhIGNsaWNrIGxpc3RlbmVyIHRvIGEgYnV0dG9uIGFuZCBjb3VudHMgY2xpY2tzLlxuICpcbiAqIGBgYHRzXG4gKiBARGlyZWN0aXZlKHtzZWxlY3RvcjogJ2J1dHRvbltjb3VudGluZ10nfSlcbiAqIGNsYXNzIENvdW50Q2xpY2tzIHtcbiAqICAgbnVtYmVyT2ZDbGlja3MgPSAwO1xuICpcbiAqICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudC50YXJnZXQnXSlcbiAqICAgb25DbGljayhidG4pIHtcbiAqICAgICBjb25zb2xlLmxvZygnYnV0dG9uJywgYnRuLCAnbnVtYmVyIG9mIGNsaWNrczonLCB0aGlzLm51bWJlck9mQ2xpY2tzKyspO1xuICogICB9XG4gKiB9XG4gKlxuICogQENvbXBvbmVudCh7XG4gKiAgIHNlbGVjdG9yOiAnYXBwJyxcbiAqICAgdGVtcGxhdGU6ICc8YnV0dG9uIGNvdW50aW5nPkluY3JlbWVudDwvYnV0dG9uPicsXG4gKiB9KVxuICogY2xhc3MgQXBwIHt9XG4gKlxuICogYGBgXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHJlZ2lzdGVycyBhbm90aGVyIERPTSBldmVudCBoYW5kbGVyIHRoYXQgbGlzdGVucyBmb3IgYEVudGVyYCBrZXktcHJlc3NcbiAqIGV2ZW50cyBvbiB0aGUgZ2xvYmFsIGB3aW5kb3dgLlxuICogYGBgIHRzXG4gKiBpbXBvcnQgeyBIb3N0TGlzdGVuZXIsIENvbXBvbmVudCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG4gKlxuICogQENvbXBvbmVudCh7XG4gKiAgIHNlbGVjdG9yOiAnYXBwJyxcbiAqICAgdGVtcGxhdGU6IGA8aDE+SGVsbG8sIHlvdSBoYXZlIHByZXNzZWQgZW50ZXIge3tjb3VudGVyfX0gbnVtYmVyIG9mIHRpbWVzITwvaDE+IFByZXNzIGVudGVyIGtleVxuICogdG8gaW5jcmVtZW50IHRoZSBjb3VudGVyLlxuICogICA8YnV0dG9uIChjbGljayk9XCJyZXNldENvdW50ZXIoKVwiPlJlc2V0IENvdW50ZXI8L2J1dHRvbj5gXG4gKiB9KVxuICogY2xhc3MgQXBwQ29tcG9uZW50IHtcbiAqICAgY291bnRlciA9IDA7XG4gKiAgIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzprZXlkb3duLmVudGVyJywgWyckZXZlbnQnXSlcbiAqICAgaGFuZGxlS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICogICAgIHRoaXMuY291bnRlcisrO1xuICogICB9XG4gKiAgIHJlc2V0Q291bnRlcigpIHtcbiAqICAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqIFRoZSBsaXN0IG9mIHZhbGlkIGtleSBuYW1lcyBmb3IgYGtleWRvd25gIGFuZCBga2V5dXBgIGV2ZW50c1xuICogY2FuIGJlIGZvdW5kIGhlcmU6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLWtleS8jbmFtZWQta2V5LWF0dHJpYnV0ZS12YWx1ZXNcbiAqXG4gKiBOb3RlIHRoYXQga2V5cyBjYW4gYWxzbyBiZSBjb21iaW5lZCwgZS5nLiBgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5zaGlmdC5hJylgLlxuICpcbiAqIFRoZSBnbG9iYWwgdGFyZ2V0IG5hbWVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gcHJlZml4IGFuIGV2ZW50IG5hbWUgYXJlXG4gKiBgZG9jdW1lbnQ6YCwgYHdpbmRvdzpgIGFuZCBgYm9keTpgLlxuICpcbiAqIEBBbm5vdGF0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IEhvc3RMaXN0ZW5lciA9IG1ha2VQcm9wRGVjb3JhdG9yKCdIb3N0TGlzdGVuZXInLCAoZXZlbnROYW1lLCBhcmdzKSA9PiAoeyBldmVudE5hbWUsIGFyZ3MgfSkpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQEFubm90YXRpb25cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgTmdNb2R1bGUgPSBtYWtlRGVjb3JhdG9yKCdOZ01vZHVsZScsIChuZ01vZHVsZSkgPT4gbmdNb2R1bGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcbi8qKlxuICogRGVjb3JhdG9yIHRoYXQgbWFya3MgdGhlIGZvbGxvd2luZyBjbGFzcyBhcyBhbiBOZ01vZHVsZSwgYW5kIHN1cHBsaWVzXG4gKiBjb25maWd1cmF0aW9uIG1ldGFkYXRhIGZvciBpdC5cbiAqXG4gKiAqIFRoZSBgZGVjbGFyYXRpb25zYCBhbmQgYGVudHJ5Q29tcG9uZW50c2Agb3B0aW9ucyBjb25maWd1cmUgdGhlIGNvbXBpbGVyXG4gKiB3aXRoIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYmVsb25ncyB0byB0aGUgTmdNb2R1bGUuXG4gKiAqIFRoZSBgcHJvdmlkZXJzYCBvcHRpb25zIGNvbmZpZ3VyZXMgdGhlIE5nTW9kdWxlJ3MgaW5qZWN0b3IgdG8gcHJvdmlkZVxuICogZGVwZW5kZW5jaWVzIHRoZSBOZ01vZHVsZSBtZW1iZXJzLlxuICogKiBUaGUgYGltcG9ydHNgIGFuZCBgZXhwb3J0c2Agb3B0aW9ucyBicmluZyBpbiBtZW1iZXJzIGZyb20gb3RoZXIgbW9kdWxlcywgYW5kIG1ha2VcbiAqIHRoaXMgbW9kdWxlJ3MgbWVtYmVycyBhdmFpbGFibGUgdG8gb3RoZXJzLlxuICovXG4odHlwZSwgbWV0YSkgPT4gY29tcGlsZU5nTW9kdWxlKHR5cGUsIG1ldGEpKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gbm9vcCguLi5hcmdzKSB7XG4gICAgLy8gRG8gbm90aGluZy5cbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoZSBleGlzdGVuY2Ugb2YgdGhpcyBjb25zdGFudCAoaW4gdGhpcyBwYXJ0aWN1bGFyIGZpbGUpIGluZm9ybXMgdGhlIEFuZ3VsYXIgY29tcGlsZXIgdGhhdCB0aGVcbiAqIGN1cnJlbnQgcHJvZ3JhbSBpcyBhY3R1YWxseSBAYW5ndWxhci9jb3JlLCB3aGljaCBuZWVkcyB0byBiZSBjb21waWxlZCBzcGVjaWFsbHkuXG4gKi9cbmNvbnN0IElUU19KVVNUX0FOR1VMQVIgPSB0cnVlO1xuXG4vKipcbiAqIEEgW0RJIHRva2VuXShndWlkZS9nbG9zc2FyeSNkaS10b2tlbiBcIkRJIHRva2VuIGRlZmluaXRpb25cIikgdGhhdCB5b3UgY2FuIHVzZSB0byBwcm92aWRlXG4gKiBvbmUgb3IgbW9yZSBpbml0aWFsaXphdGlvbiBmdW5jdGlvbnMuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZ1bmN0aW9ucyBhcmUgaW5qZWN0ZWQgYXQgYXBwbGljYXRpb24gc3RhcnR1cCBhbmQgZXhlY3V0ZWQgZHVyaW5nXG4gKiBhcHAgaW5pdGlhbGl6YXRpb24uIElmIGFueSBvZiB0aGVzZSBmdW5jdGlvbnMgcmV0dXJucyBhIFByb21pc2Ugb3IgYW4gT2JzZXJ2YWJsZSwgaW5pdGlhbGl6YXRpb25cbiAqIGRvZXMgbm90IGNvbXBsZXRlIHVudGlsIHRoZSBQcm9taXNlIGlzIHJlc29sdmVkIG9yIHRoZSBPYnNlcnZhYmxlIGlzIGNvbXBsZXRlZC5cbiAqXG4gKiBZb3UgY2FuLCBmb3IgZXhhbXBsZSwgY3JlYXRlIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IGxvYWRzIGxhbmd1YWdlIGRhdGFcbiAqIG9yIGFuIGV4dGVybmFsIGNvbmZpZ3VyYXRpb24sIGFuZCBwcm92aWRlIHRoYXQgZnVuY3Rpb24gdG8gdGhlIGBBUFBfSU5JVElBTElaRVJgIHRva2VuLlxuICogVGhlIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGR1cmluZyB0aGUgYXBwbGljYXRpb24gYm9vdHN0cmFwIHByb2Nlc3MsXG4gKiBhbmQgdGhlIG5lZWRlZCBkYXRhIGlzIGF2YWlsYWJsZSBvbiBzdGFydHVwLlxuICpcbiAqIEBzZWUgYEFwcGxpY2F0aW9uSW5pdFN0YXR1c2BcbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBpbGx1c3RyYXRlcyBob3cgdG8gY29uZmlndXJlIGEgbXVsdGktcHJvdmlkZXIgdXNpbmcgYEFQUF9JTklUSUFMSVpFUmAgdG9rZW5cbiAqIGFuZCBhIGZ1bmN0aW9uIHJldHVybmluZyBhIHByb21pc2UuXG4gKlxuICogYGBgXG4gKiAgZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcCgpOiBQcm9taXNlPGFueT4ge1xuICogICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAqICAgICAgLy8gRG8gc29tZSBhc3luY2hyb25vdXMgc3R1ZmZcbiAqICAgICAgcmVzb2x2ZSgpO1xuICogICAgfSk7XG4gKiAgfVxuICpcbiAqICBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbQnJvd3Nlck1vZHVsZV0sXG4gKiAgIGRlY2xhcmF0aW9uczogW0FwcENvbXBvbmVudF0sXG4gKiAgIGJvb3RzdHJhcDogW0FwcENvbXBvbmVudF0sXG4gKiAgIHByb3ZpZGVyczogW3tcbiAqICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gKiAgICAgdXNlRmFjdG9yeTogKCkgPT4gaW5pdGlhbGl6ZUFwcCxcbiAqICAgICBtdWx0aTogdHJ1ZVxuICogICAgfV1cbiAqICAgfSlcbiAqICBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XG4gKiBgYGBcbiAqXG4gKiBJdCdzIGFsc28gcG9zc2libGUgdG8gY29uZmlndXJlIGEgbXVsdGktcHJvdmlkZXIgdXNpbmcgYEFQUF9JTklUSUFMSVpFUmAgdG9rZW4gYW5kIGEgZnVuY3Rpb25cbiAqIHJldHVybmluZyBhbiBvYnNlcnZhYmxlLCBzZWUgYW4gZXhhbXBsZSBiZWxvdy4gTm90ZTogdGhlIGBIdHRwQ2xpZW50YCBpbiB0aGlzIGV4YW1wbGUgaXMgdXNlZCBmb3JcbiAqIGRlbW8gcHVycG9zZXMgdG8gaWxsdXN0cmF0ZSBob3cgdGhlIGZhY3RvcnkgZnVuY3Rpb24gY2FuIHdvcmsgd2l0aCBvdGhlciBwcm92aWRlcnMgYXZhaWxhYmxlXG4gKiB0aHJvdWdoIERJLlxuICpcbiAqIGBgYFxuICogIGZ1bmN0aW9uIGluaXRpYWxpemVBcHBGYWN0b3J5KGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpOiAoKSA9PiBPYnNlcnZhYmxlPGFueT4ge1xuICogICByZXR1cm4gKCkgPT4gaHR0cENsaWVudC5nZXQoXCJodHRwczovL3NvbWVVcmwuY29tL2FwaS91c2VyXCIpXG4gKiAgICAgLnBpcGUoXG4gKiAgICAgICAgdGFwKHVzZXIgPT4geyAuLi4gfSlcbiAqICAgICApO1xuICogIH1cbiAqXG4gKiAgQE5nTW9kdWxlKHtcbiAqICAgIGltcG9ydHM6IFtCcm93c2VyTW9kdWxlLCBIdHRwQ2xpZW50TW9kdWxlXSxcbiAqICAgIGRlY2xhcmF0aW9uczogW0FwcENvbXBvbmVudF0sXG4gKiAgICBib290c3RyYXA6IFtBcHBDb21wb25lbnRdLFxuICogICAgcHJvdmlkZXJzOiBbe1xuICogICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gKiAgICAgIHVzZUZhY3Rvcnk6IGluaXRpYWxpemVBcHBGYWN0b3J5LFxuICogICAgICBkZXBzOiBbSHR0cENsaWVudF0sXG4gKiAgICAgIG11bHRpOiB0cnVlXG4gKiAgICB9XVxuICogIH0pXG4gKiAgZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7fVxuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBBUFBfSU5JVElBTElaRVIgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0FwcGxpY2F0aW9uIEluaXRpYWxpemVyJyk7XG4vKipcbiAqIEEgY2xhc3MgdGhhdCByZWZsZWN0cyB0aGUgc3RhdGUgb2YgcnVubmluZyB7QGxpbmsgQVBQX0lOSVRJQUxJWkVSfSBmdW5jdGlvbnMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBBcHBsaWNhdGlvbkluaXRTdGF0dXMge1xuICAgIGNvbnN0cnVjdG9yKGFwcEluaXRzKSB7XG4gICAgICAgIHRoaXMuYXBwSW5pdHMgPSBhcHBJbml0cztcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gbm9vcDtcbiAgICAgICAgdGhpcy5yZWplY3QgPSBub29wO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRvbmVQcm9taXNlID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXM7XG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlajtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBydW5Jbml0aWFsaXplcnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXN5bmNJbml0UHJvbWlzZXMgPSBbXTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yZXNvbHZlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmFwcEluaXRzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXBwSW5pdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbml0UmVzdWx0ID0gdGhpcy5hcHBJbml0c1tpXSgpO1xuICAgICAgICAgICAgICAgIGlmIChpc1Byb21pc2UoaW5pdFJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJbml0UHJvbWlzZXMucHVzaChpbml0UmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXNPYnNlcnZhYmxlKGluaXRSZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGVBc1Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0UmVzdWx0LnN1YnNjcmliZSh7IGNvbXBsZXRlOiByZXNvbHZlLCBlcnJvcjogcmVqZWN0IH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJbml0UHJvbWlzZXMucHVzaChvYnNlcnZhYmxlQXNQcm9taXNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgUHJvbWlzZS5hbGwoYXN5bmNJbml0UHJvbWlzZXMpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZWplY3QoZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYXN5bmNJbml0UHJvbWlzZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIH1cbn1cbkFwcGxpY2F0aW9uSW5pdFN0YXR1cy7JtWZhYyA9IGZ1bmN0aW9uIEFwcGxpY2F0aW9uSW5pdFN0YXR1c19GYWN0b3J5KHQpIHsgcmV0dXJuIG5ldyAodCB8fCBBcHBsaWNhdGlvbkluaXRTdGF0dXMpKMm1ybVpbmplY3QoQVBQX0lOSVRJQUxJWkVSLCA4KSk7IH07XG5BcHBsaWNhdGlvbkluaXRTdGF0dXMuybVwcm92ID0gLypAX19QVVJFX18qLyDJtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IHRva2VuOiBBcHBsaWNhdGlvbkluaXRTdGF0dXMsIGZhY3Rvcnk6IEFwcGxpY2F0aW9uSW5pdFN0YXR1cy7JtWZhYywgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pO1xuKGZ1bmN0aW9uICgpIHtcbiAgICAodHlwZW9mIG5nRGV2TW9kZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBuZ0Rldk1vZGUpICYmIHNldENsYXNzTWV0YWRhdGEoQXBwbGljYXRpb25Jbml0U3RhdHVzLCBbe1xuICAgICAgICAgICAgdHlwZTogSW5qZWN0YWJsZSxcbiAgICAgICAgICAgIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9XVxuICAgICAgICB9XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gW3sgdHlwZTogdW5kZWZpbmVkLCBkZWNvcmF0b3JzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogSW5qZWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnczogW0FQUF9JTklUSUFMSVpFUl1cbiAgICAgICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogT3B0aW9uYWxcbiAgICAgICAgICAgICAgICAgICAgfV0gfV07XG4gICAgfSwgbnVsbCk7XG59KSgpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQSBbREkgdG9rZW5dKGd1aWRlL2dsb3NzYXJ5I2RpLXRva2VuIFwiREkgdG9rZW4gZGVmaW5pdGlvblwiKSByZXByZXNlbnRpbmcgYSB1bmlxdWUgc3RyaW5nIElELCB1c2VkXG4gKiBwcmltYXJpbHkgZm9yIHByZWZpeGluZyBhcHBsaWNhdGlvbiBhdHRyaWJ1dGVzIGFuZCBDU1Mgc3R5bGVzIHdoZW5cbiAqIHtAbGluayBWaWV3RW5jYXBzdWxhdGlvbiNFbXVsYXRlZCBWaWV3RW5jYXBzdWxhdGlvbi5FbXVsYXRlZH0gaXMgYmVpbmcgdXNlZC5cbiAqXG4gKiBCWSBkZWZhdWx0LCB0aGUgdmFsdWUgaXMgcmFuZG9tbHkgZ2VuZXJhdGVkIGFuZCBhc3NpZ25lZCB0byB0aGUgYXBwbGljYXRpb24gYnkgQW5ndWxhci5cbiAqIFRvIHByb3ZpZGUgYSBjdXN0b20gSUQgdmFsdWUsIHVzZSBhIERJIHByb3ZpZGVyIDwhLS0gVE9ETzogcHJvdmlkZXIgLS0+IHRvIGNvbmZpZ3VyZVxuICogdGhlIHJvb3Qge0BsaW5rIEluamVjdG9yfSB0aGF0IHVzZXMgdGhpcyB0b2tlbi5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IEFQUF9JRCA9IG5ldyBJbmplY3Rpb25Ub2tlbignQXBwSWQnLCB7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICAgIGZhY3Rvcnk6IF9hcHBJZFJhbmRvbVByb3ZpZGVyRmFjdG9yeSxcbn0pO1xuZnVuY3Rpb24gX2FwcElkUmFuZG9tUHJvdmlkZXJGYWN0b3J5KCkge1xuICAgIHJldHVybiBgJHtfcmFuZG9tQ2hhcigpfSR7X3JhbmRvbUNoYXIoKX0ke19yYW5kb21DaGFyKCl9YDtcbn1cbi8qKlxuICogUHJvdmlkZXJzIHRoYXQgZ2VuZXJhdGUgYSByYW5kb20gYEFQUF9JRF9UT0tFTmAuXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IEFQUF9JRF9SQU5ET01fUFJPVklERVIgPSB7XG4gICAgcHJvdmlkZTogQVBQX0lELFxuICAgIHVzZUZhY3Rvcnk6IF9hcHBJZFJhbmRvbVByb3ZpZGVyRmFjdG9yeSxcbiAgICBkZXBzOiBbXSxcbn07XG5mdW5jdGlvbiBfcmFuZG9tQ2hhcigpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSg5NyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1KSk7XG59XG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIGEgcGxhdGZvcm0gaXMgaW5pdGlhbGl6ZWQuXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IFBMQVRGT1JNX0lOSVRJQUxJWkVSID0gbmV3IEluamVjdGlvblRva2VuKCdQbGF0Zm9ybSBJbml0aWFsaXplcicpO1xuLyoqXG4gKiBBIHRva2VuIHRoYXQgaW5kaWNhdGVzIGFuIG9wYXF1ZSBwbGF0Zm9ybSBJRC5cbiAqIEBwdWJsaWNBcGlcbiAqL1xuY29uc3QgUExBVEZPUk1fSUQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1BsYXRmb3JtIElEJyk7XG4vKipcbiAqIEEgW0RJIHRva2VuXShndWlkZS9nbG9zc2FyeSNkaS10b2tlbiBcIkRJIHRva2VuIGRlZmluaXRpb25cIikgdGhhdCBwcm92aWRlcyBhIHNldCBvZiBjYWxsYmFja3MgdG9cbiAqIGJlIGNhbGxlZCBmb3IgZXZlcnkgY29tcG9uZW50IHRoYXQgaXMgYm9vdHN0cmFwcGVkLlxuICpcbiAqIEVhY2ggY2FsbGJhY2sgbXVzdCB0YWtlIGEgYENvbXBvbmVudFJlZmAgaW5zdGFuY2UgYW5kIHJldHVybiBub3RoaW5nLlxuICpcbiAqIGAoY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWYpID0+IHZvaWRgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBBUFBfQk9PVFNUUkFQX0xJU1RFTkVSID0gbmV3IEluamVjdGlvblRva2VuKCdhcHBCb290c3RyYXBMaXN0ZW5lcicpO1xuLyoqXG4gKiBBIFtESSB0b2tlbl0oZ3VpZGUvZ2xvc3NhcnkjZGktdG9rZW4gXCJESSB0b2tlbiBkZWZpbml0aW9uXCIpIHRoYXQgaW5kaWNhdGVzIHRoZSByb290IGRpcmVjdG9yeSBvZlxuICogdGhlIGFwcGxpY2F0aW9uXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IFBBQ0tBR0VfUk9PVF9VUkwgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0FwcGxpY2F0aW9uIFBhY2thZ2VzIFJvb3QgVVJMJyk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY2xhc3MgQ29uc29sZSB7XG4gICAgbG9nKG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICAgICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgfVxuICAgIC8vIE5vdGU6IGZvciByZXBvcnRpbmcgZXJyb3JzIHVzZSBgRE9NLmxvZ0Vycm9yKClgIGFzIGl0IGlzIHBsYXRmb3JtIHNwZWNpZmljXG4gICAgd2FybihtZXNzYWdlKSB7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICB9XG59XG5Db25zb2xlLsm1ZmFjID0gZnVuY3Rpb24gQ29uc29sZV9GYWN0b3J5KHQpIHsgcmV0dXJuIG5ldyAodCB8fCBDb25zb2xlKSgpOyB9O1xuQ29uc29sZS7JtXByb3YgPSAvKkBfX1BVUkVfXyovIMm1ybVkZWZpbmVJbmplY3RhYmxlKHsgdG9rZW46IENvbnNvbGUsIGZhY3Rvcnk6IENvbnNvbGUuybVmYWMgfSk7XG4oZnVuY3Rpb24gKCkge1xuICAgICh0eXBlb2YgbmdEZXZNb2RlID09PSBcInVuZGVmaW5lZFwiIHx8IG5nRGV2TW9kZSkgJiYgc2V0Q2xhc3NNZXRhZGF0YShDb25zb2xlLCBbe1xuICAgICAgICAgICAgdHlwZTogSW5qZWN0YWJsZVxuICAgICAgICB9XSwgbnVsbCwgbnVsbCk7XG59KSgpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogV29yayBvdXQgdGhlIGxvY2FsZSBmcm9tIHRoZSBwb3RlbnRpYWwgZ2xvYmFsIHByb3BlcnRpZXMuXG4gKlxuICogKiBDbG9zdXJlIENvbXBpbGVyOiB1c2UgYGdvb2cuZ2V0TG9jYWxlKClgLlxuICogKiBJdnkgZW5hYmxlZDogdXNlIGAkbG9jYWxpemUubG9jYWxlYFxuICovXG5mdW5jdGlvbiBnZXRHbG9iYWxMb2NhbGUoKSB7XG4gICAgaWYgKHR5cGVvZiBuZ0kxOG5DbG9zdXJlTW9kZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmdJMThuQ2xvc3VyZU1vZGUgJiZcbiAgICAgICAgdHlwZW9mIGdvb2cgIT09ICd1bmRlZmluZWQnICYmIGdvb2cuZ2V0TG9jYWxlKCkgIT09ICdlbicpIHtcbiAgICAgICAgLy8gKiBUaGUgZGVmYXVsdCBgZ29vZy5nZXRMb2NhbGUoKWAgdmFsdWUgaXMgYGVuYCwgd2hpbGUgQW5ndWxhciB1c2VkIGBlbi1VU2AuXG4gICAgICAgIC8vICogSW4gb3JkZXIgdG8gcHJlc2VydmUgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIHdlIHVzZSBBbmd1bGFyIGRlZmF1bHQgdmFsdWUgb3ZlclxuICAgICAgICAvLyAgIENsb3N1cmUgQ29tcGlsZXIncyBvbmUuXG4gICAgICAgIHJldHVybiBnb29nLmdldExvY2FsZSgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gS0VFUCBgdHlwZW9mICRsb2NhbGl6ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgJGxvY2FsaXplLmxvY2FsZWAgSU4gU1lOQyBXSVRIIFRIRSBMT0NBTElaRVxuICAgICAgICAvLyBDT01QSUxFLVRJTUUgSU5MSU5FUi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gKiBEdXJpbmcgY29tcGlsZSB0aW1lIGlubGluaW5nIG9mIHRyYW5zbGF0aW9ucyB0aGUgZXhwcmVzc2lvbiB3aWxsIGJlIHJlcGxhY2VkXG4gICAgICAgIC8vICAgd2l0aCBhIHN0cmluZyBsaXRlcmFsIHRoYXQgaXMgdGhlIGN1cnJlbnQgbG9jYWxlLiBPdGhlciBmb3JtcyBvZiB0aGlzIGV4cHJlc3Npb24gYXJlIG5vdFxuICAgICAgICAvLyAgIGd1YXJhbnRlZWQgdG8gYmUgcmVwbGFjZWQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vICogRHVyaW5nIHJ1bnRpbWUgdHJhbnNsYXRpb24gZXZhbHVhdGlvbiwgdGhlIGRldmVsb3BlciBpcyByZXF1aXJlZCB0byBzZXQgYCRsb2NhbGl6ZS5sb2NhbGVgXG4gICAgICAgIC8vICAgaWYgcmVxdWlyZWQsIG9yIGp1c3QgdG8gcHJvdmlkZSB0aGVpciBvd24gYExPQ0FMRV9JRGAgcHJvdmlkZXIuXG4gICAgICAgIHJldHVybiAodHlwZW9mICRsb2NhbGl6ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgJGxvY2FsaXplLmxvY2FsZSkgfHwgREVGQVVMVF9MT0NBTEVfSUQ7XG4gICAgfVxufVxuLyoqXG4gKiBQcm92aWRlIHRoaXMgdG9rZW4gdG8gc2V0IHRoZSBsb2NhbGUgb2YgeW91ciBhcHBsaWNhdGlvbi5cbiAqIEl0IGlzIHVzZWQgZm9yIGkxOG4gZXh0cmFjdGlvbiwgYnkgaTE4biBwaXBlcyAoRGF0ZVBpcGUsIEkxOG5QbHVyYWxQaXBlLCBDdXJyZW5jeVBpcGUsXG4gKiBEZWNpbWFsUGlwZSBhbmQgUGVyY2VudFBpcGUpIGFuZCBieSBJQ1UgZXhwcmVzc2lvbnMuXG4gKlxuICogU2VlIHRoZSBbaTE4biBndWlkZV0oZ3VpZGUvaTE4bi1jb21tb24tbG9jYWxlLWlkKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBMT0NBTEVfSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICogaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi9hcHAvYXBwLm1vZHVsZSc7XG4gKlxuICogcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUsIHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IExPQ0FMRV9JRCwgdXNlVmFsdWU6ICdlbi1VUycgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBMT0NBTEVfSUQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0xvY2FsZUlkJywge1xuICAgIHByb3ZpZGVkSW46ICdyb290JyxcbiAgICBmYWN0b3J5OiAoKSA9PiBpbmplY3QoTE9DQUxFX0lELCBJbmplY3RGbGFncy5PcHRpb25hbCB8IEluamVjdEZsYWdzLlNraXBTZWxmKSB8fCBnZXRHbG9iYWxMb2NhbGUoKSxcbn0pO1xuLyoqXG4gKiBQcm92aWRlIHRoaXMgdG9rZW4gdG8gc2V0IHRoZSBkZWZhdWx0IGN1cnJlbmN5IGNvZGUgeW91ciBhcHBsaWNhdGlvbiB1c2VzIGZvclxuICogQ3VycmVuY3lQaXBlIHdoZW4gdGhlcmUgaXMgbm8gY3VycmVuY3kgY29kZSBwYXNzZWQgaW50byBpdC4gVGhpcyBpcyBvbmx5IHVzZWQgYnlcbiAqIEN1cnJlbmN5UGlwZSBhbmQgaGFzIG5vIHJlbGF0aW9uIHRvIGxvY2FsZSBjdXJyZW5jeS4gRGVmYXVsdHMgdG8gVVNEIGlmIG5vdCBjb25maWd1cmVkLlxuICpcbiAqIFNlZSB0aGUgW2kxOG4gZ3VpZGVdKGd1aWRlL2kxOG4tY29tbW9uLWxvY2FsZS1pZCkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGlzLWhlbHBmdWxcIj5cbiAqXG4gKiAqKkRlcHJlY2F0aW9uIG5vdGljZToqKlxuICpcbiAqIFRoZSBkZWZhdWx0IGN1cnJlbmN5IGNvZGUgaXMgY3VycmVudGx5IGFsd2F5cyBgVVNEYCBidXQgdGhpcyBpcyBkZXByZWNhdGVkIGZyb20gdjkuXG4gKlxuICogKipJbiB2MTAgdGhlIGRlZmF1bHQgY3VycmVuY3kgY29kZSB3aWxsIGJlIHRha2VuIGZyb20gdGhlIGN1cnJlbnQgbG9jYWxlLioqXG4gKlxuICogSWYgeW91IG5lZWQgdGhlIHByZXZpb3VzIGJlaGF2aW9yIHRoZW4gc2V0IGl0IGJ5IGNyZWF0aW5nIGEgYERFRkFVTFRfQ1VSUkVOQ1lfQ09ERWAgcHJvdmlkZXIgaW5cbiAqIHlvdXIgYXBwbGljYXRpb24gYE5nTW9kdWxlYDpcbiAqXG4gKiBgYGB0c1xuICoge3Byb3ZpZGU6IERFRkFVTFRfQ1VSUkVOQ1lfQ09ERSwgdXNlVmFsdWU6ICdVU0QnfVxuICogYGBgXG4gKlxuICogPC9kaXY+XG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgcGxhdGZvcm1Ccm93c2VyRHluYW1pYyB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXItZHluYW1pYyc7XG4gKiBpbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tICcuL2FwcC9hcHAubW9kdWxlJztcbiAqXG4gKiBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljKCkuYm9vdHN0cmFwTW9kdWxlKEFwcE1vZHVsZSwge1xuICogICBwcm92aWRlcnM6IFt7cHJvdmlkZTogREVGQVVMVF9DVVJSRU5DWV9DT0RFLCB1c2VWYWx1ZTogJ0VVUicgfV1cbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBERUZBVUxUX0NVUlJFTkNZX0NPREUgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0RlZmF1bHRDdXJyZW5jeUNvZGUnLCB7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICAgIGZhY3Rvcnk6ICgpID0+IFVTRF9DVVJSRU5DWV9DT0RFLFxufSk7XG4vKipcbiAqIFVzZSB0aGlzIHRva2VuIGF0IGJvb3RzdHJhcCB0byBwcm92aWRlIHRoZSBjb250ZW50IG9mIHlvdXIgdHJhbnNsYXRpb24gZmlsZSAoYHh0YmAsXG4gKiBgeGxmYCBvciBgeGxmMmApIHdoZW4geW91IHdhbnQgdG8gdHJhbnNsYXRlIHlvdXIgYXBwbGljYXRpb24gaW4gYW5vdGhlciBsYW5ndWFnZS5cbiAqXG4gKiBTZWUgdGhlIFtpMThuIGd1aWRlXShndWlkZS9pMThuLWNvbW1vbi1tZXJnZSkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqICMjIyBFeGFtcGxlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVFJBTlNMQVRJT05TIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQgeyBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJztcbiAqIGltcG9ydCB7IEFwcE1vZHVsZSB9IGZyb20gJy4vYXBwL2FwcC5tb2R1bGUnO1xuICpcbiAqIC8vIGNvbnRlbnQgb2YgeW91ciB0cmFuc2xhdGlvbiBmaWxlXG4gKiBjb25zdCB0cmFuc2xhdGlvbnMgPSAnLi4uLic7XG4gKlxuICogcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUsIHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IFRSQU5TTEFUSU9OUywgdXNlVmFsdWU6IHRyYW5zbGF0aW9ucyB9XVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IFRSQU5TTEFUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignVHJhbnNsYXRpb25zJyk7XG4vKipcbiAqIFByb3ZpZGUgdGhpcyB0b2tlbiBhdCBib290c3RyYXAgdG8gc2V0IHRoZSBmb3JtYXQgb2YgeW91ciB7QGxpbmsgVFJBTlNMQVRJT05TfTogYHh0YmAsXG4gKiBgeGxmYCBvciBgeGxmMmAuXG4gKlxuICogU2VlIHRoZSBbaTE4biBndWlkZV0oZ3VpZGUvaTE4bi1jb21tb24tbWVyZ2UpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRSQU5TTEFUSU9OU19GT1JNQVQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICogaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi9hcHAvYXBwLm1vZHVsZSc7XG4gKlxuICogcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUsIHtcbiAqICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IFRSQU5TTEFUSU9OU19GT1JNQVQsIHVzZVZhbHVlOiAneGxmJyB9XVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNvbnN0IFRSQU5TTEFUSU9OU19GT1JNQVQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1RyYW5zbGF0aW9uc0Zvcm1hdCcpO1xuLyoqXG4gKiBVc2UgdGhpcyBlbnVtIGF0IGJvb3RzdHJhcCBhcyBhbiBvcHRpb24gb2YgYGJvb3RzdHJhcE1vZHVsZWAgdG8gZGVmaW5lIHRoZSBzdHJhdGVneVxuICogdGhhdCB0aGUgY29tcGlsZXIgc2hvdWxkIHVzZSBpbiBjYXNlIG9mIG1pc3NpbmcgdHJhbnNsYXRpb25zOlxuICogLSBFcnJvcjogdGhyb3cgaWYgeW91IGhhdmUgbWlzc2luZyB0cmFuc2xhdGlvbnMuXG4gKiAtIFdhcm5pbmcgKGRlZmF1bHQpOiBzaG93IGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBhbmQvb3Igc2hlbGwuXG4gKiAtIElnbm9yZTogZG8gbm90aGluZy5cbiAqXG4gKiBTZWUgdGhlIFtpMThuIGd1aWRlXShndWlkZS9pMThuLWNvbW1vbi1tZXJnZSNyZXBvcnQtbWlzc2luZy10cmFuc2xhdGlvbnMpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTWlzc2luZ1RyYW5zbGF0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICogaW1wb3J0IHsgQXBwTW9kdWxlIH0gZnJvbSAnLi9hcHAvYXBwLm1vZHVsZSc7XG4gKlxuICogcGxhdGZvcm1Ccm93c2VyRHluYW1pYygpLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUsIHtcbiAqICAgbWlzc2luZ1RyYW5zbGF0aW9uOiBNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneS5FcnJvclxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbnZhciBNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneTtcbihmdW5jdGlvbiAoTWlzc2luZ1RyYW5zbGF0aW9uU3RyYXRlZ3kpIHtcbiAgICBNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneVtNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneVtcIkVycm9yXCJdID0gMF0gPSBcIkVycm9yXCI7XG4gICAgTWlzc2luZ1RyYW5zbGF0aW9uU3RyYXRlZ3lbTWlzc2luZ1RyYW5zbGF0aW9uU3RyYXRlZ3lbXCJXYXJuaW5nXCJdID0gMV0gPSBcIldhcm5pbmdcIjtcbiAgICBNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneVtNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneVtcIklnbm9yZVwiXSA9IDJdID0gXCJJZ25vcmVcIjtcbn0pKE1pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5IHx8IChNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneSA9IHt9KSk7XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBDb21iaW5hdGlvbiBvZiBOZ01vZHVsZUZhY3RvcnkgYW5kIENvbXBvbmVudEZhY3Rvcmllcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIEl2eSBKSVQgbW9kZSBkb2Vzbid0IHJlcXVpcmUgYWNjZXNzaW5nIHRoaXMgc3ltYm9sLlxuICogU2VlIFtKSVQgQVBJIGNoYW5nZXMgZHVlIHRvIFZpZXdFbmdpbmUgZGVwcmVjYXRpb25dKGd1aWRlL2RlcHJlY2F0aW9ucyNqaXQtYXBpLWNoYW5nZXMpIGZvclxuICogYWRkaXRpb25hbCBjb250ZXh0LlxuICovXG5jbGFzcyBNb2R1bGVXaXRoQ29tcG9uZW50RmFjdG9yaWVzIHtcbiAgICBjb25zdHJ1Y3RvcihuZ01vZHVsZUZhY3RvcnksIGNvbXBvbmVudEZhY3Rvcmllcykge1xuICAgICAgICB0aGlzLm5nTW9kdWxlRmFjdG9yeSA9IG5nTW9kdWxlRmFjdG9yeTtcbiAgICAgICAgdGhpcy5jb21wb25lbnRGYWN0b3JpZXMgPSBjb21wb25lbnRGYWN0b3JpZXM7XG4gICAgfVxufVxuLyoqXG4gKiBMb3ctbGV2ZWwgc2VydmljZSBmb3IgcnVubmluZyB0aGUgYW5ndWxhciBjb21waWxlciBkdXJpbmcgcnVudGltZVxuICogdG8gY3JlYXRlIHtAbGluayBDb21wb25lbnRGYWN0b3J5fXMsIHdoaWNoXG4gKiBjYW4gbGF0ZXIgYmUgdXNlZCB0byBjcmVhdGUgYW5kIHJlbmRlciBhIENvbXBvbmVudCBpbnN0YW5jZS5cbiAqXG4gKiBFYWNoIGBATmdNb2R1bGVgIHByb3ZpZGVzIGFuIG93biBgQ29tcGlsZXJgIHRvIGl0cyBpbmplY3RvcixcbiAqIHRoYXQgd2lsbCB1c2UgdGhlIGRpcmVjdGl2ZXMvcGlwZXMgb2YgdGhlIG5nIG1vZHVsZSBmb3IgY29tcGlsYXRpb25cbiAqIG9mIGNvbXBvbmVudHMuXG4gKlxuICogQHB1YmxpY0FwaVxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBJdnkgSklUIG1vZGUgZG9lc24ndCByZXF1aXJlIGFjY2Vzc2luZyB0aGlzIHN5bWJvbC5cbiAqIFNlZSBbSklUIEFQSSBjaGFuZ2VzIGR1ZSB0byBWaWV3RW5naW5lIGRlcHJlY2F0aW9uXShndWlkZS9kZXByZWNhdGlvbnMjaml0LWFwaS1jaGFuZ2VzKSBmb3JcbiAqIGFkZGl0aW9uYWwgY29udGV4dC5cbiAqL1xuY2xhc3MgQ29tcGlsZXIge1xuICAgIC8qKlxuICAgICAqIENvbXBpbGVzIHRoZSBnaXZlbiBOZ01vZHVsZSBhbmQgYWxsIG9mIGl0cyBjb21wb25lbnRzLiBBbGwgdGVtcGxhdGVzIG9mIHRoZSBjb21wb25lbnRzIGxpc3RlZFxuICAgICAqIGluIGBlbnRyeUNvbXBvbmVudHNgIGhhdmUgdG8gYmUgaW5saW5lZC5cbiAgICAgKi9cbiAgICBjb21waWxlTW9kdWxlU3luYyhtb2R1bGVUeXBlKSB7XG4gICAgICAgIHJldHVybiBuZXcgTmdNb2R1bGVGYWN0b3J5KG1vZHVsZVR5cGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21waWxlcyB0aGUgZ2l2ZW4gTmdNb2R1bGUgYW5kIGFsbCBvZiBpdHMgY29tcG9uZW50c1xuICAgICAqL1xuICAgIGNvbXBpbGVNb2R1bGVBc3luYyhtb2R1bGVUeXBlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jb21waWxlTW9kdWxlU3luYyhtb2R1bGVUeXBlKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNhbWUgYXMge0BsaW5rICNjb21waWxlTW9kdWxlU3luY30gYnV0IGFsc28gY3JlYXRlcyBDb21wb25lbnRGYWN0b3JpZXMgZm9yIGFsbCBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIGNvbXBpbGVNb2R1bGVBbmRBbGxDb21wb25lbnRzU3luYyhtb2R1bGVUeXBlKSB7XG4gICAgICAgIGNvbnN0IG5nTW9kdWxlRmFjdG9yeSA9IHRoaXMuY29tcGlsZU1vZHVsZVN5bmMobW9kdWxlVHlwZSk7XG4gICAgICAgIGNvbnN0IG1vZHVsZURlZiA9IGdldE5nTW9kdWxlRGVmKG1vZHVsZVR5cGUpO1xuICAgICAgICBjb25zdCBjb21wb25lbnRGYWN0b3JpZXMgPSBtYXliZVVud3JhcEZuKG1vZHVsZURlZi5kZWNsYXJhdGlvbnMpXG4gICAgICAgICAgICAucmVkdWNlKChmYWN0b3JpZXMsIGRlY2xhcmF0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnREZWYgPSBnZXRDb21wb25lbnREZWYoZGVjbGFyYXRpb24pO1xuICAgICAgICAgICAgY29tcG9uZW50RGVmICYmIGZhY3Rvcmllcy5wdXNoKG5ldyBDb21wb25lbnRGYWN0b3J5KGNvbXBvbmVudERlZikpO1xuICAgICAgICAgICAgcmV0dXJuIGZhY3RvcmllcztcbiAgICAgICAgfSwgW10pO1xuICAgICAgICByZXR1cm4gbmV3IE1vZHVsZVdpdGhDb21wb25lbnRGYWN0b3JpZXMobmdNb2R1bGVGYWN0b3J5LCBjb21wb25lbnRGYWN0b3JpZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIHtAbGluayAjY29tcGlsZU1vZHVsZUFzeW5jfSBidXQgYWxzbyBjcmVhdGVzIENvbXBvbmVudEZhY3RvcmllcyBmb3IgYWxsIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgY29tcGlsZU1vZHVsZUFuZEFsbENvbXBvbmVudHNBc3luYyhtb2R1bGVUeXBlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5jb21waWxlTW9kdWxlQW5kQWxsQ29tcG9uZW50c1N5bmMobW9kdWxlVHlwZSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgYWxsIGNhY2hlcy5cbiAgICAgKi9cbiAgICBjbGVhckNhY2hlKCkgeyB9XG4gICAgLyoqXG4gICAgICogQ2xlYXJzIHRoZSBjYWNoZSBmb3IgdGhlIGdpdmVuIGNvbXBvbmVudC9uZ01vZHVsZS5cbiAgICAgKi9cbiAgICBjbGVhckNhY2hlRm9yKHR5cGUpIHsgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlkIGZvciBhIGdpdmVuIE5nTW9kdWxlLCBpZiBvbmUgaXMgZGVmaW5lZCBhbmQga25vd24gdG8gdGhlIGNvbXBpbGVyLlxuICAgICAqL1xuICAgIGdldE1vZHVsZUlkKG1vZHVsZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG5Db21waWxlci7JtWZhYyA9IGZ1bmN0aW9uIENvbXBpbGVyX0ZhY3RvcnkodCkgeyByZXR1cm4gbmV3ICh0IHx8IENvbXBpbGVyKSgpOyB9O1xuQ29tcGlsZXIuybVwcm92ID0gLypAX19QVVJFX18qLyDJtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IHRva2VuOiBDb21waWxlciwgZmFjdG9yeTogQ29tcGlsZXIuybVmYWMsIHByb3ZpZGVkSW46ICdyb290JyB9KTtcbihmdW5jdGlvbiAoKSB7XG4gICAgKHR5cGVvZiBuZ0Rldk1vZGUgPT09IFwidW5kZWZpbmVkXCIgfHwgbmdEZXZNb2RlKSAmJiBzZXRDbGFzc01ldGFkYXRhKENvbXBpbGVyLCBbe1xuICAgICAgICAgICAgdHlwZTogSW5qZWN0YWJsZSxcbiAgICAgICAgICAgIGFyZ3M6IFt7IHByb3ZpZGVkSW46ICdyb290JyB9XVxuICAgICAgICB9XSwgbnVsbCwgbnVsbCk7XG59KSgpO1xuLyoqXG4gKiBUb2tlbiB0byBwcm92aWRlIENvbXBpbGVyT3B0aW9ucyBpbiB0aGUgcGxhdGZvcm0gaW5qZWN0b3IuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBDT01QSUxFUl9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuKCdjb21waWxlck9wdGlvbnMnKTtcbi8qKlxuICogQSBmYWN0b3J5IGZvciBjcmVhdGluZyBhIENvbXBpbGVyXG4gKlxuICogQHB1YmxpY0FwaVxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBJdnkgSklUIG1vZGUgZG9lc24ndCByZXF1aXJlIGFjY2Vzc2luZyB0aGlzIHN5bWJvbC5cbiAqIFNlZSBbSklUIEFQSSBjaGFuZ2VzIGR1ZSB0byBWaWV3RW5naW5lIGRlcHJlY2F0aW9uXShndWlkZS9kZXByZWNhdGlvbnMjaml0LWFwaS1jaGFuZ2VzKSBmb3JcbiAqIGFkZGl0aW9uYWwgY29udGV4dC5cbiAqL1xuY2xhc3MgQ29tcGlsZXJGYWN0b3J5IHtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jb25zdCBwcm9taXNlID0gKCgpID0+IFByb21pc2UucmVzb2x2ZSgwKSkoKTtcbmZ1bmN0aW9uIHNjaGVkdWxlTWljcm9UYXNrKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBab25lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyB1c2UgcHJvbWlzZSB0byBzY2hlZHVsZSBtaWNyb1Rhc2sgaW5zdGVhZCBvZiB1c2UgWm9uZVxuICAgICAgICBwcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZm4gJiYgZm4uYXBwbHkobnVsbCwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgWm9uZS5jdXJyZW50LnNjaGVkdWxlTWljcm9UYXNrKCdzY2hlZHVsZU1pY3JvdGFzaycsIGZuKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkge1xuICAgIGxldCBuYXRpdmVSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBfZ2xvYmFsWydyZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcbiAgICBsZXQgbmF0aXZlQ2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBfZ2xvYmFsWydjYW5jZWxBbmltYXRpb25GcmFtZSddO1xuICAgIGlmICh0eXBlb2YgWm9uZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lICYmIG5hdGl2ZUNhbmNlbEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIC8vIHVzZSB1bnBhdGNoZWQgdmVyc2lvbiBvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobmF0aXZlIGRlbGVnYXRlKSBpZiBwb3NzaWJsZVxuICAgICAgICAvLyB0byBhdm9pZCBhbm90aGVyIENoYW5nZSBkZXRlY3Rpb25cbiAgICAgICAgY29uc3QgdW5wYXRjaGVkUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gbmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lW1pvbmUuX19zeW1ib2xfXygnT3JpZ2luYWxEZWxlZ2F0ZScpXTtcbiAgICAgICAgaWYgKHVucGF0Y2hlZFJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgICAgbmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gdW5wYXRjaGVkUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVucGF0Y2hlZENhbmNlbEFuaW1hdGlvbkZyYW1lID0gbmF0aXZlQ2FuY2VsQW5pbWF0aW9uRnJhbWVbWm9uZS5fX3N5bWJvbF9fKCdPcmlnaW5hbERlbGVnYXRlJyldO1xuICAgICAgICBpZiAodW5wYXRjaGVkQ2FuY2VsQW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICAgIG5hdGl2ZUNhbmNlbEFuaW1hdGlvbkZyYW1lID0gdW5wYXRjaGVkQ2FuY2VsQW5pbWF0aW9uRnJhbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgbmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lLCBuYXRpdmVDYW5jZWxBbmltYXRpb25GcmFtZSB9O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogQW4gaW5qZWN0YWJsZSBzZXJ2aWNlIGZvciBleGVjdXRpbmcgd29yayBpbnNpZGUgb3Igb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lLlxuICpcbiAqIFRoZSBtb3N0IGNvbW1vbiB1c2Ugb2YgdGhpcyBzZXJ2aWNlIGlzIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlIHdoZW4gc3RhcnRpbmcgYSB3b3JrIGNvbnNpc3Rpbmcgb2ZcbiAqIG9uZSBvciBtb3JlIGFzeW5jaHJvbm91cyB0YXNrcyB0aGF0IGRvbid0IHJlcXVpcmUgVUkgdXBkYXRlcyBvciBlcnJvciBoYW5kbGluZyB0byBiZSBoYW5kbGVkIGJ5XG4gKiBBbmd1bGFyLiBTdWNoIHRhc2tzIGNhbiBiZSBraWNrZWQgb2ZmIHZpYSB7QGxpbmsgI3J1bk91dHNpZGVBbmd1bGFyfSBhbmQgaWYgbmVlZGVkLCB0aGVzZSB0YXNrc1xuICogY2FuIHJlZW50ZXIgdGhlIEFuZ3VsYXIgem9uZSB2aWEge0BsaW5rICNydW59LlxuICpcbiAqIDwhLS0gVE9ETzogYWRkL2ZpeCBsaW5rcyB0bzpcbiAqICAgLSBkb2NzIGV4cGxhaW5pbmcgem9uZXMgYW5kIHRoZSB1c2Ugb2Ygem9uZXMgaW4gQW5ndWxhciBhbmQgY2hhbmdlLWRldGVjdGlvblxuICogICAtIGxpbmsgdG8gcnVuT3V0c2lkZUFuZ3VsYXIvcnVuICh0aHJvdWdob3V0IHRoaXMgZmlsZSEpXG4gKiAgIC0tPlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYFxuICogaW1wb3J0IHtDb21wb25lbnQsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKiBpbXBvcnQge05nSWZ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG4gKlxuICogQENvbXBvbmVudCh7XG4gKiAgIHNlbGVjdG9yOiAnbmctem9uZS1kZW1vJyxcbiAqICAgdGVtcGxhdGU6IGBcbiAqICAgICA8aDI+RGVtbzogTmdab25lPC9oMj5cbiAqXG4gKiAgICAgPHA+UHJvZ3Jlc3M6IHt7cHJvZ3Jlc3N9fSU8L3A+XG4gKiAgICAgPHAgKm5nSWY9XCJwcm9ncmVzcyA+PSAxMDBcIj5Eb25lIHByb2Nlc3Npbmcge3tsYWJlbH19IG9mIEFuZ3VsYXIgem9uZSE8L3A+XG4gKlxuICogICAgIDxidXR0b24gKGNsaWNrKT1cInByb2Nlc3NXaXRoaW5Bbmd1bGFyWm9uZSgpXCI+UHJvY2VzcyB3aXRoaW4gQW5ndWxhciB6b25lPC9idXR0b24+XG4gKiAgICAgPGJ1dHRvbiAoY2xpY2spPVwicHJvY2Vzc091dHNpZGVPZkFuZ3VsYXJab25lKClcIj5Qcm9jZXNzIG91dHNpZGUgb2YgQW5ndWxhciB6b25lPC9idXR0b24+XG4gKiAgIGAsXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIE5nWm9uZURlbW8ge1xuICogICBwcm9ncmVzczogbnVtYmVyID0gMDtcbiAqICAgbGFiZWw6IHN0cmluZztcbiAqXG4gKiAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX25nWm9uZTogTmdab25lKSB7fVxuICpcbiAqICAgLy8gTG9vcCBpbnNpZGUgdGhlIEFuZ3VsYXIgem9uZVxuICogICAvLyBzbyB0aGUgVUkgRE9FUyByZWZyZXNoIGFmdGVyIGVhY2ggc2V0VGltZW91dCBjeWNsZVxuICogICBwcm9jZXNzV2l0aGluQW5ndWxhclpvbmUoKSB7XG4gKiAgICAgdGhpcy5sYWJlbCA9ICdpbnNpZGUnO1xuICogICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICogICAgIHRoaXMuX2luY3JlYXNlUHJvZ3Jlc3MoKCkgPT4gY29uc29sZS5sb2coJ0luc2lkZSBEb25lIScpKTtcbiAqICAgfVxuICpcbiAqICAgLy8gTG9vcCBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmVcbiAqICAgLy8gc28gdGhlIFVJIERPRVMgTk9UIHJlZnJlc2ggYWZ0ZXIgZWFjaCBzZXRUaW1lb3V0IGN5Y2xlXG4gKiAgIHByb2Nlc3NPdXRzaWRlT2ZBbmd1bGFyWm9uZSgpIHtcbiAqICAgICB0aGlzLmxhYmVsID0gJ291dHNpZGUnO1xuICogICAgIHRoaXMucHJvZ3Jlc3MgPSAwO1xuICogICAgIHRoaXMuX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gKiAgICAgICB0aGlzLl9pbmNyZWFzZVByb2dyZXNzKCgpID0+IHtcbiAqICAgICAgICAgLy8gcmVlbnRlciB0aGUgQW5ndWxhciB6b25lIGFuZCBkaXNwbGF5IGRvbmVcbiAqICAgICAgICAgdGhpcy5fbmdab25lLnJ1bigoKSA9PiB7IGNvbnNvbGUubG9nKCdPdXRzaWRlIERvbmUhJyk7IH0pO1xuICogICAgICAgfSk7XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqXG4gKiAgIF9pbmNyZWFzZVByb2dyZXNzKGRvbmVDYWxsYmFjazogKCkgPT4gdm9pZCkge1xuICogICAgIHRoaXMucHJvZ3Jlc3MgKz0gMTtcbiAqICAgICBjb25zb2xlLmxvZyhgQ3VycmVudCBwcm9ncmVzczogJHt0aGlzLnByb2dyZXNzfSVgKTtcbiAqXG4gKiAgICAgaWYgKHRoaXMucHJvZ3Jlc3MgPCAxMDApIHtcbiAqICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHRoaXMuX2luY3JlYXNlUHJvZ3Jlc3MoZG9uZUNhbGxiYWNrKSwgMTApO1xuICogICAgIH0gZWxzZSB7XG4gKiAgICAgICBkb25lQ2FsbGJhY2soKTtcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgTmdab25lIHtcbiAgICBjb25zdHJ1Y3Rvcih7IGVuYWJsZUxvbmdTdGFja1RyYWNlID0gZmFsc2UsIHNob3VsZENvYWxlc2NlRXZlbnRDaGFuZ2VEZXRlY3Rpb24gPSBmYWxzZSwgc2hvdWxkQ29hbGVzY2VSdW5DaGFuZ2VEZXRlY3Rpb24gPSBmYWxzZSB9KSB7XG4gICAgICAgIHRoaXMuaGFzUGVuZGluZ01hY3JvdGFza3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNQZW5kaW5nTWljcm90YXNrcyA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGVyZSBhcmUgbm8gb3V0c3RhbmRpbmcgbWljcm90YXNrcyBvciBtYWNyb3Rhc2tzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5pc1N0YWJsZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3RpZmllcyB3aGVuIGNvZGUgZW50ZXJzIEFuZ3VsYXIgWm9uZS4gVGhpcyBnZXRzIGZpcmVkIGZpcnN0IG9uIFZNIFR1cm4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uVW5zdGFibGUgPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vdGlmaWVzIHdoZW4gdGhlcmUgaXMgbm8gbW9yZSBtaWNyb3Rhc2tzIGVucXVldWVkIGluIHRoZSBjdXJyZW50IFZNIFR1cm4uXG4gICAgICAgICAqIFRoaXMgaXMgYSBoaW50IGZvciBBbmd1bGFyIHRvIGRvIGNoYW5nZSBkZXRlY3Rpb24sIHdoaWNoIG1heSBlbnF1ZXVlIG1vcmUgbWljcm90YXNrcy5cbiAgICAgICAgICogRm9yIHRoaXMgcmVhc29uIHRoaXMgZXZlbnQgY2FuIGZpcmUgbXVsdGlwbGUgdGltZXMgcGVyIFZNIFR1cm4uXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uTWljcm90YXNrRW1wdHkgPSBuZXcgRXZlbnRFbWl0dGVyKGZhbHNlKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vdGlmaWVzIHdoZW4gdGhlIGxhc3QgYG9uTWljcm90YXNrRW1wdHlgIGhhcyBydW4gYW5kIHRoZXJlIGFyZSBubyBtb3JlIG1pY3JvdGFza3MsIHdoaWNoXG4gICAgICAgICAqIGltcGxpZXMgd2UgYXJlIGFib3V0IHRvIHJlbGlucXVpc2ggVk0gdHVybi5cbiAgICAgICAgICogVGhpcyBldmVudCBnZXRzIGNhbGxlZCBqdXN0IG9uY2UuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLm9uU3RhYmxlID0gbmV3IEV2ZW50RW1pdHRlcihmYWxzZSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb3RpZmllcyB0aGF0IGFuIGVycm9yIGhhcyBiZWVuIGRlbGl2ZXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMub25FcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoZmFsc2UpO1xuICAgICAgICBpZiAodHlwZW9mIFpvbmUgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW4gdGhpcyBjb25maWd1cmF0aW9uIEFuZ3VsYXIgcmVxdWlyZXMgWm9uZS5qc2ApO1xuICAgICAgICB9XG4gICAgICAgIFpvbmUuYXNzZXJ0Wm9uZVBhdGNoZWQoKTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHNlbGYuX25lc3RpbmcgPSAwO1xuICAgICAgICBzZWxmLl9vdXRlciA9IHNlbGYuX2lubmVyID0gWm9uZS5jdXJyZW50O1xuICAgICAgICBpZiAoWm9uZVsnVGFza1RyYWNraW5nWm9uZVNwZWMnXSkge1xuICAgICAgICAgICAgc2VsZi5faW5uZXIgPSBzZWxmLl9pbm5lci5mb3JrKG5ldyBab25lWydUYXNrVHJhY2tpbmdab25lU3BlYyddKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5hYmxlTG9uZ1N0YWNrVHJhY2UgJiYgWm9uZVsnbG9uZ1N0YWNrVHJhY2Vab25lU3BlYyddKSB7XG4gICAgICAgICAgICBzZWxmLl9pbm5lciA9IHNlbGYuX2lubmVyLmZvcmsoWm9uZVsnbG9uZ1N0YWNrVHJhY2Vab25lU3BlYyddKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZiBzaG91bGRDb2FsZXNjZVJ1bkNoYW5nZURldGVjdGlvbiBpcyB0cnVlLCBhbGwgdGFza3MgaW5jbHVkaW5nIGV2ZW50IHRhc2tzIHdpbGwgYmVcbiAgICAgICAgLy8gY29hbGVzY2VkLCBzbyBzaG91bGRDb2FsZXNjZUV2ZW50Q2hhbmdlRGV0ZWN0aW9uIG9wdGlvbiBpcyBub3QgbmVjZXNzYXJ5IGFuZCBjYW4gYmUgc2tpcHBlZC5cbiAgICAgICAgc2VsZi5zaG91bGRDb2FsZXNjZUV2ZW50Q2hhbmdlRGV0ZWN0aW9uID1cbiAgICAgICAgICAgICFzaG91bGRDb2FsZXNjZVJ1bkNoYW5nZURldGVjdGlvbiAmJiBzaG91bGRDb2FsZXNjZUV2ZW50Q2hhbmdlRGV0ZWN0aW9uO1xuICAgICAgICBzZWxmLnNob3VsZENvYWxlc2NlUnVuQ2hhbmdlRGV0ZWN0aW9uID0gc2hvdWxkQ29hbGVzY2VSdW5DaGFuZ2VEZXRlY3Rpb247XG4gICAgICAgIHNlbGYubGFzdFJlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gLTE7XG4gICAgICAgIHNlbGYubmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZ2V0TmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lKCkubmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgICAgICBmb3JrSW5uZXJab25lV2l0aEFuZ3VsYXJCZWhhdmlvcihzZWxmKTtcbiAgICB9XG4gICAgc3RhdGljIGlzSW5Bbmd1bGFyWm9uZSgpIHtcbiAgICAgICAgLy8gWm9uZSBuZWVkcyB0byBiZSBjaGVja2VkLCBiZWNhdXNlIHRoaXMgbWV0aG9kIG1pZ2h0IGJlIGNhbGxlZCBldmVuIHdoZW4gTm9vcE5nWm9uZSBpcyB1c2VkLlxuICAgICAgICByZXR1cm4gdHlwZW9mIFpvbmUgIT09ICd1bmRlZmluZWQnICYmIFpvbmUuY3VycmVudC5nZXQoJ2lzQW5ndWxhclpvbmUnKSA9PT0gdHJ1ZTtcbiAgICB9XG4gICAgc3RhdGljIGFzc2VydEluQW5ndWxhclpvbmUoKSB7XG4gICAgICAgIGlmICghTmdab25lLmlzSW5Bbmd1bGFyWm9uZSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRvIGJlIGluIEFuZ3VsYXIgWm9uZSwgYnV0IGl0IGlzIG5vdCEnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgYXNzZXJ0Tm90SW5Bbmd1bGFyWm9uZSgpIHtcbiAgICAgICAgaWYgKE5nWm9uZS5pc0luQW5ndWxhclpvbmUoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0byBub3QgYmUgaW4gQW5ndWxhciBab25lLCBidXQgaXQgaXMhJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZSBhbmQgcmV0dXJucyB2YWx1ZSByZXR1cm5lZCBieVxuICAgICAqIHRoZSBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIFJ1bm5pbmcgZnVuY3Rpb25zIHZpYSBgcnVuYCBhbGxvd3MgeW91IHRvIHJlZW50ZXIgQW5ndWxhciB6b25lIGZyb20gYSB0YXNrIHRoYXQgd2FzIGV4ZWN1dGVkXG4gICAgICogb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lICh0eXBpY2FsbHkgc3RhcnRlZCB2aWEge0BsaW5rICNydW5PdXRzaWRlQW5ndWxhcn0pLlxuICAgICAqXG4gICAgICogQW55IGZ1dHVyZSB0YXNrcyBvciBtaWNyb3Rhc2tzIHNjaGVkdWxlZCBmcm9tIHdpdGhpbiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udGludWUgZXhlY3V0aW5nIGZyb21cbiAgICAgKiB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZS5cbiAgICAgKlxuICAgICAqIElmIGEgc3luY2hyb25vdXMgZXJyb3IgaGFwcGVucyBpdCB3aWxsIGJlIHJldGhyb3duIGFuZCBub3QgcmVwb3J0ZWQgdmlhIGBvbkVycm9yYC5cbiAgICAgKi9cbiAgICBydW4oZm4sIGFwcGx5VGhpcywgYXBwbHlBcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lci5ydW4oZm4sIGFwcGx5VGhpcywgYXBwbHlBcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24gc3luY2hyb25vdXNseSB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZSBhcyBhIHRhc2sgYW5kIHJldHVybnMgdmFsdWVcbiAgICAgKiByZXR1cm5lZCBieSB0aGUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBSdW5uaW5nIGZ1bmN0aW9ucyB2aWEgYHJ1bmAgYWxsb3dzIHlvdSB0byByZWVudGVyIEFuZ3VsYXIgem9uZSBmcm9tIGEgdGFzayB0aGF0IHdhcyBleGVjdXRlZFxuICAgICAqIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZSAodHlwaWNhbGx5IHN0YXJ0ZWQgdmlhIHtAbGluayAjcnVuT3V0c2lkZUFuZ3VsYXJ9KS5cbiAgICAgKlxuICAgICAqIEFueSBmdXR1cmUgdGFza3Mgb3IgbWljcm90YXNrcyBzY2hlZHVsZWQgZnJvbSB3aXRoaW4gdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnRpbnVlIGV4ZWN1dGluZyBmcm9tXG4gICAgICogd2l0aGluIHRoZSBBbmd1bGFyIHpvbmUuXG4gICAgICpcbiAgICAgKiBJZiBhIHN5bmNocm9ub3VzIGVycm9yIGhhcHBlbnMgaXQgd2lsbCBiZSByZXRocm93biBhbmQgbm90IHJlcG9ydGVkIHZpYSBgb25FcnJvcmAuXG4gICAgICovXG4gICAgcnVuVGFzayhmbiwgYXBwbHlUaGlzLCBhcHBseUFyZ3MsIG5hbWUpIHtcbiAgICAgICAgY29uc3Qgem9uZSA9IHRoaXMuX2lubmVyO1xuICAgICAgICBjb25zdCB0YXNrID0gem9uZS5zY2hlZHVsZUV2ZW50VGFzaygnTmdab25lRXZlbnQ6ICcgKyBuYW1lLCBmbiwgRU1QVFlfUEFZTE9BRCwgbm9vcCwgbm9vcCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gem9uZS5ydW5UYXNrKHRhc2ssIGFwcGx5VGhpcywgYXBwbHlBcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHpvbmUuY2FuY2VsVGFzayh0YXNrKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBTYW1lIGFzIGBydW5gLCBleGNlcHQgdGhhdCBzeW5jaHJvbm91cyBlcnJvcnMgYXJlIGNhdWdodCBhbmQgZm9yd2FyZGVkIHZpYSBgb25FcnJvcmAgYW5kIG5vdFxuICAgICAqIHJldGhyb3duLlxuICAgICAqL1xuICAgIHJ1bkd1YXJkZWQoZm4sIGFwcGx5VGhpcywgYXBwbHlBcmdzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbm5lci5ydW5HdWFyZGVkKGZuLCBhcHBseVRoaXMsIGFwcGx5QXJncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVzIHRoZSBgZm5gIGZ1bmN0aW9uIHN5bmNocm9ub3VzbHkgaW4gQW5ndWxhcidzIHBhcmVudCB6b25lIGFuZCByZXR1cm5zIHZhbHVlIHJldHVybmVkIGJ5XG4gICAgICogdGhlIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogUnVubmluZyBmdW5jdGlvbnMgdmlhIHtAbGluayAjcnVuT3V0c2lkZUFuZ3VsYXJ9IGFsbG93cyB5b3UgdG8gZXNjYXBlIEFuZ3VsYXIncyB6b25lIGFuZCBkb1xuICAgICAqIHdvcmsgdGhhdFxuICAgICAqIGRvZXNuJ3QgdHJpZ2dlciBBbmd1bGFyIGNoYW5nZS1kZXRlY3Rpb24gb3IgaXMgc3ViamVjdCB0byBBbmd1bGFyJ3MgZXJyb3IgaGFuZGxpbmcuXG4gICAgICpcbiAgICAgKiBBbnkgZnV0dXJlIHRhc2tzIG9yIG1pY3JvdGFza3Mgc2NoZWR1bGVkIGZyb20gd2l0aGluIHRoaXMgZnVuY3Rpb24gd2lsbCBjb250aW51ZSBleGVjdXRpbmcgZnJvbVxuICAgICAqIG91dHNpZGUgb2YgdGhlIEFuZ3VsYXIgem9uZS5cbiAgICAgKlxuICAgICAqIFVzZSB7QGxpbmsgI3J1bn0gdG8gcmVlbnRlciB0aGUgQW5ndWxhciB6b25lIGFuZCBkbyB3b3JrIHRoYXQgdXBkYXRlcyB0aGUgYXBwbGljYXRpb24gbW9kZWwuXG4gICAgICovXG4gICAgcnVuT3V0c2lkZUFuZ3VsYXIoZm4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX291dGVyLnJ1bihmbik7XG4gICAgfVxufVxuY29uc3QgRU1QVFlfUEFZTE9BRCA9IHt9O1xuZnVuY3Rpb24gY2hlY2tTdGFibGUoem9uZSkge1xuICAgIC8vIFRPRE86IEBKaWFMaVBhc3Npb24sIHNob3VsZCBjaGVjayB6b25lLmlzQ2hlY2tTdGFibGVSdW5uaW5nIHRvIHByZXZlbnRcbiAgICAvLyByZS1lbnRyeS4gVGhlIGNhc2UgaXM6XG4gICAgLy9cbiAgICAvLyBAQ29tcG9uZW50KHsuLi59KVxuICAgIC8vIGV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQge1xuICAgIC8vIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUpIHtcbiAgICAvLyAgIHRoaXMubmdab25lLm9uU3RhYmxlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgLy8gICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiBjb25zb2xlLmxvZygnc3RhYmxlJyk7KTtcbiAgICAvLyAgIH0pO1xuICAgIC8vIH1cbiAgICAvL1xuICAgIC8vIFRoZSBvblN0YWJsZSBzdWJzY3JpYmVyIHJ1biBhbm90aGVyIGZ1bmN0aW9uIGluc2lkZSBuZ1pvbmVcbiAgICAvLyB3aGljaCBjYXVzZXMgYGNoZWNrU3RhYmxlKClgIHJlLWVudHJ5LlxuICAgIC8vIEJ1dCB0aGlzIGZpeCBjYXVzZXMgc29tZSBpc3N1ZXMgaW4gZzMsIHNvIHRoaXMgZml4IHdpbGwgYmVcbiAgICAvLyBsYXVuY2hlZCBpbiBhbm90aGVyIFBSLlxuICAgIGlmICh6b25lLl9uZXN0aW5nID09IDAgJiYgIXpvbmUuaGFzUGVuZGluZ01pY3JvdGFza3MgJiYgIXpvbmUuaXNTdGFibGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHpvbmUuX25lc3RpbmcrKztcbiAgICAgICAgICAgIHpvbmUub25NaWNyb3Rhc2tFbXB0eS5lbWl0KG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgem9uZS5fbmVzdGluZy0tO1xuICAgICAgICAgICAgaWYgKCF6b25lLmhhc1BlbmRpbmdNaWNyb3Rhc2tzKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB6b25lLm9uU3RhYmxlLmVtaXQobnVsbCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgem9uZS5pc1N0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gZGVsYXlDaGFuZ2VEZXRlY3Rpb25Gb3JFdmVudHMoem9uZSkge1xuICAgIC8qKlxuICAgICAqIFdlIGFsc28gbmVlZCB0byBjaGVjayBfbmVzdGluZyBoZXJlXG4gICAgICogQ29uc2lkZXIgdGhlIGZvbGxvd2luZyBjYXNlIHdpdGggc2hvdWxkQ29hbGVzY2VSdW5DaGFuZ2VEZXRlY3Rpb24gPSB0cnVlXG4gICAgICpcbiAgICAgKiBuZ1pvbmUucnVuKCgpID0+IHt9KTtcbiAgICAgKiBuZ1pvbmUucnVuKCgpID0+IHt9KTtcbiAgICAgKlxuICAgICAqIFdlIHdhbnQgdGhlIHR3byBgbmdab25lLnJ1bigpYCBvbmx5IHRyaWdnZXIgb25lIGNoYW5nZSBkZXRlY3Rpb25cbiAgICAgKiB3aGVuIHNob3VsZENvYWxlc2NlUnVuQ2hhbmdlRGV0ZWN0aW9uIGlzIHRydWUuXG4gICAgICogQW5kIGJlY2F1c2UgaW4gdGhpcyBjYXNlLCBjaGFuZ2UgZGV0ZWN0aW9uIHJ1biBpbiBhc3luYyB3YXkocmVxdWVzdEFuaW1hdGlvbkZyYW1lKSxcbiAgICAgKiBzbyB3ZSBhbHNvIG5lZWQgdG8gY2hlY2sgdGhlIF9uZXN0aW5nIGhlcmUgdG8gcHJldmVudCBtdWx0aXBsZVxuICAgICAqIGNoYW5nZSBkZXRlY3Rpb25zLlxuICAgICAqL1xuICAgIGlmICh6b25lLmlzQ2hlY2tTdGFibGVSdW5uaW5nIHx8IHpvbmUubGFzdFJlcXVlc3RBbmltYXRpb25GcmFtZUlkICE9PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHpvbmUubGFzdFJlcXVlc3RBbmltYXRpb25GcmFtZUlkID0gem9uZS5uYXRpdmVSZXF1ZXN0QW5pbWF0aW9uRnJhbWUuY2FsbChfZ2xvYmFsLCAoKSA9PiB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSB3b3JrIGFyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzY4MzkuXG4gICAgICAgIC8vIFRoZSBjb3JlIGlzc3VlIGlzIHRoYXQgd2hlbiBldmVudCBjb2FsZXNjaW5nIGlzIGVuYWJsZWQgaXQgaXMgcG9zc2libGUgZm9yIG1pY3JvdGFza3NcbiAgICAgICAgLy8gdG8gZ2V0IGZsdXNoZWQgdG9vIGVhcmx5IChBcyBpcyB0aGUgY2FzZSB3aXRoIGBQcm9taXNlLnRoZW5gKSBiZXR3ZWVuIHRoZVxuICAgICAgICAvLyBjb2FsZXNjaW5nIGV2ZW50VGFza3MuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRvIHdvcmthcm91bmQgdGhpcyB3ZSBzY2hlZHVsZSBhIFwiZmFrZVwiIGV2ZW50VGFzayBiZWZvcmUgd2UgcHJvY2VzcyB0aGVcbiAgICAgICAgLy8gY29hbGVzY2luZyBldmVudFRhc2tzLiBUaGUgYmVuZWZpdCBvZiB0aGlzIGlzIHRoYXQgdGhlIFwiZmFrZVwiIGNvbnRhaW5lciBldmVudFRhc2tcbiAgICAgICAgLy8gIHdpbGwgcHJldmVudCB0aGUgbWljcm90YXNrcyBxdWV1ZSBmcm9tIGdldHRpbmcgZHJhaW5lZCBpbiBiZXR3ZWVuIHRoZSBjb2FsZXNjaW5nXG4gICAgICAgIC8vIGV2ZW50VGFzayBleGVjdXRpb24uXG4gICAgICAgIGlmICghem9uZS5mYWtlVG9wRXZlbnRUYXNrKSB7XG4gICAgICAgICAgICB6b25lLmZha2VUb3BFdmVudFRhc2sgPSBab25lLnJvb3Quc2NoZWR1bGVFdmVudFRhc2soJ2Zha2VUb3BFdmVudFRhc2snLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgem9uZS5sYXN0UmVxdWVzdEFuaW1hdGlvbkZyYW1lSWQgPSAtMTtcbiAgICAgICAgICAgICAgICB1cGRhdGVNaWNyb1Rhc2tTdGF0dXMoem9uZSk7XG4gICAgICAgICAgICAgICAgem9uZS5pc0NoZWNrU3RhYmxlUnVubmluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2hlY2tTdGFibGUoem9uZSk7XG4gICAgICAgICAgICAgICAgem9uZS5pc0NoZWNrU3RhYmxlUnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSwgdW5kZWZpbmVkLCAoKSA9PiB7IH0sICgpID0+IHsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgem9uZS5mYWtlVG9wRXZlbnRUYXNrLmludm9rZSgpO1xuICAgIH0pO1xuICAgIHVwZGF0ZU1pY3JvVGFza1N0YXR1cyh6b25lKTtcbn1cbmZ1bmN0aW9uIGZvcmtJbm5lclpvbmVXaXRoQW5ndWxhckJlaGF2aW9yKHpvbmUpIHtcbiAgICBjb25zdCBkZWxheUNoYW5nZURldGVjdGlvbkZvckV2ZW50c0RlbGVnYXRlID0gKCkgPT4ge1xuICAgICAgICBkZWxheUNoYW5nZURldGVjdGlvbkZvckV2ZW50cyh6b25lKTtcbiAgICB9O1xuICAgIHpvbmUuX2lubmVyID0gem9uZS5faW5uZXIuZm9yayh7XG4gICAgICAgIG5hbWU6ICdhbmd1bGFyJyxcbiAgICAgICAgcHJvcGVydGllczogeyAnaXNBbmd1bGFyWm9uZSc6IHRydWUgfSxcbiAgICAgICAgb25JbnZva2VUYXNrOiAoZGVsZWdhdGUsIGN1cnJlbnQsIHRhcmdldCwgdGFzaywgYXBwbHlUaGlzLCBhcHBseUFyZ3MpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb25FbnRlcih6b25lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZWdhdGUuaW52b2tlVGFzayh0YXJnZXQsIHRhc2ssIGFwcGx5VGhpcywgYXBwbHlBcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlmICgoem9uZS5zaG91bGRDb2FsZXNjZUV2ZW50Q2hhbmdlRGV0ZWN0aW9uICYmIHRhc2sudHlwZSA9PT0gJ2V2ZW50VGFzaycpIHx8XG4gICAgICAgICAgICAgICAgICAgIHpvbmUuc2hvdWxkQ29hbGVzY2VSdW5DaGFuZ2VEZXRlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsYXlDaGFuZ2VEZXRlY3Rpb25Gb3JFdmVudHNEZWxlZ2F0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkxlYXZlKHpvbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkludm9rZTogKGRlbGVnYXRlLCBjdXJyZW50LCB0YXJnZXQsIGNhbGxiYWNrLCBhcHBseVRoaXMsIGFwcGx5QXJncywgc291cmNlKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9uRW50ZXIoem9uZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLmludm9rZSh0YXJnZXQsIGNhbGxiYWNrLCBhcHBseVRoaXMsIGFwcGx5QXJncywgc291cmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlmICh6b25lLnNob3VsZENvYWxlc2NlUnVuQ2hhbmdlRGV0ZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGF5Q2hhbmdlRGV0ZWN0aW9uRm9yRXZlbnRzRGVsZWdhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb25MZWF2ZSh6b25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25IYXNUYXNrOiAoZGVsZWdhdGUsIGN1cnJlbnQsIHRhcmdldCwgaGFzVGFza1N0YXRlKSA9PiB7XG4gICAgICAgICAgICBkZWxlZ2F0ZS5oYXNUYXNrKHRhcmdldCwgaGFzVGFza1N0YXRlKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50ID09PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIGhhc1Rhc2sgZXZlbnRzIHdoaWNoIG9yaWdpbmF0ZSBmcm9tIG91ciB6b25lXG4gICAgICAgICAgICAgICAgLy8gKEEgY2hpbGQgaGFzVGFzayBldmVudCBpcyBub3QgaW50ZXJlc3RpbmcgdG8gdXMpXG4gICAgICAgICAgICAgICAgaWYgKGhhc1Rhc2tTdGF0ZS5jaGFuZ2UgPT0gJ21pY3JvVGFzaycpIHtcbiAgICAgICAgICAgICAgICAgICAgem9uZS5faGFzUGVuZGluZ01pY3JvdGFza3MgPSBoYXNUYXNrU3RhdGUubWljcm9UYXNrO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVNaWNyb1Rhc2tTdGF0dXMoem9uZSk7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrU3RhYmxlKHpvbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChoYXNUYXNrU3RhdGUuY2hhbmdlID09ICdtYWNyb1Rhc2snKSB7XG4gICAgICAgICAgICAgICAgICAgIHpvbmUuaGFzUGVuZGluZ01hY3JvdGFza3MgPSBoYXNUYXNrU3RhdGUubWFjcm9UYXNrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25IYW5kbGVFcnJvcjogKGRlbGVnYXRlLCBjdXJyZW50LCB0YXJnZXQsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICBkZWxlZ2F0ZS5oYW5kbGVFcnJvcih0YXJnZXQsIGVycm9yKTtcbiAgICAgICAgICAgIHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gem9uZS5vbkVycm9yLmVtaXQoZXJyb3IpKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gdXBkYXRlTWljcm9UYXNrU3RhdHVzKHpvbmUpIHtcbiAgICBpZiAoem9uZS5faGFzUGVuZGluZ01pY3JvdGFza3MgfHxcbiAgICAgICAgKCh6b25lLnNob3VsZENvYWxlc2NlRXZlbnRDaGFuZ2VEZXRlY3Rpb24gfHwgem9uZS5zaG91bGRDb2FsZXNjZVJ1bkNoYW5nZURldGVjdGlvbikgJiZcbiAgICAgICAgICAgIHpvbmUubGFzdFJlcXVlc3RBbmltYXRpb25GcmFtZUlkICE9PSAtMSkpIHtcbiAgICAgICAgem9uZS5oYXNQZW5kaW5nTWljcm90YXNrcyA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB6b25lLmhhc1BlbmRpbmdNaWNyb3Rhc2tzID0gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gb25FbnRlcih6b25lKSB7XG4gICAgem9uZS5fbmVzdGluZysrO1xuICAgIGlmICh6b25lLmlzU3RhYmxlKSB7XG4gICAgICAgIHpvbmUuaXNTdGFibGUgPSBmYWxzZTtcbiAgICAgICAgem9uZS5vblVuc3RhYmxlLmVtaXQobnVsbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gb25MZWF2ZSh6b25lKSB7XG4gICAgem9uZS5fbmVzdGluZy0tO1xuICAgIGNoZWNrU3RhYmxlKHpvbmUpO1xufVxuLyoqXG4gKiBQcm92aWRlcyBhIG5vb3AgaW1wbGVtZW50YXRpb24gb2YgYE5nWm9uZWAgd2hpY2ggZG9lcyBub3RoaW5nLiBUaGlzIHpvbmUgcmVxdWlyZXMgZXhwbGljaXQgY2FsbHNcbiAqIHRvIGZyYW1ld29yayB0byBwZXJmb3JtIHJlbmRlcmluZy5cbiAqL1xuY2xhc3MgTm9vcE5nWm9uZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaGFzUGVuZGluZ01pY3JvdGFza3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oYXNQZW5kaW5nTWFjcm90YXNrcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3RhYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vblVuc3RhYmxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB0aGlzLm9uTWljcm90YXNrRW1wdHkgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25TdGFibGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMub25FcnJvciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgcnVuKGZuLCBhcHBseVRoaXMsIGFwcGx5QXJncykge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoYXBwbHlUaGlzLCBhcHBseUFyZ3MpO1xuICAgIH1cbiAgICBydW5HdWFyZGVkKGZuLCBhcHBseVRoaXMsIGFwcGx5QXJncykge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoYXBwbHlUaGlzLCBhcHBseUFyZ3MpO1xuICAgIH1cbiAgICBydW5PdXRzaWRlQW5ndWxhcihmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICB9XG4gICAgcnVuVGFzayhmbiwgYXBwbHlUaGlzLCBhcHBseUFyZ3MsIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGFwcGx5VGhpcywgYXBwbHlBcmdzKTtcbiAgICB9XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBUaGUgVGVzdGFiaWxpdHkgc2VydmljZSBwcm92aWRlcyB0ZXN0aW5nIGhvb2tzIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGZyb21cbiAqIHRoZSBicm93c2VyLiBFYWNoIGJvb3RzdHJhcHBlZCBBbmd1bGFyIGFwcGxpY2F0aW9uIG9uIHRoZSBwYWdlIHdpbGwgaGF2ZVxuICogYW4gaW5zdGFuY2Ugb2YgVGVzdGFiaWxpdHkuXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIFRlc3RhYmlsaXR5IHtcbiAgICBjb25zdHJ1Y3Rvcihfbmdab25lKSB7XG4gICAgICAgIHRoaXMuX25nWm9uZSA9IF9uZ1pvbmU7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuX2lzWm9uZVN0YWJsZSA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIGFueSB3b3JrIHdhcyBkb25lIHNpbmNlIHRoZSBsYXN0ICd3aGVuU3RhYmxlJyBjYWxsYmFjay4gVGhpcyBpc1xuICAgICAgICAgKiB1c2VmdWwgdG8gZGV0ZWN0IGlmIHRoaXMgY291bGQgaGF2ZSBwb3RlbnRpYWxseSBkZXN0YWJpbGl6ZWQgYW5vdGhlclxuICAgICAgICAgKiBjb21wb25lbnQgd2hpbGUgaXQgaXMgc3RhYmlsaXppbmcuXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZGlkV29yayA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSBbXTtcbiAgICAgICAgdGhpcy50YXNrVHJhY2tpbmdab25lID0gbnVsbDtcbiAgICAgICAgdGhpcy5fd2F0Y2hBbmd1bGFyRXZlbnRzKCk7XG4gICAgICAgIF9uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudGFza1RyYWNraW5nWm9uZSA9XG4gICAgICAgICAgICAgICAgdHlwZW9mIFpvbmUgPT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogWm9uZS5jdXJyZW50LmdldCgnVGFza1RyYWNraW5nWm9uZScpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3dhdGNoQW5ndWxhckV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5fbmdab25lLm9uVW5zdGFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWRXb3JrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9pc1pvbmVTdGFibGUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9uZ1pvbmUub25TdGFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIE5nWm9uZS5hc3NlcnROb3RJbkFuZ3VsYXJab25lKCk7XG4gICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlTWljcm9UYXNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lzWm9uZVN0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ydW5DYWxsYmFja3NJZlJlYWR5KCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBudW1iZXIgb2YgcGVuZGluZyByZXF1ZXN0XG4gICAgICogQGRlcHJlY2F0ZWQgcGVuZGluZyByZXF1ZXN0cyBhcmUgbm93IHRyYWNrZWQgd2l0aCB6b25lcy5cbiAgICAgKi9cbiAgICBpbmNyZWFzZVBlbmRpbmdSZXF1ZXN0Q291bnQoKSB7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdDb3VudCArPSAxO1xuICAgICAgICB0aGlzLl9kaWRXb3JrID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdDb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjcmVhc2VzIHRoZSBudW1iZXIgb2YgcGVuZGluZyByZXF1ZXN0XG4gICAgICogQGRlcHJlY2F0ZWQgcGVuZGluZyByZXF1ZXN0cyBhcmUgbm93IHRyYWNrZWQgd2l0aCB6b25lc1xuICAgICAqL1xuICAgIGRlY3JlYXNlUGVuZGluZ1JlcXVlc3RDb3VudCgpIHtcbiAgICAgICAgdGhpcy5fcGVuZGluZ0NvdW50IC09IDE7XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nQ291bnQgPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BlbmRpbmcgYXN5bmMgcmVxdWVzdHMgYmVsb3cgemVybycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3J1bkNhbGxiYWNrc0lmUmVhZHkoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdDb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hldGhlciBhbiBhc3NvY2lhdGVkIGFwcGxpY2F0aW9uIGlzIHN0YWJsZVxuICAgICAqL1xuICAgIGlzU3RhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNab25lU3RhYmxlICYmIHRoaXMuX3BlbmRpbmdDb3VudCA9PT0gMCAmJiAhdGhpcy5fbmdab25lLmhhc1BlbmRpbmdNYWNyb3Rhc2tzO1xuICAgIH1cbiAgICBfcnVuQ2FsbGJhY2tzSWZSZWFkeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdGFibGUoKSkge1xuICAgICAgICAgICAgLy8gU2NoZWR1bGVzIHRoZSBjYWxsIGJhY2tzIGluIGEgbmV3IGZyYW1lIHNvIHRoYXQgaXQgaXMgYWx3YXlzIGFzeW5jLlxuICAgICAgICAgICAgc2NoZWR1bGVNaWNyb1Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLl9jYWxsYmFja3MubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjYiA9IHRoaXMuX2NhbGxiYWNrcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNiLnRpbWVvdXRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGNiLmRvbmVDYih0aGlzLl9kaWRXb3JrKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlkV29yayA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBTdGlsbCBub3Qgc3RhYmxlLCBzZW5kIHVwZGF0ZXMuXG4gICAgICAgICAgICBsZXQgcGVuZGluZyA9IHRoaXMuZ2V0UGVuZGluZ1Rhc2tzKCk7XG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MuZmlsdGVyKChjYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjYi51cGRhdGVDYiAmJiBjYi51cGRhdGVDYihwZW5kaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY2IudGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fZGlkV29yayA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UGVuZGluZ1Rhc2tzKCkge1xuICAgICAgICBpZiAoIXRoaXMudGFza1RyYWNraW5nWm9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIC8vIENvcHkgdGhlIHRhc2tzIGRhdGEgc28gdGhhdCB3ZSBkb24ndCBsZWFrIHRhc2tzLlxuICAgICAgICByZXR1cm4gdGhpcy50YXNrVHJhY2tpbmdab25lLm1hY3JvVGFza3MubWFwKCh0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNvdXJjZTogdC5zb3VyY2UsXG4gICAgICAgICAgICAgICAgLy8gRnJvbSBUYXNrVHJhY2tpbmdab25lOlxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3pvbmUuanMvYmxvYi9tYXN0ZXIvbGliL3pvbmUtc3BlYy90YXNrLXRyYWNraW5nLnRzI0w0MFxuICAgICAgICAgICAgICAgIGNyZWF0aW9uTG9jYXRpb246IHQuY3JlYXRpb25Mb2NhdGlvbixcbiAgICAgICAgICAgICAgICBkYXRhOiB0LmRhdGFcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRDYWxsYmFjayhjYiwgdGltZW91dCwgdXBkYXRlQ2IpIHtcbiAgICAgICAgbGV0IHRpbWVvdXRJZCA9IC0xO1xuICAgICAgICBpZiAodGltZW91dCAmJiB0aW1lb3V0ID4gMCkge1xuICAgICAgICAgICAgdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzLmZpbHRlcigoY2IpID0+IGNiLnRpbWVvdXRJZCAhPT0gdGltZW91dElkKTtcbiAgICAgICAgICAgICAgICBjYih0aGlzLl9kaWRXb3JrLCB0aGlzLmdldFBlbmRpbmdUYXNrcygpKTtcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKHsgZG9uZUNiOiBjYiwgdGltZW91dElkOiB0aW1lb3V0SWQsIHVwZGF0ZUNiOiB1cGRhdGVDYiB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2FpdCBmb3IgdGhlIGFwcGxpY2F0aW9uIHRvIGJlIHN0YWJsZSB3aXRoIGEgdGltZW91dC4gSWYgdGhlIHRpbWVvdXQgaXMgcmVhY2hlZCBiZWZvcmUgdGhhdFxuICAgICAqIGhhcHBlbnMsIHRoZSBjYWxsYmFjayByZWNlaXZlcyBhIGxpc3Qgb2YgdGhlIG1hY3JvIHRhc2tzIHRoYXQgd2VyZSBwZW5kaW5nLCBvdGhlcndpc2UgbnVsbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBkb25lQ2IgVGhlIGNhbGxiYWNrIHRvIGludm9rZSB3aGVuIEFuZ3VsYXIgaXMgc3RhYmxlIG9yIHRoZSB0aW1lb3V0IGV4cGlyZXNcbiAgICAgKiAgICB3aGljaGV2ZXIgY29tZXMgZmlyc3QuXG4gICAgICogQHBhcmFtIHRpbWVvdXQgT3B0aW9uYWwuIFRoZSBtYXhpbXVtIHRpbWUgdG8gd2FpdCBmb3IgQW5ndWxhciB0byBiZWNvbWUgc3RhYmxlLiBJZiBub3RcbiAgICAgKiAgICBzcGVjaWZpZWQsIHdoZW5TdGFibGUoKSB3aWxsIHdhaXQgZm9yZXZlci5cbiAgICAgKiBAcGFyYW0gdXBkYXRlQ2IgT3B0aW9uYWwuIElmIHNwZWNpZmllZCwgdGhpcyBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQgd2hlbmV2ZXIgdGhlIHNldCBvZlxuICAgICAqICAgIHBlbmRpbmcgbWFjcm90YXNrcyBjaGFuZ2VzLiBJZiB0aGlzIGNhbGxiYWNrIHJldHVybnMgdHJ1ZSBkb25lQ2Igd2lsbCBub3QgYmUgaW52b2tlZFxuICAgICAqICAgIGFuZCBubyBmdXJ0aGVyIHVwZGF0ZXMgd2lsbCBiZSBpc3N1ZWQuXG4gICAgICovXG4gICAgd2hlblN0YWJsZShkb25lQ2IsIHRpbWVvdXQsIHVwZGF0ZUNiKSB7XG4gICAgICAgIGlmICh1cGRhdGVDYiAmJiAhdGhpcy50YXNrVHJhY2tpbmdab25lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rhc2sgdHJhY2tpbmcgem9uZSBpcyByZXF1aXJlZCB3aGVuIHBhc3NpbmcgYW4gdXBkYXRlIGNhbGxiYWNrIHRvICcgK1xuICAgICAgICAgICAgICAgICd3aGVuU3RhYmxlKCkuIElzIFwiem9uZS5qcy9wbHVnaW5zL3Rhc2stdHJhY2tpbmdcIiBsb2FkZWQ/Jyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlc2UgYXJndW1lbnRzIGFyZSAnRnVuY3Rpb24nIGFib3ZlIHRvIGtlZXAgdGhlIHB1YmxpYyBBUEkgc2ltcGxlLlxuICAgICAgICB0aGlzLmFkZENhbGxiYWNrKGRvbmVDYiwgdGltZW91dCwgdXBkYXRlQ2IpO1xuICAgICAgICB0aGlzLl9ydW5DYWxsYmFja3NJZlJlYWR5KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbnVtYmVyIG9mIHBlbmRpbmcgcmVxdWVzdHNcbiAgICAgKiBAZGVwcmVjYXRlZCBwZW5kaW5nIHJlcXVlc3RzIGFyZSBub3cgdHJhY2tlZCB3aXRoIHpvbmVzXG4gICAgICovXG4gICAgZ2V0UGVuZGluZ1JlcXVlc3RDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BlbmRpbmdDb3VudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCBwcm92aWRlcnMgYnkgbmFtZVxuICAgICAqIEBwYXJhbSB1c2luZyBUaGUgcm9vdCBlbGVtZW50IHRvIHNlYXJjaCBmcm9tXG4gICAgICogQHBhcmFtIHByb3ZpZGVyIFRoZSBuYW1lIG9mIGJpbmRpbmcgdmFyaWFibGVcbiAgICAgKiBAcGFyYW0gZXhhY3RNYXRjaCBXaGV0aGVyIHVzaW5nIGV4YWN0TWF0Y2hcbiAgICAgKi9cbiAgICBmaW5kUHJvdmlkZXJzKHVzaW5nLCBwcm92aWRlciwgZXhhY3RNYXRjaCkge1xuICAgICAgICAvLyBUT0RPKGp1bGllbXIpOiBpbXBsZW1lbnQuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG59XG5UZXN0YWJpbGl0eS7JtWZhYyA9IGZ1bmN0aW9uIFRlc3RhYmlsaXR5X0ZhY3RvcnkodCkgeyByZXR1cm4gbmV3ICh0IHx8IFRlc3RhYmlsaXR5KSjJtcm1aW5qZWN0KE5nWm9uZSkpOyB9O1xuVGVzdGFiaWxpdHkuybVwcm92ID0gLypAX19QVVJFX18qLyDJtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IHRva2VuOiBUZXN0YWJpbGl0eSwgZmFjdG9yeTogVGVzdGFiaWxpdHkuybVmYWMgfSk7XG4oZnVuY3Rpb24gKCkge1xuICAgICh0eXBlb2YgbmdEZXZNb2RlID09PSBcInVuZGVmaW5lZFwiIHx8IG5nRGV2TW9kZSkgJiYgc2V0Q2xhc3NNZXRhZGF0YShUZXN0YWJpbGl0eSwgW3tcbiAgICAgICAgICAgIHR5cGU6IEluamVjdGFibGVcbiAgICAgICAgfV0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIFt7IHR5cGU6IE5nWm9uZSB9XTsgfSwgbnVsbCk7XG59KSgpO1xuLyoqXG4gKiBBIGdsb2JhbCByZWdpc3RyeSBvZiB7QGxpbmsgVGVzdGFiaWxpdHl9IGluc3RhbmNlcyBmb3Igc3BlY2lmaWMgZWxlbWVudHMuXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIFRlc3RhYmlsaXR5UmVnaXN0cnkge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuX2FwcGxpY2F0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgX3Rlc3RhYmlsaXR5R2V0dGVyLmFkZFRvV2luZG93KHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWdpc3RlcnMgYW4gYXBwbGljYXRpb24gd2l0aCBhIHRlc3RhYmlsaXR5IGhvb2sgc28gdGhhdCBpdCBjYW4gYmUgdHJhY2tlZFxuICAgICAqIEBwYXJhbSB0b2tlbiB0b2tlbiBvZiBhcHBsaWNhdGlvbiwgcm9vdCBlbGVtZW50XG4gICAgICogQHBhcmFtIHRlc3RhYmlsaXR5IFRlc3RhYmlsaXR5IGhvb2tcbiAgICAgKi9cbiAgICByZWdpc3RlckFwcGxpY2F0aW9uKHRva2VuLCB0ZXN0YWJpbGl0eSkge1xuICAgICAgICB0aGlzLl9hcHBsaWNhdGlvbnMuc2V0KHRva2VuLCB0ZXN0YWJpbGl0eSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVucmVnaXN0ZXJzIGFuIGFwcGxpY2F0aW9uLlxuICAgICAqIEBwYXJhbSB0b2tlbiB0b2tlbiBvZiBhcHBsaWNhdGlvbiwgcm9vdCBlbGVtZW50XG4gICAgICovXG4gICAgdW5yZWdpc3RlckFwcGxpY2F0aW9uKHRva2VuKSB7XG4gICAgICAgIHRoaXMuX2FwcGxpY2F0aW9ucy5kZWxldGUodG9rZW4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVbnJlZ2lzdGVycyBhbGwgYXBwbGljYXRpb25zXG4gICAgICovXG4gICAgdW5yZWdpc3RlckFsbEFwcGxpY2F0aW9ucygpIHtcbiAgICAgICAgdGhpcy5fYXBwbGljYXRpb25zLmNsZWFyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHRlc3RhYmlsaXR5IGhvb2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIEBwYXJhbSBlbGVtIHJvb3QgZWxlbWVudFxuICAgICAqL1xuICAgIGdldFRlc3RhYmlsaXR5KGVsZW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FwcGxpY2F0aW9ucy5nZXQoZWxlbSkgfHwgbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IGFsbCByZWdpc3RlcmVkIHRlc3RhYmlsaXRpZXNcbiAgICAgKi9cbiAgICBnZXRBbGxUZXN0YWJpbGl0aWVzKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9hcHBsaWNhdGlvbnMudmFsdWVzKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHJlZ2lzdGVyZWQgYXBwbGljYXRpb25zKHJvb3QgZWxlbWVudHMpXG4gICAgICovXG4gICAgZ2V0QWxsUm9vdEVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9hcHBsaWNhdGlvbnMua2V5cygpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRmluZCB0ZXN0YWJpbGl0eSBvZiBhIG5vZGUgaW4gdGhlIFRyZWVcbiAgICAgKiBAcGFyYW0gZWxlbSBub2RlXG4gICAgICogQHBhcmFtIGZpbmRJbkFuY2VzdG9ycyB3aGV0aGVyIGZpbmRpbmcgdGVzdGFiaWxpdHkgaW4gYW5jZXN0b3JzIGlmIHRlc3RhYmlsaXR5IHdhcyBub3QgZm91bmQgaW5cbiAgICAgKiBjdXJyZW50IG5vZGVcbiAgICAgKi9cbiAgICBmaW5kVGVzdGFiaWxpdHlJblRyZWUoZWxlbSwgZmluZEluQW5jZXN0b3JzID0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gX3Rlc3RhYmlsaXR5R2V0dGVyLmZpbmRUZXN0YWJpbGl0eUluVHJlZSh0aGlzLCBlbGVtLCBmaW5kSW5BbmNlc3RvcnMpO1xuICAgIH1cbn1cblRlc3RhYmlsaXR5UmVnaXN0cnkuybVmYWMgPSBmdW5jdGlvbiBUZXN0YWJpbGl0eVJlZ2lzdHJ5X0ZhY3RvcnkodCkgeyByZXR1cm4gbmV3ICh0IHx8IFRlc3RhYmlsaXR5UmVnaXN0cnkpKCk7IH07XG5UZXN0YWJpbGl0eVJlZ2lzdHJ5Lsm1cHJvdiA9IC8qQF9fUFVSRV9fKi8gybXJtWRlZmluZUluamVjdGFibGUoeyB0b2tlbjogVGVzdGFiaWxpdHlSZWdpc3RyeSwgZmFjdG9yeTogVGVzdGFiaWxpdHlSZWdpc3RyeS7JtWZhYyB9KTtcbihmdW5jdGlvbiAoKSB7XG4gICAgKHR5cGVvZiBuZ0Rldk1vZGUgPT09IFwidW5kZWZpbmVkXCIgfHwgbmdEZXZNb2RlKSAmJiBzZXRDbGFzc01ldGFkYXRhKFRlc3RhYmlsaXR5UmVnaXN0cnksIFt7XG4gICAgICAgICAgICB0eXBlOiBJbmplY3RhYmxlXG4gICAgICAgIH1dLCBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfSwgbnVsbCk7XG59KSgpO1xuY2xhc3MgX05vb3BHZXRUZXN0YWJpbGl0eSB7XG4gICAgYWRkVG9XaW5kb3cocmVnaXN0cnkpIHsgfVxuICAgIGZpbmRUZXN0YWJpbGl0eUluVHJlZShyZWdpc3RyeSwgZWxlbSwgZmluZEluQW5jZXN0b3JzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbi8qKlxuICogU2V0IHRoZSB7QGxpbmsgR2V0VGVzdGFiaWxpdHl9IGltcGxlbWVudGF0aW9uIHVzZWQgYnkgdGhlIEFuZ3VsYXIgdGVzdGluZyBmcmFtZXdvcmsuXG4gKiBAcHVibGljQXBpXG4gKi9cbmZ1bmN0aW9uIHNldFRlc3RhYmlsaXR5R2V0dGVyKGdldHRlcikge1xuICAgIF90ZXN0YWJpbGl0eUdldHRlciA9IGdldHRlcjtcbn1cbmxldCBfdGVzdGFiaWxpdHlHZXR0ZXIgPSBuZXcgX05vb3BHZXRUZXN0YWJpbGl0eSgpO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmxldCBfcGxhdGZvcm07XG5mdW5jdGlvbiBjb21waWxlTmdNb2R1bGVGYWN0b3J5KGluamVjdG9yLCBvcHRpb25zLCBtb2R1bGVUeXBlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydE5nTW9kdWxlVHlwZShtb2R1bGVUeXBlKTtcbiAgICBjb25zdCBtb2R1bGVGYWN0b3J5ID0gbmV3IE5nTW9kdWxlRmFjdG9yeShtb2R1bGVUeXBlKTtcbiAgICAvLyBBbGwgb2YgdGhlIGxvZ2ljIGJlbG93IGlzIGlycmVsZXZhbnQgZm9yIEFPVC1jb21waWxlZCBjb2RlLlxuICAgIGlmICh0eXBlb2YgbmdKaXRNb2RlICE9PSAndW5kZWZpbmVkJyAmJiAhbmdKaXRNb2RlKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobW9kdWxlRmFjdG9yeSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXBpbGVyT3B0aW9ucyA9IGluamVjdG9yLmdldChDT01QSUxFUl9PUFRJT05TLCBbXSkuY29uY2F0KG9wdGlvbnMpO1xuICAgIC8vIENvbmZpZ3VyZSB0aGUgY29tcGlsZXIgdG8gdXNlIHRoZSBwcm92aWRlZCBvcHRpb25zLiBUaGlzIGNhbGwgbWF5IGZhaWwgd2hlbiBtdWx0aXBsZSBtb2R1bGVzXG4gICAgLy8gYXJlIGJvb3RzdHJhcHBlZCB3aXRoIGluY29tcGF0aWJsZSBvcHRpb25zLCBhcyBhIGNvbXBvbmVudCBjYW4gb25seSBiZSBjb21waWxlZCBhY2NvcmRpbmcgdG9cbiAgICAvLyBhIHNpbmdsZSBzZXQgb2Ygb3B0aW9ucy5cbiAgICBzZXRKaXRPcHRpb25zKHtcbiAgICAgICAgZGVmYXVsdEVuY2Fwc3VsYXRpb246IF9sYXN0RGVmaW5lZChjb21waWxlck9wdGlvbnMubWFwKG9wdHMgPT4gb3B0cy5kZWZhdWx0RW5jYXBzdWxhdGlvbikpLFxuICAgICAgICBwcmVzZXJ2ZVdoaXRlc3BhY2VzOiBfbGFzdERlZmluZWQoY29tcGlsZXJPcHRpb25zLm1hcChvcHRzID0+IG9wdHMucHJlc2VydmVXaGl0ZXNwYWNlcykpLFxuICAgIH0pO1xuICAgIGlmIChpc0NvbXBvbmVudFJlc291cmNlUmVzb2x1dGlvblF1ZXVlRW1wdHkoKSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZUZhY3RvcnkpO1xuICAgIH1cbiAgICBjb25zdCBjb21waWxlclByb3ZpZGVycyA9IF9tZXJnZUFycmF5cyhjb21waWxlck9wdGlvbnMubWFwKG8gPT4gby5wcm92aWRlcnMpKTtcbiAgICAvLyBJbiBjYXNlIHRoZXJlIGFyZSBubyBjb21waWxlciBwcm92aWRlcnMsIHdlIGp1c3QgcmV0dXJuIHRoZSBtb2R1bGUgZmFjdG9yeSBhc1xuICAgIC8vIHRoZXJlIHdvbid0IGJlIGFueSByZXNvdXJjZSBsb2FkZXIuIFRoaXMgY2FuIGhhcHBlbiB3aXRoIEl2eSwgYmVjYXVzZSBBT1QgY29tcGlsZWRcbiAgICAvLyBtb2R1bGVzIGNhbiBiZSBzdGlsbCBwYXNzZWQgdGhyb3VnaCBcImJvb3RzdHJhcE1vZHVsZVwiLiBJbiB0aGF0IGNhc2Ugd2Ugc2hvdWxkbid0XG4gICAgLy8gdW5uZWNlc3NhcmlseSByZXF1aXJlIHRoZSBKSVQgY29tcGlsZXIuXG4gICAgaWYgKGNvbXBpbGVyUHJvdmlkZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZUZhY3RvcnkpO1xuICAgIH1cbiAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHtcbiAgICAgICAgdXNhZ2U6IDAgLyogRGVjb3JhdG9yICovLFxuICAgICAgICBraW5kOiAnTmdNb2R1bGUnLFxuICAgICAgICB0eXBlOiBtb2R1bGVUeXBlLFxuICAgIH0pO1xuICAgIGNvbnN0IGNvbXBpbGVySW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoeyBwcm92aWRlcnM6IGNvbXBpbGVyUHJvdmlkZXJzIH0pO1xuICAgIGNvbnN0IHJlc291cmNlTG9hZGVyID0gY29tcGlsZXJJbmplY3Rvci5nZXQoY29tcGlsZXIuUmVzb3VyY2VMb2FkZXIpO1xuICAgIC8vIFRoZSByZXNvdXJjZSBsb2FkZXIgY2FuIGFsc28gcmV0dXJuIGEgc3RyaW5nIHdoaWxlIHRoZSBcInJlc29sdmVDb21wb25lbnRSZXNvdXJjZXNcIlxuICAgIC8vIGFsd2F5cyBleHBlY3RzIGEgcHJvbWlzZS4gVGhlcmVmb3JlIHdlIG5lZWQgdG8gd3JhcCB0aGUgcmV0dXJuZWQgdmFsdWUgaW4gYSBwcm9taXNlLlxuICAgIHJldHVybiByZXNvbHZlQ29tcG9uZW50UmVzb3VyY2VzKHVybCA9PiBQcm9taXNlLnJlc29sdmUocmVzb3VyY2VMb2FkZXIuZ2V0KHVybCkpKVxuICAgICAgICAudGhlbigoKSA9PiBtb2R1bGVGYWN0b3J5KTtcbn1cbmZ1bmN0aW9uIHB1Ymxpc2hEZWZhdWx0R2xvYmFsVXRpbHMoKSB7XG4gICAgbmdEZXZNb2RlICYmIHB1Ymxpc2hEZWZhdWx0R2xvYmFsVXRpbHMkMSgpO1xufVxuZnVuY3Rpb24gaXNCb3VuZFRvTW9kdWxlKGNmKSB7XG4gICAgcmV0dXJuIGNmLmlzQm91bmRUb01vZHVsZTtcbn1cbmNvbnN0IEFMTE9XX01VTFRJUExFX1BMQVRGT1JNUyA9IG5ldyBJbmplY3Rpb25Ub2tlbignQWxsb3dNdWx0aXBsZVRva2VuJyk7XG4vKipcbiAqIEEgdG9rZW4gZm9yIHRoaXJkLXBhcnR5IGNvbXBvbmVudHMgdGhhdCBjYW4gcmVnaXN0ZXIgdGhlbXNlbHZlcyB3aXRoIE5nUHJvYmUuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBOZ1Byb2JlVG9rZW4ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHRva2VuKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBwbGF0Zm9ybS5cbiAqIFBsYXRmb3JtcyBtdXN0IGJlIGNyZWF0ZWQgb24gbGF1bmNoIHVzaW5nIHRoaXMgZnVuY3Rpb24uXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5mdW5jdGlvbiBjcmVhdGVQbGF0Zm9ybShpbmplY3Rvcikge1xuICAgIGlmIChfcGxhdGZvcm0gJiYgIV9wbGF0Zm9ybS5kZXN0cm95ZWQgJiZcbiAgICAgICAgIV9wbGF0Zm9ybS5pbmplY3Rvci5nZXQoQUxMT1dfTVVMVElQTEVfUExBVEZPUk1TLCBmYWxzZSkpIHtcbiAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkgP1xuICAgICAgICAgICAgJ1RoZXJlIGNhbiBiZSBvbmx5IG9uZSBwbGF0Zm9ybS4gRGVzdHJveSB0aGUgcHJldmlvdXMgb25lIHRvIGNyZWF0ZSBhIG5ldyBvbmUuJyA6XG4gICAgICAgICAgICAnJztcbiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcig0MDAgLyogTVVMVElQTEVfUExBVEZPUk1TICovLCBlcnJvck1lc3NhZ2UpO1xuICAgIH1cbiAgICBwdWJsaXNoRGVmYXVsdEdsb2JhbFV0aWxzKCk7XG4gICAgX3BsYXRmb3JtID0gaW5qZWN0b3IuZ2V0KFBsYXRmb3JtUmVmKTtcbiAgICBjb25zdCBpbml0cyA9IGluamVjdG9yLmdldChQTEFURk9STV9JTklUSUFMSVpFUiwgbnVsbCk7XG4gICAgaWYgKGluaXRzKVxuICAgICAgICBpbml0cy5mb3JFYWNoKChpbml0KSA9PiBpbml0KCkpO1xuICAgIHJldHVybiBfcGxhdGZvcm07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBmYWN0b3J5IGZvciBhIHBsYXRmb3JtLiBDYW4gYmUgdXNlZCB0byBwcm92aWRlIG9yIG92ZXJyaWRlIGBQcm92aWRlcnNgIHNwZWNpZmljIHRvXG4gKiB5b3VyIGFwcGxpY2F0aW9uJ3MgcnVudGltZSBuZWVkcywgc3VjaCBhcyBgUExBVEZPUk1fSU5JVElBTElaRVJgIGFuZCBgUExBVEZPUk1fSURgLlxuICogQHBhcmFtIHBhcmVudFBsYXRmb3JtRmFjdG9yeSBBbm90aGVyIHBsYXRmb3JtIGZhY3RvcnkgdG8gbW9kaWZ5LiBBbGxvd3MgeW91IHRvIGNvbXBvc2UgZmFjdG9yaWVzXG4gKiB0byBidWlsZCB1cCBjb25maWd1cmF0aW9ucyB0aGF0IG1pZ2h0IGJlIHJlcXVpcmVkIGJ5IGRpZmZlcmVudCBsaWJyYXJpZXMgb3IgcGFydHMgb2YgdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqIEBwYXJhbSBuYW1lIElkZW50aWZpZXMgdGhlIG5ldyBwbGF0Zm9ybSBmYWN0b3J5LlxuICogQHBhcmFtIHByb3ZpZGVycyBBIHNldCBvZiBkZXBlbmRlbmN5IHByb3ZpZGVycyBmb3IgcGxhdGZvcm1zIGNyZWF0ZWQgd2l0aCB0aGUgbmV3IGZhY3RvcnkuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5mdW5jdGlvbiBjcmVhdGVQbGF0Zm9ybUZhY3RvcnkocGFyZW50UGxhdGZvcm1GYWN0b3J5LCBuYW1lLCBwcm92aWRlcnMgPSBbXSkge1xuICAgIGNvbnN0IGRlc2MgPSBgUGxhdGZvcm06ICR7bmFtZX1gO1xuICAgIGNvbnN0IG1hcmtlciA9IG5ldyBJbmplY3Rpb25Ub2tlbihkZXNjKTtcbiAgICByZXR1cm4gKGV4dHJhUHJvdmlkZXJzID0gW10pID0+IHtcbiAgICAgICAgbGV0IHBsYXRmb3JtID0gZ2V0UGxhdGZvcm0oKTtcbiAgICAgICAgaWYgKCFwbGF0Zm9ybSB8fCBwbGF0Zm9ybS5pbmplY3Rvci5nZXQoQUxMT1dfTVVMVElQTEVfUExBVEZPUk1TLCBmYWxzZSkpIHtcbiAgICAgICAgICAgIGlmIChwYXJlbnRQbGF0Zm9ybUZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnRQbGF0Zm9ybUZhY3RvcnkocHJvdmlkZXJzLmNvbmNhdChleHRyYVByb3ZpZGVycykuY29uY2F0KHsgcHJvdmlkZTogbWFya2VyLCB1c2VWYWx1ZTogdHJ1ZSB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmplY3RlZFByb3ZpZGVycyA9IHByb3ZpZGVycy5jb25jYXQoZXh0cmFQcm92aWRlcnMpLmNvbmNhdCh7IHByb3ZpZGU6IG1hcmtlciwgdXNlVmFsdWU6IHRydWUgfSwge1xuICAgICAgICAgICAgICAgICAgICBwcm92aWRlOiBJTkpFQ1RPUl9TQ09QRSxcbiAgICAgICAgICAgICAgICAgICAgdXNlVmFsdWU6ICdwbGF0Zm9ybSdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjcmVhdGVQbGF0Zm9ybShJbmplY3Rvci5jcmVhdGUoeyBwcm92aWRlcnM6IGluamVjdGVkUHJvdmlkZXJzLCBuYW1lOiBkZXNjIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXNzZXJ0UGxhdGZvcm0obWFya2VyKTtcbiAgICB9O1xufVxuLyoqXG4gKiBDaGVja3MgdGhhdCB0aGVyZSBpcyBjdXJyZW50bHkgYSBwbGF0Zm9ybSB0aGF0IGNvbnRhaW5zIHRoZSBnaXZlbiB0b2tlbiBhcyBhIHByb3ZpZGVyLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UGxhdGZvcm0ocmVxdWlyZWRUb2tlbikge1xuICAgIGNvbnN0IHBsYXRmb3JtID0gZ2V0UGxhdGZvcm0oKTtcbiAgICBpZiAoIXBsYXRmb3JtKSB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpID8gJ05vIHBsYXRmb3JtIGV4aXN0cyEnIDogJyc7XG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoNDAxIC8qIFBMQVRGT1JNX05PVF9GT1VORCAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKCh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpICYmXG4gICAgICAgICFwbGF0Zm9ybS5pbmplY3Rvci5nZXQocmVxdWlyZWRUb2tlbiwgbnVsbCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcig0MDAgLyogTVVMVElQTEVfUExBVEZPUk1TICovLCAnQSBwbGF0Zm9ybSB3aXRoIGEgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gaGFzIGJlZW4gY3JlYXRlZC4gUGxlYXNlIGRlc3Ryb3kgaXQgZmlyc3QuJyk7XG4gICAgfVxuICAgIHJldHVybiBwbGF0Zm9ybTtcbn1cbi8qKlxuICogRGVzdHJveXMgdGhlIGN1cnJlbnQgQW5ndWxhciBwbGF0Zm9ybSBhbmQgYWxsIEFuZ3VsYXIgYXBwbGljYXRpb25zIG9uIHRoZSBwYWdlLlxuICogRGVzdHJveXMgYWxsIG1vZHVsZXMgYW5kIGxpc3RlbmVycyByZWdpc3RlcmVkIHdpdGggdGhlIHBsYXRmb3JtLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZnVuY3Rpb24gZGVzdHJveVBsYXRmb3JtKCkge1xuICAgIGlmIChfcGxhdGZvcm0gJiYgIV9wbGF0Zm9ybS5kZXN0cm95ZWQpIHtcbiAgICAgICAgX3BsYXRmb3JtLmRlc3Ryb3koKTtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgcGxhdGZvcm0uXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5mdW5jdGlvbiBnZXRQbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gX3BsYXRmb3JtICYmICFfcGxhdGZvcm0uZGVzdHJveWVkID8gX3BsYXRmb3JtIDogbnVsbDtcbn1cbi8qKlxuICogVGhlIEFuZ3VsYXIgcGxhdGZvcm0gaXMgdGhlIGVudHJ5IHBvaW50IGZvciBBbmd1bGFyIG9uIGEgd2ViIHBhZ2UuXG4gKiBFYWNoIHBhZ2UgaGFzIGV4YWN0bHkgb25lIHBsYXRmb3JtLiBTZXJ2aWNlcyAoc3VjaCBhcyByZWZsZWN0aW9uKSB3aGljaCBhcmUgY29tbW9uXG4gKiB0byBldmVyeSBBbmd1bGFyIGFwcGxpY2F0aW9uIHJ1bm5pbmcgb24gdGhlIHBhZ2UgYXJlIGJvdW5kIGluIGl0cyBzY29wZS5cbiAqIEEgcGFnZSdzIHBsYXRmb3JtIGlzIGluaXRpYWxpemVkIGltcGxpY2l0bHkgd2hlbiBhIHBsYXRmb3JtIGlzIGNyZWF0ZWQgdXNpbmcgYSBwbGF0Zm9ybVxuICogZmFjdG9yeSBzdWNoIGFzIGBQbGF0Zm9ybUJyb3dzZXJgLCBvciBleHBsaWNpdGx5IGJ5IGNhbGxpbmcgdGhlIGBjcmVhdGVQbGF0Zm9ybSgpYCBmdW5jdGlvbi5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIFBsYXRmb3JtUmVmIHtcbiAgICAvKiogQGludGVybmFsICovXG4gICAgY29uc3RydWN0b3IoX2luamVjdG9yKSB7XG4gICAgICAgIHRoaXMuX2luamVjdG9yID0gX2luamVjdG9yO1xuICAgICAgICB0aGlzLl9tb2R1bGVzID0gW107XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgYW4gYEBOZ01vZHVsZWAgZm9yIHRoZSBnaXZlbiBwbGF0Zm9ybS5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIFBhc3NpbmcgTmdNb2R1bGUgZmFjdG9yaWVzIGFzIHRoZSBgUGxhdGZvcm1SZWYuYm9vdHN0cmFwTW9kdWxlRmFjdG9yeWAgZnVuY3Rpb25cbiAgICAgKiAgICAgYXJndW1lbnQgaXMgZGVwcmVjYXRlZC4gVXNlIHRoZSBgUGxhdGZvcm1SZWYuYm9vdHN0cmFwTW9kdWxlYCBBUEkgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBib290c3RyYXBNb2R1bGVGYWN0b3J5KG1vZHVsZUZhY3RvcnksIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gTm90ZTogV2UgbmVlZCB0byBjcmVhdGUgdGhlIE5nWm9uZSBfYmVmb3JlXyB3ZSBpbnN0YW50aWF0ZSB0aGUgbW9kdWxlLFxuICAgICAgICAvLyBhcyBpbnN0YW50aWF0aW5nIHRoZSBtb2R1bGUgY3JlYXRlcyBzb21lIHByb3ZpZGVycyBlYWdlcmx5LlxuICAgICAgICAvLyBTbyB3ZSBjcmVhdGUgYSBtaW5pIHBhcmVudCBpbmplY3RvciB0aGF0IGp1c3QgY29udGFpbnMgdGhlIG5ldyBOZ1pvbmUgYW5kXG4gICAgICAgIC8vIHBhc3MgdGhhdCBhcyBwYXJlbnQgdG8gdGhlIE5nTW9kdWxlRmFjdG9yeS5cbiAgICAgICAgY29uc3Qgbmdab25lT3B0aW9uID0gb3B0aW9ucyA/IG9wdGlvbnMubmdab25lIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBuZ1pvbmVFdmVudENvYWxlc2NpbmcgPSAob3B0aW9ucyAmJiBvcHRpb25zLm5nWm9uZUV2ZW50Q29hbGVzY2luZykgfHwgZmFsc2U7XG4gICAgICAgIGNvbnN0IG5nWm9uZVJ1bkNvYWxlc2NpbmcgPSAob3B0aW9ucyAmJiBvcHRpb25zLm5nWm9uZVJ1bkNvYWxlc2NpbmcpIHx8IGZhbHNlO1xuICAgICAgICBjb25zdCBuZ1pvbmUgPSBnZXROZ1pvbmUobmdab25lT3B0aW9uLCB7IG5nWm9uZUV2ZW50Q29hbGVzY2luZywgbmdab25lUnVuQ29hbGVzY2luZyB9KTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gW3sgcHJvdmlkZTogTmdab25lLCB1c2VWYWx1ZTogbmdab25lIH1dO1xuICAgICAgICAvLyBOb3RlOiBDcmVhdGUgbmdab25lSW5qZWN0b3Igd2l0aGluIG5nWm9uZS5ydW4gc28gdGhhdCBhbGwgb2YgdGhlIGluc3RhbnRpYXRlZCBzZXJ2aWNlcyBhcmVcbiAgICAgICAgLy8gY3JlYXRlZCB3aXRoaW4gdGhlIEFuZ3VsYXIgem9uZVxuICAgICAgICAvLyBEbyBub3QgdHJ5IHRvIHJlcGxhY2Ugbmdab25lLnJ1biB3aXRoIEFwcGxpY2F0aW9uUmVmI3J1biBiZWNhdXNlIEFwcGxpY2F0aW9uUmVmIHdvdWxkIHRoZW4gYmVcbiAgICAgICAgLy8gY3JlYXRlZCBvdXRzaWRlIG9mIHRoZSBBbmd1bGFyIHpvbmUuXG4gICAgICAgIHJldHVybiBuZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5nWm9uZUluamVjdG9yID0gSW5qZWN0b3IuY3JlYXRlKHsgcHJvdmlkZXJzOiBwcm92aWRlcnMsIHBhcmVudDogdGhpcy5pbmplY3RvciwgbmFtZTogbW9kdWxlRmFjdG9yeS5tb2R1bGVUeXBlLm5hbWUgfSk7XG4gICAgICAgICAgICBjb25zdCBtb2R1bGVSZWYgPSBtb2R1bGVGYWN0b3J5LmNyZWF0ZShuZ1pvbmVJbmplY3Rvcik7XG4gICAgICAgICAgICBjb25zdCBleGNlcHRpb25IYW5kbGVyID0gbW9kdWxlUmVmLmluamVjdG9yLmdldChFcnJvckhhbmRsZXIsIG51bGwpO1xuICAgICAgICAgICAgaWYgKCFleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkgP1xuICAgICAgICAgICAgICAgICAgICAnTm8gRXJyb3JIYW5kbGVyLiBJcyBwbGF0Zm9ybSBtb2R1bGUgKEJyb3dzZXJNb2R1bGUpIGluY2x1ZGVkPycgOlxuICAgICAgICAgICAgICAgICAgICAnJztcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKDQwMiAvKiBFUlJPUl9IQU5ETEVSX05PVF9GT1VORCAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gbmdab25lLm9uRXJyb3Iuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGNlcHRpb25IYW5kbGVyLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1vZHVsZVJlZi5vbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmUodGhpcy5fbW9kdWxlcywgbW9kdWxlUmVmKTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBfY2FsbEFuZFJlcG9ydFRvRXJyb3JIYW5kbGVyKGV4Y2VwdGlvbkhhbmRsZXIsIG5nWm9uZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRTdGF0dXMgPSBtb2R1bGVSZWYuaW5qZWN0b3IuZ2V0KEFwcGxpY2F0aW9uSW5pdFN0YXR1cyk7XG4gICAgICAgICAgICAgICAgaW5pdFN0YXR1cy5ydW5Jbml0aWFsaXplcnMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdFN0YXR1cy5kb25lUHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGBMT0NBTEVfSURgIHByb3ZpZGVyIGlzIGRlZmluZWQgYXQgYm9vdHN0cmFwIHRoZW4gd2Ugc2V0IHRoZSB2YWx1ZSBmb3IgaXZ5XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsZUlkID0gbW9kdWxlUmVmLmluamVjdG9yLmdldChMT0NBTEVfSUQsIERFRkFVTFRfTE9DQUxFX0lEKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0TG9jYWxlSWQobG9jYWxlSWQgfHwgREVGQVVMVF9MT0NBTEVfSUQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2R1bGVEb0Jvb3RzdHJhcChtb2R1bGVSZWYpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kdWxlUmVmO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIGFuIGBATmdNb2R1bGVgIGZvciBhIGdpdmVuIHBsYXRmb3JtLlxuICAgICAqXG4gICAgICogQHVzYWdlTm90ZXNcbiAgICAgKiAjIyMgU2ltcGxlIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBATmdNb2R1bGUoe1xuICAgICAqICAgaW1wb3J0czogW0Jyb3dzZXJNb2R1bGVdXG4gICAgICogfSlcbiAgICAgKiBjbGFzcyBNeU1vZHVsZSB7fVxuICAgICAqXG4gICAgICogbGV0IG1vZHVsZVJlZiA9IHBsYXRmb3JtQnJvd3NlcigpLmJvb3RzdHJhcE1vZHVsZShNeU1vZHVsZSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKi9cbiAgICBib290c3RyYXBNb2R1bGUobW9kdWxlVHlwZSwgY29tcGlsZXJPcHRpb25zID0gW10pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbnNSZWR1Y2VyKHt9LCBjb21waWxlck9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gY29tcGlsZU5nTW9kdWxlRmFjdG9yeSh0aGlzLmluamVjdG9yLCBvcHRpb25zLCBtb2R1bGVUeXBlKVxuICAgICAgICAgICAgLnRoZW4obW9kdWxlRmFjdG9yeSA9PiB0aGlzLmJvb3RzdHJhcE1vZHVsZUZhY3RvcnkobW9kdWxlRmFjdG9yeSwgb3B0aW9ucykpO1xuICAgIH1cbiAgICBfbW9kdWxlRG9Cb290c3RyYXAobW9kdWxlUmVmKSB7XG4gICAgICAgIGNvbnN0IGFwcFJlZiA9IG1vZHVsZVJlZi5pbmplY3Rvci5nZXQoQXBwbGljYXRpb25SZWYpO1xuICAgICAgICBpZiAobW9kdWxlUmVmLl9ib290c3RyYXBDb21wb25lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIG1vZHVsZVJlZi5fYm9vdHN0cmFwQ29tcG9uZW50cy5mb3JFYWNoKGYgPT4gYXBwUmVmLmJvb3RzdHJhcChmKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobW9kdWxlUmVmLmluc3RhbmNlLm5nRG9Cb290c3RyYXApIHtcbiAgICAgICAgICAgIG1vZHVsZVJlZi5pbnN0YW5jZS5uZ0RvQm9vdHN0cmFwKGFwcFJlZik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSA/XG4gICAgICAgICAgICAgICAgYFRoZSBtb2R1bGUgJHtzdHJpbmdpZnkobW9kdWxlUmVmLmluc3RhbmNlLmNvbnN0cnVjdG9yKX0gd2FzIGJvb3RzdHJhcHBlZCwgYCArXG4gICAgICAgICAgICAgICAgICAgIGBidXQgaXQgZG9lcyBub3QgZGVjbGFyZSBcIkBOZ01vZHVsZS5ib290c3RyYXBcIiBjb21wb25lbnRzIG5vciBhIFwibmdEb0Jvb3RzdHJhcFwiIG1ldGhvZC4gYCArXG4gICAgICAgICAgICAgICAgICAgIGBQbGVhc2UgZGVmaW5lIG9uZSBvZiB0aGVzZS5gIDpcbiAgICAgICAgICAgICAgICAnJztcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoNDAzIC8qIEJPT1RTVFJBUF9DT01QT05FTlRTX05PVF9GT1VORCAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tb2R1bGVzLnB1c2gobW9kdWxlUmVmKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHBsYXRmb3JtIGlzIGRlc3Ryb3llZC5cbiAgICAgKi9cbiAgICBvbkRlc3Ryb3koY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fZGVzdHJveUxpc3RlbmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBwbGF0Zm9ybSB7QGxpbmsgSW5qZWN0b3J9LCB3aGljaCBpcyB0aGUgcGFyZW50IGluamVjdG9yIGZvclxuICAgICAqIGV2ZXJ5IEFuZ3VsYXIgYXBwbGljYXRpb24gb24gdGhlIHBhZ2UgYW5kIHByb3ZpZGVzIHNpbmdsZXRvbiBwcm92aWRlcnMuXG4gICAgICovXG4gICAgZ2V0IGluamVjdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5qZWN0b3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlc3Ryb3lzIHRoZSBjdXJyZW50IEFuZ3VsYXIgcGxhdGZvcm0gYW5kIGFsbCBBbmd1bGFyIGFwcGxpY2F0aW9ucyBvbiB0aGUgcGFnZS5cbiAgICAgKiBEZXN0cm95cyBhbGwgbW9kdWxlcyBhbmQgbGlzdGVuZXJzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgcGxhdGZvcm0uXG4gICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Rlc3Ryb3llZCkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkgP1xuICAgICAgICAgICAgICAgICdUaGUgcGxhdGZvcm0gaGFzIGFscmVhZHkgYmVlbiBkZXN0cm95ZWQhJyA6XG4gICAgICAgICAgICAgICAgJyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKDQwNCAvKiBBTFJFQURZX0RFU1RST1lFRF9QTEFURk9STSAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tb2R1bGVzLnNsaWNlKCkuZm9yRWFjaChtb2R1bGUgPT4gbW9kdWxlLmRlc3Ryb3koKSk7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lMaXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKTtcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0IGRlc3Ryb3llZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rlc3Ryb3llZDtcbiAgICB9XG59XG5QbGF0Zm9ybVJlZi7JtWZhYyA9IGZ1bmN0aW9uIFBsYXRmb3JtUmVmX0ZhY3RvcnkodCkgeyByZXR1cm4gbmV3ICh0IHx8IFBsYXRmb3JtUmVmKSjJtcm1aW5qZWN0KEluamVjdG9yKSk7IH07XG5QbGF0Zm9ybVJlZi7JtXByb3YgPSAvKkBfX1BVUkVfXyovIMm1ybVkZWZpbmVJbmplY3RhYmxlKHsgdG9rZW46IFBsYXRmb3JtUmVmLCBmYWN0b3J5OiBQbGF0Zm9ybVJlZi7JtWZhYyB9KTtcbihmdW5jdGlvbiAoKSB7XG4gICAgKHR5cGVvZiBuZ0Rldk1vZGUgPT09IFwidW5kZWZpbmVkXCIgfHwgbmdEZXZNb2RlKSAmJiBzZXRDbGFzc01ldGFkYXRhKFBsYXRmb3JtUmVmLCBbe1xuICAgICAgICAgICAgdHlwZTogSW5qZWN0YWJsZVxuICAgICAgICB9XSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gW3sgdHlwZTogSW5qZWN0b3IgfV07IH0sIG51bGwpO1xufSkoKTtcbmZ1bmN0aW9uIGdldE5nWm9uZShuZ1pvbmVPcHRpb24sIGV4dHJhKSB7XG4gICAgbGV0IG5nWm9uZTtcbiAgICBpZiAobmdab25lT3B0aW9uID09PSAnbm9vcCcpIHtcbiAgICAgICAgbmdab25lID0gbmV3IE5vb3BOZ1pvbmUoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5nWm9uZSA9IChuZ1pvbmVPcHRpb24gPT09ICd6b25lLmpzJyA/IHVuZGVmaW5lZCA6IG5nWm9uZU9wdGlvbikgfHwgbmV3IE5nWm9uZSh7XG4gICAgICAgICAgICBlbmFibGVMb25nU3RhY2tUcmFjZTogdHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgPyBmYWxzZSA6ICEhbmdEZXZNb2RlLFxuICAgICAgICAgICAgc2hvdWxkQ29hbGVzY2VFdmVudENoYW5nZURldGVjdGlvbjogISEoZXh0cmEgPT09IG51bGwgfHwgZXh0cmEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4dHJhLm5nWm9uZUV2ZW50Q29hbGVzY2luZyksXG4gICAgICAgICAgICBzaG91bGRDb2FsZXNjZVJ1bkNoYW5nZURldGVjdGlvbjogISEoZXh0cmEgPT09IG51bGwgfHwgZXh0cmEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV4dHJhLm5nWm9uZVJ1bkNvYWxlc2NpbmcpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmdab25lO1xufVxuZnVuY3Rpb24gX2NhbGxBbmRSZXBvcnRUb0Vycm9ySGFuZGxlcihlcnJvckhhbmRsZXIsIG5nWm9uZSwgY2FsbGJhY2spIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFjaygpO1xuICAgICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBuZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gZXJyb3JIYW5kbGVyLmhhbmRsZUVycm9yKGUpKTtcbiAgICAgICAgICAgICAgICAvLyByZXRocm93IGFzIHRoZSBleGNlcHRpb24gaGFuZGxlciBtaWdodCBub3QgZG8gaXRcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IGVycm9ySGFuZGxlci5oYW5kbGVFcnJvcihlKSk7XG4gICAgICAgIC8vIHJldGhyb3cgYXMgdGhlIGV4Y2VwdGlvbiBoYW5kbGVyIG1pZ2h0IG5vdCBkbyBpdFxuICAgICAgICB0aHJvdyBlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG9wdGlvbnNSZWR1Y2VyKGRzdCwgb2Jqcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9ianMpKSB7XG4gICAgICAgIGRzdCA9IG9ianMucmVkdWNlKG9wdGlvbnNSZWR1Y2VyLCBkc3QpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZHN0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkc3QpLCBvYmpzKTtcbiAgICB9XG4gICAgcmV0dXJuIGRzdDtcbn1cbi8qKlxuICogQSByZWZlcmVuY2UgdG8gYW4gQW5ndWxhciBhcHBsaWNhdGlvbiBydW5uaW5nIG9uIGEgcGFnZS5cbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICpcbiAqIHtAYSBpcy1zdGFibGUtZXhhbXBsZXN9XG4gKiAjIyMgaXNTdGFibGUgZXhhbXBsZXMgYW5kIGNhdmVhdHNcbiAqXG4gKiBOb3RlIHR3byBpbXBvcnRhbnQgcG9pbnRzIGFib3V0IGBpc1N0YWJsZWAsIGRlbW9uc3RyYXRlZCBpbiB0aGUgZXhhbXBsZXMgYmVsb3c6XG4gKiAtIHRoZSBhcHBsaWNhdGlvbiB3aWxsIG5ldmVyIGJlIHN0YWJsZSBpZiB5b3Ugc3RhcnQgYW55IGtpbmRcbiAqIG9mIHJlY3VycmVudCBhc3luY2hyb25vdXMgdGFzayB3aGVuIHRoZSBhcHBsaWNhdGlvbiBzdGFydHNcbiAqIChmb3IgZXhhbXBsZSBmb3IgYSBwb2xsaW5nIHByb2Nlc3MsIHN0YXJ0ZWQgd2l0aCBhIGBzZXRJbnRlcnZhbGAsIGEgYHNldFRpbWVvdXRgXG4gKiBvciB1c2luZyBSeEpTIG9wZXJhdG9ycyBsaWtlIGBpbnRlcnZhbGApO1xuICogLSB0aGUgYGlzU3RhYmxlYCBPYnNlcnZhYmxlIHJ1bnMgb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lLlxuICpcbiAqIExldCdzIGltYWdpbmUgdGhhdCB5b3Ugc3RhcnQgYSByZWN1cnJlbnQgdGFza1xuICogKGhlcmUgaW5jcmVtZW50aW5nIGEgY291bnRlciwgdXNpbmcgUnhKUyBgaW50ZXJ2YWxgKSxcbiAqIGFuZCBhdCB0aGUgc2FtZSB0aW1lIHN1YnNjcmliZSB0byBgaXNTdGFibGVgLlxuICpcbiAqIGBgYFxuICogY29uc3RydWN0b3IoYXBwUmVmOiBBcHBsaWNhdGlvblJlZikge1xuICogICBhcHBSZWYuaXNTdGFibGUucGlwZShcbiAqICAgICAgZmlsdGVyKHN0YWJsZSA9PiBzdGFibGUpXG4gKiAgICkuc3Vic2NyaWJlKCgpID0+IGNvbnNvbGUubG9nKCdBcHAgaXMgc3RhYmxlIG5vdycpO1xuICogICBpbnRlcnZhbCgxMDAwKS5zdWJzY3JpYmUoY291bnRlciA9PiBjb25zb2xlLmxvZyhjb3VudGVyKSk7XG4gKiB9XG4gKiBgYGBcbiAqIEluIHRoaXMgZXhhbXBsZSwgYGlzU3RhYmxlYCB3aWxsIG5ldmVyIGVtaXQgYHRydWVgLFxuICogYW5kIHRoZSB0cmFjZSBcIkFwcCBpcyBzdGFibGUgbm93XCIgd2lsbCBuZXZlciBnZXQgbG9nZ2VkLlxuICpcbiAqIElmIHlvdSB3YW50IHRvIGV4ZWN1dGUgc29tZXRoaW5nIHdoZW4gdGhlIGFwcCBpcyBzdGFibGUsXG4gKiB5b3UgaGF2ZSB0byB3YWl0IGZvciB0aGUgYXBwbGljYXRpb24gdG8gYmUgc3RhYmxlXG4gKiBiZWZvcmUgc3RhcnRpbmcgeW91ciBwb2xsaW5nIHByb2Nlc3MuXG4gKlxuICogYGBgXG4gKiBjb25zdHJ1Y3RvcihhcHBSZWY6IEFwcGxpY2F0aW9uUmVmKSB7XG4gKiAgIGFwcFJlZi5pc1N0YWJsZS5waXBlKFxuICogICAgIGZpcnN0KHN0YWJsZSA9PiBzdGFibGUpLFxuICogICAgIHRhcChzdGFibGUgPT4gY29uc29sZS5sb2coJ0FwcCBpcyBzdGFibGUgbm93JykpLFxuICogICAgIHN3aXRjaE1hcCgoKSA9PiBpbnRlcnZhbCgxMDAwKSlcbiAqICAgKS5zdWJzY3JpYmUoY291bnRlciA9PiBjb25zb2xlLmxvZyhjb3VudGVyKSk7XG4gKiB9XG4gKiBgYGBcbiAqIEluIHRoaXMgZXhhbXBsZSwgdGhlIHRyYWNlIFwiQXBwIGlzIHN0YWJsZSBub3dcIiB3aWxsIGJlIGxvZ2dlZFxuICogYW5kIHRoZW4gdGhlIGNvdW50ZXIgc3RhcnRzIGluY3JlbWVudGluZyBldmVyeSBzZWNvbmQuXG4gKlxuICogTm90ZSBhbHNvIHRoYXQgdGhpcyBPYnNlcnZhYmxlIHJ1bnMgb3V0c2lkZSBvZiB0aGUgQW5ndWxhciB6b25lLFxuICogd2hpY2ggbWVhbnMgdGhhdCB0aGUgY29kZSBpbiB0aGUgc3Vic2NyaXB0aW9uXG4gKiB0byB0aGlzIE9ic2VydmFibGUgd2lsbCBub3QgdHJpZ2dlciB0aGUgY2hhbmdlIGRldGVjdGlvbi5cbiAqXG4gKiBMZXQncyBpbWFnaW5lIHRoYXQgaW5zdGVhZCBvZiBsb2dnaW5nIHRoZSBjb3VudGVyIHZhbHVlLFxuICogeW91IHVwZGF0ZSBhIGZpZWxkIG9mIHlvdXIgY29tcG9uZW50XG4gKiBhbmQgZGlzcGxheSBpdCBpbiBpdHMgdGVtcGxhdGUuXG4gKlxuICogYGBgXG4gKiBjb25zdHJ1Y3RvcihhcHBSZWY6IEFwcGxpY2F0aW9uUmVmKSB7XG4gKiAgIGFwcFJlZi5pc1N0YWJsZS5waXBlKFxuICogICAgIGZpcnN0KHN0YWJsZSA9PiBzdGFibGUpLFxuICogICAgIHN3aXRjaE1hcCgoKSA9PiBpbnRlcnZhbCgxMDAwKSlcbiAqICAgKS5zdWJzY3JpYmUoY291bnRlciA9PiB0aGlzLnZhbHVlID0gY291bnRlcik7XG4gKiB9XG4gKiBgYGBcbiAqIEFzIHRoZSBgaXNTdGFibGVgIE9ic2VydmFibGUgcnVucyBvdXRzaWRlIHRoZSB6b25lLFxuICogdGhlIGB2YWx1ZWAgZmllbGQgd2lsbCBiZSB1cGRhdGVkIHByb3Blcmx5LFxuICogYnV0IHRoZSB0ZW1wbGF0ZSB3aWxsIG5vdCBiZSByZWZyZXNoZWQhXG4gKlxuICogWW91J2xsIGhhdmUgdG8gbWFudWFsbHkgdHJpZ2dlciB0aGUgY2hhbmdlIGRldGVjdGlvbiB0byB1cGRhdGUgdGhlIHRlbXBsYXRlLlxuICpcbiAqIGBgYFxuICogY29uc3RydWN0b3IoYXBwUmVmOiBBcHBsaWNhdGlvblJlZiwgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gKiAgIGFwcFJlZi5pc1N0YWJsZS5waXBlKFxuICogICAgIGZpcnN0KHN0YWJsZSA9PiBzdGFibGUpLFxuICogICAgIHN3aXRjaE1hcCgoKSA9PiBpbnRlcnZhbCgxMDAwKSlcbiAqICAgKS5zdWJzY3JpYmUoY291bnRlciA9PiB7XG4gKiAgICAgdGhpcy52YWx1ZSA9IGNvdW50ZXI7XG4gKiAgICAgY2QuZGV0ZWN0Q2hhbmdlcygpO1xuICogICB9KTtcbiAqIH1cbiAqIGBgYFxuICpcbiAqIE9yIG1ha2UgdGhlIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBydW4gaW5zaWRlIHRoZSB6b25lLlxuICpcbiAqIGBgYFxuICogY29uc3RydWN0b3IoYXBwUmVmOiBBcHBsaWNhdGlvblJlZiwgem9uZTogTmdab25lKSB7XG4gKiAgIGFwcFJlZi5pc1N0YWJsZS5waXBlKFxuICogICAgIGZpcnN0KHN0YWJsZSA9PiBzdGFibGUpLFxuICogICAgIHN3aXRjaE1hcCgoKSA9PiBpbnRlcnZhbCgxMDAwKSlcbiAqICAgKS5zdWJzY3JpYmUoY291bnRlciA9PiB6b25lLnJ1bigoKSA9PiB0aGlzLnZhbHVlID0gY291bnRlcikpO1xuICogfVxuICogYGBgXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBBcHBsaWNhdGlvblJlZiB7XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIGNvbnN0cnVjdG9yKF96b25lLCBfaW5qZWN0b3IsIF9leGNlcHRpb25IYW5kbGVyLCBfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBfaW5pdFN0YXR1cykge1xuICAgICAgICB0aGlzLl96b25lID0gX3pvbmU7XG4gICAgICAgIHRoaXMuX2luamVjdG9yID0gX2luamVjdG9yO1xuICAgICAgICB0aGlzLl9leGNlcHRpb25IYW5kbGVyID0gX2V4Y2VwdGlvbkhhbmRsZXI7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlciA9IF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG4gICAgICAgIHRoaXMuX2luaXRTdGF0dXMgPSBfaW5pdFN0YXR1cztcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9ib290c3RyYXBMaXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fdmlld3MgPSBbXTtcbiAgICAgICAgdGhpcy5fcnVubmluZ1RpY2sgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3RhYmxlID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCBhIGxpc3Qgb2YgY29tcG9uZW50IHR5cGVzIHJlZ2lzdGVyZWQgdG8gdGhpcyBhcHBsaWNhdGlvbi5cbiAgICAgICAgICogVGhpcyBsaXN0IGlzIHBvcHVsYXRlZCBldmVuIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbXBvbmVudFR5cGVzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgYSBsaXN0IG9mIGNvbXBvbmVudHMgcmVnaXN0ZXJlZCB0byB0aGlzIGFwcGxpY2F0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0gW107XG4gICAgICAgIHRoaXMuX29uTWljcm90YXNrRW1wdHlTdWJzY3JpcHRpb24gPSB0aGlzLl96b25lLm9uTWljcm90YXNrRW1wdHkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl96b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGljaygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgaXNDdXJyZW50bHlTdGFibGUgPSBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3N0YWJsZSA9IHRoaXMuX3pvbmUuaXNTdGFibGUgJiYgIXRoaXMuX3pvbmUuaGFzUGVuZGluZ01hY3JvdGFza3MgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5fem9uZS5oYXNQZW5kaW5nTWljcm90YXNrcztcbiAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodGhpcy5fc3RhYmxlKTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBpc1N0YWJsZSA9IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBzdWJzY3JpcHRpb24gdG8gb25TdGFibGUgb3V0c2lkZSB0aGUgQW5ndWxhciBab25lIHNvIHRoYXRcbiAgICAgICAgICAgIC8vIHRoZSBjYWxsYmFjayBpcyBydW4gb3V0c2lkZSB0aGUgQW5ndWxhciBab25lLlxuICAgICAgICAgICAgbGV0IHN0YWJsZVN1YjtcbiAgICAgICAgICAgIHRoaXMuX3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0YWJsZVN1YiA9IHRoaXMuX3pvbmUub25TdGFibGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgTmdab25lLmFzc2VydE5vdEluQW5ndWxhclpvbmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgd2hldGhlciB0aGVyZSBhcmUgbm8gcGVuZGluZyBtYWNyby9taWNybyB0YXNrcyBpbiB0aGUgbmV4dCB0aWNrXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIGFsbG93IGZvciBOZ1pvbmUgdG8gdXBkYXRlIHRoZSBzdGF0ZS5cbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVNaWNyb1Rhc2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zdGFibGUgJiYgIXRoaXMuX3pvbmUuaGFzUGVuZGluZ01hY3JvdGFza3MgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5fem9uZS5oYXNQZW5kaW5nTWljcm90YXNrcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHVuc3RhYmxlU3ViID0gdGhpcy5fem9uZS5vblVuc3RhYmxlLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgTmdab25lLmFzc2VydEluQW5ndWxhclpvbmUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl96b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc3RhYmxlU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgdW5zdGFibGVTdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmlzU3RhYmxlID1cbiAgICAgICAgICAgIG1lcmdlJDEoaXNDdXJyZW50bHlTdGFibGUsIGlzU3RhYmxlLnBpcGUoc2hhcmUoKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBCb290c3RyYXAgYSBjb21wb25lbnQgb250byB0aGUgZWxlbWVudCBpZGVudGlmaWVkIGJ5IGl0cyBzZWxlY3RvciBvciwgb3B0aW9uYWxseSwgdG8gYVxuICAgICAqIHNwZWNpZmllZCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHVzYWdlTm90ZXNcbiAgICAgKiAjIyMgQm9vdHN0cmFwIHByb2Nlc3NcbiAgICAgKlxuICAgICAqIFdoZW4gYm9vdHN0cmFwcGluZyBhIGNvbXBvbmVudCwgQW5ndWxhciBtb3VudHMgaXQgb250byBhIHRhcmdldCBET00gZWxlbWVudFxuICAgICAqIGFuZCBraWNrcyBvZmYgYXV0b21hdGljIGNoYW5nZSBkZXRlY3Rpb24uIFRoZSB0YXJnZXQgRE9NIGVsZW1lbnQgY2FuIGJlXG4gICAgICogcHJvdmlkZWQgdXNpbmcgdGhlIGByb290U2VsZWN0b3JPck5vZGVgIGFyZ3VtZW50LlxuICAgICAqXG4gICAgICogSWYgdGhlIHRhcmdldCBET00gZWxlbWVudCBpcyBub3QgcHJvdmlkZWQsIEFuZ3VsYXIgdHJpZXMgdG8gZmluZCBvbmUgb24gYSBwYWdlXG4gICAgICogdXNpbmcgdGhlIGBzZWxlY3RvcmAgb2YgdGhlIGNvbXBvbmVudCB0aGF0IGlzIGJlaW5nIGJvb3RzdHJhcHBlZFxuICAgICAqIChmaXJzdCBtYXRjaGVkIGVsZW1lbnQgaXMgdXNlZCkuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogR2VuZXJhbGx5LCB3ZSBkZWZpbmUgdGhlIGNvbXBvbmVudCB0byBib290c3RyYXAgaW4gdGhlIGBib290c3RyYXBgIGFycmF5IG9mIGBOZ01vZHVsZWAsXG4gICAgICogYnV0IGl0IHJlcXVpcmVzIHVzIHRvIGtub3cgdGhlIGNvbXBvbmVudCB3aGlsZSB3cml0aW5nIHRoZSBhcHBsaWNhdGlvbiBjb2RlLlxuICAgICAqXG4gICAgICogSW1hZ2luZSBhIHNpdHVhdGlvbiB3aGVyZSB3ZSBoYXZlIHRvIHdhaXQgZm9yIGFuIEFQSSBjYWxsIHRvIGRlY2lkZSBhYm91dCB0aGUgY29tcG9uZW50IHRvXG4gICAgICogYm9vdHN0cmFwLiBXZSBjYW4gdXNlIHRoZSBgbmdEb0Jvb3RzdHJhcGAgaG9vayBvZiB0aGUgYE5nTW9kdWxlYCBhbmQgY2FsbCB0aGlzIG1ldGhvZCB0b1xuICAgICAqIGR5bmFtaWNhbGx5IGJvb3RzdHJhcCBhIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIHtAZXhhbXBsZSBjb3JlL3RzL3BsYXRmb3JtL3BsYXRmb3JtLnRzIHJlZ2lvbj0nY29tcG9uZW50U2VsZWN0b3InfVxuICAgICAqXG4gICAgICogT3B0aW9uYWxseSwgYSBjb21wb25lbnQgY2FuIGJlIG1vdW50ZWQgb250byBhIERPTSBlbGVtZW50IHRoYXQgZG9lcyBub3QgbWF0Y2ggdGhlXG4gICAgICogc2VsZWN0b3Igb2YgdGhlIGJvb3RzdHJhcHBlZCBjb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBJbiB0aGUgZm9sbG93aW5nIGV4YW1wbGUsIHdlIGFyZSBwcm92aWRpbmcgYSBDU1Mgc2VsZWN0b3IgdG8gbWF0Y2ggdGhlIHRhcmdldCBlbGVtZW50LlxuICAgICAqXG4gICAgICoge0BleGFtcGxlIGNvcmUvdHMvcGxhdGZvcm0vcGxhdGZvcm0udHMgcmVnaW9uPSdjc3NTZWxlY3Rvcid9XG4gICAgICpcbiAgICAgKiBXaGlsZSBpbiB0aGlzIGV4YW1wbGUsIHdlIGFyZSBwcm92aWRpbmcgcmVmZXJlbmNlIHRvIGEgRE9NIG5vZGUuXG4gICAgICpcbiAgICAgKiB7QGV4YW1wbGUgY29yZS90cy9wbGF0Zm9ybS9wbGF0Zm9ybS50cyByZWdpb249J2RvbU5vZGUnfVxuICAgICAqL1xuICAgIGJvb3RzdHJhcChjb21wb25lbnRPckZhY3RvcnksIHJvb3RTZWxlY3Rvck9yTm9kZSkge1xuICAgICAgICBpZiAoIXRoaXMuX2luaXRTdGF0dXMuZG9uZSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkgP1xuICAgICAgICAgICAgICAgICdDYW5ub3QgYm9vdHN0cmFwIGFzIHRoZXJlIGFyZSBzdGlsbCBhc3luY2hyb25vdXMgaW5pdGlhbGl6ZXJzIHJ1bm5pbmcuICcgK1xuICAgICAgICAgICAgICAgICAgICAnQm9vdHN0cmFwIGNvbXBvbmVudHMgaW4gdGhlIGBuZ0RvQm9vdHN0cmFwYCBtZXRob2Qgb2YgdGhlIHJvb3QgbW9kdWxlLicgOlxuICAgICAgICAgICAgICAgICcnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcig0MDUgLyogQVNZTkNfSU5JVElBTElaRVJTX1NUSUxMX1JVTk5JTkcgKi8sIGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGNvbXBvbmVudEZhY3Rvcnk7XG4gICAgICAgIGlmIChjb21wb25lbnRPckZhY3RvcnkgaW5zdGFuY2VvZiBDb21wb25lbnRGYWN0b3J5JDEpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudEZhY3RvcnkgPSBjb21wb25lbnRPckZhY3Rvcnk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb21wb25lbnRGYWN0b3J5ID1cbiAgICAgICAgICAgICAgICB0aGlzLl9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29tcG9uZW50T3JGYWN0b3J5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbXBvbmVudFR5cGVzLnB1c2goY29tcG9uZW50RmFjdG9yeS5jb21wb25lbnRUeXBlKTtcbiAgICAgICAgLy8gQ3JlYXRlIGEgZmFjdG9yeSBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgbW9kdWxlIGlmIGl0J3Mgbm90IGJvdW5kIHRvIHNvbWUgb3RoZXJcbiAgICAgICAgY29uc3QgbmdNb2R1bGUgPSBpc0JvdW5kVG9Nb2R1bGUoY29tcG9uZW50RmFjdG9yeSkgPyB1bmRlZmluZWQgOiB0aGlzLl9pbmplY3Rvci5nZXQoTmdNb2R1bGVSZWYkMSk7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yT3JOb2RlID0gcm9vdFNlbGVjdG9yT3JOb2RlIHx8IGNvbXBvbmVudEZhY3Rvcnkuc2VsZWN0b3I7XG4gICAgICAgIGNvbnN0IGNvbXBSZWYgPSBjb21wb25lbnRGYWN0b3J5LmNyZWF0ZShJbmplY3Rvci5OVUxMLCBbXSwgc2VsZWN0b3JPck5vZGUsIG5nTW9kdWxlKTtcbiAgICAgICAgY29uc3QgbmF0aXZlRWxlbWVudCA9IGNvbXBSZWYubG9jYXRpb24ubmF0aXZlRWxlbWVudDtcbiAgICAgICAgY29uc3QgdGVzdGFiaWxpdHkgPSBjb21wUmVmLmluamVjdG9yLmdldChUZXN0YWJpbGl0eSwgbnVsbCk7XG4gICAgICAgIGNvbnN0IHRlc3RhYmlsaXR5UmVnaXN0cnkgPSB0ZXN0YWJpbGl0eSAmJiBjb21wUmVmLmluamVjdG9yLmdldChUZXN0YWJpbGl0eVJlZ2lzdHJ5KTtcbiAgICAgICAgaWYgKHRlc3RhYmlsaXR5ICYmIHRlc3RhYmlsaXR5UmVnaXN0cnkpIHtcbiAgICAgICAgICAgIHRlc3RhYmlsaXR5UmVnaXN0cnkucmVnaXN0ZXJBcHBsaWNhdGlvbihuYXRpdmVFbGVtZW50LCB0ZXN0YWJpbGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgY29tcFJlZi5vbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kZXRhY2hWaWV3KGNvbXBSZWYuaG9zdFZpZXcpO1xuICAgICAgICAgICAgcmVtb3ZlKHRoaXMuY29tcG9uZW50cywgY29tcFJlZik7XG4gICAgICAgICAgICBpZiAodGVzdGFiaWxpdHlSZWdpc3RyeSkge1xuICAgICAgICAgICAgICAgIHRlc3RhYmlsaXR5UmVnaXN0cnkudW5yZWdpc3RlckFwcGxpY2F0aW9uKG5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbG9hZENvbXBvbmVudChjb21wUmVmKTtcbiAgICAgICAgaWYgKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgY29uc3QgX2NvbnNvbGUgPSB0aGlzLl9pbmplY3Rvci5nZXQoQ29uc29sZSk7XG4gICAgICAgICAgICBfY29uc29sZS5sb2coYEFuZ3VsYXIgaXMgcnVubmluZyBpbiBkZXZlbG9wbWVudCBtb2RlLiBDYWxsIGVuYWJsZVByb2RNb2RlKCkgdG8gZW5hYmxlIHByb2R1Y3Rpb24gbW9kZS5gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tcFJlZjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIHRvIGV4cGxpY2l0bHkgcHJvY2VzcyBjaGFuZ2UgZGV0ZWN0aW9uIGFuZCBpdHMgc2lkZS1lZmZlY3RzLlxuICAgICAqXG4gICAgICogSW4gZGV2ZWxvcG1lbnQgbW9kZSwgYHRpY2soKWAgYWxzbyBwZXJmb3JtcyBhIHNlY29uZCBjaGFuZ2UgZGV0ZWN0aW9uIGN5Y2xlIHRvIGVuc3VyZSB0aGF0IG5vXG4gICAgICogZnVydGhlciBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gSWYgYWRkaXRpb25hbCBjaGFuZ2VzIGFyZSBwaWNrZWQgdXAgZHVyaW5nIHRoaXMgc2Vjb25kIGN5Y2xlLFxuICAgICAqIGJpbmRpbmdzIGluIHRoZSBhcHAgaGF2ZSBzaWRlLWVmZmVjdHMgdGhhdCBjYW5ub3QgYmUgcmVzb2x2ZWQgaW4gYSBzaW5nbGUgY2hhbmdlIGRldGVjdGlvblxuICAgICAqIHBhc3MuXG4gICAgICogSW4gdGhpcyBjYXNlLCBBbmd1bGFyIHRocm93cyBhbiBlcnJvciwgc2luY2UgYW4gQW5ndWxhciBhcHBsaWNhdGlvbiBjYW4gb25seSBoYXZlIG9uZSBjaGFuZ2VcbiAgICAgKiBkZXRlY3Rpb24gcGFzcyBkdXJpbmcgd2hpY2ggYWxsIGNoYW5nZSBkZXRlY3Rpb24gbXVzdCBjb21wbGV0ZS5cbiAgICAgKi9cbiAgICB0aWNrKCkge1xuICAgICAgICBpZiAodGhpcy5fcnVubmluZ1RpY2spIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpID9cbiAgICAgICAgICAgICAgICAnQXBwbGljYXRpb25SZWYudGljayBpcyBjYWxsZWQgcmVjdXJzaXZlbHknIDpcbiAgICAgICAgICAgICAgICAnJztcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoMTAxIC8qIFJFQ1VSU0lWRV9BUFBMSUNBVElPTl9SRUZfVElDSyAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fcnVubmluZ1RpY2sgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgdmlldyBvZiB0aGlzLl92aWV3cykge1xuICAgICAgICAgICAgICAgIHZpZXcuZGV0ZWN0Q2hhbmdlcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHZpZXcgb2YgdGhpcy5fdmlld3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmlldy5jaGVja05vQ2hhbmdlcygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gQXR0ZW50aW9uOiBEb24ndCByZXRocm93IGFzIGl0IGNvdWxkIGNhbmNlbCBzdWJzY3JpcHRpb25zIHRvIE9ic2VydmFibGVzIVxuICAgICAgICAgICAgdGhpcy5fem9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLl9leGNlcHRpb25IYW5kbGVyLmhhbmRsZUVycm9yKGUpKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuX3J1bm5pbmdUaWNrID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQXR0YWNoZXMgYSB2aWV3IHNvIHRoYXQgaXQgd2lsbCBiZSBkaXJ0eSBjaGVja2VkLlxuICAgICAqIFRoZSB2aWV3IHdpbGwgYmUgYXV0b21hdGljYWxseSBkZXRhY2hlZCB3aGVuIGl0IGlzIGRlc3Ryb3llZC5cbiAgICAgKiBUaGlzIHdpbGwgdGhyb3cgaWYgdGhlIHZpZXcgaXMgYWxyZWFkeSBhdHRhY2hlZCB0byBhIFZpZXdDb250YWluZXIuXG4gICAgICovXG4gICAgYXR0YWNoVmlldyh2aWV3UmVmKSB7XG4gICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3UmVmO1xuICAgICAgICB0aGlzLl92aWV3cy5wdXNoKHZpZXcpO1xuICAgICAgICB2aWV3LmF0dGFjaFRvQXBwUmVmKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRhY2hlcyBhIHZpZXcgZnJvbSBkaXJ0eSBjaGVja2luZyBhZ2Fpbi5cbiAgICAgKi9cbiAgICBkZXRhY2hWaWV3KHZpZXdSZWYpIHtcbiAgICAgICAgY29uc3QgdmlldyA9IHZpZXdSZWY7XG4gICAgICAgIHJlbW92ZSh0aGlzLl92aWV3cywgdmlldyk7XG4gICAgICAgIHZpZXcuZGV0YWNoRnJvbUFwcFJlZigpO1xuICAgIH1cbiAgICBfbG9hZENvbXBvbmVudChjb21wb25lbnRSZWYpIHtcbiAgICAgICAgdGhpcy5hdHRhY2hWaWV3KGNvbXBvbmVudFJlZi5ob3N0Vmlldyk7XG4gICAgICAgIHRoaXMudGljaygpO1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaChjb21wb25lbnRSZWYpO1xuICAgICAgICAvLyBHZXQgdGhlIGxpc3RlbmVycyBsYXppbHkgdG8gcHJldmVudCBESSBjeWNsZXMuXG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX2luamVjdG9yLmdldChBUFBfQk9PVFNUUkFQX0xJU1RFTkVSLCBbXSkuY29uY2F0KHRoaXMuX2Jvb3RzdHJhcExpc3RlbmVycyk7XG4gICAgICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4gbGlzdGVuZXIoY29tcG9uZW50UmVmKSk7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fdmlld3Muc2xpY2UoKS5mb3JFYWNoKCh2aWV3KSA9PiB2aWV3LmRlc3Ryb3koKSk7XG4gICAgICAgIHRoaXMuX29uTWljcm90YXNrRW1wdHlTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGF0dGFjaGVkIHZpZXdzLlxuICAgICAqL1xuICAgIGdldCB2aWV3Q291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92aWV3cy5sZW5ndGg7XG4gICAgfVxufVxuQXBwbGljYXRpb25SZWYuybVmYWMgPSBmdW5jdGlvbiBBcHBsaWNhdGlvblJlZl9GYWN0b3J5KHQpIHsgcmV0dXJuIG5ldyAodCB8fCBBcHBsaWNhdGlvblJlZikoybXJtWluamVjdChOZ1pvbmUpLCDJtcm1aW5qZWN0KEluamVjdG9yKSwgybXJtWluamVjdChFcnJvckhhbmRsZXIpLCDJtcm1aW5qZWN0KENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciQxKSwgybXJtWluamVjdChBcHBsaWNhdGlvbkluaXRTdGF0dXMpKTsgfTtcbkFwcGxpY2F0aW9uUmVmLsm1cHJvdiA9IC8qQF9fUFVSRV9fKi8gybXJtWRlZmluZUluamVjdGFibGUoeyB0b2tlbjogQXBwbGljYXRpb25SZWYsIGZhY3Rvcnk6IEFwcGxpY2F0aW9uUmVmLsm1ZmFjLCBwcm92aWRlZEluOiAncm9vdCcgfSk7XG4oZnVuY3Rpb24gKCkge1xuICAgICh0eXBlb2YgbmdEZXZNb2RlID09PSBcInVuZGVmaW5lZFwiIHx8IG5nRGV2TW9kZSkgJiYgc2V0Q2xhc3NNZXRhZGF0YShBcHBsaWNhdGlvblJlZiwgW3tcbiAgICAgICAgICAgIHR5cGU6IEluamVjdGFibGUsXG4gICAgICAgICAgICBhcmdzOiBbeyBwcm92aWRlZEluOiAncm9vdCcgfV1cbiAgICAgICAgfV0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIFt7IHR5cGU6IE5nWm9uZSB9LCB7IHR5cGU6IEluamVjdG9yIH0sIHsgdHlwZTogRXJyb3JIYW5kbGVyIH0sIHsgdHlwZTogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyJDEgfSwgeyB0eXBlOiBBcHBsaWNhdGlvbkluaXRTdGF0dXMgfV07IH0sIG51bGwpO1xufSkoKTtcbmZ1bmN0aW9uIHJlbW92ZShsaXN0LCBlbCkge1xuICAgIGNvbnN0IGluZGV4ID0gbGlzdC5pbmRleE9mKGVsKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBsaXN0LnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuZnVuY3Rpb24gX2xhc3REZWZpbmVkKGFyZ3MpIHtcbiAgICBmb3IgKGxldCBpID0gYXJncy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICBpZiAoYXJnc1tpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gX21lcmdlQXJyYXlzKHBhcnRzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4gcGFydCAmJiByZXN1bHQucHVzaCguLi5wYXJ0KSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIFRoaXMgZmlsZSBpcyB1c2VkIHRvIGNvbnRyb2wgaWYgdGhlIGRlZmF1bHQgcmVuZGVyaW5nIHBpcGVsaW5lIHNob3VsZCBiZSBgVmlld0VuZ2luZWAgb3IgYEl2eWAuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gaG93IHRvIHJ1biBhbmQgZGVidWcgdGVzdHMgd2l0aCBlaXRoZXIgSXZ5IG9yIFZpZXcgRW5naW5lIChsZWdhY3kpLFxuICogcGxlYXNlIHNlZSBbQkFaRUwubWRdKC4vZG9jcy9CQVpFTC5tZCkuXG4gKi9cbmxldCBfZGV2TW9kZSA9IHRydWU7XG5sZXQgX3J1bk1vZGVMb2NrZWQgPSBmYWxzZTtcbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIEFuZ3VsYXIgaXMgaW4gZGV2ZWxvcG1lbnQgbW9kZS4gQWZ0ZXIgY2FsbGVkIG9uY2UsXG4gKiB0aGUgdmFsdWUgaXMgbG9ja2VkIGFuZCB3b24ndCBjaGFuZ2UgYW55IG1vcmUuXG4gKlxuICogQnkgZGVmYXVsdCwgdGhpcyBpcyB0cnVlLCB1bmxlc3MgYSB1c2VyIGNhbGxzIGBlbmFibGVQcm9kTW9kZWAgYmVmb3JlIGNhbGxpbmcgdGhpcy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmZ1bmN0aW9uIGlzRGV2TW9kZSgpIHtcbiAgICBfcnVuTW9kZUxvY2tlZCA9IHRydWU7XG4gICAgcmV0dXJuIF9kZXZNb2RlO1xufVxuLyoqXG4gKiBEaXNhYmxlIEFuZ3VsYXIncyBkZXZlbG9wbWVudCBtb2RlLCB3aGljaCB0dXJucyBvZmYgYXNzZXJ0aW9ucyBhbmQgb3RoZXJcbiAqIGNoZWNrcyB3aXRoaW4gdGhlIGZyYW1ld29yay5cbiAqXG4gKiBPbmUgaW1wb3J0YW50IGFzc2VydGlvbiB0aGlzIGRpc2FibGVzIHZlcmlmaWVzIHRoYXQgYSBjaGFuZ2UgZGV0ZWN0aW9uIHBhc3NcbiAqIGRvZXMgbm90IHJlc3VsdCBpbiBhZGRpdGlvbmFsIGNoYW5nZXMgdG8gYW55IGJpbmRpbmdzIChhbHNvIGtub3duIGFzXG4gKiB1bmlkaXJlY3Rpb25hbCBkYXRhIGZsb3cpLlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZnVuY3Rpb24gZW5hYmxlUHJvZE1vZGUoKSB7XG4gICAgaWYgKF9ydW5Nb2RlTG9ja2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGVuYWJsZSBwcm9kIG1vZGUgYWZ0ZXIgcGxhdGZvcm0gc2V0dXAuJyk7XG4gICAgfVxuICAgIC8vIFRoZSBiZWxvdyBjaGVjayBpcyB0aGVyZSBzbyB3aGVuIG5nRGV2TW9kZSBpcyBzZXQgdmlhIHRlcnNlclxuICAgIC8vIGBnbG9iYWxbJ25nRGV2TW9kZSddID0gZmFsc2U7YCBpcyBhbHNvIGRyb3BwZWQuXG4gICAgaWYgKHR5cGVvZiBuZ0Rldk1vZGUgPT09IHVuZGVmaW5lZCB8fCAhIW5nRGV2TW9kZSkge1xuICAgICAgICBfZ2xvYmFsWyduZ0Rldk1vZGUnXSA9IGZhbHNlO1xuICAgIH1cbiAgICBfZGV2TW9kZSA9IGZhbHNlO1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBOZ01vZHVsZUZhY3Rvcnkgd2l0aCB0aGUgZ2l2ZW4gaWQgKHNwZWNpZmllZCB1c2luZyBbQE5nTW9kdWxlLmlkXG4gKiBmaWVsZF0oYXBpL2NvcmUvTmdNb2R1bGUjaWQpKSwgaWYgaXQgZXhpc3RzIGFuZCBoYXMgYmVlbiBsb2FkZWQuIEZhY3RvcmllcyBmb3IgTmdNb2R1bGVzIHRoYXQgZG9cbiAqIG5vdCBzcGVjaWZ5IGFuIGBpZGAgY2Fubm90IGJlIHJldHJpZXZlZC4gVGhyb3dzIGlmIGFuIE5nTW9kdWxlIGNhbm5vdCBiZSBmb3VuZC5cbiAqIEBwdWJsaWNBcGlcbiAqIEBkZXByZWNhdGVkIFVzZSBgZ2V0TmdNb2R1bGVCeUlkYCBpbnN0ZWFkLlxuICovXG5mdW5jdGlvbiBnZXRNb2R1bGVGYWN0b3J5KGlkKSB7XG4gICAgY29uc3QgdHlwZSA9IGdldFJlZ2lzdGVyZWROZ01vZHVsZVR5cGUoaWQpO1xuICAgIGlmICghdHlwZSlcbiAgICAgICAgdGhyb3cgbm9Nb2R1bGVFcnJvcihpZCk7XG4gICAgcmV0dXJuIG5ldyBOZ01vZHVsZUZhY3RvcnkodHlwZSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIE5nTW9kdWxlIGNsYXNzIHdpdGggdGhlIGdpdmVuIGlkIChzcGVjaWZpZWQgdXNpbmcgW0BOZ01vZHVsZS5pZFxuICogZmllbGRdKGFwaS9jb3JlL05nTW9kdWxlI2lkKSksIGlmIGl0IGV4aXN0cyBhbmQgaGFzIGJlZW4gbG9hZGVkLiBDbGFzc2VzIGZvciBOZ01vZHVsZXMgdGhhdCBkb1xuICogbm90IHNwZWNpZnkgYW4gYGlkYCBjYW5ub3QgYmUgcmV0cmlldmVkLiBUaHJvd3MgaWYgYW4gTmdNb2R1bGUgY2Fubm90IGJlIGZvdW5kLlxuICogQHB1YmxpY0FwaVxuICovXG5mdW5jdGlvbiBnZXROZ01vZHVsZUJ5SWQoaWQpIHtcbiAgICBjb25zdCB0eXBlID0gZ2V0UmVnaXN0ZXJlZE5nTW9kdWxlVHlwZShpZCk7XG4gICAgaWYgKCF0eXBlKVxuICAgICAgICB0aHJvdyBub01vZHVsZUVycm9yKGlkKTtcbiAgICByZXR1cm4gdHlwZTtcbn1cbmZ1bmN0aW9uIG5vTW9kdWxlRXJyb3IoaWQpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKGBObyBtb2R1bGUgd2l0aCBJRCAke2lkfSBsb2FkZWRgKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEJhc2UgY2xhc3MgdGhhdCBwcm92aWRlcyBjaGFuZ2UgZGV0ZWN0aW9uIGZ1bmN0aW9uYWxpdHkuXG4gKiBBIGNoYW5nZS1kZXRlY3Rpb24gdHJlZSBjb2xsZWN0cyBhbGwgdmlld3MgdGhhdCBhcmUgdG8gYmUgY2hlY2tlZCBmb3IgY2hhbmdlcy5cbiAqIFVzZSB0aGUgbWV0aG9kcyB0byBhZGQgYW5kIHJlbW92ZSB2aWV3cyBmcm9tIHRoZSB0cmVlLCBpbml0aWF0ZSBjaGFuZ2UtZGV0ZWN0aW9uLFxuICogYW5kIGV4cGxpY2l0bHkgbWFyayB2aWV3cyBhcyBfZGlydHlfLCBtZWFuaW5nIHRoYXQgdGhleSBoYXZlIGNoYW5nZWQgYW5kIG5lZWQgdG8gYmUgcmUtcmVuZGVyZWQuXG4gKlxuICogQHNlZSBbVXNpbmcgY2hhbmdlIGRldGVjdGlvbiBob29rc10oZ3VpZGUvbGlmZWN5Y2xlLWhvb2tzI3VzaW5nLWNoYW5nZS1kZXRlY3Rpb24taG9va3MpXG4gKiBAc2VlIFtEZWZpbmluZyBjdXN0b20gY2hhbmdlIGRldGVjdGlvbl0oZ3VpZGUvbGlmZWN5Y2xlLWhvb2tzI2RlZmluaW5nLWN1c3RvbS1jaGFuZ2UtZGV0ZWN0aW9uKVxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlcyBkZW1vbnN0cmF0ZSBob3cgdG8gbW9kaWZ5IGRlZmF1bHQgY2hhbmdlLWRldGVjdGlvbiBiZWhhdmlvclxuICogdG8gcGVyZm9ybSBleHBsaWNpdCBkZXRlY3Rpb24gd2hlbiBuZWVkZWQuXG4gKlxuICogIyMjIFVzZSBgbWFya0ZvckNoZWNrKClgIHdpdGggYENoZWNrT25jZWAgc3RyYXRlZ3lcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2V0cyB0aGUgYE9uUHVzaGAgY2hhbmdlLWRldGVjdGlvbiBzdHJhdGVneSBmb3IgYSBjb21wb25lbnRcbiAqIChgQ2hlY2tPbmNlYCwgcmF0aGVyIHRoYW4gdGhlIGRlZmF1bHQgYENoZWNrQWx3YXlzYCksIHRoZW4gZm9yY2VzIGEgc2Vjb25kIGNoZWNrXG4gKiBhZnRlciBhbiBpbnRlcnZhbC4gU2VlIFtsaXZlIGRlbW9dKGh0dHBzOi8vcGxua3IuY28vZWRpdC9HQzUxMmI/cD1wcmV2aWV3KS5cbiAqXG4gKiA8Y29kZS1leGFtcGxlIHBhdGg9XCJjb3JlL3RzL2NoYW5nZV9kZXRlY3QvY2hhbmdlLWRldGVjdGlvbi50c1wiXG4gKiByZWdpb249XCJtYXJrLWZvci1jaGVja1wiPjwvY29kZS1leGFtcGxlPlxuICpcbiAqICMjIyBEZXRhY2ggY2hhbmdlIGRldGVjdG9yIHRvIGxpbWl0IGhvdyBvZnRlbiBjaGVjayBvY2N1cnNcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgZGVmaW5lcyBhIGNvbXBvbmVudCB3aXRoIGEgbGFyZ2UgbGlzdCBvZiByZWFkLW9ubHkgZGF0YVxuICogdGhhdCBpcyBleHBlY3RlZCB0byBjaGFuZ2UgY29uc3RhbnRseSwgbWFueSB0aW1lcyBwZXIgc2Vjb25kLlxuICogVG8gaW1wcm92ZSBwZXJmb3JtYW5jZSwgd2Ugd2FudCB0byBjaGVjayBhbmQgdXBkYXRlIHRoZSBsaXN0XG4gKiBsZXNzIG9mdGVuIHRoYW4gdGhlIGNoYW5nZXMgYWN0dWFsbHkgb2NjdXIuIFRvIGRvIHRoYXQsIHdlIGRldGFjaFxuICogdGhlIGNvbXBvbmVudCdzIGNoYW5nZSBkZXRlY3RvciBhbmQgcGVyZm9ybSBhbiBleHBsaWNpdCBsb2NhbCBjaGVjayBldmVyeSBmaXZlIHNlY29uZHMuXG4gKlxuICogPGNvZGUtZXhhbXBsZSBwYXRoPVwiY29yZS90cy9jaGFuZ2VfZGV0ZWN0L2NoYW5nZS1kZXRlY3Rpb24udHNcIiByZWdpb249XCJkZXRhY2hcIj48L2NvZGUtZXhhbXBsZT5cbiAqXG4gKlxuICogIyMjIFJlYXR0YWNoaW5nIGEgZGV0YWNoZWQgY29tcG9uZW50XG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIGNyZWF0ZXMgYSBjb21wb25lbnQgZGlzcGxheWluZyBsaXZlIGRhdGEuXG4gKiBUaGUgY29tcG9uZW50IGRldGFjaGVzIGl0cyBjaGFuZ2UgZGV0ZWN0b3IgZnJvbSB0aGUgbWFpbiBjaGFuZ2UgZGV0ZWN0b3IgdHJlZVxuICogd2hlbiB0aGUgYGxpdmVgIHByb3BlcnR5IGlzIHNldCB0byBmYWxzZSwgYW5kIHJlYXR0YWNoZXMgaXQgd2hlbiB0aGUgcHJvcGVydHlcbiAqIGJlY29tZXMgdHJ1ZS5cbiAqXG4gKiA8Y29kZS1leGFtcGxlIHBhdGg9XCJjb3JlL3RzL2NoYW5nZV9kZXRlY3QvY2hhbmdlLWRldGVjdGlvbi50c1wiIHJlZ2lvbj1cInJlYXR0YWNoXCI+PC9jb2RlLWV4YW1wbGU+XG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBDaGFuZ2VEZXRlY3RvclJlZiB7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQG5vY29sbGFwc2VcbiAqL1xuQ2hhbmdlRGV0ZWN0b3JSZWYuX19OR19FTEVNRU5UX0lEX18gPSBpbmplY3RDaGFuZ2VEZXRlY3RvclJlZjtcbi8qKiBSZXR1cm5zIGEgQ2hhbmdlRGV0ZWN0b3JSZWYgKGEuay5hLiBhIFZpZXdSZWYpICovXG5mdW5jdGlvbiBpbmplY3RDaGFuZ2VEZXRlY3RvclJlZihmbGFncykge1xuICAgIHJldHVybiBjcmVhdGVWaWV3UmVmKGdldEN1cnJlbnRUTm9kZSgpLCBnZXRMVmlldygpLCAoZmxhZ3MgJiAxNiAvKiBGb3JQaXBlICovKSA9PT0gMTYgLyogRm9yUGlwZSAqLyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBWaWV3UmVmIGFuZCBzdG9yZXMgaXQgb24gdGhlIGluamVjdG9yIGFzIENoYW5nZURldGVjdG9yUmVmIChwdWJsaWMgYWxpYXMpLlxuICpcbiAqIEBwYXJhbSB0Tm9kZSBUaGUgbm9kZSB0aGF0IGlzIHJlcXVlc3RpbmcgYSBDaGFuZ2VEZXRlY3RvclJlZlxuICogQHBhcmFtIGxWaWV3IFRoZSB2aWV3IHRvIHdoaWNoIHRoZSBub2RlIGJlbG9uZ3NcbiAqIEBwYXJhbSBpc1BpcGUgV2hldGhlciB0aGUgdmlldyBpcyBiZWluZyBpbmplY3RlZCBpbnRvIGEgcGlwZS5cbiAqIEByZXR1cm5zIFRoZSBDaGFuZ2VEZXRlY3RvclJlZiB0byB1c2VcbiAqL1xuZnVuY3Rpb24gY3JlYXRlVmlld1JlZih0Tm9kZSwgbFZpZXcsIGlzUGlwZSkge1xuICAgIGlmIChpc0NvbXBvbmVudEhvc3QodE5vZGUpICYmICFpc1BpcGUpIHtcbiAgICAgICAgLy8gVGhlIExWaWV3IHJlcHJlc2VudHMgdGhlIGxvY2F0aW9uIHdoZXJlIHRoZSBjb21wb25lbnQgaXMgZGVjbGFyZWQuXG4gICAgICAgIC8vIEluc3RlYWQgd2Ugd2FudCB0aGUgTFZpZXcgZm9yIHRoZSBjb21wb25lbnQgVmlldyBhbmQgc28gd2UgbmVlZCB0byBsb29rIGl0IHVwLlxuICAgICAgICBjb25zdCBjb21wb25lbnRWaWV3ID0gZ2V0Q29tcG9uZW50TFZpZXdCeUluZGV4KHROb2RlLmluZGV4LCBsVmlldyk7IC8vIGxvb2sgZG93blxuICAgICAgICByZXR1cm4gbmV3IFZpZXdSZWYkMShjb21wb25lbnRWaWV3LCBjb21wb25lbnRWaWV3KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodE5vZGUudHlwZSAmICgzIC8qIEFueVJOb2RlICovIHwgMTIgLyogQW55Q29udGFpbmVyICovIHwgMzIgLyogSWN1ICovKSkge1xuICAgICAgICAvLyBUaGUgTFZpZXcgcmVwcmVzZW50cyB0aGUgbG9jYXRpb24gd2hlcmUgdGhlIGluamVjdGlvbiBpcyByZXF1ZXN0ZWQgZnJvbS5cbiAgICAgICAgLy8gV2UgbmVlZCB0byBsb2NhdGUgdGhlIGNvbnRhaW5pbmcgTFZpZXcgKGluIGNhc2Ugd2hlcmUgdGhlIGBsVmlld2AgaXMgYW4gZW1iZWRkZWQgdmlldylcbiAgICAgICAgY29uc3QgaG9zdENvbXBvbmVudFZpZXcgPSBsVmlld1tERUNMQVJBVElPTl9DT01QT05FTlRfVklFV107IC8vIGxvb2sgdXBcbiAgICAgICAgcmV0dXJuIG5ldyBWaWV3UmVmJDEoaG9zdENvbXBvbmVudFZpZXcsIGxWaWV3KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIEFuZ3VsYXIgW3ZpZXddKGd1aWRlL2dsb3NzYXJ5I3ZpZXcgXCJEZWZpbml0aW9uXCIpLlxuICpcbiAqIEBzZWUge0BsaW5rIENoYW5nZURldGVjdG9yUmVmI3VzYWdlLW5vdGVzIENoYW5nZSBkZXRlY3Rpb24gdXNhZ2V9XG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBWaWV3UmVmIGV4dGVuZHMgQ2hhbmdlRGV0ZWN0b3JSZWYge1xufVxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIEFuZ3VsYXIgW3ZpZXddKGd1aWRlL2dsb3NzYXJ5I3ZpZXcpIGluIGEgdmlldyBjb250YWluZXIuXG4gKiBBbiBbZW1iZWRkZWQgdmlld10oZ3VpZGUvZ2xvc3Nhcnkjdmlldy10cmVlKSBjYW4gYmUgcmVmZXJlbmNlZCBmcm9tIGEgY29tcG9uZW50XG4gKiBvdGhlciB0aGFuIHRoZSBob3N0aW5nIGNvbXBvbmVudCB3aG9zZSB0ZW1wbGF0ZSBkZWZpbmVzIGl0LCBvciBpdCBjYW4gYmUgZGVmaW5lZFxuICogaW5kZXBlbmRlbnRseSBieSBhIGBUZW1wbGF0ZVJlZmAuXG4gKlxuICogUHJvcGVydGllcyBvZiBlbGVtZW50cyBpbiBhIHZpZXcgY2FuIGNoYW5nZSwgYnV0IHRoZSBzdHJ1Y3R1cmUgKG51bWJlciBhbmQgb3JkZXIpIG9mIGVsZW1lbnRzIGluXG4gKiBhIHZpZXcgY2Fubm90LiBDaGFuZ2UgdGhlIHN0cnVjdHVyZSBvZiBlbGVtZW50cyBieSBpbnNlcnRpbmcsIG1vdmluZywgb3JcbiAqIHJlbW92aW5nIG5lc3RlZCB2aWV3cyBpbiBhIHZpZXcgY29udGFpbmVyLlxuICpcbiAqIEBzZWUgYFZpZXdDb250YWluZXJSZWZgXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiBUaGUgZm9sbG93aW5nIHRlbXBsYXRlIGJyZWFrcyBkb3duIGludG8gdHdvIHNlcGFyYXRlIGBUZW1wbGF0ZVJlZmAgaW5zdGFuY2VzLFxuICogYW4gb3V0ZXIgb25lIGFuZCBhbiBpbm5lciBvbmUuXG4gKlxuICogYGBgXG4gKiBDb3VudDoge3tpdGVtcy5sZW5ndGh9fVxuICogPHVsPlxuICogICA8bGkgKm5nRm9yPVwibGV0ICBpdGVtIG9mIGl0ZW1zXCI+e3tpdGVtfX08L2xpPlxuICogPC91bD5cbiAqIGBgYFxuICpcbiAqIFRoaXMgaXMgdGhlIG91dGVyIGBUZW1wbGF0ZVJlZmA6XG4gKlxuICogYGBgXG4gKiBDb3VudDoge3tpdGVtcy5sZW5ndGh9fVxuICogPHVsPlxuICogICA8bmctdGVtcGxhdGUgbmdGb3IgbGV0LWl0ZW0gW25nRm9yT2ZdPVwiaXRlbXNcIj48L25nLXRlbXBsYXRlPlxuICogPC91bD5cbiAqIGBgYFxuICpcbiAqIFRoaXMgaXMgdGhlIGlubmVyIGBUZW1wbGF0ZVJlZmA6XG4gKlxuICogYGBgXG4gKiAgIDxsaT57e2l0ZW19fTwvbGk+XG4gKiBgYGBcbiAqXG4gKiBUaGUgb3V0ZXIgYW5kIGlubmVyIGBUZW1wbGF0ZVJlZmAgaW5zdGFuY2VzIGFyZSBhc3NlbWJsZWQgaW50byB2aWV3cyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYFxuICogPCEtLSBWaWV3UmVmOiBvdXRlci0wIC0tPlxuICogQ291bnQ6IDJcbiAqIDx1bD5cbiAqICAgPG5nLXRlbXBsYXRlIHZpZXctY29udGFpbmVyLXJlZj48L25nLXRlbXBsYXRlPlxuICogICA8IS0tIFZpZXdSZWY6IGlubmVyLTEgLS0+PGxpPmZpcnN0PC9saT48IS0tIC9WaWV3UmVmOiBpbm5lci0xIC0tPlxuICogICA8IS0tIFZpZXdSZWY6IGlubmVyLTIgLS0+PGxpPnNlY29uZDwvbGk+PCEtLSAvVmlld1JlZjogaW5uZXItMiAtLT5cbiAqIDwvdWw+XG4gKiA8IS0tIC9WaWV3UmVmOiBvdXRlci0wIC0tPlxuICogYGBgXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIEVtYmVkZGVkVmlld1JlZiBleHRlbmRzIFZpZXdSZWYge1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBUaGlzIGZpbGUgZXhpc3RzIGZvciBlYXNpbHkgcGF0Y2hpbmcgTmdNb2R1bGVGYWN0b3J5TG9hZGVyIGluIGczXG52YXIgbmdfbW9kdWxlX2ZhY3RvcnlfbG9hZGVyX2ltcGwgPSB7fTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgRGVidWdFdmVudExpc3RlbmVyIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfVxufVxuLyoqXG4gKiBAcHVibGljQXBpXG4gKi9cbmZ1bmN0aW9uIGFzTmF0aXZlRWxlbWVudHMoZGVidWdFbHMpIHtcbiAgICByZXR1cm4gZGVidWdFbHMubWFwKChlbCkgPT4gZWwubmF0aXZlRWxlbWVudCk7XG59XG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgRGVidWdOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihuYXRpdmVOb2RlKSB7XG4gICAgICAgIHRoaXMubmF0aXZlTm9kZSA9IG5hdGl2ZU5vZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBgRGVidWdFbGVtZW50YCBwYXJlbnQuIFdpbGwgYmUgYG51bGxgIGlmIHRoaXMgaXMgdGhlIHJvb3QgZWxlbWVudC5cbiAgICAgKi9cbiAgICBnZXQgcGFyZW50KCkge1xuICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLm5hdGl2ZU5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgcmV0dXJuIHBhcmVudCA/IG5ldyBEZWJ1Z0VsZW1lbnQocGFyZW50KSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBob3N0IGRlcGVuZGVuY3kgaW5qZWN0b3IuIEZvciBleGFtcGxlLCB0aGUgcm9vdCBlbGVtZW50J3MgY29tcG9uZW50IGluc3RhbmNlIGluamVjdG9yLlxuICAgICAqL1xuICAgIGdldCBpbmplY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIGdldEluamVjdG9yKHRoaXMubmF0aXZlTm9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBlbGVtZW50J3Mgb3duIGNvbXBvbmVudCBpbnN0YW5jZSwgaWYgaXQgaGFzIG9uZS5cbiAgICAgKi9cbiAgICBnZXQgY29tcG9uZW50SW5zdGFuY2UoKSB7XG4gICAgICAgIGNvbnN0IG5hdGl2ZUVsZW1lbnQgPSB0aGlzLm5hdGl2ZU5vZGU7XG4gICAgICAgIHJldHVybiBuYXRpdmVFbGVtZW50ICYmXG4gICAgICAgICAgICAoZ2V0Q29tcG9uZW50JDEobmF0aXZlRWxlbWVudCkgfHwgZ2V0T3duaW5nQ29tcG9uZW50KG5hdGl2ZUVsZW1lbnQpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgcGFyZW50IGNvbnRleHQgZm9yIHRoaXMgZWxlbWVudC4gT2Z0ZW4gYW4gYW5jZXN0b3IgY29tcG9uZW50IGluc3RhbmNlXG4gICAgICogdGhhdCBnb3Zlcm5zIHRoaXMgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIFdoZW4gYW4gZWxlbWVudCBpcyByZXBlYXRlZCB3aXRoaW4gKm5nRm9yLCB0aGUgY29udGV4dCBpcyBhbiBgTmdGb3JPZmAgd2hvc2UgYCRpbXBsaWNpdGBcbiAgICAgKiBwcm9wZXJ0eSBpcyB0aGUgdmFsdWUgb2YgdGhlIHJvdyBpbnN0YW5jZSB2YWx1ZS4gRm9yIGV4YW1wbGUsIHRoZSBgaGVyb2AgaW4gYCpuZ0Zvcj1cImxldCBoZXJvXG4gICAgICogb2YgaGVyb2VzXCJgLlxuICAgICAqL1xuICAgIGdldCBjb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50JDEodGhpcy5uYXRpdmVOb2RlKSB8fCBnZXRDb250ZXh0KHRoaXMubmF0aXZlTm9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBjYWxsYmFja3MgYXR0YWNoZWQgdG8gdGhlIGNvbXBvbmVudCdzIEBPdXRwdXQgcHJvcGVydGllcyBhbmQvb3IgdGhlIGVsZW1lbnQncyBldmVudFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICovXG4gICAgZ2V0IGxpc3RlbmVycygpIHtcbiAgICAgICAgcmV0dXJuIGdldExpc3RlbmVycyh0aGlzLm5hdGl2ZU5vZGUpLmZpbHRlcihsaXN0ZW5lciA9PiBsaXN0ZW5lci50eXBlID09PSAnZG9tJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERpY3Rpb25hcnkgb2Ygb2JqZWN0cyBhc3NvY2lhdGVkIHdpdGggdGVtcGxhdGUgbG9jYWwgdmFyaWFibGVzIChlLmcuICNmb28pLCBrZXllZCBieSB0aGUgbG9jYWxcbiAgICAgKiB2YXJpYWJsZSBuYW1lLlxuICAgICAqL1xuICAgIGdldCByZWZlcmVuY2VzKCkge1xuICAgICAgICByZXR1cm4gZ2V0TG9jYWxSZWZzKHRoaXMubmF0aXZlTm9kZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgY29tcG9uZW50J3MgaW5qZWN0b3IgbG9va3VwIHRva2Vucy4gSW5jbHVkZXMgdGhlIGNvbXBvbmVudCBpdHNlbGYgcGx1cyB0aGUgdG9rZW5zIHRoYXQgdGhlXG4gICAgICogY29tcG9uZW50IGxpc3RzIGluIGl0cyBwcm92aWRlcnMgbWV0YWRhdGEuXG4gICAgICovXG4gICAgZ2V0IHByb3ZpZGVyVG9rZW5zKCkge1xuICAgICAgICByZXR1cm4gZ2V0SW5qZWN0aW9uVG9rZW5zKHRoaXMubmF0aXZlTm9kZSk7XG4gICAgfVxufVxuLyoqXG4gKiBAcHVibGljQXBpXG4gKlxuICogQHNlZSBbQ29tcG9uZW50IHRlc3Rpbmcgc2NlbmFyaW9zXShndWlkZS90ZXN0aW5nLWNvbXBvbmVudHMtc2NlbmFyaW9zKVxuICogQHNlZSBbQmFzaWNzIG9mIHRlc3RpbmcgY29tcG9uZW50c10oZ3VpZGUvdGVzdGluZy1jb21wb25lbnRzLWJhc2ljcylcbiAqIEBzZWUgW1Rlc3RpbmcgdXRpbGl0eSBBUElzXShndWlkZS90ZXN0aW5nLXV0aWxpdHktYXBpcylcbiAqL1xuY2xhc3MgRGVidWdFbGVtZW50IGV4dGVuZHMgRGVidWdOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihuYXRpdmVOb2RlKSB7XG4gICAgICAgIG5nRGV2TW9kZSAmJiBhc3NlcnREb21Ob2RlKG5hdGl2ZU5vZGUpO1xuICAgICAgICBzdXBlcihuYXRpdmVOb2RlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHVuZGVybHlpbmcgRE9NIGVsZW1lbnQgYXQgdGhlIHJvb3Qgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBnZXQgbmF0aXZlRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlTm9kZS5ub2RlVHlwZSA9PSBOb2RlLkVMRU1FTlRfTk9ERSA/IHRoaXMubmF0aXZlTm9kZSA6IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBlbGVtZW50IHRhZyBuYW1lLCBpZiBpdCBpcyBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0TENvbnRleHQodGhpcy5uYXRpdmVOb2RlKTtcbiAgICAgICAgaWYgKGNvbnRleHQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGxWaWV3ID0gY29udGV4dC5sVmlldztcbiAgICAgICAgICAgIGNvbnN0IHREYXRhID0gbFZpZXdbVFZJRVddLmRhdGE7XG4gICAgICAgICAgICBjb25zdCB0Tm9kZSA9IHREYXRhW2NvbnRleHQubm9kZUluZGV4XTtcbiAgICAgICAgICAgIHJldHVybiB0Tm9kZS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hdGl2ZU5vZGUubm9kZU5hbWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogIEdldHMgYSBtYXAgb2YgcHJvcGVydHkgbmFtZXMgdG8gcHJvcGVydHkgdmFsdWVzIGZvciBhbiBlbGVtZW50LlxuICAgICAqXG4gICAgICogIFRoaXMgbWFwIGluY2x1ZGVzOlxuICAgICAqICAtIFJlZ3VsYXIgcHJvcGVydHkgYmluZGluZ3MgKGUuZy4gYFtpZF09XCJpZFwiYClcbiAgICAgKiAgLSBIb3N0IHByb3BlcnR5IGJpbmRpbmdzIChlLmcuIGBob3N0OiB7ICdbaWRdJzogXCJpZFwiIH1gKVxuICAgICAqICAtIEludGVycG9sYXRlZCBwcm9wZXJ0eSBiaW5kaW5ncyAoZS5nLiBgaWQ9XCJ7eyB2YWx1ZSB9fVwiKVxuICAgICAqXG4gICAgICogIEl0IGRvZXMgbm90IGluY2x1ZGU6XG4gICAgICogIC0gaW5wdXQgcHJvcGVydHkgYmluZGluZ3MgKGUuZy4gYFtteUN1c3RvbUlucHV0XT1cInZhbHVlXCJgKVxuICAgICAqICAtIGF0dHJpYnV0ZSBiaW5kaW5ncyAoZS5nLiBgW2F0dHIucm9sZV09XCJtZW51XCJgKVxuICAgICAqL1xuICAgIGdldCBwcm9wZXJ0aWVzKCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gZ2V0TENvbnRleHQodGhpcy5uYXRpdmVOb2RlKTtcbiAgICAgICAgaWYgKGNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsVmlldyA9IGNvbnRleHQubFZpZXc7XG4gICAgICAgIGNvbnN0IHREYXRhID0gbFZpZXdbVFZJRVddLmRhdGE7XG4gICAgICAgIGNvbnN0IHROb2RlID0gdERhdGFbY29udGV4dC5ub2RlSW5kZXhdO1xuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge307XG4gICAgICAgIC8vIENvbGxlY3QgcHJvcGVydGllcyBmcm9tIHRoZSBET00uXG4gICAgICAgIGNvcHlEb21Qcm9wZXJ0aWVzKHRoaXMubmF0aXZlRWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgIC8vIENvbGxlY3QgcHJvcGVydGllcyBmcm9tIHRoZSBiaW5kaW5ncy4gVGhpcyBpcyBuZWVkZWQgZm9yIGFuaW1hdGlvbiByZW5kZXJlciB3aGljaCBoYXNcbiAgICAgICAgLy8gc3ludGhldGljIHByb3BlcnRpZXMgd2hpY2ggZG9uJ3QgZ2V0IHJlZmxlY3RlZCBpbnRvIHRoZSBET00uXG4gICAgICAgIGNvbGxlY3RQcm9wZXJ0eUJpbmRpbmdzKHByb3BlcnRpZXMsIHROb2RlLCBsVmlldywgdERhdGEpO1xuICAgICAgICByZXR1cm4gcHJvcGVydGllcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEEgbWFwIG9mIGF0dHJpYnV0ZSBuYW1lcyB0byBhdHRyaWJ1dGUgdmFsdWVzIGZvciBhbiBlbGVtZW50LlxuICAgICAqL1xuICAgIGdldCBhdHRyaWJ1dGVzKCkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0ge307XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGV4dCA9IGdldExDb250ZXh0KGVsZW1lbnQpO1xuICAgICAgICBpZiAoY29udGV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxWaWV3ID0gY29udGV4dC5sVmlldztcbiAgICAgICAgY29uc3QgdE5vZGVBdHRycyA9IGxWaWV3W1RWSUVXXS5kYXRhW2NvbnRleHQubm9kZUluZGV4XS5hdHRycztcbiAgICAgICAgY29uc3QgbG93ZXJjYXNlVE5vZGVBdHRycyA9IFtdO1xuICAgICAgICAvLyBGb3IgZGVidWcgbm9kZXMgd2UgdGFrZSB0aGUgZWxlbWVudCdzIGF0dHJpYnV0ZSBkaXJlY3RseSBmcm9tIHRoZSBET00gc2luY2UgaXQgYWxsb3dzIHVzXG4gICAgICAgIC8vIHRvIGFjY291bnQgZm9yIG9uZXMgdGhhdCB3ZXJlbid0IHNldCB2aWEgYmluZGluZ3MgKGUuZy4gVmlld0VuZ2luZSBrZWVwcyB0cmFjayBvZiB0aGUgb25lc1xuICAgICAgICAvLyB0aGF0IGFyZSBzZXQgdGhyb3VnaCBgUmVuZGVyZXIyYCkuIFRoZSBwcm9ibGVtIGlzIHRoYXQgdGhlIGJyb3dzZXIgd2lsbCBsb3dlcmNhc2UgYWxsIG5hbWVzLFxuICAgICAgICAvLyBob3dldmVyIHNpbmNlIHdlIGhhdmUgdGhlIGF0dHJpYnV0ZXMgYWxyZWFkeSBvbiB0aGUgVE5vZGUsIHdlIGNhbiBwcmVzZXJ2ZSB0aGUgY2FzZSBieSBnb2luZ1xuICAgICAgICAvLyB0aHJvdWdoIHRoZW0gb25jZSwgYWRkaW5nIHRoZW0gdG8gdGhlIGBhdHRyaWJ1dGVzYCBtYXAgYW5kIHB1dHRpbmcgdGhlaXIgbG93ZXItY2FzZWQgbmFtZVxuICAgICAgICAvLyBpbnRvIGFuIGFycmF5LiBBZnRlcndhcmRzIHdoZW4gd2UncmUgZ29pbmcgdGhyb3VnaCB0aGUgbmF0aXZlIERPTSBhdHRyaWJ1dGVzLCB3ZSBjYW4gY2hlY2tcbiAgICAgICAgLy8gd2hldGhlciB3ZSBoYXZlbid0IHJ1biBpbnRvIGFuIGF0dHJpYnV0ZSBhbHJlYWR5IHRocm91Z2ggdGhlIFROb2RlLlxuICAgICAgICBpZiAodE5vZGVBdHRycykge1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0Tm9kZUF0dHJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJOYW1lID0gdE5vZGVBdHRyc1tpXTtcbiAgICAgICAgICAgICAgICAvLyBTdG9wIGFzIHNvb24gYXMgd2UgaGl0IGEgbWFya2VyLiBXZSBvbmx5IGNhcmUgYWJvdXQgdGhlIHJlZ3VsYXIgYXR0cmlidXRlcy4gRXZlcnl0aGluZ1xuICAgICAgICAgICAgICAgIC8vIGVsc2Ugd2lsbCBiZSBoYW5kbGVkIGJlbG93IHdoZW4gd2UgcmVhZCB0aGUgZmluYWwgYXR0cmlidXRlcyBvZmYgdGhlIERPTS5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGF0dHJOYW1lICE9PSAnc3RyaW5nJylcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY29uc3QgYXR0clZhbHVlID0gdE5vZGVBdHRyc1tpICsgMV07XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlc1thdHRyTmFtZV0gPSBhdHRyVmFsdWU7XG4gICAgICAgICAgICAgICAgbG93ZXJjYXNlVE5vZGVBdHRycy5wdXNoKGF0dHJOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgICAgIGkgKz0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlQXR0cnMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZUF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyID0gZUF0dHJzW2ldO1xuICAgICAgICAgICAgY29uc3QgbG93ZXJjYXNlTmFtZSA9IGF0dHIubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgd2UgZG9uJ3QgYXNzaWduIHRoZSBzYW1lIGF0dHJpYnV0ZSBib3RoIGluIGl0c1xuICAgICAgICAgICAgLy8gY2FzZS1zZW5zaXRpdmUgZm9ybSBhbmQgdGhlIGxvd2VyLWNhc2VkIG9uZSBmcm9tIHRoZSBicm93c2VyLlxuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZVROb2RlQXR0cnMuaW5kZXhPZihsb3dlcmNhc2VOYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyBTYXZlIHRoZSBsb3dlcmNhc2UgbmFtZSB0byBhbGlnbiB0aGUgYmVoYXZpb3IgYmV0d2VlbiBicm93c2Vycy5cbiAgICAgICAgICAgICAgICAvLyBJRSBwcmVzZXJ2ZXMgdGhlIGNhc2UsIHdoaWxlIGFsbCBvdGhlciBicm93c2VyIGNvbnZlcnQgaXQgdG8gbG93ZXIgY2FzZS5cbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2xvd2VyY2FzZU5hbWVdID0gYXR0ci52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGlubGluZSBzdHlsZXMgb2YgdGhlIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogV2lsbCBiZSBgbnVsbGAgaWYgdGhlcmUgaXMgbm8gYHN0eWxlYCBwcm9wZXJ0eSBvbiB0aGUgdW5kZXJseWluZyBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBzZWUgW0VsZW1lbnRDU1NJbmxpbmVTdHlsZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnRDU1NJbmxpbmVTdHlsZS9zdHlsZSlcbiAgICAgKi9cbiAgICBnZXQgc3R5bGVzKCkge1xuICAgICAgICBpZiAodGhpcy5uYXRpdmVFbGVtZW50ICYmIHRoaXMubmF0aXZlRWxlbWVudC5zdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zdHlsZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgbWFwIGNvbnRhaW5pbmcgdGhlIGNsYXNzIG5hbWVzIG9uIHRoZSBlbGVtZW50IGFzIGtleXMuXG4gICAgICpcbiAgICAgKiBUaGlzIG1hcCBpcyBkZXJpdmVkIGZyb20gdGhlIGBjbGFzc05hbWVgIHByb3BlcnR5IG9mIHRoZSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIE5vdGU6IFRoZSB2YWx1ZXMgb2YgdGhpcyBvYmplY3Qgd2lsbCBhbHdheXMgYmUgYHRydWVgLiBUaGUgY2xhc3Mga2V5IHdpbGwgbm90IGFwcGVhciBpbiB0aGUgS1ZcbiAgICAgKiBvYmplY3QgaWYgaXQgZG9lcyBub3QgZXhpc3Qgb24gdGhlIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc2VlIFtFbGVtZW50LmNsYXNzTmFtZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2xhc3NOYW1lKVxuICAgICAqL1xuICAgIGdldCBjbGFzc2VzKCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMubmF0aXZlRWxlbWVudDtcbiAgICAgICAgLy8gU1ZHIGVsZW1lbnRzIHJldHVybiBhbiBgU1ZHQW5pbWF0ZWRTdHJpbmdgIGluc3RlYWQgb2YgYSBwbGFpbiBzdHJpbmcgZm9yIHRoZSBgY2xhc3NOYW1lYC5cbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWU7XG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSB0eXBlb2YgY2xhc3NOYW1lICE9PSAnc3RyaW5nJyA/IGNsYXNzTmFtZS5iYXNlVmFsLnNwbGl0KCcgJykgOiBjbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgICAgICAgY2xhc3Nlcy5mb3JFYWNoKCh2YWx1ZSkgPT4gcmVzdWx0W3ZhbHVlXSA9IHRydWUpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgYGNoaWxkTm9kZXNgIG9mIHRoZSBET00gZWxlbWVudCBhcyBhIGBEZWJ1Z05vZGVgIGFycmF5LlxuICAgICAqXG4gICAgICogQHNlZSBbTm9kZS5jaGlsZE5vZGVzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTm9kZS9jaGlsZE5vZGVzKVxuICAgICAqL1xuICAgIGdldCBjaGlsZE5vZGVzKCkge1xuICAgICAgICBjb25zdCBjaGlsZE5vZGVzID0gdGhpcy5uYXRpdmVOb2RlLmNoaWxkTm9kZXM7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNoaWxkTm9kZXNbaV07XG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGdldERlYnVnTm9kZShlbGVtZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgaW1tZWRpYXRlIGBEZWJ1Z0VsZW1lbnRgIGNoaWxkcmVuLiBXYWxrIHRoZSB0cmVlIGJ5IGRlc2NlbmRpbmcgdGhyb3VnaCBgY2hpbGRyZW5gLlxuICAgICAqL1xuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgY29uc3QgbmF0aXZlRWxlbWVudCA9IHRoaXMubmF0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKCFuYXRpdmVFbGVtZW50KVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICBjb25zdCBjaGlsZE5vZGVzID0gbmF0aXZlRWxlbWVudC5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gY2hpbGROb2Rlc1tpXTtcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goZ2V0RGVidWdOb2RlKGVsZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHRoZSBmaXJzdCBgRGVidWdFbGVtZW50YCB0aGF0IG1hdGNoZXMgdGhlIHByZWRpY2F0ZSBhdCBhbnkgZGVwdGggaW4gdGhlIHN1YnRyZWUuXG4gICAgICovXG4gICAgcXVlcnkocHJlZGljYXRlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSB0aGlzLnF1ZXJ5QWxsKHByZWRpY2F0ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHRzWzBdIHx8IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIEFsbCBgRGVidWdFbGVtZW50YCBtYXRjaGVzIGZvciB0aGUgcHJlZGljYXRlIGF0IGFueSBkZXB0aCBpbiB0aGUgc3VidHJlZS5cbiAgICAgKi9cbiAgICBxdWVyeUFsbChwcmVkaWNhdGUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2hlcyA9IFtdO1xuICAgICAgICBfcXVlcnlBbGwodGhpcywgcHJlZGljYXRlLCBtYXRjaGVzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIEFsbCBgRGVidWdOb2RlYCBtYXRjaGVzIGZvciB0aGUgcHJlZGljYXRlIGF0IGFueSBkZXB0aCBpbiB0aGUgc3VidHJlZS5cbiAgICAgKi9cbiAgICBxdWVyeUFsbE5vZGVzKHByZWRpY2F0ZSkge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gW107XG4gICAgICAgIF9xdWVyeUFsbCh0aGlzLCBwcmVkaWNhdGUsIG1hdGNoZXMsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJzIHRoZSBldmVudCBieSBpdHMgbmFtZSBpZiB0aGVyZSBpcyBhIGNvcnJlc3BvbmRpbmcgbGlzdGVuZXIgaW4gdGhlIGVsZW1lbnQnc1xuICAgICAqIGBsaXN0ZW5lcnNgIGNvbGxlY3Rpb24uXG4gICAgICpcbiAgICAgKiBJZiB0aGUgZXZlbnQgbGFja3MgYSBsaXN0ZW5lciBvciB0aGVyZSdzIHNvbWUgb3RoZXIgcHJvYmxlbSwgY29uc2lkZXJcbiAgICAgKiBjYWxsaW5nIGBuYXRpdmVFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnRPYmplY3QpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50IHRvIHRyaWdnZXJcbiAgICAgKiBAcGFyYW0gZXZlbnRPYmogVGhlIF9ldmVudCBvYmplY3RfIGV4cGVjdGVkIGJ5IHRoZSBoYW5kbGVyXG4gICAgICpcbiAgICAgKiBAc2VlIFtUZXN0aW5nIGNvbXBvbmVudHMgc2NlbmFyaW9zXShndWlkZS90ZXN0aW5nLWNvbXBvbmVudHMtc2NlbmFyaW9zI3RyaWdnZXItZXZlbnQtaGFuZGxlcilcbiAgICAgKi9cbiAgICB0cmlnZ2VyRXZlbnRIYW5kbGVyKGV2ZW50TmFtZSwgZXZlbnRPYmopIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMubmF0aXZlTm9kZTtcbiAgICAgICAgY29uc3QgaW52b2tlZExpc3RlbmVycyA9IFtdO1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lci5uYW1lID09PSBldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IGxpc3RlbmVyLmNhbGxiYWNrO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwobm9kZSwgZXZlbnRPYmopO1xuICAgICAgICAgICAgICAgIGludm9rZWRMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIHdoZXRoZXIgYGV2ZW50TGlzdGVuZXJzYCBleGlzdHMsIGJlY2F1c2UgaXQncyBzb21ldGhpbmdcbiAgICAgICAgLy8gdGhhdCBab25lLmpzIG9ubHkgYWRkcyB0byBgRXZlbnRUYXJnZXRgIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzLlxuICAgICAgICBpZiAodHlwZW9mIG5vZGUuZXZlbnRMaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBpbiBJdnkgd2Ugd3JhcCBldmVudCBsaXN0ZW5lcnMgd2l0aCBhIGNhbGwgdG8gYGV2ZW50LnByZXZlbnREZWZhdWx0YCBpbiBzb21lXG4gICAgICAgICAgICAvLyBjYXNlcy4gV2UgdXNlICdfX25nVW53cmFwX18nIGFzIGEgc3BlY2lhbCB0b2tlbiB0aGF0IGdpdmVzIHVzIGFjY2VzcyB0byB0aGUgYWN0dWFsIGV2ZW50XG4gICAgICAgICAgICAvLyBsaXN0ZW5lci5cbiAgICAgICAgICAgIG5vZGUuZXZlbnRMaXN0ZW5lcnMoZXZlbnROYW1lKS5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgICAgICAgIC8vIEluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IHdlIGNhbiBkZXRlY3QgdGhlIHNwZWNpYWwgX19uZ1Vud3JhcF9fIHRva2VuIGRlc2NyaWJlZCBhYm92ZSwgd2VcbiAgICAgICAgICAgICAgICAvLyB1c2UgYHRvU3RyaW5nYCBvbiB0aGUgbGlzdGVuZXIgYW5kIHNlZSBpZiBpdCBjb250YWlucyB0aGUgdG9rZW4uIFdlIHVzZSB0aGlzIGFwcHJvYWNoIHRvXG4gICAgICAgICAgICAgICAgLy8gZW5zdXJlIHRoYXQgaXQgc3RpbGwgd29ya2VkIHdpdGggY29tcGlsZWQgY29kZSBzaW5jZSBpdCBjYW5ub3QgcmVtb3ZlIG9yIHJlbmFtZSBzdHJpbmdcbiAgICAgICAgICAgICAgICAvLyBsaXRlcmFscy4gV2UgYWxzbyBjb25zaWRlcmVkIHVzaW5nIGEgc3BlY2lhbCBmdW5jdGlvbiBuYW1lIChpLmUuIGlmKGxpc3RlbmVyLm5hbWUgPT09XG4gICAgICAgICAgICAgICAgLy8gc3BlY2lhbCkpIGJ1dCB0aGF0IHdhcyBtb3JlIGN1bWJlcnNvbWUgYW5kIHdlIHdlcmUgYWxzbyBjb25jZXJuZWQgdGhlIGNvbXBpbGVkIGNvZGUgY291bGRcbiAgICAgICAgICAgICAgICAvLyBzdHJpcCB0aGUgbmFtZSwgdHVybmluZyB0aGUgY29uZGl0aW9uIGluIHRvIChcIlwiID09PSBcIlwiKSBhbmQgYWx3YXlzIHJldHVybmluZyB0cnVlLlxuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lci50b1N0cmluZygpLmluZGV4T2YoJ19fbmdVbndyYXBfXycpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bndyYXBwZWRMaXN0ZW5lciA9IGxpc3RlbmVyKCdfX25nVW53cmFwX18nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludm9rZWRMaXN0ZW5lcnMuaW5kZXhPZih1bndyYXBwZWRMaXN0ZW5lcikgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB1bndyYXBwZWRMaXN0ZW5lci5jYWxsKG5vZGUsIGV2ZW50T2JqKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNvcHlEb21Qcm9wZXJ0aWVzKGVsZW1lbnQsIHByb3BlcnRpZXMpIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAvLyBTa2lwIG93biBwcm9wZXJ0aWVzIChhcyB0aG9zZSBhcmUgcGF0Y2hlZClcbiAgICAgICAgbGV0IG9iaiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihlbGVtZW50KTtcbiAgICAgICAgY29uc3QgTm9kZVByb3RvdHlwZSA9IE5vZGUucHJvdG90eXBlO1xuICAgICAgICB3aGlsZSAob2JqICE9PSBudWxsICYmIG9iaiAhPT0gTm9kZVByb3RvdHlwZSkge1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmopO1xuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGRlc2NyaXB0b3JzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFrZXkuc3RhcnRzV2l0aCgnX18nKSAmJiAha2V5LnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgaW5jbHVkZSBwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggYF9fYCBhbmQgYG9uYC5cbiAgICAgICAgICAgICAgICAgICAgLy8gYF9fYCBhcmUgcGF0Y2hlZCB2YWx1ZXMgd2hpY2ggc2hvdWxkIG5vdCBiZSBpbmNsdWRlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gYG9uYCBhcmUgbGlzdGVuZXJzIHdoaWNoIGFsc28gc2hvdWxkIG5vdCBiZSBpbmNsdWRlZC5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBlbGVtZW50W2tleV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ByaW1pdGl2ZVZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmogPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgICAgIHZhbHVlID09PSBudWxsO1xufVxuZnVuY3Rpb24gX3F1ZXJ5QWxsKHBhcmVudEVsZW1lbnQsIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5KSB7XG4gICAgY29uc3QgY29udGV4dCA9IGdldExDb250ZXh0KHBhcmVudEVsZW1lbnQubmF0aXZlTm9kZSk7XG4gICAgaWYgKGNvbnRleHQgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgcGFyZW50VE5vZGUgPSBjb250ZXh0LmxWaWV3W1RWSUVXXS5kYXRhW2NvbnRleHQubm9kZUluZGV4XTtcbiAgICAgICAgX3F1ZXJ5Tm9kZUNoaWxkcmVuKHBhcmVudFROb2RlLCBjb250ZXh0LmxWaWV3LCBwcmVkaWNhdGUsIG1hdGNoZXMsIGVsZW1lbnRzT25seSwgcGFyZW50RWxlbWVudC5uYXRpdmVOb2RlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIElmIHRoZSBjb250ZXh0IGlzIG51bGwsIHRoZW4gYHBhcmVudEVsZW1lbnRgIHdhcyBlaXRoZXIgY3JlYXRlZCB3aXRoIFJlbmRlcmVyMiBvciBuYXRpdmUgRE9NXG4gICAgICAgIC8vIEFQSXMuXG4gICAgICAgIF9xdWVyeU5hdGl2ZU5vZGVEZXNjZW5kYW50cyhwYXJlbnRFbGVtZW50Lm5hdGl2ZU5vZGUsIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5KTtcbiAgICB9XG59XG4vKipcbiAqIFJlY3Vyc2l2ZWx5IG1hdGNoIHRoZSBjdXJyZW50IFROb2RlIGFnYWluc3QgdGhlIHByZWRpY2F0ZSwgYW5kIGdvZXMgb24gd2l0aCB0aGUgbmV4dCBvbmVzLlxuICpcbiAqIEBwYXJhbSB0Tm9kZSB0aGUgY3VycmVudCBUTm9kZVxuICogQHBhcmFtIGxWaWV3IHRoZSBMVmlldyBvZiB0aGlzIFROb2RlXG4gKiBAcGFyYW0gcHJlZGljYXRlIHRoZSBwcmVkaWNhdGUgdG8gbWF0Y2hcbiAqIEBwYXJhbSBtYXRjaGVzIHRoZSBsaXN0IG9mIHBvc2l0aXZlIG1hdGNoZXNcbiAqIEBwYXJhbSBlbGVtZW50c09ubHkgd2hldGhlciBvbmx5IGVsZW1lbnRzIHNob3VsZCBiZSBzZWFyY2hlZFxuICogQHBhcmFtIHJvb3ROYXRpdmVOb2RlIHRoZSByb290IG5hdGl2ZSBub2RlIG9uIHdoaWNoIHByZWRpY2F0ZSBzaG91bGQgbm90IGJlIG1hdGNoZWRcbiAqL1xuZnVuY3Rpb24gX3F1ZXJ5Tm9kZUNoaWxkcmVuKHROb2RlLCBsVmlldywgcHJlZGljYXRlLCBtYXRjaGVzLCBlbGVtZW50c09ubHksIHJvb3ROYXRpdmVOb2RlKSB7XG4gICAgbmdEZXZNb2RlICYmIGFzc2VydFROb2RlRm9yTFZpZXcodE5vZGUsIGxWaWV3KTtcbiAgICBjb25zdCBuYXRpdmVOb2RlID0gZ2V0TmF0aXZlQnlUTm9kZU9yTnVsbCh0Tm9kZSwgbFZpZXcpO1xuICAgIC8vIEZvciBlYWNoIHR5cGUgb2YgVE5vZGUsIHNwZWNpZmljIGxvZ2ljIGlzIGV4ZWN1dGVkLlxuICAgIGlmICh0Tm9kZS50eXBlICYgKDMgLyogQW55Uk5vZGUgKi8gfCA4IC8qIEVsZW1lbnRDb250YWluZXIgKi8pKSB7XG4gICAgICAgIC8vIENhc2UgMTogdGhlIFROb2RlIGlzIGFuIGVsZW1lbnRcbiAgICAgICAgLy8gVGhlIG5hdGl2ZSBub2RlIGhhcyB0byBiZSBjaGVja2VkLlxuICAgICAgICBfYWRkUXVlcnlNYXRjaChuYXRpdmVOb2RlLCBwcmVkaWNhdGUsIG1hdGNoZXMsIGVsZW1lbnRzT25seSwgcm9vdE5hdGl2ZU5vZGUpO1xuICAgICAgICBpZiAoaXNDb21wb25lbnRIb3N0KHROb2RlKSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGVsZW1lbnQgaXMgdGhlIGhvc3Qgb2YgYSBjb21wb25lbnQsIHRoZW4gYWxsIG5vZGVzIGluIGl0cyB2aWV3IGhhdmUgdG8gYmUgcHJvY2Vzc2VkLlxuICAgICAgICAgICAgLy8gTm90ZTogdGhlIGNvbXBvbmVudCdzIGNvbnRlbnQgKHROb2RlLmNoaWxkKSB3aWxsIGJlIHByb2Nlc3NlZCBmcm9tIHRoZSBpbnNlcnRpb24gcG9pbnRzLlxuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50VmlldyA9IGdldENvbXBvbmVudExWaWV3QnlJbmRleCh0Tm9kZS5pbmRleCwgbFZpZXcpO1xuICAgICAgICAgICAgaWYgKGNvbXBvbmVudFZpZXcgJiYgY29tcG9uZW50Vmlld1tUVklFV10uZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIF9xdWVyeU5vZGVDaGlsZHJlbihjb21wb25lbnRWaWV3W1RWSUVXXS5maXJzdENoaWxkLCBjb21wb25lbnRWaWV3LCBwcmVkaWNhdGUsIG1hdGNoZXMsIGVsZW1lbnRzT25seSwgcm9vdE5hdGl2ZU5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHROb2RlLmNoaWxkKSB7XG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBpdHMgY2hpbGRyZW4gaGF2ZSB0byBiZSBwcm9jZXNzZWQuXG4gICAgICAgICAgICAgICAgX3F1ZXJ5Tm9kZUNoaWxkcmVuKHROb2RlLmNoaWxkLCBsVmlldywgcHJlZGljYXRlLCBtYXRjaGVzLCBlbGVtZW50c09ubHksIHJvb3ROYXRpdmVOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFdlIGFsc28gaGF2ZSB0byBxdWVyeSB0aGUgRE9NIGRpcmVjdGx5IGluIG9yZGVyIHRvIGNhdGNoIGVsZW1lbnRzIGluc2VydGVkIHRocm91Z2hcbiAgICAgICAgICAgIC8vIFJlbmRlcmVyMi4gTm90ZSB0aGF0IHRoaXMgaXMgX19ub3RfXyBvcHRpbWFsLCBiZWNhdXNlIHdlJ3JlIHdhbGtpbmcgc2ltaWxhciB0cmVlcyBtdWx0aXBsZVxuICAgICAgICAgICAgLy8gdGltZXMuIFZpZXdFbmdpbmUgY291bGQgZG8gaXQgbW9yZSBlZmZpY2llbnRseSwgYmVjYXVzZSBhbGwgdGhlIGluc2VydGlvbnMgZ28gdGhyb3VnaFxuICAgICAgICAgICAgLy8gUmVuZGVyZXIyLCBob3dldmVyIHRoYXQncyBub3QgdGhlIGNhc2UgaW4gSXZ5LiBUaGlzIGFwcHJvYWNoIGlzIGJlaW5nIHVzZWQgYmVjYXVzZTpcbiAgICAgICAgICAgIC8vIDEuIE1hdGNoaW5nIHRoZSBWaWV3RW5naW5lIGJlaGF2aW9yIHdvdWxkIG1lYW4gcG90ZW50aWFsbHkgaW50cm9kdWNpbmcgYSBkZXBlZGVuY3lcbiAgICAgICAgICAgIC8vICAgIGZyb20gYFJlbmRlcmVyMmAgdG8gSXZ5IHdoaWNoIGNvdWxkIGJyaW5nIEl2eSBjb2RlIGludG8gVmlld0VuZ2luZS5cbiAgICAgICAgICAgIC8vIDIuIFdlIHdvdWxkIGhhdmUgdG8gbWFrZSBgUmVuZGVyZXIzYCBcImtub3dcIiBhYm91dCBkZWJ1ZyBub2Rlcy5cbiAgICAgICAgICAgIC8vIDMuIEl0IGFsbG93cyB1cyB0byBjYXB0dXJlIG5vZGVzIHRoYXQgd2VyZSBpbnNlcnRlZCBkaXJlY3RseSB2aWEgdGhlIERPTS5cbiAgICAgICAgICAgIG5hdGl2ZU5vZGUgJiYgX3F1ZXJ5TmF0aXZlTm9kZURlc2NlbmRhbnRzKG5hdGl2ZU5vZGUsIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbiBhbGwgY2FzZXMsIGlmIGEgZHluYW1pYyBjb250YWluZXIgZXhpc3RzIGZvciB0aGlzIG5vZGUsIGVhY2ggdmlldyBpbnNpZGUgaXQgaGFzIHRvIGJlXG4gICAgICAgIC8vIHByb2Nlc3NlZC5cbiAgICAgICAgY29uc3Qgbm9kZU9yQ29udGFpbmVyID0gbFZpZXdbdE5vZGUuaW5kZXhdO1xuICAgICAgICBpZiAoaXNMQ29udGFpbmVyKG5vZGVPckNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgIF9xdWVyeU5vZGVDaGlsZHJlbkluQ29udGFpbmVyKG5vZGVPckNvbnRhaW5lciwgcHJlZGljYXRlLCBtYXRjaGVzLCBlbGVtZW50c09ubHksIHJvb3ROYXRpdmVOb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh0Tm9kZS50eXBlICYgNCAvKiBDb250YWluZXIgKi8pIHtcbiAgICAgICAgLy8gQ2FzZSAyOiB0aGUgVE5vZGUgaXMgYSBjb250YWluZXJcbiAgICAgICAgLy8gVGhlIG5hdGl2ZSBub2RlIGhhcyB0byBiZSBjaGVja2VkLlxuICAgICAgICBjb25zdCBsQ29udGFpbmVyID0gbFZpZXdbdE5vZGUuaW5kZXhdO1xuICAgICAgICBfYWRkUXVlcnlNYXRjaChsQ29udGFpbmVyW05BVElWRV0sIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5LCByb290TmF0aXZlTm9kZSk7XG4gICAgICAgIC8vIEVhY2ggdmlldyBpbnNpZGUgdGhlIGNvbnRhaW5lciBoYXMgdG8gYmUgcHJvY2Vzc2VkLlxuICAgICAgICBfcXVlcnlOb2RlQ2hpbGRyZW5JbkNvbnRhaW5lcihsQ29udGFpbmVyLCBwcmVkaWNhdGUsIG1hdGNoZXMsIGVsZW1lbnRzT25seSwgcm9vdE5hdGl2ZU5vZGUpO1xuICAgIH1cbiAgICBlbHNlIGlmICh0Tm9kZS50eXBlICYgMTYgLyogUHJvamVjdGlvbiAqLykge1xuICAgICAgICAvLyBDYXNlIDM6IHRoZSBUTm9kZSBpcyBhIHByb2plY3Rpb24gaW5zZXJ0aW9uIHBvaW50IChpLmUuIGEgPG5nLWNvbnRlbnQ+KS5cbiAgICAgICAgLy8gVGhlIG5vZGVzIHByb2plY3RlZCBhdCB0aGlzIGxvY2F0aW9uIGFsbCBuZWVkIHRvIGJlIHByb2Nlc3NlZC5cbiAgICAgICAgY29uc3QgY29tcG9uZW50VmlldyA9IGxWaWV3W0RFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXXTtcbiAgICAgICAgY29uc3QgY29tcG9uZW50SG9zdCA9IGNvbXBvbmVudFZpZXdbVF9IT1NUXTtcbiAgICAgICAgY29uc3QgaGVhZCA9IGNvbXBvbmVudEhvc3QucHJvamVjdGlvblt0Tm9kZS5wcm9qZWN0aW9uXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZCkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IG5hdGl2ZU5vZGUgb2YgaGVhZCkge1xuICAgICAgICAgICAgICAgIF9hZGRRdWVyeU1hdGNoKG5hdGl2ZU5vZGUsIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5LCByb290TmF0aXZlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGVhZCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dExWaWV3ID0gY29tcG9uZW50Vmlld1tQQVJFTlRdO1xuICAgICAgICAgICAgY29uc3QgbmV4dFROb2RlID0gbmV4dExWaWV3W1RWSUVXXS5kYXRhW2hlYWQuaW5kZXhdO1xuICAgICAgICAgICAgX3F1ZXJ5Tm9kZUNoaWxkcmVuKG5leHRUTm9kZSwgbmV4dExWaWV3LCBwcmVkaWNhdGUsIG1hdGNoZXMsIGVsZW1lbnRzT25seSwgcm9vdE5hdGl2ZU5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHROb2RlLmNoaWxkKSB7XG4gICAgICAgIC8vIENhc2UgNDogdGhlIFROb2RlIGlzIGEgdmlldy5cbiAgICAgICAgX3F1ZXJ5Tm9kZUNoaWxkcmVuKHROb2RlLmNoaWxkLCBsVmlldywgcHJlZGljYXRlLCBtYXRjaGVzLCBlbGVtZW50c09ubHksIHJvb3ROYXRpdmVOb2RlKTtcbiAgICB9XG4gICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBnbyB0byB0aGUgbmV4dCBzaWJsaW5nIG9mIHRoZSByb290IG5vZGUuXG4gICAgaWYgKHJvb3ROYXRpdmVOb2RlICE9PSBuYXRpdmVOb2RlKSB7XG4gICAgICAgIC8vIFRvIGRldGVybWluZSB0aGUgbmV4dCBub2RlIHRvIGJlIHByb2Nlc3NlZCwgd2UgbmVlZCB0byB1c2UgdGhlIG5leHQgb3IgdGhlIHByb2plY3Rpb25OZXh0XG4gICAgICAgIC8vIGxpbmssIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBjdXJyZW50IG5vZGUgaGFzIGJlZW4gcHJvamVjdGVkLlxuICAgICAgICBjb25zdCBuZXh0VE5vZGUgPSAodE5vZGUuZmxhZ3MgJiA0IC8qIGlzUHJvamVjdGVkICovKSA/IHROb2RlLnByb2plY3Rpb25OZXh0IDogdE5vZGUubmV4dDtcbiAgICAgICAgaWYgKG5leHRUTm9kZSkge1xuICAgICAgICAgICAgX3F1ZXJ5Tm9kZUNoaWxkcmVuKG5leHRUTm9kZSwgbFZpZXcsIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5LCByb290TmF0aXZlTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIFByb2Nlc3MgYWxsIFROb2RlcyBpbiBhIGdpdmVuIGNvbnRhaW5lci5cbiAqXG4gKiBAcGFyYW0gbENvbnRhaW5lciB0aGUgY29udGFpbmVyIHRvIGJlIHByb2Nlc3NlZFxuICogQHBhcmFtIHByZWRpY2F0ZSB0aGUgcHJlZGljYXRlIHRvIG1hdGNoXG4gKiBAcGFyYW0gbWF0Y2hlcyB0aGUgbGlzdCBvZiBwb3NpdGl2ZSBtYXRjaGVzXG4gKiBAcGFyYW0gZWxlbWVudHNPbmx5IHdoZXRoZXIgb25seSBlbGVtZW50cyBzaG91bGQgYmUgc2VhcmNoZWRcbiAqIEBwYXJhbSByb290TmF0aXZlTm9kZSB0aGUgcm9vdCBuYXRpdmUgbm9kZSBvbiB3aGljaCBwcmVkaWNhdGUgc2hvdWxkIG5vdCBiZSBtYXRjaGVkXG4gKi9cbmZ1bmN0aW9uIF9xdWVyeU5vZGVDaGlsZHJlbkluQ29udGFpbmVyKGxDb250YWluZXIsIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5LCByb290TmF0aXZlTm9kZSkge1xuICAgIGZvciAobGV0IGkgPSBDT05UQUlORVJfSEVBREVSX09GRlNFVDsgaSA8IGxDb250YWluZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY2hpbGRWaWV3ID0gbENvbnRhaW5lcltpXTtcbiAgICAgICAgY29uc3QgZmlyc3RDaGlsZCA9IGNoaWxkVmlld1tUVklFV10uZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKGZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgIF9xdWVyeU5vZGVDaGlsZHJlbihmaXJzdENoaWxkLCBjaGlsZFZpZXcsIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5LCByb290TmF0aXZlTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIE1hdGNoIHRoZSBjdXJyZW50IG5hdGl2ZSBub2RlIGFnYWluc3QgdGhlIHByZWRpY2F0ZS5cbiAqXG4gKiBAcGFyYW0gbmF0aXZlTm9kZSB0aGUgY3VycmVudCBuYXRpdmUgbm9kZVxuICogQHBhcmFtIHByZWRpY2F0ZSB0aGUgcHJlZGljYXRlIHRvIG1hdGNoXG4gKiBAcGFyYW0gbWF0Y2hlcyB0aGUgbGlzdCBvZiBwb3NpdGl2ZSBtYXRjaGVzXG4gKiBAcGFyYW0gZWxlbWVudHNPbmx5IHdoZXRoZXIgb25seSBlbGVtZW50cyBzaG91bGQgYmUgc2VhcmNoZWRcbiAqIEBwYXJhbSByb290TmF0aXZlTm9kZSB0aGUgcm9vdCBuYXRpdmUgbm9kZSBvbiB3aGljaCBwcmVkaWNhdGUgc2hvdWxkIG5vdCBiZSBtYXRjaGVkXG4gKi9cbmZ1bmN0aW9uIF9hZGRRdWVyeU1hdGNoKG5hdGl2ZU5vZGUsIHByZWRpY2F0ZSwgbWF0Y2hlcywgZWxlbWVudHNPbmx5LCByb290TmF0aXZlTm9kZSkge1xuICAgIGlmIChyb290TmF0aXZlTm9kZSAhPT0gbmF0aXZlTm9kZSkge1xuICAgICAgICBjb25zdCBkZWJ1Z05vZGUgPSBnZXREZWJ1Z05vZGUobmF0aXZlTm9kZSk7XG4gICAgICAgIGlmICghZGVidWdOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHlwZSBvZiB0aGUgXCJwcmVkaWNhdGUgYW5kIFwibWF0Y2hlc1wiIGFycmF5IGFyZSBzZXQgYmFzZWQgb24gdGhlIHZhbHVlIG9mXG4gICAgICAgIC8vIHRoZSBcImVsZW1lbnRzT25seVwiIHBhcmFtZXRlci4gVHlwZVNjcmlwdCBpcyBub3QgYWJsZSB0byBwcm9wZXJseSBpbmZlciB0aGVzZVxuICAgICAgICAvLyB0eXBlcyB3aXRoIGdlbmVyaWNzLCBzbyB3ZSBtYW51YWxseSBjYXN0IHRoZSBwYXJhbWV0ZXJzIGFjY29yZGluZ2x5LlxuICAgICAgICBpZiAoZWxlbWVudHNPbmx5ICYmIChkZWJ1Z05vZGUgaW5zdGFuY2VvZiBEZWJ1Z0VsZW1lbnQpICYmIHByZWRpY2F0ZShkZWJ1Z05vZGUpICYmXG4gICAgICAgICAgICBtYXRjaGVzLmluZGV4T2YoZGVidWdOb2RlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIG1hdGNoZXMucHVzaChkZWJ1Z05vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFlbGVtZW50c09ubHkgJiYgcHJlZGljYXRlKGRlYnVnTm9kZSkgJiZcbiAgICAgICAgICAgIG1hdGNoZXMuaW5kZXhPZihkZWJ1Z05vZGUpID09PSAtMSkge1xuICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGRlYnVnTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIE1hdGNoIGFsbCB0aGUgZGVzY2VuZGFudHMgb2YgYSBET00gbm9kZSBhZ2FpbnN0IGEgcHJlZGljYXRlLlxuICpcbiAqIEBwYXJhbSBuYXRpdmVOb2RlIHRoZSBjdXJyZW50IG5hdGl2ZSBub2RlXG4gKiBAcGFyYW0gcHJlZGljYXRlIHRoZSBwcmVkaWNhdGUgdG8gbWF0Y2hcbiAqIEBwYXJhbSBtYXRjaGVzIHRoZSBsaXN0IHdoZXJlIG1hdGNoZXMgYXJlIHN0b3JlZFxuICogQHBhcmFtIGVsZW1lbnRzT25seSB3aGV0aGVyIG9ubHkgZWxlbWVudHMgc2hvdWxkIGJlIHNlYXJjaGVkXG4gKi9cbmZ1bmN0aW9uIF9xdWVyeU5hdGl2ZU5vZGVEZXNjZW5kYW50cyhwYXJlbnROb2RlLCBwcmVkaWNhdGUsIG1hdGNoZXMsIGVsZW1lbnRzT25seSkge1xuICAgIGNvbnN0IG5vZGVzID0gcGFyZW50Tm9kZS5jaGlsZE5vZGVzO1xuICAgIGNvbnN0IGxlbmd0aCA9IG5vZGVzLmxlbmd0aDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgY29uc3QgZGVidWdOb2RlID0gZ2V0RGVidWdOb2RlKG5vZGUpO1xuICAgICAgICBpZiAoZGVidWdOb2RlKSB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudHNPbmx5ICYmIChkZWJ1Z05vZGUgaW5zdGFuY2VvZiBEZWJ1Z0VsZW1lbnQpICYmIHByZWRpY2F0ZShkZWJ1Z05vZGUpICYmXG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5pbmRleE9mKGRlYnVnTm9kZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGRlYnVnTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghZWxlbWVudHNPbmx5ICYmIHByZWRpY2F0ZShkZWJ1Z05vZGUpICYmXG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5pbmRleE9mKGRlYnVnTm9kZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGRlYnVnTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfcXVlcnlOYXRpdmVOb2RlRGVzY2VuZGFudHMobm9kZSwgcHJlZGljYXRlLCBtYXRjaGVzLCBlbGVtZW50c09ubHkpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBwcm9wZXJ0eSBiaW5kaW5ncyBmb3IgYSBnaXZlbiBub2RlIGFuZCBnZW5lcmF0ZXNcbiAqIGEgbWFwIG9mIHByb3BlcnR5IG5hbWVzIHRvIHZhbHVlcy4gVGhpcyBtYXAgb25seSBjb250YWlucyBwcm9wZXJ0eSBiaW5kaW5nc1xuICogZGVmaW5lZCBpbiB0ZW1wbGF0ZXMsIG5vdCBpbiBob3N0IGJpbmRpbmdzLlxuICovXG5mdW5jdGlvbiBjb2xsZWN0UHJvcGVydHlCaW5kaW5ncyhwcm9wZXJ0aWVzLCB0Tm9kZSwgbFZpZXcsIHREYXRhKSB7XG4gICAgbGV0IGJpbmRpbmdJbmRleGVzID0gdE5vZGUucHJvcGVydHlCaW5kaW5ncztcbiAgICBpZiAoYmluZGluZ0luZGV4ZXMgIT09IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiaW5kaW5nSW5kZXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYmluZGluZ0luZGV4ID0gYmluZGluZ0luZGV4ZXNbaV07XG4gICAgICAgICAgICBjb25zdCBwcm9wTWV0YWRhdGEgPSB0RGF0YVtiaW5kaW5nSW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgbWV0YWRhdGFQYXJ0cyA9IHByb3BNZXRhZGF0YS5zcGxpdChJTlRFUlBPTEFUSU9OX0RFTElNSVRFUik7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWUgPSBtZXRhZGF0YVBhcnRzWzBdO1xuICAgICAgICAgICAgaWYgKG1ldGFkYXRhUGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IG1ldGFkYXRhUGFydHNbMV07XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDE7IGogPCBtZXRhZGF0YVBhcnRzLmxlbmd0aCAtIDE7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSByZW5kZXJTdHJpbmdpZnkobFZpZXdbYmluZGluZ0luZGV4ICsgaiAtIDFdKSArIG1ldGFkYXRhUGFydHNbaiArIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXNbcHJvcGVydHlOYW1lXSA9IGxWaWV3W2JpbmRpbmdJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyBOZWVkIHRvIGtlZXAgdGhlIG5vZGVzIGluIGEgZ2xvYmFsIE1hcCBzbyB0aGF0IG11bHRpcGxlIGFuZ3VsYXIgYXBwcyBhcmUgc3VwcG9ydGVkLlxuY29uc3QgX25hdGl2ZU5vZGVUb0RlYnVnTm9kZSA9IG5ldyBNYXAoKTtcbmNvbnN0IE5HX0RFQlVHX1BST1BFUlRZID0gJ19fbmdfZGVidWdfXyc7XG4vKipcbiAqIEBwdWJsaWNBcGlcbiAqL1xuZnVuY3Rpb24gZ2V0RGVidWdOb2RlKG5hdGl2ZU5vZGUpIHtcbiAgICBpZiAobmF0aXZlTm9kZSBpbnN0YW5jZW9mIE5vZGUpIHtcbiAgICAgICAgaWYgKCEobmF0aXZlTm9kZS5oYXNPd25Qcm9wZXJ0eShOR19ERUJVR19QUk9QRVJUWSkpKSB7XG4gICAgICAgICAgICBuYXRpdmVOb2RlW05HX0RFQlVHX1BST1BFUlRZXSA9IG5hdGl2ZU5vZGUubm9kZVR5cGUgPT0gTm9kZS5FTEVNRU5UX05PREUgP1xuICAgICAgICAgICAgICAgIG5ldyBEZWJ1Z0VsZW1lbnQobmF0aXZlTm9kZSkgOlxuICAgICAgICAgICAgICAgIG5ldyBEZWJ1Z05vZGUobmF0aXZlTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5hdGl2ZU5vZGVbTkdfREVCVUdfUFJPUEVSVFldO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbi8vIFRPRE86IGNsZWFudXAgYWxsIHJlZmVyZW5jZXMgdG8gdGhpcyBmdW5jdGlvbiBhbmQgcmVtb3ZlIGl0LlxuZnVuY3Rpb24gZ2V0RGVidWdOb2RlUjIoX25hdGl2ZU5vZGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldEFsbERlYnVnTm9kZXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oX25hdGl2ZU5vZGVUb0RlYnVnTm9kZS52YWx1ZXMoKSk7XG59XG5mdW5jdGlvbiBpbmRleERlYnVnTm9kZShub2RlKSB7XG4gICAgX25hdGl2ZU5vZGVUb0RlYnVnTm9kZS5zZXQobm9kZS5uYXRpdmVOb2RlLCBub2RlKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZURlYnVnTm9kZUZyb21JbmRleChub2RlKSB7XG4gICAgX25hdGl2ZU5vZGVUb0RlYnVnTm9kZS5kZWxldGUobm9kZS5uYXRpdmVOb2RlKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5jbGFzcyBEZWZhdWx0SXRlcmFibGVEaWZmZXJGYWN0b3J5IHtcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICAgIHN1cHBvcnRzKG9iaikge1xuICAgICAgICByZXR1cm4gaXNMaXN0TGlrZUl0ZXJhYmxlKG9iaik7XG4gICAgfVxuICAgIGNyZWF0ZSh0cmFja0J5Rm4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZWZhdWx0SXRlcmFibGVEaWZmZXIodHJhY2tCeUZuKTtcbiAgICB9XG59XG5jb25zdCB0cmFja0J5SWRlbnRpdHkgPSAoaW5kZXgsIGl0ZW0pID0+IGl0ZW07XG4vKipcbiAqIEBkZXByZWNhdGVkIHY0LjAuMCAtIFNob3VsZCBub3QgYmUgcGFydCBvZiBwdWJsaWMgQVBJLlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBEZWZhdWx0SXRlcmFibGVEaWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKHRyYWNrQnlGbikge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSB1c2VkIHJlY29yZHMgYXQgYW55IHBvaW50IGluIHRpbWUgKGR1cmluZyAmIGFjcm9zcyBgX2NoZWNrKClgIGNhbGxzKVxuICAgICAgICB0aGlzLl9saW5rZWRSZWNvcmRzID0gbnVsbDtcbiAgICAgICAgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIHJlbW92ZWQgcmVjb3JkcyBhdCBhbnkgcG9pbnQgaW4gdGltZSBkdXJpbmcgYF9jaGVjaygpYCBjYWxscy5cbiAgICAgICAgdGhpcy5fdW5saW5rZWRSZWNvcmRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNJdEhlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pdEhlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pdFRhaWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9hZGRpdGlvbnNIZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX21vdmVzSGVhZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX21vdmVzVGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlbW92YWxzSGVhZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlbW92YWxzVGFpbCA9IG51bGw7XG4gICAgICAgIC8vIEtlZXBzIHRyYWNrIG9mIHJlY29yZHMgd2hlcmUgY3VzdG9tIHRyYWNrIGJ5IGlzIHRoZSBzYW1lLCBidXQgaXRlbSBpZGVudGl0eSBoYXMgY2hhbmdlZFxuICAgICAgICB0aGlzLl9pZGVudGl0eUNoYW5nZXNIZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy5faWRlbnRpdHlDaGFuZ2VzVGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RyYWNrQnlGbiA9IHRyYWNrQnlGbiB8fCB0cmFja0J5SWRlbnRpdHk7XG4gICAgfVxuICAgIGZvckVhY2hJdGVtKGZuKSB7XG4gICAgICAgIGxldCByZWNvcmQ7XG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5faXRIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dCkge1xuICAgICAgICAgICAgZm4ocmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3JFYWNoT3BlcmF0aW9uKGZuKSB7XG4gICAgICAgIGxldCBuZXh0SXQgPSB0aGlzLl9pdEhlYWQ7XG4gICAgICAgIGxldCBuZXh0UmVtb3ZlID0gdGhpcy5fcmVtb3ZhbHNIZWFkO1xuICAgICAgICBsZXQgYWRkUmVtb3ZlT2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IG1vdmVPZmZzZXRzID0gbnVsbDtcbiAgICAgICAgd2hpbGUgKG5leHRJdCB8fCBuZXh0UmVtb3ZlKSB7XG4gICAgICAgICAgICAvLyBGaWd1cmUgb3V0IHdoaWNoIGlzIHRoZSBuZXh0IHJlY29yZCB0byBwcm9jZXNzXG4gICAgICAgICAgICAvLyBPcmRlcjogcmVtb3ZlLCBhZGQsIG1vdmVcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZCA9ICFuZXh0UmVtb3ZlIHx8XG4gICAgICAgICAgICAgICAgbmV4dEl0ICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHRJdC5jdXJyZW50SW5kZXggPFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UHJldmlvdXNJbmRleChuZXh0UmVtb3ZlLCBhZGRSZW1vdmVPZmZzZXQsIG1vdmVPZmZzZXRzKSA/XG4gICAgICAgICAgICAgICAgbmV4dEl0IDpcbiAgICAgICAgICAgICAgICBuZXh0UmVtb3ZlO1xuICAgICAgICAgICAgY29uc3QgYWRqUHJldmlvdXNJbmRleCA9IGdldFByZXZpb3VzSW5kZXgocmVjb3JkLCBhZGRSZW1vdmVPZmZzZXQsIG1vdmVPZmZzZXRzKTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHJlY29yZC5jdXJyZW50SW5kZXg7XG4gICAgICAgICAgICAvLyBjb25zdW1lIHRoZSBpdGVtLCBhbmQgYWRqdXN0IHRoZSBhZGRSZW1vdmVPZmZzZXQgYW5kIHVwZGF0ZSBtb3ZlRGlzdGFuY2UgaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAocmVjb3JkID09PSBuZXh0UmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgYWRkUmVtb3ZlT2Zmc2V0LS07XG4gICAgICAgICAgICAgICAgbmV4dFJlbW92ZSA9IG5leHRSZW1vdmUuX25leHRSZW1vdmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV4dEl0ID0gbmV4dEl0Ll9uZXh0O1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQucHJldmlvdXNJbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJlbW92ZU9mZnNldCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSU5WQVJJQU5UOiAgY3VycmVudEluZGV4IDwgcHJldmlvdXNJbmRleFxuICAgICAgICAgICAgICAgICAgICBpZiAoIW1vdmVPZmZzZXRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZU9mZnNldHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYWxNb3ZlUHJldmlvdXNJbmRleCA9IGFkalByZXZpb3VzSW5kZXggLSBhZGRSZW1vdmVPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsQ3VycmVudEluZGV4ID0gY3VycmVudEluZGV4IC0gYWRkUmVtb3ZlT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxNb3ZlUHJldmlvdXNJbmRleCAhPSBsb2NhbEN1cnJlbnRJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb2NhbE1vdmVQcmV2aW91c0luZGV4OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBpIDwgbW92ZU9mZnNldHMubGVuZ3RoID8gbW92ZU9mZnNldHNbaV0gOiAobW92ZU9mZnNldHNbaV0gPSAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IG9mZnNldCArIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2FsQ3VycmVudEluZGV4IDw9IGluZGV4ICYmIGluZGV4IDwgbG9jYWxNb3ZlUHJldmlvdXNJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3ZlT2Zmc2V0c1tpXSA9IG9mZnNldCArIDE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNJbmRleCA9IHJlY29yZC5wcmV2aW91c0luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgbW92ZU9mZnNldHNbcHJldmlvdXNJbmRleF0gPSBsb2NhbEN1cnJlbnRJbmRleCAtIGxvY2FsTW92ZVByZXZpb3VzSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWRqUHJldmlvdXNJbmRleCAhPT0gY3VycmVudEluZGV4KSB7XG4gICAgICAgICAgICAgICAgZm4ocmVjb3JkLCBhZGpQcmV2aW91c0luZGV4LCBjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvckVhY2hQcmV2aW91c0l0ZW0oZm4pIHtcbiAgICAgICAgbGV0IHJlY29yZDtcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9wcmV2aW91c0l0SGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRQcmV2aW91cykge1xuICAgICAgICAgICAgZm4ocmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3JFYWNoQWRkZWRJdGVtKGZuKSB7XG4gICAgICAgIGxldCByZWNvcmQ7XG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fYWRkaXRpb25zSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRBZGRlZCkge1xuICAgICAgICAgICAgZm4ocmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3JFYWNoTW92ZWRJdGVtKGZuKSB7XG4gICAgICAgIGxldCByZWNvcmQ7XG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fbW92ZXNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dE1vdmVkKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvckVhY2hSZW1vdmVkSXRlbShmbikge1xuICAgICAgICBsZXQgcmVjb3JkO1xuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3JlbW92YWxzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRSZW1vdmVkKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvckVhY2hJZGVudGl0eUNoYW5nZShmbikge1xuICAgICAgICBsZXQgcmVjb3JkO1xuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2lkZW50aXR5Q2hhbmdlc0hlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0SWRlbnRpdHlDaGFuZ2UpIHtcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGlmZihjb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpXG4gICAgICAgICAgICBjb2xsZWN0aW9uID0gW107XG4gICAgICAgIGlmICghaXNMaXN0TGlrZUl0ZXJhYmxlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSA/XG4gICAgICAgICAgICAgICAgYEVycm9yIHRyeWluZyB0byBkaWZmICcke3N0cmluZ2lmeShjb2xsZWN0aW9uKX0nLiBPbmx5IGFycmF5cyBhbmQgaXRlcmFibGVzIGFyZSBhbGxvd2VkYCA6XG4gICAgICAgICAgICAgICAgJyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKDkwMCAvKiBJTlZBTElEX0RJRkZFUl9JTlBVVCAqLywgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGVjayhjb2xsZWN0aW9uKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkRlc3Ryb3koKSB7IH1cbiAgICBjaGVjayhjb2xsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICAgIGxldCByZWNvcmQgPSB0aGlzLl9pdEhlYWQ7XG4gICAgICAgIGxldCBtYXlCZURpcnR5ID0gZmFsc2U7XG4gICAgICAgIGxldCBpbmRleDtcbiAgICAgICAgbGV0IGl0ZW07XG4gICAgICAgIGxldCBpdGVtVHJhY2tCeTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gY29sbGVjdGlvbltpbmRleF07XG4gICAgICAgICAgICAgICAgaXRlbVRyYWNrQnkgPSB0aGlzLl90cmFja0J5Rm4oaW5kZXgsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQgPT09IG51bGwgfHwgIU9iamVjdC5pcyhyZWNvcmQudHJhY2tCeUlkLCBpdGVtVHJhY2tCeSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjb3JkID0gdGhpcy5fbWlzbWF0Y2gocmVjb3JkLCBpdGVtLCBpdGVtVHJhY2tCeSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBtYXlCZURpcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXlCZURpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPKG1pc2tvKTogY2FuIHdlIGxpbWl0IHRoaXMgdG8gZHVwbGljYXRlcyBvbmx5P1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3JkID0gdGhpcy5fdmVyaWZ5UmVpbnNlcnRpb24ocmVjb3JkLCBpdGVtLCBpdGVtVHJhY2tCeSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmlzKHJlY29yZC5pdGVtLCBpdGVtKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZElkZW50aXR5Q2hhbmdlKHJlY29yZCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlY29yZCA9IHJlY29yZC5fbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgIGl0ZXJhdGVMaXN0TGlrZShjb2xsZWN0aW9uLCAoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW1UcmFja0J5ID0gdGhpcy5fdHJhY2tCeUZuKGluZGV4LCBpdGVtKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkID09PSBudWxsIHx8ICFPYmplY3QuaXMocmVjb3JkLnRyYWNrQnlJZCwgaXRlbVRyYWNrQnkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IHRoaXMuX21pc21hdGNoKHJlY29yZCwgaXRlbSwgaXRlbVRyYWNrQnksIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgbWF5QmVEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF5QmVEaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyhtaXNrbyk6IGNhbiB3ZSBsaW1pdCB0aGlzIHRvIGR1cGxpY2F0ZXMgb25seT9cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZCA9IHRoaXMuX3ZlcmlmeVJlaW5zZXJ0aW9uKHJlY29yZCwgaXRlbSwgaXRlbVRyYWNrQnksIGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5pcyhyZWNvcmQuaXRlbSwgaXRlbSkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRJZGVudGl0eUNoYW5nZShyZWNvcmQsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZWNvcmQgPSByZWNvcmQuX25leHQ7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cnVuY2F0ZShyZWNvcmQpO1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0RpcnR5O1xuICAgIH1cbiAgICAvKiBDb2xsZWN0aW9uQ2hhbmdlcyBpcyBjb25zaWRlcmVkIGRpcnR5IGlmIGl0IGhhcyBhbnkgYWRkaXRpb25zLCBtb3ZlcywgcmVtb3ZhbHMsIG9yIGlkZW50aXR5XG4gICAgICogY2hhbmdlcy5cbiAgICAgKi9cbiAgICBnZXQgaXNEaXJ0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZGl0aW9uc0hlYWQgIT09IG51bGwgfHwgdGhpcy5fbW92ZXNIZWFkICE9PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc0hlYWQgIT09IG51bGwgfHwgdGhpcy5faWRlbnRpdHlDaGFuZ2VzSGVhZCAhPT0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzZXQgdGhlIHN0YXRlIG9mIHRoZSBjaGFuZ2Ugb2JqZWN0cyB0byBzaG93IG5vIGNoYW5nZXMuIFRoaXMgbWVhbnMgc2V0IHByZXZpb3VzS2V5IHRvXG4gICAgICogY3VycmVudEtleSwgYW5kIGNsZWFyIGFsbCBvZiB0aGUgcXVldWVzIChhZGRpdGlvbnMsIG1vdmVzLCByZW1vdmFscykuXG4gICAgICogU2V0IHRoZSBwcmV2aW91c0luZGV4ZXMgb2YgbW92ZWQgYW5kIGFkZGVkIGl0ZW1zIHRvIHRoZWlyIGN1cnJlbnRJbmRleGVzXG4gICAgICogUmVzZXQgdGhlIGxpc3Qgb2YgYWRkaXRpb25zLCBtb3ZlcyBhbmQgcmVtb3ZhbHNcbiAgICAgKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIF9yZXNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXJ0eSkge1xuICAgICAgICAgICAgbGV0IHJlY29yZDtcbiAgICAgICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fcHJldmlvdXNJdEhlYWQgPSB0aGlzLl9pdEhlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0KSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLl9uZXh0UHJldmlvdXMgPSByZWNvcmQuX25leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2FkZGl0aW9uc0hlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0QWRkZWQpIHtcbiAgICAgICAgICAgICAgICByZWNvcmQucHJldmlvdXNJbmRleCA9IHJlY29yZC5jdXJyZW50SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hZGRpdGlvbnNIZWFkID0gdGhpcy5fYWRkaXRpb25zVGFpbCA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX21vdmVzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRNb3ZlZCkge1xuICAgICAgICAgICAgICAgIHJlY29yZC5wcmV2aW91c0luZGV4ID0gcmVjb3JkLmN1cnJlbnRJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX21vdmVzSGVhZCA9IHRoaXMuX21vdmVzVGFpbCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc0hlYWQgPSB0aGlzLl9yZW1vdmFsc1RhaWwgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5faWRlbnRpdHlDaGFuZ2VzSGVhZCA9IHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwgPSBudWxsO1xuICAgICAgICAgICAgLy8gVE9ETyh2aWNiKTogd2hlbiBhc3NlcnQgZ2V0cyBzdXBwb3J0ZWRcbiAgICAgICAgICAgIC8vIGFzc2VydCghdGhpcy5pc0RpcnR5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIHRoZSBjb3JlIGZ1bmN0aW9uIHdoaWNoIGhhbmRsZXMgZGlmZmVyZW5jZXMgYmV0d2VlbiBjb2xsZWN0aW9ucy5cbiAgICAgKlxuICAgICAqIC0gYHJlY29yZGAgaXMgdGhlIHJlY29yZCB3aGljaCB3ZSBzYXcgYXQgdGhpcyBwb3NpdGlvbiBsYXN0IHRpbWUuIElmIG51bGwgdGhlbiBpdCBpcyBhIG5ld1xuICAgICAqICAgaXRlbS5cbiAgICAgKiAtIGBpdGVtYCBpcyB0aGUgY3VycmVudCBpdGVtIGluIHRoZSBjb2xsZWN0aW9uXG4gICAgICogLSBgaW5kZXhgIGlzIHRoZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX21pc21hdGNoKHJlY29yZCwgaXRlbSwgaXRlbVRyYWNrQnksIGluZGV4KSB7XG4gICAgICAgIC8vIFRoZSBwcmV2aW91cyByZWNvcmQgYWZ0ZXIgd2hpY2ggd2Ugd2lsbCBhcHBlbmQgdGhlIGN1cnJlbnQgb25lLlxuICAgICAgICBsZXQgcHJldmlvdXNSZWNvcmQ7XG4gICAgICAgIGlmIChyZWNvcmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHByZXZpb3VzUmVjb3JkID0gdGhpcy5faXRUYWlsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJldmlvdXNSZWNvcmQgPSByZWNvcmQuX3ByZXY7XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHJlY29yZCBmcm9tIHRoZSBjb2xsZWN0aW9uIHNpbmNlIHdlIGtub3cgaXQgZG9lcyBub3QgbWF0Y2ggdGhlIGl0ZW0uXG4gICAgICAgICAgICB0aGlzLl9yZW1vdmUocmVjb3JkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZWUgaWYgd2UgaGF2ZSBldmljdGVkIHRoZSBpdGVtLCB3aGljaCB1c2VkIHRvIGJlIGF0IHNvbWUgYW50ZXJpb3IgcG9zaXRpb24gb2YgX2l0SGVhZCBsaXN0LlxuICAgICAgICByZWNvcmQgPSB0aGlzLl91bmxpbmtlZFJlY29yZHMgPT09IG51bGwgPyBudWxsIDogdGhpcy5fdW5saW5rZWRSZWNvcmRzLmdldChpdGVtVHJhY2tCeSwgbnVsbCk7XG4gICAgICAgIGlmIChyZWNvcmQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEl0IGlzIGFuIGl0ZW0gd2hpY2ggd2UgaGF2ZSBldmljdGVkIGVhcmxpZXI6IHJlaW5zZXJ0IGl0IGJhY2sgaW50byB0aGUgbGlzdC5cbiAgICAgICAgICAgIC8vIEJ1dCBmaXJzdCB3ZSBuZWVkIHRvIGNoZWNrIGlmIGlkZW50aXR5IGNoYW5nZWQsIHNvIHdlIGNhbiB1cGRhdGUgaW4gdmlldyBpZiBuZWNlc3NhcnkuXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5pcyhyZWNvcmQuaXRlbSwgaXRlbSkpXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkSWRlbnRpdHlDaGFuZ2UocmVjb3JkLCBpdGVtKTtcbiAgICAgICAgICAgIHRoaXMuX3JlaW5zZXJ0QWZ0ZXIocmVjb3JkLCBwcmV2aW91c1JlY29yZCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQXR0ZW1wdCB0byBzZWUgaWYgdGhlIGl0ZW0gaXMgYXQgc29tZSBwb3N0ZXJpb3IgcG9zaXRpb24gb2YgX2l0SGVhZCBsaXN0LlxuICAgICAgICAgICAgcmVjb3JkID0gdGhpcy5fbGlua2VkUmVjb3JkcyA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9saW5rZWRSZWNvcmRzLmdldChpdGVtVHJhY2tCeSwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKHJlY29yZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGhhdmUgdGhlIGl0ZW0gaW4gX2l0SGVhZCBhdC9hZnRlciBgaW5kZXhgIHBvc2l0aW9uLiBXZSBuZWVkIHRvIG1vdmUgaXQgZm9yd2FyZCBpbiB0aGVcbiAgICAgICAgICAgICAgICAvLyBjb2xsZWN0aW9uLlxuICAgICAgICAgICAgICAgIC8vIEJ1dCBmaXJzdCB3ZSBuZWVkIHRvIGNoZWNrIGlmIGlkZW50aXR5IGNoYW5nZWQsIHNvIHdlIGNhbiB1cGRhdGUgaW4gdmlldyBpZiBuZWNlc3NhcnkuXG4gICAgICAgICAgICAgICAgaWYgKCFPYmplY3QuaXMocmVjb3JkLml0ZW0sIGl0ZW0pKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRJZGVudGl0eUNoYW5nZShyZWNvcmQsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIHRoaXMuX21vdmVBZnRlcihyZWNvcmQsIHByZXZpb3VzUmVjb3JkLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJdCBpcyBhIG5ldyBpdGVtOiBhZGQgaXQuXG4gICAgICAgICAgICAgICAgcmVjb3JkID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkQWZ0ZXIobmV3IEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXyhpdGVtLCBpdGVtVHJhY2tCeSksIHByZXZpb3VzUmVjb3JkLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBjaGVjayBpcyBvbmx5IG5lZWRlZCBpZiBhbiBhcnJheSBjb250YWlucyBkdXBsaWNhdGVzLiAoU2hvcnQgY2lyY3VpdCBvZiBub3RoaW5nIGRpcnR5KVxuICAgICAqXG4gICAgICogVXNlIGNhc2U6IGBbYSwgYV1gID0+IGBbYiwgYSwgYV1gXG4gICAgICpcbiAgICAgKiBJZiB3ZSBkaWQgbm90IGhhdmUgdGhpcyBjaGVjayB0aGVuIHRoZSBpbnNlcnRpb24gb2YgYGJgIHdvdWxkOlxuICAgICAqICAgMSkgZXZpY3QgZmlyc3QgYGFgXG4gICAgICogICAyKSBpbnNlcnQgYGJgIGF0IGAwYCBpbmRleC5cbiAgICAgKiAgIDMpIGxlYXZlIGBhYCBhdCBpbmRleCBgMWAgYXMgaXMuIDwtLSB0aGlzIGlzIHdyb25nIVxuICAgICAqICAgMykgcmVpbnNlcnQgYGFgIGF0IGluZGV4IDIuIDwtLSB0aGlzIGlzIHdyb25nIVxuICAgICAqXG4gICAgICogVGhlIGNvcnJlY3QgYmVoYXZpb3IgaXM6XG4gICAgICogICAxKSBldmljdCBmaXJzdCBgYWBcbiAgICAgKiAgIDIpIGluc2VydCBgYmAgYXQgYDBgIGluZGV4LlxuICAgICAqICAgMykgcmVpbnNlcnQgYGFgIGF0IGluZGV4IDEuXG4gICAgICogICAzKSBtb3ZlIGBhYCBhdCBmcm9tIGAxYCB0byBgMmAuXG4gICAgICpcbiAgICAgKlxuICAgICAqIERvdWJsZSBjaGVjayB0aGF0IHdlIGhhdmUgbm90IGV2aWN0ZWQgYSBkdXBsaWNhdGUgaXRlbS4gV2UgbmVlZCB0byBjaGVjayBpZiB0aGUgaXRlbSB0eXBlIG1heVxuICAgICAqIGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQ6XG4gICAgICogVGhlIGluc2VydGlvbiBvZiBiIHdpbGwgZXZpY3QgdGhlIGZpcnN0ICdhJy4gSWYgd2UgZG9uJ3QgcmVpbnNlcnQgaXQgbm93IGl0IHdpbGwgYmUgcmVpbnNlcnRlZFxuICAgICAqIGF0IHRoZSBlbmQuIFdoaWNoIHdpbGwgc2hvdyB1cCBhcyB0aGUgdHdvICdhJ3Mgc3dpdGNoaW5nIHBvc2l0aW9uLiBUaGlzIGlzIGluY29ycmVjdCwgc2luY2UgYVxuICAgICAqIGJldHRlciB3YXkgdG8gdGhpbmsgb2YgaXQgaXMgYXMgaW5zZXJ0IG9mICdiJyByYXRoZXIgdGhlbiBzd2l0Y2ggJ2EnIHdpdGggJ2InIGFuZCB0aGVuIGFkZCAnYSdcbiAgICAgKiBhdCB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3ZlcmlmeVJlaW5zZXJ0aW9uKHJlY29yZCwgaXRlbSwgaXRlbVRyYWNrQnksIGluZGV4KSB7XG4gICAgICAgIGxldCByZWluc2VydFJlY29yZCA9IHRoaXMuX3VubGlua2VkUmVjb3JkcyA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl91bmxpbmtlZFJlY29yZHMuZ2V0KGl0ZW1UcmFja0J5LCBudWxsKTtcbiAgICAgICAgaWYgKHJlaW5zZXJ0UmVjb3JkICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZWNvcmQgPSB0aGlzLl9yZWluc2VydEFmdGVyKHJlaW5zZXJ0UmVjb3JkLCByZWNvcmQuX3ByZXYsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZWNvcmQuY3VycmVudEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZWNvcmQuY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICB0aGlzLl9hZGRUb01vdmVzKHJlY29yZCwgaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCByaWQgb2YgYW55IGV4Y2VzcyB7QGxpbmsgSXRlcmFibGVDaGFuZ2VSZWNvcmRffXMgZnJvbSB0aGUgcHJldmlvdXMgY29sbGVjdGlvblxuICAgICAqXG4gICAgICogLSBgcmVjb3JkYCBUaGUgZmlyc3QgZXhjZXNzIHtAbGluayBJdGVyYWJsZUNoYW5nZVJlY29yZF99LlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgX3RydW5jYXRlKHJlY29yZCkge1xuICAgICAgICAvLyBBbnl0aGluZyBhZnRlciB0aGF0IG5lZWRzIHRvIGJlIHJlbW92ZWQ7XG4gICAgICAgIHdoaWxlIChyZWNvcmQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IG5leHRSZWNvcmQgPSByZWNvcmQuX25leHQ7XG4gICAgICAgICAgICB0aGlzLl9hZGRUb1JlbW92YWxzKHRoaXMuX3VubGluayhyZWNvcmQpKTtcbiAgICAgICAgICAgIHJlY29yZCA9IG5leHRSZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3VubGlua2VkUmVjb3JkcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fdW5saW5rZWRSZWNvcmRzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2FkZGl0aW9uc1RhaWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZGl0aW9uc1RhaWwuX25leHRBZGRlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX21vdmVzVGFpbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fbW92ZXNUYWlsLl9uZXh0TW92ZWQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9pdFRhaWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2l0VGFpbC5fbmV4dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3JlbW92YWxzVGFpbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNUYWlsLl9uZXh0UmVtb3ZlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwuX25leHRJZGVudGl0eUNoYW5nZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9yZWluc2VydEFmdGVyKHJlY29yZCwgcHJldlJlY29yZCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3VubGlua2VkUmVjb3JkcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fdW5saW5rZWRSZWNvcmRzLnJlbW92ZShyZWNvcmQpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXYgPSByZWNvcmQuX3ByZXZSZW1vdmVkO1xuICAgICAgICBjb25zdCBuZXh0ID0gcmVjb3JkLl9uZXh0UmVtb3ZlZDtcbiAgICAgICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92YWxzSGVhZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcmV2Ll9uZXh0UmVtb3ZlZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92YWxzVGFpbCA9IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXh0Ll9wcmV2UmVtb3ZlZCA9IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5zZXJ0QWZ0ZXIocmVjb3JkLCBwcmV2UmVjb3JkLCBpbmRleCk7XG4gICAgICAgIHRoaXMuX2FkZFRvTW92ZXMocmVjb3JkLCBpbmRleCk7XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfbW92ZUFmdGVyKHJlY29yZCwgcHJldlJlY29yZCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fdW5saW5rKHJlY29yZCk7XG4gICAgICAgIHRoaXMuX2luc2VydEFmdGVyKHJlY29yZCwgcHJldlJlY29yZCwgaW5kZXgpO1xuICAgICAgICB0aGlzLl9hZGRUb01vdmVzKHJlY29yZCwgaW5kZXgpO1xuICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2FkZEFmdGVyKHJlY29yZCwgcHJldlJlY29yZCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5faW5zZXJ0QWZ0ZXIocmVjb3JkLCBwcmV2UmVjb3JkLCBpbmRleCk7XG4gICAgICAgIGlmICh0aGlzLl9hZGRpdGlvbnNUYWlsID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUT0RPKHZpY2IpOlxuICAgICAgICAgICAgLy8gYXNzZXJ0KHRoaXMuX2FkZGl0aW9uc0hlYWQgPT09IG51bGwpO1xuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbCA9IHRoaXMuX2FkZGl0aW9uc0hlYWQgPSByZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBUT0RPKHZpY2IpOlxuICAgICAgICAgICAgLy8gYXNzZXJ0KF9hZGRpdGlvbnNUYWlsLl9uZXh0QWRkZWQgPT09IG51bGwpO1xuICAgICAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5fbmV4dEFkZGVkID09PSBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX2FkZGl0aW9uc1RhaWwgPSB0aGlzLl9hZGRpdGlvbnNUYWlsLl9uZXh0QWRkZWQgPSByZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9pbnNlcnRBZnRlcihyZWNvcmQsIHByZXZSZWNvcmQsIGluZGV4KSB7XG4gICAgICAgIC8vIFRPRE8odmljYik6XG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQgIT0gcHJldlJlY29yZCk7XG4gICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHQgPT09IG51bGwpO1xuICAgICAgICAvLyBhc3NlcnQocmVjb3JkLl9wcmV2ID09PSBudWxsKTtcbiAgICAgICAgY29uc3QgbmV4dCA9IHByZXZSZWNvcmQgPT09IG51bGwgPyB0aGlzLl9pdEhlYWQgOiBwcmV2UmVjb3JkLl9uZXh0O1xuICAgICAgICAvLyBUT0RPKHZpY2IpOlxuICAgICAgICAvLyBhc3NlcnQobmV4dCAhPSByZWNvcmQpO1xuICAgICAgICAvLyBhc3NlcnQocHJldlJlY29yZCAhPSByZWNvcmQpO1xuICAgICAgICByZWNvcmQuX25leHQgPSBuZXh0O1xuICAgICAgICByZWNvcmQuX3ByZXYgPSBwcmV2UmVjb3JkO1xuICAgICAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5faXRUYWlsID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV4dC5fcHJldiA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlJlY29yZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5faXRIZWFkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJldlJlY29yZC5fbmV4dCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbGlua2VkUmVjb3JkcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fbGlua2VkUmVjb3JkcyA9IG5ldyBfRHVwbGljYXRlTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbGlua2VkUmVjb3Jkcy5wdXQocmVjb3JkKTtcbiAgICAgICAgcmVjb3JkLmN1cnJlbnRJbmRleCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3JlbW92ZShyZWNvcmQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkZFRvUmVtb3ZhbHModGhpcy5fdW5saW5rKHJlY29yZCkpO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX3VubGluayhyZWNvcmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpbmtlZFJlY29yZHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbmtlZFJlY29yZHMucmVtb3ZlKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHJldiA9IHJlY29yZC5fcHJldjtcbiAgICAgICAgY29uc3QgbmV4dCA9IHJlY29yZC5fbmV4dDtcbiAgICAgICAgLy8gVE9ETyh2aWNiKTpcbiAgICAgICAgLy8gYXNzZXJ0KChyZWNvcmQuX3ByZXYgPSBudWxsKSA9PT0gbnVsbCk7XG4gICAgICAgIC8vIGFzc2VydCgocmVjb3JkLl9uZXh0ID0gbnVsbCkgPT09IG51bGwpO1xuICAgICAgICBpZiAocHJldiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5faXRIZWFkID0gbmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByZXYuX25leHQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZXh0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9pdFRhaWwgPSBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV4dC5fcHJldiA9IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9hZGRUb01vdmVzKHJlY29yZCwgdG9JbmRleCkge1xuICAgICAgICAvLyBUT0RPKHZpY2IpOlxuICAgICAgICAvLyBhc3NlcnQocmVjb3JkLl9uZXh0TW92ZWQgPT09IG51bGwpO1xuICAgICAgICBpZiAocmVjb3JkLnByZXZpb3VzSW5kZXggPT09IHRvSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX21vdmVzVGFpbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVE9ETyh2aWNiKTpcbiAgICAgICAgICAgIC8vIGFzc2VydChfbW92ZXNIZWFkID09PSBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX21vdmVzVGFpbCA9IHRoaXMuX21vdmVzSGVhZCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE8odmljYik6XG4gICAgICAgICAgICAvLyBhc3NlcnQoX21vdmVzVGFpbC5fbmV4dE1vdmVkID09PSBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX21vdmVzVGFpbCA9IHRoaXMuX21vdmVzVGFpbC5fbmV4dE1vdmVkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICAgIF9hZGRUb1JlbW92YWxzKHJlY29yZCkge1xuICAgICAgICBpZiAodGhpcy5fdW5saW5rZWRSZWNvcmRzID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl91bmxpbmtlZFJlY29yZHMgPSBuZXcgX0R1cGxpY2F0ZU1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VubGlua2VkUmVjb3Jkcy5wdXQocmVjb3JkKTtcbiAgICAgICAgcmVjb3JkLmN1cnJlbnRJbmRleCA9IG51bGw7XG4gICAgICAgIHJlY29yZC5fbmV4dFJlbW92ZWQgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fcmVtb3ZhbHNUYWlsID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUT0RPKHZpY2IpOlxuICAgICAgICAgICAgLy8gYXNzZXJ0KF9yZW1vdmFsc0hlYWQgPT09IG51bGwpO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNUYWlsID0gdGhpcy5fcmVtb3ZhbHNIZWFkID0gcmVjb3JkO1xuICAgICAgICAgICAgcmVjb3JkLl9wcmV2UmVtb3ZlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBUT0RPKHZpY2IpOlxuICAgICAgICAgICAgLy8gYXNzZXJ0KF9yZW1vdmFsc1RhaWwuX25leHRSZW1vdmVkID09PSBudWxsKTtcbiAgICAgICAgICAgIC8vIGFzc2VydChyZWNvcmQuX25leHRSZW1vdmVkID09PSBudWxsKTtcbiAgICAgICAgICAgIHJlY29yZC5fcHJldlJlbW92ZWQgPSB0aGlzLl9yZW1vdmFsc1RhaWw7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc1RhaWwgPSB0aGlzLl9yZW1vdmFsc1RhaWwuX25leHRSZW1vdmVkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfYWRkSWRlbnRpdHlDaGFuZ2UocmVjb3JkLCBpdGVtKSB7XG4gICAgICAgIHJlY29yZC5pdGVtID0gaXRlbTtcbiAgICAgICAgaWYgKHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwgPSB0aGlzLl9pZGVudGl0eUNoYW5nZXNIZWFkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faWRlbnRpdHlDaGFuZ2VzVGFpbCA9IHRoaXMuX2lkZW50aXR5Q2hhbmdlc1RhaWwuX25leHRJZGVudGl0eUNoYW5nZSA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgIH1cbn1cbmNsYXNzIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXyB7XG4gICAgY29uc3RydWN0b3IoaXRlbSwgdHJhY2tCeUlkKSB7XG4gICAgICAgIHRoaXMuaXRlbSA9IGl0ZW07XG4gICAgICAgIHRoaXMudHJhY2tCeUlkID0gdHJhY2tCeUlkO1xuICAgICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IG51bGw7XG4gICAgICAgIHRoaXMucHJldmlvdXNJbmRleCA9IG51bGw7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5fbmV4dFByZXZpb3VzID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9wcmV2ID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9wcmV2RHVwID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9uZXh0RHVwID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9wcmV2UmVtb3ZlZCA9IG51bGw7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5fbmV4dFJlbW92ZWQgPSBudWxsO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuX25leHRBZGRlZCA9IG51bGw7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5fbmV4dE1vdmVkID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9uZXh0SWRlbnRpdHlDaGFuZ2UgPSBudWxsO1xuICAgIH1cbn1cbi8vIEEgbGlua2VkIGxpc3Qgb2YgSXRlcmFibGVDaGFuZ2VSZWNvcmRzIHdpdGggdGhlIHNhbWUgSXRlcmFibGVDaGFuZ2VSZWNvcmRfLml0ZW1cbmNsYXNzIF9EdXBsaWNhdGVJdGVtUmVjb3JkTGlzdCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5faGVhZCA9IG51bGw7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5fdGFpbCA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFwcGVuZCB0aGUgcmVjb3JkIHRvIHRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMuXG4gICAgICpcbiAgICAgKiBOb3RlOiBieSBkZXNpZ24gYWxsIHJlY29yZHMgaW4gdGhlIGxpc3Qgb2YgZHVwbGljYXRlcyBob2xkIHRoZSBzYW1lIHZhbHVlIGluIHJlY29yZC5pdGVtLlxuICAgICAqL1xuICAgIGFkZChyZWNvcmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hlYWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSB0aGlzLl90YWlsID0gcmVjb3JkO1xuICAgICAgICAgICAgcmVjb3JkLl9uZXh0RHVwID0gbnVsbDtcbiAgICAgICAgICAgIHJlY29yZC5fcHJldkR1cCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBUT0RPKHZpY2IpOlxuICAgICAgICAgICAgLy8gYXNzZXJ0KHJlY29yZC5pdGVtID09ICBfaGVhZC5pdGVtIHx8XG4gICAgICAgICAgICAvLyAgICAgICByZWNvcmQuaXRlbSBpcyBudW0gJiYgcmVjb3JkLml0ZW0uaXNOYU4gJiYgX2hlYWQuaXRlbSBpcyBudW0gJiYgX2hlYWQuaXRlbS5pc05hTik7XG4gICAgICAgICAgICB0aGlzLl90YWlsLl9uZXh0RHVwID0gcmVjb3JkO1xuICAgICAgICAgICAgcmVjb3JkLl9wcmV2RHVwID0gdGhpcy5fdGFpbDtcbiAgICAgICAgICAgIHJlY29yZC5fbmV4dER1cCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl90YWlsID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFJldHVybnMgYSBJdGVyYWJsZUNoYW5nZVJlY29yZF8gaGF2aW5nIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXy50cmFja0J5SWQgPT0gdHJhY2tCeUlkIGFuZFxuICAgIC8vIEl0ZXJhYmxlQ2hhbmdlUmVjb3JkXy5jdXJyZW50SW5kZXggPj0gYXRPckFmdGVySW5kZXhcbiAgICBnZXQodHJhY2tCeUlkLCBhdE9yQWZ0ZXJJbmRleCkge1xuICAgICAgICBsZXQgcmVjb3JkO1xuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2hlYWQ7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0RHVwKSB7XG4gICAgICAgICAgICBpZiAoKGF0T3JBZnRlckluZGV4ID09PSBudWxsIHx8IGF0T3JBZnRlckluZGV4IDw9IHJlY29yZC5jdXJyZW50SW5kZXgpICYmXG4gICAgICAgICAgICAgICAgT2JqZWN0LmlzKHJlY29yZC50cmFja0J5SWQsIHRyYWNrQnlJZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgb25lIHtAbGluayBJdGVyYWJsZUNoYW5nZVJlY29yZF99IGZyb20gdGhlIGxpc3Qgb2YgZHVwbGljYXRlcy5cbiAgICAgKlxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgbGlzdCBvZiBkdXBsaWNhdGVzIGlzIGVtcHR5LlxuICAgICAqL1xuICAgIHJlbW92ZShyZWNvcmQpIHtcbiAgICAgICAgLy8gVE9ETyh2aWNiKTpcbiAgICAgICAgLy8gYXNzZXJ0KCgpIHtcbiAgICAgICAgLy8gIC8vIHZlcmlmeSB0aGF0IHRoZSByZWNvcmQgYmVpbmcgcmVtb3ZlZCBpcyBpbiB0aGUgbGlzdC5cbiAgICAgICAgLy8gIGZvciAoSXRlcmFibGVDaGFuZ2VSZWNvcmRfIGN1cnNvciA9IF9oZWFkOyBjdXJzb3IgIT0gbnVsbDsgY3Vyc29yID0gY3Vyc29yLl9uZXh0RHVwKSB7XG4gICAgICAgIC8vICAgIGlmIChpZGVudGljYWwoY3Vyc29yLCByZWNvcmQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgLy8gIH1cbiAgICAgICAgLy8gIHJldHVybiBmYWxzZTtcbiAgICAgICAgLy99KTtcbiAgICAgICAgY29uc3QgcHJldiA9IHJlY29yZC5fcHJldkR1cDtcbiAgICAgICAgY29uc3QgbmV4dCA9IHJlY29yZC5fbmV4dER1cDtcbiAgICAgICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2hlYWQgPSBuZXh0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJldi5fbmV4dER1cCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX3RhaWwgPSBwcmV2O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV4dC5fcHJldkR1cCA9IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWQgPT09IG51bGw7XG4gICAgfVxufVxuY2xhc3MgX0R1cGxpY2F0ZU1hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubWFwID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBwdXQocmVjb3JkKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHJlY29yZC50cmFja0J5SWQ7XG4gICAgICAgIGxldCBkdXBsaWNhdGVzID0gdGhpcy5tYXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghZHVwbGljYXRlcykge1xuICAgICAgICAgICAgZHVwbGljYXRlcyA9IG5ldyBfRHVwbGljYXRlSXRlbVJlY29yZExpc3QoKTtcbiAgICAgICAgICAgIHRoaXMubWFwLnNldChrZXksIGR1cGxpY2F0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGR1cGxpY2F0ZXMuYWRkKHJlY29yZCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHJpZXZlIHRoZSBgdmFsdWVgIHVzaW5nIGtleS4gQmVjYXVzZSB0aGUgSXRlcmFibGVDaGFuZ2VSZWNvcmRfIHZhbHVlIG1heSBiZSBvbmUgd2hpY2ggd2VcbiAgICAgKiBoYXZlIGFscmVhZHkgaXRlcmF0ZWQgb3Zlciwgd2UgdXNlIHRoZSBgYXRPckFmdGVySW5kZXhgIHRvIHByZXRlbmQgaXQgaXMgbm90IHRoZXJlLlxuICAgICAqXG4gICAgICogVXNlIGNhc2U6IGBbYSwgYiwgYywgYSwgYV1gIGlmIHdlIGFyZSBhdCBpbmRleCBgM2Agd2hpY2ggaXMgdGhlIHNlY29uZCBgYWAgdGhlbiBhc2tpbmcgaWYgd2VcbiAgICAgKiBoYXZlIGFueSBtb3JlIGBhYHMgbmVlZHMgdG8gcmV0dXJuIHRoZSBzZWNvbmQgYGFgLlxuICAgICAqL1xuICAgIGdldCh0cmFja0J5SWQsIGF0T3JBZnRlckluZGV4KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRyYWNrQnlJZDtcbiAgICAgICAgY29uc3QgcmVjb3JkTGlzdCA9IHRoaXMubWFwLmdldChrZXkpO1xuICAgICAgICByZXR1cm4gcmVjb3JkTGlzdCA/IHJlY29yZExpc3QuZ2V0KHRyYWNrQnlJZCwgYXRPckFmdGVySW5kZXgpIDogbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHtAbGluayBJdGVyYWJsZUNoYW5nZVJlY29yZF99IGZyb20gdGhlIGxpc3Qgb2YgZHVwbGljYXRlcy5cbiAgICAgKlxuICAgICAqIFRoZSBsaXN0IG9mIGR1cGxpY2F0ZXMgYWxzbyBpcyByZW1vdmVkIGZyb20gdGhlIG1hcCBpZiBpdCBnZXRzIGVtcHR5LlxuICAgICAqL1xuICAgIHJlbW92ZShyZWNvcmQpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gcmVjb3JkLnRyYWNrQnlJZDtcbiAgICAgICAgY29uc3QgcmVjb3JkTGlzdCA9IHRoaXMubWFwLmdldChrZXkpO1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGxpc3Qgb2YgZHVwbGljYXRlcyB3aGVuIGl0IGdldHMgZW1wdHlcbiAgICAgICAgaWYgKHJlY29yZExpc3QucmVtb3ZlKHJlY29yZCkpIHtcbiAgICAgICAgICAgIHRoaXMubWFwLmRlbGV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgfVxuICAgIGdldCBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuc2l6ZSA9PT0gMDtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMubWFwLmNsZWFyKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UHJldmlvdXNJbmRleChpdGVtLCBhZGRSZW1vdmVPZmZzZXQsIG1vdmVPZmZzZXRzKSB7XG4gICAgY29uc3QgcHJldmlvdXNJbmRleCA9IGl0ZW0ucHJldmlvdXNJbmRleDtcbiAgICBpZiAocHJldmlvdXNJbmRleCA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIHByZXZpb3VzSW5kZXg7XG4gICAgbGV0IG1vdmVPZmZzZXQgPSAwO1xuICAgIGlmIChtb3ZlT2Zmc2V0cyAmJiBwcmV2aW91c0luZGV4IDwgbW92ZU9mZnNldHMubGVuZ3RoKSB7XG4gICAgICAgIG1vdmVPZmZzZXQgPSBtb3ZlT2Zmc2V0c1twcmV2aW91c0luZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXZpb3VzSW5kZXggKyBhZGRSZW1vdmVPZmZzZXQgKyBtb3ZlT2Zmc2V0O1xufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmNsYXNzIERlZmF1bHRLZXlWYWx1ZURpZmZlckZhY3Rvcnkge1xuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG4gICAgc3VwcG9ydHMob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBNYXAgfHwgaXNKc09iamVjdChvYmopO1xuICAgIH1cbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVmYXVsdEtleVZhbHVlRGlmZmVyKCk7XG4gICAgfVxufVxuY2xhc3MgRGVmYXVsdEtleVZhbHVlRGlmZmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fcmVjb3JkcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5fbWFwSGVhZCA9IG51bGw7XG4gICAgICAgIC8vIF9hcHBlbmRBZnRlciBpcyB1c2VkIGluIHRoZSBjaGVjayBsb29wXG4gICAgICAgIHRoaXMuX2FwcGVuZEFmdGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcHJldmlvdXNNYXBIZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2hhbmdlc0hlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9jaGFuZ2VzVGFpbCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FkZGl0aW9uc0hlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9hZGRpdGlvbnNUYWlsID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVtb3ZhbHNUYWlsID0gbnVsbDtcbiAgICB9XG4gICAgZ2V0IGlzRGlydHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRpdGlvbnNIZWFkICE9PSBudWxsIHx8IHRoaXMuX2NoYW5nZXNIZWFkICE9PSBudWxsIHx8XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc0hlYWQgIT09IG51bGw7XG4gICAgfVxuICAgIGZvckVhY2hJdGVtKGZuKSB7XG4gICAgICAgIGxldCByZWNvcmQ7XG4gICAgICAgIGZvciAocmVjb3JkID0gdGhpcy5fbWFwSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHQpIHtcbiAgICAgICAgICAgIGZuKHJlY29yZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yRWFjaFByZXZpb3VzSXRlbShmbikge1xuICAgICAgICBsZXQgcmVjb3JkO1xuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3ByZXZpb3VzTWFwSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRQcmV2aW91cykge1xuICAgICAgICAgICAgZm4ocmVjb3JkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3JFYWNoQ2hhbmdlZEl0ZW0oZm4pIHtcbiAgICAgICAgbGV0IHJlY29yZDtcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9jaGFuZ2VzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRDaGFuZ2VkKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvckVhY2hBZGRlZEl0ZW0oZm4pIHtcbiAgICAgICAgbGV0IHJlY29yZDtcbiAgICAgICAgZm9yIChyZWNvcmQgPSB0aGlzLl9hZGRpdGlvbnNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dEFkZGVkKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvckVhY2hSZW1vdmVkSXRlbShmbikge1xuICAgICAgICBsZXQgcmVjb3JkO1xuICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3JlbW92YWxzSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRSZW1vdmVkKSB7XG4gICAgICAgICAgICBmbihyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRpZmYobWFwKSB7XG4gICAgICAgIGlmICghbWFwKSB7XG4gICAgICAgICAgICBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIShtYXAgaW5zdGFuY2VvZiBNYXAgfHwgaXNKc09iamVjdChtYXApKSkge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gKHR5cGVvZiBuZ0Rldk1vZGUgPT09ICd1bmRlZmluZWQnIHx8IG5nRGV2TW9kZSkgP1xuICAgICAgICAgICAgICAgIGBFcnJvciB0cnlpbmcgdG8gZGlmZiAnJHtzdHJpbmdpZnkobWFwKX0nLiBPbmx5IG1hcHMgYW5kIG9iamVjdHMgYXJlIGFsbG93ZWRgIDpcbiAgICAgICAgICAgICAgICAnJztcbiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoOTAwIC8qIElOVkFMSURfRElGRkVSX0lOUFVUICovLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrKG1hcCkgPyB0aGlzIDogbnVsbDtcbiAgICB9XG4gICAgb25EZXN0cm95KCkgeyB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIG1hcCB2cyB0aGUgcHJldmlvdXMuXG4gICAgICogVGhlIGFsZ29yaXRobSBpcyBvcHRpbWlzZWQgZm9yIHdoZW4gdGhlIGtleXMgZG8gbm8gY2hhbmdlLlxuICAgICAqL1xuICAgIGNoZWNrKG1hcCkge1xuICAgICAgICB0aGlzLl9yZXNldCgpO1xuICAgICAgICBsZXQgaW5zZXJ0QmVmb3JlID0gdGhpcy5fbWFwSGVhZDtcbiAgICAgICAgdGhpcy5fYXBwZW5kQWZ0ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9mb3JFYWNoKG1hcCwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChpbnNlcnRCZWZvcmUgJiYgaW5zZXJ0QmVmb3JlLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF5YmVBZGRUb0NoYW5nZXMoaW5zZXJ0QmVmb3JlLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXBwZW5kQWZ0ZXIgPSBpbnNlcnRCZWZvcmU7XG4gICAgICAgICAgICAgICAgaW5zZXJ0QmVmb3JlID0gaW5zZXJ0QmVmb3JlLl9uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjb3JkID0gdGhpcy5fZ2V0T3JDcmVhdGVSZWNvcmRGb3JLZXkoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaW5zZXJ0QmVmb3JlID0gdGhpcy5faW5zZXJ0QmVmb3JlT3JBcHBlbmQoaW5zZXJ0QmVmb3JlLCByZWNvcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gSXRlbXMgcmVtYWluaW5nIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QgaGF2ZSBiZWVuIGRlbGV0ZWRcbiAgICAgICAgaWYgKGluc2VydEJlZm9yZSkge1xuICAgICAgICAgICAgaWYgKGluc2VydEJlZm9yZS5fcHJldikge1xuICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZS5fcHJldi5fbmV4dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmFsc0hlYWQgPSBpbnNlcnRCZWZvcmU7XG4gICAgICAgICAgICBmb3IgKGxldCByZWNvcmQgPSBpbnNlcnRCZWZvcmU7IHJlY29yZCAhPT0gbnVsbDsgcmVjb3JkID0gcmVjb3JkLl9uZXh0UmVtb3ZlZCkge1xuICAgICAgICAgICAgICAgIGlmIChyZWNvcmQgPT09IHRoaXMuX21hcEhlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFwSGVhZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3JlY29yZHMuZGVsZXRlKHJlY29yZC5rZXkpO1xuICAgICAgICAgICAgICAgIHJlY29yZC5fbmV4dFJlbW92ZWQgPSByZWNvcmQuX25leHQ7XG4gICAgICAgICAgICAgICAgcmVjb3JkLnByZXZpb3VzVmFsdWUgPSByZWNvcmQuY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgIHJlY29yZC5jdXJyZW50VmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJlY29yZC5fcHJldiA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmVjb3JkLl9uZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBNYWtlIHN1cmUgdGFpbHMgaGF2ZSBubyBuZXh0IHJlY29yZHMgZnJvbSBwcmV2aW91cyBydW5zXG4gICAgICAgIGlmICh0aGlzLl9jaGFuZ2VzVGFpbClcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZXNUYWlsLl9uZXh0Q2hhbmdlZCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLl9hZGRpdGlvbnNUYWlsKVxuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbC5fbmV4dEFkZGVkID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNEaXJ0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyBhIHJlY29yZCBiZWZvcmUgYGJlZm9yZWAgb3IgYXBwZW5kIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3Qgd2hlbiBgYmVmb3JlYCBpcyBudWxsLlxuICAgICAqXG4gICAgICogTm90ZXM6XG4gICAgICogLSBUaGlzIG1ldGhvZCBhcHBlbmRzIGF0IGB0aGlzLl9hcHBlbmRBZnRlcmAsXG4gICAgICogLSBUaGlzIG1ldGhvZCB1cGRhdGVzIGB0aGlzLl9hcHBlbmRBZnRlcmAsXG4gICAgICogLSBUaGUgcmV0dXJuIHZhbHVlIGlzIHRoZSBuZXcgdmFsdWUgZm9yIHRoZSBpbnNlcnRpb24gcG9pbnRlci5cbiAgICAgKi9cbiAgICBfaW5zZXJ0QmVmb3JlT3JBcHBlbmQoYmVmb3JlLCByZWNvcmQpIHtcbiAgICAgICAgaWYgKGJlZm9yZSkge1xuICAgICAgICAgICAgY29uc3QgcHJldiA9IGJlZm9yZS5fcHJldjtcbiAgICAgICAgICAgIHJlY29yZC5fbmV4dCA9IGJlZm9yZTtcbiAgICAgICAgICAgIHJlY29yZC5fcHJldiA9IHByZXY7XG4gICAgICAgICAgICBiZWZvcmUuX3ByZXYgPSByZWNvcmQ7XG4gICAgICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgICAgIHByZXYuX25leHQgPSByZWNvcmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmVmb3JlID09PSB0aGlzLl9tYXBIZWFkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwSGVhZCA9IHJlY29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZEFmdGVyID0gYmVmb3JlO1xuICAgICAgICAgICAgcmV0dXJuIGJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fYXBwZW5kQWZ0ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZEFmdGVyLl9uZXh0ID0gcmVjb3JkO1xuICAgICAgICAgICAgcmVjb3JkLl9wcmV2ID0gdGhpcy5fYXBwZW5kQWZ0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9tYXBIZWFkID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FwcGVuZEFmdGVyID0gcmVjb3JkO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgX2dldE9yQ3JlYXRlUmVjb3JkRm9yS2V5KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29yZHMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlY29yZCA9IHRoaXMuX3JlY29yZHMuZ2V0KGtleSk7XG4gICAgICAgICAgICB0aGlzLl9tYXliZUFkZFRvQ2hhbmdlcyhyZWNvcmQsIHZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSByZWNvcmQuX3ByZXY7XG4gICAgICAgICAgICBjb25zdCBuZXh0ID0gcmVjb3JkLl9uZXh0O1xuICAgICAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgICAgICBwcmV2Ll9uZXh0ID0gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgbmV4dC5fcHJldiA9IHByZXY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNvcmQuX25leHQgPSBudWxsO1xuICAgICAgICAgICAgcmVjb3JkLl9wcmV2ID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiByZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVjb3JkID0gbmV3IEtleVZhbHVlQ2hhbmdlUmVjb3JkXyhrZXkpO1xuICAgICAgICB0aGlzLl9yZWNvcmRzLnNldChrZXksIHJlY29yZCk7XG4gICAgICAgIHJlY29yZC5jdXJyZW50VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fYWRkVG9BZGRpdGlvbnMocmVjb3JkKTtcbiAgICAgICAgcmV0dXJuIHJlY29yZDtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9yZXNldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXJ0eSkge1xuICAgICAgICAgICAgbGV0IHJlY29yZDtcbiAgICAgICAgICAgIC8vIGxldCBgX3ByZXZpb3VzTWFwSGVhZGAgY29udGFpbiB0aGUgc3RhdGUgb2YgdGhlIG1hcCBiZWZvcmUgdGhlIGNoYW5nZXNcbiAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzTWFwSGVhZCA9IHRoaXMuX21hcEhlYWQ7XG4gICAgICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX3ByZXZpb3VzTWFwSGVhZDsgcmVjb3JkICE9PSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHQpIHtcbiAgICAgICAgICAgICAgICByZWNvcmQuX25leHRQcmV2aW91cyA9IHJlY29yZC5fbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVwZGF0ZSBgcmVjb3JkLnByZXZpb3VzVmFsdWVgIHdpdGggdGhlIHZhbHVlIG9mIHRoZSBpdGVtIGJlZm9yZSB0aGUgY2hhbmdlc1xuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byB1cGRhdGUgYWxsIGNoYW5nZWQgaXRlbXMgKHRoYXQncyB0aG9zZSB3aGljaCBoYXZlIGJlZW4gYWRkZWQgYW5kIGNoYW5nZWQpXG4gICAgICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2NoYW5nZXNIZWFkOyByZWNvcmQgIT09IG51bGw7IHJlY29yZCA9IHJlY29yZC5fbmV4dENoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICByZWNvcmQucHJldmlvdXNWYWx1ZSA9IHJlY29yZC5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHJlY29yZCA9IHRoaXMuX2FkZGl0aW9uc0hlYWQ7IHJlY29yZCAhPSBudWxsOyByZWNvcmQgPSByZWNvcmQuX25leHRBZGRlZCkge1xuICAgICAgICAgICAgICAgIHJlY29yZC5wcmV2aW91c1ZhbHVlID0gcmVjb3JkLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZXNIZWFkID0gdGhpcy5fY2hhbmdlc1RhaWwgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zSGVhZCA9IHRoaXMuX2FkZGl0aW9uc1RhaWwgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fcmVtb3ZhbHNIZWFkID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBZGQgdGhlIHJlY29yZCBvciBhIGdpdmVuIGtleSB0byB0aGUgbGlzdCBvZiBjaGFuZ2VzIG9ubHkgd2hlbiB0aGUgdmFsdWUgaGFzIGFjdHVhbGx5IGNoYW5nZWRcbiAgICBfbWF5YmVBZGRUb0NoYW5nZXMocmVjb3JkLCBuZXdWYWx1ZSkge1xuICAgICAgICBpZiAoIU9iamVjdC5pcyhuZXdWYWx1ZSwgcmVjb3JkLmN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJlY29yZC5wcmV2aW91c1ZhbHVlID0gcmVjb3JkLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIHJlY29yZC5jdXJyZW50VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX2FkZFRvQ2hhbmdlcyhyZWNvcmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9hZGRUb0FkZGl0aW9ucyhyZWNvcmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FkZGl0aW9uc0hlYWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZGl0aW9uc0hlYWQgPSB0aGlzLl9hZGRpdGlvbnNUYWlsID0gcmVjb3JkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbC5fbmV4dEFkZGVkID0gcmVjb3JkO1xuICAgICAgICAgICAgdGhpcy5fYWRkaXRpb25zVGFpbCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfYWRkVG9DaGFuZ2VzKHJlY29yZCkge1xuICAgICAgICBpZiAodGhpcy5fY2hhbmdlc0hlYWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoYW5nZXNIZWFkID0gdGhpcy5fY2hhbmdlc1RhaWwgPSByZWNvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VzVGFpbC5fbmV4dENoYW5nZWQgPSByZWNvcmQ7XG4gICAgICAgICAgICB0aGlzLl9jaGFuZ2VzVGFpbCA9IHJlY29yZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2ZvckVhY2gob2JqLCBmbikge1xuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBvYmouZm9yRWFjaChmbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goayA9PiBmbihvYmpba10sIGspKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIEtleVZhbHVlQ2hhbmdlUmVjb3JkXyB7XG4gICAgY29uc3RydWN0b3Ioa2V5KSB7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnByZXZpb3VzVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRWYWx1ZSA9IG51bGw7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5fbmV4dFByZXZpb3VzID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9wcmV2ID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9uZXh0QWRkZWQgPSBudWxsO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuX25leHRSZW1vdmVkID0gbnVsbDtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9uZXh0Q2hhbmdlZCA9IG51bGw7XG4gICAgfVxufVxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmZ1bmN0aW9uIGRlZmF1bHRJdGVyYWJsZURpZmZlcnNGYWN0b3J5KCkge1xuICAgIHJldHVybiBuZXcgSXRlcmFibGVEaWZmZXJzKFtuZXcgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeSgpXSk7XG59XG4vKipcbiAqIEEgcmVwb3NpdG9yeSBvZiBkaWZmZXJlbnQgaXRlcmFibGUgZGlmZmluZyBzdHJhdGVnaWVzIHVzZWQgYnkgTmdGb3IsIE5nQ2xhc3MsIGFuZCBvdGhlcnMuXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jbGFzcyBJdGVyYWJsZURpZmZlcnMge1xuICAgIGNvbnN0cnVjdG9yKGZhY3Rvcmllcykge1xuICAgICAgICB0aGlzLmZhY3RvcmllcyA9IGZhY3RvcmllcztcbiAgICB9XG4gICAgc3RhdGljIGNyZWF0ZShmYWN0b3JpZXMsIHBhcmVudCkge1xuICAgICAgICBpZiAocGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvcGllZCA9IHBhcmVudC5mYWN0b3JpZXMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZhY3RvcmllcyA9IGZhY3Rvcmllcy5jb25jYXQoY29waWVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEl0ZXJhYmxlRGlmZmVycyhmYWN0b3JpZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhbiBhcnJheSBvZiB7QGxpbmsgSXRlcmFibGVEaWZmZXJGYWN0b3J5fSBhbmQgcmV0dXJucyBhIHByb3ZpZGVyIHVzZWQgdG8gZXh0ZW5kIHRoZVxuICAgICAqIGluaGVyaXRlZCB7QGxpbmsgSXRlcmFibGVEaWZmZXJzfSBpbnN0YW5jZSB3aXRoIHRoZSBwcm92aWRlZCBmYWN0b3JpZXMgYW5kIHJldHVybiBhIG5ld1xuICAgICAqIHtAbGluayBJdGVyYWJsZURpZmZlcnN9IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHVzYWdlTm90ZXNcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBleHRlbmQgYW4gZXhpc3RpbmcgbGlzdCBvZiBmYWN0b3JpZXMsXG4gICAgICogd2hpY2ggd2lsbCBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGluamVjdG9yIGZvciB0aGlzIGNvbXBvbmVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAqIFRoaXMgc3RlcCBpcyBhbGwgdGhhdCdzIHJlcXVpcmVkIHRvIG1ha2UgYSBuZXcge0BsaW5rIEl0ZXJhYmxlRGlmZmVyfSBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAQ29tcG9uZW50KHtcbiAgICAgKiAgIHZpZXdQcm92aWRlcnM6IFtcbiAgICAgKiAgICAgSXRlcmFibGVEaWZmZXJzLmV4dGVuZChbbmV3IEltbXV0YWJsZUxpc3REaWZmZXIoKV0pXG4gICAgICogICBdXG4gICAgICogfSlcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBzdGF0aWMgZXh0ZW5kKGZhY3Rvcmllcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcHJvdmlkZTogSXRlcmFibGVEaWZmZXJzLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogKHBhcmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIGlmIHBhcmVudCBpcyBudWxsLCBpdCBtZWFucyB0aGF0IHdlIGFyZSBpbiB0aGUgcm9vdCBpbmplY3RvciBhbmQgd2UgaGF2ZSBqdXN0IG92ZXJyaWRkZW5cbiAgICAgICAgICAgICAgICAvLyB0aGUgZGVmYXVsdCBpbmplY3Rpb24gbWVjaGFuaXNtIGZvciBJdGVyYWJsZURpZmZlcnMsIGluIHN1Y2ggYSBjYXNlIGp1c3QgYXNzdW1lXG4gICAgICAgICAgICAgICAgLy8gYGRlZmF1bHRJdGVyYWJsZURpZmZlcnNGYWN0b3J5YC5cbiAgICAgICAgICAgICAgICByZXR1cm4gSXRlcmFibGVEaWZmZXJzLmNyZWF0ZShmYWN0b3JpZXMsIHBhcmVudCB8fCBkZWZhdWx0SXRlcmFibGVEaWZmZXJzRmFjdG9yeSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBEZXBlbmRlbmN5IHRlY2huaWNhbGx5IGlzbid0IG9wdGlvbmFsLCBidXQgd2UgY2FuIHByb3ZpZGUgYSBiZXR0ZXIgZXJyb3IgbWVzc2FnZSB0aGlzIHdheS5cbiAgICAgICAgICAgIGRlcHM6IFtbSXRlcmFibGVEaWZmZXJzLCBuZXcgU2tpcFNlbGYoKSwgbmV3IE9wdGlvbmFsKCldXVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmaW5kKGl0ZXJhYmxlKSB7XG4gICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmZhY3Rvcmllcy5maW5kKGYgPT4gZi5zdXBwb3J0cyhpdGVyYWJsZSkpO1xuICAgICAgICBpZiAoZmFjdG9yeSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yeTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9ICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpID9cbiAgICAgICAgICAgICAgICBgQ2Fubm90IGZpbmQgYSBkaWZmZXIgc3VwcG9ydGluZyBvYmplY3QgJyR7aXRlcmFibGV9JyBvZiB0eXBlICcke2dldFR5cGVOYW1lRm9yRGVidWdnaW5nKGl0ZXJhYmxlKX0nYCA6XG4gICAgICAgICAgICAgICAgJyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUnVudGltZUVycm9yKDkwMSAvKiBOT19TVVBQT1JUSU5HX0RJRkZFUl9GQUNUT1JZICovLCBlcnJvck1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqIEBub2NvbGxhcHNlICovXG5JdGVyYWJsZURpZmZlcnMuybVwcm92ID0gybXJtWRlZmluZUluamVjdGFibGUoeyB0b2tlbjogSXRlcmFibGVEaWZmZXJzLCBwcm92aWRlZEluOiAncm9vdCcsIGZhY3Rvcnk6IGRlZmF1bHRJdGVyYWJsZURpZmZlcnNGYWN0b3J5IH0pO1xuZnVuY3Rpb24gZ2V0VHlwZU5hbWVGb3JEZWJ1Z2dpbmcodHlwZSkge1xuICAgIHJldHVybiB0eXBlWyduYW1lJ10gfHwgdHlwZW9mIHR5cGU7XG59XG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdEtleVZhbHVlRGlmZmVyc0ZhY3RvcnkoKSB7XG4gICAgcmV0dXJuIG5ldyBLZXlWYWx1ZURpZmZlcnMoW25ldyBEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5KCldKTtcbn1cbi8qKlxuICogQSByZXBvc2l0b3J5IG9mIGRpZmZlcmVudCBNYXAgZGlmZmluZyBzdHJhdGVnaWVzIHVzZWQgYnkgTmdDbGFzcywgTmdTdHlsZSwgYW5kIG90aGVycy5cbiAqXG4gKiBAcHVibGljQXBpXG4gKi9cbmNsYXNzIEtleVZhbHVlRGlmZmVycyB7XG4gICAgY29uc3RydWN0b3IoZmFjdG9yaWVzKSB7XG4gICAgICAgIHRoaXMuZmFjdG9yaWVzID0gZmFjdG9yaWVzO1xuICAgIH1cbiAgICBzdGF0aWMgY3JlYXRlKGZhY3RvcmllcywgcGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvcGllZCA9IHBhcmVudC5mYWN0b3JpZXMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZhY3RvcmllcyA9IGZhY3Rvcmllcy5jb25jYXQoY29waWVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEtleVZhbHVlRGlmZmVycyhmYWN0b3JpZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUYWtlcyBhbiBhcnJheSBvZiB7QGxpbmsgS2V5VmFsdWVEaWZmZXJGYWN0b3J5fSBhbmQgcmV0dXJucyBhIHByb3ZpZGVyIHVzZWQgdG8gZXh0ZW5kIHRoZVxuICAgICAqIGluaGVyaXRlZCB7QGxpbmsgS2V5VmFsdWVEaWZmZXJzfSBpbnN0YW5jZSB3aXRoIHRoZSBwcm92aWRlZCBmYWN0b3JpZXMgYW5kIHJldHVybiBhIG5ld1xuICAgICAqIHtAbGluayBLZXlWYWx1ZURpZmZlcnN9IGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHVzYWdlTm90ZXNcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBleHRlbmQgYW4gZXhpc3RpbmcgbGlzdCBvZiBmYWN0b3JpZXMsXG4gICAgICogd2hpY2ggd2lsbCBvbmx5IGJlIGFwcGxpZWQgdG8gdGhlIGluamVjdG9yIGZvciB0aGlzIGNvbXBvbmVudCBhbmQgaXRzIGNoaWxkcmVuLlxuICAgICAqIFRoaXMgc3RlcCBpcyBhbGwgdGhhdCdzIHJlcXVpcmVkIHRvIG1ha2UgYSBuZXcge0BsaW5rIEtleVZhbHVlRGlmZmVyfSBhdmFpbGFibGUuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBAQ29tcG9uZW50KHtcbiAgICAgKiAgIHZpZXdQcm92aWRlcnM6IFtcbiAgICAgKiAgICAgS2V5VmFsdWVEaWZmZXJzLmV4dGVuZChbbmV3IEltbXV0YWJsZU1hcERpZmZlcigpXSlcbiAgICAgKiAgIF1cbiAgICAgKiB9KVxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHN0YXRpYyBleHRlbmQoZmFjdG9yaWVzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwcm92aWRlOiBLZXlWYWx1ZURpZmZlcnMsXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiAocGFyZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaWYgcGFyZW50IGlzIG51bGwsIGl0IG1lYW5zIHRoYXQgd2UgYXJlIGluIHRoZSByb290IGluamVjdG9yIGFuZCB3ZSBoYXZlIGp1c3Qgb3ZlcnJpZGRlblxuICAgICAgICAgICAgICAgIC8vIHRoZSBkZWZhdWx0IGluamVjdGlvbiBtZWNoYW5pc20gZm9yIEtleVZhbHVlRGlmZmVycywgaW4gc3VjaCBhIGNhc2UganVzdCBhc3N1bWVcbiAgICAgICAgICAgICAgICAvLyBgZGVmYXVsdEtleVZhbHVlRGlmZmVyc0ZhY3RvcnlgLlxuICAgICAgICAgICAgICAgIHJldHVybiBLZXlWYWx1ZURpZmZlcnMuY3JlYXRlKGZhY3RvcmllcywgcGFyZW50IHx8IGRlZmF1bHRLZXlWYWx1ZURpZmZlcnNGYWN0b3J5KCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIC8vIERlcGVuZGVuY3kgdGVjaG5pY2FsbHkgaXNuJ3Qgb3B0aW9uYWwsIGJ1dCB3ZSBjYW4gcHJvdmlkZSBhIGJldHRlciBlcnJvciBtZXNzYWdlIHRoaXMgd2F5LlxuICAgICAgICAgICAgZGVwczogW1tLZXlWYWx1ZURpZmZlcnMsIG5ldyBTa2lwU2VsZigpLCBuZXcgT3B0aW9uYWwoKV1dXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZpbmQoa3YpIHtcbiAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMuZmFjdG9yaWVzLmZpbmQoZiA9PiBmLnN1cHBvcnRzKGt2KSk7XG4gICAgICAgIGlmIChmYWN0b3J5KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yeTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSA/XG4gICAgICAgICAgICBgQ2Fubm90IGZpbmQgYSBkaWZmZXIgc3VwcG9ydGluZyBvYmplY3QgJyR7a3Z9J2AgOlxuICAgICAgICAgICAgJyc7XG4gICAgICAgIHRocm93IG5ldyBSdW50aW1lRXJyb3IoOTAxIC8qIE5PX1NVUFBPUlRJTkdfRElGRkVSX0ZBQ1RPUlkgKi8sIGVycm9yTWVzc2FnZSk7XG4gICAgfVxufVxuLyoqIEBub2NvbGxhcHNlICovXG5LZXlWYWx1ZURpZmZlcnMuybVwcm92ID0gybXJtWRlZmluZUluamVjdGFibGUoeyB0b2tlbjogS2V5VmFsdWVEaWZmZXJzLCBwcm92aWRlZEluOiAncm9vdCcsIGZhY3Rvcnk6IGRlZmF1bHRLZXlWYWx1ZURpZmZlcnNGYWN0b3J5IH0pO1xuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8qKlxuICogU3RydWN0dXJhbCBkaWZmaW5nIGZvciBgT2JqZWN0YHMgYW5kIGBNYXBgcy5cbiAqL1xuY29uc3Qga2V5VmFsRGlmZiA9IFtuZXcgRGVmYXVsdEtleVZhbHVlRGlmZmVyRmFjdG9yeSgpXTtcbi8qKlxuICogU3RydWN0dXJhbCBkaWZmaW5nIGZvciBgSXRlcmFibGVgIHR5cGVzIHN1Y2ggYXMgYEFycmF5YHMuXG4gKi9cbmNvbnN0IGl0ZXJhYmxlRGlmZiA9IFtuZXcgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyRmFjdG9yeSgpXTtcbmNvbnN0IGRlZmF1bHRJdGVyYWJsZURpZmZlcnMgPSBuZXcgSXRlcmFibGVEaWZmZXJzKGl0ZXJhYmxlRGlmZik7XG5jb25zdCBkZWZhdWx0S2V5VmFsdWVEaWZmZXJzID0gbmV3IEtleVZhbHVlRGlmZmVycyhrZXlWYWxEaWZmKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuY29uc3QgX0NPUkVfUExBVEZPUk1fUFJPVklERVJTID0gW1xuICAgIC8vIFNldCBhIGRlZmF1bHQgcGxhdGZvcm0gbmFtZSBmb3IgcGxhdGZvcm1zIHRoYXQgZG9uJ3Qgc2V0IGl0IGV4cGxpY2l0bHkuXG4gICAgeyBwcm92aWRlOiBQTEFURk9STV9JRCwgdXNlVmFsdWU6ICd1bmtub3duJyB9LFxuICAgIHsgcHJvdmlkZTogUGxhdGZvcm1SZWYsIGRlcHM6IFtJbmplY3Rvcl0gfSxcbiAgICB7IHByb3ZpZGU6IFRlc3RhYmlsaXR5UmVnaXN0cnksIGRlcHM6IFtdIH0sXG4gICAgeyBwcm92aWRlOiBDb25zb2xlLCBkZXBzOiBbXSB9LFxuXTtcbi8qKlxuICogVGhpcyBwbGF0Zm9ybSBoYXMgdG8gYmUgaW5jbHVkZWQgaW4gYW55IG90aGVyIHBsYXRmb3JtXG4gKlxuICogQHB1YmxpY0FwaVxuICovXG5jb25zdCBwbGF0Zm9ybUNvcmUgPSBjcmVhdGVQbGF0Zm9ybUZhY3RvcnkobnVsbCwgJ2NvcmUnLCBfQ09SRV9QTEFURk9STV9QUk9WSURFUlMpO1xuXG4vKipcbiAqIFJlLWV4cG9ydGVkIGJ5IGBCcm93c2VyTW9kdWxlYCwgd2hpY2ggaXMgaW5jbHVkZWQgYXV0b21hdGljYWxseSBpbiB0aGUgcm9vdFxuICogYEFwcE1vZHVsZWAgd2hlbiB5b3UgY3JlYXRlIGEgbmV3IGFwcCB3aXRoIHRoZSBDTEkgYG5ld2AgY29tbWFuZC4gRWFnZXJseSBpbmplY3RzXG4gKiBgQXBwbGljYXRpb25SZWZgIHRvIGluc3RhbnRpYXRlIGl0LlxuICpcbiAqIEBwdWJsaWNBcGlcbiAqL1xuY2xhc3MgQXBwbGljYXRpb25Nb2R1bGUge1xuICAgIC8vIEluamVjdCBBcHBsaWNhdGlvblJlZiB0byBtYWtlIGl0IGVhZ2VyLi4uXG4gICAgY29uc3RydWN0b3IoYXBwUmVmKSB7IH1cbn1cbkFwcGxpY2F0aW9uTW9kdWxlLsm1ZmFjID0gZnVuY3Rpb24gQXBwbGljYXRpb25Nb2R1bGVfRmFjdG9yeSh0KSB7IHJldHVybiBuZXcgKHQgfHwgQXBwbGljYXRpb25Nb2R1bGUpKMm1ybVpbmplY3QoQXBwbGljYXRpb25SZWYpKTsgfTtcbkFwcGxpY2F0aW9uTW9kdWxlLsm1bW9kID0gLypAX19QVVJFX18qLyDJtcm1ZGVmaW5lTmdNb2R1bGUoeyB0eXBlOiBBcHBsaWNhdGlvbk1vZHVsZSB9KTtcbkFwcGxpY2F0aW9uTW9kdWxlLsm1aW5qID0gLypAX19QVVJFX18qLyDJtcm1ZGVmaW5lSW5qZWN0b3Ioe30pO1xuKGZ1bmN0aW9uICgpIHtcbiAgICAodHlwZW9mIG5nRGV2TW9kZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCBuZ0Rldk1vZGUpICYmIHNldENsYXNzTWV0YWRhdGEoQXBwbGljYXRpb25Nb2R1bGUsIFt7XG4gICAgICAgICAgICB0eXBlOiBOZ01vZHVsZVxuICAgICAgICB9XSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gW3sgdHlwZTogQXBwbGljYXRpb25SZWYgfV07IH0sIG51bGwpO1xufSkoKTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBUT0RPKGFseGh1Yik6IGFsbG93cyB0ZXN0cyB0byBjb21waWxlLCBjYW4gYmUgcmVtb3ZlZCB3aGVuIHRlc3RzIGhhdmUgYmVlbiB1cGRhdGVkLlxuY29uc3QgybVpdnlFbmFibGVkID0gdHJ1ZTtcblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vKipcbiAqIENvbXBpbGVzIGEgcGFydGlhbCBkaXJlY3RpdmUgZGVjbGFyYXRpb24gb2JqZWN0IGludG8gYSBmdWxsIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1bmdEZWNsYXJlRGlyZWN0aXZlKGRlY2wpIHtcbiAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHsgdXNhZ2U6IDEgLyogUGFydGlhbERlY2xhcmF0aW9uICovLCBraW5kOiAnZGlyZWN0aXZlJywgdHlwZTogZGVjbC50eXBlIH0pO1xuICAgIHJldHVybiBjb21waWxlci5jb21waWxlRGlyZWN0aXZlRGVjbGFyYXRpb24oYW5ndWxhckNvcmVFbnYsIGBuZzovLy8ke2RlY2wudHlwZS5uYW1lfS/JtWZhYy5qc2AsIGRlY2wpO1xufVxuLyoqXG4gKiBFdmFsdWF0ZXMgdGhlIGNsYXNzIG1ldGFkYXRhIGRlY2xhcmF0aW9uLlxuICpcbiAqIEBjb2RlR2VuQXBpXG4gKi9cbmZ1bmN0aW9uIMm1ybVuZ0RlY2xhcmVDbGFzc01ldGFkYXRhKGRlY2wpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHNldENsYXNzTWV0YWRhdGEoZGVjbC50eXBlLCBkZWNsLmRlY29yYXRvcnMsIChfYSA9IGRlY2wuY3RvclBhcmFtZXRlcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGwsIChfYiA9IGRlY2wucHJvcERlY29yYXRvcnMpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IG51bGwpO1xufVxuLyoqXG4gKiBDb21waWxlcyBhIHBhcnRpYWwgY29tcG9uZW50IGRlY2xhcmF0aW9uIG9iamVjdCBpbnRvIGEgZnVsbCBjb21wb25lbnQgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtW5nRGVjbGFyZUNvbXBvbmVudChkZWNsKSB7XG4gICAgY29uc3QgY29tcGlsZXIgPSBnZXRDb21waWxlckZhY2FkZSh7IHVzYWdlOiAxIC8qIFBhcnRpYWxEZWNsYXJhdGlvbiAqLywga2luZDogJ2NvbXBvbmVudCcsIHR5cGU6IGRlY2wudHlwZSB9KTtcbiAgICByZXR1cm4gY29tcGlsZXIuY29tcGlsZUNvbXBvbmVudERlY2xhcmF0aW9uKGFuZ3VsYXJDb3JlRW52LCBgbmc6Ly8vJHtkZWNsLnR5cGUubmFtZX0vybVjbXAuanNgLCBkZWNsKTtcbn1cbi8qKlxuICogQ29tcGlsZXMgYSBwYXJ0aWFsIHBpcGUgZGVjbGFyYXRpb24gb2JqZWN0IGludG8gYSBmdWxsIHBpcGUgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtW5nRGVjbGFyZUZhY3RvcnkoZGVjbCkge1xuICAgIGNvbnN0IGNvbXBpbGVyID0gZ2V0Q29tcGlsZXJGYWNhZGUoe1xuICAgICAgICB1c2FnZTogMSAvKiBQYXJ0aWFsRGVjbGFyYXRpb24gKi8sXG4gICAgICAgIGtpbmQ6IGdldEZhY3RvcnlLaW5kKGRlY2wudGFyZ2V0KSxcbiAgICAgICAgdHlwZTogZGVjbC50eXBlXG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbXBpbGVyLmNvbXBpbGVGYWN0b3J5RGVjbGFyYXRpb24oYW5ndWxhckNvcmVFbnYsIGBuZzovLy8ke2RlY2wudHlwZS5uYW1lfS/JtWZhYy5qc2AsIGRlY2wpO1xufVxuZnVuY3Rpb24gZ2V0RmFjdG9yeUtpbmQodGFyZ2V0KSB7XG4gICAgc3dpdGNoICh0YXJnZXQpIHtcbiAgICAgICAgY2FzZSBGYWN0b3J5VGFyZ2V0LkRpcmVjdGl2ZTpcbiAgICAgICAgICAgIHJldHVybiAnZGlyZWN0aXZlJztcbiAgICAgICAgY2FzZSBGYWN0b3J5VGFyZ2V0LkNvbXBvbmVudDpcbiAgICAgICAgICAgIHJldHVybiAnY29tcG9uZW50JztcbiAgICAgICAgY2FzZSBGYWN0b3J5VGFyZ2V0LkluamVjdGFibGU6XG4gICAgICAgICAgICByZXR1cm4gJ2luamVjdGFibGUnO1xuICAgICAgICBjYXNlIEZhY3RvcnlUYXJnZXQuUGlwZTpcbiAgICAgICAgICAgIHJldHVybiAncGlwZSc7XG4gICAgICAgIGNhc2UgRmFjdG9yeVRhcmdldC5OZ01vZHVsZTpcbiAgICAgICAgICAgIHJldHVybiAnTmdNb2R1bGUnO1xuICAgIH1cbn1cbi8qKlxuICogQ29tcGlsZXMgYSBwYXJ0aWFsIGluamVjdGFibGUgZGVjbGFyYXRpb24gb2JqZWN0IGludG8gYSBmdWxsIGluamVjdGFibGUgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtW5nRGVjbGFyZUluamVjdGFibGUoZGVjbCkge1xuICAgIGNvbnN0IGNvbXBpbGVyID0gZ2V0Q29tcGlsZXJGYWNhZGUoeyB1c2FnZTogMSAvKiBQYXJ0aWFsRGVjbGFyYXRpb24gKi8sIGtpbmQ6ICdpbmplY3RhYmxlJywgdHlwZTogZGVjbC50eXBlIH0pO1xuICAgIHJldHVybiBjb21waWxlci5jb21waWxlSW5qZWN0YWJsZURlY2xhcmF0aW9uKGFuZ3VsYXJDb3JlRW52LCBgbmc6Ly8vJHtkZWNsLnR5cGUubmFtZX0vybVwcm92LmpzYCwgZGVjbCk7XG59XG4vKipcbiAqIENvbXBpbGVzIGEgcGFydGlhbCBpbmplY3RvciBkZWNsYXJhdGlvbiBvYmplY3QgaW50byBhIGZ1bGwgaW5qZWN0b3IgZGVmaW5pdGlvbiBvYmplY3QuXG4gKlxuICogQGNvZGVHZW5BcGlcbiAqL1xuZnVuY3Rpb24gybXJtW5nRGVjbGFyZUluamVjdG9yKGRlY2wpIHtcbiAgICBjb25zdCBjb21waWxlciA9IGdldENvbXBpbGVyRmFjYWRlKHsgdXNhZ2U6IDEgLyogUGFydGlhbERlY2xhcmF0aW9uICovLCBraW5kOiAnTmdNb2R1bGUnLCB0eXBlOiBkZWNsLnR5cGUgfSk7XG4gICAgcmV0dXJuIGNvbXBpbGVyLmNvbXBpbGVJbmplY3RvckRlY2xhcmF0aW9uKGFuZ3VsYXJDb3JlRW52LCBgbmc6Ly8vJHtkZWNsLnR5cGUubmFtZX0vybVpbmouanNgLCBkZWNsKTtcbn1cbi8qKlxuICogQ29tcGlsZXMgYSBwYXJ0aWFsIE5nTW9kdWxlIGRlY2xhcmF0aW9uIG9iamVjdCBpbnRvIGEgZnVsbCBOZ01vZHVsZSBkZWZpbml0aW9uIG9iamVjdC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1bmdEZWNsYXJlTmdNb2R1bGUoZGVjbCkge1xuICAgIGNvbnN0IGNvbXBpbGVyID0gZ2V0Q29tcGlsZXJGYWNhZGUoeyB1c2FnZTogMSAvKiBQYXJ0aWFsRGVjbGFyYXRpb24gKi8sIGtpbmQ6ICdOZ01vZHVsZScsIHR5cGU6IGRlY2wudHlwZSB9KTtcbiAgICByZXR1cm4gY29tcGlsZXIuY29tcGlsZU5nTW9kdWxlRGVjbGFyYXRpb24oYW5ndWxhckNvcmVFbnYsIGBuZzovLy8ke2RlY2wudHlwZS5uYW1lfS/JtW1vZC5qc2AsIGRlY2wpO1xufVxuLyoqXG4gKiBDb21waWxlcyBhIHBhcnRpYWwgcGlwZSBkZWNsYXJhdGlvbiBvYmplY3QgaW50byBhIGZ1bGwgcGlwZSBkZWZpbml0aW9uIG9iamVjdC5cbiAqXG4gKiBAY29kZUdlbkFwaVxuICovXG5mdW5jdGlvbiDJtcm1bmdEZWNsYXJlUGlwZShkZWNsKSB7XG4gICAgY29uc3QgY29tcGlsZXIgPSBnZXRDb21waWxlckZhY2FkZSh7IHVzYWdlOiAxIC8qIFBhcnRpYWxEZWNsYXJhdGlvbiAqLywga2luZDogJ3BpcGUnLCB0eXBlOiBkZWNsLnR5cGUgfSk7XG4gICAgcmV0dXJuIGNvbXBpbGVyLmNvbXBpbGVQaXBlRGVjbGFyYXRpb24oYW5ndWxhckNvcmVFbnYsIGBuZzovLy8ke2RlY2wudHlwZS5uYW1lfS/JtXBpcGUuanNgLCBkZWNsKTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBjbGFuZy1mb3JtYXQgb25cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5pZiAodHlwZW9mIG5nRGV2TW9kZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbmdEZXZNb2RlKSB7XG4gICAgLy8gVGhpcyBoZWxwZXIgaXMgdG8gZ2l2ZSBhIHJlYXNvbmFibGUgZXJyb3IgbWVzc2FnZSB0byBwZW9wbGUgdXBncmFkaW5nIHRvIHY5IHRoYXQgaGF2ZSBub3QgeWV0XG4gICAgLy8gaW5zdGFsbGVkIGBAYW5ndWxhci9sb2NhbGl6ZWAgaW4gdGhlaXIgYXBwLlxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tdG9wbGV2ZWwtcHJvcGVydHktYWNjZXNzXG4gICAgX2dsb2JhbC4kbG9jYWxpemUgPSBfZ2xvYmFsLiRsb2NhbGl6ZSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSXQgbG9va3MgbGlrZSB5b3VyIGFwcGxpY2F0aW9uIG9yIG9uZSBvZiBpdHMgZGVwZW5kZW5jaWVzIGlzIHVzaW5nIGkxOG4uXFxuJyArXG4gICAgICAgICAgICAnQW5ndWxhciA5IGludHJvZHVjZWQgYSBnbG9iYWwgYCRsb2NhbGl6ZSgpYCBmdW5jdGlvbiB0aGF0IG5lZWRzIHRvIGJlIGxvYWRlZC5cXG4nICtcbiAgICAgICAgICAgICdQbGVhc2UgcnVuIGBuZyBhZGQgQGFuZ3VsYXIvbG9jYWxpemVgIGZyb20gdGhlIEFuZ3VsYXIgQ0xJLlxcbicgK1xuICAgICAgICAgICAgJyhGb3Igbm9uLUNMSSBwcm9qZWN0cywgYWRkIGBpbXBvcnQgXFwnQGFuZ3VsYXIvbG9jYWxpemUvaW5pdFxcJztgIHRvIHlvdXIgYHBvbHlmaWxscy50c2AgZmlsZS5cXG4nICtcbiAgICAgICAgICAgICdGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nIGFwcGxpY2F0aW9ucyBhZGQgdGhlIGltcG9ydCB0byB5b3VyIGBtYWluLnNlcnZlci50c2AgZmlsZS4pJyk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG4vLyBUaGlzIGZpbGUgb25seSByZWV4cG9ydHMgY29udGVudCBvZiB0aGUgYHNyY2AgZm9sZGVyLiBLZWVwIGl0IHRoYXQgd2F5LlxuXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuLyoqXG4gKiBHZW5lcmF0ZWQgYnVuZGxlIGluZGV4LiBEbyBub3QgZWRpdC5cbiAqL1xuXG5leHBvcnQgeyBBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTLCBBUFBfQk9PVFNUUkFQX0xJU1RFTkVSLCBBUFBfSUQsIEFQUF9JTklUSUFMSVpFUiwgQXBwbGljYXRpb25Jbml0U3RhdHVzLCBBcHBsaWNhdGlvbk1vZHVsZSwgQXBwbGljYXRpb25SZWYsIEF0dHJpYnV0ZSwgQ09NUElMRVJfT1BUSU9OUywgQ1VTVE9NX0VMRU1FTlRTX1NDSEVNQSwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBDb21waWxlciwgQ29tcGlsZXJGYWN0b3J5LCBDb21wb25lbnQsIENvbXBvbmVudEZhY3RvcnkkMSBhcyBDb21wb25lbnRGYWN0b3J5LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIkMSBhcyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiQxIGFzIENvbXBvbmVudFJlZiwgQ29udGVudENoaWxkLCBDb250ZW50Q2hpbGRyZW4sIERFRkFVTFRfQ1VSUkVOQ1lfQ09ERSwgRGVidWdFbGVtZW50LCBEZWJ1Z0V2ZW50TGlzdGVuZXIsIERlYnVnTm9kZSwgRGVmYXVsdEl0ZXJhYmxlRGlmZmVyLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEVtYmVkZGVkVmlld1JlZiwgRXJyb3JIYW5kbGVyLCBFdmVudEVtaXR0ZXIsIEhvc3QsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIElOSkVDVE9SLCBJbmplY3QsIEluamVjdEZsYWdzLCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgSW5qZWN0b3IsIElucHV0LCBJdGVyYWJsZURpZmZlcnMsIEtleVZhbHVlRGlmZmVycywgTE9DQUxFX0lELCBNaXNzaW5nVHJhbnNsYXRpb25TdHJhdGVneSwgTW9kdWxlV2l0aENvbXBvbmVudEZhY3RvcmllcywgTk9fRVJST1JTX1NDSEVNQSwgTmdNb2R1bGUsIE5nTW9kdWxlRmFjdG9yeSQxIGFzIE5nTW9kdWxlRmFjdG9yeSwgTmdNb2R1bGVSZWYkMSBhcyBOZ01vZHVsZVJlZiwgTmdQcm9iZVRva2VuLCBOZ1pvbmUsIE9wdGlvbmFsLCBPdXRwdXQsIFBBQ0tBR0VfUk9PVF9VUkwsIFBMQVRGT1JNX0lELCBQTEFURk9STV9JTklUSUFMSVpFUiwgUGlwZSwgUGxhdGZvcm1SZWYsIFF1ZXJ5LCBRdWVyeUxpc3QsIFJlZmxlY3RpdmVJbmplY3RvciwgUmVmbGVjdGl2ZUtleSwgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyLCBSZW5kZXJlclN0eWxlRmxhZ3MyLCBSZXNvbHZlZFJlZmxlY3RpdmVGYWN0b3J5LCBTYW5pdGl6ZXIsIFNlY3VyaXR5Q29udGV4dCwgU2VsZiwgU2ltcGxlQ2hhbmdlLCBTa2lwU2VsZiwgVFJBTlNMQVRJT05TLCBUUkFOU0xBVElPTlNfRk9STUFULCBUZW1wbGF0ZVJlZiwgVGVzdGFiaWxpdHksIFRlc3RhYmlsaXR5UmVnaXN0cnksIFR5cGUsIFZFUlNJT04sIFZlcnNpb24sIFZpZXdDaGlsZCwgVmlld0NoaWxkcmVuLCBWaWV3Q29udGFpbmVyUmVmLCBWaWV3RW5jYXBzdWxhdGlvbiQxIGFzIFZpZXdFbmNhcHN1bGF0aW9uLCBWaWV3UmVmLCBhc05hdGl2ZUVsZW1lbnRzLCBhc3NlcnRQbGF0Zm9ybSwgY3JlYXRlTmdNb2R1bGVSZWYsIGNyZWF0ZVBsYXRmb3JtLCBjcmVhdGVQbGF0Zm9ybUZhY3RvcnksIGRlZmluZUluamVjdGFibGUsIGRlc3Ryb3lQbGF0Zm9ybSwgZW5hYmxlUHJvZE1vZGUsIGZvcndhcmRSZWYsIGdldERlYnVnTm9kZSwgZ2V0TW9kdWxlRmFjdG9yeSwgZ2V0TmdNb2R1bGVCeUlkLCBnZXRQbGF0Zm9ybSwgaW5qZWN0LCBpc0Rldk1vZGUsIHBsYXRmb3JtQ29yZSwgcmVzb2x2ZUZvcndhcmRSZWYsIHNldFRlc3RhYmlsaXR5R2V0dGVyLCBBTExPV19NVUxUSVBMRV9QTEFURk9STVMgYXMgybVBTExPV19NVUxUSVBMRV9QTEFURk9STVMsIEFQUF9JRF9SQU5ET01fUFJPVklERVIgYXMgybVBUFBfSURfUkFORE9NX1BST1ZJREVSLCBDaGFuZ2VEZXRlY3RvclN0YXR1cyBhcyDJtUNoYW5nZURldGVjdG9yU3RhdHVzLCBDb21wb25lbnRGYWN0b3J5JDEgYXMgybVDb21wb25lbnRGYWN0b3J5LCBDb25zb2xlIGFzIMm1Q29uc29sZSwgREVGQVVMVF9MT0NBTEVfSUQgYXMgybVERUZBVUxUX0xPQ0FMRV9JRCwgSU5KRUNUT1JfU0NPUEUgYXMgybVJTkpFQ1RPUl9TQ09QRSwgTGlmZWN5Y2xlSG9va3NGZWF0dXJlIGFzIMm1TGlmZWN5Y2xlSG9va3NGZWF0dXJlLCBMb2NhbGVEYXRhSW5kZXggYXMgybVMb2NhbGVEYXRhSW5kZXgsIE5HX0NPTVBfREVGIGFzIMm1TkdfQ09NUF9ERUYsIE5HX0RJUl9ERUYgYXMgybVOR19ESVJfREVGLCBOR19FTEVNRU5UX0lEIGFzIMm1TkdfRUxFTUVOVF9JRCwgTkdfSU5KX0RFRiBhcyDJtU5HX0lOSl9ERUYsIE5HX01PRF9ERUYgYXMgybVOR19NT0RfREVGLCBOR19QSVBFX0RFRiBhcyDJtU5HX1BJUEVfREVGLCBOR19QUk9WX0RFRiBhcyDJtU5HX1BST1ZfREVGLCBOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SIGFzIMm1Tk9UX0ZPVU5EX0NIRUNLX09OTFlfRUxFTUVOVF9JTkpFQ1RPUiwgTk9fQ0hBTkdFIGFzIMm1Tk9fQ0hBTkdFLCBOZ01vZHVsZUZhY3RvcnkgYXMgybVOZ01vZHVsZUZhY3RvcnksIE5vb3BOZ1pvbmUgYXMgybVOb29wTmdab25lLCBSZWZsZWN0aW9uQ2FwYWJpbGl0aWVzIGFzIMm1UmVmbGVjdGlvbkNhcGFiaWxpdGllcywgQ29tcG9uZW50RmFjdG9yeSBhcyDJtVJlbmRlcjNDb21wb25lbnRGYWN0b3J5LCBDb21wb25lbnRSZWYgYXMgybVSZW5kZXIzQ29tcG9uZW50UmVmLCBOZ01vZHVsZVJlZiBhcyDJtVJlbmRlcjNOZ01vZHVsZVJlZiwgUnVudGltZUVycm9yIGFzIMm1UnVudGltZUVycm9yLCBWaWV3UmVmJDEgYXMgybVWaWV3UmVmLCBfc2FuaXRpemVIdG1sIGFzIMm1X3Nhbml0aXplSHRtbCwgX3Nhbml0aXplVXJsIGFzIMm1X3Nhbml0aXplVXJsLCBhbGxvd1Nhbml0aXphdGlvbkJ5cGFzc0FuZFRocm93IGFzIMm1YWxsb3dTYW5pdGl6YXRpb25CeXBhc3NBbmRUaHJvdywgYnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RIdG1sIGFzIMm1YnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RIdG1sLCBieXBhc3NTYW5pdGl6YXRpb25UcnVzdFJlc291cmNlVXJsIGFzIMm1YnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RSZXNvdXJjZVVybCwgYnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RTY3JpcHQgYXMgybVieXBhc3NTYW5pdGl6YXRpb25UcnVzdFNjcmlwdCwgYnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RTdHlsZSBhcyDJtWJ5cGFzc1Nhbml0aXphdGlvblRydXN0U3R5bGUsIGJ5cGFzc1Nhbml0aXphdGlvblRydXN0VXJsIGFzIMm1YnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RVcmwsIGNsZWFyUmVzb2x1dGlvbk9mQ29tcG9uZW50UmVzb3VyY2VzUXVldWUgYXMgybVjbGVhclJlc29sdXRpb25PZkNvbXBvbmVudFJlc291cmNlc1F1ZXVlLCBjb21waWxlQ29tcG9uZW50IGFzIMm1Y29tcGlsZUNvbXBvbmVudCwgY29tcGlsZURpcmVjdGl2ZSBhcyDJtWNvbXBpbGVEaXJlY3RpdmUsIGNvbXBpbGVOZ01vZHVsZSBhcyDJtWNvbXBpbGVOZ01vZHVsZSwgY29tcGlsZU5nTW9kdWxlRGVmcyBhcyDJtWNvbXBpbGVOZ01vZHVsZURlZnMsIGNvbXBpbGVOZ01vZHVsZUZhY3RvcnkgYXMgybVjb21waWxlTmdNb2R1bGVGYWN0b3J5LCBjb21waWxlUGlwZSBhcyDJtWNvbXBpbGVQaXBlLCBjcmVhdGVJbmplY3RvciBhcyDJtWNyZWF0ZUluamVjdG9yLCBkZWZhdWx0SXRlcmFibGVEaWZmZXJzIGFzIMm1ZGVmYXVsdEl0ZXJhYmxlRGlmZmVycywgZGVmYXVsdEtleVZhbHVlRGlmZmVycyBhcyDJtWRlZmF1bHRLZXlWYWx1ZURpZmZlcnMsIGRldGVjdENoYW5nZXMgYXMgybVkZXRlY3RDaGFuZ2VzLCBkZXZNb2RlRXF1YWwgYXMgybVkZXZNb2RlRXF1YWwsIGZpbmRMb2NhbGVEYXRhIGFzIMm1ZmluZExvY2FsZURhdGEsIGZsdXNoTW9kdWxlU2NvcGluZ1F1ZXVlQXNNdWNoQXNQb3NzaWJsZSBhcyDJtWZsdXNoTW9kdWxlU2NvcGluZ1F1ZXVlQXNNdWNoQXNQb3NzaWJsZSwgZ2V0RGVidWdOb2RlIGFzIMm1Z2V0RGVidWdOb2RlLCBnZXREZWJ1Z05vZGVSMiBhcyDJtWdldERlYnVnTm9kZVIyLCBnZXREaXJlY3RpdmVzIGFzIMm1Z2V0RGlyZWN0aXZlcywgZ2V0SG9zdEVsZW1lbnQgYXMgybVnZXRIb3N0RWxlbWVudCwgZ2V0SW5qZWN0YWJsZURlZiBhcyDJtWdldEluamVjdGFibGVEZWYsIGdldExDb250ZXh0IGFzIMm1Z2V0TENvbnRleHQsIGdldExvY2FsZUN1cnJlbmN5Q29kZSBhcyDJtWdldExvY2FsZUN1cnJlbmN5Q29kZSwgZ2V0TG9jYWxlUGx1cmFsQ2FzZSBhcyDJtWdldExvY2FsZVBsdXJhbENhc2UsIGdldFNhbml0aXphdGlvbkJ5cGFzc1R5cGUgYXMgybVnZXRTYW5pdGl6YXRpb25CeXBhc3NUeXBlLCBfZ2xvYmFsIGFzIMm1Z2xvYmFsLCBpbmplY3RDaGFuZ2VEZXRlY3RvclJlZiBhcyDJtWluamVjdENoYW5nZURldGVjdG9yUmVmLCBpc0JvdW5kVG9Nb2R1bGUgYXMgybVpc0JvdW5kVG9Nb2R1bGUsIGlzRGVmYXVsdENoYW5nZURldGVjdGlvblN0cmF0ZWd5IGFzIMm1aXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIGlzTGlzdExpa2VJdGVyYWJsZSBhcyDJtWlzTGlzdExpa2VJdGVyYWJsZSwgaXNPYnNlcnZhYmxlIGFzIMm1aXNPYnNlcnZhYmxlLCBpc1Byb21pc2UgYXMgybVpc1Byb21pc2UsIGlzU3Vic2NyaWJhYmxlIGFzIMm1aXNTdWJzY3JpYmFibGUsIMm1aXZ5RW5hYmxlZCwgbWFrZURlY29yYXRvciBhcyDJtW1ha2VEZWNvcmF0b3IsIG1hcmtEaXJ0eSBhcyDJtW1hcmtEaXJ0eSwgbm9TaWRlRWZmZWN0cyBhcyDJtW5vU2lkZUVmZmVjdHMsIHBhdGNoQ29tcG9uZW50RGVmV2l0aFNjb3BlIGFzIMm1cGF0Y2hDb21wb25lbnREZWZXaXRoU2NvcGUsIHB1Ymxpc2hEZWZhdWx0R2xvYmFsVXRpbHMkMSBhcyDJtXB1Ymxpc2hEZWZhdWx0R2xvYmFsVXRpbHMsIHB1Ymxpc2hHbG9iYWxVdGlsIGFzIMm1cHVibGlzaEdsb2JhbFV0aWwsIHJlZ2lzdGVyTG9jYWxlRGF0YSBhcyDJtXJlZ2lzdGVyTG9jYWxlRGF0YSwgcmVnaXN0ZXJOZ01vZHVsZVR5cGUgYXMgybVyZWdpc3Rlck5nTW9kdWxlVHlwZSwgcmVuZGVyQ29tcG9uZW50IGFzIMm1cmVuZGVyQ29tcG9uZW50LCByZXNldENvbXBpbGVkQ29tcG9uZW50cyBhcyDJtXJlc2V0Q29tcGlsZWRDb21wb25lbnRzLCByZXNldEppdE9wdGlvbnMgYXMgybVyZXNldEppdE9wdGlvbnMsIHJlc29sdmVDb21wb25lbnRSZXNvdXJjZXMgYXMgybVyZXNvbHZlQ29tcG9uZW50UmVzb3VyY2VzLCBzZXRDbGFzc01ldGFkYXRhIGFzIMm1c2V0Q2xhc3NNZXRhZGF0YSwgc2V0Q3VycmVudEluamVjdG9yIGFzIMm1c2V0Q3VycmVudEluamVjdG9yLCBzZXREb2N1bWVudCBhcyDJtXNldERvY3VtZW50LCBzZXRMb2NhbGVJZCBhcyDJtXNldExvY2FsZUlkLCBzdG9yZSBhcyDJtXN0b3JlLCBzdHJpbmdpZnkgYXMgybVzdHJpbmdpZnksIHRyYW5zaXRpdmVTY29wZXNGb3IgYXMgybV0cmFuc2l0aXZlU2NvcGVzRm9yLCB1bnJlZ2lzdGVyQWxsTG9jYWxlRGF0YSBhcyDJtXVucmVnaXN0ZXJMb2NhbGVEYXRhLCB1bndyYXBTYWZlVmFsdWUgYXMgybV1bndyYXBTYWZlVmFsdWUsIHdoZW5SZW5kZXJlZCBhcyDJtXdoZW5SZW5kZXJlZCwgybXJtUNvcHlEZWZpbml0aW9uRmVhdHVyZSwgRmFjdG9yeVRhcmdldCBhcyDJtcm1RmFjdG9yeVRhcmdldCwgybXJtUluaGVyaXREZWZpbml0aW9uRmVhdHVyZSwgybXJtU5nT25DaGFuZ2VzRmVhdHVyZSwgybXJtVByb3ZpZGVyc0ZlYXR1cmUsIMm1ybVhZHZhbmNlLCDJtcm1YXR0cmlidXRlLCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUxLCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUyLCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGUzLCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU0LCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU1LCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU2LCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU3LCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGU4LCDJtcm1YXR0cmlidXRlSW50ZXJwb2xhdGVWLCDJtcm1Y2xhc3NNYXAsIMm1ybVjbGFzc01hcEludGVycG9sYXRlMSwgybXJtWNsYXNzTWFwSW50ZXJwb2xhdGUyLCDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTMsIMm1ybVjbGFzc01hcEludGVycG9sYXRlNCwgybXJtWNsYXNzTWFwSW50ZXJwb2xhdGU1LCDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZTYsIMm1ybVjbGFzc01hcEludGVycG9sYXRlNywgybXJtWNsYXNzTWFwSW50ZXJwb2xhdGU4LCDJtcm1Y2xhc3NNYXBJbnRlcnBvbGF0ZVYsIMm1ybVjbGFzc1Byb3AsIMm1ybVjb250ZW50UXVlcnksIMm1ybVkZWZpbmVDb21wb25lbnQsIMm1ybVkZWZpbmVEaXJlY3RpdmUsIMm1ybVkZWZpbmVJbmplY3RhYmxlLCDJtcm1ZGVmaW5lSW5qZWN0b3IsIMm1ybVkZWZpbmVOZ01vZHVsZSwgybXJtWRlZmluZVBpcGUsIMm1ybVkaXJlY3RpdmVJbmplY3QsIMm1ybVkaXNhYmxlQmluZGluZ3MsIMm1ybVlbGVtZW50LCDJtcm1ZWxlbWVudENvbnRhaW5lciwgybXJtWVsZW1lbnRDb250YWluZXJFbmQsIMm1ybVlbGVtZW50Q29udGFpbmVyU3RhcnQsIMm1ybVlbGVtZW50RW5kLCDJtcm1ZWxlbWVudFN0YXJ0LCDJtcm1ZW5hYmxlQmluZGluZ3MsIMm1ybVnZXRDdXJyZW50VmlldywgybXJtWdldEluaGVyaXRlZEZhY3RvcnksIMm1ybVob3N0UHJvcGVydHksIMm1ybVpMThuLCDJtcm1aTE4bkFwcGx5LCDJtcm1aTE4bkF0dHJpYnV0ZXMsIMm1ybVpMThuRW5kLCDJtcm1aTE4bkV4cCwgybXJtWkxOG5Qb3N0cHJvY2VzcywgybXJtWkxOG5TdGFydCwgybXJtWluamVjdCwgybXJtWluamVjdEF0dHJpYnV0ZSwgybXJtWludmFsaWRGYWN0b3J5LCDJtcm1aW52YWxpZEZhY3RvcnlEZXAsIMm1ybVsaXN0ZW5lciwgybXJtWxvYWRRdWVyeSwgybXJtW5hbWVzcGFjZUhUTUwsIMm1ybVuYW1lc3BhY2VNYXRoTUwsIMm1ybVuYW1lc3BhY2VTVkcsIMm1ybVuZXh0Q29udGV4dCwgybXJtW5nRGVjbGFyZUNsYXNzTWV0YWRhdGEsIMm1ybVuZ0RlY2xhcmVDb21wb25lbnQsIMm1ybVuZ0RlY2xhcmVEaXJlY3RpdmUsIMm1ybVuZ0RlY2xhcmVGYWN0b3J5LCDJtcm1bmdEZWNsYXJlSW5qZWN0YWJsZSwgybXJtW5nRGVjbGFyZUluamVjdG9yLCDJtcm1bmdEZWNsYXJlTmdNb2R1bGUsIMm1ybVuZ0RlY2xhcmVQaXBlLCDJtcm1cGlwZSwgybXJtXBpcGVCaW5kMSwgybXJtXBpcGVCaW5kMiwgybXJtXBpcGVCaW5kMywgybXJtXBpcGVCaW5kNCwgybXJtXBpcGVCaW5kViwgybXJtXByb2plY3Rpb24sIMm1ybVwcm9qZWN0aW9uRGVmLCDJtcm1cHJvcGVydHksIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlLCDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTEsIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlMiwgybXJtXByb3BlcnR5SW50ZXJwb2xhdGUzLCDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTQsIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlNSwgybXJtXByb3BlcnR5SW50ZXJwb2xhdGU2LCDJtcm1cHJvcGVydHlJbnRlcnBvbGF0ZTcsIMm1ybVwcm9wZXJ0eUludGVycG9sYXRlOCwgybXJtXByb3BlcnR5SW50ZXJwb2xhdGVWLCDJtcm1cHVyZUZ1bmN0aW9uMCwgybXJtXB1cmVGdW5jdGlvbjEsIMm1ybVwdXJlRnVuY3Rpb24yLCDJtcm1cHVyZUZ1bmN0aW9uMywgybXJtXB1cmVGdW5jdGlvbjQsIMm1ybVwdXJlRnVuY3Rpb241LCDJtcm1cHVyZUZ1bmN0aW9uNiwgybXJtXB1cmVGdW5jdGlvbjcsIMm1ybVwdXJlRnVuY3Rpb244LCDJtcm1cHVyZUZ1bmN0aW9uViwgybXJtXF1ZXJ5UmVmcmVzaCwgybXJtXJlZmVyZW5jZSwgybXJtXJlc29sdmVCb2R5LCDJtcm1cmVzb2x2ZURvY3VtZW50LCDJtcm1cmVzb2x2ZVdpbmRvdywgybXJtXJlc3RvcmVWaWV3LCDJtcm1c2FuaXRpemVIdG1sLCDJtcm1c2FuaXRpemVSZXNvdXJjZVVybCwgybXJtXNhbml0aXplU2NyaXB0LCDJtcm1c2FuaXRpemVTdHlsZSwgybXJtXNhbml0aXplVXJsLCDJtcm1c2FuaXRpemVVcmxPclJlc291cmNlVXJsLCDJtcm1c2V0Q29tcG9uZW50U2NvcGUsIMm1ybVzZXROZ01vZHVsZVNjb3BlLCDJtcm1c3R5bGVNYXAsIMm1ybVzdHlsZU1hcEludGVycG9sYXRlMSwgybXJtXN0eWxlTWFwSW50ZXJwb2xhdGUyLCDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTMsIMm1ybVzdHlsZU1hcEludGVycG9sYXRlNCwgybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU1LCDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZTYsIMm1ybVzdHlsZU1hcEludGVycG9sYXRlNywgybXJtXN0eWxlTWFwSW50ZXJwb2xhdGU4LCDJtcm1c3R5bGVNYXBJbnRlcnBvbGF0ZVYsIMm1ybVzdHlsZVByb3AsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTEsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTIsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTMsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTQsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTUsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTYsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTcsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZTgsIMm1ybVzdHlsZVByb3BJbnRlcnBvbGF0ZVYsIMm1ybVzeW50aGV0aWNIb3N0TGlzdGVuZXIsIMm1ybVzeW50aGV0aWNIb3N0UHJvcGVydHksIMm1ybV0ZW1wbGF0ZSwgybXJtXRlbXBsYXRlUmVmRXh0cmFjdG9yLCDJtcm1dGV4dCwgybXJtXRleHRJbnRlcnBvbGF0ZSwgybXJtXRleHRJbnRlcnBvbGF0ZTEsIMm1ybV0ZXh0SW50ZXJwb2xhdGUyLCDJtcm1dGV4dEludGVycG9sYXRlMywgybXJtXRleHRJbnRlcnBvbGF0ZTQsIMm1ybV0ZXh0SW50ZXJwb2xhdGU1LCDJtcm1dGV4dEludGVycG9sYXRlNiwgybXJtXRleHRJbnRlcnBvbGF0ZTcsIMm1ybV0ZXh0SW50ZXJwb2xhdGU4LCDJtcm1dGV4dEludGVycG9sYXRlViwgybXJtXRydXN0Q29uc3RhbnRIdG1sLCDJtcm1dHJ1c3RDb25zdGFudFJlc291cmNlVXJsLCDJtcm1dmlld1F1ZXJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb3JlLm1qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiZXhwb3J0IHsgU2lnbmFsaW5nU2VydmVyIH0gZnJvbSBcIi4vc2lnbmFsaW5nU2VydmVyXCI7XG5leHBvcnQgeyBXZWJSdGNQcm92aWRlciB9IGZyb20gXCIuL3dlYlJ0Yy5wcm92aWRlclwiO1xuZXhwb3J0IHsgUHJvb2ZtZVV0aWxzUHJvdmlkZXIgfSBmcm9tIFwiLi9wcm9vZm1lLXV0aWxzLnByb3ZpZGVyXCI7XG5leHBvcnQgeyBQcm9vZm1lVXRpbHMgfSBmcm9tIFwiLi9wcm9vZm1lLXV0aWxzXCI7XG5leHBvcnQgeyBTaWduYWxTZXJ2ZXJWMiB9IGZyb20gXCIuL3NpZ25hbFNlcnZlci9zaWduYWxTZXJ2ZXJWMlwiO1xuZXhwb3J0IHsgZ2V0U3ViRG9tYWluIH0gZnJvbSBcIi4vdXRpbHMvZ2xvYmFsL3YxVXRpbHNcIjtcbmV4cG9ydCB7IElSVENDb25uZWN0aW9uQ29uZmlnIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9ydGNDb25uZWN0aW9uQ29uZmlnLmludGVyZmFjZVwiO1xuZXhwb3J0IHsgSUNvbm5lY3Rpb25EZXRhaWxzIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9jb25uZWN0aW9uRGV0YWlsc1wiO1xuZXhwb3J0IHsgSVdlYlJUQ0NvbmZpZyB9IGZyb20gXCIuL2ludGVyZmFjZXMvd2ViUnRjQ29uZmlnLmludGVyZmFjZVwiO1xuZXhwb3J0IHsgRU1pbWVUeXBlIH0gZnJvbSBcIi4vZW51bXMvbWltZVR5cGVzLmVudW1cIjtcbmV4cG9ydCB7IEVTaWduYXR1cmVUeXBlcyB9IGZyb20gXCIuL2VudW1zL3NpZ25hdHVyZVR5cGVzLmVudW1cIjtcbmV4cG9ydCB7IEVDbGFpbVR5cGUgfSBmcm9tIFwiLi9lbnVtcy9jbGFpbVR5cGVzLmVudW1cIjtcbmV4cG9ydCB7IElTaWduZWRDb250ZW50IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9jbGFpbXMvc2lnbmVkQ29udGVudC5pbnRlcmZhY2VcIjtcbmV4cG9ydCB7IElQcm9vZiB9IGZyb20gXCIuL2ludGVyZmFjZXMvcHJvb2YuaW50ZXJmYWNlXCI7XG5leHBvcnQgeyBJQ2hlY2tlZERpZCB9IGZyb20gXCIuL2ludGVyZmFjZXMvY2hlY2tlZERpZC5pbnRlcmZhY2VcIjtcbmV4cG9ydCB7IElSZXF1ZXN0ZWRDcmVkZW50aWFsS2V5IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFsS2V5LmludGVyZmFjZVwiO1xuZXhwb3J0IHsgSVZhbGlkYXRlZENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy92YWxpZGF0ZWRDcmVkZW50aWFscy5pbnRlcmZhY2VcIjtcbmV4cG9ydCB7IElDcmVkZW50aWFsT2JqZWN0IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9jcmVkZW50aWFsc09iamVjdC5pbnRlcmZhY2VcIjtcbmV4cG9ydCB7IElDcmVkZW50aWFsS2V5T2JqZWN0IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9jcmVkZW50aWFsS2V5T2JqZWN0LmludGVyZmFjZVwiO1xuZXhwb3J0IHsgSVJlcXVlc3RlZENyZWRlbnRpYWxzIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFscy5pbnRlcmZhY2VcIjtcbmV4cG9ydCB7IElSZXF1ZXN0ZWRDcmVkZW50aWFsc0NoZWNrUmVzdWx0IH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9yZXF1ZXN0ZWRDcmVkZW50aWFsc0NoZWNrUmVzdWx0XCI7XG5leHBvcnQgeyBFUHJvb2ZtZURhdGFQdXJwb3NlIH0gZnJvbSBcIi4vZW51bXMvcHJvb2ZtZURhdGFQdXJwb3NlXCI7XG5leHBvcnQgeyBFUHJvb2ZtZURhdGFTdG9yYWdlIH0gZnJvbSBcIi4vZW51bXMvcHJvb2ZtZURhdGFTdG9yYWdlXCI7XG5leHBvcnQgeyBFUHJvb2ZUeXBlIH0gZnJvbSBcIi4vZW51bXMvcHJvb2ZUeXBlLmVudW1cIjtcbmV4cG9ydCB7IEVXZWJzb2NrZXRSZWFkeVN0YXRlIH0gZnJvbSBcIi4vZW51bXMvd2Vic29ja2V0UmVhZHlTdGF0ZS5lbnVtXCI7XG5leHBvcnQgeyBjaGVja0tleUZvckRpZCB9IGZyb20gXCIuL3V0aWxzL3NtYXJ0Q29udHJhY3RzL3NtYXJ0Q29udHJhY3RVdGlsc1wiXG5leHBvcnQgeyBJQWRkaXRpb25hbEluZm8gfSBmcm9tIFwiLi9pbnRlcmZhY2VzL2FkZGl0aW9uYWwtaW5mby5pbnRlcmZhY2VcIjtcbiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJnbG9iYWwiLCJleHRlbmRTdGF0aWNzIiwiX19leHRlbmRzIiwidGhpcyIsImQiLCJiIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInAiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJfXyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsIkFzeW5jU3ViamVjdCIsIl9zdXBlciIsIl90aGlzIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfdmFsdWUiLCJfaGFzVmFsdWUiLCJfaXNDb21wbGV0ZSIsIl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzIiwic3Vic2NyaWJlciIsIl9hIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsImlzU3RvcHBlZCIsImVycm9yIiwibmV4dCIsImNvbXBsZXRlIiwiU3ViamVjdCIsIkJlaGF2aW9yU3ViamVjdCIsImdldCIsImdldFZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9zdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJjbG9zZWQiLCJfdGhyb3dJZkNsb3NlZCIsIm9ic2VydmVOb3RpZmljYXRpb24iLCJOb3RpZmljYXRpb24iLCJOb3RpZmljYXRpb25LaW5kIiwiZW1wdHlfMSIsIm9mXzEiLCJ0aHJvd0Vycm9yXzEiLCJpc0Z1bmN0aW9uXzEiLCJraW5kIiwiaGFzVmFsdWUiLCJvYnNlcnZlIiwib2JzZXJ2ZXIiLCJkbyIsIm5leHRIYW5kbGVyIiwiZXJyb3JIYW5kbGVyIiwiY29tcGxldGVIYW5kbGVyIiwiYWNjZXB0IiwibmV4dE9yT2JzZXJ2ZXIiLCJpc0Z1bmN0aW9uIiwidG9PYnNlcnZhYmxlIiwicmVzdWx0Iiwib2YiLCJ0aHJvd0Vycm9yIiwiRU1QVFkiLCJjcmVhdGVOZXh0IiwiY3JlYXRlRXJyb3IiLCJlcnIiLCJ1bmRlZmluZWQiLCJjcmVhdGVDb21wbGV0ZSIsImNvbXBsZXRlTm90aWZpY2F0aW9uIiwibm90aWZpY2F0aW9uIiwiX2IiLCJfYyIsIl9kIiwiY3JlYXRlTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsImVycm9yTm90aWZpY2F0aW9uIiwiQ09NUExFVEVfTk9USUZJQ0FUSU9OIiwiT2JzZXJ2YWJsZSIsIlN1YnNjcmliZXJfMSIsIlN1YnNjcmlwdGlvbl8xIiwib2JzZXJ2YWJsZV8xIiwicGlwZV8xIiwiY29uZmlnXzEiLCJlcnJvckNvbnRleHRfMSIsInN1YnNjcmliZSIsImxpZnQiLCJvcGVyYXRvciIsIm9ic2VydmFibGUiLCJzb3VyY2UiLCJvYnNlcnZlck9yTmV4dCIsIlN1YnNjcmliZXIiLCJpc09ic2VydmVyIiwiaXNTdWJzY3JpcHRpb24iLCJTYWZlU3Vic2NyaWJlciIsImVycm9yQ29udGV4dCIsImFkZCIsIl90cnlTdWJzY3JpYmUiLCJzaW5rIiwiZm9yRWFjaCIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwidW5zdWJzY3JpYmUiLCJwaXBlIiwib3BlcmF0aW9ucyIsIl9pIiwibGVuZ3RoIiwicGlwZUZyb21BcnJheSIsInRvUHJvbWlzZSIsIngiLCJjb25maWciLCJQcm9taXNlIiwiUmVwbGF5U3ViamVjdCIsIlN1YmplY3RfMSIsImRhdGVUaW1lc3RhbXBQcm92aWRlcl8xIiwiX2J1ZmZlclNpemUiLCJfd2luZG93VGltZSIsIl90aW1lc3RhbXBQcm92aWRlciIsIkluZmluaXR5IiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIiwiX2J1ZmZlciIsIl9pbmZpbml0ZVRpbWVXaW5kb3ciLCJNYXRoIiwibWF4IiwicHVzaCIsIm5vdyIsIl90cmltQnVmZmVyIiwiX2lubmVyU3Vic2NyaWJlIiwiY29weSIsInNsaWNlIiwiaSIsImFkanVzdGVkQnVmZmVyU2l6ZSIsInNwbGljZSIsImxhc3QiLCJTY2hlZHVsZXIiLCJzY2hlZHVsZXJBY3Rpb25DdG9yIiwic2NoZWR1bGUiLCJ3b3JrIiwiZGVsYXkiLCJzdGF0ZSIsIl9fdmFsdWVzIiwibyIsInMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm0iLCJkb25lIiwiQW5vbnltb3VzU3ViamVjdCIsIk9ic2VydmFibGVfMSIsIk9iamVjdFVuc3Vic2NyaWJlZEVycm9yXzEiLCJhcnJSZW1vdmVfMSIsIm9ic2VydmVycyIsInN1YmplY3QiLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsImVfMSIsImNvcHlfMSIsImNvcHlfMV8xIiwiZV8xXzEiLCJyZXR1cm4iLCJzaGlmdCIsIkVNUFRZX1NVQlNDUklQVElPTiIsIlN1YnNjcmlwdGlvbiIsImFyclJlbW92ZSIsImFzT2JzZXJ2YWJsZSIsImRlc3RpbmF0aW9uIiwiRU1QVFlfT0JTRVJWRVIiLCJyZXBvcnRVbmhhbmRsZWRFcnJvcl8xIiwibm9vcF8xIiwiTm90aWZpY2F0aW9uRmFjdG9yaWVzXzEiLCJ0aW1lb3V0UHJvdmlkZXJfMSIsImhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24iLCJfbmV4dCIsIl9lcnJvciIsIl9jb21wbGV0ZSIsIl9iaW5kIiwiRnVuY3Rpb24iLCJiaW5kIiwiZm4iLCJ0aGlzQXJnIiwiQ29uc3VtZXJPYnNlcnZlciIsInBhcnRpYWxPYnNlcnZlciIsImhhbmRsZVVuaGFuZGxlZEVycm9yIiwiY29udGV4dF8xIiwidXNlRGVwcmVjYXRlZE5leHRDb250ZXh0IiwidXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyIsImNhcHR1cmVFcnJvciIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwidGltZW91dFByb3ZpZGVyIiwic2V0VGltZW91dCIsIm5vb3AiLCJfX3JlYWQiLCJuIiwiciIsImUiLCJhciIsIl9fc3ByZWFkQXJyYXkiLCJ0byIsImZyb20iLCJpbCIsImoiLCJVbnN1YnNjcmlwdGlvbkVycm9yXzEiLCJpbml0aWFsVGVhcmRvd24iLCJfcGFyZW50YWdlIiwiX3RlYXJkb3ducyIsImVtcHR5IiwiZV8yIiwiZXJyb3JzIiwiaXNBcnJheSIsIl9wYXJlbnRhZ2VfMSIsIl9wYXJlbnRhZ2VfMV8xIiwicmVtb3ZlIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsIl90ZWFyZG93bnNfMSIsIl90ZWFyZG93bnNfMV8xIiwidGVhcmRvd25fMSIsImV4ZWNUZWFyZG93biIsImVfMl8xIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsInBhcmVudCIsImluY2x1ZGVzIiwiX3JlbW92ZVBhcmVudCIsIm9uVW5oYW5kbGVkRXJyb3IiLCJDb25uZWN0YWJsZU9ic2VydmFibGUiLCJyZWZDb3VudF8xIiwiT3BlcmF0b3JTdWJzY3JpYmVyXzEiLCJsaWZ0XzEiLCJzdWJqZWN0RmFjdG9yeSIsIl9zdWJqZWN0IiwiX3JlZkNvdW50IiwiX2Nvbm5lY3Rpb24iLCJoYXNMaWZ0IiwiZ2V0U3ViamVjdCIsIl90ZWFyZG93biIsImNvbm5lY3QiLCJjb25uZWN0aW9uIiwic3ViamVjdF8xIiwiY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIiwicmVmQ291bnQiLCJjb21iaW5lTGF0ZXN0SW5pdCIsImNvbWJpbmVMYXRlc3QiLCJhcmdzQXJnQXJyYXlPck9iamVjdF8xIiwiZnJvbV8xIiwiaWRlbnRpdHlfMSIsIm1hcE9uZU9yTWFueUFyZ3NfMSIsImFyZ3NfMSIsImNyZWF0ZU9iamVjdF8xIiwiZXhlY3V0ZVNjaGVkdWxlXzEiLCJvYnNlcnZhYmxlcyIsInNjaGVkdWxlciIsInZhbHVlVHJhbnNmb3JtIiwiaWRlbnRpdHkiLCJtYXliZVNjaGVkdWxlIiwidmFsdWVzIiwiYWN0aXZlIiwicmVtYWluaW5nRmlyc3RWYWx1ZXMiLCJfbG9vcF8xIiwiaGFzRmlyc3RWYWx1ZSIsImV4ZWN1dGUiLCJleGVjdXRlU2NoZWR1bGUiLCJhcmdzIiwicG9wU2NoZWR1bGVyIiwicmVzdWx0U2VsZWN0b3IiLCJwb3BSZXN1bHRTZWxlY3RvciIsImFyZ3NBcmdBcnJheU9yT2JqZWN0Iiwia2V5cyIsImNyZWF0ZU9iamVjdCIsIm1hcE9uZU9yTWFueUFyZ3MiLCJjb25jYXQiLCJjb25jYXRBbGxfMSIsImNvbmNhdEFsbCIsImVtcHR5U2NoZWR1bGVkIiwic2NoZWR1bGVkXzEiLCJpbm5lckZyb21fMSIsImlucHV0Iiwic2NoZWR1bGVkIiwiaW5uZXJGcm9tIiwiZnJvbVN1YnNjcmliYWJsZSIsInN1YnNjcmliYWJsZSIsIl9fYXdhaXRlciIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwic3RlcCIsInJlamVjdGVkIiwidGhlbiIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJ2Iiwib3AiLCJwb3AiLCJfX2FzeW5jVmFsdWVzIiwiYXN5bmNJdGVyYXRvciIsInNldHRsZSIsImZyb21SZWFkYWJsZVN0cmVhbUxpa2UiLCJmcm9tQXN5bmNJdGVyYWJsZSIsImZyb21JdGVyYWJsZSIsImZyb21Qcm9taXNlIiwiZnJvbUFycmF5TGlrZSIsImZyb21JbnRlcm9wT2JzZXJ2YWJsZSIsImlzQXJyYXlMaWtlXzEiLCJpc1Byb21pc2VfMSIsImlzSW50ZXJvcE9ic2VydmFibGVfMSIsImlzQXN5bmNJdGVyYWJsZV8xIiwidGhyb3dVbm9ic2VydmFibGVFcnJvcl8xIiwiaXNJdGVyYWJsZV8xIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2VfMSIsIm9iaiIsIm9icyIsImFycmF5IiwicHJvbWlzZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlXzEiLCJhc3luY0l0ZXJhYmxlXzFfMSIsInByb2Nlc3MiLCJjYXRjaCIsInJlYWRhYmxlU3RyZWFtIiwicmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJpc0FycmF5TGlrZSIsImlzUHJvbWlzZSIsImlzQXN5bmNJdGVyYWJsZSIsImlzSXRlcmFibGUiLCJpc1JlYWRhYmxlU3RyZWFtTGlrZSIsImNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIiwiaW50ZXJ2YWwiLCJhc3luY18xIiwidGltZXJfMSIsInBlcmlvZCIsImFzeW5jU2NoZWR1bGVyIiwidGltZXIiLCJyYWNlSW5pdCIsInJhY2UiLCJhcmdzT3JBcmdBcnJheV8xIiwic291cmNlcyIsInN1YnNjcmlwdGlvbnMiLCJhcmdzT3JBcmdBcnJheSIsImVycm9yT3JFcnJvckZhY3RvcnkiLCJlcnJvckZhY3RvcnkiLCJpbml0IiwiaXNTY2hlZHVsZXJfMSIsImlzRGF0ZV8xIiwiZHVlVGltZSIsImludGVydmFsT3JTY2hlZHVsZXIiLCJhc3luYyIsImludGVydmFsRHVyYXRpb24iLCJpc1NjaGVkdWxlciIsImR1ZSIsImlzVmFsaWREYXRlIiwiemlwIiwiYnVmZmVycyIsIm1hcCIsImNvbXBsZXRlZCIsInNvdXJjZUluZGV4IiwiZXZlcnkiLCJidWZmZXIiLCJzb21lIiwiT3BlcmF0b3JTdWJzY3JpYmVyIiwib25OZXh0Iiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJvbkZpbmFsaXplIiwic2hvdWxkVW5zdWJzY3JpYmUiLCJjbG9zZWRfMSIsImF1ZGl0IiwiZHVyYXRpb25TZWxlY3RvciIsIm9wZXJhdGUiLCJsYXN0VmFsdWUiLCJkdXJhdGlvblN1YnNjcmliZXIiLCJpc0NvbXBsZXRlIiwiZW5kRHVyYXRpb24iLCJjbGVhbnVwRHVyYXRpb24iLCJhdWRpdFRpbWUiLCJhdWRpdF8xIiwiZHVyYXRpb24iLCJjbG9zaW5nTm90aWZpZXIiLCJjdXJyZW50QnVmZmVyIiwiYnVmZmVyQ291bnQiLCJidWZmZXJTaXplIiwic3RhcnRCdWZmZXJFdmVyeSIsImNvdW50IiwidG9FbWl0IiwiYnVmZmVyc18xIiwiYnVmZmVyc18xXzEiLCJ0b0VtaXRfMSIsInRvRW1pdF8xXzEiLCJlXzMiLCJidWZmZXJzXzIiLCJidWZmZXJzXzJfMSIsImVfM18xIiwiYnVmZmVyVGltZSIsImJ1ZmZlclRpbWVTcGFuIiwib3RoZXJBcmdzIiwiYnVmZmVyQ3JlYXRpb25JbnRlcnZhbCIsIm1heEJ1ZmZlclNpemUiLCJidWZmZXJSZWNvcmRzIiwicmVzdGFydE9uRW1pdCIsImVtaXQiLCJyZWNvcmQiLCJzdWJzIiwic3RhcnRCdWZmZXIiLCJyZWNvcmRfMSIsImJ1ZmZlclRpbWVTdWJzY3JpYmVyIiwicmVjb3Jkc0NvcHkiLCJyZWNvcmRzQ29weV8xIiwicmVjb3Jkc0NvcHlfMV8xIiwiYnVmZmVyVG9nZ2xlIiwib3BlbmluZ3MiLCJjbG9zaW5nU2VsZWN0b3IiLCJvcGVuVmFsdWUiLCJjbG9zaW5nU3Vic2NyaXB0aW9uIiwiYnVmZmVyV2hlbiIsImNsb3NpbmdTdWJzY3JpYmVyIiwib3BlbkJ1ZmZlciIsImNhdGNoRXJyb3IiLCJzZWxlY3RvciIsImhhbmRsZWRSZXN1bHQiLCJpbm5lclN1YiIsInN5bmNVbnN1YiIsImNvbWJpbmVBbGwiLCJjb21iaW5lTGF0ZXN0QWxsXzEiLCJjb21iaW5lTGF0ZXN0QWxsIiwiY29tYmluZUxhdGVzdF8xIiwiam9pbkFsbEludGVybmFsc18xIiwicHJvamVjdCIsImpvaW5BbGxJbnRlcm5hbHMiLCJjb21iaW5lTGF0ZXN0V2l0aCIsIm90aGVyU291cmNlcyIsIm1lcmdlQWxsXzEiLCJtZXJnZUFsbCIsImNvbmNhdE1hcCIsIm1lcmdlTWFwXzEiLCJtZXJnZU1hcCIsImNvbmNhdE1hcFRvIiwiY29uY2F0TWFwXzEiLCJpbm5lck9ic2VydmFibGUiLCJjb25jYXRXaXRoIiwiY29uY2F0XzEiLCJmcm9tU3Vic2NyaWJhYmxlXzEiLCJERUZBVUxUX0NPTkZJRyIsImNvbm5lY3RvciIsInJlZHVjZV8xIiwicHJlZGljYXRlIiwicmVkdWNlIiwidG90YWwiLCJkZWJvdW5jZSIsImRlYm91bmNlVGltZSIsImFjdGl2ZVRhc2siLCJsYXN0VGltZSIsImVtaXRXaGVuSWRsZSIsInRhcmdldFRpbWUiLCJkZWZhdWx0SWZFbXB0eSIsImRlZmF1bHRWYWx1ZSIsImRlbGF5V2hlbl8xIiwiZGVsYXlXaGVuIiwidGFrZV8xIiwiaWdub3JlRWxlbWVudHNfMSIsIm1hcFRvXzEiLCJkZWxheUR1cmF0aW9uU2VsZWN0b3IiLCJzdWJzY3JpcHRpb25EZWxheSIsInRha2UiLCJpZ25vcmVFbGVtZW50cyIsImluZGV4IiwibWFwVG8iLCJkZW1hdGVyaWFsaXplIiwiTm90aWZpY2F0aW9uXzEiLCJkaXN0aW5jdCIsImtleVNlbGVjdG9yIiwiZmx1c2hlcyIsImRpc3RpbmN0S2V5cyIsIlNldCIsImtleSIsImhhcyIsImNsZWFyIiwiZGlzdGluY3RVbnRpbENoYW5nZWQiLCJkZWZhdWx0Q29tcGFyZSIsImEiLCJjb21wYXJhdG9yIiwicHJldmlvdXNLZXkiLCJmaXJzdCIsImN1cnJlbnRLZXkiLCJkaXN0aW5jdFVudGlsS2V5Q2hhbmdlZCIsImRpc3RpbmN0VW50aWxDaGFuZ2VkXzEiLCJjb21wYXJlIiwiZWxlbWVudEF0IiwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3JfMSIsImZpbHRlcl8xIiwidGhyb3dJZkVtcHR5XzEiLCJkZWZhdWx0SWZFbXB0eV8xIiwiQXJndW1lbnRPdXRPZlJhbmdlRXJyb3IiLCJoYXNEZWZhdWx0VmFsdWUiLCJmaWx0ZXIiLCJ0aHJvd0lmRW1wdHkiLCJlbmRXaXRoIiwiZXhoYXVzdCIsImV4aGF1c3RBbGxfMSIsImV4aGF1c3RBbGwiLCJpbm5lciIsImV4aGF1c3RNYXAiLCJtYXBfMSIsImlpIiwib3V0ZXJWYWx1ZSIsImV4cGFuZCIsIm1lcmdlSW50ZXJuYWxzXzEiLCJjb25jdXJyZW50IiwibWVyZ2VJbnRlcm5hbHMiLCJmaW5hbGl6ZSIsImNhbGxiYWNrIiwiY3JlYXRlRmluZCIsImZpbmQiLCJmaW5kSW5kZXgiLCJmaW5kXzEiLCJFbXB0eUVycm9yXzEiLCJFbXB0eUVycm9yIiwiZmxhdE1hcCIsImdyb3VwQnkiLCJlbGVtZW50T3JPcHRpb25zIiwiZWxlbWVudCIsImdyb3VwcyIsIk1hcCIsIm5vdGlmeSIsImNiIiwiaGFuZGxlRXJyb3IiLCJjb25zdW1lciIsImFjdGl2ZUdyb3VwcyIsInRlYXJkb3duQXR0ZW1wdGVkIiwiZ3JvdXBCeVNvdXJjZVN1YnNjcmliZXIiLCJrZXlfMSIsImdyb3VwXzEiLCJzZXQiLCJncm91cGVkIiwiZ3JvdXBTdWJqZWN0IiwiZ3JvdXBTdWJzY3JpYmVyIiwiZHVyYXRpb25TdWJzY3JpYmVyXzEiLCJkZWxldGUiLCJpc0VtcHR5IiwidG9BcnJheV8xIiwiam9pbkZuIiwidG9BcnJheSIsInRha2VMYXN0XzEiLCJ0YWtlTGFzdCIsIm1hdGVyaWFsaXplIiwiY29tcGFyZXIiLCJtZXJnZSIsInBvcE51bWJlciIsIm9uQmVmb3JlTmV4dCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbFRlYXJkb3duIiwiY2hlY2tDb21wbGV0ZSIsIm91dGVyTmV4dCIsImRvSW5uZXJTdWIiLCJpbm5lckNvbXBsZXRlIiwiaW5uZXJWYWx1ZSIsImJ1ZmZlcmVkVmFsdWUiLCJtZXJnZU1hcFRvIiwibWVyZ2VTY2FuIiwiYWNjdW11bGF0b3IiLCJzZWVkIiwibWVyZ2VXaXRoIiwibWVyZ2VfMSIsIm1pbiIsIm11bHRpY2FzdCIsIkNvbm5lY3RhYmxlT2JzZXJ2YWJsZV8xIiwiY29ubmVjdF8xIiwic3ViamVjdE9yU3ViamVjdEZhY3RvcnkiLCJvYnNlcnZlT24iLCJvbkVycm9yUmVzdW1lTmV4dCIsIm5leHRTb3VyY2VzIiwicmVtYWluaW5nIiwic3Vic2NyaWJlTmV4dCIsIm5leHRTb3VyY2UiLCJwYWlyd2lzZSIsInByZXYiLCJoYXNQcmV2IiwicGFydGl0aW9uIiwibm90XzEiLCJub3QiLCJwbHVjayIsInByb3BlcnRpZXMiLCJFcnJvciIsImN1cnJlbnRQcm9wIiwicHVibGlzaCIsIm11bHRpY2FzdF8xIiwicHVibGlzaEJlaGF2aW9yIiwiQmVoYXZpb3JTdWJqZWN0XzEiLCJpbml0aWFsVmFsdWUiLCJwdWJsaXNoTGFzdCIsIkFzeW5jU3ViamVjdF8xIiwicHVibGlzaFJlcGxheSIsIlJlcGxheVN1YmplY3RfMSIsIndpbmRvd1RpbWUiLCJzZWxlY3Rvck9yU2NoZWR1bGVyIiwidGltZXN0YW1wUHJvdmlkZXIiLCJyYWNlV2l0aF8xIiwicmFjZVdpdGgiLCJyYWNlXzEiLCJzY2FuSW50ZXJuYWxzXzEiLCJzY2FuSW50ZXJuYWxzIiwicmVmQ291bnRlciIsInNoYXJlZENvbm5lY3Rpb24iLCJjb25uIiwicmVwZWF0IiwiY291bnRPckNvbmZpZyIsInNvdXJjZVN1YiIsInNvRmFyIiwicmVzdWJzY3JpYmUiLCJub3RpZmllciIsIm5vdGlmaWVyU3Vic2NyaWJlcl8xIiwic3Vic2NyaWJlVG9Tb3VyY2UiLCJyZXBlYXRXaGVuIiwiY29tcGxldGlvbnMkIiwic3luY1Jlc3ViIiwiaXNOb3RpZmllckNvbXBsZXRlIiwiaXNNYWluQ29tcGxldGUiLCJzdWJzY3JpYmVGb3JSZXBlYXRXaGVuIiwicmV0cnkiLCJjb25maWdPckNvdW50IiwicmVzZXRPblN1Y2Nlc3MiLCJzdWJzY3JpYmVGb3JSZXRyeSIsInJlc3ViXzEiLCJyZXRyeVdoZW4iLCJlcnJvcnMkIiwic3Vic2NyaWJlRm9yUmV0cnlXaGVuIiwic2FtcGxlIiwic2FtcGxlVGltZSIsInNhbXBsZV8xIiwiaW50ZXJ2YWxfMSIsInNjYW4iLCJoYXNTZWVkIiwiZW1pdE9uTmV4dCIsImVtaXRCZWZvcmVDb21wbGV0ZSIsImhhc1N0YXRlIiwic2VxdWVuY2VFcXVhbCIsImNvbXBhcmVUbyIsImFTdGF0ZSIsImJTdGF0ZSIsImlzRXF1YWwiLCJjcmVhdGVTdWJzY3JpYmVyIiwic2VsZlN0YXRlIiwib3RoZXJTdGF0ZSIsInNlcXVlbmNlRXF1YWxTdWJzY3JpYmVyIiwic2hhcmUiLCJoYW5kbGVSZXNldCIsInJlc2V0Iiwib24iLCJvcHRpb25zIiwicmVzZXRPbkVycm9yIiwicmVzZXRPbkNvbXBsZXRlIiwicmVzZXRPblJlZkNvdW50WmVybyIsIndyYXBwZXJTb3VyY2UiLCJyZXNldENvbm5lY3Rpb24iLCJoYXNDb21wbGV0ZWQiLCJoYXNFcnJvcmVkIiwiY2FuY2VsUmVzZXQiLCJyZXNldEFuZFVuc3Vic2NyaWJlIiwiZGVzdCIsInNoYXJlUmVwbGF5Iiwic2hhcmVfMSIsImNvbmZpZ09yQnVmZmVyU2l6ZSIsInNpbmdsZSIsIlNlcXVlbmNlRXJyb3JfMSIsIk5vdEZvdW5kRXJyb3JfMSIsInNpbmdsZVZhbHVlIiwic2VlblZhbHVlIiwiU2VxdWVuY2VFcnJvciIsIk5vdEZvdW5kRXJyb3IiLCJza2lwIiwic2tpcExhc3QiLCJza2lwQ291bnQiLCJyaW5nIiwic2VlbiIsInZhbHVlSW5kZXgiLCJvbGRWYWx1ZSIsInNraXBVbnRpbCIsInRha2luZyIsInNraXBTdWJzY3JpYmVyIiwic2tpcFdoaWxlIiwic3RhcnRXaXRoIiwic3Vic2NyaWJlT24iLCJzd2l0Y2hBbGwiLCJzd2l0Y2hNYXBfMSIsInN3aXRjaE1hcCIsImlubmVyU3Vic2NyaWJlciIsImlubmVySW5kZXgiLCJvdXRlckluZGV4Iiwic3dpdGNoTWFwVG8iLCJzd2l0Y2hTY2FuIiwiYnVmZmVyXzEiLCJidWZmZXJfMV8xIiwidGFrZVVudGlsIiwidGFrZVdoaWxlIiwiaW5jbHVzaXZlIiwidGFwIiwidGFwT2JzZXJ2ZXIiLCJpc1Vuc3ViIiwidGhyb3R0bGUiLCJkZWZhdWx0VGhyb3R0bGVDb25maWciLCJsZWFkaW5nIiwidHJhaWxpbmciLCJzZW5kVmFsdWUiLCJ0aHJvdHRsZWQiLCJlbmRUaHJvdHRsaW5nIiwic2VuZCIsImNsZWFudXBUaHJvdHRsaW5nIiwic3RhcnRUaHJvdHRsZSIsInRocm90dGxlVGltZSIsInRocm90dGxlXzEiLCJkdXJhdGlvbiQiLCJkZWZhdWx0RXJyb3JGYWN0b3J5IiwiVGltZUludGVydmFsIiwidGltZUludGVydmFsIiwidGltZW91dCIsIlRpbWVvdXRFcnJvciIsImNyZWF0ZUVycm9yQ2xhc3NfMSIsInRpbWVvdXRFcnJvckZhY3RvcnkiLCJpbmZvIiwiY3JlYXRlRXJyb3JDbGFzcyIsIm1lc3NhZ2UiLCJuYW1lIiwic2NoZWR1bGVyQXJnIiwiZWFjaCIsIndpdGgiLCJfd2l0aCIsIm1ldGEiLCJvcmlnaW5hbFNvdXJjZVN1YnNjcmlwdGlvbiIsInRpbWVyU3Vic2NyaXB0aW9uIiwic3RhcnRUaW1lciIsInRpbWVvdXRXaXRoIiwidGltZW91dF8xIiwid2l0aE9ic2VydmFibGUiLCJ0aW1lc3RhbXAiLCJhcnJSZWR1Y2VyIiwiYXJyIiwid2luZG93Iiwid2luZG93Qm91bmRhcmllcyIsIndpbmRvd1N1YmplY3QiLCJ3aW5kb3dDb3VudCIsIndpbmRvd1NpemUiLCJzdGFydFdpbmRvd0V2ZXJ5Iiwic3RhcnRFdmVyeSIsIndpbmRvd3MiLCJ3aW5kb3dzXzEiLCJ3aW5kb3dzXzFfMSIsImMiLCJ3aW5kb3dfMiIsIndpbmRvd1RpbWVTcGFuIiwid2luZG93Q3JlYXRpb25JbnRlcnZhbCIsIm1heFdpbmRvd1NpemUiLCJ3aW5kb3dSZWNvcmRzIiwicmVzdGFydE9uQ2xvc2UiLCJjbG9zZVdpbmRvdyIsInN0YXJ0V2luZG93Iiwid2luZG93XzEiLCJsb29wIiwidGVybWluYXRlIiwid2luZG93VG9nZ2xlIiwid2luZG93c0NvcHkiLCJ3aW5kb3dzQ29weV8xIiwid2luZG93c0NvcHlfMV8xIiwid2luZG93V2hlbiIsIm9wZW5XaW5kb3ciLCJ3aXRoTGF0ZXN0RnJvbSIsImlucHV0cyIsImxlbiIsIm90aGVyVmFsdWVzIiwicmVhZHkiLCJ6aXBfMSIsInppcEFsbCIsInppcFdpdGgiLCJvdGhlcklucHV0cyIsInNjaGVkdWxlQXJyYXkiLCJzY2hlZHVsZUFzeW5jSXRlcmFibGUiLCJzY2hlZHVsZUl0ZXJhYmxlIiwiaXRlcmF0b3JfMSIsInNjaGVkdWxlT2JzZXJ2YWJsZSIsIm9ic2VydmVPbl8xIiwic3Vic2NyaWJlT25fMSIsInNjaGVkdWxlUHJvbWlzZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVBc3luY0l0ZXJhYmxlXzEiLCJzY2hlZHVsZU9ic2VydmFibGVfMSIsInNjaGVkdWxlUHJvbWlzZV8xIiwic2NoZWR1bGVBcnJheV8xIiwic2NoZWR1bGVJdGVyYWJsZV8xIiwic2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2VfMSIsIkFjdGlvbiIsIkFzeW5jQWN0aW9uIiwiQWN0aW9uXzEiLCJpbnRlcnZhbFByb3ZpZGVyXzEiLCJwZW5kaW5nIiwiaWQiLCJyZWN5Y2xlQXN5bmNJZCIsInJlcXVlc3RBc3luY0lkIiwiX2lkIiwiaW50ZXJ2YWxQcm92aWRlciIsInNldEludGVydmFsIiwiZmx1c2giLCJfc2NoZWR1bGVyIiwiY2xlYXJJbnRlcnZhbCIsIl9leGVjdXRlIiwiX2RlbGF5IiwiZXJyb3JWYWx1ZSIsImVycm9yZWQiLCJhY3Rpb25zIiwiQXN5bmNTY2hlZHVsZXIiLCJTY2hlZHVsZXJfMSIsIlNjaGVkdWxlckFjdGlvbiIsIl9hY3RpdmUiLCJfc2NoZWR1bGVkIiwiYWN0aW9uIiwiQXN5bmNBY3Rpb25fMSIsIkFzeW5jU2NoZWR1bGVyXzEiLCJkZWxlZ2F0ZSIsIkRhdGUiLCJoYW5kbGUiLCJjbGVhclRpbWVvdXQiLCJnZXRTeW1ib2xJdGVyYXRvciIsInRvU3RyaW5nIiwiam9pbiIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG8iLCJnZXRLZXlzIiwiZmlyc3RfMSIsIml0ZW0iLCJpbmRleE9mIiwiY3JlYXRlSW1wbCIsImN0b3JGdW5jIiwiaW5zdGFuY2UiLCJzdGFjayIsImNvbnRleHQiLCJpc1Jvb3QiLCJlcnJvclRocm93biIsInBhcmVudFN1YnNjcmlwdGlvbiIsInNjaGVkdWxlU3Vic2NyaXB0aW9uIiwiaXNOYU4iLCJfX2F3YWl0IiwiX19hc3luY0dlbmVyYXRvciIsInEiLCJyZXN1bWUiLCJmdWxmaWxsIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwibGlmdGVkU291cmNlIiwiY2FsbE9yQXBwbHkiLCJwcmVkIiwiZm5zIiwiRUNsYWltVHlwZSIsIkVESURBY2Nlc3NMZXZlbCIsIkVNaW1lVHlwZSIsIkVQcm9vZm1lRGF0YVB1cnBvc2UiLCJFUHJvb2ZtZURhdGFTdG9yYWdlIiwiRVNpZ25hdHVyZVR5cGVzIiwiY2hhbm5lbElkIiwiY29ubmVjdGlvbnMiLCJjbGllbnQiLCJ1dWlkIiwiY2hhbm5lbCIsImhvc3QiLCJ0eXBlIiwidHVybkV4cGlyYXRpb24iLCJ0dXJuU2VjcmV0IiwidHVyblVybCIsInVzZXJuYW1lIiwiZmxvb3IiLCJpY2VDYW5kaWRhdGVQb29sU2l6ZSIsImljZVNlcnZlcnMiLCJ1cmxzIiwiY3JlZGVudGlhbCIsImNyZWF0ZUhtYWMiLCJ1cGRhdGUiLCJkaWdlc3QiLCJQcm9vZm1lVXRpbHNQcm92aWRlciIsInByb29mbWVVdGlscyIsIlByb29mbWVVdGlscyIsImNyZWRlbnRpYWxPYmplY3QiLCJ3ZWIzVXJsIiwicmVxdWVzdGVkQ3JlZGVudGlhbHMiLCJ0cnVzdGVkRGlkcyIsImNoZWNrVXNlck5vbmNlIiwibGl2ZW5lc3NDaGVja1JlcXVpcmVkIiwiaXNWYWxpZENyZWRlbnRpYWxzIiwiZ2V0U2lnbmF0dXJlIiwicHJpdmF0ZUtleSIsInNpZ25DcmVkZW50aWFsT2JqZWN0Iiwic2lnblJlcXVlc3RlZENyZWRlbnRpYWxzIiwiZGlkIiwiY2xhaW1ob2xkZXJBYmkiLCJpc1ZhbGlkUmVxdWVzdGVkQ3JlZGVudGlhbHMiLCJjbGFpbUhvbGRlckFiaSIsImlzVmFsaWRMaWNlbnNlIiwiZ2VuZXJhdGVDaGFsbGVuZ2UiLCJwdWJsaWNLZXkiLCJjbGFpbVR5cGUiLCJjb250cmFjdEFkZHJlc3MiLCJnZXRDbGFpbSIsImdldENvbnRyYWN0QWRkcmVzc0Zyb21EaWQiLCJJbmplY3RhYmxlIiwiZXhjbHVkZWRDcmVkZW50aWFsS2V5cyIsIndlYjMiLCJyZXF1ZXN0ZWRDaGVja1Jlc3VsdCIsInJlcXVlc3RlZENyZWRlbnRpYWxzQ29ycmVjdCIsInN1Y2Nlc3MiLCJjcmVkZW50aWFscyIsImNoZWNrQ3JlZGVudGlhbHMiLCJ2YWxpZCIsInV0aWxzIiwiaXNBZGRyZXNzIiwiY29uc29sZSIsImNoZWNrZWREaWQiLCJ2YWxpZENyZWRlbnRpYWxzQW1vdW50IiwiY3JlZGVudGlhbHNBbW91bnQiLCJpbnZhbGlkQ3JlZGVudGlhbHMiLCJwcm92aWRlciIsImVudHJpZXMiLCJjdXJyZW50Q3JlZGVudGlhbEtleSIsImlzc3VlckRpZENvbnRyYWN0QWRkcmVzcyIsImlzc3VlciIsInNwbGl0IiwiZm91bmRWYWxpZCIsImludmFsaWRLZXlQcm92aWRlciIsImludmFsaWRLZXlQcm92aWRlckFsbG93ZWRLZXlzIiwibm9UcnVzdGVkQ2xhaW1Gb3VuZCIsImZvdW5kRW50cnkiLCJjbGFpbSIsImdldENsYWltcyIsImV4cGlyYXRpb25EYXRlIiwiY2xhaW1BbGxvd2VkQ3JlZGVudGlhbEtleXMiLCJwcm92aWRlckNyZWRlbnRpYWxLZXkiLCJjb2RlIiwiSlNPTiIsInBhcnNlIiwicmVPcmRlckNyZWRlbnRpYWxPYmplY3QiLCJ3ZWIzTm9kZSIsImNyZWRlbnRpYWxPYmplY3RXaXRob3V0UHJvb2ZTaWduYXR1cmUiLCJzdHJpbmdpZnkiLCJwcm9vZiIsInNpZ25hdHVyZSIsInVzZXJSZWNvdmVyZWRBZGRyZXNzIiwiZXRoIiwiYWNjb3VudHMiLCJyZWNvdmVyIiwidXNlckNyZWRlbnRpYWxTaWduYXR1cmVXcm9uZyIsImhvbGRlciIsInZlcnNpb24iLCJjcmVkZW50aWFsRXhwaXJhdGlvbkRhdGUiLCJub25jZSIsImNhbGN1bGF0ZU1pbnV0ZXNEaWZmZXJlbmNlIiwiaXNzdWVyQ3JlZGVudGlhbFNpZ25hdHVyZVdyb25nIiwiaXNzdWVySG9sZGVyS2V5IiwiZGlkQ29udHJhY3RLZXlXcm9uZyIsInVzZXJIb2xkZXJLZXkiLCJ1c2VyRGlkQ29udHJhY3RBZGRyZXNzIiwidmVyaWZpZWQiLCJob2xkZXJLZXkiLCJyZWNvdmVyZWRBZGRyZXNzIiwiaXNzdWVyU2lnbmF0dXJlIiwiY3JlZGVudGlhbElzc3VlcktleSIsImNyZWRlbnRpYWxXaXRob3V0SXNzdWVyUHJvb2YiLCJkaWRBZGRyZXNzIiwia25vd25BZGRyZXNzZXMiLCJzaGEzS2V5IiwiZ2V0U2hhM0tleSIsImtleU1hbmFnZXJDb250cmFjdCIsIkNvbnRyYWN0Iiwia25vd25BZGRyZXNzZXNDb250YWlucyIsImtleVB1cnBvc2UiLCJwYXJzZUludCIsImdldEtleVB1cnBvc2UiLCJsaXN0IiwiZGlkQ29udHJhY3RBZGRyZXNzIiwibGlzdEl0ZW0iLCJrZWNjYWsyNTYiLCJhZGRyZXNzIiwibWV0aG9kcyIsImR0MiIsImR0MSIsImRpZmYiLCJnZXRUaW1lIiwiYWJzIiwicm91bmQiLCJjcmVkZW50aWFsS2V5cyIsImNyZWRlbnRpYWxLZXkiLCJzb3J0IiwicmVPcmRlcmVkQ3JlZGVudGlhbHMiLCJyZU9yZGVyZWRDcmVkZW50aWFsIiwicmVPcmRlckNyZWRlbnRpYWwiLCJyZU9yZGVyQ3JlZGVudGlhbFByb29mIiwic29ydE9iamVjdEFscGhhYmV0aWNhbGx5Iiwib2JqZWN0Iiwic29ydGVkT2JqIiwia2V5MSIsImtleTIiLCJ0b0xvd2VyQ2FzZSIsInJlT3JkZXJPYmplY3QiLCJzaWduIiwiY29udGVudFRvU2lnbiIsImNvbnRyYWN0IiwiY2xhaW1JZHMiLCJnZXRDbGFpbUlkc0J5VHlwZSIsInJhd0NsYWltcyIsInBhcnNlZENsYWltcyIsInRvQXNjaWkiLCJkYXRhIiwibG9nIiwiY2hlY2tSZXN1bHQiLCJtaXNzaW5nS2V5cyIsInJlcXVlc3RlZENyZWRlbnRpYWwiLCJyZXF1aXJlZCIsIm9iamVjdEtleXMiLCJhZGRpdGlvbmFsSW5mbyIsImFuc3dlciIsImZvdW5kIiwicmVjb3ZlckFkZHJlc3NGcm9tU2lnbmF0dXJlIiwic29ydEFscGhhYmV0aWNhbGx5IiwiRUNEU0EiLCJyZXF1ZXN0ZWRDcmVkZW50aWFsc0NvcHkiLCJjbGFpbUhvbGRlckNvbnRyYWN0Iiwia2VjY2FrMjU2T3JnYW5pc2F0aW9uS2V5IiwiTUFOQUdFTUVOVF9LRVkiLCJBQ1RJT05fS0VZIiwib3JnYW5pc2F0aW9uRGlkIiwic3RhdHVzIiwiQ09NUEFOWV9JTkZPIiwiY3JlZGVudGlhbFN1YmplY3QiLCJwcml2YXRlS2V5VG9QdWJsaWNLZXkiLCJwcml2YXRlS2V5VG9BY2NvdW50IiwiY2hhbGxlbmdlIiwiZW5kcG9pbnQiLCJzcGxpdHRlZERpZCIsIndzU2VydmVyIiwid3NSZXF1ZXN0JCIsInN0YXJ0U2lnbmFsIiwiaHR0cFNlcnZlciIsImF1dG9BY2NlcHRDb25uZWN0aW9ucyIsInJlcXVlc3QiLCJzZW5kVG8iLCJzZW5kVVRGIiwicmVqZWN0Q29ubmVjdGlvbiIsInJlYXNvbiIsInRvSVNPU3RyaW5nIiwicmVtb3RlQWRkcmVzc2VzIiwidmFsaWRTaWduIiwib3JpZ2luQWxsb3dlZCIsInNpZ25hbFNlcnZlciIsImFjdGlvblR5cGUiLCJvcmlnaW4iLCJyZXNvdXJjZVVSTCIsInF1ZXJ5IiwicHVibGlja2V5IiwiYXV0aGVudGljYXRlZCIsInNldHVwV2Vic29ja2V0TGlzdGVuZXJzIiwid2ViUnRjQ29uZmlnIiwiZ2V0UlRDQ29ubmVjdGlvbkNvbmZpZyIsIndlYlJ0Y0Nvbm5lY3Rpb25Db25maWciLCJ3ZWJSdGNDbGllbnQiLCJXZWJSVENDbGllbnRWMiIsInNldHVwUGVlcmNvbm5lY3Rpb24iLCJob3N0Q2hhbm5lbCIsImNsaWVudENoYW5uZWwiLCJjbGllbnREYXRhIiwiY2xvc2UiLCJ1dGY4RGF0YSIsIm9mZmVyIiwiY2FuZGlkYXRlIiwic2V0UmVtb3RlRGVzY3JpcHRpb24iLCJzZW5kQW5zd2VyIiwiYWRkQ2FuZGlkYXRlIiwicmVhc29uQ29kZSIsImRlc2NyaXB0aW9uIiwicmVtb3RlQWRkcmVzcyIsInJ0Y0Nvbm5lY3Rpb25Db25maWciLCJzZXRSVENDb25uZWN0aW9uQ29uZmlnIiwidHVybkVuYWJsZWQiLCJjcnlwdG8iLCJzdHVuRW5hYmxlZCIsInN0dW5VcmwiLCJzZXJ2ZXIiLCJXZWJTb2NrZXQiLCJTZXJ2ZXIiLCJkYXRhY2hhbm5lbCIsIndzIiwiY29ubmVjdGVkIiwibXNnIiwidG9rZW4iLCJob3N0cyIsImNsaWVudHMiLCJzaXplIiwiaG9zdHNPZmZlciIsIndzQXJnIiwiY2xpZW50QXJnIiwiY29uc3RhbnQiLCJvdXRwdXRzIiwicGF5YWJsZSIsInN0YXRlTXV0YWJpbGl0eSIsImFub255bW91cyIsImluZGV4ZWQiLCJJZGVudGl0eSIsImFiaSIsInVybCIsInJlcGxhY2UiLCJrZXlUb0NoZWNrIiwic2hhQWRkcmVzcyIsInNoYTMiLCJrZXlIYXNQdXJwb3NlIiwiV2ViUnRjUHJvdmlkZXIiLCJob3N0VXVpZCIsInBlZXJDb25uZWN0aW9uIiwiZGF0YUNoYW5uZWwiLCJ3c0NsaWVudCIsInJlY2VpdmVkQWN0aW9ucyQiLCJ1dWlkJCIsIndlYnNvY2tldE1lc3NhZ2UkIiwid2Vic29ja2V0Q29ubmVjdGlvbkNsb3NlZCQiLCJ3ZWJzb2NrZXRDb25uZWN0aW9uT3BlbiQiLCJ3ZWJzb2NrZXRDb25uZWN0aW9uRXJyb3IkIiwiY29ubmVjdGlvblRpbWVvdXQiLCJwb25nQ2hlY2tJbnRlcnZhbCIsInBpbmdUaW1lb3V0IiwiV0VCU09DS0VUX1BJTkdfQU5TV0VSX0RFTEFZIiwiV0VCU09DS0VUX1BJTkdfUE9OR19BTExPV0VEX1RJTUUiLCJnZXRDb25maWciLCJzZXRIb3N0VXVpZCIsInNlbmRQMlBEYXRhIiwicmVhZHlTdGF0ZSIsInNlbmRXZWJzb2NrZXREYXRhIiwiT1BFTiIsImdldFdlYnNvY2tldCIsInNldFV1aWQiLCJkaXNjb25uZWN0Iiwib25jbG9zZSIsInJlbW90ZURpc2Nvbm5lY3QiLCJjcmVhdGVPZmZlciIsInNldExvY2FsRGVzY3JpcHRpb24iLCJoZWFkZXJzIiwiY29ubmVjdGlvblN1Y2Nlc3MiLCJzaWduYWxpbmdVcmwiLCJrZWVwYWxpdmUiLCJ3M2N3ZWJzb2NrZXQiLCJvbmVycm9yIiwib25vcGVuIiwib25tZXNzYWdlIiwic2VuZFBpbmciLCJpc0hvc3QiLCJtYXhUcmllcyIsInRyaWVzIiwic2VuZE9mZmVyIiwiUlRDU2Vzc2lvbkRlc2NyaXB0aW9uIiwiaG9zdEFuc3dlciIsImNyZWF0ZUFuc3dlciIsImNsaWVudENhbmRpZGF0ZSIsIlJUQ0ljZUNhbmRpZGF0ZSIsImFkZEljZUNhbmRpZGF0ZSIsIlJUQ1BlZXJDb25uZWN0aW9uIiwiY3JlYXRlRGF0YUNoYW5uZWwiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJldmVudE1lc3NhZ2UiLCJwMnBDb25uZWN0ZWQiLCJpY2VDb25uZWN0aW9uU3RhdGUiLCJob3N0V3NDb25uZWN0aW9uIiwiZGF0YUNoYW5uZWxPcGVuJCIsImRhdGFDaGFubmVsTWVzc2FnZSQiLCJjaGFubmVsVXVpZCIsImRhdGFDaGFubmVsRXZlbnQiLCJtZXNzYWdlRXZlbnQiLCJwYXJzZWRNZXNzYWdlIiwicmVtb3RlRGVzY3JpcHRpb24iLCJyZXF1aXJlIiwiZ2V0Q2xvc3VyZVNhZmVQcm9wZXJ0eSIsIm9ialdpdGhQcm9wZXJ0eVRvRXh0cmFjdCIsImZpbGxQcm9wZXJ0aWVzIiwidGFyZ2V0Iiwib3ZlcnJpZGRlbk5hbWUiLCJyZXMiLCJuZXdMaW5lSW5kZXgiLCJzdWJzdHJpbmciLCJjb25jYXRTdHJpbmdzV2l0aFNwYWNlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJfX2ZvcndhcmRfcmVmX18iLCJmb3J3YXJkUmVmIiwiZm9yd2FyZFJlZkZuIiwicmVzb2x2ZUZvcndhcmRSZWYiLCJpc0ZvcndhcmRSZWYiLCJSdW50aW1lRXJyb3IiLCJzdXBlciIsImZvcm1hdFJ1bnRpbWVFcnJvciIsImZ1bGxDb2RlIiwiZXJyb3JNZXNzYWdlIiwibmdEZXZNb2RlIiwicmVuZGVyU3RyaW5naWZ5Iiwic3RyaW5naWZ5Rm9yRXJyb3IiLCJ0aHJvd0N5Y2xpY0RlcGVuZGVuY3lFcnJvciIsInBhdGgiLCJkZXBQYXRoIiwidGhyb3dNaXhlZE11bHRpUHJvdmlkZXJFcnJvciIsInRocm93UHJvdmlkZXJOb3RGb3VuZEVycm9yIiwiaW5qZWN0b3JOYW1lIiwiaW5qZWN0b3JEZXRhaWxzIiwiYXNzZXJ0TnVtYmVyIiwiYWN0dWFsIiwiYXNzZXJ0TnVtYmVySW5SYW5nZSIsIm1pbkluY2x1c2l2ZSIsIm1heEluY2x1c2l2ZSIsImFzc2VydExlc3NUaGFuT3JFcXVhbCIsImFzc2VydEdyZWF0ZXJUaGFuT3JFcXVhbCIsImFzc2VydFN0cmluZyIsImFzc2VydEVxdWFsIiwiZXhwZWN0ZWQiLCJhc3NlcnROb3RFcXVhbCIsImFzc2VydFNhbWUiLCJhc3NlcnROb3RTYW1lIiwiYXNzZXJ0TGVzc1RoYW4iLCJhc3NlcnRHcmVhdGVyVGhhbiIsImFzc2VydERlZmluZWQiLCJjb21wYXJpc29uIiwiYXNzZXJ0RG9tTm9kZSIsIm5vZGUiLCJOb2RlIiwiYXNzZXJ0SW5kZXhJblJhbmdlIiwibWF4TGVuIiwiYXNzZXJ0T25lT2YiLCJ2YWxpZFZhbHVlcyIsIm9wdHMiLCJwcm92aWRlZEluIiwiZGVmaW5lSW5qZWN0YWJsZSIsInByb3ZpZGVycyIsImltcG9ydHMiLCJnZXRJbmplY3RhYmxlRGVmIiwiZ2V0T3duRGVmaW5pdGlvbiIsIk5HX1BST1ZfREVGIiwiTkdfSU5KRUNUQUJMRV9ERUYiLCJmaWVsZCIsImdldEluamVjdG9yRGVmIiwiTkdfSU5KX0RFRiIsIk5HX0lOSkVDVE9SX0RFRiIsIm5nSW5qZWN0YWJsZURlZiIsIm5nSW5qZWN0b3JEZWYiLCJJbmplY3RGbGFncyIsIl9pbmplY3RJbXBsZW1lbnRhdGlvbiIsInNldEluamVjdEltcGxlbWVudGF0aW9uIiwiaW1wbCIsInByZXZpb3VzIiwiaW5qZWN0Um9vdExpbXBNb2RlIiwibm90Rm91bmRWYWx1ZSIsImZsYWdzIiwiaW5qZWN0YWJsZURlZiIsIk9wdGlvbmFsIiwibm9TaWRlRWZmZWN0cyIsIkNoYW5nZURldGVjdGlvblN0cmF0ZWd5IiwiQ2hhbmdlRGV0ZWN0b3JTdGF0dXMiLCJWaWV3RW5jYXBzdWxhdGlvbiQxIiwiaXNEZWZhdWx0Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kiLCJjaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSIsIkRlZmF1bHQiLCJWaWV3RW5jYXBzdWxhdGlvbiIsIl9fZ2xvYmFsVGhpcyIsImdsb2JhbFRoaXMiLCJfX3dpbmRvdyIsIl9fc2VsZiIsInNlbGYiLCJXb3JrZXJHbG9iYWxTY29wZSIsIl9fZ2xvYmFsIiwiX2dsb2JhbCIsImluaXROZ0Rldk1vZGUiLCJsb2NhdGlvblN0cmluZyIsImxvY2F0aW9uIiwibmV3Q291bnRlcnMiLCJuYW1lZENvbnN0cnVjdG9ycyIsImZpcnN0Q3JlYXRlUGFzcyIsInROb2RlIiwidFZpZXciLCJyZW5kZXJlckNyZWF0ZVRleHROb2RlIiwicmVuZGVyZXJTZXRUZXh0IiwicmVuZGVyZXJDcmVhdGVFbGVtZW50IiwicmVuZGVyZXJBZGRFdmVudExpc3RlbmVyIiwicmVuZGVyZXJTZXRBdHRyaWJ1dGUiLCJyZW5kZXJlclJlbW92ZUF0dHJpYnV0ZSIsInJlbmRlcmVyU2V0UHJvcGVydHkiLCJyZW5kZXJlclNldENsYXNzTmFtZSIsInJlbmRlcmVyQWRkQ2xhc3MiLCJyZW5kZXJlclJlbW92ZUNsYXNzIiwicmVuZGVyZXJTZXRTdHlsZSIsInJlbmRlcmVyUmVtb3ZlU3R5bGUiLCJyZW5kZXJlckRlc3Ryb3kiLCJyZW5kZXJlckRlc3Ryb3lOb2RlIiwicmVuZGVyZXJNb3ZlTm9kZSIsInJlbmRlcmVyUmVtb3ZlTm9kZSIsInJlbmRlcmVyQXBwZW5kQ2hpbGQiLCJyZW5kZXJlckluc2VydEJlZm9yZSIsInJlbmRlcmVyQ3JlYXRlQ29tbWVudCIsImFsbG93TmdEZXZNb2RlVHJ1ZSIsIm5nRGV2TW9kZVJlc2V0UGVyZkNvdW50ZXJzIiwiRU1QVFlfT0JKIiwiRU1QVFlfQVJSQVkiLCJmcmVlemUiLCJOR19DT01QX0RFRiIsIk5HX0RJUl9ERUYiLCJOR19QSVBFX0RFRiIsIk5HX01PRF9ERUYiLCJOR19GQUNUT1JZX0RFRiIsIk5HX0VMRU1FTlRfSUQiLCJfX05HX0VMRU1FTlRfSURfXyIsIl9yZW5kZXJDb21wQ291bnQiLCJjb21wb25lbnREZWZpbml0aW9uIiwiZGVjbGFyZWRJbnB1dHMiLCJkZWYiLCJwcm92aWRlcnNSZXNvbHZlciIsImRlY2xzIiwidmFycyIsInRlbXBsYXRlIiwiY29uc3RzIiwibmdDb250ZW50U2VsZWN0b3JzIiwiaG9zdEJpbmRpbmdzIiwiaG9zdFZhcnMiLCJob3N0QXR0cnMiLCJjb250ZW50UXVlcmllcyIsImV4cG9ydEFzIiwib25QdXNoIiwiY2hhbmdlRGV0ZWN0aW9uIiwiT25QdXNoIiwiZGlyZWN0aXZlRGVmcyIsInBpcGVEZWZzIiwic2VsZWN0b3JzIiwidmlld1F1ZXJ5IiwiZmVhdHVyZXMiLCJlbmNhcHN1bGF0aW9uIiwiRW11bGF0ZWQiLCJzdHlsZXMiLCJzZXRJbnB1dCIsInNjaGVtYXMiLCJkaXJlY3RpdmVUeXBlcyIsImRpcmVjdGl2ZXMiLCJmZWF0dXJlIiwicGlwZVR5cGVzIiwicGlwZXMiLCJpbnZlcnRPYmplY3QiLCJleHRyYWN0RGlyZWN0aXZlRGVmIiwiZXh0cmFjdFBpcGVEZWYiLCJnZXRDb21wb25lbnREZWYiLCJnZXREaXJlY3RpdmVEZWYiLCJnZXRQaXBlRGVmJDEiLCJhdXRvUmVnaXN0ZXJNb2R1bGVCeUlkIiwiYm9vdHN0cmFwIiwiZGVjbGFyYXRpb25zIiwidHJhbnNpdGl2ZUNvbXBpbGVTY29wZXMiLCJzY29wZSIsIm5nTW9kdWxlRGVmIiwiZ2V0TmdNb2R1bGVEZWYiLCJzZWNvbmRhcnkiLCJuZXdMb29rdXAiLCJtaW5pZmllZEtleSIsInB1YmxpY05hbWUiLCJkZWNsYXJlZE5hbWUiLCJwaXBlRGVmIiwicHVyZSIsIm9uRGVzdHJveSIsIm5nT25EZXN0cm95IiwidGhyb3dOb3RGb3VuZCIsIkNPTlRBSU5FUl9IRUFERVJfT0ZGU0VUIiwiSEVBREVSX09GRlNFVCIsIlRWaWV3VHlwZUFzU3RyaW5nIiwiaXNMVmlldyIsImlzTENvbnRhaW5lciIsImlzQ29udGVudFF1ZXJ5SG9zdCIsImlzQ29tcG9uZW50SG9zdCIsImlzRGlyZWN0aXZlSG9zdCIsImlzQ29tcG9uZW50RGVmIiwiYXNzZXJ0VE5vZGVGb3JMVmlldyIsImxWaWV3IiwiYXNzZXJ0VE5vZGVGb3JUVmlldyIsImFzc2VydFROb2RlIiwidFZpZXdfIiwiYXNzZXJ0VEljdSIsInRJY3UiLCJjdXJyZW50Q2FzZUxWaWV3SW5kZXgiLCJhc3NlcnRDb21wb25lbnRUeXBlIiwiYXNzZXJ0SGFzUGFyZW50IiwiYXNzZXJ0TENvbnRhaW5lciIsImFzc2VydExWaWV3T3JVbmRlZmluZWQiLCJhc3NlcnRMVmlldyIsImFzc2VydEZpcnN0Q3JlYXRlUGFzcyIsImVyck1lc3NhZ2UiLCJhc3NlcnRGaXJzdFVwZGF0ZVBhc3MiLCJmaXJzdFVwZGF0ZVBhc3MiLCJhc3NlcnRJbmRleEluRXhwYW5kb1JhbmdlIiwiYXNzZXJ0QmV0d2VlbiIsImV4cGFuZG9TdGFydEluZGV4IiwibG93ZXIiLCJ1cHBlciIsImFzc2VydFBhcmVudFZpZXciLCJhc3NlcnROb2RlSW5qZWN0b3IiLCJpbmplY3RvckluZGV4IiwiZ2V0RmFjdG9yeURlZiIsImhhc0ZhY3RvcnlEZWYiLCJTaW1wbGVDaGFuZ2UiLCJwcmV2aW91c1ZhbHVlIiwiY3VycmVudFZhbHVlIiwiZmlyc3RDaGFuZ2UiLCJpc0ZpcnN0Q2hhbmdlIiwiTmdPbkNoYW5nZXNGZWF0dXJlSW1wbCIsImRlZmluaXRpb24iLCJuZ09uQ2hhbmdlcyIsIm5nT25DaGFuZ2VzU2V0SW5wdXQiLCJyZW1lbWJlckNoYW5nZUhpc3RvcnlBbmRJbnZva2VPbkNoYW5nZXNIb29rIiwic2ltcGxlQ2hhbmdlc1N0b3JlIiwiZ2V0U2ltcGxlQ2hhbmdlc1N0b3JlIiwiY3VycmVudCIsInByaXZhdGVOYW1lIiwic3RvcmUiLCJzZXRTaW1wbGVDaGFuZ2VzU3RvcmUiLCJwcmV2aW91c0NoYW5nZSIsIm5nSW5oZXJpdCIsInByb2ZpbGVyQ2FsbGJhY2siLCJzZXRQcm9maWxlciIsInByb2ZpbGVyIiwiaG9va09yTGlzdGVuZXIiLCJTVkdfTkFNRVNQQUNFIiwiTUFUSF9NTF9OQU1FU1BBQ0UiLCJET0NVTUVOVCIsInNldERvY3VtZW50IiwiZG9jdW1lbnQiLCJnZXREb2N1bWVudCIsIlJlbmRlcmVyU3R5bGVGbGFnczMiLCJpc1Byb2NlZHVyYWxSZW5kZXJlciIsInJlbmRlcmVyIiwiZG9tUmVuZGVyZXJGYWN0b3J5MyIsImNyZWF0ZVJlbmRlcmVyIiwiaG9zdEVsZW1lbnQiLCJyZW5kZXJlclR5cGUiLCJ1bndyYXBSTm9kZSIsImdldE5hdGl2ZUJ5SW5kZXgiLCJnZXROYXRpdmVCeVROb2RlIiwiUkVOREVSRVIiLCJnZXRUTm9kZSIsImxvYWQiLCJ2aWV3IiwiZ2V0Q29tcG9uZW50TFZpZXdCeUluZGV4Iiwibm9kZUluZGV4IiwiaG9zdFZpZXciLCJzbG90VmFsdWUiLCJpc0NyZWF0aW9uTW9kZSIsInZpZXdBdHRhY2hlZFRvQ2hhbmdlRGV0ZWN0b3IiLCJnZXRDb25zdGFudCIsInJlc2V0UHJlT3JkZXJIb29rRmxhZ3MiLCJQUkVPUkRFUl9IT09LX0ZMQUdTIiwidXBkYXRlVHJhbnNwbGFudGVkVmlld0NvdW50IiwibENvbnRhaW5lciIsImFtb3VudCIsInZpZXdPckNvbnRhaW5lciIsImluc3RydWN0aW9uU3RhdGUiLCJsRnJhbWUiLCJjcmVhdGVMRnJhbWUiLCJiaW5kaW5nc0VuYWJsZWQiLCJpc0luQ2hlY2tOb0NoYW5nZXNNb2RlIiwiZ2V0QmluZGluZ3NFbmFibGVkIiwiZ2V0TFZpZXciLCJnZXRUVmlldyIsInZpZXdUb1Jlc3RvcmUiLCJjb250ZXh0TFZpZXciLCJnZXRDdXJyZW50VE5vZGUiLCJjdXJyZW50VE5vZGUiLCJnZXRDdXJyZW50VE5vZGVQbGFjZWhvbGRlck9rIiwiZ2V0Q3VycmVudFBhcmVudFROb2RlIiwiaXNQYXJlbnQiLCJzZXRDdXJyZW50VE5vZGUiLCJpc0N1cnJlbnRUTm9kZVBhcmVudCIsInNldEN1cnJlbnRUTm9kZUFzTm90UGFyZW50Iiwic2V0SXNJbkNoZWNrTm9DaGFuZ2VzTW9kZSIsIm1vZGUiLCJnZXRCaW5kaW5nUm9vdCIsImJpbmRpbmdSb290SW5kZXgiLCJiaW5kaW5nU3RhcnRJbmRleCIsImdldEJpbmRpbmdJbmRleCIsImJpbmRpbmdJbmRleCIsInNldEJpbmRpbmdJbmRleCIsIm5leHRCaW5kaW5nSW5kZXgiLCJpbmNyZW1lbnRCaW5kaW5nSW5kZXgiLCJzZXRJbkkxOG5CbG9jayIsImlzSW5JMThuQmxvY2siLCJpbkkxOG4iLCJzZXRCaW5kaW5nUm9vdEZvckhvc3RCaW5kaW5ncyIsImN1cnJlbnREaXJlY3RpdmVJbmRleCIsInNldEN1cnJlbnREaXJlY3RpdmVJbmRleCIsImdldEN1cnJlbnREaXJlY3RpdmVEZWYiLCJ0RGF0YSIsImdldEN1cnJlbnRRdWVyeUluZGV4IiwiY3VycmVudFF1ZXJ5SW5kZXgiLCJzZXRDdXJyZW50UXVlcnlJbmRleCIsImdldERlY2xhcmF0aW9uVE5vZGUiLCJkZWNsVE5vZGUiLCJlbnRlckRJIiwiU2tpcFNlbGYiLCJwYXJlbnRUTm9kZSIsInBhcmVudExWaWV3IiwiSG9zdCIsIkRFQ0xBUkFUSU9OX1ZJRVciLCJhbGxvY0xGcmFtZSIsImVudGVyVmlldyIsIm5ld1ZpZXciLCJuZXdMRnJhbWUiLCJzZWxlY3RlZEluZGV4IiwiZWxlbWVudERlcHRoQ291bnQiLCJjdXJyZW50TmFtZXNwYWNlIiwiZmlyc3RDaGlsZCIsImN1cnJlbnRMRnJhbWUiLCJjaGlsZExGcmFtZSIsImNoaWxkIiwibGVhdmVWaWV3TGlnaHQiLCJvbGRMRnJhbWUiLCJsZWF2ZURJIiwibGVhdmVWaWV3IiwiZ2V0U2VsZWN0ZWRJbmRleCIsInNldFNlbGVjdGVkSW5kZXgiLCJnZXRTZWxlY3RlZFROb2RlIiwicmVnaXN0ZXJQb3N0T3JkZXJIb29rcyIsImRpcmVjdGl2ZVN0YXJ0IiwiZW5kIiwiZGlyZWN0aXZlRW5kIiwiZGlyZWN0aXZlRGVmIiwibGlmZWN5Y2xlSG9va3MiLCJuZ0FmdGVyQ29udGVudEluaXQiLCJuZ0FmdGVyQ29udGVudENoZWNrZWQiLCJuZ0FmdGVyVmlld0luaXQiLCJuZ0FmdGVyVmlld0NoZWNrZWQiLCJjb250ZW50SG9va3MiLCJjb250ZW50Q2hlY2tIb29rcyIsInZpZXdIb29rcyIsInZpZXdDaGVja0hvb2tzIiwiZGVzdHJveUhvb2tzIiwiZXhlY3V0ZUNoZWNrSG9va3MiLCJob29rcyIsImNhbGxIb29rcyIsImV4ZWN1dGVJbml0QW5kQ2hlY2tIb29rcyIsImluaXRQaGFzZSIsImluY3JlbWVudEluaXRQaGFzZUZsYWdzIiwiY3VycmVudFZpZXciLCJjdXJyZW50Tm9kZUluZGV4Iiwic3RhcnRJbmRleCIsIm5vZGVJbmRleExpbWl0IiwibGFzdE5vZGVJbmRleEZvdW5kIiwiY2FsbEhvb2siLCJpc0luaXRIb29rIiwiaG9vayIsImRpcmVjdGl2ZSIsIk5PX1BBUkVOVF9JTkpFQ1RPUiIsIk5vZGVJbmplY3RvckZhY3RvcnkiLCJpc1ZpZXdQcm92aWRlciIsImluamVjdEltcGxlbWVudGF0aW9uIiwicmVzb2x2aW5nIiwiY2FuU2VlVmlld1Byb3ZpZGVycyIsImluamVjdEltcGwiLCJ0b1ROb2RlVHlwZUFzU3RyaW5nIiwidE5vZGVUeXBlIiwidGV4dCIsImFzc2VydFROb2RlVHlwZSIsImV4cGVjdGVkVHlwZXMiLCJzZXRVcEF0dHJpYnV0ZXMiLCJuYXRpdmUiLCJhdHRycyIsImlzUHJvYyIsIm5hbWVzcGFjZVVSSSIsImF0dHJOYW1lIiwiYXR0clZhbCIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiaXNBbmltYXRpb25Qcm9wIiwic2V0UHJvcGVydHkiLCJpc05hbWVPbmx5QXR0cmlidXRlTWFya2VyIiwibWFya2VyIiwiY2hhckNvZGVBdCIsIm1lcmdlSG9zdEF0dHJzIiwiZHN0Iiwic3JjIiwic3JjTWFya2VyIiwibWVyZ2VIb3N0QXR0cmlidXRlIiwibWFya2VySW5zZXJ0UG9zaXRpb24iLCJkc3RWYWx1ZSIsImhhc1BhcmVudEluamVjdG9yIiwicGFyZW50TG9jYXRpb24iLCJnZXRQYXJlbnRJbmplY3RvckluZGV4IiwiZ2V0UGFyZW50SW5qZWN0b3JWaWV3Iiwic3RhcnRWaWV3Iiwidmlld09mZnNldCIsInBhcmVudFZpZXciLCJpbmNsdWRlVmlld1Byb3ZpZGVycyIsInNldEluY2x1ZGVWaWV3UHJvdmlkZXJzIiwibmV4dE5nRWxlbWVudElkIiwiZ2V0T3JDcmVhdGVOb2RlSW5qZWN0b3JGb3JOb2RlIiwiZXhpc3RpbmdJbmplY3RvckluZGV4IiwiZ2V0SW5qZWN0b3JJbmRleCIsImluc2VydEJsb29tIiwiYmx1ZXByaW50IiwicGFyZW50TG9jIiwiZ2V0UGFyZW50SW5qZWN0b3JMb2NhdGlvbiIsInBhcmVudEluZGV4IiwicGFyZW50RGF0YSIsImZvb3RlciIsImRlY2xhcmF0aW9uVmlld09mZnNldCIsImxWaWV3Q3Vyc29yIiwidFZpZXdUeXBlIiwiZGlQdWJsaWNJbkluamVjdG9yIiwiYmxvb21IYXNoIiwiQkxPT01fU0laRSIsIm1hc2siLCJibG9vbUFkZCIsIm5vdEZvdW5kVmFsdWVPclRocm93IiwibG9va3VwVG9rZW5Vc2luZ01vZHVsZUluamVjdG9yIiwiU2VsZiIsIm1vZHVsZUluamVjdG9yIiwicHJldmlvdXNJbmplY3RJbXBsZW1lbnRhdGlvbiIsImdldE9yQ3JlYXRlSW5qZWN0YWJsZSIsInRva2VuSWQiLCJjcmVhdGVOb2RlSW5qZWN0b3IiLCJibG9vbUhhc2hCaXRPckZhY3RvcnkiLCJwcmV2aW91c1RWaWV3IiwiaG9zdFRFbGVtZW50Tm9kZSIsIkRFQ0xBUkFUSU9OX0NPTVBPTkVOVF9WSUVXIiwic2hvdWxkU2VhcmNoUGFyZW50IiwiYmxvb21IYXNUb2tlbiIsInNlYXJjaFRva2Vuc09uSW5qZWN0b3IiLCJOT1RfRk9VTkQiLCJOb2RlSW5qZWN0b3IiLCJjdXJyZW50VFZpZXciLCJpbmplY3RhYmxlSWR4IiwibG9jYXRlRGlyZWN0aXZlT3JQcm92aWRlciIsImdldE5vZGVJbmplY3RhYmxlIiwiY2FuQWNjZXNzVmlld1Byb3ZpZGVycyIsImlzSG9zdFNwZWNpYWxDYXNlIiwibm9kZVByb3ZpZGVySW5kZXhlcyIsInByb3ZpZGVySW5kZXhlcyIsInRJbmplY3RhYmxlcyIsImluamVjdGFibGVzU3RhcnQiLCJkaXJlY3RpdmVzU3RhcnQiLCJjcHRWaWV3UHJvdmlkZXJzQ291bnQiLCJlbmRJbmRleCIsInByb3ZpZGVyVG9rZW5PckRlZiIsImRpckRlZiIsInByZXZpb3VzSW5jbHVkZVZpZXdQcm92aWRlcnMiLCJkaXJlY3RpdmVJbmRleCIsIm5nT25Jbml0IiwibmdEb0NoZWNrIiwid3JhcHBlZE9uQ2hhbmdlcyIsInByZU9yZGVySG9va3MiLCJwcmVPcmRlckNoZWNrSG9va3MiLCJyZWdpc3RlclByZU9yZGVySG9va3MiLCJpbmplY3RvclZpZXciLCJpc0ZpcnN0SG9zdFROb2RlIiwiX3ROb2RlIiwiX2xWaWV3Iiwib3duQ29uc3RydWN0b3IiLCJvd25GYWN0b3J5IiwiZ2V0RmFjdG9yeU9mIiwib2JqZWN0UHJvdG90eXBlIiwiYXR0ck5hbWVUb0luamVjdCIsImNsYXNzZXMiLCJhdHRyc0xlbmd0aCIsImluamVjdEF0dHJpYnV0ZUltcGwiLCJBTk5PVEFUSU9OUyIsIlBBUkFNRVRFUlMiLCJQUk9QX01FVEFEQVRBIiwibWFrZURlY29yYXRvciIsInByb3BzIiwicGFyZW50Q2xhc3MiLCJhZGRpdGlvbmFsUHJvY2Vzc2luZyIsInR5cGVGbiIsIm1ldGFDdG9yIiwibWFrZU1ldGFkYXRhQ3RvciIsIkRlY29yYXRvckZhY3RvcnkiLCJhbm5vdGF0aW9uSW5zdGFuY2UiLCJjbHMiLCJuZ01ldGFkYXRhTmFtZSIsImFubm90YXRpb25DbHMiLCJwcm9wTmFtZSIsIm1ha2VQYXJhbURlY29yYXRvciIsIlBhcmFtRGVjb3JhdG9yRmFjdG9yeSIsIlBhcmFtRGVjb3JhdG9yIiwiYW5ub3RhdGlvbiIsInVudXNlZEtleSIsInBhcmFtZXRlcnMiLCJtYWtlUHJvcERlY29yYXRvciIsIlByb3BEZWNvcmF0b3JGYWN0b3J5IiwiZGVjb3JhdG9ySW5zdGFuY2UiLCJ1bnNoaWZ0IiwiQXR0cmlidXRlIiwiYXR0cmlidXRlTmFtZSIsIkluamVjdGlvblRva2VuIiwiX2Rlc2MiLCJBTkFMWVpFX0ZPUl9FTlRSWV9DT01QT05FTlRTIiwiUXVlcnkiLCJDb250ZW50Q2hpbGRyZW4iLCJhc3NpZ24iLCJpc1ZpZXdRdWVyeSIsImRlc2NlbmRhbnRzIiwiZW1pdERpc3RpbmN0Q2hhbmdlc09ubHkiLCJDb250ZW50Q2hpbGQiLCJWaWV3Q2hpbGRyZW4iLCJWaWV3Q2hpbGQiLCJGYWN0b3J5VGFyZ2V0IiwiZ2V0Q29tcGlsZXJGYWNhZGUiLCJnbG9iYWxOZyIsInVzYWdlIiwiVHlwZSIsImlzVHlwZSIsImZsYXR0ZW4iLCJkZWVwRm9yRWFjaCIsImFkZFRvQXJyYXkiLCJyZW1vdmVGcm9tQXJyYXkiLCJuZXdBcnJheSIsImtleVZhbHVlQXJyYXlTZXQiLCJrZXlWYWx1ZUFycmF5Iiwia2V5VmFsdWVBcnJheUluZGV4T2YiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJwcmV2aW91c0VuZCIsImFycmF5SW5zZXJ0MiIsImtleVZhbHVlQXJyYXlHZXQiLCJzdGFydCIsIm1pZGRsZSIsIl9hcnJheUluZGV4T2ZTb3J0ZWQiLCJFUzVfREVMRUdBVEVfQ1RPUiIsIkVTMjAxNV9JTkhFUklURURfQ0xBU1MiLCJFUzIwMTVfSU5IRVJJVEVEX0NMQVNTX1dJVEhfQ1RPUiIsIkVTMjAxNV9JTkhFUklURURfQ0xBU1NfV0lUSF9ERUxFR0FURV9DVE9SIiwiUmVmbGVjdGlvbkNhcGFiaWxpdGllcyIsInJlZmxlY3QiLCJfcmVmbGVjdCIsImlzUmVmbGVjdGlvbkVuYWJsZWQiLCJfemlwVHlwZXNBbmRBbm5vdGF0aW9ucyIsInBhcmFtVHlwZXMiLCJwYXJhbUFubm90YXRpb25zIiwiX293blBhcmFtZXRlcnMiLCJwYXJlbnRDdG9yIiwidHlwZVN0ciIsInRlc3QiLCJ0c2lja2xlQ3RvclBhcmFtcyIsImN0b3JQYXJhbWV0ZXJzIiwiY3RvclBhcmFtIiwiY29udmVydFRzaWNrbGVEZWNvcmF0b3JJbnRvTWV0YWRhdGEiLCJkZWNvcmF0b3JzIiwiZ2V0T3duTWV0YWRhdGEiLCJnZXRQYXJlbnRDdG9yIiwiX293bkFubm90YXRpb25zIiwidHlwZU9yRnVuYyIsImFubm90YXRpb25zIiwib3duQW5ub3RhdGlvbnMiLCJfb3duUHJvcE1ldGFkYXRhIiwicHJvcE1ldGFkYXRhIiwicHJvcERlY29yYXRvcnMiLCJwcm9wIiwicGFyZW50UHJvcE1ldGFkYXRhIiwib3duUHJvcE1ldGFkYXRhIiwiaGFzTGlmZWN5Y2xlSG9vayIsImxjUHJvcGVydHkiLCJndWFyZHMiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJtZXRob2QiLCJpbXBvcnRVcmkiLCJyZXNvdXJjZVVyaSIsInJlc29sdmVJZGVudGlmaWVyIiwibW9kdWxlVXJsIiwibWVtYmVycyIsInJ1bnRpbWUiLCJyZXNvbHZlRW51bSIsImVudW1JZGVudGlmaWVyIiwiZGVjb3JhdG9ySW52b2NhdGlvbnMiLCJkZWNvcmF0b3JJbnZvY2F0aW9uIiwiY3RvciIsInBhcmVudFByb3RvIiwiVEhST1dfSUZfTk9UX0ZPVU5EIiwiTkVXX0xJTkUiLCJTT1VSQ0UiLCJVU0VfVkFMVUUkMSIsInByb3ZpZGUiLCJ1c2VWYWx1ZSIsIl9jdXJyZW50SW5qZWN0b3IiLCJzZXRDdXJyZW50SW5qZWN0b3IiLCJpbmplY3RvciIsImZvcm1lciIsImluamVjdEluamVjdG9yT25seSIsImluamVjdCIsImluamVjdEFyZ3MiLCJ0eXBlcyIsImFyZyIsImZsYWciLCJhdHRhY2hJbmplY3RGbGFnIiwiZGVjb3JhdG9yIiwiSW5qZWN0IiwiZ2V0UmVmbGVjdCIsInJlZmxlY3REZXBlbmRlbmNpZXMiLCJjb252ZXJ0RGVwZW5kZW5jaWVzIiwiZGVwcyIsImRlcCIsImF0dHJpYnV0ZSIsIm9wdGlvbmFsIiwic2tpcFNlbGYiLCJwYXJhbSIsInByb3RvIiwicmVmbGVjdERlcGVuZGVuY3kiLCJyZXNvbHZlQ29tcG9uZW50UmVzb3VyY2VzIiwicmVzb3VyY2VSZXNvbHZlciIsImNvbXBvbmVudFJlc29sdmVkIiwidXJsTWFwIiwiY2FjaGVkUmVzb3VyY2VSZXNvbHZlIiwicmVzcCIsInVud3JhcFJlc3BvbnNlIiwiY29tcG9uZW50UmVzb3VyY2VSZXNvbHV0aW9uUXVldWUiLCJjb21wb25lbnQiLCJwcm9taXNlcyIsInRlbXBsYXRlVXJsIiwic3R5bGVVcmxzIiwic3R5bGVPZmZzZXQiLCJzdHlsZVVybCIsInN0eWxlIiwiZnVsbHlSZXNvbHZlZCIsImFsbCIsImNvbXBvbmVudERlZlBlbmRpbmdSZXNvbHV0aW9uIiwiY29tcG9uZW50RGVmUmVzb2x2ZWQiLCJjbGVhclJlc29sdXRpb25PZkNvbXBvbmVudFJlc291cmNlc1F1ZXVlIiwiY29tcG9uZW50TmVlZHNSZXNvbHV0aW9uIiwib2xkIiwicmVzcG9uc2UiLCJwb2xpY3kkMSIsInBvbGljeSIsImdldFBvbGljeSQxIiwidHJ1c3RlZFR5cGVzIiwiY3JlYXRlUG9saWN5IiwiY3JlYXRlSFRNTCIsImNyZWF0ZVNjcmlwdCIsImNyZWF0ZVNjcmlwdFVSTCIsInRydXN0ZWRIVE1MRnJvbVN0cmluZyIsImh0bWwiLCJnZXRQb2xpY3kiLCJ0cnVzdGVkSFRNTEZyb21TdHJpbmdCeXBhc3MiLCJ0cnVzdGVkU2NyaXB0RnJvbVN0cmluZ0J5cGFzcyIsInNjcmlwdCIsInRydXN0ZWRTY3JpcHRVUkxGcm9tU3RyaW5nQnlwYXNzIiwiU2FmZVZhbHVlSW1wbCIsImNoYW5naW5nVGhpc0JyZWFrc0FwcGxpY2F0aW9uU2VjdXJpdHkiLCJTYWZlSHRtbEltcGwiLCJnZXRUeXBlTmFtZSIsIlNhZmVTdHlsZUltcGwiLCJTYWZlU2NyaXB0SW1wbCIsIlNhZmVVcmxJbXBsIiwiU2FmZVJlc291cmNlVXJsSW1wbCIsInVud3JhcFNhZmVWYWx1ZSIsImFsbG93U2FuaXRpemF0aW9uQnlwYXNzQW5kVGhyb3ciLCJhY3R1YWxUeXBlIiwiZ2V0U2FuaXRpemF0aW9uQnlwYXNzVHlwZSIsImJ5cGFzc1Nhbml0aXphdGlvblRydXN0SHRtbCIsInRydXN0ZWRIdG1sIiwiYnlwYXNzU2FuaXRpemF0aW9uVHJ1c3RTdHlsZSIsInRydXN0ZWRTdHlsZSIsImJ5cGFzc1Nhbml0aXphdGlvblRydXN0U2NyaXB0IiwidHJ1c3RlZFNjcmlwdCIsImJ5cGFzc1Nhbml0aXphdGlvblRydXN0VXJsIiwidHJ1c3RlZFVybCIsImJ5cGFzc1Nhbml0aXphdGlvblRydXN0UmVzb3VyY2VVcmwiLCJ0cnVzdGVkUmVzb3VyY2VVcmwiLCJnZXRJbmVydEJvZHlIZWxwZXIiLCJkZWZhdWx0RG9jIiwiaW5lcnREb2N1bWVudEhlbHBlciIsIkluZXJ0RG9jdW1lbnRIZWxwZXIiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJpc0RPTVBhcnNlckF2YWlsYWJsZSIsIkRPTVBhcnNlckhlbHBlciIsImdldEluZXJ0Qm9keUVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsImluZXJ0RG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImluZXJ0SHRtbCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImluZXJ0Qm9keUVsZW1lbnQiLCJ0ZW1wbGF0ZUVsIiwiaW5uZXJIVE1MIiwiaW5lcnRCb2R5IiwiZG9jdW1lbnRNb2RlIiwic3RyaXBDdXN0b21Oc0F0dHJzIiwiZWwiLCJlbEF0dHJzIiwiYXR0cmlidXRlcyIsInJlbW92ZUF0dHJpYnV0ZSIsImNoaWxkTm9kZSIsIm5vZGVUeXBlIiwiRUxFTUVOVF9OT0RFIiwibmV4dFNpYmxpbmciLCJTQUZFX1VSTF9QQVRURVJOIiwiREFUQV9VUkxfUEFUVEVSTiIsIl9zYW5pdGl6ZVVybCIsIm1hdGNoIiwid2FybiIsInNhbml0aXplU3Jjc2V0Iiwic3Jjc2V0IiwidHJpbSIsInRhZ1NldCIsInRhZ3MiLCJzZXRzIiwiVk9JRF9FTEVNRU5UUyIsIk9QVElPTkFMX0VORF9UQUdfQkxPQ0tfRUxFTUVOVFMiLCJPUFRJT05BTF9FTkRfVEFHX0lOTElORV9FTEVNRU5UUyIsIk9QVElPTkFMX0VORF9UQUdfRUxFTUVOVFMiLCJCTE9DS19FTEVNRU5UUyIsIklOTElORV9FTEVNRU5UUyIsIlZBTElEX0VMRU1FTlRTIiwiVVJJX0FUVFJTIiwiU1JDU0VUX0FUVFJTIiwiSFRNTF9BVFRSUyIsIkFSSUFfQVRUUlMiLCJWQUxJRF9BVFRSUyIsIlNLSVBfVFJBVkVSU0lOR19DT05URU5UX0lGX0lOVkFMSURfRUxFTUVOVFMiLCJTYW5pdGl6aW5nSHRtbFNlcmlhbGl6ZXIiLCJzYW5pdGl6ZWRTb21ldGhpbmciLCJidWYiLCJzYW5pdGl6ZUNoaWxkcmVuIiwidHJhdmVyc2VDb250ZW50Iiwic3RhcnRFbGVtZW50IiwiVEVYVF9OT0RFIiwiY2hhcnMiLCJub2RlVmFsdWUiLCJlbmRFbGVtZW50IiwiY2hlY2tDbG9iYmVyZWRFbGVtZW50IiwicGFyZW50Tm9kZSIsInRhZ05hbWUiLCJub2RlTmFtZSIsImVsQXR0ciIsImVuY29kZUVudGl0aWVzIiwibmV4dE5vZGUiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIkRPQ1VNRU5UX1BPU0lUSU9OX0NPTlRBSU5FRF9CWSIsIm91dGVySFRNTCIsIlNVUlJPR0FURV9QQUlSX1JFR0VYUCIsIk5PTl9BTFBIQU5VTUVSSUNfUkVHRVhQIiwiaW5lcnRCb2R5SGVscGVyIiwiX3Nhbml0aXplSHRtbCIsInVuc2FmZUh0bWxJbnB1dCIsInVuc2FmZUh0bWwiLCJtWFNTQXR0ZW1wdHMiLCJwYXJzZWRIdG1sIiwic2FuaXRpemVyIiwic2FmZUh0bWwiLCJnZXRUZW1wbGF0ZUNvbnRlbnQiLCJpc1RlbXBsYXRlRWxlbWVudCIsImNvbnRlbnQiLCJTZWN1cml0eUNvbnRleHQiLCJnZXRTYW5pdGl6ZXIiLCJzYW5pdGl6ZSIsIkhUTUwiLCJ1bnNhZmVTdHlsZSIsIlNUWUxFIiwidW5zYWZlVXJsIiwiVVJMIiwidW5zYWZlUmVzb3VyY2VVcmwiLCJSRVNPVVJDRV9VUkwiLCJ1bnNhZmVTY3JpcHQiLCJTQ1JJUFQiLCJyYXciLCJ0cnVzdGVkU2NyaXB0VVJMRnJvbVN0cmluZyIsInRhZyIsImdldFVybFNhbml0aXplciIsImdldExDb250ZXh0IiwibXBWYWx1ZSIsInJlYWRQYXRjaGVkRGF0YSIsImZpbmRWaWFDb21wb25lbnQiLCJpc0RpcmVjdGl2ZUluc3RhbmNlIiwiZGlyZWN0aXZlSW5zdGFuY2UiLCJkaXJlY3RpdmVJbmRleFN0YXJ0IiwiZGlyZWN0aXZlSW5kZXhFbmQiLCJ0cmF2ZXJzZU5leHRFbGVtZW50IiwiZmluZFZpYURpcmVjdGl2ZSIsImdldERpcmVjdGl2ZXNBdE5vZGVJbmRleCIsImZpbmRWaWFOYXRpdmVFbGVtZW50IiwiZXhpc3RpbmdDdHgiLCJjcmVhdGVMQ29udGV4dCIsImF0dGFjaFBhdGNoRGF0YSIsInJFbGVtZW50IiwicGFyZW50Q29udGV4dCIsImxvY2FsUmVmcyIsImdldENvbXBvbmVudFZpZXdCeUluc3RhbmNlIiwiY29tcG9uZW50SW5zdGFuY2UiLCJyZWFkUGF0Y2hlZExWaWV3IiwiY29tcG9uZW50SW5kaWNlcyIsImNvbXBvbmVudHMiLCJlbGVtZW50Q29tcG9uZW50SW5kZXgiLCJpbmNsdWRlQ29tcG9uZW50cyIsImRpcmVjdGl2ZVN0YXJ0SW5kZXgiLCJkaXJlY3RpdmVFbmRJbmRleCIsImdldE9yaWdpbmFsRXJyb3IiLCJkZWZhdWx0RXJyb3JMb2dnZXIiLCJFcnJvckhhbmRsZXIiLCJfY29uc29sZSIsIm9yaWdpbmFsRXJyb3IiLCJfZmluZE9yaWdpbmFsRXJyb3IiLCJlcnJvckxvZ2dlciIsImdldEVycm9yTG9nZ2VyIiwiQ1VTVE9NX0VMRU1FTlRTX1NDSEVNQSIsIk5PX0VSUk9SU19TQ0hFTUEiLCJDT01NRU5UX0RJU0FMTE9XRUQiLCJDT01NRU5UX0RFTElNSVRFUiIsImVzY2FwZUNvbW1lbnRUZXh0IiwiQ0FNRUxfQ0FTRV9SRUdFWFAiLCJkZWZhdWx0U2NoZWR1bGVyIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwiSU5URVJQT0xBVElPTl9ERUxJTUlURVIiLCJtYXliZVVud3JhcEZuIiwidGhyb3dNdWx0aXBsZUNvbXBvbmVudEVycm9yIiwiY29uc3RydWN0RGV0YWlsc0ZvckludGVycG9sYXRpb24iLCJyb290SW5kZXgiLCJleHByZXNzaW9uSW5kZXgiLCJjaGFuZ2VkVmFsdWUiLCJwcmVmaXgiLCJjaHVua3MiLCJuZXdWYWx1ZSIsInNsb3RJZHgiLCJSZW5kZXJlclN0eWxlRmxhZ3MyIiwiX2ljdUNvbnRhaW5lckl0ZXJhdGUiLCJpY3VDb250YWluZXJJdGVyYXRlIiwidEljdUNvbnRhaW5lck5vZGUiLCJnZXRMVmlld1BhcmVudCIsImdldFJvb3RDb250ZXh0Iiwidmlld09yQ29tcG9uZW50Iiwicm9vdFZpZXciLCJjb21wb25lbnRPckxWaWV3IiwiZ2V0Um9vdFZpZXciLCJnZXRGaXJzdExDb250YWluZXIiLCJnZXROZWFyZXN0TENvbnRhaW5lciIsIkNISUxEX0hFQUQiLCJnZXROZXh0TENvbnRhaW5lciIsImNvbnRhaW5lciIsImFwcGx5VG9FbGVtZW50T3JDb250YWluZXIiLCJsTm9kZVRvSGFuZGxlIiwiYmVmb3JlTm9kZSIsImlzQ29tcG9uZW50Iiwick5vZGUiLCJuYXRpdmVBcHBlbmRDaGlsZCIsIm5hdGl2ZUluc2VydEJlZm9yZSIsIm5hdGl2ZVJlbW92ZU5vZGUiLCJkZXN0cm95Tm9kZSIsInBhcmVudFJFbGVtZW50IiwiYW5jaG9yIiwiYXBwbHlWaWV3IiwiYXBwbHlDb250YWluZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNyZWF0ZVRleHQiLCJ1cGRhdGVUZXh0Tm9kZSIsInNldFZhbHVlIiwidGV4dENvbnRlbnQiLCJjcmVhdGVDb21tZW50Tm9kZSIsImNyZWF0ZUNvbW1lbnQiLCJjcmVhdGVFbGVtZW50Tm9kZSIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVyaSIsImdldE5hbWVzcGFjZVVyaSIsImNyZWF0ZUVsZW1lbnROUyIsImRldGFjaE1vdmVkVmlldyIsImRlY2xhcmF0aW9uQ29udGFpbmVyIiwibW92ZWRWaWV3cyIsImRlY2xhcmF0aW9uVmlld0luZGV4IiwiaW5zZXJ0aW9uTENvbnRhaW5lciIsImRldGFjaFZpZXciLCJyZW1vdmVJbmRleCIsImluZGV4SW5Db250YWluZXIiLCJ2aWV3VG9EZXRhY2giLCJkZWNsYXJhdGlvbkxDb250YWluZXIiLCJyZW1vdmVkTFZpZXciLCJsUXVlcmllcyIsIlFVRVJJRVMiLCJkZXN0cm95TFZpZXciLCJsVmlld09yTENvbnRhaW5lciIsImNsZWFuVXBWaWV3IiwiZmlyc3RWaWV3IiwiZGVzdHJveVZpZXdUcmVlIiwidG9DYWxsIiwiY2FsbENvbnRleHQiLCJleGVjdXRlT25EZXN0cm95cyIsInRDbGVhbnVwIiwiY2xlYW51cCIsImxDbGVhbnVwIiwibGFzdExDbGVhbnVwSW5kZXgiLCJpZHhPclRhcmdldEdldHRlciIsImxpc3RlbmVyIiwidXNlQ2FwdHVyZU9yU3ViSWR4IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImluc3RhbmNlQ2xlYW51cEZuIiwicHJvY2Vzc0NsZWFudXBzIiwiZGVzdHJveSIsImdldFBhcmVudFJFbGVtZW50IiwiZ2V0Q2xvc2VzdFJFbGVtZW50IiwiTm9uZSIsImlzTW92ZSIsImluc2VydEJlZm9yZSIsIm5hdGl2ZUFwcGVuZE9ySW5zZXJ0QmVmb3JlIiwibmF0aXZlUGFyZW50Tm9kZSIsImdldEluc2VydEluRnJvbnRPZlJOb2RlIiwiX2dldEluc2VydEluRnJvbnRPZlJOb2RlV2l0aEkxOG4iLCJnZXRJbnNlcnRJbkZyb250T2ZSTm9kZVdpdGhOb0kxOG4iLCJfcHJvY2Vzc0kxOG5JbnNlcnRCZWZvcmUiLCJzZXRJMThuSGFuZGxpbmciLCJnZXRJbnNlcnRJbkZyb250T2ZSTm9kZVdpdGhJMThuIiwicHJvY2Vzc0kxOG5JbnNlcnRCZWZvcmUiLCJjaGlsZFJOb2RlIiwiY2hpbGRUTm9kZSIsInBhcmVudFJOb2RlIiwiYW5jaG9yTm9kZSIsImdldEZpcnN0TmF0aXZlTm9kZSIsImdldEJlZm9yZU5vZGVGb3JWaWV3IiwiZWxJY3VDb250YWluZXJDaGlsZCIsInJOb2RlT3JMQ29udGFpbmVyIiwibmV4dFJOb2RlIiwicHJvamVjdGlvbk5vZGVzIiwiZ2V0UHJvamVjdGlvbk5vZGVzIiwiY29tcG9uZW50SG9zdCIsInByb2plY3Rpb24iLCJhc3NlcnRQcm9qZWN0aW9uU2xvdHMiLCJ2aWV3SW5kZXhJbkNvbnRhaW5lciIsIm5leHRWaWV3SW5kZXgiLCJmaXJzdFROb2RlT2ZWaWV3IiwiaXNIb3N0RWxlbWVudCIsIm5hdGl2ZVBhcmVudCIsIm5hdGl2ZVJlbW92ZUNoaWxkIiwiYXBwbHlOb2RlcyIsImlzUHJvamVjdGlvbiIsInJhd1Nsb3RWYWx1ZSIsImFwcGx5UHJvamVjdGlvblJlY3Vyc2l2ZSIsInByb2plY3Rpb25OZXh0IiwidFByb2plY3Rpb25Ob2RlIiwiY29tcG9uZW50TFZpZXciLCJjb21wb25lbnROb2RlIiwibm9kZVRvUHJvamVjdE9yUk5vZGVzIiwid3JpdGVEaXJlY3RTdHlsZSIsImNzc1RleHQiLCJ3cml0ZURpcmVjdENsYXNzIiwiY2xhc3NOYW1lIiwiY2xhc3NJbmRleE9mIiwiY2xhc3NUb1NlYXJjaCIsInN0YXJ0aW5nSW5kZXgiLCJmb3VuZEluZGV4IiwiTkdfVEVNUExBVEVfU0VMRUNUT1IiLCJpc0Nzc0NsYXNzTWF0Y2hpbmciLCJjc3NDbGFzc1RvTWF0Y2giLCJpc1Byb2plY3Rpb25Nb2RlIiwiaXNJbmxpbmVUZW1wbGF0ZSIsImhhc1RhZ0FuZFR5cGVNYXRjaCIsImN1cnJlbnRTZWxlY3RvciIsImlzTm9kZU1hdGNoaW5nU2VsZWN0b3IiLCJub2RlQXR0cnMiLCJuYW1lT25seU1hcmtlcklkeCIsImdldE5hbWVPbmx5TWFya2VySW5kZXgiLCJza2lwVG9OZXh0U2VsZWN0b3IiLCJpc1Bvc2l0aXZlIiwic2VsZWN0b3JBdHRyVmFsdWUiLCJhdHRySW5kZXhJbk5vZGUiLCJmaW5kQXR0ckluZGV4SW5Ob2RlIiwibm9kZUF0dHJWYWx1ZSIsImNvbXBhcmVBZ2FpbnN0Q2xhc3NOYW1lIiwiYmluZGluZ3NNb2RlIiwibWF5YmVBdHRyTmFtZSIsImF0dHIiLCJtYXRjaFRlbXBsYXRlQXR0cmlidXRlIiwiaXNOb2RlTWF0Y2hpbmdTZWxlY3Rvckxpc3QiLCJpc1NlbGVjdG9ySW5TZWxlY3Rvckxpc3QiLCJzZWxlY3Rvckxpc3RMb29wIiwiY3VycmVudFNlbGVjdG9ySW5MaXN0IiwibWF5YmVXcmFwSW5Ob3RTZWxlY3RvciIsImlzTmVnYXRpdmVNb2RlIiwiY2h1bmsiLCJzdHJpbmdpZnlDU1NTZWxlY3RvciIsImN1cnJlbnRDaHVuayIsInZhbHVlT3JNYXJrZXIiLCJhdHRyVmFsdWUiLCJOT19DSEFOR0UiLCJfX2JyYW5kX18iLCJkZWx0YSIsInNlbGVjdEluZGV4SW50ZXJuYWwiLCJjaGVja05vQ2hhbmdlc01vZGUiLCJhc3NlcnRJbmRleEluRGVjbFJhbmdlIiwiY3JlYXRlTmFtZWRBcnJheVR5cGUiLCJ0b1RTdHlsaW5nUmFuZ2UiLCJnZXRUU3R5bGluZ1JhbmdlUHJldiIsInRTdHlsaW5nUmFuZ2UiLCJnZXRUU3R5bGluZ1JhbmdlUHJldkR1cGxpY2F0ZSIsInNldFRTdHlsaW5nUmFuZ2VQcmV2RHVwbGljYXRlIiwiZ2V0VFN0eWxpbmdSYW5nZU5leHQiLCJzZXRUU3R5bGluZ1JhbmdlTmV4dCIsImdldFRTdHlsaW5nUmFuZ2VOZXh0RHVwbGljYXRlIiwic2V0VFN0eWxpbmdSYW5nZU5leHREdXBsaWNhdGUiLCJhdHRhY2hEZWJ1Z09iamVjdCIsImRlYnVnIiwiYXR0YWNoRGVidWdHZXR0ZXIiLCJkZWJ1Z0dldHRlciIsIkxWSUVXX0NPTVBPTkVOVF9DQUNIRSIsIkxWSUVXX0VNQkVEREVEX0NBQ0hFIiwiTFZJRVdfUk9PVCIsIkxWSUVXX0NPTVBPTkVOVCIsIkxWSUVXX0VNQkVEREVEIiwiTFJvb3RWaWV3IiwiTENvbXBvbmVudFZpZXciLCJMRW1iZWRkZWRWaWV3IiwibmFtZVN1ZmZpeCIsImxhc3RJbmRleE9mIiwic3Vic3RyIiwidG9EZWJ1Z1N0eWxlQmluZGluZyIsImlzQ2xhc3NCYXNlZCIsImJpbmRpbmdzIiwicmFuZ2UiLCJjbGFzc0JpbmRpbmdzIiwic3R5bGVCaW5kaW5ncyIsImlzVGVtcGxhdGUiLCJjdXJzb3IiLCJpdGVtS2V5IiwiaXRlbVJhbmdlIiwicHJldkR1cGxpY2F0ZSIsIm5leHREdXBsaWNhdGUiLCJuZXh0SW5kZXgiLCJwcmV2SW5kZXgiLCJyZXNpZHVhbENsYXNzZXMiLCJyZXNpZHVhbFN0eWxlcyIsInByb2Nlc3NUTm9kZUNoaWxkcmVuIiwidGVtcGxhdGVfIiwiVFZpZXdEYXRhIiwiVFZJRVdEQVRBX0VNUFRZIiwiTFZpZXdCbHVlcHJpbnQiLCJNYXRjaGVzQXJyYXkiLCJUVmlld0NvbXBvbmVudHMiLCJUTm9kZUxvY2FsTmFtZXMiLCJUTm9kZUluaXRpYWxJbnB1dHMiLCJMQ2xlYW51cCIsIlRDbGVhbnVwIiwidG9EZWJ1ZyIsInRvSHRtbCIsImluY2x1ZGVDaGlsZHJlbiIsIkNPTU1FTlRfTk9ERSIsIkxWaWV3RGVidWciLCJfcmF3X2xWaWV3IiwiX19yYXdfX2ZsYWdzX18iLCJpbml0UGhhc2VTdGF0ZSIsImNyZWF0aW9uTW9kZSIsImZpcnN0Vmlld1Bhc3MiLCJjaGVja0Fsd2F5cyIsImRpcnR5IiwiYXR0YWNoZWQiLCJkZXN0cm95ZWQiLCJpbmRleFdpdGhpbkluaXRQaGFzZSIsImhvc3RIVE1MIiwibm9kZXMiLCJtYXBUb0hUTUwiLCJ0b0RlYnVnTm9kZXMiLCJyZW5kZXJlckZhY3RvcnkiLCJSRU5ERVJFUl9GQUNUT1JZIiwiY2hpbGRIZWFkIiwiY2hpbGRUYWlsIiwiZGVjbGFyYXRpb25WaWV3IiwicXVlcmllcyIsInRIb3N0IiwidG9MVmlld1JhbmdlIiwiZXhwYW5kbyIsImNoaWxkVmlld3MiLCJjaGlsZHJlbiIsImwiLCJkZWJ1Z05vZGVzIiwidE5vZGVDdXJzb3IiLCJidWlsZERlYnVnTm9kZSIsImZhY3RvcmllcyIsImluc3RhbmNlcyIsImJ1aWxkTm9kZUluamVjdG9yRGVidWciLCJpbmplY3RvclJlc29sdXRpb25QYXRoIiwiZGVidWdOb2RlSW5qZWN0b3JQYXRoIiwidmlld1Byb3ZpZGVycyIsInByb3ZpZGVySW5kZXhTdGFydF8iLCJwcm92aWRlckluZGV4RW5kXyIsImJsb29tIiwidG9CbG9vbSIsImN1bXVsYXRpdmVCbG9vbSIsInBhcmVudEluamVjdG9ySW5kZXgiLCJiaW5hcnkiLCJpZHgiLCJMQ29udGFpbmVyRGVidWciLCJfcmF3X2xDb250YWluZXIiLCJoYXNUcmFuc3BsYW50ZWRWaWV3cyIsInZpZXdzIiwiX0NMRUFOX1BST01JU0UiLCJyZWZyZXNoQ29udGVudFF1ZXJpZXMiLCJxdWVyeVN0YXJ0SWR4IiwiZGlyZWN0aXZlRGVmSWR4IiwiY3JlYXRlTFZpZXciLCJ0SG9zdE5vZGUiLCJjb21wb25lbnRBcnJheSIsImVtYmVkZGVkQXJyYXkiLCJnZXRMVmlld1RvQ2xvbmUiLCJjbG9uZVRvTFZpZXdGcm9tVFZpZXdCbHVlcHJpbnQiLCJhdHRhY2hMVmlld0RlYnVnIiwiZ2V0T3JDcmVhdGVUTm9kZSIsImFzc2VydFB1cmVUTm9kZVR5cGUiLCJjcmVhdGVUTm9kZUF0SW5kZXgiLCJ0UGFyZW50IiwiaW5zZXJ0QmVmb3JlSW5kZXgiLCJkaXJlY3RpdmVTdHlsaW5nTGFzdCIsInByb3BlcnR5QmluZGluZ3MiLCJtZXJnZWRBdHRycyIsImxvY2FsTmFtZXMiLCJpbml0aWFsSW5wdXRzIiwidFZpZXdzIiwic3R5bGVzV2l0aG91dEhvc3QiLCJjbGFzc2VzV2l0aG91dEhvc3QiLCJ0eXBlXyIsImZsYWdzXyIsInN0eWxlQmluZGluZ3NfIiwiY2xhc3NCaW5kaW5nc18iLCJzZWFsIiwiY3JlYXRlVE5vZGUiLCJhbGxvY0V4cGFuZG8iLCJudW1TbG90c1RvQWxsb2MiLCJhbGxvY0lkeCIsInJlbmRlclZpZXciLCJleGVjdXRlVmlld1F1ZXJ5Rm4iLCJ0ZW1wbGF0ZUZuIiwiZXhlY3V0ZVRlbXBsYXRlIiwic3RhdGljQ29udGVudFF1ZXJpZXMiLCJzdGF0aWNWaWV3UXVlcmllcyIsImhvc3RMVmlldyIsInJlbmRlckNvbXBvbmVudCQxIiwicmVuZGVyQ2hpbGRDb21wb25lbnRzIiwiaW5jb21wbGV0ZUZpcnN0UGFzcyIsInJlZnJlc2hWaWV3IiwiaXNJbkNoZWNrTm9DaGFuZ2VzUGFzcyIsImhvb2tzSW5pdFBoYXNlQ29tcGxldGVkIiwibW92ZWRMVmlldyIsIm1hcmtUcmFuc3BsYW50ZWRWaWV3c0ZvclJlZnJlc2giLCJlbWJlZGRlZExWaWV3IiwiZW1iZWRkZWRUVmlldyIsInJlZnJlc2hFbWJlZGRlZFZpZXdzIiwiaG9zdEJpbmRpbmdPcENvZGVzIiwib3BDb2RlIiwiZGlyZWN0aXZlSWR4IiwiYmluZGluZ1Jvb3RJbmR4IiwiaG9zdEJpbmRpbmdGbiIsInByb2Nlc3NIb3N0QmluZGluZ09wQ29kZXMiLCJyZWZyZXNoQ29tcG9uZW50IiwicmVmcmVzaENoaWxkQ29tcG9uZW50cyIsInJlbmRlckNvbXBvbmVudE9yVGVtcGxhdGUiLCJub3JtYWxFeGVjdXRpb25QYXRoIiwiY3JlYXRpb25Nb2RlSXNBY3RpdmUiLCJiZWdpbiIsInJmIiwicHJldlNlbGVjdGVkSW5kZXgiLCJpc1VwZGF0ZVBoYXNlIiwiZXhlY3V0ZUNvbnRlbnRRdWVyaWVzIiwiY3JlYXRlRGlyZWN0aXZlc0luc3RhbmNlcyIsImFkZENvbXBvbmVudExvZ2ljIiwic2V0SW5wdXRzRnJvbUF0dHJzIiwiaW5zdGFudGlhdGVBbGxEaXJlY3RpdmVzIiwiZWxlbWVudEluZGV4IiwiZGlySW5kZXgiLCJpbnZva2VIb3N0QmluZGluZ3NJbkNyZWF0aW9uTW9kZSIsImludm9rZURpcmVjdGl2ZXNIb3N0QmluZGluZ3MiLCJzYXZlUmVzb2x2ZWRMb2NhbHNJbkRhdGEiLCJ2aWV3RGF0YSIsImxvY2FsUmVmRXh0cmFjdG9yIiwibG9jYWxJbmRleCIsImdldE9yQ3JlYXRlVENvbXBvbmVudFZpZXciLCJjcmVhdGVUVmlldyIsImNvbnN0c09yRmFjdG9yeSIsImluaXRpYWxWaWV3TGVuZ3RoIiwiY3JlYXRlVmlld0JsdWVwcmludCIsImRpcmVjdGl2ZVJlZ2lzdHJ5IiwicGlwZVJlZ2lzdHJ5IiwiX2RlY2xzIiwiX3ZhcnMiLCJmaWxsIiwibG9jYXRlSG9zdEVsZW1lbnQiLCJlbGVtZW50T3JTZWxlY3RvciIsInByZXNlcnZlQ29udGVudCIsIlNoYWRvd0RvbSIsInNlbGVjdFJvb3RFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsImFzc2VydEhvc3ROb2RlRXhpc3RzIiwic3RvcmVDbGVhbnVwV2l0aENvbnRleHQiLCJjbGVhbnVwRm4iLCJnZXRPckNyZWF0ZUxWaWV3Q2xlYW51cCIsImdldE9yQ3JlYXRlVFZpZXdDbGVhbnVwIiwiZ2VuZXJhdGVQcm9wZXJ0eUFsaWFzZXMiLCJpbnB1dEFsaWFzTWFwIiwicHJvcFN0b3JlIiwiaW50ZXJuYWxOYW1lIiwiZWxlbWVudFByb3BlcnR5SW50ZXJuYWwiLCJuYXRpdmVPbmx5IiwiZGF0YVZhbHVlIiwiaW5wdXREYXRhIiwic2V0SW5wdXRzRm9yUHJvcGVydHkiLCJ2aWV3SW5kZXgiLCJjaGlsZENvbXBvbmVudExWaWV3IiwibWFya0RpcnR5SWZPblB1c2giLCJzZXROZ1JlZmxlY3RQcm9wZXJ0eSIsInNldE5nUmVmbGVjdFByb3BlcnRpZXMiLCJzdGFydHNXaXRoIiwidmFsaWRhdGVBZ2FpbnN0RXZlbnRQcm9wZXJ0aWVzIiwibWF0Y2hpbmdTY2hlbWFzIiwidmFsaWRhdGVQcm9wZXJ0eSIsImxvZ1Vua25vd25Qcm9wZXJ0eUVycm9yIiwiZGVidWdWYWx1ZSIsIm5vcm1hbGl6ZURlYnVnQmluZGluZ1ZhbHVlIiwic2NoZW1hIiwicmVzb2x2ZURpcmVjdGl2ZXMiLCJoYXNEaXJlY3RpdmVzIiwicmVnaXN0cnkiLCJtYXRjaGVzIiwibWFya0FzQ29tcG9uZW50SG9zdCIsImZpbmREaXJlY3RpdmVEZWZNYXRjaGVzIiwiZXhwb3J0c01hcCIsImluaXRUTm9kZUZsYWdzIiwicHJlT3JkZXJIb29rc0ZvdW5kIiwicHJlT3JkZXJDaGVja0hvb2tzRm91bmQiLCJjb25maWd1cmVWaWV3V2l0aERpcmVjdGl2ZSIsInNhdmVOYW1lVG9FeHBvcnRNYXAiLCJsaWZlQ3ljbGVIb29rcyIsInRWaWV3RGF0YSIsInROb2RlQXR0cnMiLCJpbnB1dHNGcm9tQXR0cnMiLCJpbnB1dHNTdG9yZSIsIm91dHB1dHNTdG9yZSIsImRpcmVjdGl2ZUlucHV0cyIsImdlbmVyYXRlSW5pdGlhbElucHV0cyIsImluaXRpYWxpemVJbnB1dEFuZE91dHB1dEFsaWFzZXMiLCJjYWNoZU1hdGNoaW5nTG9jYWxOYW1lcyIsInJlZ2lzdGVySG9zdEJpbmRpbmdPcENvZGVzIiwiZGlyZWN0aXZlVmFyc0lkeCIsImVsZW1lbnRJbmR4IiwibGFzdFNlbGVjdGVkRWxlbWVudElkeCIsImhvc3RUTm9kZSIsIm51bWJlck9mRGlyZWN0aXZlcyIsImRpcmVjdGl2ZUZhY3RvcnkiLCJub2RlSW5qZWN0b3JGYWN0b3J5IiwiY29tcG9uZW50VmlldyIsImFkZFRvVmlld1RyZWUiLCJlbGVtZW50QXR0cmlidXRlSW50ZXJuYWwiLCJ2YWxpZGF0ZUFnYWluc3RFdmVudEF0dHJpYnV0ZXMiLCJzZXRFbGVtZW50QXR0cmlidXRlIiwic3RyVmFsdWUiLCJpbml0aWFsSW5wdXREYXRhIiwiaW5wdXRzVG9TdG9yZSIsIkxDb250YWluZXJBcnJheSIsImNyZWF0ZUxDb250YWluZXIiLCJob3N0TmF0aXZlIiwiYXR0YWNoTENvbnRhaW5lckRlYnVnIiwiY29tcG9uZW50SG9zdElkeCIsInJlZnJlc2hDb250YWluc0RpcnR5VmlldyIsImNvbXBvbmVudFRWaWV3Iiwic3luY1ZpZXdXaXRoQmx1ZXByaW50IiwibWFya1ZpZXdEaXJ0eSIsInRpY2tSb290Q29udGV4dCIsInJvb3RDb250ZXh0Iiwicm9vdENvbXBvbmVudCIsImRldGVjdENoYW5nZXNJbnRlcm5hbCIsImRldGVjdENoYW5nZXNJblJvb3RWaWV3Iiwidmlld1F1ZXJ5Rm4iLCJzdG9yZVByb3BlcnR5QmluZGluZ01ldGFkYXRhIiwicHJvcGVydHlOYW1lIiwiaW50ZXJwb2xhdGlvblBhcnRzIiwiYmluZGluZ01ldGFkYXRhIiwiQ0xFQU5fUFJPTUlTRSIsImxvYWRDb21wb25lbnRSZW5kZXJlciIsImN1cnJlbnREZWYiLCJ1bndyYXBMVmlldyIsInRleHRCaW5kaW5nSW50ZXJuYWwiLCJjb21wdXRlU3RhdGljU3R5bGluZyIsIndyaXRlVG9Ib3N0IiwiZGV0ZWN0Q2hhbmdlcyIsIm1hcmtEaXJ0eSIsImNsZWFuIiwicGxheWVySGFuZGxlciIsImZsdXNoUGxheWVycyIsInNjaGVkdWxlVGljayIsIklOSkVDVE9SIiwiTnVsbEluamVjdG9yIiwiSU5KRUNUT1JfU0NPUEUiLCJOT1RfWUVUIiwiQ0lSQ1VMQVIiLCJOVUxMX0lOSkVDVE9SJDEiLCJnZXROdWxsSW5qZWN0b3IiLCJjcmVhdGVJbmplY3RvciIsImRlZlR5cGUiLCJhZGRpdGlvbmFsUHJvdmlkZXJzIiwiY3JlYXRlSW5qZWN0b3JXaXRob3V0SW5qZWN0b3JJbnN0YW5jZXMiLCJfcmVzb2x2ZUluamVjdG9yRGVmVHlwZXMiLCJSM0luamVjdG9yIiwicmVjb3JkcyIsImluamVjdG9yRGVmVHlwZXMiLCJfZGVzdHJveWVkIiwiZGVkdXBTdGFjayIsInByb2Nlc3NQcm92aWRlciIsImluamVjdG9yRGVmIiwicHJvY2Vzc0luamVjdG9yVHlwZSIsIm1ha2VSZWNvcmQiLCJhc3NlcnROb3REZXN0cm95ZWQiLCJzZXJ2aWNlIiwicHJldmlvdXNJbmplY3RvciIsImluamVjdGFibGVEZWZJblNjb3BlIiwiaW5qZWN0YWJsZURlZk9ySW5qZWN0b3JEZWZGYWN0b3J5IiwiaHlkcmF0ZSIsIm5leHRJbmplY3RvciIsImluamVjdG9yRXJyb3JOYW1lIiwidG9rZW5QYXRoIiwiY2hhckF0IiwicGFydHMiLCJmb3JtYXRFcnJvciIsImNhdGNoSW5qZWN0b3JFcnJvciIsInRva2VucyIsImRlZk9yV3JhcHBlZERlZiIsInBhcmVudHMiLCJuZ01vZHVsZSIsImlzRHVwbGljYXRlIiwiaW1wb3J0VHlwZXNXaXRoUHJvdmlkZXJzIiwiaW1wb3J0ZWQiLCJkZWZQcm92aWRlcnMiLCJpbmplY3RvclR5cGUiLCJuZ01vZHVsZVR5cGUiLCJpc1R5cGVQcm92aWRlciIsImlzVmFsdWVQcm92aWRlciIsInByb3ZpZGVyVG9GYWN0b3J5IiwicHJvdmlkZXJUb1JlY29yZCIsIm11bHRpIiwiZXhpc3RpbmciLCJtdWx0aVJlY29yZCIsInBhcmFtTGVuZ3RoIiwiaW5oZXJpdGVkSW5qZWN0YWJsZURlZiIsInR5cGVOYW1lIiwiZ2V0SW5oZXJpdGVkSW5qZWN0YWJsZURlZiIsImdldFVuZGVjb3JhdGVkSW5qZWN0YWJsZUZhY3RvcnkiLCJ1bndyYXBwZWRQcm92aWRlciIsInVzZUZhY3RvcnkiLCJ1c2VFeGlzdGluZyIsImlzRXhpc3RpbmdQcm92aWRlciIsImNsYXNzUmVmIiwidXNlQ2xhc3MiLCJuZ01vZHVsZURldGFpbCIsInRocm93SW52YWxpZFByb3ZpZGVyRXJyb3IiLCJoYXNEZXBzIiwiSW5qZWN0b3IiLCJzdGF0aWMiLCJnZXRDb21wb25lbnQkMSIsImFzc2VydERvbUVsZW1lbnQiLCJnZXRDb21wb25lbnRBdE5vZGVJbmRleCIsImdldENvbnRleHQiLCJnZXRPd25pbmdDb21wb25lbnQiLCJlbGVtZW50T3JEaXIiLCJnZXRSb290Q29tcG9uZW50cyIsImdldEluamVjdG9yIiwiTlVMTCIsImdldERpcmVjdGl2ZXMiLCJUZXh0IiwiZ2V0RGlyZWN0aXZlTWV0YWRhdGEkMSIsImRpcmVjdGl2ZU9yQ29tcG9uZW50SW5zdGFuY2UiLCJjb21wb25lbnREZWYiLCJnZXRIb3N0RWxlbWVudCIsImNvbXBvbmVudE9yRGlyZWN0aXZlIiwiZ2V0TGlzdGVuZXJzIiwibENvbnRleHQiLCJsaXN0ZW5lcnMiLCJmaXJzdFBhcmFtIiwic2Vjb25kUGFyYW0iLCJsaXN0ZW5lckVsZW1lbnQiLCJ1c2VDYXB0dXJlT3JJbmR4IiwidXNlQ2FwdHVyZSIsInNvcnRMaXN0ZW5lcnMiLCJFbGVtZW50IiwiYXBwbHlDaGFuZ2VzIiwiX3B1Ymxpc2hlZCIsInB1Ymxpc2hEZWZhdWx0R2xvYmFsVXRpbHMkMSIsInB1Ymxpc2hHbG9iYWxVdGlsIiwiQ09NUElMRUQiLCJ3IiwicmVuZGVyQ29tcG9uZW50IiwiY29tcG9uZW50VHlwZSIsImNvbXBvbmVudFRhZyIsImhvc3RSTm9kZSIsInJvb3RGbGFncyIsImNyZWF0ZVJvb3RDb250ZXh0Iiwicm9vdFRWaWV3IiwiY3JlYXRlUm9vdENvbXBvbmVudCIsImNyZWF0ZVJvb3RDb21wb25lbnRWaWV3IiwiaG9zdEZlYXR1cmVzIiwiaG9zdFJlbmRlcmVyIiwidmlld1JlbmRlcmVyIiwicm9vdExWaWV3Iiwicm9vdFROb2RlIiwiaW5zdGFudGlhdGVSb290Q29tcG9uZW50IiwiTGlmZWN5Y2xlSG9va3NGZWF0dXJlIiwid2hlblJlbmRlcmVkIiwiZ2V0U3VwZXJUeXBlIiwic3VwZXJUeXBlIiwic2hvdWxkSW5oZXJpdEZpZWxkcyIsImluaGVyaXRhbmNlQ2hhaW4iLCJzdXBlckRlZiIsIndyaXRlYWJsZURlZiIsIm1heWJlVW53cmFwRW1wdHkiLCJzdXBlckhvc3RCaW5kaW5ncyIsImluaGVyaXRIb3N0QmluZGluZ3MiLCJzdXBlclZpZXdRdWVyeSIsInN1cGVyQ29udGVudFF1ZXJpZXMiLCJpbmhlcml0Vmlld1F1ZXJ5IiwiaW5oZXJpdENvbnRlbnRRdWVyaWVzIiwiYW5pbWF0aW9uIiwiZGVmRGF0YSIsIm1lcmdlSG9zdEF0dHJzQWNyb3NzSW5oZXJpdGFuY2UiLCJwcmV2Vmlld1F1ZXJ5IiwiY3R4IiwicHJldkNvbnRlbnRRdWVyaWVzIiwicHJldkhvc3RCaW5kaW5ncyIsIkNPUFlfRElSRUNUSVZFX0ZJRUxEUyIsIkNPUFlfQ09NUE9ORU5UX0ZJRUxEUyIsImRlZkFueSIsIl9zeW1ib2xJdGVyYXRvciIsImdldE93blByb3BlcnR5TmFtZXMiLCJkZXZNb2RlRXF1YWwiLCJpc0xpc3RMaWtlSXRlcmFibGVBIiwiaXNMaXN0TGlrZUl0ZXJhYmxlIiwiaXNMaXN0TGlrZUl0ZXJhYmxlQiIsIml0ZXJhdG9yMSIsIml0ZXJhdG9yMiIsIml0ZW0xIiwiaXRlbTIiLCJhcmVJdGVyYWJsZXNFcXVhbCIsImlzQU9iamVjdCIsImlzQk9iamVjdCIsImlzIiwiaXNKc09iamVjdCIsInVwZGF0ZUJpbmRpbmciLCJnZXRCaW5kaW5nIiwiYmluZGluZ1VwZGF0ZWQiLCJvbGRWYWx1ZVRvQ29tcGFyZSIsImRldGFpbHMiLCJtZXRhZGF0YSIsIlJlZ0V4cCIsImdldEV4cHJlc3Npb25DaGFuZ2VkRXJyb3JEZXRhaWxzIiwiY3VyclZhbHVlIiwidGhyb3dFcnJvcklmTm9DaGFuZ2VzTW9kZSIsImJpbmRpbmdVcGRhdGVkMiIsImV4cDEiLCJleHAyIiwiZGlmZmVyZW50IiwiYmluZGluZ1VwZGF0ZWQzIiwiZXhwMyIsImJpbmRpbmdVcGRhdGVkNCIsImV4cDQiLCJpbnRlcnBvbGF0aW9uViIsImlzQmluZGluZ1VwZGF0ZWQiLCJpbnRlcnBvbGF0aW9uMSIsInYwIiwic3VmZml4IiwiaW50ZXJwb2xhdGlvbjIiLCJpMCIsInYxIiwiaW50ZXJwb2xhdGlvbjMiLCJpMSIsInYyIiwiaW50ZXJwb2xhdGlvbjQiLCJpMiIsInYzIiwiaW50ZXJwb2xhdGlvbjUiLCJpMyIsInY0IiwiaW50ZXJwb2xhdGlvbjYiLCJpNCIsInY1IiwiaW50ZXJwb2xhdGlvbjciLCJpNSIsInY2IiwiaW50ZXJwb2xhdGlvbjgiLCJpNiIsInY3IiwiaW50ZXJwb2xhdGVkVmFsdWUiLCJpbnRlcnBvbGF0ZWQiLCJpbnRlcnBvbGF0aW9uSW5CZXR3ZWVuIiwiYXR0cnNJbmRleCIsImxvY2FsUmVmc0luZGV4IiwiYWRqdXN0ZWRJbmRleCIsInRWaWV3Q29uc3RzIiwidGVtcGxhdGVGaXJzdENyZWF0ZVBhc3MiLCJjb21tZW50IiwiYW5ndWxhckNvcmVEaUVudiIsIlVTRV9WQUxVRSIsImlzVXNlQ2xhc3NQcm92aWRlciIsImlzVXNlRmFjdG9yeVByb3ZpZGVyIiwibmdGYWN0b3J5RGVmIiwiY29tcGlsZXIiLCJjb21waWxlSW5qZWN0YWJsZSIsInNyY01ldGEiLCJjb21waWxlck1ldGEiLCJ0eXBlQXJndW1lbnRDb3VudCIsImlzVXNlVmFsdWVQcm92aWRlciIsImlzVXNlRXhpc3RpbmdQcm92aWRlciIsImdldEluamVjdGFibGVNZXRhZGF0YSIsImNvbXBpbGVGYWN0b3J5IiwiY29uc3RydWN0UmVzb2x2aW5nUGF0aCIsImZpbmRGaXJzdENsb3NlZEN5Y2xlIiwicmV2ZXJzZSIsImsiLCJpbmplY3Rpb25FcnJvciIsImNvbnN0cnVjdFJlc29sdmluZ01lc3NhZ2UiLCJlcnJNc2ciLCJ3cmFwcGVkRXJyb3IiLCJhZGRLZXkiLCJpbmplY3RvcnMiLCJub0Fubm90YXRpb25FcnJvciIsInBhcmFtcyIsInBhcmFtZXRlciIsIlJlZmxlY3RpdmVLZXkiLCJkaXNwbGF5TmFtZSIsIl9nbG9iYWxLZXlSZWdpc3RyeSIsIm51bWJlck9mS2V5cyIsIl9hbGxLZXlzIiwibmV3S2V5IiwicmVmbGVjdG9yIiwicmVmbGVjdGlvbkNhcGFiaWxpdGllcyIsInVwZGF0ZUNhcGFiaWxpdGllcyIsImNhcHMiLCJpZGVudGlmaWVyIiwiUmVmbGVjdGl2ZURlcGVuZGVuY3kiLCJ2aXNpYmlsaXR5IiwiX0VNUFRZX0xJU1QiLCJSZXNvbHZlZFJlZmxlY3RpdmVQcm92aWRlcl8iLCJyZXNvbHZlZEZhY3RvcmllcyIsIm11bHRpUHJvdmlkZXIiLCJyZXNvbHZlZEZhY3RvcnkiLCJSZXNvbHZlZFJlZmxlY3RpdmVGYWN0b3J5IiwiZGVwZW5kZW5jaWVzIiwicmVzb2x2ZVJlZmxlY3RpdmVGYWN0b3J5IiwiZmFjdG9yeUZuIiwicmVzb2x2ZWREZXBzIiwiX2RlcGVuZGVuY2llc0ZvciIsImFsaWFzSW5zdGFuY2UiLCJmcm9tS2V5IiwiX2V4dHJhY3RUb2tlbiIsImNvbnN0cnVjdERlcGVuZGVuY2llcyIsInJlc29sdmVSZWZsZWN0aXZlUHJvdmlkZXIiLCJyZXNvbHZlUmVmbGVjdGl2ZVByb3ZpZGVycyIsInJlc29sdmVkUHJvdmlkZXJNYXAiLCJub3JtYWxpemVkUHJvdmlkZXJzTWFwIiwicmVzb2x2ZWRQcm92aWRlciIsIm1lcmdlUmVzb2x2ZWRSZWZsZWN0aXZlUHJvdmlkZXJzIiwiX25vcm1hbGl6ZVByb3ZpZGVycyIsIl9jcmVhdGVEZXBlbmRlbmN5IiwicGFyYW1NZXRhZGF0YSIsIlVOREVGSU5FRCIsIlJlZmxlY3RpdmVJbmplY3RvciIsIlJlc29sdmVkUmVmbGVjdGl2ZVByb3ZpZGVycyIsImZyb21SZXNvbHZlZFByb3ZpZGVycyIsIlJlZmxlY3RpdmVJbmplY3Rvcl8iLCJfcHJvdmlkZXJzIiwiX3BhcmVudCIsIl9jb25zdHJ1Y3Rpb25Db3VudGVyIiwia2V5SWRzIiwib2JqcyIsIl9nZXRCeUtleSIsInJlc29sdmVBbmRDcmVhdGVDaGlsZCIsImNyZWF0ZUNoaWxkRnJvbVJlc29sdmVkIiwiaW5qIiwicmVzb2x2ZUFuZEluc3RhbnRpYXRlIiwiaW5zdGFudGlhdGVSZXNvbHZlZCIsIl9pbnN0YW50aWF0ZVByb3ZpZGVyIiwiZ2V0UHJvdmlkZXJBdEluZGV4Iiwib3V0T2ZCb3VuZHNFcnJvciIsIl9uZXciLCJfZ2V0TWF4TnVtYmVyT2ZPYmplY3RzIiwiX2luc3RhbnRpYXRlIiwiX2dldEJ5UmVmbGVjdGl2ZURlcGVuZGVuY3kiLCJvcmlnaW5hbEV4Y2VwdGlvbiIsIklOSkVDVE9SX0tFWSIsIl9nZXRCeUtleVNlbGYiLCJfZ2V0QnlLZXlEZWZhdWx0IiwiX2dldE9iakJ5S2V5SWQiLCJrZXlJZCIsIl90aHJvd09yTnVsbCIsIm5vUHJvdmlkZXJFcnJvciIsImlual8iLCJfbWFwUHJvdmlkZXJzIiwic2V0RGlyZWN0aXZlSW5wdXRzV2hpY2hTaGFkb3dzU3R5bGluZyIsInByb3BlcnR5IiwiSFRNTFVua25vd25FbGVtZW50IiwiY3VzdG9tRWxlbWVudHMiLCJsb2dVbmtub3duRWxlbWVudEVycm9yIiwiZWxlbWVudFN0YXJ0IiwiZWxlbWVudFN0YXJ0Rmlyc3RDcmVhdGVQYXNzIiwiZWxlbWVudEVuZCIsImhhc0NsYXNzSW5wdXQiLCJoYXNTdHlsZUlucHV0IiwiZWxlbWVudENvbnRhaW5lclN0YXJ0Rmlyc3RDcmVhdGVQYXNzIiwiaXNTdWJzY3JpYmFibGUiLCJpc09ic2VydmFibGUiLCJldmVudE5hbWUiLCJsaXN0ZW5lckZuIiwiZXZlbnRUYXJnZXRSZXNvbHZlciIsImxpc3RlbmVySW50ZXJuYWwiLCJpc1ROb2RlRGlyZWN0aXZlSG9zdCIsInByb2Nlc3NPdXRwdXRzIiwibENsZWFudXBJbmRleCIsImV4aXN0aW5nTGlzdGVuZXIiLCJ0Tm9kZUlkeCIsImNsZWFudXBFdmVudE5hbWUiLCJsaXN0ZW5lcklkeEluTENsZWFudXAiLCJmaW5kRXhpc3RpbmdMaXN0ZW5lciIsIl9fbmdMYXN0TGlzdGVuZXJGbl9fIiwiX19uZ05leHRMaXN0ZW5lckZuX18iLCJ3cmFwTGlzdGVuZXIiLCJsaXN0ZW4iLCJwcm9wc0xlbmd0aCIsIm1pbmlmaWVkTmFtZSIsIm91dHB1dCIsImV4ZWN1dGVMaXN0ZW5lcldpdGhFcnJvckhhbmRsaW5nIiwid3JhcFdpdGhQcmV2ZW50RGVmYXVsdCIsIndyYXBMaXN0ZW5lckluX21hcmtEaXJ0eUFuZFByZXZlbnREZWZhdWx0IiwibmV4dExpc3RlbmVyRm4iLCJwcmV2ZW50RGVmYXVsdCIsInJldHVyblZhbHVlIiwibGV2ZWwiLCJuZXN0aW5nTGV2ZWwiLCJ3YWxrVXBWaWV3cyIsIm5leHRDb250ZXh0SW1wbCIsIm1hdGNoaW5nUHJvamVjdGlvblNsb3RJbmRleCIsInByb2plY3Rpb25TbG90cyIsIndpbGRjYXJkTmdDb250ZW50SW5kZXgiLCJuZ1Byb2plY3RBc0F0dHJWYWwiLCJuZ1Byb2plY3RBc0F0dHJJZHgiLCJnZXRQcm9qZWN0QXNBdHRyVmFsdWUiLCJudW1Qcm9qZWN0aW9uU2xvdHMiLCJwcm9qZWN0aW9uSGVhZHMiLCJ0YWlscyIsImNvbXBvbmVudENoaWxkIiwic2xvdEluZGV4Iiwic2VsZWN0b3JJbmRleCIsImFwcGx5UHJvamVjdGlvbiIsIm1hcmtEdXBsaWNhdGVzIiwidFN0eWxpbmdLZXkiLCJpc1ByZXZEaXIiLCJpc0NsYXNzQmluZGluZyIsInRTdHlsaW5nQXRJbmRleCIsImlzTWFwIiwiZm91bmREdXBsaWNhdGUiLCJ0U3R5bGluZ1ZhbHVlQXRDdXJzb3IiLCJ0U3R5bGVSYW5nZUF0Q3Vyc29yIiwiaXNTdHlsaW5nTWF0Y2giLCJ0U3R5bGluZ0tleUN1cnNvciIsInBhcnNlclN0YXRlIiwidGV4dEVuZCIsImtleUVuZCIsInZhbHVlRW5kIiwiZ2V0TGFzdFBhcnNlZEtleSIsImdldExhc3RQYXJzZWRWYWx1ZSIsInBhcnNlQ2xhc3NOYW1lTmV4dCIsImNvbnN1bWVDbGFzc1Rva2VuIiwiY29uc3VtZVdoaXRlc3BhY2UiLCJwYXJzZVN0eWxlTmV4dCIsImNoIiwiY29uc3VtZVN0eWxlS2V5IiwiY29uc3VtZVNlcGFyYXRvciIsImNoMSIsImNoMiIsImNoMyIsImxhc3RDaEluZGV4IiwiY29uc3VtZVF1b3RlZFRleHQiLCJjb25zdW1lU3R5bGVWYWx1ZSIsInJlc2V0UGFyc2VyU3RhdGUiLCJzZXBhcmF0b3IiLCJtYWxmb3JtZWRTdHlsZUVycm9yIiwiZnJvbUNoYXJDb2RlIiwicXVvdGVDaGFyQ29kZSIsImV4cGVjdGluZyIsImNoZWNrU3R5bGluZ1Byb3BlcnR5IiwiY2hlY2tTdHlsaW5nTWFwIiwic3R5bGVLZXlWYWx1ZUFycmF5U2V0Iiwic3R5bGVTdHJpbmdQYXJzZXIiLCJwYXJzZVN0eWxlIiwiY2xhc3NTdHJpbmdQYXJzZXIiLCJwYXJzZUNsYXNzTmFtZSIsInN0eWxpbmdGaXJzdFVwZGF0ZVBhc3MiLCJ1cGRhdGVTdHlsaW5nIiwibm9ybWFsaXplU3VmZml4Iiwic3RyaW5nUGFyc2VyIiwiaGFzU3R5bGluZ0lucHV0U2hhZG93IiwiaXNJbkhvc3RCaW5kaW5ncyIsInN0YXRpY1ByZWZpeCIsImVuZHNXaXRoIiwib2xkS2V5VmFsdWVBcnJheSIsIm5ld0tleVZhbHVlQXJyYXkiLCJvbGRJbmRleCIsIm5ld0luZGV4Iiwib2xkS2V5Iiwic2V0S2V5IiwidXBkYXRlU3R5bGluZ01hcCIsInN0eWxlS2V5VmFsdWVBcnJheSIsInVud3JhcHBlZFZhbHVlIiwidG9TdHlsaW5nS2V5VmFsdWVBcnJheSIsImlzSG9zdEJpbmRpbmdzIiwic3R5bGluZ0tleSIsImhvc3REaXJlY3RpdmVEZWYiLCJyZXNpZHVhbCIsImNvbGxlY3RTdHlsaW5nRnJvbVRBdHRycyIsImNvbGxlY3RTdHlsaW5nRnJvbURpcmVjdGl2ZXMiLCJ0ZW1wbGF0ZVN0eWxpbmdLZXkiLCJnZXRUZW1wbGF0ZUhlYWRUU3R5bGluZ0tleSIsInNldFRlbXBsYXRlSGVhZFRTdHlsaW5nS2V5IiwiY29sbGVjdFJlc2lkdWFsIiwid3JhcEluU3RhdGljU3R5bGluZ0tleSIsInRTdHlsaW5nS2V5V2l0aFN0YXRpYyIsImlzSG9zdEJpbmRpbmciLCJ0QmluZGluZ3MiLCJ0bXBsSGVhZCIsInRtcGxUYWlsIiwiaXNLZXlEdXBsaWNhdGVPZlN0YXRpYyIsInN0YXRpY0tleVZhbHVlQXJyYXkiLCJwcmV2aW91c05vZGUiLCJtYXJrRHVwbGljYXRlT2ZSZXNpZHVhbFN0eWxpbmciLCJpbnNlcnRUU3R5bGluZ0JpbmRpbmciLCJjdXJyZW50RGlyZWN0aXZlIiwiZGVzaXJlZE1hcmtlciIsImN1cnJlbnRNYXJrZXIiLCJ0UmFuZ2UiLCJpc1N0eWxpbmdWYWx1ZVByZXNlbnQiLCJmaW5kU3R5bGluZ1ZhbHVlIiwiaXNQcm9jZWR1cmFsIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJyZW1vdmVDbGFzcyIsIkRhc2hDYXNlIiwicmVtb3ZlU3R5bGUiLCJyZW1vdmVQcm9wZXJ0eSIsImlzSW1wb3J0YW50IiwiSW1wb3J0YW50Iiwic2V0U3R5bGUiLCJhcHBseVN0eWxpbmciLCJpc1ByZXZEaXJlY3Rpb24iLCJyYXdLZXkiLCJjb250YWluc1N0YXRpY3MiLCJpc1N0eWxpbmdNYXAiLCJ2YWx1ZUF0TFZpZXdJbmRleCIsInRleHROYXRpdmUiLCJ2YWx1ZVN1ZmZpeCIsIm5nSTE4bkNsb3N1cmVNb2RlIiwiZ29vZyIsImdldE1zZyIsInUiLCJsb2NhbGVFbiIsInZhbCIsIkxPQ0FMRV9EQVRBIiwicmVnaXN0ZXJMb2NhbGVEYXRhIiwibG9jYWxlSWQiLCJleHRyYURhdGEiLCJMb2NhbGVEYXRhSW5kZXgiLCJMb2NhbGVJZCIsIkV4dHJhRGF0YSIsImZpbmRMb2NhbGVEYXRhIiwibG9jYWxlIiwibm9ybWFsaXplZExvY2FsZSIsIm5vcm1hbGl6ZUxvY2FsZSIsImdldExvY2FsZURhdGEiLCJwYXJlbnRMb2NhbGUiLCJnZXRMb2NhbGVDdXJyZW5jeUNvZGUiLCJDdXJyZW5jeUNvZGUiLCJnZXRMb2NhbGVQbHVyYWxDYXNlIiwiUGx1cmFsQ2FzZSIsIm5nIiwiY29tbW9uIiwibG9jYWxlcyIsInVucmVnaXN0ZXJBbGxMb2NhbGVEYXRhIiwicGx1cmFsTWFwcGluZyIsIkRFRkFVTFRfTE9DQUxFX0lEIiwiRUxFTUVOVF9NQVJLRVIiLCJJQ1VfTUFSS0VSIiwiSTE4bkNyZWF0ZU9wQ29kZSIsIkxPQ0FMRV9JRCQxIiwic2V0TG9jYWxlSWQiLCJ0Tm9kZUluc2VydEJlZm9yZUluZGV4IiwiaTE4blBhcmVudCIsImFuY2hvclJOb2RlIiwiYWRkVE5vZGVBbmRVcGRhdGVJbnNlcnRCZWZvcmVJbmRleCIsInByZXZpb3VzVE5vZGVzIiwibmV3VE5vZGUiLCJleGlzdGluZ1ROb2RlIiwiaXNJMThuVGV4dCIsImlzTmV3VE5vZGVDcmVhdGVkQmVmb3JlIiwiZ2V0SW5zZXJ0QmVmb3JlSW5kZXgiLCJzZXRJbnNlcnRCZWZvcmVJbmRleCIsImdldFRJY3UiLCJjcmVhdGVUTm9kZVBsYWNlaG9sZGVyIiwiZ2V0Q3VycmVudElDVUNhc2VJbmRleCIsImN1cnJlbnRDYXNlIiwiZ2V0UGFyZW50RnJvbUljdUNyZWF0ZU9wQ29kZSIsIm1lcmdlZENvZGUiLCJnZXRSZWZGcm9tSWN1Q3JlYXRlT3BDb2RlIiwiZ2V0SW5zdHJ1Y3Rpb25Gcm9tSWN1Q3JlYXRlT3BDb2RlIiwiY2hhbmdlTWFzayIsImNoYW5nZU1hc2tDb3VudGVyIiwiYXBwbHlNdXRhYmxlT3BDb2RlcyIsIm11dGFibGVPcENvZGVzIiwicm9vdFJOb2RlIiwicm9vdElkeCIsInRleHROb2RlSW5kZXgiLCJwYXJlbnRJZHgiLCJpbnNlcnRJbkZyb250T2YiLCJyZWZJZHgiLCJjYXNlSW5kZXgiLCJhbmNob3JJZHgiLCJlbGVtZW50Tm9kZUluZGV4IiwiY29tbWVudFZhbHVlIiwiY29tbWVudE5vZGVJbmRleCIsImFwcGx5VXBkYXRlT3BDb2RlcyIsInVwZGF0ZU9wQ29kZXMiLCJiaW5kaW5nc1N0YXJ0SW5kZXgiLCJjaGVja0JpdCIsInNraXBDb2RlcyIsInNhbml0aXplRm4iLCJ0Tm9kZU9yVGFnTmFtZSIsInJUZXh0IiwiYXBwbHlJY3VTd2l0Y2hDYXNlIiwiYXBwbHlJY3VVcGRhdGVDYXNlIiwiYWN0aXZlQ2FzZUluZGV4IiwiaWN1RXhwcmVzc2lvbiIsImJpbmRpbmdWYWx1ZSIsImNhc2VzIiwicmVzb2x2ZWRDYXNlIiwicGx1cmFsIiwiZ2V0UGx1cmFsQ2FzZSIsImdldENhc2VJbmRleCIsImFwcGx5SWN1U3dpdGNoQ2FzZVJlbW92ZSIsInJlbW92ZUNvZGVzIiwibm9kZU9ySWN1SW5kZXgiLCJsb2FkSWN1Q29udGFpbmVyVmlzaXRvciIsIl9zdGFjayIsIl9yZW1vdmVzIiwiX2luZGV4IiwiZW50ZXJJY3UiLCJpY3VDb250YWluZXJJdGVyYXRvck5leHQiLCJyZW1vdmVPcENvZGUiLCJ0SWN1SW5kZXgiLCJpMThuQ3JlYXRlT3BDb2Rlc1RvU3RyaW5nIiwib3Bjb2RlcyIsImNyZWF0ZU9wQ29kZXMiLCJsaW5lcyIsImlzQ29tbWVudCIsIkNPTU1FTlQiLCJhcHBlbmROb3ciLCJBUFBFTkRfRUFHRVJMWSIsIlNISUZUIiwiaTE4blVwZGF0ZU9wQ29kZXNUb1N0cmluZyIsInBhcnNlciIsIk9wQ29kZVBhcnNlciIsImNvbnN1bWVPcENvZGUiLCJyZWYiLCJjb25zdW1lU3RyaW5nIiwic2FuaXRpemF0aW9uRm4iLCJjb25zdW1lRnVuY3Rpb24iLCJoYXNNb3JlIiwiY29uc3VtZU51bWJlciIsInN0YXRlbWVudHMiLCJzdGF0ZW1lbnQiLCJjb25zdW1lTnVtYmVyT3JTdHJpbmciLCJvcENvZGVUZXh0IiwiaWN1Q3JlYXRlT3BDb2Rlc1RvU3RyaW5nIiwibGFzdFJlZiIsImNvbnN1bWVOdW1iZXJTdHJpbmdPck1hcmtlciIsImxpbmUiLCJpMThuUmVtb3ZlT3BDb2Rlc1RvU3RyaW5nIiwiY29kZXMiLCJCSU5ESU5HX1JFR0VYUCIsIklDVV9SRUdFWFAiLCJORVNURURfSUNVIiwiSUNVX0JMT0NLX1JFR0VYUCIsIlNVQlRFTVBMQVRFX1JFR0VYUCIsIlBIX1JFR0VYUCIsIk5HU1BfVU5JQ09ERV9SRUdFWFAiLCJjcmVhdGVUTm9kZUFuZEFkZE9wQ29kZSIsImV4aXN0aW5nVE5vZGVzIiwiaXNJQ1UiLCJpMThuTm9kZUlkeCIsInNldFROb2RlSW5zZXJ0QmVmb3JlSW5kZXgiLCJpMThuU3RhcnRGaXJzdENyZWF0ZVBhc3NQcm9jZXNzVGV4dE5vZGUiLCJoYXNCaW5kaW5nIiwiZ2VuZXJhdGVCaW5kaW5nVXBkYXRlT3BDb2RlcyIsInN0ciIsImRlc3RpbmF0aW9uTm9kZSIsImJpbmRpbmdTdGFydCIsIm1hc2tJbmRleCIsInNpemVJbmRleCIsInRleHRQYXJ0cyIsInRleHRWYWx1ZSIsInRvTWFza0JpdCIsImNvdW50QmluZGluZ3MiLCJvcENvZGVzIiwicmVtb3ZlSW5uZXJUZW1wbGF0ZVRyYW5zbGF0aW9uIiwidGFnTWF0Y2hlZCIsImluVGVtcGxhdGUiLCJleGVjIiwiaWN1U3RhcnQiLCJiaW5kaW5nTWFzayIsIm1haW5CaW5kaW5nIiwiYWRkVXBkYXRlSWN1U3dpdGNoIiwic2V0VEljdSIsInZhbHVlQXJyIiwibmVzdGVkSWN1cyIsImljdUluZGV4IiwicGFyc2VJY3VDYXNlIiwiYWRkVXBkYXRlSWN1VXBkYXRlIiwicGFyc2VJQ1VCbG9jayIsInBhdHRlcm4iLCJpY3VUeXBlIiwiaTE4blBhcnNlVGV4dEludG9QYXJ0c0FuZElDVSIsImJpbmRpbmciLCJwb3MiLCJibG9ja3MiLCJwcmV2UG9zIiwiYnJhY2VTdGFjayIsInJlc3VsdHMiLCJicmFjZXMiLCJsYXN0SW5kZXgiLCJibG9jayIsImNhc2VOYW1lIiwidW5zYWZlQ2FzZUh0bWwiLCJpbmVydFJvb3ROb2RlIiwid2Fsa0ljdVRyZWUiLCJzaGFyZWRVcGRhdGVPcENvZGVzIiwiZGVwdGgiLCJjdXJyZW50Tm9kZSIsImFkZENyZWF0ZU5vZGVBbmRBcHBlbmQiLCJsb3dlckF0dHJOYW1lIiwiYWRkQ3JlYXRlQXR0cmlidXRlIiwiYWRkUmVtb3ZlTm9kZSIsImlzTmVzdGVkSWN1IiwibmVzdGVkSWN1SW5kZXgiLCJhZGRSZW1vdmVOZXN0ZWRJY3UiLCJhcHBlbmRUb1BhcmVudElkeCIsImNyZWF0ZUF0SWR4IiwiUFBfTVVMVElfVkFMVUVfUExBQ0VIT0xERVJTX1JFR0VYUCIsIlBQX1BMQUNFSE9MREVSU19SRUdFWFAiLCJQUF9JQ1VfVkFSU19SRUdFWFAiLCJQUF9JQ1VfUExBQ0VIT0xERVJTX1JFR0VYUCIsIlBQX0lDVVNfUkVHRVhQIiwiUFBfQ0xPU0VfVEVNUExBVEVfUkVHRVhQIiwiUFBfVEVNUExBVEVfSURfUkVHRVhQIiwibWVzc2FnZUluZGV4Iiwic3ViVGVtcGxhdGVJbmRleCIsInBhcmVudFROb2RlSW5kZXgiLCJleGlzdGluZ1ROb2RlU3RhY2siLCJpc1Jvb3RUZW1wbGF0ZU1lc3NhZ2UiLCJzZWFyY2giLCJnZXRUcmFuc2xhdGlvbkZvclRlbXBsYXRlIiwibXNnUGFydHMiLCJwYXJ0IiwiaWN1Tm9kZUluZGV4IiwiaXNDbG9zaW5nIiwiTnVtYmVyIiwiaTE4blN0YXJ0Rmlyc3RDcmVhdGVQYXNzIiwidEkxOG4iLCJhcHBseUNyZWF0ZU9wQ29kZXMiLCJwcmV2aW91c0VsZW1lbnRJbmRleCIsImkxOG5BdHRyaWJ1dGVzRmlyc3RQYXNzIiwiYXBwbHlJMThuIiwicmVwbGFjZW1lbnRzIiwidGVtcGxhdGVJZHNTdGFjayIsInBocyIsInRtcGwiLCJwbGFjZWhvbGRlcnMiLCJwbGFjZWhvbGRlciIsInRlbXBsYXRlSWQiLCJpc0Nsb3NlVGVtcGxhdGVUYWciLCJjdXJyZW50VGVtcGxhdGVJZCIsIl90eXBlIiwiX2lkeCIsImkxOG5Qb3N0cHJvY2VzcyIsInJlc29sdmVQcm92aWRlciIsImxJbmplY3RhYmxlc0JsdWVwcmludCIsInByb3ZpZGVyRmFjdG9yeSIsImJlZ2luSW5kZXgiLCJleGlzdGluZ0ZhY3RvcnlJbmRleCIsInJlZ2lzdGVyRGVzdHJveUhvb2tzSWZTdXBwb3J0ZWQiLCJleGlzdGluZ1Byb3ZpZGVyc0ZhY3RvcnlJbmRleCIsImV4aXN0aW5nVmlld1Byb3ZpZGVyc0ZhY3RvcnlJbmRleCIsImRvZXNQcm92aWRlcnNGYWN0b3J5RXhpc3QiLCJkb2VzVmlld1Byb3ZpZGVyc0ZhY3RvcnlFeGlzdCIsImNvbXBvbmVudFByb3ZpZGVycyIsIm11bHRpRmFjdG9yeUFkZCIsIm11bHRpRmFjdG9yeSIsIm11bHRpVmlld1Byb3ZpZGVyc0ZhY3RvcnlSZXNvbHZlciIsIm11bHRpUHJvdmlkZXJzRmFjdG9yeVJlc29sdmVyIiwiY29udGV4dEluZGV4IiwiaW5kZXhJbkZhY3RvcnkiLCJwcm92aWRlcklzVHlwZVByb3ZpZGVyIiwicHJvdmlkZXJJc0NsYXNzUHJvdmlkZXIiLCJleGlzdGluZ0NhbGxiYWNrc0luZGV4IiwiaXNDb21wb25lbnRQcm92aWRlciIsImxEYXRhIiwibXVsdGlSZXNvbHZlIiwiY29tcG9uZW50Q291bnQiLCJtdWx0aVByb3ZpZGVycyIsInByb2Nlc3NQcm92aWRlcnNGbiIsIkNvbXBvbmVudFJlZiQxIiwiQ29tcG9uZW50RmFjdG9yeSQxIiwiX051bGxDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIiLCJyZXNvbHZlQ29tcG9uZW50RmFjdG9yeSIsIm5vQ29tcG9uZW50RmFjdG9yeUVycm9yIiwiQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyJDEiLCJjcmVhdGVFbGVtZW50UmVmIiwiRWxlbWVudFJlZiIsIm5hdGl2ZUVsZW1lbnQiLCJ1bndyYXBFbGVtZW50UmVmIiwiUmVuZGVyZXJGYWN0b3J5MiIsIlJlbmRlcmVyMiIsIm5vZGVBdEluZGV4IiwiZ2V0T3JDcmVhdGVSZW5kZXJlcjIiLCJpbmplY3RSZW5kZXJlcjIiLCJTYW5pdGl6ZXIiLCJWZXJzaW9uIiwiZnVsbCIsIm1ham9yIiwibWlub3IiLCJwYXRjaCIsIlZFUlNJT04iLCJOT1RfRk9VTkRfQ0hFQ0tfT05MWV9FTEVNRU5UX0lOSkVDVE9SIiwiY29sbGVjdE5hdGl2ZU5vZGVzIiwibE5vZGUiLCJsVmlld0luQUNvbnRhaW5lciIsImxWaWV3Rmlyc3RDaGlsZFROb2RlIiwibm9kZXNJblNsb3QiLCJWaWV3UmVmJDEiLCJfY2RSZWZJbmplY3RpbmdWaWV3IiwiX2FwcFJlZiIsIl9hdHRhY2hlZFRvVmlld0NvbnRhaW5lciIsInJvb3ROb2RlcyIsInZpZXdSZWZzIiwibWFya0ZvckNoZWNrIiwiZGV0YWNoIiwicmVhdHRhY2giLCJjaGVja05vQ2hhbmdlcyIsImNoZWNrTm9DaGFuZ2VzSW50ZXJuYWwiLCJhdHRhY2hUb1ZpZXdDb250YWluZXJSZWYiLCJkZXRhY2hGcm9tQXBwUmVmIiwiYXR0YWNoVG9BcHBSZWYiLCJhcHBSZWYiLCJSb290Vmlld1JlZiIsIl92aWV3IiwiY2hlY2tOb0NoYW5nZXNJblJvb3RWaWV3IiwiQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyIiwiQ29tcG9uZW50RmFjdG9yeSIsInRvUmVmQXJyYXkiLCJub25NaW5pZmllZCIsIm1pbmlmaWVkIiwidGVtcGxhdGVOYW1lIiwiaXNCb3VuZFRvTW9kdWxlIiwicHJvamVjdGFibGVOb2RlcyIsInJvb3RTZWxlY3Rvck9yTm9kZSIsInJvb3RWaWV3SW5qZWN0b3IiLCJjcmVhdGVDaGFpbmVkSW5qZWN0b3IiLCJlbGVtZW50TmFtZSIsImdldE5hbWVzcGFjZSIsInRFbGVtZW50Tm9kZSIsImV4dHJhY3RBdHRyc0FuZENsYXNzZXNGcm9tU2VsZWN0b3IiLCJub2Rlc2ZvclNsb3QiLCJDb21wb25lbnRSZWYiLCJfcm9vdExWaWV3IiwiY2hhbmdlRGV0ZWN0b3JSZWYiLCJzZXRDbGFzc01ldGFkYXRhIiwiY2xhenoiLCJOZ01vZHVsZVJlZiQxIiwiTmdNb2R1bGVGYWN0b3J5JDEiLCJtb2R1bGVzIiwicmVnaXN0ZXJOZ01vZHVsZVR5cGUiLCJ2aXNpdGVkIiwicmVjdXJzZSIsImluY29taW5nIiwiYXNzZXJ0U2FtZU9yTm90RXhpc3RpbmciLCJnZXRSZWdpc3RlcmVkTmdNb2R1bGVUeXBlIiwiY3JlYXRlTmdNb2R1bGVSZWYiLCJwYXJlbnRJbmplY3RvciIsIk5nTW9kdWxlUmVmIiwiX2Jvb3RzdHJhcENvbXBvbmVudHMiLCJkZXN0cm95Q2JzIiwiY29tcG9uZW50RmFjdG9yeVJlc29sdmVyIiwiX3IzSW5qZWN0b3IiLCJpbmplY3RGbGFncyIsIk5nTW9kdWxlRmFjdG9yeSIsIm1vZHVsZVR5cGUiLCJzbG90T2Zmc2V0IiwicHVyZUZuIiwiZXhwIiwicHVyZUZ1bmN0aW9uMUludGVybmFsIiwicHVyZUZ1bmN0aW9uMkludGVybmFsIiwicHVyZUZ1bmN0aW9uM0ludGVybmFsIiwicHVyZUZ1bmN0aW9uNEludGVybmFsIiwiZXhwNSIsImV4cDYiLCJleHA3IiwiZXhwOCIsImV4cHMiLCJwdXJlRnVuY3Rpb25WSW50ZXJuYWwiLCJnZXRQdXJlRnVuY3Rpb25SZXR1cm5WYWx1ZSIsInJldHVyblZhbHVlSW5kZXgiLCJsYXN0UmV0dXJuVmFsdWUiLCJiaW5kaW5nUm9vdCIsInBpcGVOYW1lIiwiZ2V0UGlwZURlZiIsInBpcGVGYWN0b3J5IiwicGlwZUluc3RhbmNlIiwiaXNQdXJlIiwidHJhbnNmb3JtIiwiRXZlbnRFbWl0dGVyXyIsImlzQXN5bmMiLCJfX2lzQXN5bmMiLCJuZXh0Rm4iLCJlcnJvckZuIiwiY29tcGxldGVGbiIsIl93cmFwSW5UaW1lb3V0IiwiRXZlbnRFbWl0dGVyIiwic3ltYm9sSXRlcmF0b3IiLCJfcmVzdWx0cyIsIlF1ZXJ5TGlzdCIsIl9lbWl0RGlzdGluY3RDaGFuZ2VzT25seSIsIl9jaGFuZ2VzRGV0ZWN0ZWQiLCJfY2hhbmdlcyIsInN5bWJvbCIsImNoYW5nZXMiLCJyZXN1bHRzVHJlZSIsImlkZW50aXR5QWNjZXNzb3IiLCJuZXdSZXN1bHRGbGF0IiwidmFsdWVBIiwidmFsdWVCIiwiYXJyYXlFcXVhbHMiLCJub3RpZnlPbkNoYW5nZXMiLCJzZXREaXJ0eSIsIlRlbXBsYXRlUmVmIiwiY3JlYXRlVGVtcGxhdGVSZWYiLCJWaWV3RW5naW5lVGVtcGxhdGVSZWYiLCJSM1RlbXBsYXRlUmVmIiwiX2RlY2xhcmF0aW9uTFZpZXciLCJfZGVjbGFyYXRpb25UQ29udGFpbmVyIiwiZWxlbWVudFJlZiIsImNyZWF0ZUVtYmVkZGVkVmlldyIsImRlY2xhcmF0aW9uVmlld0xRdWVyaWVzIiwiVmlld0NvbnRhaW5lclJlZiIsImNyZWF0ZUNvbnRhaW5lclJlZiIsIlZFX1ZpZXdDb250YWluZXJSZWYiLCJSM1ZpZXdDb250YWluZXJSZWYiLCJfbENvbnRhaW5lciIsIl9ob3N0VE5vZGUiLCJfaG9zdExWaWV3IiwiZ2V0Vmlld1JlZnMiLCJ0ZW1wbGF0ZVJlZiIsInZpZXdSZWYiLCJpbnNlcnQiLCJjcmVhdGVDb21wb25lbnQiLCJjb21wb25lbnRGYWN0b3J5T3JUeXBlIiwiaW5kZXhPck9wdGlvbnMiLCJuZ01vZHVsZVJlZiIsImlzQ29tcG9uZW50RmFjdG9yeSIsImNvbXBvbmVudEZhY3RvcnkiLCJjb250ZXh0SW5qZWN0b3IiLCJjb21wb25lbnRSZWYiLCJwcmV2SWR4IiwicHJldkxDb250YWluZXIiLCJwcmV2VkNSZWYiLCJhZGp1c3RlZElkeCIsIl9hZGp1c3RJbmRleCIsImNvbnRhaW5lckxlbmd0aCIsImluc2VydGVkTENvbnRhaW5lciIsImluc2VydGVkQ29tcG9uZW50TFZpZXciLCJkZWNsYXJlZENvbXBvbmVudExWaWV3IiwidHJhY2tNb3ZlZFZpZXciLCJpbnNlcnRWaWV3IiwicGFyZW50TmF0aXZlTm9kZSIsImFkZFZpZXdUb0NvbnRhaW5lciIsImdldE9yQ3JlYXRlVmlld1JlZnMiLCJtb3ZlIiwidmlld1JlZnNBcnIiLCJkZXRhY2hlZFZpZXciLCJjb21tZW50Tm9kZSIsIm5hdGl2ZU5leHRTaWJsaW5nIiwiTFF1ZXJ5XyIsInF1ZXJ5TGlzdCIsImNsb25lIiwiTFF1ZXJpZXNfIiwidFF1ZXJpZXMiLCJub09mSW5oZXJpdGVkUXVlcmllcyIsInZpZXdMUXVlcmllcyIsInRRdWVyeSIsImdldEJ5SW5kZXgiLCJwYXJlbnRMUXVlcnkiLCJpbmRleEluRGVjbGFyYXRpb25WaWV3IiwiZGlydHlRdWVyaWVzV2l0aE1hdGNoZXMiLCJnZXRUUXVlcnkiLCJUUXVlcnlNZXRhZGF0YV8iLCJUUXVlcmllc18iLCJxdWVyaWVzRm9yVGVtcGxhdGVSZWYiLCJjaGlsZFF1ZXJ5SW5kZXgiLCJ0cXVlcnlDbG9uZSIsInRyYWNrIiwidHF1ZXJ5IiwiVFF1ZXJ5XyIsImNyb3NzZXNOZ1RlbXBsYXRlIiwiX2FwcGxpZXNUb05leHROb2RlIiwiX2RlY2xhcmF0aW9uTm9kZUluZGV4IiwiaXNBcHBseWluZ1RvTm9kZSIsIm1hdGNoVE5vZGUiLCJhZGRNYXRjaCIsImRlY2xhcmF0aW9uTm9kZUlkeCIsIm1hdGNoVE5vZGVXaXRoUmVhZE9wdGlvbiIsImdldElkeE9mTWF0Y2hpbmdTZWxlY3RvciIsIm5vZGVNYXRjaElkeCIsImRpcmVjdGl2ZU9yUHJvdmlkZXJJZHgiLCJtYXRjaElkeCIsImNyZWF0ZVJlc3VsdEZvck5vZGUiLCJtYXRjaGluZ0lkeCIsImNyZWF0ZVJlc3VsdEJ5VE5vZGVUeXBlIiwiY3JlYXRlU3BlY2lhbFRva2VuIiwibWF0ZXJpYWxpemVWaWV3UmVzdWx0cyIsInF1ZXJ5SW5kZXgiLCJsUXVlcnkiLCJ0UXVlcnlNYXRjaGVzIiwibWF0Y2hlZE5vZGVJZHgiLCJjb2xsZWN0UXVlcnlSZXN1bHRzIiwibFZpZXdSZXN1bHRzIiwiZW1iZWRkZWRMVmlld3MiLCJjcmVhdGVUUXVlcnkiLCJjcmVhdGVMUXVlcnkiLCJ0Vmlld0NvbnRlbnRRdWVyaWVzIiwic2F2ZUNvbnRlbnRRdWVyeUFuZERpcmVjdGl2ZUluZGV4IiwiYW5ndWxhckNvcmVFbnYiLCJqaXRPcHRpb25zIiwicmVzZXRKaXRPcHRpb25zIiwibW9kdWxlUXVldWUiLCJmbHVzaGluZ01vZHVsZVF1ZXVlIiwiZmx1c2hNb2R1bGVTY29waW5nUXVldWVBc011Y2hBc1Bvc3NpYmxlIiwiaXNSZXNvbHZlZERlY2xhcmF0aW9uIiwic2V0U2NvcGVPbkRlY2xhcmVkQ29tcG9uZW50cyIsImRlY2xhcmF0aW9uIiwiY29tcGlsZU5nTW9kdWxlIiwiY29tcGlsZU5nTW9kdWxlRGVmcyIsImVucXVldWVNb2R1bGVGb3JEZWxheWVkU2NvcGluZyIsImFsbG93RHVwbGljYXRlRGVjbGFyYXRpb25zSW5Sb290IiwiZXhwYW5kTW9kdWxlV2l0aFByb3ZpZGVycyIsIk5nTW9kdWxlIiwidmVyaWZ5U2VtYW50aWNzT2ZOZ01vZHVsZURlZiIsImNvbXBpbGVJbmplY3RvciIsImltcG9ydGluZ01vZHVsZSIsInZlcmlmaWVkTmdNb2R1bGUiLCJ1bndyYXBNb2R1bGVXaXRoUHJvdmlkZXJzSW1wb3J0cyIsIm1vZCIsInZlcmlmeVNlbWFudGljc09mTmdNb2R1bGVJbXBvcnQiLCJjb21iaW5lZERlY2xhcmF0aW9ucyIsImNvbXB1dGVDb21iaW5lZEV4cG9ydHMiLCJkZWNsIiwic3VwcHJlc3NFcnJvcnMiLCJleGlzdGluZ01vZHVsZSIsIm93bmVyTmdNb2R1bGUiLCJ2ZXJpZnlEZWNsYXJhdGlvbklzVW5pcXVlIiwiZ2V0QW5ub3RhdGlvbiIsImVudHJ5Q29tcG9uZW50cyIsInZlcmlmeUNvbXBvbmVudElzUGFydE9mTmdNb2R1bGUiLCJ0eXBlT3JXaXRoUHJvdmlkZXJzIiwiY29sbGVjdCIsIl9fYW5ub3RhdGlvbnNfXyIsInJlYWRBbm5vdGF0aW9uIiwiV2Vha01hcCIsInJlc2V0Q29tcGlsZWRDb21wb25lbnRzIiwidHJhbnNpdGl2ZVNjb3BlcyIsInRyYW5zaXRpdmVTY29wZXNGb3IiLCJwYXRjaENvbXBvbmVudERlZldpdGhTY29wZSIsIm5nU2VsZWN0b3JTY29wZSIsImNvbXBpbGF0aW9uIiwiZGlyIiwiaXNOZ01vZHVsZSIsInNjb3BlcyIsImV4cG9ydGVkIiwiaW1wb3J0ZWRUeXBlIiwiaW1wb3J0ZWRTY29wZSIsImVudHJ5IiwiZGVjbGFyZWQiLCJleHBvcnRlZFR5cGUiLCJleHBvcnRlZFNjb3BlIiwiaXNNb2R1bGVXaXRoUHJvdmlkZXJzIiwiY29tcGlsYXRpb25EZXB0aCIsImNvbXBpbGVDb21wb25lbnQiLCJuZ0NvbXBvbmVudERlZiIsIm1heWJlUXVldWVSZXNvbHV0aW9uT2ZDb21wb25lbnRSZXNvdXJjZXMiLCJhZGREaXJlY3RpdmVGYWN0b3J5RGVmIiwicHJlc2VydmVXaGl0ZXNwYWNlcyIsImRlZmF1bHRFbmNhcHN1bGF0aW9uIiwiZGlyZWN0aXZlTWV0YWRhdGEiLCJ0eXBlU291cmNlU3BhbiIsImNyZWF0ZVBhcnNlU291cmNlU3BhbiIsImFuaW1hdGlvbnMiLCJpbnRlcnBvbGF0aW9uIiwidXNlc0luaGVyaXRhbmNlIiwiYWRkRGlyZWN0aXZlRGVmVG9VbmRlY29yYXRlZFBhcmVudHMiLCJjb21waWxlRGlyZWN0aXZlIiwibmdEaXJlY3RpdmVEZWYiLCJnZXREaXJlY3RpdmVNZXRhZGF0YSIsInNvdXJjZU1hcFVybCIsImZhY2FkZSIsIkRpcmVjdGl2ZSIsImV4dGVuZHNEaXJlY3RseUZyb21PYmplY3QiLCJleHRyYWN0UXVlcmllc01ldGFkYXRhIiwiaXNDb250ZW50UXVlcnkiLCJsaWZlY3ljbGUiLCJ1c2VzT25DaGFuZ2VzIiwic3BsaXRCeUNvbW1hIiwidmlld1F1ZXJpZXMiLCJvYmpQcm90b3R5cGUiLCJzaG91bGRBZGRBYnN0cmFjdERpcmVjdGl2ZSIsImNvbnZlcnRUb1IzUXVlcnlNZXRhZGF0YSIsImFubiIsImlzUXVlcnlBbm4iLCJxdWVyaWVzTWV0YSIsImlzSW5wdXRBbm5vdGF0aW9uIiwicGllY2UiLCJMSUZFQ1lDTEVfSE9PS1MiLCJob29rTmFtZSIsIm1ldGFkYXRhTmFtZSIsImNvbXBpbGVQaXBlIiwibmdQaXBlRGVmIiwiZ2V0UGlwZU1ldGFkYXRhIiwiUGlwZSIsIkNvbXBvbmVudCIsIklucHV0IiwiYmluZGluZ1Byb3BlcnR5TmFtZSIsIk91dHB1dCIsIkhvc3RCaW5kaW5nIiwiaG9zdFByb3BlcnR5TmFtZSIsIkhvc3RMaXN0ZW5lciIsIkFQUF9JTklUSUFMSVpFUiIsIkFwcGxpY2F0aW9uSW5pdFN0YXR1cyIsImFwcEluaXRzIiwiaW5pdGlhbGl6ZWQiLCJkb25lUHJvbWlzZSIsInJlaiIsInJ1bkluaXRpYWxpemVycyIsImFzeW5jSW5pdFByb21pc2VzIiwiaW5pdFJlc3VsdCIsIm9ic2VydmFibGVBc1Byb21pc2UiLCJBUFBfSUQiLCJfYXBwSWRSYW5kb21Qcm92aWRlckZhY3RvcnkiLCJfcmFuZG9tQ2hhciIsIkFQUF9JRF9SQU5ET01fUFJPVklERVIiLCJyYW5kb20iLCJQTEFURk9STV9JTklUSUFMSVpFUiIsIlBMQVRGT1JNX0lEIiwiQVBQX0JPT1RTVFJBUF9MSVNURU5FUiIsIlBBQ0tBR0VfUk9PVF9VUkwiLCJDb25zb2xlIiwiTE9DQUxFX0lEIiwiZ2V0TG9jYWxlIiwiJGxvY2FsaXplIiwiREVGQVVMVF9DVVJSRU5DWV9DT0RFIiwiVFJBTlNMQVRJT05TIiwiVFJBTlNMQVRJT05TX0ZPUk1BVCIsIk1pc3NpbmdUcmFuc2xhdGlvblN0cmF0ZWd5IiwiTW9kdWxlV2l0aENvbXBvbmVudEZhY3RvcmllcyIsIm5nTW9kdWxlRmFjdG9yeSIsImNvbXBvbmVudEZhY3RvcmllcyIsIkNvbXBpbGVyIiwiY29tcGlsZU1vZHVsZVN5bmMiLCJjb21waWxlTW9kdWxlQXN5bmMiLCJjb21waWxlTW9kdWxlQW5kQWxsQ29tcG9uZW50c1N5bmMiLCJjb21waWxlTW9kdWxlQW5kQWxsQ29tcG9uZW50c0FzeW5jIiwiY2xlYXJDYWNoZSIsImNsZWFyQ2FjaGVGb3IiLCJnZXRNb2R1bGVJZCIsIkNPTVBJTEVSX09QVElPTlMiLCJDb21waWxlckZhY3RvcnkiLCJzY2hlZHVsZU1pY3JvVGFzayIsIlpvbmUiLCJOZ1pvbmUiLCJlbmFibGVMb25nU3RhY2tUcmFjZSIsInNob3VsZENvYWxlc2NlRXZlbnRDaGFuZ2VEZXRlY3Rpb24iLCJzaG91bGRDb2FsZXNjZVJ1bkNoYW5nZURldGVjdGlvbiIsImhhc1BlbmRpbmdNYWNyb3Rhc2tzIiwiaGFzUGVuZGluZ01pY3JvdGFza3MiLCJpc1N0YWJsZSIsIm9uVW5zdGFibGUiLCJvbk1pY3JvdGFza0VtcHR5Iiwib25TdGFibGUiLCJhc3NlcnRab25lUGF0Y2hlZCIsIl9uZXN0aW5nIiwiX291dGVyIiwiX2lubmVyIiwiZm9yayIsImxhc3RSZXF1ZXN0QW5pbWF0aW9uRnJhbWVJZCIsIm5hdGl2ZVJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5hdGl2ZUNhbmNlbEFuaW1hdGlvbkZyYW1lIiwidW5wYXRjaGVkUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiX19zeW1ib2xfXyIsInVucGF0Y2hlZENhbmNlbEFuaW1hdGlvbkZyYW1lIiwiZ2V0TmF0aXZlUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiem9uZSIsImRlbGF5Q2hhbmdlRGV0ZWN0aW9uRm9yRXZlbnRzRGVsZWdhdGUiLCJpc0NoZWNrU3RhYmxlUnVubmluZyIsImZha2VUb3BFdmVudFRhc2siLCJzY2hlZHVsZUV2ZW50VGFzayIsInVwZGF0ZU1pY3JvVGFza1N0YXR1cyIsImNoZWNrU3RhYmxlIiwiaW52b2tlIiwiZGVsYXlDaGFuZ2VEZXRlY3Rpb25Gb3JFdmVudHMiLCJvbkludm9rZVRhc2siLCJ0YXNrIiwiYXBwbHlUaGlzIiwiYXBwbHlBcmdzIiwib25FbnRlciIsImludm9rZVRhc2siLCJvbkxlYXZlIiwib25JbnZva2UiLCJvbkhhc1Rhc2siLCJoYXNUYXNrU3RhdGUiLCJoYXNUYXNrIiwiY2hhbmdlIiwiX2hhc1BlbmRpbmdNaWNyb3Rhc2tzIiwibWljcm9UYXNrIiwibWFjcm9UYXNrIiwib25IYW5kbGVFcnJvciIsInJ1bk91dHNpZGVBbmd1bGFyIiwiZm9ya0lubmVyWm9uZVdpdGhBbmd1bGFyQmVoYXZpb3IiLCJpc0luQW5ndWxhclpvbmUiLCJydW4iLCJydW5UYXNrIiwiRU1QVFlfUEFZTE9BRCIsImNhbmNlbFRhc2siLCJydW5HdWFyZGVkIiwiTm9vcE5nWm9uZSIsIlRlc3RhYmlsaXR5IiwiX25nWm9uZSIsIl9wZW5kaW5nQ291bnQiLCJfaXNab25lU3RhYmxlIiwiX2RpZFdvcmsiLCJfY2FsbGJhY2tzIiwidGFza1RyYWNraW5nWm9uZSIsIl93YXRjaEFuZ3VsYXJFdmVudHMiLCJhc3NlcnROb3RJbkFuZ3VsYXJab25lIiwiX3J1bkNhbGxiYWNrc0lmUmVhZHkiLCJpbmNyZWFzZVBlbmRpbmdSZXF1ZXN0Q291bnQiLCJkZWNyZWFzZVBlbmRpbmdSZXF1ZXN0Q291bnQiLCJ0aW1lb3V0SWQiLCJkb25lQ2IiLCJnZXRQZW5kaW5nVGFza3MiLCJ1cGRhdGVDYiIsIm1hY3JvVGFza3MiLCJjcmVhdGlvbkxvY2F0aW9uIiwiYWRkQ2FsbGJhY2siLCJ3aGVuU3RhYmxlIiwiZ2V0UGVuZGluZ1JlcXVlc3RDb3VudCIsImZpbmRQcm92aWRlcnMiLCJ1c2luZyIsImV4YWN0TWF0Y2giLCJUZXN0YWJpbGl0eVJlZ2lzdHJ5IiwiX2FwcGxpY2F0aW9ucyIsIl90ZXN0YWJpbGl0eUdldHRlciIsImFkZFRvV2luZG93IiwicmVnaXN0ZXJBcHBsaWNhdGlvbiIsInRlc3RhYmlsaXR5IiwidW5yZWdpc3RlckFwcGxpY2F0aW9uIiwidW5yZWdpc3RlckFsbEFwcGxpY2F0aW9ucyIsImdldFRlc3RhYmlsaXR5IiwiZWxlbSIsImdldEFsbFRlc3RhYmlsaXRpZXMiLCJnZXRBbGxSb290RWxlbWVudHMiLCJmaW5kVGVzdGFiaWxpdHlJblRyZWUiLCJmaW5kSW5BbmNlc3RvcnMiLCJzZXRUZXN0YWJpbGl0eUdldHRlciIsIl9wbGF0Zm9ybSIsImNvbXBpbGVOZ01vZHVsZUZhY3RvcnkiLCJhc3NlcnROZ01vZHVsZVR5cGUiLCJtb2R1bGVGYWN0b3J5IiwibmdKaXRNb2RlIiwiY29tcGlsZXJPcHRpb25zIiwic2V0Sml0T3B0aW9ucyIsIl9sYXN0RGVmaW5lZCIsImNvbXBpbGVyUHJvdmlkZXJzIiwiX21lcmdlQXJyYXlzIiwicmVzb3VyY2VMb2FkZXIiLCJSZXNvdXJjZUxvYWRlciIsImNmIiwiQUxMT1dfTVVMVElQTEVfUExBVEZPUk1TIiwiTmdQcm9iZVRva2VuIiwiY3JlYXRlUGxhdGZvcm0iLCJQbGF0Zm9ybVJlZiIsImluaXRzIiwiY3JlYXRlUGxhdGZvcm1GYWN0b3J5IiwicGFyZW50UGxhdGZvcm1GYWN0b3J5IiwiZGVzYyIsImV4dHJhUHJvdmlkZXJzIiwicGxhdGZvcm0iLCJnZXRQbGF0Zm9ybSIsImluamVjdGVkUHJvdmlkZXJzIiwiYXNzZXJ0UGxhdGZvcm0iLCJyZXF1aXJlZFRva2VuIiwiZGVzdHJveVBsYXRmb3JtIiwiX2luamVjdG9yIiwiX21vZHVsZXMiLCJfZGVzdHJveUxpc3RlbmVycyIsImJvb3RzdHJhcE1vZHVsZUZhY3RvcnkiLCJuZ1pvbmUiLCJuZ1pvbmVPcHRpb24iLCJleHRyYSIsIm5nWm9uZUV2ZW50Q29hbGVzY2luZyIsIm5nWm9uZVJ1bkNvYWxlc2NpbmciLCJnZXROZ1pvbmUiLCJuZ1pvbmVJbmplY3RvciIsIm1vZHVsZVJlZiIsImV4Y2VwdGlvbkhhbmRsZXIiLCJfY2FsbEFuZFJlcG9ydFRvRXJyb3JIYW5kbGVyIiwiaW5pdFN0YXR1cyIsIl9tb2R1bGVEb0Jvb3RzdHJhcCIsImJvb3RzdHJhcE1vZHVsZSIsIm9wdGlvbnNSZWR1Y2VyIiwiQXBwbGljYXRpb25SZWYiLCJuZ0RvQm9vdHN0cmFwIiwiX3pvbmUiLCJfZXhjZXB0aW9uSGFuZGxlciIsIl9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIiLCJfaW5pdFN0YXR1cyIsIl9ib290c3RyYXBMaXN0ZW5lcnMiLCJfdmlld3MiLCJfcnVubmluZ1RpY2siLCJfc3RhYmxlIiwiY29tcG9uZW50VHlwZXMiLCJfb25NaWNyb3Rhc2tFbXB0eVN1YnNjcmlwdGlvbiIsInRpY2siLCJpc0N1cnJlbnRseVN0YWJsZSIsInN0YWJsZVN1YiIsInVuc3RhYmxlU3ViIiwiYXNzZXJ0SW5Bbmd1bGFyWm9uZSIsImNvbXBvbmVudE9yRmFjdG9yeSIsInNlbGVjdG9yT3JOb2RlIiwiY29tcFJlZiIsInRlc3RhYmlsaXR5UmVnaXN0cnkiLCJfbG9hZENvbXBvbmVudCIsImF0dGFjaFZpZXciLCJ2aWV3Q291bnQiLCJfZGV2TW9kZSIsIl9ydW5Nb2RlTG9ja2VkIiwiaXNEZXZNb2RlIiwiZW5hYmxlUHJvZE1vZGUiLCJnZXRNb2R1bGVGYWN0b3J5Iiwibm9Nb2R1bGVFcnJvciIsImdldE5nTW9kdWxlQnlJZCIsIkNoYW5nZURldGVjdG9yUmVmIiwiaW5qZWN0Q2hhbmdlRGV0ZWN0b3JSZWYiLCJpc1BpcGUiLCJob3N0Q29tcG9uZW50VmlldyIsImNyZWF0ZVZpZXdSZWYiLCJWaWV3UmVmIiwiRW1iZWRkZWRWaWV3UmVmIiwiRGVidWdFdmVudExpc3RlbmVyIiwiYXNOYXRpdmVFbGVtZW50cyIsImRlYnVnRWxzIiwiRGVidWdOb2RlIiwibmF0aXZlTm9kZSIsIkRlYnVnRWxlbWVudCIsInJlZmVyZW5jZXMiLCJkaXNjb3ZlckxvY2FsUmVmcyIsImdldExvY2FsUmVmcyIsInByb3ZpZGVyVG9rZW5zIiwiZ2V0SW5qZWN0aW9uVG9rZW5zIiwiTm9kZVByb3RvdHlwZSIsImRlc2NyaXB0b3JzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImlzUHJpbWl0aXZlVmFsdWUiLCJjb3B5RG9tUHJvcGVydGllcyIsImJpbmRpbmdJbmRleGVzIiwibWV0YWRhdGFQYXJ0cyIsImNvbGxlY3RQcm9wZXJ0eUJpbmRpbmdzIiwibG93ZXJjYXNlVE5vZGVBdHRycyIsImVBdHRycyIsImxvd2VyY2FzZU5hbWUiLCJiYXNlVmFsIiwiY2hpbGROb2RlcyIsImdldERlYnVnTm9kZSIsInF1ZXJ5QWxsIiwiX3F1ZXJ5QWxsIiwicXVlcnlBbGxOb2RlcyIsInRyaWdnZXJFdmVudEhhbmRsZXIiLCJldmVudE9iaiIsImludm9rZWRMaXN0ZW5lcnMiLCJldmVudExpc3RlbmVycyIsInVud3JhcHBlZExpc3RlbmVyIiwicGFyZW50RWxlbWVudCIsImVsZW1lbnRzT25seSIsIl9xdWVyeU5vZGVDaGlsZHJlbiIsIl9xdWVyeU5hdGl2ZU5vZGVEZXNjZW5kYW50cyIsInJvb3ROYXRpdmVOb2RlIiwiZ2V0TmF0aXZlQnlUTm9kZU9yTnVsbCIsIl9hZGRRdWVyeU1hdGNoIiwibm9kZU9yQ29udGFpbmVyIiwiX3F1ZXJ5Tm9kZUNoaWxkcmVuSW5Db250YWluZXIiLCJoZWFkIiwibmV4dExWaWV3IiwibmV4dFROb2RlIiwiY2hpbGRWaWV3IiwiZGVidWdOb2RlIiwiZ2V0RGVidWdOb2RlUjIiLCJfbmF0aXZlTm9kZSIsIkRlZmF1bHRJdGVyYWJsZURpZmZlckZhY3RvcnkiLCJzdXBwb3J0cyIsInRyYWNrQnlGbiIsIkRlZmF1bHRJdGVyYWJsZURpZmZlciIsInRyYWNrQnlJZGVudGl0eSIsIl9saW5rZWRSZWNvcmRzIiwiX3VubGlua2VkUmVjb3JkcyIsIl9wcmV2aW91c0l0SGVhZCIsIl9pdEhlYWQiLCJfaXRUYWlsIiwiX2FkZGl0aW9uc0hlYWQiLCJfYWRkaXRpb25zVGFpbCIsIl9tb3Zlc0hlYWQiLCJfbW92ZXNUYWlsIiwiX3JlbW92YWxzSGVhZCIsIl9yZW1vdmFsc1RhaWwiLCJfaWRlbnRpdHlDaGFuZ2VzSGVhZCIsIl9pZGVudGl0eUNoYW5nZXNUYWlsIiwiX3RyYWNrQnlGbiIsImZvckVhY2hJdGVtIiwiZm9yRWFjaE9wZXJhdGlvbiIsIm5leHRJdCIsIm5leHRSZW1vdmUiLCJhZGRSZW1vdmVPZmZzZXQiLCJtb3ZlT2Zmc2V0cyIsImN1cnJlbnRJbmRleCIsImdldFByZXZpb3VzSW5kZXgiLCJhZGpQcmV2aW91c0luZGV4IiwiX25leHRSZW1vdmVkIiwicHJldmlvdXNJbmRleCIsImxvY2FsTW92ZVByZXZpb3VzSW5kZXgiLCJsb2NhbEN1cnJlbnRJbmRleCIsIm9mZnNldCIsImZvckVhY2hQcmV2aW91c0l0ZW0iLCJfbmV4dFByZXZpb3VzIiwiZm9yRWFjaEFkZGVkSXRlbSIsIl9uZXh0QWRkZWQiLCJmb3JFYWNoTW92ZWRJdGVtIiwiX25leHRNb3ZlZCIsImZvckVhY2hSZW1vdmVkSXRlbSIsImZvckVhY2hJZGVudGl0eUNoYW5nZSIsIl9uZXh0SWRlbnRpdHlDaGFuZ2UiLCJjb2xsZWN0aW9uIiwiY2hlY2siLCJfcmVzZXQiLCJpdGVtVHJhY2tCeSIsIm1heUJlRGlydHkiLCJ0cmFja0J5SWQiLCJfdmVyaWZ5UmVpbnNlcnRpb24iLCJfYWRkSWRlbnRpdHlDaGFuZ2UiLCJfbWlzbWF0Y2giLCJpdGVyYXRlTGlzdExpa2UiLCJfdHJ1bmNhdGUiLCJpc0RpcnR5IiwicHJldmlvdXNSZWNvcmQiLCJfcHJldiIsIl9yZW1vdmUiLCJfcmVpbnNlcnRBZnRlciIsIl9tb3ZlQWZ0ZXIiLCJfYWRkQWZ0ZXIiLCJJdGVyYWJsZUNoYW5nZVJlY29yZF8iLCJyZWluc2VydFJlY29yZCIsIl9hZGRUb01vdmVzIiwibmV4dFJlY29yZCIsIl9hZGRUb1JlbW92YWxzIiwiX3VubGluayIsInByZXZSZWNvcmQiLCJfcHJldlJlbW92ZWQiLCJfaW5zZXJ0QWZ0ZXIiLCJfRHVwbGljYXRlTWFwIiwicHV0IiwidG9JbmRleCIsIl9wcmV2RHVwIiwiX25leHREdXAiLCJfRHVwbGljYXRlSXRlbVJlY29yZExpc3QiLCJfaGVhZCIsIl90YWlsIiwiYXRPckFmdGVySW5kZXgiLCJkdXBsaWNhdGVzIiwicmVjb3JkTGlzdCIsIm1vdmVPZmZzZXQiLCJEZWZhdWx0S2V5VmFsdWVEaWZmZXJGYWN0b3J5IiwiRGVmYXVsdEtleVZhbHVlRGlmZmVyIiwiX3JlY29yZHMiLCJfbWFwSGVhZCIsIl9hcHBlbmRBZnRlciIsIl9wcmV2aW91c01hcEhlYWQiLCJfY2hhbmdlc0hlYWQiLCJfY2hhbmdlc1RhaWwiLCJmb3JFYWNoQ2hhbmdlZEl0ZW0iLCJfbmV4dENoYW5nZWQiLCJfZm9yRWFjaCIsIl9tYXliZUFkZFRvQ2hhbmdlcyIsIl9nZXRPckNyZWF0ZVJlY29yZEZvcktleSIsIl9pbnNlcnRCZWZvcmVPckFwcGVuZCIsIktleVZhbHVlQ2hhbmdlUmVjb3JkXyIsIl9hZGRUb0FkZGl0aW9ucyIsIl9hZGRUb0NoYW5nZXMiLCJkZWZhdWx0SXRlcmFibGVEaWZmZXJzRmFjdG9yeSIsIkl0ZXJhYmxlRGlmZmVycyIsImNvcGllZCIsImRlZmF1bHRLZXlWYWx1ZURpZmZlcnNGYWN0b3J5IiwiS2V5VmFsdWVEaWZmZXJzIiwia3YiLCJrZXlWYWxEaWZmIiwiaXRlcmFibGVEaWZmIiwiZGVmYXVsdEl0ZXJhYmxlRGlmZmVycyIsImRlZmF1bHRLZXlWYWx1ZURpZmZlcnMiLCJwbGF0Zm9ybUNvcmUiLCJBcHBsaWNhdGlvbk1vZHVsZSIsImNvbXBpbGVEaXJlY3RpdmVEZWNsYXJhdGlvbiIsImNvbXBpbGVDb21wb25lbnREZWNsYXJhdGlvbiIsImdldEZhY3RvcnlLaW5kIiwiY29tcGlsZUZhY3RvcnlEZWNsYXJhdGlvbiIsImNvbXBpbGVJbmplY3RhYmxlRGVjbGFyYXRpb24iLCJjb21waWxlSW5qZWN0b3JEZWNsYXJhdGlvbiIsImNvbXBpbGVOZ01vZHVsZURlY2xhcmF0aW9uIiwiY29tcGlsZVBpcGVEZWNsYXJhdGlvbiIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJ0b1N0cmluZ1RhZyIsIlNpZ25hbGluZ1NlcnZlciIsIlNpZ25hbFNlcnZlclYyIiwiZ2V0U3ViRG9tYWluIiwiY2hlY2tLZXlGb3JEaWQiXSwic291cmNlUm9vdCI6IiJ9