/*! For license information please see proofmeid-webrtc-node.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ProofmeId=t():e.ProofmeId=t()}(global,(function(){return(()=>{"use strict";var e={280:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncSubject=void 0;var i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._value=null,t._hasValue=!1,t._isComplete=!1,t}return o(t,e),t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t._hasValue,o=t._value,i=t.thrownError,s=t.isStopped,a=t._isComplete;n?e.error(i):(s||a)&&(r&&e.next(o),e.complete())},t.prototype.next=function(e){this.isStopped||(this._value=e,this._hasValue=!0)},t.prototype.complete=function(){var t=this,n=t._hasValue,r=t._value;t._isComplete||(this._isComplete=!0,n&&e.prototype.next.call(this,r),e.prototype.complete.call(this))},t}(n(3032).Subject);t.AsyncSubject=i},5240:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.BehaviorSubject=void 0;var i=function(e){function t(t){var n=e.call(this)||this;return n._value=t,n}return o(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var n=e.prototype._subscribe.call(this,t);return!n.closed&&t.next(this._value),n},t.prototype.getValue=function(){var e=this,t=e.hasError,n=e.thrownError,r=e._value;if(t)throw n;return this._throwIfClosed(),r},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(n(3032).Subject);t.BehaviorSubject=i},3104:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeNotification=t.Notification=t.NotificationKind=void 0;var r,o=n(6332),i=n(5726),s=n(2098),a=n(3005);(r=t.NotificationKind||(t.NotificationKind={})).NEXT="N",r.ERROR="E",r.COMPLETE="C";var u=function(){function e(e,t,n){this.kind=e,this.value=t,this.error=n,this.hasValue="N"===e}return e.prototype.observe=function(e){return c(this,e)},e.prototype.do=function(e,t,n){var r=this,o=r.kind,i=r.value,s=r.error;return"N"===o?null==e?void 0:e(i):"E"===o?null==t?void 0:t(s):null==n?void 0:n()},e.prototype.accept=function(e,t,n){var r;return a.isFunction(null===(r=e)||void 0===r?void 0:r.next)?this.observe(e):this.do(e,t,n)},e.prototype.toObservable=function(){var e=this,t=e.kind,n=e.value,r=e.error,a="N"===t?i.of(n):"E"===t?s.throwError((function(){return r})):"C"===t?o.EMPTY:0;if(!a)throw new TypeError("Unexpected notification kind "+t);return a},e.createNext=function(t){return new e("N",t)},e.createError=function(t){return new e("E",void 0,t)},e.createComplete=function(){return e.completeNotification},e.completeNotification=new e("C"),e}();function c(e,t){var n,r,o,i=e,s=i.kind,a=i.value,u=i.error;if("string"!=typeof s)throw new TypeError('Invalid notification, missing "kind"');"N"===s?null===(n=t.next)||void 0===n||n.call(t,a):"E"===s?null===(r=t.error)||void 0===r||r.call(t,u):null===(o=t.complete)||void 0===o||o.call(t)}t.Notification=u,t.observeNotification=c},7286:(e,t)=>{function n(e,t,n){return{kind:e,value:t,error:n}}Object.defineProperty(t,"__esModule",{value:!0}),t.createNotification=t.nextNotification=t.errorNotification=t.COMPLETE_NOTIFICATION=void 0,t.COMPLETE_NOTIFICATION=n("C",void 0,void 0),t.errorNotification=function(e){return n("E",void 0,e)},t.nextNotification=function(e){return n("N",e,void 0)},t.createNotification=n},2419:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var r=n(5125),o=n(3865),i=n(2801),s=n(2872),a=n(3280),u=n(3005),c=n(6110),l=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var i,s=this,a=(i=e)&&i instanceof r.Subscriber||function(e){return e&&u.isFunction(e.next)&&u.isFunction(e.error)&&u.isFunction(e.complete)}(i)&&o.isSubscription(i)?e:new r.SafeSubscriber(e,t,n);return c.errorContext((function(){var e=s,t=e.operator,n=e.source;a.add(t?t.call(a,n):n?s._subscribe(a):s._trySubscribe(a))})),a},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=f(t))((function(t,o){var i=new r.SafeSubscriber({next:function(t){try{e(t)}catch(e){o(e),i.unsubscribe()}},error:o,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[i.observable]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.pipeFromArray(e)(this)},e.prototype.toPromise=function(e){var t=this;return new(e=f(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function f(e){var t;return null!==(t=null!=e?e:a.config.Promise)&&void 0!==t?t:Promise}t.Observable=l},3274:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ReplaySubject=void 0;var i=n(3032),s=n(7950),a=function(e){function t(t,n,r){void 0===t&&(t=1/0),void 0===n&&(n=1/0),void 0===r&&(r=s.dateTimestampProvider);var o=e.call(this)||this;return o._bufferSize=t,o._windowTime=n,o._timestampProvider=r,o._buffer=[],o._infiniteTimeWindow=!0,o._infiniteTimeWindow=n===1/0,o._bufferSize=Math.max(1,t),o._windowTime=Math.max(1,n),o}return o(t,e),t.prototype.next=function(t){var n=this,r=n.isStopped,o=n._buffer,i=n._infiniteTimeWindow,s=n._timestampProvider,a=n._windowTime;r||(o.push(t),!i&&o.push(s.now()+a)),this._trimBuffer(),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var t=this._innerSubscribe(e),n=this._infiniteTimeWindow,r=this._buffer.slice(),o=0;o<r.length&&!e.closed;o+=n?1:2)e.next(r[o]);return this._checkFinalizedStatuses(e),t},t.prototype._trimBuffer=function(){var e=this,t=e._bufferSize,n=e._timestampProvider,r=e._buffer,o=e._infiniteTimeWindow,i=(o?1:2)*t;if(t<1/0&&i<r.length&&r.splice(0,r.length-i),!o){for(var s=n.now(),a=0,u=1;u<r.length&&r[u]<=s;u+=2)a=u;a&&r.splice(0,a+1)}},t}(i.Subject);t.ReplaySubject=a},218:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Scheduler=void 0;var r=n(7950),o=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=r.dateTimestampProvider.now,e}();t.Scheduler=o},3032:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.AnonymousSubject=t.Subject=void 0;var s=n(2419),a=n(3865),u=n(2642),c=n(6967),l=n(6110),f=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,e),t.prototype.lift=function(e){var t=new d(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new u.ObjectUnsubscribedError},t.prototype.next=function(e){var t=this;l.errorContext((function(){var n,r;if(t._throwIfClosed(),!t.isStopped){var o=t.observers.slice();try{for(var s=i(o),a=s.next();!a.done;a=s.next())a.value.next(e)}catch(e){n={error:e}}finally{try{a&&!a.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}}}))},t.prototype.error=function(e){var t=this;l.errorContext((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var n=t.observers;n.length;)n.shift().error(e)}}))},t.prototype.complete=function(){var e=this;l.errorContext((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,n=t.hasError,r=t.isStopped,o=t.observers;return n||r?a.EMPTY_SUBSCRIPTION:(o.push(e),new a.Subscription((function(){return c.arrRemove(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,n=t.hasError,r=t.thrownError,o=t.isStopped;n?e.error(r):o&&e.complete()},t.prototype.asObservable=function(){var e=new s.Observable;return e.source=this,e},t.create=function(e,t){return new d(e,t)},t}(s.Observable);t.Subject=f;var d=function(e){function t(t,n){var r=e.call(this)||this;return r.destination=t,r.source=n,r}return o(t,e),t.prototype.next=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===n||n.call(t,e)},t.prototype.error=function(e){var t,n;null===(n=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===n||n.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,n;return null!==(n=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==n?n:a.EMPTY_SUBSCRIPTION},t}(f);t.AnonymousSubject=d},5125:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_OBSERVER=t.SafeSubscriber=t.Subscriber=void 0;var i=n(3005),s=n(3865),a=n(3280),u=n(7968),c=n(2576),l=n(7286),f=n(4590),d=n(6110),p=function(e){function n(n){var r=e.call(this)||this;return r.isStopped=!1,n?(r.destination=n,s.isSubscription(n)&&n.add(r)):r.destination=t.EMPTY_OBSERVER,r}return o(n,e),n.create=function(e,t,n){return new g(e,t,n)},n.prototype.next=function(e){this.isStopped?m(l.nextNotification(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?m(l.errorNotification(e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?m(l.COMPLETE_NOTIFICATION,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(s.Subscription);t.Subscriber=p;var h=Function.prototype.bind;function v(e,t){return h.call(e,t)}var y=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){b(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){b(e)}else b(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){b(e)}},e}(),g=function(e){function t(t,n,r){var o,s,u=e.call(this)||this;return i.isFunction(t)||!t?o={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&a.config.useDeprecatedNextContext?((s=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&v(t.next,s),error:t.error&&v(t.error,s),complete:t.complete&&v(t.complete,s)}):o=t,u.destination=new y(o),u}return o(t,e),t}(p);function b(e){a.config.useDeprecatedSynchronousErrorHandling?d.captureError(e):u.reportUnhandledError(e)}function m(e,t){var n=a.config.onStoppedNotification;n&&f.timeoutProvider.setTimeout((function(){return n(e,t)}))}t.SafeSubscriber=g,t.EMPTY_OBSERVER={closed:!0,next:c.noop,error:function(e){throw e},complete:c.noop}},3865:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},i=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.isSubscription=t.EMPTY_SUBSCRIPTION=t.Subscription=void 0;var s=n(3005),a=n(4805),u=n(6967),c=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._teardowns=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,u,c;if(!this.closed){this.closed=!0;var f=this._parentage;if(f)if(this._parentage=null,Array.isArray(f))try{for(var d=r(f),p=d.next();!p.done;p=d.next())p.value.remove(this)}catch(t){e={error:t}}finally{try{p&&!p.done&&(t=d.return)&&t.call(d)}finally{if(e)throw e.error}}else f.remove(this);var h=this.initialTeardown;if(s.isFunction(h))try{h()}catch(e){c=e instanceof a.UnsubscriptionError?e.errors:[e]}var v=this._teardowns;if(v){this._teardowns=null;try{for(var y=r(v),g=y.next();!g.done;g=y.next()){var b=g.value;try{l(b)}catch(e){c=null!=c?c:[],e instanceof a.UnsubscriptionError?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){n={error:e}}finally{try{g&&!g.done&&(u=y.return)&&u.call(y)}finally{if(n)throw n.error}}}if(c)throw new a.UnsubscriptionError(c)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)l(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._teardowns=null!==(n=this._teardowns)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&u.arrRemove(t,e)},e.prototype.remove=function(t){var n=this._teardowns;n&&u.arrRemove(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function l(e){s.isFunction(e)?e():e.unsubscribe()}t.Subscription=c,t.EMPTY_SUBSCRIPTION=c.EMPTY,t.isSubscription=function(e){return e instanceof c||e&&"closed"in e&&s.isFunction(e.remove)&&s.isFunction(e.add)&&s.isFunction(e.unsubscribe)}},3280:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0,t.config={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},9518:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.ConnectableObservable=void 0;var i=n(2419),s=n(3865),a=n(8739),u=n(4990),c=n(4935),l=function(e){function t(t,n){var r=e.call(this)||this;return r.source=t,r.subjectFactory=n,r._subject=null,r._refCount=0,r._connection=null,c.hasLift(t)&&(r.lift=t.lift),r}return o(t,e),t.prototype._subscribe=function(e){return this.getSubject().subscribe(e)},t.prototype.getSubject=function(){var e=this._subject;return e&&!e.isStopped||(this._subject=this.subjectFactory()),this._subject},t.prototype._teardown=function(){this._refCount=0;var e=this._connection;this._subject=this._connection=null,null==e||e.unsubscribe()},t.prototype.connect=function(){var e=this,t=this._connection;if(!t){t=this._connection=new s.Subscription;var n=this.getSubject();t.add(this.source.subscribe(u.createOperatorSubscriber(n,void 0,(function(){e._teardown(),n.complete()}),(function(t){e._teardown(),n.error(t)}),(function(){return e._teardown()})))),t.closed&&(this._connection=null,t=s.Subscription.EMPTY)}return t},t.prototype.refCount=function(){return a.refCount()(this)},t}(i.Observable);t.ConnectableObservable=l},9258:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestInit=t.combineLatest=void 0;var r=n(2419),o=n(1203),i=n(5432),s=n(4781),a=n(1914),u=n(2433),c=n(641),l=n(4990),f=n(7738);function d(e,t,n){return void 0===n&&(n=s.identity),function(r){p(t,(function(){for(var o=e.length,s=new Array(o),a=o,u=o,c=function(o){p(t,(function(){var c=i.from(e[o],t),f=!1;c.subscribe(l.createOperatorSubscriber(r,(function(e){s[o]=e,f||(f=!0,u--),u||r.next(n(s.slice()))}),(function(){--a||r.complete()})))}),r)},f=0;f<o;f++)c(f)}),r)}}function p(e,t,n){e?f.executeSchedule(n,e,t):t()}t.combineLatest=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=u.popScheduler(e),l=u.popResultSelector(e),f=o.argsArgArrayOrObject(e),p=f.args,h=f.keys;if(0===p.length)return i.from([],n);var v=new r.Observable(d(p,n,h?function(e){return c.createObject(h,e)}:s.identity));return l?v.pipe(a.mapOneOrManyArgs(l)):v},t.combineLatestInit=d},2239:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var r=n(4413),o=n(2433),i=n(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return r.concatAll()(i.from(e,o.popScheduler(e)))}},6332:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.empty=t.EMPTY=void 0;var r=n(2419);t.EMPTY=new r.Observable((function(e){return e.complete()})),t.empty=function(e){return e?function(e){return new r.Observable((function(t){return e.schedule((function(){return t.complete()}))}))}(e):t.EMPTY}},5432:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.from=void 0;var r=n(5207),o=n(7103);t.from=function(e,t){return t?r.scheduled(e,t):o.innerFrom(e)}},851:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.fromSubscribable=void 0;var r=n(2419);t.fromSubscribable=function(e){return new r.Observable((function(t){return e.subscribe(t)}))}},7103:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof s?s(e):e[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}},s=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.fromReadableStreamLike=t.fromAsyncIterable=t.fromIterable=t.fromPromise=t.fromArrayLike=t.fromInteropObservable=t.innerFrom=void 0;var a=n(3909),u=n(6018),c=n(2419),l=n(9500),f=n(9595),d=n(9906),p=n(2743),h=n(7823),v=n(3005),y=n(7968),g=n(2801);function b(e){return new c.Observable((function(t){var n=e[g.observable]();if(v.isFunction(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}))}function m(e){return new c.Observable((function(t){for(var n=0;n<e.length&&!t.closed;n++)t.next(e[n]);t.complete()}))}function _(e){return new c.Observable((function(t){e.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,y.reportUnhandledError)}))}function w(e){return new c.Observable((function(t){var n,r;try{for(var o=s(e),i=o.next();!i.done;i=o.next()){var a=i.value;if(t.next(a),t.closed)return}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.complete()}))}function M(e){return new c.Observable((function(t){(function(e,t){var n,s,a,u;return r(this,void 0,void 0,(function(){var r,c;return o(this,(function(o){switch(o.label){case 0:o.trys.push([0,5,6,11]),n=i(e),o.label=1;case 1:return[4,n.next()];case 2:if((s=o.sent()).done)return[3,4];if(r=s.value,t.next(r),t.closed)return[2];o.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=o.sent(),a={error:c},[3,11];case 6:return o.trys.push([6,,9,10]),s&&!s.done&&(u=n.return)?[4,u.call(n)]:[3,8];case 7:o.sent(),o.label=8;case 8:return[3,10];case 9:if(a)throw a.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function C(e){return M(h.readableStreamLikeToAsyncGenerator(e))}t.innerFrom=function(e){if(e instanceof c.Observable)return e;if(null!=e){if(l.isInteropObservable(e))return b(e);if(a.isArrayLike(e))return m(e);if(u.isPromise(e))return _(e);if(f.isAsyncIterable(e))return M(e);if(p.isIterable(e))return w(e);if(h.isReadableStreamLike(e))return C(e)}throw d.createInvalidObservableTypeError(e)},t.fromInteropObservable=b,t.fromArrayLike=m,t.fromPromise=_,t.fromIterable=w,t.fromAsyncIterable=M,t.fromReadableStreamLike=C},8990:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.interval=void 0;var r=n(2445),o=n(7513);t.interval=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=r.asyncScheduler),e<0&&(e=0),o.timer(e,e,t)}},5726:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.of=void 0;var r=n(2433),o=n(5432);t.of=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=r.popScheduler(e);return o.from(e,n)}},5182:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.raceInit=t.race=void 0;var r=n(2419),o=n(7103),i=n(5498),s=n(4990);function a(e){return function(t){for(var n=[],r=function(r){n.push(o.innerFrom(e[r]).subscribe(s.createOperatorSubscriber(t,(function(e){if(n){for(var o=0;o<n.length;o++)o!==r&&n[o].unsubscribe();n=null}t.next(e)}))))},i=0;n&&!t.closed&&i<e.length;i++)r(i)}}t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 1===(e=i.argsOrArgArray(e)).length?o.innerFrom(e[0]):new r.Observable(a(e))},t.raceInit=a},2098:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwError=void 0;var r=n(2419),o=n(3005);t.throwError=function(e,t){var n=o.isFunction(e)?e:function(){return e},i=function(e){return e.error(n())};return new r.Observable(t?function(e){return t.schedule(i,0,e)}:i)}},7513:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timer=void 0;var r=n(2419),o=n(2445),i=n(9016),s=n(1677);t.timer=function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=o.async);var a=-1;return null!=t&&(i.isScheduler(t)?n=t:a=t),new r.Observable((function(t){var r=s.isValidDate(e)?+e-n.now():e;r<0&&(r=0);var o=0;return n.schedule((function(){t.closed||(t.next(o++),0<=a?this.schedule(void 0,a):t.complete())}),r)}))}},7654:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=n(2419),s=n(7103),a=n(5498),u=n(6332),c=n(4990),l=n(2433);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=l.popResultSelector(e),f=a.argsOrArgArray(e);return f.length?new i.Observable((function(e){var t=f.map((function(){return[]})),i=f.map((function(){return!1}));e.add((function(){t=i=null}));for(var a=function(a){s.innerFrom(f[a]).subscribe(c.createOperatorSubscriber(e,(function(s){if(t[a].push(s),t.every((function(e){return e.length}))){var u=t.map((function(e){return e.shift()}));e.next(n?n.apply(void 0,o([],r(u))):u),t.some((function(e,t){return!e.length&&i[t]}))&&e.complete()}}),(function(){i[a]=!0,!t[a].length&&e.complete()})))},u=0;!e.closed&&u<f.length;u++)a(u);return function(){t=i=null}})):u.EMPTY}},4990:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorSubscriber=t.createOperatorSubscriber=void 0;var i=n(5125);t.createOperatorSubscriber=function(e,t,n,r,o){return new s(e,t,n,r,o)};var s=function(e){function t(t,n,r,o,i,s){var a=e.call(this,t)||this;return a.onFinalize=i,a.shouldUnsubscribe=s,a._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return o(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(i.Subscriber);t.OperatorSubscriber=s},6474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.audit=void 0;var r=n(4935),o=n(7103),i=n(4990);t.audit=function(e){return r.operate((function(t,n){var r=!1,s=null,a=null,u=!1,c=function(){if(null==a||a.unsubscribe(),a=null,r){r=!1;var e=s;s=null,n.next(e)}u&&n.complete()},l=function(){a=null,u&&n.complete()};t.subscribe(i.createOperatorSubscriber(n,(function(t){r=!0,s=t,a||o.innerFrom(e(t)).subscribe(a=i.createOperatorSubscriber(n,c,l))}),(function(){u=!0,(!r||!a||a.closed)&&n.complete()})))}))}},5382:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.auditTime=void 0;var r=n(2445),o=n(6474),i=n(7513);t.auditTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.audit((function(){return i.timer(e,t)}))}},9715:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buffer=void 0;var r=n(4935),o=n(2576),i=n(4990);t.buffer=function(e){return r.operate((function(t,n){var r=[];return t.subscribe(i.createOperatorSubscriber(n,(function(e){return r.push(e)}),(function(){n.next(r),n.complete()}))),e.subscribe(i.createOperatorSubscriber(n,(function(){var e=r;r=[],n.next(e)}),o.noop)),function(){r=null}}))}},3814:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferCount=void 0;var o=n(4935),i=n(4990),s=n(6967);t.bufferCount=function(e,t){return void 0===t&&(t=null),t=null!=t?t:e,o.operate((function(n,o){var a=[],u=0;n.subscribe(i.createOperatorSubscriber(o,(function(n){var i,c,l,f,d=null;u++%t==0&&a.push([]);try{for(var p=r(a),h=p.next();!h.done;h=p.next())(g=h.value).push(n),e<=g.length&&(d=null!=d?d:[]).push(g)}catch(e){i={error:e}}finally{try{h&&!h.done&&(c=p.return)&&c.call(p)}finally{if(i)throw i.error}}if(d)try{for(var v=r(d),y=v.next();!y.done;y=v.next()){var g=y.value;s.arrRemove(a,g),o.next(g)}}catch(e){l={error:e}}finally{try{y&&!y.done&&(f=v.return)&&f.call(v)}finally{if(l)throw l.error}}}),(function(){var e,t;try{for(var n=r(a),i=n.next();!i.done;i=n.next()){var s=i.value;o.next(s)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}o.complete()}),void 0,(function(){a=null})))}))}},7211:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferTime=void 0;var o=n(3865),i=n(4935),s=n(4990),a=n(6967),u=n(2445),c=n(2433),l=n(7738);t.bufferTime=function(e){for(var t,n,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(t=c.popScheduler(f))&&void 0!==t?t:u.asyncScheduler,h=null!==(n=f[0])&&void 0!==n?n:null,v=f[1]||1/0;return i.operate((function(t,n){var i=[],u=!1,c=function(e){var t=e.buffer;e.subs.unsubscribe(),a.arrRemove(i,e),n.next(t),u&&f()},f=function(){if(i){var t=new o.Subscription;n.add(t);var r={buffer:[],subs:t};i.push(r),l.executeSchedule(t,p,(function(){return c(r)}),e)}};null!==h&&h>=0?l.executeSchedule(n,p,f,h,!0):u=!0,f();var d=s.createOperatorSubscriber(n,(function(e){var t,n,o=i.slice();try{for(var s=r(o),a=s.next();!a.done;a=s.next()){var u=a.value,l=u.buffer;l.push(e),v<=l.length&&c(u)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}}),(function(){for(;null==i?void 0:i.length;)n.next(i.shift().buffer);null==d||d.unsubscribe(),n.complete(),n.unsubscribe()}),void 0,(function(){return i=null}));t.subscribe(d)}))}},4943:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.bufferToggle=void 0;var o=n(3865),i=n(4935),s=n(7103),a=n(4990),u=n(2576),c=n(6967);t.bufferToggle=function(e,t){return i.operate((function(n,i){var l=[];s.innerFrom(e).subscribe(a.createOperatorSubscriber(i,(function(e){var n=[];l.push(n);var r=new o.Subscription;r.add(s.innerFrom(t(e)).subscribe(a.createOperatorSubscriber(i,(function(){c.arrRemove(l,n),i.next(n),r.unsubscribe()}),u.noop)))}),u.noop)),n.subscribe(a.createOperatorSubscriber(i,(function(e){var t,n;try{for(var o=r(l),i=o.next();!i.done;i=o.next())i.value.push(e)}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}}),(function(){for(;l.length>0;)i.next(l.shift());i.complete()})))}))}},1240:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.bufferWhen=void 0;var r=n(4935),o=n(2576),i=n(4990),s=n(7103);t.bufferWhen=function(e){return r.operate((function(t,n){var r=null,a=null,u=function(){null==a||a.unsubscribe();var t=r;r=[],t&&n.next(t),s.innerFrom(e()).subscribe(a=i.createOperatorSubscriber(n,u,o.noop))};u(),t.subscribe(i.createOperatorSubscriber(n,(function(e){return null==r?void 0:r.push(e)}),(function(){r&&n.next(r),n.complete()}),void 0,(function(){return r=a=null})))}))}},9548:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.catchError=void 0;var r=n(7103),o=n(4990),i=n(4935);t.catchError=function e(t){return i.operate((function(n,i){var s,a=null,u=!1;a=n.subscribe(o.createOperatorSubscriber(i,void 0,void 0,(function(o){s=r.innerFrom(t(o,e(t)(n))),a?(a.unsubscribe(),a=null,s.subscribe(i)):u=!0}))),u&&(a.unsubscribe(),a=null,s.subscribe(i))}))}},2128:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineAll=void 0;var r=n(3240);t.combineAll=r.combineLatestAll},6318:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatest=void 0;var i=n(9258),s=n(4935),a=n(5498),u=n(1914),c=n(2872),l=n(2433);t.combineLatest=function e(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var f=l.popResultSelector(t);return f?c.pipe(e.apply(void 0,o([],r(t))),u.mapOneOrManyArgs(f)):s.operate((function(e,n){i.combineLatestInit(o([e],r(a.argsOrArgArray(t))))(n)}))}},3240:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestAll=void 0;var r=n(9258),o=n(2069);t.combineLatestAll=function(e){return o.joinAllInternals(r.combineLatest,e)}},5024:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.combineLatestWith=void 0;var i=n(6318);t.combineLatestWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.combineLatest.apply(void 0,o([],r(e)))}},4919:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concat=void 0;var i=n(4935),s=n(4413),a=n(2433),u=n(5432);t.concat=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=a.popScheduler(e);return i.operate((function(t,i){s.concatAll()(u.from(o([t],r(e)),n)).subscribe(i)}))}},4413:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatAll=void 0;var r=n(3783);t.concatAll=function(){return r.mergeAll(1)}},7498:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMap=void 0;var r=n(9475),o=n(3005);t.concatMap=function(e,t){return o.isFunction(t)?r.mergeMap(e,t,1):r.mergeMap(e,1)}},6109:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.concatMapTo=void 0;var r=n(7498),o=n(3005);t.concatMapTo=function(e,t){return o.isFunction(t)?r.concatMap((function(){return e}),t):r.concatMap((function(){return e}))}},9664:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.concatWith=void 0;var i=n(4919);t.concatWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.concat.apply(void 0,o([],r(e)))}},1995:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0;var r=n(3032),o=n(5432),i=n(4935),s=n(851),a={connector:function(){return new r.Subject}};t.connect=function(e,t){void 0===t&&(t=a);var n=t.connector;return i.operate((function(t,r){var i=n();o.from(e(s.fromSubscribable(i))).subscribe(r),r.add(t.subscribe(i))}))}},993:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.count=void 0;var r=n(122);t.count=function(e){return r.reduce((function(t,n,r){return!e||e(n,r)?t+1:t}),0)}},496:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounce=void 0;var r=n(4935),o=n(2576),i=n(4990),s=n(7103);t.debounce=function(e){return r.operate((function(t,n){var r=!1,a=null,u=null,c=function(){if(null==u||u.unsubscribe(),u=null,r){r=!1;var e=a;a=null,n.next(e)}};t.subscribe(i.createOperatorSubscriber(n,(function(t){null==u||u.unsubscribe(),r=!0,a=t,u=i.createOperatorSubscriber(n,c,o.noop),s.innerFrom(e(t)).subscribe(u)}),(function(){c(),n.complete()}),void 0,(function(){a=u=null})))}))}},1385:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.debounceTime=void 0;var r=n(2445),o=n(4935),i=n(4990);t.debounceTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.operate((function(n,r){var o=null,s=null,a=null,u=function(){if(o){o.unsubscribe(),o=null;var e=s;s=null,r.next(e)}};function c(){var n=a+e,i=t.now();if(i<n)return o=this.schedule(void 0,n-i),void r.add(o);u()}n.subscribe(i.createOperatorSubscriber(r,(function(n){s=n,a=t.now(),o||(o=t.schedule(c,e),r.add(o))}),(function(){u(),r.complete()}),void 0,(function(){s=o=null})))}))}},1658:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defaultIfEmpty=void 0;var r=n(4935),o=n(4990);t.defaultIfEmpty=function(e){return r.operate((function(t,n){var r=!1;t.subscribe(o.createOperatorSubscriber(n,(function(e){r=!0,n.next(e)}),(function(){r||n.next(e),n.complete()})))}))}},5841:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delay=void 0;var r=n(2445),o=n(8798),i=n(7513);t.delay=function(e,t){void 0===t&&(t=r.asyncScheduler);var n=i.timer(e,t);return o.delayWhen((function(){return n}))}},8798:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.delayWhen=void 0;var r=n(2239),o=n(4783),i=n(9438),s=n(8313),a=n(9475);t.delayWhen=function e(t,n){return n?function(s){return r.concat(n.pipe(o.take(1),i.ignoreElements()),s.pipe(e(t)))}:a.mergeMap((function(e,n){return t(e,n).pipe(o.take(1),s.mapTo(e))}))}},1080:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dematerialize=void 0;var r=n(3104),o=n(4935),i=n(4990);t.dematerialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){return r.observeNotification(e,t)})))}))}},3054:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinct=void 0;var r=n(4935),o=n(4990),i=n(2576);t.distinct=function(e,t){return r.operate((function(n,r){var s=new Set;n.subscribe(o.createOperatorSubscriber(r,(function(t){var n=e?e(t):t;s.has(n)||(s.add(n),r.next(t))}))),null==t||t.subscribe(o.createOperatorSubscriber(r,(function(){return s.clear()}),i.noop))}))}},8737:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilChanged=void 0;var r=n(4781),o=n(4935),i=n(4990);function s(e,t){return e===t}t.distinctUntilChanged=function(e,t){return void 0===t&&(t=r.identity),e=null!=e?e:s,o.operate((function(n,r){var o,s=!0;n.subscribe(i.createOperatorSubscriber(r,(function(n){var i=t(n);!s&&e(o,i)||(s=!1,o=i,r.next(n))})))}))}},7957:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.distinctUntilKeyChanged=void 0;var r=n(8737);t.distinctUntilKeyChanged=function(e,t){return r.distinctUntilChanged((function(n,r){return t?t(n[e],r[e]):n[e]===r[e]}))}},8633:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.elementAt=void 0;var r=n(2351),o=n(9154),i=n(1779),s=n(1658),a=n(4783);t.elementAt=function(e,t){if(e<0)throw new r.ArgumentOutOfRangeError;var n=arguments.length>=2;return function(u){return u.pipe(o.filter((function(t,n){return n===e})),a.take(1),n?s.defaultIfEmpty(t):i.throwIfEmpty((function(){return new r.ArgumentOutOfRangeError})))}}},911:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.endWith=void 0;var i=n(2239),s=n(5726);t.endWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t){return i.concat(t,s.of.apply(void 0,o([],r(e))))}}},2096:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.every=void 0;var r=n(4935),o=n(4990);t.every=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(o){e.call(t,o,i++,n)||(r.next(!1),r.complete())}),(function(){r.next(!0),r.complete()})))}))}},67:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaust=void 0;var r=n(5337);t.exhaust=r.exhaustAll},5337:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustAll=void 0;var r=n(4935),o=n(7103),i=n(4990);t.exhaustAll=function(){return r.operate((function(e,t){var n=!1,r=null;e.subscribe(i.createOperatorSubscriber(t,(function(e){r||(r=o.innerFrom(e).subscribe(i.createOperatorSubscriber(t,void 0,(function(){r=null,n&&t.complete()}))))}),(function(){n=!0,!r&&t.complete()})))}))}},5635:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.exhaustMap=void 0;var r=n(7291),o=n(7103),i=n(4935),s=n(4990);t.exhaustMap=function e(t,n){return n?function(i){return i.pipe(e((function(e,i){return o.innerFrom(t(e,i)).pipe(r.map((function(t,r){return n(e,t,i,r)})))})))}:i.operate((function(e,n){var r=0,i=null,a=!1;e.subscribe(s.createOperatorSubscriber(n,(function(e){i||(i=s.createOperatorSubscriber(n,void 0,(function(){i=null,a&&n.complete()})),o.innerFrom(t(e,r++)).subscribe(i))}),(function(){a=!0,!i&&n.complete()})))}))}},9745:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.expand=void 0;var r=n(4935),o=n(7788);t.expand=function(e,t,n){return void 0===t&&(t=1/0),t=(t||0)<1?1/0:t,r.operate((function(r,i){return o.mergeInternals(r,i,e,t,void 0,!0,n)}))}},9154:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.filter=void 0;var r=n(4935),o=n(4990);t.filter=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){return e.call(t,n,i++)&&r.next(n)})))}))}},9283:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.finalize=void 0;var r=n(4935);t.finalize=function(e){return r.operate((function(t,n){try{t.subscribe(n)}finally{n.add(e)}}))}},7119:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createFind=t.find=void 0;var r=n(4935),o=n(4990);function i(e,t,n){var r="index"===n;return function(n,i){var s=0;n.subscribe(o.createOperatorSubscriber(i,(function(o){var a=s++;e.call(t,o,a,n)&&(i.next(r?a:o),i.complete())}),(function(){i.next(r?-1:void 0),i.complete()})))}}t.find=function(e,t){return r.operate(i(e,t,"value"))},t.createFind=i},4706:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.findIndex=void 0;var r=n(4935),o=n(7119);t.findIndex=function(e,t){return r.operate(o.createFind(e,t,"index"))}},9219:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.first=void 0;var r=n(9474),o=n(9154),i=n(4783),s=n(1658),a=n(1779),u=n(4781);t.first=function(e,t){var n=arguments.length>=2;return function(c){return c.pipe(e?o.filter((function(t,n){return e(t,n,c)})):u.identity,i.take(1),n?s.defaultIfEmpty(t):a.throwIfEmpty((function(){return new r.EmptyError})))}}},1788:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.flatMap=void 0;var r=n(9475);t.flatMap=r.mergeMap},9749:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.groupBy=void 0;var r=n(2419),o=n(7103),i=n(3032),s=n(4935),a=n(4990);t.groupBy=function(e,t,n,u){return s.operate((function(s,c){var l;t&&"function"!=typeof t?(n=t.duration,l=t.element,u=t.connector):l=t;var f=new Map,d=function(e){f.forEach(e),e(c)},p=function(e){return d((function(t){return t.error(e)}))},h=0,v=!1,y=new a.OperatorSubscriber(c,(function(t){try{var s=e(t),d=f.get(s);if(!d){f.set(s,d=u?u():new i.Subject);var g=(m=s,_=d,(w=new r.Observable((function(e){h++;var t=_.subscribe(e);return function(){t.unsubscribe(),0==--h&&v&&y.unsubscribe()}}))).key=m,w);if(c.next(g),n){var b=a.createOperatorSubscriber(d,(function(){d.complete(),null==b||b.unsubscribe()}),void 0,void 0,(function(){return f.delete(s)}));y.add(o.innerFrom(n(g)).subscribe(b))}}d.next(l?l(t):t)}catch(e){p(e)}var m,_,w}),(function(){return d((function(e){return e.complete()}))}),p,(function(){return f.clear()}),(function(){return v=!0,0===h}));s.subscribe(y)}))}},9438:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ignoreElements=void 0;var r=n(4935),o=n(4990),i=n(2576);t.ignoreElements=function(){return r.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,i.noop))}))}},8515:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isEmpty=void 0;var r=n(4935),o=n(4990);t.isEmpty=function(){return r.operate((function(e,t){e.subscribe(o.createOperatorSubscriber(t,(function(){t.next(!1),t.complete()}),(function(){t.next(!0),t.complete()})))}))}},2069:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.joinAllInternals=void 0;var r=n(4781),o=n(1914),i=n(2872),s=n(9475),a=n(2);t.joinAllInternals=function(e,t){return i.pipe(a.toArray(),s.mergeMap((function(t){return e(t)})),t?o.mapOneOrManyArgs(t):r.identity)}},2435:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.last=void 0;var r=n(9474),o=n(9154),i=n(1980),s=n(1779),a=n(1658),u=n(4781);t.last=function(e,t){var n=arguments.length>=2;return function(c){return c.pipe(e?o.filter((function(t,n){return e(t,n,c)})):u.identity,i.takeLast(1),n?a.defaultIfEmpty(t):s.throwIfEmpty((function(){return new r.EmptyError})))}}},7291:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.map=void 0;var r=n(4935),o=n(4990);t.map=function(e,t){return r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){r.next(e.call(t,n,i++))})))}))}},8313:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mapTo=void 0;var r=n(7291);t.mapTo=function(e){return r.map((function(){return e}))}},3209:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.materialize=void 0;var r=n(3104),o=n(4935),i=n(4990);t.materialize=function(){return o.operate((function(e,t){e.subscribe(i.createOperatorSubscriber(t,(function(e){t.next(r.Notification.createNext(e))}),(function(){t.next(r.Notification.createComplete()),t.complete()}),(function(e){t.next(r.Notification.createError(e)),t.complete()})))}))}},2620:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.max=void 0;var r=n(122),o=n(3005);t.max=function(e){return r.reduce(o.isFunction(e)?function(t,n){return e(t,n)>0?t:n}:function(e,t){return e>t?e:t})}},9821:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.merge=void 0;var i=n(4935),s=n(5498),a=n(3783),u=n(2433),c=n(5432);t.merge=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=u.popScheduler(e),l=u.popNumber(e,1/0);return e=s.argsOrArgArray(e),i.operate((function(t,i){a.mergeAll(l)(c.from(o([t],r(e)),n)).subscribe(i)}))}},3783:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeAll=void 0;var r=n(9475),o=n(4781);t.mergeAll=function(e){return void 0===e&&(e=1/0),r.mergeMap(o.identity,e)}},7788:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeInternals=void 0;var r=n(7103),o=n(7738),i=n(4990);t.mergeInternals=function(e,t,n,s,a,u,c,l){var f=[],d=0,p=0,h=!1,v=function(){!h||f.length||d||t.complete()},y=function(e){return d<s?g(e):f.push(e)},g=function(e){u&&t.next(e),d++;var l=!1;r.innerFrom(n(e,p++)).subscribe(i.createOperatorSubscriber(t,(function(e){null==a||a(e),u?y(e):t.next(e)}),(function(){l=!0}),void 0,(function(){if(l)try{d--;for(var e=function(){var e=f.shift();c?o.executeSchedule(t,c,(function(){return g(e)})):g(e)};f.length&&d<s;)e();v()}catch(e){t.error(e)}})))};return e.subscribe(i.createOperatorSubscriber(t,y,(function(){h=!0,v()}))),function(){null==l||l()}}},9475:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMap=void 0;var r=n(7291),o=n(7103),i=n(4935),s=n(7788),a=n(3005);t.mergeMap=function e(t,n,u){return void 0===u&&(u=1/0),a.isFunction(n)?e((function(e,i){return r.map((function(t,r){return n(e,t,i,r)}))(o.innerFrom(t(e,i)))}),u):("number"==typeof n&&(u=n),i.operate((function(e,n){return s.mergeInternals(e,n,t,u)})))}},1211:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeMapTo=void 0;var r=n(9475),o=n(3005);t.mergeMapTo=function(e,t,n){return void 0===n&&(n=1/0),o.isFunction(t)?r.mergeMap((function(){return e}),t,n):("number"==typeof t&&(n=t),r.mergeMap((function(){return e}),n))}},7267:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.mergeScan=void 0;var r=n(4935),o=n(7788);t.mergeScan=function(e,t,n){return void 0===n&&(n=1/0),r.operate((function(r,i){var s=t;return o.mergeInternals(r,i,(function(t,n){return e(s,t,n)}),n,(function(e){s=e}),!1,void 0,(function(){return s=null}))}))}},9303:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mergeWith=void 0;var i=n(9821);t.mergeWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.merge.apply(void 0,o([],r(e)))}},9714:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.min=void 0;var r=n(122),o=n(3005);t.min=function(e){return r.reduce(o.isFunction(e)?function(t,n){return e(t,n)<0?t:n}:function(e,t){return e<t?e:t})}},3848:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.multicast=void 0;var r=n(9518),o=n(3005),i=n(1995);t.multicast=function(e,t){var n=o.isFunction(e)?e:function(){return e};return o.isFunction(t)?i.connect(t,{connector:n}):function(e){return new r.ConnectableObservable(e,n)}}},1184:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observeOn=void 0;var r=n(7738),o=n(4935),i=n(4990);t.observeOn=function(e,t){return void 0===t&&(t=0),o.operate((function(n,o){n.subscribe(i.createOperatorSubscriber(o,(function(n){return r.executeSchedule(o,e,(function(){return o.next(n)}),t)}),(function(){return r.executeSchedule(o,e,(function(){return o.complete()}),t)}),(function(n){return r.executeSchedule(o,e,(function(){return o.error(n)}),t)})))}))}},6223:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.onErrorResumeNext=void 0;var i=n(4935),s=n(7103),a=n(5498),u=n(4990),c=n(2576);t.onErrorResumeNext=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=a.argsOrArgArray(e);return i.operate((function(e,t){var i=o([e],r(n)),a=function(){if(!t.closed)if(i.length>0){var e=void 0;try{e=s.innerFrom(i.shift())}catch(e){return void a()}var n=u.createOperatorSubscriber(t,void 0,c.noop,c.noop);e.subscribe(n),n.add(a)}else t.complete()};a()}))}},2731:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pairwise=void 0;var r=n(4935),o=n(4990);t.pairwise=function(){return r.operate((function(e,t){var n,r=!1;e.subscribe(o.createOperatorSubscriber(t,(function(e){var o=n;n=e,r&&t.next([o,e]),r=!0})))}))}},5649:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.partition=void 0;var r=n(8634),o=n(9154);t.partition=function(e,t){return function(n){return[o.filter(e,t)(n),o.filter(r.not(e,t))(n)]}}},4691:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pluck=void 0;var r=n(7291);t.pluck=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e.length;if(0===n)throw new Error("list of properties cannot be empty.");return r.map((function(t){for(var r=t,o=0;o<n;o++){var i=null==r?void 0:r[e[o]];if(void 0===i)return;r=i}return r}))}},4474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publish=void 0;var r=n(3032),o=n(3848),i=n(1995);t.publish=function(e){return e?function(t){return i.connect(e)(t)}:function(e){return o.multicast(new r.Subject)(e)}}},52:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishBehavior=void 0;var r=n(5240),o=n(9518);t.publishBehavior=function(e){return function(t){var n=new r.BehaviorSubject(e);return new o.ConnectableObservable(t,(function(){return n}))}}},2110:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishLast=void 0;var r=n(280),o=n(9518);t.publishLast=function(){return function(e){var t=new r.AsyncSubject;return new o.ConnectableObservable(e,(function(){return t}))}}},9864:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.publishReplay=void 0;var r=n(3274),o=n(3848),i=n(3005);t.publishReplay=function(e,t,n,s){n&&!i.isFunction(n)&&(s=n);var a=i.isFunction(n)?n:void 0;return function(n){return o.multicast(new r.ReplaySubject(e,t,s),a)(n)}}},9764:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.race=void 0;var i=n(5498),s=n(179);t.race=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.raceWith.apply(void 0,o([],r(i.argsOrArgArray(e))))}},179:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.raceWith=void 0;var i=n(5182),s=n(4935),a=n(4781);t.raceWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.length?s.operate((function(t,n){i.raceInit(o([t],r(e)))(n)})):a.identity}},122:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reduce=void 0;var r=n(8345),o=n(4935);t.reduce=function(e,t){return o.operate(r.scanInternals(e,t,arguments.length>=2,!1,!0))}},8739:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.refCount=void 0;var r=n(4935),o=n(4990);t.refCount=function(){return r.operate((function(e,t){var n=null;e._refCount++;var r=o.createOperatorSubscriber(t,void 0,void 0,void 0,(function(){if(!e||e._refCount<=0||0<--e._refCount)n=null;else{var r=e._connection,o=n;n=null,!r||o&&r!==o||r.unsubscribe(),t.unsubscribe()}}));e.subscribe(r),r.closed||(n=e.connect())}))}},5313:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeat=void 0;var r=n(6332),o=n(4935),i=n(4990),s=n(7103),a=n(7513);t.repeat=function(e){var t,n,u=1/0;return null!=e&&("object"==typeof e?(t=e.count,u=void 0===t?1/0:t,n=e.delay):u=e),u<=0?function(){return r.EMPTY}:o.operate((function(e,t){var r,o=0,c=function(){if(null==r||r.unsubscribe(),r=null,null!=n){var e="number"==typeof n?a.timer(n):s.innerFrom(n(o)),u=i.createOperatorSubscriber(t,(function(){u.unsubscribe(),l()}));e.subscribe(u)}else l()},l=function(){var n=!1;r=e.subscribe(i.createOperatorSubscriber(t,void 0,(function(){++o<u?r?c():n=!0:t.complete()}))),n&&c()};l()}))}},4068:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.repeatWhen=void 0;var r=n(3032),o=n(4935),i=n(4990);t.repeatWhen=function(e){return o.operate((function(t,n){var o,s,a=!1,u=!1,c=!1,l=function(){return c&&u&&(n.complete(),!0)},f=function(){c=!1,o=t.subscribe(i.createOperatorSubscriber(n,void 0,(function(){c=!0,!l()&&(s||(s=new r.Subject,e(s).subscribe(i.createOperatorSubscriber(n,(function(){o?f():a=!0}),(function(){u=!0,l()})))),s).next()}))),a&&(o.unsubscribe(),o=null,a=!1,f())};f()}))}},64:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retry=void 0;var r=n(4935),o=n(4990),i=n(4781),s=n(7513),a=n(7103);t.retry=function(e){var t;void 0===e&&(e=1/0);var n=(t=e&&"object"==typeof e?e:{count:e}).count,u=void 0===n?1/0:n,c=t.delay,l=t.resetOnSuccess,f=void 0!==l&&l;return u<=0?i.identity:r.operate((function(e,t){var n,r=0,i=function(){var l=!1;n=e.subscribe(o.createOperatorSubscriber(t,(function(e){f&&(r=0),t.next(e)}),void 0,(function(e){if(r++<u){var f=function(){n?(n.unsubscribe(),n=null,i()):l=!0};if(null!=c){var d="number"==typeof c?s.timer(c):a.innerFrom(c(e,r)),p=o.createOperatorSubscriber(t,(function(){p.unsubscribe(),f()}),(function(){t.complete()}));d.subscribe(p)}else f()}else t.error(e)}))),l&&(n.unsubscribe(),n=null,i())};i()}))}},1188:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.retryWhen=void 0;var r=n(3032),o=n(4935),i=n(4990);t.retryWhen=function(e){return o.operate((function(t,n){var o,s,a=!1,u=function(){o=t.subscribe(i.createOperatorSubscriber(n,void 0,void 0,(function(t){s||(s=new r.Subject,e(s).subscribe(i.createOperatorSubscriber(n,(function(){return o?u():a=!0})))),s&&s.next(t)}))),a&&(o.unsubscribe(),o=null,a=!1,u())};u()}))}},4193:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sample=void 0;var r=n(4935),o=n(2576),i=n(4990);t.sample=function(e){return r.operate((function(t,n){var r=!1,s=null;t.subscribe(i.createOperatorSubscriber(n,(function(e){r=!0,s=e}))),e.subscribe(i.createOperatorSubscriber(n,(function(){if(r){r=!1;var e=s;s=null,n.next(e)}}),o.noop))}))}},6170:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sampleTime=void 0;var r=n(2445),o=n(4193),i=n(8990);t.sampleTime=function(e,t){return void 0===t&&(t=r.asyncScheduler),o.sample(i.interval(e,t))}},5876:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scan=void 0;var r=n(4935),o=n(8345);t.scan=function(e,t){return r.operate(o.scanInternals(e,t,arguments.length>=2,!0))}},8345:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scanInternals=void 0;var r=n(4990);t.scanInternals=function(e,t,n,o,i){return function(s,a){var u=n,c=t,l=0;s.subscribe(r.createOperatorSubscriber(a,(function(t){var n=l++;c=u?e(c,t,n):(u=!0,t),o&&a.next(c)}),i&&function(){u&&a.next(c),a.complete()}))}}},1791:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sequenceEqual=void 0;var r=n(4935),o=n(4990);t.sequenceEqual=function(e,t){return void 0===t&&(t=function(e,t){return e===t}),r.operate((function(n,r){var i={buffer:[],complete:!1},s={buffer:[],complete:!1},a=function(e){r.next(e),r.complete()},u=function(e,n){var i=o.createOperatorSubscriber(r,(function(r){var o=n.buffer,i=n.complete;0===o.length?i?a(!1):e.buffer.push(r):!t(r,o.shift())&&a(!1)}),(function(){e.complete=!0;var t=n.complete,r=n.buffer;t&&a(0===r.length),null==i||i.unsubscribe()}));return i};n.subscribe(u(i,s)),e.subscribe(u(s,i))}))}},5137:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.share=void 0;var i=n(5432),s=n(4783),a=n(3032),u=n(5125),c=n(4935);function l(e,t){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];return!0===t?(e(),null):!1===t?null:t.apply(void 0,o([],r(n))).pipe(s.take(1)).subscribe((function(){return e()}))}t.share=function(e){void 0===e&&(e={});var t=e.connector,n=void 0===t?function(){return new a.Subject}:t,r=e.resetOnError,o=void 0===r||r,s=e.resetOnComplete,f=void 0===s||s,d=e.resetOnRefCountZero,p=void 0===d||d;return function(e){var t=null,r=null,s=null,a=0,d=!1,h=!1,v=function(){null==r||r.unsubscribe(),r=null},y=function(){v(),t=s=null,d=h=!1},g=function(){var e=t;y(),null==e||e.unsubscribe()};return c.operate((function(e,c){a++,h||d||v();var b=s=null!=s?s:n();c.add((function(){0!=--a||h||d||(r=l(g,p))})),b.subscribe(c),t||(t=new u.SafeSubscriber({next:function(e){return b.next(e)},error:function(e){h=!0,v(),r=l(y,o,e),b.error(e)},complete:function(){d=!0,v(),r=l(y,f),b.complete()}}),i.from(e).subscribe(t))}))(e)}}},1348:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.shareReplay=void 0;var r=n(3274),o=n(5137);t.shareReplay=function(e,t,n){var i,s,a,u=!1;return e&&"object"==typeof e?(a=null!==(i=e.bufferSize)&&void 0!==i?i:1/0,t=null!==(s=e.windowTime)&&void 0!==s?s:1/0,u=!!e.refCount,n=e.scheduler):a=null!=e?e:1/0,o.share({connector:function(){return new r.ReplaySubject(a,t,n)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:u})}},8242:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.single=void 0;var r=n(9474),o=n(6156),i=n(8598),s=n(4935),a=n(4990);t.single=function(e){return s.operate((function(t,n){var s,u=!1,c=!1,l=0;t.subscribe(a.createOperatorSubscriber(n,(function(r){c=!0,e&&!e(r,l++,t)||(u&&n.error(new o.SequenceError("Too many matching values")),u=!0,s=r)}),(function(){u?(n.next(s),n.complete()):n.error(c?new i.NotFoundError("No matching values"):new r.EmptyError)})))}))}},3169:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skip=void 0;var r=n(9154);t.skip=function(e){return r.filter((function(t,n){return e<=n}))}},2454:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipLast=void 0;var r=n(4781),o=n(4935),i=n(4990);t.skipLast=function(e){return e<=0?r.identity:o.operate((function(t,n){var r=new Array(e),o=0;return t.subscribe(i.createOperatorSubscriber(n,(function(t){var i=o++;if(i<e)r[i]=t;else{var s=i%e,a=r[s];r[s]=t,n.next(a)}}))),function(){r=null}}))}},6931:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipUntil=void 0;var r=n(4935),o=n(4990),i=n(7103),s=n(2576);t.skipUntil=function(e){return r.operate((function(t,n){var r=!1,a=o.createOperatorSubscriber(n,(function(){null==a||a.unsubscribe(),r=!0}),s.noop);i.innerFrom(e).subscribe(a),t.subscribe(o.createOperatorSubscriber(n,(function(e){return r&&n.next(e)})))}))}},7913:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.skipWhile=void 0;var r=n(4935),o=n(4990);t.skipWhile=function(e){return r.operate((function(t,n){var r=!1,i=0;t.subscribe(o.createOperatorSubscriber(n,(function(t){return(r||(r=!e(t,i++)))&&n.next(t)})))}))}},9234:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.startWith=void 0;var r=n(2239),o=n(2433),i=n(4935);t.startWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=o.popScheduler(e);return i.operate((function(t,o){(n?r.concat(e,t,n):r.concat(e,t)).subscribe(o)}))}},276:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subscribeOn=void 0;var r=n(4935);t.subscribeOn=function(e,t){return void 0===t&&(t=0),r.operate((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}},9253:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchAll=void 0;var r=n(8518),o=n(4781);t.switchAll=function(){return r.switchMap(o.identity)}},8518:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMap=void 0;var r=n(7103),o=n(4935),i=n(4990);t.switchMap=function(e,t){return o.operate((function(n,o){var s=null,a=0,u=!1,c=function(){return u&&!s&&o.complete()};n.subscribe(i.createOperatorSubscriber(o,(function(n){null==s||s.unsubscribe();var u=0,l=a++;r.innerFrom(e(n,l)).subscribe(s=i.createOperatorSubscriber(o,(function(e){return o.next(t?t(n,e,l,u++):e)}),(function(){s=null,c()})))}),(function(){u=!0,c()})))}))}},1173:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchMapTo=void 0;var r=n(8518),o=n(3005);t.switchMapTo=function(e,t){return o.isFunction(t)?r.switchMap((function(){return e}),t):r.switchMap((function(){return e}))}},3855:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.switchScan=void 0;var r=n(8518),o=n(4935);t.switchScan=function(e,t){return o.operate((function(n,o){var i=t;return r.switchMap((function(t,n){return e(i,t,n)}),(function(e,t){return i=t,t}))(n).subscribe(o),function(){i=null}}))}},4783:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.take=void 0;var r=n(6332),o=n(4935),i=n(4990);t.take=function(e){return e<=0?function(){return r.EMPTY}:o.operate((function(t,n){var r=0;t.subscribe(i.createOperatorSubscriber(n,(function(t){++r<=e&&(n.next(t),e<=r&&n.complete())})))}))}},1980:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.takeLast=void 0;var o=n(6332),i=n(4935),s=n(4990);t.takeLast=function(e){return e<=0?function(){return o.EMPTY}:i.operate((function(t,n){var o=[];t.subscribe(s.createOperatorSubscriber(n,(function(t){o.push(t),e<o.length&&o.shift()}),(function(){var e,t;try{for(var i=r(o),s=i.next();!s.done;s=i.next()){var a=s.value;n.next(a)}}catch(t){e={error:t}}finally{try{s&&!s.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}n.complete()}),void 0,(function(){o=null})))}))}},9845:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeUntil=void 0;var r=n(4935),o=n(4990),i=n(7103),s=n(2576);t.takeUntil=function(e){return r.operate((function(t,n){i.innerFrom(e).subscribe(o.createOperatorSubscriber(n,(function(){return n.complete()}),s.noop)),!n.closed&&t.subscribe(n)}))}},6060:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.takeWhile=void 0;var r=n(4935),o=n(4990);t.takeWhile=function(e,t){return void 0===t&&(t=!1),r.operate((function(n,r){var i=0;n.subscribe(o.createOperatorSubscriber(r,(function(n){var o=e(n,i++);(o||t)&&r.next(n),!o&&r.complete()})))}))}},1138:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tap=void 0;var r=n(3005),o=n(4935),i=n(4990),s=n(4781);t.tap=function(e,t,n){var a=r.isFunction(e)||t||n?{next:e,error:t,complete:n}:e;return a?o.operate((function(e,t){var n;null===(n=a.subscribe)||void 0===n||n.call(a);var r=!0;e.subscribe(i.createOperatorSubscriber(t,(function(e){var n;null===(n=a.next)||void 0===n||n.call(a,e),t.next(e)}),(function(){var e;r=!1,null===(e=a.complete)||void 0===e||e.call(a),t.complete()}),(function(e){var n;r=!1,null===(n=a.error)||void 0===n||n.call(a,e),t.error(e)}),(function(){var e,t;r&&(null===(e=a.unsubscribe)||void 0===e||e.call(a)),null===(t=a.finalize)||void 0===t||t.call(a)})))})):s.identity}},7306:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttle=t.defaultThrottleConfig=void 0;var r=n(4935),o=n(4990),i=n(7103);t.defaultThrottleConfig={leading:!0,trailing:!1},t.throttle=function(e,n){return void 0===n&&(n=t.defaultThrottleConfig),r.operate((function(t,r){var s=n.leading,a=n.trailing,u=!1,c=null,l=null,f=!1,d=function(){null==l||l.unsubscribe(),l=null,a&&(v(),f&&r.complete())},p=function(){l=null,f&&r.complete()},h=function(t){return l=i.innerFrom(e(t)).subscribe(o.createOperatorSubscriber(r,d,p))},v=function(){if(u){u=!1;var e=c;c=null,r.next(e),!f&&h(e)}};t.subscribe(o.createOperatorSubscriber(r,(function(e){u=!0,c=e,(!l||l.closed)&&(s?v():h(e))}),(function(){f=!0,(!(a&&u&&l)||l.closed)&&r.complete()})))}))}},8968:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throttleTime=void 0;var r=n(2445),o=n(7306),i=n(7513);t.throttleTime=function(e,t,n){void 0===t&&(t=r.asyncScheduler),void 0===n&&(n=o.defaultThrottleConfig);var s=i.timer(e,t);return o.throttle((function(){return s}),n)}},1779:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.throwIfEmpty=void 0;var r=n(9474),o=n(4935),i=n(4990);function s(){return new r.EmptyError}t.throwIfEmpty=function(e){return void 0===e&&(e=s),o.operate((function(t,n){var r=!1;t.subscribe(i.createOperatorSubscriber(n,(function(e){r=!0,n.next(e)}),(function(){return r?n.complete():n.error(e())})))}))}},8005:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeInterval=t.timeInterval=void 0;var r=n(2445),o=n(4935),i=n(4990);t.timeInterval=function(e){return void 0===e&&(e=r.asyncScheduler),o.operate((function(t,n){var r=e.now();t.subscribe(i.createOperatorSubscriber(n,(function(t){var o=e.now(),i=o-r;r=o,n.next(new s(t,i))})))}))};var s=function(e,t){this.value=e,this.interval=t};t.TimeInterval=s},4173:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeout=t.TimeoutError=void 0;var r=n(2445),o=n(1677),i=n(4935),s=n(7103),a=n(7029),u=n(4990),c=n(7738);function l(e){throw new t.TimeoutError(e)}t.TimeoutError=a.createErrorClass((function(e){return function(t){void 0===t&&(t=null),e(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=t}})),t.timeout=function(e,t){var n=o.isValidDate(e)?{first:e}:"number"==typeof e?{each:e}:e,a=n.first,f=n.each,d=n.with,p=void 0===d?l:d,h=n.scheduler,v=void 0===h?null!=t?t:r.asyncScheduler:h,y=n.meta,g=void 0===y?null:y;if(null==a&&null==f)throw new TypeError("No timeout provided.");return i.operate((function(e,t){var n,r,o=null,i=0,l=function(e){r=c.executeSchedule(t,v,(function(){try{n.unsubscribe(),s.innerFrom(p({meta:g,lastValue:o,seen:i})).subscribe(t)}catch(e){t.error(e)}}),e)};n=e.subscribe(u.createOperatorSubscriber(t,(function(e){null==r||r.unsubscribe(),i++,t.next(o=e),f>0&&l(f)}),void 0,void 0,(function(){(null==r?void 0:r.closed)||null==r||r.unsubscribe(),o=null}))),l(null!=a?"number"==typeof a?a:+a-v.now():f)}))}},7223:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutWith=void 0;var r=n(2445),o=n(1677),i=n(4173);t.timeoutWith=function(e,t,n){var s,a,u;if(n=null!=n?n:r.async,o.isValidDate(e)?s=e:"number"==typeof e&&(a=e),!t)throw new TypeError("No observable provided to switch to");if(u=function(){return t},null==s&&null==a)throw new TypeError("No timeout provided.");return i.timeout({first:s,each:a,scheduler:n,with:u})}},8975:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.timestamp=void 0;var r=n(7950),o=n(7291);t.timestamp=function(e){return void 0===e&&(e=r.dateTimestampProvider),o.map((function(t){return{value:t,timestamp:e.now()}}))}},2:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toArray=void 0;var r=n(122),o=n(4935),i=function(e,t){return e.push(t),e};t.toArray=function(){return o.operate((function(e,t){r.reduce(i,[])(e).subscribe(t)}))}},2826:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.window=void 0;var r=n(3032),o=n(4935),i=n(4990),s=n(2576);t.window=function(e){return o.operate((function(t,n){var o=new r.Subject;n.next(o.asObservable());var a=function(e){o.error(e),n.error(e)};return t.subscribe(i.createOperatorSubscriber(n,(function(e){return null==o?void 0:o.next(e)}),(function(){o.complete(),n.complete()}),a)),e.subscribe(i.createOperatorSubscriber(n,(function(){o.complete(),n.next(o=new r.Subject)}),s.noop,a)),function(){null==o||o.unsubscribe(),o=null}}))}},7526:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowCount=void 0;var o=n(3032),i=n(4935),s=n(4990);t.windowCount=function(e,t){void 0===t&&(t=0);var n=t>0?t:e;return i.operate((function(t,i){var a=[new o.Subject],u=0;i.next(a[0].asObservable()),t.subscribe(s.createOperatorSubscriber(i,(function(t){var s,c;try{for(var l=r(a),f=l.next();!f.done;f=l.next())f.value.next(t)}catch(e){s={error:e}}finally{try{f&&!f.done&&(c=l.return)&&c.call(l)}finally{if(s)throw s.error}}var d=u-e+1;if(d>=0&&d%n==0&&a.shift().complete(),++u%n==0){var p=new o.Subject;a.push(p),i.next(p.asObservable())}}),(function(){for(;a.length>0;)a.shift().complete();i.complete()}),(function(e){for(;a.length>0;)a.shift().error(e);i.error(e)}),(function(){a=null})))}))}},8294:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowTime=void 0;var r=n(3032),o=n(2445),i=n(3865),s=n(4935),a=n(4990),u=n(6967),c=n(2433),l=n(7738);t.windowTime=function(e){for(var t,n,f=[],d=1;d<arguments.length;d++)f[d-1]=arguments[d];var p=null!==(t=c.popScheduler(f))&&void 0!==t?t:o.asyncScheduler,h=null!==(n=f[0])&&void 0!==n?n:null,v=f[1]||1/0;return s.operate((function(t,n){var o=[],s=!1,c=function(e){var t=e.window,n=e.subs;t.complete(),n.unsubscribe(),u.arrRemove(o,e),s&&f()},f=function(){if(o){var t=new i.Subscription;n.add(t);var s=new r.Subject,a={window:s,subs:t,seen:0};o.push(a),n.next(s.asObservable()),l.executeSchedule(t,p,(function(){return c(a)}),e)}};null!==h&&h>=0?l.executeSchedule(n,p,f,h,!0):s=!0,f();var d=function(e){return o.slice().forEach(e)},y=function(e){d((function(t){var n=t.window;return e(n)})),e(n),n.unsubscribe()};return t.subscribe(a.createOperatorSubscriber(n,(function(e){d((function(t){t.window.next(e),v<=++t.seen&&c(t)}))}),(function(){return y((function(e){return e.complete()}))}),(function(e){return y((function(t){return t.error(e)}))}))),function(){o=null}}))}},1883:function(e,t,n){var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.windowToggle=void 0;var o=n(3032),i=n(3865),s=n(4935),a=n(7103),u=n(4990),c=n(2576),l=n(6967);t.windowToggle=function(e,t){return s.operate((function(n,s){var f=[],d=function(e){for(;0<f.length;)f.shift().error(e);s.error(e)};a.innerFrom(e).subscribe(u.createOperatorSubscriber(s,(function(e){var n=new o.Subject;f.push(n);var r,p=new i.Subscription;try{r=a.innerFrom(t(e))}catch(e){return void d(e)}s.next(n.asObservable()),p.add(r.subscribe(u.createOperatorSubscriber(s,(function(){l.arrRemove(f,n),n.complete(),p.unsubscribe()}),c.noop,d)))}),c.noop)),n.subscribe(u.createOperatorSubscriber(s,(function(e){var t,n,o=f.slice();try{for(var i=r(o),s=i.next();!s.done;s=i.next())s.value.next(e)}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}}),(function(){for(;0<f.length;)f.shift().complete();s.complete()}),d,(function(){for(;0<f.length;)f.shift().unsubscribe()})))}))}},4309:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.windowWhen=void 0;var r=n(3032),o=n(4935),i=n(4990),s=n(7103);t.windowWhen=function(e){return o.operate((function(t,n){var o,a,u=function(e){o.error(e),n.error(e)},c=function(){var t;null==a||a.unsubscribe(),null==o||o.complete(),o=new r.Subject,n.next(o.asObservable());try{t=s.innerFrom(e())}catch(e){return void u(e)}t.subscribe(a=i.createOperatorSubscriber(n,c,c,u))};c(),t.subscribe(i.createOperatorSubscriber(n,(function(e){return o.next(e)}),(function(){o.complete(),n.complete()}),u,(function(){null==a||a.unsubscribe(),o=null})))}))}},3041:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.withLatestFrom=void 0;var i=n(4935),s=n(4990),a=n(7103),u=n(4781),c=n(2576),l=n(2433);t.withLatestFrom=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=l.popResultSelector(e);return i.operate((function(t,i){for(var l=e.length,f=new Array(l),d=e.map((function(){return!1})),p=!1,h=function(t){a.innerFrom(e[t]).subscribe(s.createOperatorSubscriber(i,(function(e){f[t]=e,p||d[t]||(d[t]=!0,(p=d.every(u.identity))&&(d=null))}),c.noop))},v=0;v<l;v++)h(v);t.subscribe(s.createOperatorSubscriber(i,(function(e){if(p){var t=o([e],r(f));i.next(n?n.apply(void 0,o([],r(t))):t)}})))}))}},4400:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zip=void 0;var i=n(7654),s=n(4935);t.zip=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return s.operate((function(t,n){i.zip.apply(void 0,o([t],r(e))).subscribe(n)}))}},8593:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.zipAll=void 0;var r=n(7654),o=n(2069);t.zipAll=function(e){return o.joinAllInternals(r.zip,e)}},8096:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.zipWith=void 0;var i=n(4400);t.zipWith=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i.zip.apply(void 0,o([],r(e)))}},7631:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleArray=void 0;var r=n(2419);t.scheduleArray=function(e,t){return new r.Observable((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}},8489:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleAsyncIterable=void 0;var r=n(2419),o=n(7738);t.scheduleAsyncIterable=function(e,t){if(!e)throw new Error("Iterable cannot be null");return new r.Observable((function(n){o.executeSchedule(n,t,(function(){var r=e[Symbol.asyncIterator]();o.executeSchedule(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}},1297:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleIterable=void 0;var r=n(2419),o=n(3725),i=n(3005),s=n(7738);t.scheduleIterable=function(e,t){return new r.Observable((function(n){var r;return s.executeSchedule(n,t,(function(){r=e[o.iterator](),s.executeSchedule(n,t,(function(){var e,t,o;try{t=(e=r.next()).value,o=e.done}catch(e){return void n.error(e)}o?n.complete():n.next(t)}),0,!0)})),function(){return i.isFunction(null==r?void 0:r.return)&&r.return()}}))}},4001:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleObservable=void 0;var r=n(7103),o=n(1184),i=n(276);t.scheduleObservable=function(e,t){return r.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},5143:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.schedulePromise=void 0;var r=n(7103),o=n(1184),i=n(276);t.schedulePromise=function(e,t){return r.innerFrom(e).pipe(i.subscribeOn(t),o.observeOn(t))}},3676:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduleReadableStreamLike=void 0;var r=n(8489),o=n(7823);t.scheduleReadableStreamLike=function(e,t){return r.scheduleAsyncIterable(o.readableStreamLikeToAsyncGenerator(e),t)}},5207:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scheduled=void 0;var r=n(4001),o=n(5143),i=n(7631),s=n(1297),a=n(8489),u=n(9500),c=n(6018),l=n(3909),f=n(2743),d=n(9595),p=n(9906),h=n(7823),v=n(3676);t.scheduled=function(e,t){if(null!=e){if(u.isInteropObservable(e))return r.scheduleObservable(e,t);if(l.isArrayLike(e))return i.scheduleArray(e,t);if(c.isPromise(e))return o.schedulePromise(e,t);if(d.isAsyncIterable(e))return a.scheduleAsyncIterable(e,t);if(f.isIterable(e))return s.scheduleIterable(e,t);if(h.isReadableStreamLike(e))return v.scheduleReadableStreamLike(e,t)}throw p.createInvalidObservableTypeError(e)}},1986:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Action=void 0;var i=function(e){function t(t,n){return e.call(this)||this}return o(t,e),t.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},t}(n(3865).Subscription);t.Action=i},9702:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncAction=void 0;var i=n(1986),s=n(8203),a=n(6967),u=function(e){function t(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return o(t,e),t.prototype.schedule=function(e,t){if(void 0===t&&(t=0),this.closed)return this;this.state=e;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),s.intervalProvider.setInterval(e.flush.bind(e,this),n)},t.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;s.intervalProvider.clearInterval(t)},t.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,a.arrRemove(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},t}(i.Action);t.AsyncAction=u},3643:function(e,t,n){var r,o=this&&this.__extends||(r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.AsyncScheduler=void 0;var i=n(218),s=function(e){function t(t,n){void 0===n&&(n=i.Scheduler.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return o(t,e),t.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},t}(i.Scheduler);t.AsyncScheduler=s},2445:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.async=t.asyncScheduler=void 0;var r=n(9702),o=n(3643);t.asyncScheduler=new o.AsyncScheduler(r.AsyncAction),t.async=t.asyncScheduler},7950:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dateTimestampProvider=void 0,t.dateTimestampProvider={now:function(){return(t.dateTimestampProvider.delegate||Date).now()},delegate:void 0}},8203:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},r=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.intervalProvider=void 0,t.intervalProvider={setInterval:function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];var i=t.intervalProvider.delegate;return((null==i?void 0:i.setInterval)||setInterval).apply(void 0,r([],n(e)))},clearInterval:function(e){var n=t.intervalProvider.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(e)},delegate:void 0}},4590:function(e,t){var n=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},r=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.timeoutProvider=void 0,t.timeoutProvider={setTimeout:function(){for(var e=[],o=0;o<arguments.length;o++)e[o]=arguments[o];var i=t.timeoutProvider.delegate;return((null==i?void 0:i.setTimeout)||setTimeout).apply(void 0,r([],n(e)))},clearTimeout:function(e){var n=t.timeoutProvider.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(e)},delegate:void 0}},3725:(e,t)=>{function n(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}Object.defineProperty(t,"__esModule",{value:!0}),t.iterator=t.getSymbolIterator=void 0,t.getSymbolIterator=n,t.iterator=n()},2801:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.observable=void 0,t.observable="function"==typeof Symbol&&Symbol.observable||"@@observable"},2351:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ArgumentOutOfRangeError=void 0;var r=n(7029);t.ArgumentOutOfRangeError=r.createErrorClass((function(e){return function(){e(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},9474:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EmptyError=void 0;var r=n(7029);t.EmptyError=r.createErrorClass((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}))},8598:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NotFoundError=void 0;var r=n(7029);t.NotFoundError=r.createErrorClass((function(e){return function(t){e(this),this.name="NotFoundError",this.message=t}}))},2642:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectUnsubscribedError=void 0;var r=n(7029);t.ObjectUnsubscribedError=r.createErrorClass((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},6156:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SequenceError=void 0;var r=n(7029);t.SequenceError=r.createErrorClass((function(e){return function(t){e(this),this.name="SequenceError",this.message=t}}))},4805:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnsubscriptionError=void 0;var r=n(7029);t.UnsubscriptionError=r.createErrorClass((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}))},2433:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.popNumber=t.popScheduler=t.popResultSelector=void 0;var r=n(3005),o=n(9016);function i(e){return e[e.length-1]}t.popResultSelector=function(e){return r.isFunction(i(e))?e.pop():void 0},t.popScheduler=function(e){return o.isScheduler(i(e))?e.pop():void 0},t.popNumber=function(e,t){return"number"==typeof i(e)?e.pop():t}},1203:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsArgArrayOrObject=void 0;var n=Array.isArray,r=Object.getPrototypeOf,o=Object.prototype,i=Object.keys;t.argsArgArrayOrObject=function(e){if(1===e.length){var t=e[0];if(n(t))return{args:t,keys:null};if((a=t)&&"object"==typeof a&&r(a)===o){var s=i(t);return{args:s.map((function(e){return t[e]})),keys:s}}}var a;return{args:e,keys:null}}},5498:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.argsOrArgArray=void 0;var n=Array.isArray;t.argsOrArgArray=function(e){return 1===e.length&&n(e[0])?e[0]:e}},6967:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.arrRemove=void 0,t.arrRemove=function(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}},7029:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createErrorClass=void 0,t.createErrorClass=function(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}},641:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createObject=void 0,t.createObject=function(e,t){return e.reduce((function(e,n,r){return e[n]=t[r],e}),{})}},6110:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.captureError=t.errorContext=void 0;var r=n(3280),o=null;t.errorContext=function(e){if(r.config.useDeprecatedSynchronousErrorHandling){var t=!o;if(t&&(o={errorThrown:!1,error:null}),e(),t){var n=o,i=n.errorThrown,s=n.error;if(o=null,i)throw s}}else e()},t.captureError=function(e){r.config.useDeprecatedSynchronousErrorHandling&&o&&(o.errorThrown=!0,o.error=e)}},7738:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.executeSchedule=void 0,t.executeSchedule=function(e,t,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){n(),o?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(i),!o)return i}},4781:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.identity=void 0,t.identity=function(e){return e}},3909:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isArrayLike=void 0,t.isArrayLike=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e}},9595:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isAsyncIterable=void 0;var r=n(3005);t.isAsyncIterable=function(e){return Symbol.asyncIterator&&r.isFunction(null==e?void 0:e[Symbol.asyncIterator])}},1677:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isValidDate=void 0,t.isValidDate=function(e){return e instanceof Date&&!isNaN(e)}},3005:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=void 0,t.isFunction=function(e){return"function"==typeof e}},9500:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isInteropObservable=void 0;var r=n(2801),o=n(3005);t.isInteropObservable=function(e){return o.isFunction(e[r.observable])}},2743:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isIterable=void 0;var r=n(3725),o=n(3005);t.isIterable=function(e){return o.isFunction(null==e?void 0:e[r.iterator])}},6018:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isPromise=void 0;var r=n(3005);t.isPromise=function(e){return r.isFunction(null==e?void 0:e.then)}},7823:function(e,t,n){var r=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},o=this&&this.__await||function(e){return this instanceof o?(this.v=e,this):new o(e)},i=this&&this.__asyncGenerator||function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),s=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){s.push([e,t,n,r])>1||u(e,t)}))})}function u(e,t){try{(n=i[e](t)).value instanceof o?Promise.resolve(n.value.v).then(c,l):f(s[0][2],n)}catch(e){f(s[0][3],e)}var n}function c(e){u("next",e)}function l(e){u("throw",e)}function f(e,t){e(t),s.shift(),s.length&&u(s[0][0],s[0][1])}};Object.defineProperty(t,"__esModule",{value:!0}),t.isReadableStreamLike=t.readableStreamLikeToAsyncGenerator=void 0;var s=n(3005);t.readableStreamLikeToAsyncGenerator=function(e){return i(this,arguments,(function(){var t,n,i;return r(this,(function(r){switch(r.label){case 0:t=e.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,o(t.read())];case 3:return n=r.sent(),i=n.value,n.done?[4,o(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,o(i)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))},t.isReadableStreamLike=function(e){return s.isFunction(null==e?void 0:e.getReader)}},9016:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isScheduler=void 0;var r=n(3005);t.isScheduler=function(e){return e&&r.isFunction(e.schedule)}},4935:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.operate=t.hasLift=void 0;var r=n(3005);function o(e){return r.isFunction(null==e?void 0:e.lift)}t.hasLift=o,t.operate=function(e){return function(t){if(o(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}},1914:function(e,t,n){var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},o=this&&this.__spreadArray||function(e,t){for(var n=0,r=t.length,o=e.length;n<r;n++,o++)e[o]=t[n];return e};Object.defineProperty(t,"__esModule",{value:!0}),t.mapOneOrManyArgs=void 0;var i=n(7291),s=Array.isArray;t.mapOneOrManyArgs=function(e){return i.map((function(t){return function(e,t){return s(t)?e.apply(void 0,o([],r(t))):e(t)}(e,t)}))}},2576:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.noop=void 0,t.noop=function(){}},8634:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.not=void 0,t.not=function(e,t){return function(n,r){return!e.call(t,n,r)}}},2872:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.pipeFromArray=t.pipe=void 0;var r=n(4781);function o(e){return 0===e.length?r.identity:1===e.length?e[0]:function(t){return e.reduce((function(e,t){return t(e)}),t)}}t.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return o(e)},t.pipeFromArray=o},7968:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.reportUnhandledError=void 0;var r=n(3280),o=n(4590);t.reportUnhandledError=function(e){o.timeoutProvider.setTimeout((function(){var t=r.config.onUnhandledError;if(!t)throw e;t(e)}))}},9906:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createInvalidObservableTypeError=void 0,t.createInvalidObservableTypeError=function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}},4857:(e,t,n)=>{t.BN=void 0;n(6474),n(5382),n(9715),n(3814),n(7211),n(4943),n(1240),n(9548),n(2128),n(3240),n(6318),n(5024),n(4919),n(4413),n(7498),n(6109),n(9664),n(1995),n(993),n(496),n(1385),n(1658),n(5841),n(8798),n(1080),n(3054),n(8737),n(7957),n(8633),n(911),n(2096),n(67),n(5337),n(5635),n(9745),n(9154),n(9283),n(7119),n(4706),n(9219),n(9749),n(9438),n(8515),n(2435),n(7291),n(8313),n(3209),n(2620),n(9821),n(3783),n(1788),n(9475),n(1211),n(7267),n(9303),n(9714),n(3848),n(1184),n(6223),n(2731),n(5649),n(4691),n(4474),n(52),n(2110),n(9864),n(9764),n(179),n(122),n(5313),n(4068),n(64),n(1188),n(8739),n(4193),n(6170),n(5876),n(1791);var r=n(5137);Object.defineProperty(t,"BN",{enumerable:!0,get:function(){return r.share}});n(1348),n(8242),n(3169),n(2454),n(6931),n(7913),n(9234),n(276),n(9253),n(8518),n(1173),n(3855),n(4783),n(1980),n(9845),n(6060),n(1138),n(7306),n(8968),n(1779),n(8005),n(4173),n(7223),n(8975),n(2),n(2826),n(7526),n(8294),n(1883),n(4309),n(3041),n(4400),n(8593),n(8096)},9137:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EClaimType=void 0,(n=t.EClaimType||(t.EClaimType={}))[n.SIGNED_CONTENT=1e3]="SIGNED_CONTENT",n[n.COMPANY_INFO=2e3]="COMPANY_INFO",n[n.VALIDATORS=2001]="VALIDATORS",n[n.USERS=2002]="USERS"},8922:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EDIDAccessLevel=void 0,(n=t.EDIDAccessLevel||(t.EDIDAccessLevel={})).NONE="0",n.MANAGEMENT_KEY="1",n.ACTION_KEY="2",n.CLAIM_SIGNER_KEY="3",n.ENCRYPTION_KEY="4"},3244:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EMimeType=void 0,(n=t.EMimeType||(t.EMimeType={})).AAC="audio/aac",n.ABW="application/x-abiword",n.ARC="application/x-freearc",n.AVI="video/x-msvideo",n.AZW="application/vnd.amazon.ebook",n.BIN="application/octet-stream",n.BMP="image/bmp",n.BZ="application/x-bzip",n.BZ2="application/x-bzip2",n.CSH="application/x-csh",n.CSS="text/css",n.CSV="text/csv",n.DOC="application/msword",n.DOCX="application/vnd.openxmlformats-officedocument.wordprocessingml.document",n.EOT="application/vnd.ms-fontobject",n.EPUB="application/epub+zip",n.GZ="application/gzip",n.GIF="image/gif",n.HTM="text/html",n.HTML="text/html",n.ICO="image/vnd.microsoft.icon",n.ICS="text/calendar",n.JAR="application/java-archive",n.JPEG=".jpg",n.JS="text/javascript",n.JSON="application/json",n.JSONLD="application/ld+json",n.MID=".midi",n.MJS="text/javascript",n.MP3="audio/mpeg",n.MPEG="video/mpeg",n.MPKG="application/vnd.apple.installer+xml",n.ODP="application/vnd.oasis.opendocument.presentation",n.ODS="application/vnd.oasis.opendocument.spreadsheet",n.ODT="application/vnd.oasis.opendocument.text",n.OGA="audio/ogg",n.OGV="video/ogg",n.OGX="application/ogg",n.OPUS="audio/opus",n.OTF="font/otf",n.PNG="image/png",n.PDF="application/pdf",n.PHP="application/php",n.PPT="application/vnd.ms-powerpoint",n.PPTX="application/vnd.openxmlformats-officedocument.presentationml.presentation",n.RAR="application/vnd.rar",n.RTF="application/rtf",n.SH="application/x-sh",n.SVG="image/svg+xml",n.SWF="application/x-shockwave-flash",n.TAR="application/x-tar",n.TIF="image/tiff",n.TIFF="image/tiff",n.TS="video/mp2t",n.TTF="font/ttf",n.TXT="text/plain",n.URI="text/x-uri",n.VSD="application/vnd.visio",n.WAV="audio/wav",n.WEBA="audio/webm",n.WEBM="video/webm",n.WEBP="image/webp",n.WOFF="font/woff",n.WOFF2="font/woff2",n.XHTML="application/xhtml+xml",n.XLS="application/vnd.ms-excel",n.XLSX="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",n.XML="XML",n.XUL="application/vnd.mozilla.xul+xml",n.ZIP="application/zip",n.GP3="video/3gpp",n.G23="video/3gpp2",n.Z7="application/x-7z-compressed"},5018:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EProofmeDataPurpose=void 0,(n=t.EProofmeDataPurpose||(t.EProofmeDataPurpose={})).AGE_VERIFICATION="AGE_VERIFICATION",n.KYC_VERIFICATION="KYC_VERIFICATION",n.ACCESS_CONTROL="ACCESS_CONTROL",n.ONLINE_VERIFICATION="ONLINE_VERIFICATION",n.IDENTIFICATION="IDENTIFICATION"},345:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.EProofmeDataStorage=void 0,(n=t.EProofmeDataStorage||(t.EProofmeDataStorage={})).DATABASE="DATABASE",n.CERTIFICATE="CERTIFICATE",n.NOT_STORED="NOT_STORED"},2178:(e,t)=>{var n;Object.defineProperty(t,"__esModule",{value:!0}),t.ESignatureTypes=void 0,(n=t.ESignatureTypes||(t.ESignatureTypes={})).ECDSA="ECDSA",n.RSA="RSA",n.HMAC="HMAC"},6498:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getRTCConnectionConfig=t.validChannelId=void 0;const o=r(n(6113));t.validChannelId=function(e,t){return 1===t.filter((t=>t.uuid===e&&null===t.channel&&!0===t.host)).length},t.getRTCConnectionConfig=function(e,t,n,r){const i=`${Math.floor(Date.now()/1e3)+t}:${e}`,s=o.default.createHmac("sha1",n).update(i.toString()).digest("base64");return console.log("Library - Username",i),console.log("Library - Credential",s),{iceCandidatePoolSize:5,iceServers:[{urls:[r],credential:s,username:i}]}}},1015:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtilsProvider=void 0;const o=n(2254),i=n(5583);let s=class{proofmeUtils=new i.ProofmeUtils;async isValidCredentials(e,t,n,r,o,i){return this.proofmeUtils.isValidCredentials(e,t,n,r,o,i)}getSignature(e,t){return this.proofmeUtils.getSignature(e,t)}signCredentialObject(e,t){return this.proofmeUtils.signCredentialObject(e,t)}signRequestedCredentials(e,t,n){return this.proofmeUtils.signRequestedCredentials(e,t,n)}async isValidRequestedCredentials(e,t,n){return this.proofmeUtils.isValidRequestedCredentials(e,t,n)}async isValidLicense(e,t,n){return this.proofmeUtils.isValidLicense(e,t,n)}generateChallenge(e,t,n,r){return this.proofmeUtils.generateChallenge(e,t,n,r)}async getClaim(e,t,n,r){return await this.proofmeUtils.getClaim(e,t,n,r)}};s=r([(0,o.Injectable)()],s),t.ProofmeUtilsProvider=s},5583:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ProofmeUtils=void 0;const o=r(n(8519)),i=n(9137),s=n(8922),a=n(2178),u=n(1485);t.ProofmeUtils=class{async isValidCredentials(e,t,n,r,i,s){const a=new o.default(t),u=this.requestedCredentialsCorrect(e,n);if(!u.success)return u.credentials=e,u;const c=await this.checkCredentials(e,t,i,s);if(!c.valid)return c;for(const e of r)a.utils.isAddress(e)||(console.error(`Trusted party did ${e} is NOT a valid address and is removed.`),r=r.filter((t=>t!==e)));if(r.length>0){const t=[];let n=0,o=0;const i=[];for(const[s]of Object.entries(e.credentials))for(const[u,c]of Object.entries(e.credentials[s].credentials)){o++;const e=c.issuer.id.split(":")[2];let s=!1,l=null,f=null,d=!0;for(const o of r){const r=t.find((t=>t.issuerDidContractAddress===e&&t.did===o));let p=null;if(r?p=r.claim:(p=await this.getClaims(e,o,a),t.push({issuerDidContractAddress:e,did:o,claim:p})),p)if(d=!1,new Date(p.expirationDate)>new Date){const e=p.keys;f=e;const t=`${c.provider}_${u}`;if(!e.includes(t)){l=t;break}if(!l){n++,s=!0;break}}else i.push({credential:c,valid:!1,code:14,message:"Claim expired."})}d?i.push({credential:c,valid:!1,code:13,message:`No claims found to check. Checked dids ${r}`}):!l||s||i.push({credential:c,valid:!1,code:12,message:`Tried to validate attribute ${l} but provider was not allowed to issue. Allowed attributes: ${f.join(", ")}`})}return n===o?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential",requestedCheckResult:u}:{valid:!1,code:1,message:"Invalid credentials",invalidCredentials:i}}return{valid:!1,code:10,message:"No trusted parties to check."}}async checkCredentials(e,t,n,r){"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e);const i=new o.default(t),s=[];let a=0,c=0;const l=[];for(const[o]of Object.entries(e.credentials)){const f={credentials:{[o]:JSON.parse(JSON.stringify(e.credentials[o]))}};delete f.credentials[o].proof.signature;const d=i.eth.accounts.recover(JSON.stringify(f),e.credentials[o].proof.signature);if(this.userCredentialSignatureWrong(e.credentials[o].proof.holder,d))for(const[,f]of Object.entries(e.credentials[o].credentials)){if(c++,!f.version){l.push({credential:f,code:8,message:"Incorrect credential version. Renew your credentials"});continue}const d=new Date(f.expirationDate),p=new Date;if(p>d){l.push({credential:f,code:7,message:`Your credential expired on ${d}`});continue}const h=new Date(e.credentials[o].proof.nonce);if(this.calculateMinutesDifference(p,h)>5&&n)l.push({credential:f,code:2,message:"Nonce too old"});else if(this.issuerCredentialSignatureWrong(f,i)){const n=f.proof.holder,c=f.issuer.id.split(":")[2];if(await this.didContractKeyWrong(i,t,u.claimHolderAbi,n,c,s)){const n=e.credentials[o].proof.holder,c=f.id.split(":")[2];await this.didContractKeyWrong(i,t,u.claimHolderAbi,n,c,s)?r&&void 0!==f.verified&&!0!==f.verified?l.push({credential:f,code:15,message:"Liveness check required but credential not verified"}):a++:l.push({credential:f,code:6,message:"User did incorrect"})}else l.push({credential:f,code:5,message:"Issuer did incorrect"})}else l.push({credential:f,code:4,message:"Issuer signature incorrect"})}else l.push({credential:e.credentials[o],code:3,message:"User signature incorrect"})}return c>0&&a===c?{credentials:e.credentials,valid:!0,code:0,message:"Valid credential"}:{valid:!1,code:1,message:"Invalid credential",invalidCredentials:l}}userCredentialSignatureWrong(e,t){return e===t||(console.error(`User signature of credential ${e} does not match recoveredAddress ${t}`),!1)}issuerCredentialSignatureWrong(e,t){const n=e.proof.signature,r=e.proof.holder,o=JSON.parse(JSON.stringify(e));delete o.proof.signature;const i=t.eth.accounts.recover(JSON.stringify(o),n);return r===i||(console.error(`Issuer signature of credential ${r} does not match recoveredAddress ${i}`),!1)}async didContractKeyWrong(e,t,n,r,i,s){const a=s.find((e=>e.did==i&&e.holderKey===r));if(a)return a.result;{const a=[];if(i===r)return s.push({did:i,holderKey:r,result:!0}),!0;{const u=this.getSha3Key(r,e),c=new(new o.default(t).eth.Contract)(n,i);if(!this.knownAddressesContains(a,u,i)){const e=parseInt(await this.getKeyPurpose(c,u),10);if(0===e||e>3)return s.push({did:i,holderKey:r,result:!1}),!1;a.push({sha3Key:u,didAddress:i})}return s.push({did:i,holderKey:r,result:!0}),!0}}}knownAddressesContains(e,t,n){for(const r of e)if(r.sha3Key===t&&r.didContractAddress===n)return!0}getSha3Key(e,t){return t.utils.keccak256(e)}async getKeyPurpose(e,t){return null===e.options.address?Promise.resolve(null):await e.methods.getKeyPurpose(t).call()}calculateMinutesDifference(e,t){let n=(e.getTime()-t.getTime())/1e3;return n/=60,Math.abs(Math.round(n))}reOrderCredentialObject(e){for(const t of Object.keys(e.credentials)){const n=[];for(const r of Object.keys(e.credentials[t].credentials))n.push(r);n.sort();const r={};for(const o of n){const n=this.reOrderCredential(e.credentials[t].credentials[o]);r[o]=n}e.credentials[t].proof=this.reOrderCredentialProof(e.credentials[t].proof),e.credentials[t]={credentials:r,proof:e.credentials[t].proof}}return e}reOrderCredential(e){return this.sortObjectAlphabetically(e)}sortObjectAlphabetically(e){const t={},n=Object.keys(e);n.sort(((e,t)=>(e=e.toLowerCase())<(t=t.toLowerCase())?-1:e>t?1:0));for(const r in n){const o=n[r];null===e[o]||"object"!=typeof e[o]||e[o]instanceof Array?t[o]=e[o]:t[o]=this.sortObjectAlphabetically(e[o])}return t}reOrderCredentialProof(e){return{holder:e.holder,nonce:e.nonce,signature:e.signature,type:e.type}}getSignature(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderObject(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature}reOrderObject(e){return this.sortObjectAlphabetically(e)}signCredentialObject(e,t){return"string"==typeof e&&(e=JSON.parse(e)),e=this.reOrderCredentialObject(e),(new o.default).eth.accounts.sign(JSON.stringify(e),t).signature}async getClaims(e,t,n){const r=new n.eth.Contract(u.claimHolderAbi,t),o=await r.methods.getClaimIdsByType(e).call();if(!(o.length>0))return Promise.resolve(null);try{const e=await r.methods.getClaim(o[o.length-1]).call(),t=JSON.parse(n.utils.toAscii(e.data));return Promise.resolve(t)}catch(e){return Promise.resolve(null)}}async getClaim(e,t,n,r){const i=new o.default(n),s=new i.eth.Contract(r,t),a=await s.methods.getClaimIdsByType(e).call();if(!(a.length>0))return Promise.resolve(null);try{const e=await s.methods.getClaim(a[a.length-1]).call(),t=i.utils.toAscii(e.data);if(t.length>1){const e=JSON.parse(t);return Promise.resolve(e)}return Promise.resolve(null)}catch(e){return console.log("Error: ",e),Promise.resolve(null)}}requestedCredentialsCorrect(e,t){const n={success:!0,missingKeys:[]};for(const r of t.credentials){let o=!1;if(t.minimumRequired&&(o=!!t.minimumRequired.data.find((e=>e===r.key))),r.required&&!o){Array.isArray(r.provider)||(r.provider=[r.provider]);let t=!1;for(const n of r.provider)e.credentials[n]&&e.credentials[n].credentials&&e.credentials[n].credentials[r.key]&&(t=!0);t||(n.success=!1,n.missingKeys.push(r))}}if(t.minimumRequired){const r=Object.keys(e.credentials),o=t.minimumRequired.data;let i=0;for(const t of r)for(const n of o)e.credentials[t]&&e.credentials[t].credentials&&e.credentials[t].credentials[n]&&i++;i<t.minimumRequired.amount&&(n.success=!1,n.missingMessage=`Check the minimumRequired array. Found ${i} items and required amount ${t.minimumRequired.amount}`)}return n}recoverAddressFromSignature(e,t,n){const r=new o.default;return!0===n?(e=this.sortObjectAlphabetically(JSON.parse(e)),r.eth.accounts.recover(JSON.stringify(e),t)):r.eth.accounts.recover(e,t)}signRequestedCredentials(e,t,n){e.proof={holder:t,nonce:Date.now(),type:a.ESignatureTypes.ECDSA};const r=this.getSignature(e,n);return e.proof.signature=r,e}async isValidRequestedCredentials(e,t,n){if(e?.proof?.signature){const r=JSON.parse(JSON.stringify(e));delete r.proof.signature;const i=this.recoverAddressFromSignature(JSON.stringify(r),e.proof.signature,!0),a=new o.default(t),u=e.proof.holder,c=new a.eth.Contract(n,u),l=this.getSha3Key(i,a),f=await this.getKeyPurpose(c,l);return f===s.EDIDAccessLevel.MANAGEMENT_KEY||f===s.EDIDAccessLevel.ACTION_KEY}return console.error("Requested Credentials doesn't have a signature in the proof. Not checking"),!1}async isValidLicense(e,t,n){const r=e.proof.holder,o=(await this.getClaim(i.EClaimType.COMPANY_INFO,r,t,n))?.credentialSubject?.credential?.value?.status;return!!o&&!0===o}privateKeyToPublicKey(e){return(new o.default).eth.accounts.privateKeyToAccount(e).address}generateChallenge(e,t,n,r){const i=new o.default,s=Math.floor(Date.now()/1e3).toString(),a=`${e}-${t}-${n}-${s}`;return{did:t,publicKey:e,endpoint:n,timestamp:s,challenge:a,signature:i.eth.accounts.sign(a,r).signature}}}},5456:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SignalServerV2=void 0;const r=n(1964),o=n(5828),i=n(367),s=n(6498),a=n(593);t.SignalServerV2=class{wsServer;wsRequest$=new r.Subject;startSignal(e){this.wsServer=new i.server({httpServer:e,autoAcceptConnections:!1}),this.wsServer.on("request",(async e=>{this.wsRequest$.next(e)}))}sendTo(e,t){e.sendUTF(JSON.stringify(t))}rejectConnection(e,t){t.reject(),console.error((new Date).toISOString()+" "+e),console.error((new Date).toISOString()+" Connection from remoteAddress "+t.remoteAddresses+" rejected.")}async setupP2PConnection(e,t,n,r,i,u,c,l,f,d,p,h){const v=e.accept(null,e.origin);if(console.log(`Library - Accepted ${e.origin} valid signed ${t}`),v.uuid=(0,o.v4)(),v.did=t?e?.resourceURL?.query?.did?.toString():null,v.publicKey=t?e?.resourceURL?.query?.publickey?.toString():null,v.authenticated=t,v.channel=n,this.setupWebsocketListeners(v),"validator"===h&&t&&null===n||r&&null===n){v.host=!0,v.origin=h;const e=(0,s.getRTCConnectionConfig)("host",i,c,u);console.log("Library - Host waiting for connection"),this.sendTo(v,{type:"host",success:!0,message:`Host initialised ${v.uuid}`,channelId:v.uuid,signalServer:l,..."validator"===h&&{webRtcConnectionConfig:e}}),"validator"!==h&&(v.webRtcClient=new a.WebRTCClientV2(e,f,v,d,p),await v.webRtcClient.setupPeerconnection(v.uuid))}else if(null!==n){const e=this.wsServer.connections.find((e=>e.uuid===n&&null===e.channel&&!0===e.host));if(e){e.channel=v.uuid,v.channel=e.uuid,console.log(`Library - Client connecting to ${n}`);const t=(0,s.getRTCConnectionConfig)("client",i,c,u);this.sendTo(v,{type:"client",success:!0,message:`Client initialised ${v.uuid}`,channelId:n,webRtcConnectionConfig:t}),"validator"!==e.origin&&e.webRtcClient.setClientChannel(v)}else v.close()}else console.error("Library - Not a client or host"),v.close();return v}setupWebsocketListeners(e){e.on("message",(async t=>{let n;try{"utf8Data"in t&&(n=JSON.parse(t.utf8Data))}catch(e){console.error("Library - Websocket connection invalid JSON",e),n={type:null}}const{type:r,offer:o,answer:i,candidate:s}=n;switch(r){case"offer":if(!e.host&&e.channel){const t=this.wsServer.connections.find((t=>t.channel===e.uuid&&!0===t.host));"validator"===t.origin?this.sendTo(t,{type:"offer",success:!0,message:"Client shared an offer",offer:o}):(await t.webRtcClient.setRemoteDescription(o),await t.webRtcClient.sendAnswer())}else e.close();break;case"answer":if(e.host&&e.channel&&"validator"===e.origin){const t=this.wsServer.connections.find((t=>t.channel===e.uuid));this.sendTo(t,{type:"answer",success:!0,message:"Client shared an answer",answer:i})}else e.close();break;case"candidate":if(e.channel){const t=this.wsServer.connections.find((t=>t.channel===e.uuid));"validator"===t.origin||"validator"===e.origin?this.sendTo(t,{type:"candidate",success:!0,message:"Candidate shared",candidate:s}):t.webRtcClient.addCandidate(s)}else e.close()}})),e.on("close",((t,n)=>{console.log(`Library - ${(new Date).toISOString()} - Peer ${e.remoteAddress} disconnected, Reason ${t}, description ${n}`)}))}}},2582:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.SignalingServer=void 0;const s=i(n(5352)),a=n(5828),u=i(n(6113));t.SignalingServer=class{wsServer;rtcConnectionConfig;setRTCConnectionConfig(e){this.rtcConnectionConfig=e}getRTCConnectionConfig(e){if(this.rtcConnectionConfig.turnEnabled){const t=`${Math.floor(Date.now()/1e3)+this.rtcConnectionConfig.turnExpiration}:${e}`,n=u.createHmac("sha1",this.rtcConnectionConfig.turnSecret).update(t.toString()).digest("base64");return console.log("Library - Username",t),console.log("Library - Credential",n),{iceCandidatePoolSize:5,iceServers:[{urls:[this.rtcConnectionConfig.turnUrl],credential:n,username:t}]}}if(this.rtcConnectionConfig.stunEnabled)return{iceServers:[{urls:[this.rtcConnectionConfig.stunUrl]}]}}startSignal(e){this.wsServer=new s.Server({server:e});const t=(e,t)=>{e.send(JSON.stringify(t))};this.wsServer.on("connection",(e=>{e.uuid=(0,a.v4)(),e.did=null,e.host=!1,e.authenticated=!1,e.connected=null,e.on("error",(e=>{})),e.on("message",(n=>{let r;try{r=JSON.parse(n)}catch(e){r={}}const{type:o,token:i,host:s,offer:u,answer:c,candidate:l}=r;switch(o){case"auth":i?(e.authenticated=!0,t(e,{type:"AUTH",success:!0,message:"Authentication successful"})):t(e,{type:"auth",success:!1,message:"Could not validate token"});break;case"host":e.host=!0,t(e,{type:"host",success:!0,message:"Host initialised "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")});break;case"ping":t(e,{type:"pong"});break;case"connect":{const n=[...this.wsServer.clients].filter((e=>e.uuid===s&&null===e.connected&&!0===e.host));1===n.length?(t(n[0],{type:"connected",success:!0,message:"Client connected "+e.uuid,uuid:e.uuid,webRtcConnectionConfig:this.getRTCConnectionConfig("host")}),t(e,{type:"connected",success:!0,message:"Connected to "+s,webRtcConnectionConfig:this.getRTCConnectionConfig("client")}),e.connected=n[0].uuid,n[0].connected=e.uuid):t(e,{type:"connected",success:!1,message:"Could not connect to "+s});break}case"offer":if(null!=e.connected&&this.wsServer.clients.size>0){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"offer",success:!0,offer:u}),t(e,{type:"offer",success:!0,offer:u})):t(e,{type:"offer",success:!1,offer:u,message:"Connection not found."})}else t(e,{type:"offer",success:!1,offer:u,message:"Too soon..."});break;case"answer":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?(t(n[0],{type:"answer",success:!0,answer:c}),t(e,{type:"answer",success:!0,answer:c})):t(e,{type:"answer",success:!1,answer:c,message:"Connection not found."})}else t(e,{type:"answer",success:!1,answer:c,message:"Too soon..."});break;case"candidate":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length?t(n[0],{type:"candidate",success:!0,candidate:l}):t(e,{type:"candidate",success:!1,candidate:l,message:"Connection not found."})}else t(e,{type:"candidate",success:!1,candidate:l,message:"Too soon..."});break;case"leave":if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));e.uuid=(0,a.v4)(),1===n.length?(t(n[0],{type:"leave",success:!0,message:"Connection left on receive leave"}),n[0].connected=null,t(e,{type:"leave",success:!0,message:"Connection left.",uuid:e.uuid})):t(e,{type:"leave",success:!1,message:"Connection not found.",uuid:e.uuid}),e.connected=null}else e.uuid=(0,a.v4)(),t(e,{type:"leave",success:!1,message:"Not connected to host/client.",uuid:e.uuid});break;default:t(e,{type:"error",message:"Command not found: "+o})}})),e.on("close",((e,n,r)=>{if(null!=e.connected){const n=[...this.wsServer.clients].filter((t=>t.connected===e.uuid));1===n.length&&(t(n[0],{type:"leave",success:!0,message:"Connection left on websocket close"}),n[0].connected=null),e.connected=null}})),e.send(JSON.stringify({type:"connect",message:"Well hello there, I am the Signaling Server",success:!0}))}))}}},1485:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.claimHolderAbi=void 0,t.claimHolderAbi=[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}]},3002:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Identity=void 0,t.Identity={abi:[{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKeyPurpose",outputs:[{name:"purpose",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"}],name:"getKey",outputs:[{name:"purpose",type:"uint256"},{name:"keyType",type:"uint256"},{name:"key",type:"bytes32"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"},{name:"_type",type:"uint256"}],name:"addKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimType",type:"uint256"}],name:"getClaimIdsByType",outputs:[{name:"claimIds",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimId",type:"bytes32"}],name:"removeClaim",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_str",type:"bytes"},{name:"_offset",type:"uint256"},{name:"_length",type:"uint256"}],name:"getBytes",outputs:[{name:"",type:"bytes"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_id",type:"uint256"},{name:"_approve",type:"bool"}],name:"approve",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_key",type:"bytes32"}],name:"removeKey",outputs:[{name:"success",type:"bool"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_purpose",type:"uint256"}],name:"getKeysByPurpose",outputs:[{name:"_keys",type:"bytes32[]"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_claimType",type:"uint256"},{name:"_scheme",type:"uint256"},{name:"_issuer",type:"address"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"}],name:"addClaim",outputs:[{name:"claimRequestId",type:"bytes32"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"},{name:"_data",type:"bytes"}],name:"execute",outputs:[{name:"executionId",type:"uint256"}],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_claimId",type:"bytes32"}],name:"getClaim",outputs:[{name:"claimType",type:"uint256"},{name:"scheme",type:"uint256"},{name:"issuer",type:"address"},{name:"signature",type:"bytes"},{name:"data",type:"bytes"},{name:"uri",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_key",type:"bytes32"},{name:"_purpose",type:"uint256"}],name:"keyHasPurpose",outputs:[{name:"result",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"_str",type:"string"},{name:"_offset",type:"uint256"},{name:"_length",type:"uint256"}],name:"getString",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{inputs:[{name:"_claimType",type:"uint256[]"},{name:"_scheme",type:"uint256[]"},{name:"_issuer",type:"address[]"},{name:"_signature",type:"bytes"},{name:"_data",type:"bytes"},{name:"_uri",type:"string"},{name:"_sigSizes",type:"uint256[]"},{name:"dataSizes",type:"uint256[]"},{name:"uriSizes",type:"uint256[]"}],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,name:"claimRequestId",type:"uint256"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signatureType",type:"uint256"},{indexed:!1,name:"signature",type:"bytes32"},{indexed:!1,name:"claim",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"claimId",type:"bytes32"},{indexed:!0,name:"claimType",type:"uint256"},{indexed:!1,name:"scheme",type:"uint256"},{indexed:!0,name:"issuer",type:"address"},{indexed:!1,name:"signature",type:"bytes"},{indexed:!1,name:"data",type:"bytes"},{indexed:!1,name:"uri",type:"string"}],name:"ClaimChanged",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionFailed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyAdded",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"key",type:"bytes32"},{indexed:!0,name:"purpose",type:"uint256"},{indexed:!0,name:"keyType",type:"uint256"}],name:"KeyRemoved",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"ExecutionRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!0,name:"to",type:"address"},{indexed:!0,name:"value",type:"uint256"},{indexed:!1,name:"data",type:"bytes"}],name:"Executed",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"executionId",type:"uint256"},{indexed:!1,name:"approved",type:"bool"}],name:"Approved",type:"event"}],data:"60806040523480156200001157600080fd5b50604051620033333803806200333383398101806040528101908080518201929190602001805182019291906020018051820192919060200180518201929190602001805182019291906020018051820192919060200180518201929190602001805182019291906020018051820192919050505060008060008060008033604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140191505060405180910390209050806001600083600019166000191681526020019081526020016000206002018160001916905550600180600083600019166000191681526020019081526020016000206000018190555060018060008360001916600019168152602001908152602001600020600101819055506002600060018152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550600180600083600019166000191681526020019081526020016000206000015482600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a450600093506000925060009150600090505b8d51811015620007ba578b818151811015156200020f57fe5b906020019060200201518e828151811015156200022857fe5b90602001906020020151604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401828152602001925050506040518091039020945060c0604051908101604052808f83815181101515620002a657fe5b9060200190602002015181526020018e83815181101515620002c457fe5b9060200190602002015181526020018d83815181101515620002e257fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1681526020016200033b8d878c868151811015156200031c57fe5b90602001906020020151620007ce640100000000026401000000009004565b8152602001620003748c858b868151811015156200035557fe5b90602001906020020151620007ce640100000000026401000000009004565b8152602001620003ad8b868a868151811015156200038e57fe5b90602001906020020151620008da640100000000026401000000009004565b815250600460008760001916600019168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908051906020019062000444929190620009ec565b50608082015181600401908051906020019062000463929190620009ec565b5060a08201518160050190805190602001906200048292919062000a73565b5090505087818151811015156200049557fe5b90602001906020020151840193508581815181101515620004b257fe5b90602001906020020151830192508681815181101515620004cf57fe5b906020019060200201518201915060046000866000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166004600087600019166000191681526020019081526020016000206000015486600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c5600460008a6000191660001916815260200190815260200160002060010154600460008b60001916600019168152602001908152602001600020600301600460008c60001916600019168152602001908152602001600020600401600460008d60001916600019168152602001908152602001600020600501604051808581526020018060200180602001806020018481038452878181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200068b5780601f106200065f576101008083540402835291602001916200068b565b820191906000526020600020905b8154815290600101906020018083116200066d57829003601f168201915b5050848103835286818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620007125780601f10620006e65761010080835404028352916020019162000712565b820191906000526020600020905b815481529060010190602001808311620006f457829003601f168201915b5050848103825285818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620007995780601f106200076d5761010080835404028352916020019162000799565b820191906000526020600020905b8154815290600101906020018083116200077b57829003601f168201915b505097505050505050505060405180910390a48080600101915050620001f6565b505050505050505050505050505062000b22565b606080600080846040519080825280601f01601f191660200182016040528015620008085781602001602082028038833980820191505090505b509250600091508590505b848601811015620008cd5786818151811015156200082d57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156200088757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505062000813565b8293505050509392505050565b6060806060600080879350856040519080825280601f01601f191660200182016040528015620009195781602001602082028038833980820191505090505b509250600091508690505b858701811015620009de5783818151811015156200093e57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156200099857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505062000924565b829450505050509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000a2f57805160ff191683800117855562000a60565b8280016001018555821562000a60579182015b8281111562000a5f57825182559160200191906001019062000a42565b5b50905062000a6f919062000afa565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000ab657805160ff191683800117855562000ae7565b8280016001018555821562000ae7579182015b8281111562000ae657825182559160200191906001019062000ac9565b5b50905062000af6919062000afa565b5090565b62000b1f91905b8082111562000b1b57600081600090555060010162000b01565b5090565b90565b6128018062000b326000396000f3006080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063032c1a8a146100d557806312aaac701461011a5780631d38124014610175578063262b54f5146101d25780634eee424a146102545780635d2cfd611461029d578063747442d314610393578063862642f5146103e45780639010f7261461042d578063b1a34e0d146104af578063b61d27f6146105f4578063c9100bcb1461069b578063d202158d1461085e578063df9319be146108b1575b600080fd5b3480156100e157600080fd5b5061010460048036038101908080356000191690602001909291905050506109a7565b6040518082815260200191505060405180910390f35b34801561012657600080fd5b5061014960048036038101908080356000191690602001909291905050506109cf565b604051808481526020018381526020018260001916600019168152602001935050505060405180910390f35b34801561018157600080fd5b506101b860048036038101908080356000191690602001909291908035906020019092919080359060200190929190505050610a3e565b604051808215151515815260200191505060405180910390f35b3480156101de57600080fd5b506101fd60048036038101908080359060200190929190505050610cf7565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610240578082015181840152602081019050610225565b505050509050019250505060405180910390f35b34801561026057600080fd5b506102836004803603810190808035600019169060200190929190505050610d66565b604051808215151515815260200191505060405180910390f35b3480156102a957600080fd5b50610318600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001909291905050506111e4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035857808201518184015260208101905061033d565b50505050905090810190601f1680156103855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561039f57600080fd5b506103ca600480360381019080803590602001909291908035151590602001909291905050506112eb565b604051808215151515815260200191505060405180910390f35b3480156103f057600080fd5b5061041360048036038101908080356000191690602001909291905050506117ff565b604051808215151515815260200191505060405180910390f35b34801561043957600080fd5b506104586004803603810190808035906020019092919050505061196a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561049b578082015181840152602081019050610480565b505050509050019250505060405180910390f35b3480156104bb57600080fd5b506105d66004803603810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506119d9565b60405180826000191660001916815260200191505060405180910390f35b34801561060057600080fd5b50610685600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611efe565b6040518082815260200191505060405180910390f35b3480156106a757600080fd5b506106ca60048036038101908080356000191690602001909291905050506121e0565b604051808781526020018681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015610750578082015181840152602081019050610735565b50505050905090810190601f16801561077d5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156107b657808201518184015260208101905061079b565b50505050905090810190601f1680156107e35780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561081c578082015181840152602081019050610801565b50505050905090810190601f1680156108495780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561086a57600080fd5b506108976004803603810190808035600019169060200190929190803590602001909291905050506124aa565b604051808215151515815260200191505060405180910390f35b3480156108bd57600080fd5b5061092c600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050612513565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561096c578082015181840152602081019050610951565b50505050905090810190601f1680156109995780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000600160008360001916600019168152602001908152602001600020600001549050919050565b60008060006001600085600019166000191681526020019081526020016000206000015460016000866000191660001916815260200190815260200160002060010154600160008760001916600019168152602001908152602001600020600201549250925092509193909250565b60008360001916600160008660001916600019168152602001908152602001600020600201546000191614151515610ade576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4b657920616c726561647920657869737473000000000000000000000000000081525060200191505060405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0957610b6e33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b1515610c08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742081526020017f6b6579000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8360016000866000191660001916815260200190815260200160002060020181600019169055508260016000866000191660001916815260200190815260200160002060000181905550816001600086600019166000191681526020019081526020016000206001018190555060026000848152602001908152602001600020849080600181540180825580915050906001820390600052602060002001600090919290919091509060001916905550818385600019167f480000bb1edad8ca1470381cc334b1917fbd51c6531f3a623ea8e0ec7e38a6e960405160405180910390a4600190509392505050565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610d5a57602002820191906000526020600020905b81546000191681526020019060010190808311610d42575b50505050509050919050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e9357610df833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b1515610e92576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f53656e64657220646f6573206e6f742068617665206d616e6167656d656e742081526020017f6b6579000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b60046000836000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166004600084600019166000191681526020019081526020016000206000015483600019167f3cf57863a89432c61c4a27073c6ee39e8a764bff5a05aebfbcdcdc80b2e6130a60046000876000191660001916815260200190815260200160002060010154600460008860001916600019168152602001908152602001600020600301600460008960001916600019168152602001908152602001600020600401600460008a600019166000191681526020019081526020016000206005016040518085815260200180602001806020018060200184810384528781815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561103d5780601f106110125761010080835404028352916020019161103d565b820191906000526020600020905b81548152906001019060200180831161102057829003601f168201915b50508481038352868181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156110c05780601f10611095576101008083540402835291602001916110c0565b820191906000526020600020905b8154815290600101906020018083116110a357829003601f168201915b50508481038252858181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156111435780601f1061111857610100808354040283529160200191611143565b820191906000526020600020905b81548152906001019060200180831161112657829003601f168201915b505097505050505050505060405180910390a460046000836000191660001916815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006111b99190612620565b6004820160006111c99190612620565b6005820160006111d99190612668565b505060019050919050565b606080600080846040519080825280601f01601f19166020018201604052801561121d5781602001602082028038833980820191505090505b509250600091508590505b8486018110156112de57868181518110151561124057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002838381518110151561129957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806001019250508080600101915050611228565b8293505050509392505050565b600061134833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060026124aa565b15156113bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f53656e64657220646f6573206e6f74206861766520616374696f6e206b65790081525060200191505060405180910390fd5b827fb3932da477fe5d6c8ff2eafef050c0f3a1af18fc07121001482600f36f3715d883604051808215151515815260200191505060405180910390a26001151582151514156117c55760016003600085815260200190815260200160002060030160006101000a81548160ff0219169083151502179055506003600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660036000858152602001908152602001600020600201600060405180838054600181600116156101000203166002900480156114fe5780601f106114d3576101008083540402835291602001916114fe565b820191906000526020600020905b8154815290600101906020018083116114e157829003601f168201915b50508260ff168152602001925050506000604051808303816000865af19150509050801561168d5760016003600085815260200190815260200160002060030160016101000a81548160ff02191690831515021790555060036000848152602001908152602001600020600101546003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f1f920dbda597d7bf95035464170fa58d0a4b57f13a1c315ace6793b9f63688b860036000888152602001908152602001600020600201604051808060200182810382528381815460018160011615610100020316600290048152602001915080546001816001161561010002031660029004801561167a5780601f1061164f5761010080835404028352916020019161167a565b820191906000526020600020905b81548152906001019060200180831161165d57829003601f168201915b50509250505060405180910390a46117f9565b60036000848152602001908152602001600020600101546003600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847fe10c49d9f7c71da23262367013434763cfdb2332267641728d25cd712c5c6a686003600088815260200190815260200160002060020160405180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156117b25780601f10611787576101008083540402835291602001916117b2565b820191906000526020600020905b81548152906001019060200180831161179557829003601f168201915b50509250505060405180910390a46117f9565b60006003600085815260200190815260200160002060030160006101000a81548160ff021916908315150217905550600190505b92915050565b60008160001916600160008460001916600019168152602001908152602001600020600201546000191614151561189e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f4e6f2073756368206b657900000000000000000000000000000000000000000081525060200191505060405180910390fd5b600160008360001916600019168152602001908152602001600020600101546001600084600019166000191681526020019081526020016000206000015460016000856000191660001916815260200190815260200160002060020154600019167f585a4aef50f8267a92b32412b331b20f7f8b96f2245b253b9cc50dcc621d339760405160405180910390a460016000836000191660001916815260200190815260200160002060008082016000905560018201600090556002820160009055505060019050919050565b6060600260008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156119cd57602002820191906000526020600020905b815460001916815260200190600101908083116119b5575b50505050509050919050565b6000808588604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c0100000000000000000000000002815260140182815260200192505050604051809103902090503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b6257611ac733604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060036124aa565b1515611b61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f53656e64657220646f6573206e6f74206861766520636c61696d207369676e6581526020017f72206b657900000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b5b8573ffffffffffffffffffffffffffffffffffffffff1660046000836000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611c1957600560008981526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915090600019169055505b876004600083600019166000191681526020019081526020016000206000018190555086600460008360001916600019168152602001908152602001600020600101819055508560046000836000191660001916815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846004600083600019166000191681526020019081526020016000206003019080519060200190611cee9291906126b0565b50836004600083600019166000191681526020019081526020016000206004019080519060200190611d219291906126b0565b50826004600083600019166000191681526020019081526020016000206005019080519060200190611d54929190612730565b508573ffffffffffffffffffffffffffffffffffffffff168882600019167f46149b18aa084502c3f12bc75e19eda8bda8d102b82cce8474677a6d0d5f43c58a89898960405180858152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b83811015611de5578082015181840152602081019050611dca565b50505050905090810190601f168015611e125780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015611e4b578082015181840152602081019050611e30565b50505050905090810190601f168015611e785780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015611eb1578082015181840152602081019050611e96565b50505050905090810190601f168015611ede5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a4809150509695505050505050565b6000600360008054815260200190815260200160002060030160019054906101000a900460ff16151515611f9a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f416c72656164792065786563757465640000000000000000000000000000000081525060200191505060405180910390fd5b83600360008054815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260036000805481526020019081526020016000206001018190555081600360008054815260200190815260200160002060020190805190602001906120379291906126b0565b50828473ffffffffffffffffffffffffffffffffffffffff166000547f8afcfabcb00e47a53a8fc3e9f23ff47ee1926194bb1350dd007c50b412a6cee8856040518080602001828103825283818151815260200191508051906020019080838360005b838110156120b557808201518184015260208101905061209a565b50505050905090810190601f1680156120e25780820380516001836020036101000a031916815260200191505b509250505060405180910390a461214a33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060016124aa565b806121ac57506121ab33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166c01000000000000000000000000028152601401915050604051809103902060026124aa565b5b156121c0576121be60005460016112eb565b505b600080815480929190600101919050555060016000540390509392505050565b600080600060608060606004600088600019166000191681526020019081526020016000206000015460046000896000191660001916815260200190815260200160002060010154600460008a6000191660001916815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600460008b60001916600019168152602001908152602001600020600301600460008c60001916600019168152602001908152602001600020600401600460008d60001916600019168152602001908152602001600020600501828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123565780601f1061232b57610100808354040283529160200191612356565b820191906000526020600020905b81548152906001019060200180831161233957829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123f25780601f106123c7576101008083540402835291602001916123f2565b820191906000526020600020905b8154815290600101906020018083116123d557829003601f168201915b50505050509150808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561248e5780601f106124635761010080835404028352916020019161248e565b820191906000526020600020905b81548152906001019060200180831161247157829003601f168201915b5050505050905095509550955095509550955091939550919395565b6000806000600102600160008660001916600019168152602001908152602001600020600201546000191614156124e4576000915061250c565b8260016000866000191660001916815260200190815260200160002060000154111590508091505b5092915050565b6060806060600080879350856040519080825280601f01601f1916602001820160405280156125515781602001602082028038833980820191505090505b509250600091508690505b85870181101561261257838181518110151561257457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000283838151811015156125cd57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050808060010191505061255c565b829450505050509392505050565b50805460018160011615610100020316600290046000825580601f106126465750612665565b601f01602090049060005260206000209081019061266491906127b0565b5b50565b50805460018160011615610100020316600290046000825580601f1061268e57506126ad565b601f0160209004906000526020600020908101906126ac91906127b0565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106126f157805160ff191683800117855561271f565b8280016001018555821561271f579182015b8281111561271e578251825591602001919060010190612703565b5b50905061272c91906127b0565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061277157805160ff191683800117855561279f565b8280016001018555821561279f579182015b8281111561279e578251825591602001919060010190612783565b5b5090506127ac91906127b0565b5090565b6127d291905b808211156127ce5760008160009055506001016127b6565b5090565b905600a165627a7a723058200017634e62c856198c9c8d204756bd9ed5e12ca97b230682c6cc941e813b81330029"}},6919:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getSubDomain=void 0,t.getSubDomain=function(e){return e?.replace("http://","").replace("https://","").split(":")[0]}},3817:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.checkKeyForDid=void 0;const o=n(3002),i=r(n(8519));t.checkKeyForDid=async function(e,t,n,r){try{const s=new i.default(e),a=new s.eth.Contract(o.Identity.abi,t),u=s.utils.sha3(n);return await a.methods.keyHasPurpose(u,r).call()}catch(e){return console.log("Library - Something went wrong: "+e),!1}}},2733:function(e,t,n){var r=this&&this.__decorate||function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s};Object.defineProperty(t,"__esModule",{value:!0}),t.WebRtcProvider=void 0;const o=n(2254),i=n(1964),s=n(1904),a=n(367);let u=class{webRtcConfig;hostUuid;peerConnection=null;dataChannel=null;wsClient=null;receivedActions$=new i.BehaviorSubject(null);uuid$=new i.BehaviorSubject(null);websocketMessage$=new i.BehaviorSubject(null);websocketConnectionClosed$=new i.BehaviorSubject(null);websocketConnectionOpen$=new i.BehaviorSubject(null);websocketConnectionError$=new i.BehaviorSubject(null);webRtcConnectionConfig;connectionTimeout=null;pongCheckInterval=null;pingTimeout=null;WEBSOCKET_PING_ANSWER_DELAY=1e3;WEBSOCKET_PING_PONG_ALLOWED_TIME=3e3;getConfig(){return this.webRtcConfig}setHostUuid(e){this.hostUuid=e}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?(console.log(`Library - Sending action '${e}' with data:`,t),this.dataChannel.send(JSON.stringify({action:e,...t}))):console.error(`Websocket - Attempted to send data with action ${e} but data channel is not open`)}sendWebsocketData(e,t){return this.wsClient&&this.wsClient.readyState===this.wsClient.OPEN?(this.wsClient.send(JSON.stringify({action:e,...t})),!0):(console.error(`Websocket - Attempted to send data with action ${e} but websocket channel is not open`),!1)}getWebsocket(){return this.wsClient}setUuid(e){this.uuid$.next(e)}disconnect(){clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),this.peerConnection&&this.peerConnection.close(),this.dataChannel&&this.dataChannel.close(),this.wsClient&&(this.wsClient.close(),this.wsClient.onclose=null),this.peerConnection=null,this.dataChannel=null,this.wsClient=null,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)}remoteDisconnect(){this.dataChannel&&"open"===this.dataChannel.readyState&&this.dataChannel.send(JSON.stringify({action:"disconnect"})),setTimeout((()=>{this.disconnect()}),1e3)}async sendOffer(e,t){const n=await e.createOffer();await e.setLocalDescription(n),t.send(JSON.stringify({type:"offer",offer:n}))}async launchWebsocketClient(e,t){this.webRtcConfig=e;let n=null;this.receivedActions$=new i.BehaviorSubject(null),this.connectionTimeout&&clearTimeout(this.connectionTimeout),this.uuid$=new i.BehaviorSubject(null),this.websocketMessage$=new i.BehaviorSubject(null),this.websocketConnectionClosed$=new i.BehaviorSubject(null),this.websocketConnectionOpen$=new i.BehaviorSubject(null),this.websocketConnectionError$=new i.BehaviorSubject(null);let r=this.webRtcConfig.signalingUrl;r||(console.log("Launch websocket - URL undefined, falling back to default"),r="wss://auth.proofme.id"),console.log("Launch websocket - Client URL:",r),console.log("Launch websocket - Channel:",e.channel),console.log("Launch websocket - Headers:",t);let o=null;o=r.includes("?")?`${r}&channel=${e.channel}`:`${r}?channel=${e.channel}`,e.data&&(o=`${o}&data=${e.data}`),this.wsClient=new a.w3cwebsocket(o,null,null,t),this.connectionTimeout=setTimeout((()=>{!0!==n&&(this.websocketConnectionError$.next(!0),this.wsClient&&this.wsClient.close())}),1e4),this.wsClient.onerror=e=>{console.log("Websocket - Error: "+e.toString()),n=!1,this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1),this.websocketConnectionError$.next(!0)},this.wsClient.onclose=()=>{console.log("Websocket - Connection closed"),this.websocketConnectionClosed$.next(!0),this.websocketConnectionOpen$.next(!1)},this.wsClient.onopen=()=>{console.log("Websocket - Connection open"),n=!0,this.websocketConnectionClosed$.next(!1),this.websocketConnectionOpen$.next(!0)},this.wsClient.onmessage=async e=>{if(console.log("Websocket - Message:",e),this.websocketMessage$.next(e),e.data){let t;try{t=JSON.parse(e.data)}catch(e){console.error("Websocket - Message was not JSON"),t={}}const{type:n,message:r,success:o,channelId:i,offer:a,answer:u,candidate:c,webRtcConnectionConfig:l}=t;switch(n){case"error":console.log("Websocket - Error message:",r),"Command not found: ping"==r&&(clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{console.log(`Websocket - Ping pong took more than ${this.WEBSOCKET_PING_PONG_ALLOWED_TIME}ms. Disconnecting`),this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing());break;case"connect":if(o)if(this.webRtcConfig.isHost){const e=500;let t=0;const n=setInterval((()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"host"}))),t>=e&&clearInterval(n),t++}),50)}else{const e=500;let t=0;const n=setInterval((async()=>{this.wsClient||clearInterval(n),this.wsClient&&1===this.wsClient.readyState&&t<e&&(clearInterval(n),this.wsClient.send(JSON.stringify({type:"connect",host:this.hostUuid}))),t>=e&&clearInterval(n),t++}),50)}break;case"connected":clearTimeout(this.pongCheckInterval),clearTimeout(this.pingTimeout),l&&(this.webRtcConnectionConfig=l,this.webRtcConfig.isHost||await this.setupPeerconnection(this.hostUuid)),i&&this.webRtcConfig.isHost&&await this.sendOffer(this.peerConnection,this.wsClient);break;case"pong":clearTimeout(this.pongCheckInterval),this.pongCheckInterval=setTimeout((()=>{this.disconnect()}),this.WEBSOCKET_PING_PONG_ALLOWED_TIME),this.sendPing();break;case"offer":if(a){await this.peerConnection.setRemoteDescription(new s.RTCSessionDescription(a));const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.wsClient.send(JSON.stringify({type:"answer",answer:e}))}break;case"host":i&&this.webRtcConfig.isHost&&(this.setUuid(i),l&&(this.webRtcConnectionConfig=l),await this.setupPeerconnection(i),this.sendPing());break;case"leave":this.setUuid(null),this.disconnect();break;case"answer":u&&await this.peerConnection.setRemoteDescription(new s.RTCSessionDescription(u));break;case"candidate":if(c){const e=new s.RTCIceCandidate(c);await this.peerConnection.addIceCandidate(e)}break;case"client":l&&(this.webRtcConnectionConfig=l,this.webRtcConfig.isHost||(await this.setupPeerconnection(this.hostUuid),await this.sendOffer(this.peerConnection,this.wsClient)))}}}}sendPing(){this.pingTimeout=setTimeout((()=>{1===this.wsClient.readyState&&this.wsClient.send(JSON.stringify({type:"ping"}))}),this.WEBSOCKET_PING_ANSWER_DELAY)}async setupPeerconnection(e){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){console.log("P2P - Message invalid JSON:",e)}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.sendP2PData("clientconnected",{success:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new s.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}async setupClientPeerconnection(){this.peerConnection=new RTCPeerConnection(this.webRtcConnectionConfig),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{let t;try{t=JSON.parse(e.data),"disconnect"===t.action&&this.disconnect(),this.receivedActions$.next(t)}catch(e){console.log("P2P - Message invalid JSON:",e)}},e.channel.onopen=()=>{this.receivedActions$.next({action:"p2pConnected",p2pConnected:!0}),this.sendP2PData("clientconnected",{success:!0}),this.wsClient.close()}})),this.peerConnection.addEventListener("iceconnectionstatechange",(e=>{"disconnected"===this.peerConnection.iceConnectionState&&(this.receivedActions$.next({action:"p2pConnected",p2pConnected:!1}),this.peerConnection.close(),this.wsClient.send(JSON.stringify({type:"leave"})),this.wsClient.close())})),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new s.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.wsClient.send(JSON.stringify({type:"candidate",candidate:e.candidate}))}}))}};u=r([(0,o.Injectable)()],u),t.WebRtcProvider=u},593:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WebRTCClientV2=void 0;const r=n(1964),o=n(1904);t.WebRTCClientV2=class{peerConnection=null;dataChannel=null;clientChannel;webRtcConnectionConfig;requestedCredentials;hostWsConnection;actionType;dataChannelOpen$=new r.Subject;dataChannelMessage$=new r.Subject;data;constructor(e,t,n,r,o){this.webRtcConnectionConfig=e,this.requestedCredentials=t,this.hostWsConnection=n,this.actionType=r,this.data=o}async setupPeerconnection(e){this.peerConnection=new o.RTCPeerConnection(this.webRtcConnectionConfig),this.dataChannel=this.peerConnection.createDataChannel(e),this.peerConnection.addEventListener("icecandidate",(async e=>{if(e.candidate){try{const t=new o.RTCIceCandidate(e.candidate);await this.peerConnection.addIceCandidate(t)}catch(e){}this.clientChannel.sendUTF(JSON.stringify({type:"candidate",candidate:e.candidate}))}})),this.peerConnection.addEventListener("iceconnectionstatechange",(()=>{"disconnected"===this.peerConnection.iceConnectionState&&this.peerConnection.close()})),this.peerConnection.addEventListener("datachannel",(e=>{e.channel.onmessage=async e=>{try{const t=JSON.parse(e.data);this.dataChannelMessage$.next(t)}catch(e){console.error("Could not parse message:",e)}},e.channel.onopen=async()=>{console.log("Library - Datachannel connected"),this.hostWsConnection.sendUTF(JSON.stringify({type:"clientconnected",success:!0})),this.dataChannelOpen$.next()},e.channel.onclose=e=>{console.log("Library - Datachannel onclose:",e),this.hostWsConnection.sendUTF(JSON.stringify({type:"disconnect"}))}}))}async sendOffer(){const e=await this.peerConnection.createOffer();await this.peerConnection.setLocalDescription(e),this.clientChannel.sendUTF(JSON.stringify({type:"offer",offer:e}))}sendP2PData(e,t){this.dataChannel&&"open"===this.dataChannel.readyState?(console.log(`Library - Sending action '${e}' with data:`,t),this.dataChannel.send(JSON.stringify({action:e,...t}))):console.error(`Library - Attempted to send data with action ${e} but data channel is not open`)}async setRemoteDescription(e){await this.peerConnection.setRemoteDescription(new o.RTCSessionDescription(e))}async addCandidate(e){try{const t=new o.RTCIceCandidate(e);await this.peerConnection.addIceCandidate(t)}catch(e){console.error(e)}}async sendAnswer(){const e=await this.peerConnection.createAnswer();await this.peerConnection.setLocalDescription(e),this.clientChannel.sendUTF(JSON.stringify({type:"answer",answer:e}))}setClientChannel(e){this.clientChannel=e}}},1964:e=>{e.exports=require("rxjs")},5828:e=>{e.exports=require("uuid")},8519:e=>{e.exports=require("web3")},367:e=>{e.exports=require("websocket")},1904:e=>{e.exports=require("wrtc")},5352:e=>{e.exports=require("ws")},6113:e=>{e.exports=require("crypto")},2254:(e,t,n)=>{n.r(t),n.d(t,{ANALYZE_FOR_ENTRY_COMPONENTS:()=>fr,APP_BOOTSTRAP_LISTENER:()=>Fy,APP_ID:()=>Ty,APP_INITIALIZER:()=>Iy,ApplicationInitStatus:()=>Py,ApplicationModule:()=>fb,ApplicationRef:()=>_g,Attribute:()=>cr,COMPILER_OPTIONS:()=>Ky,CUSTOM_ELEMENTS_SCHEMA:()=>Ti,ChangeDetectionStrategy:()=>Q,ChangeDetectorRef:()=>Pg,Compiler:()=>qy,CompilerFactory:()=>Gy,Component:()=>wy,ComponentFactory:()=>sh,ComponentFactoryResolver:()=>uh,ComponentRef:()=>ih,ContentChild:()=>hr,ContentChildren:()=>pr,DEFAULT_CURRENCY_CODE:()=>Hy,DebugElement:()=>Fg,DebugEventListener:()=>kg,DebugNode:()=>Rg,DefaultIterableDiffer:()=>Gg,Directive:()=>_y,ElementRef:()=>lh,EmbeddedViewRef:()=>jg,ErrorHandler:()=>Pi,EventEmitter:()=>iv,Host:()=>Xr,HostBinding:()=>Oy,HostListener:()=>Dy,INJECTOR:()=>ku,Inject:()=>Jr,InjectFlags:()=>q,Injectable:()=>cl,InjectionToken:()=>lr,Injector:()=>Ju,Input:()=>Cy,IterableDiffers:()=>rb,KeyValueDiffers:()=>ib,LOCALE_ID:()=>$y,MissingTranslationStrategy:()=>Wy,ModuleWithComponentFactories:()=>zy,NO_ERRORS_SCHEMA:()=>Ai,NgModule:()=>Sy,NgModuleFactory:()=>Sh,NgModuleRef:()=>Dh,NgProbeToken:()=>dg,NgZone:()=>Qy,Optional:()=>Zr,Output:()=>xy,PACKAGE_ROOT_URL:()=>Ly,PLATFORM_ID:()=>Ry,PLATFORM_INITIALIZER:()=>Ny,Pipe:()=>My,PlatformRef:()=>bg,Query:()=>dr,QueryList:()=>av,ReflectiveInjector:()=>Il,ReflectiveKey:()=>hl,Renderer2:()=>ph,RendererFactory2:()=>dh,RendererStyleFlags2:()=>zi,ResolvedReflectiveFactory:()=>_l,Sanitizer:()=>hh,SecurityContext:()=>ui,Self:()=>Qr,SimpleChange:()=>tt,SkipSelf:()=>Yr,TRANSLATIONS:()=>Uy,TRANSLATIONS_FORMAT:()=>By,TemplateRef:()=>uv,Testability:()=>og,TestabilityRegistry:()=>ig,Type:()=>_r,VERSION:()=>yh,Version:()=>vh,ViewChild:()=>yr,ViewChildren:()=>vr,ViewContainerRef:()=>dv,ViewEncapsulation:()=>X,ViewRef:()=>Ag,asNativeElements:()=>Ng,assertPlatform:()=>vg,createNgModuleRef:()=>Th,createPlatform:()=>pg,createPlatformFactory:()=>hg,defineInjectable:()=>F,destroyPlatform:()=>yg,enableProdMode:()=>Dg,forwardRef:()=>l,getDebugNode:()=>Wg,getModuleFactory:()=>Sg,getNgModuleById:()=>Eg,getPlatform:()=>gg,inject:()=>qr,isDevMode:()=>Og,platformCore:()=>lb,resolveForwardRef:()=>f,setTestabilityGetter:()=>sg,ɵALLOW_MULTIPLE_PLATFORMS:()=>fg,ɵAPP_ID_RANDOM_PROVIDER:()=>jy,ɵChangeDetectorStatus:()=>Y,ɵComponentFactory:()=>sh,ɵConsole:()=>Vy,ɵDEFAULT_LOCALE_ID:()=>Fd,ɵINJECTOR_SCOPE:()=>Ru,ɵLifecycleHooksFeature:()=>vc,ɵLocaleDataIndex:()=>Nd,ɵNG_COMP_DEF:()=>ce,ɵNG_DIR_DEF:()=>le,ɵNG_ELEMENT_ID:()=>he,ɵNG_INJ_DEF:()=>B,ɵNG_MOD_DEF:()=>de,ɵNG_PIPE_DEF:()=>fe,ɵNG_PROV_DEF:()=>U,ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR:()=>gh,ɵNO_CHANGE:()=>Hs,ɵNgModuleFactory:()=>jh,ɵNoopNgZone:()=>rg,ɵReflectionCapabilities:()=>kr,ɵRender3ComponentFactory:()=>Ch,ɵRender3ComponentRef:()=>xh,ɵRender3NgModuleRef:()=>Ah,ɵRuntimeError:()=>p,ɵViewRef:()=>mh,ɵ_sanitizeHtml:()=>si,ɵ_sanitizeUrl:()=>Lo,ɵallowSanitizationBypassAndThrow:()=>Do,ɵbypassSanitizationTrustHtml:()=>Eo,ɵbypassSanitizationTrustResourceUrl:()=>Ao,ɵbypassSanitizationTrustScript:()=>Po,ɵbypassSanitizationTrustStyle:()=>Io,ɵbypassSanitizationTrustUrl:()=>To,ɵclearResolutionOfComponentResourcesQueue:()=>uo,ɵcompileComponent:()=>ry,ɵcompileDirective:()=>oy,ɵcompileNgModule:()=>Uv,ɵcompileNgModuleDefs:()=>Bv,ɵcompileNgModuleFactory:()=>cg,ɵcompilePipe:()=>by,ɵcreateInjector:()=>Hu,ɵdefaultIterableDiffers:()=>ub,ɵdefaultKeyValueDiffers:()=>cb,ɵdetectChanges:()=>Au,ɵdevModeEqual:()=>Ec,ɵfindLocaleData:()=>Pd,ɵflushModuleScopingQueueAsMuchAsPossible:()=>$v,ɵgetDebugNode:()=>Wg,ɵgetDebugNodeR2:()=>zg,ɵgetDirectives:()=>tc,ɵgetHostElement:()=>rc,ɵgetInjectableDef:()=>V,ɵgetLContext:()=>bi,ɵgetLocaleCurrencyCode:()=>Td,ɵgetLocalePluralCase:()=>Ad,ɵgetSanitizationBypassType:()=>So,ɵglobal:()=>ie,ɵinjectChangeDetectorRef:()=>Tg,ɵisBoundToModule:()=>lg,ɵisDefaultChangeDetectionStrategy:()=>ee,ɵisListLikeIterable:()=>Ic,ɵisObservable:()=>Wl,ɵisPromise:()=>Ul,ɵisSubscribable:()=>Bl,ɵivyEnabled:()=>db,ɵmakeDecorator:()=>ir,ɵmarkDirty:()=>ju,ɵnoSideEffects:()=>Z,ɵpatchComponentDefWithScope:()=>Yv,ɵpublishDefaultGlobalUtils:()=>cc,ɵpublishGlobalUtil:()=>lc,ɵregisterLocaleData:()=>Id,ɵregisterNgModuleType:()=>Ih,ɵrenderComponent:()=>fc,ɵresetCompiledComponents:()=>Jv,ɵresetJitOptions:()=>Fv,ɵresolveComponentResources:()=>oo,ɵsetClassMetadata:()=>Oh,ɵsetCurrentInjector:()=>Ur,ɵsetDocument:()=>pt,ɵsetLocaleId:()=>Ud,ɵstore:()=>rl,ɵstringify:()=>a,ɵtransitiveScopesFor:()=>Xv,ɵunregisterLocaleData:()=>kd,ɵunwrapSafeValue:()=>Oo,ɵwhenRendered:()=>yc,ɵɵCopyDefinitionFeature:()=>Oc,ɵɵFactoryTarget:()=>gr,ɵɵInheritDefinitionFeature:()=>bc,ɵɵNgOnChangesFeature:()=>nt,ɵɵProvidersFeature:()=>oh,ɵɵadvance:()=>Us,ɵɵattribute:()=>Fc,ɵɵattributeInterpolate1:()=>Kc,ɵɵattributeInterpolate2:()=>Gc,ɵɵattributeInterpolate3:()=>Jc,ɵɵattributeInterpolate4:()=>Zc,ɵɵattributeInterpolate5:()=>Qc,ɵɵattributeInterpolate6:()=>Yc,ɵɵattributeInterpolate7:()=>Xc,ɵɵattributeInterpolate8:()=>el,ɵɵattributeInterpolateV:()=>tl,ɵɵclassMap:()=>Sf,ɵɵclassMapInterpolate1:()=>Qf,ɵɵclassMapInterpolate2:()=>Yf,ɵɵclassMapInterpolate3:()=>Xf,ɵɵclassMapInterpolate4:()=>ed,ɵɵclassMapInterpolate5:()=>td,ɵɵclassMapInterpolate6:()=>nd,ɵɵclassMapInterpolate7:()=>rd,ɵɵclassMapInterpolate8:()=>od,ɵɵclassMapInterpolateV:()=>id,ɵɵclassProp:()=>xf,ɵɵcontentQuery:()=>Iv,ɵɵdefineComponent:()=>ye,ɵɵdefineDirective:()=>xe,ɵɵdefineInjectable:()=>R,ɵɵdefineInjector:()=>L,ɵɵdefineNgModule:()=>we,ɵɵdefinePipe:()=>Oe,ɵɵdirectiveInject:()=>Tl,ɵɵdisableBindings:()=>At,ɵɵelement:()=>Fl,ɵɵelementContainer:()=>$l,ɵɵelementContainerEnd:()=>Vl,ɵɵelementContainerStart:()=>Ll,ɵɵelementEnd:()=>Rl,ɵɵelementStart:()=>Nl,ɵɵenableBindings:()=>Tt,ɵɵgetCurrentView:()=>Hl,ɵɵgetInheritedFactory:()=>Xn,ɵɵhostProperty:()=>xd,ɵɵi18n:()=>qp,ɵɵi18nApply:()=>Jp,ɵɵi18nAttributes:()=>Kp,ɵɵi18nEnd:()=>zp,ɵɵi18nExp:()=>Gp,ɵɵi18nPostprocess:()=>Zp,ɵɵi18nStart:()=>Wp,ɵɵinject:()=>Wr,ɵɵinjectAttribute:()=>tr,ɵɵinvalidFactory:()=>Al,ɵɵinvalidFactoryDep:()=>zr,ɵɵlistener:()=>zl,ɵɵloadQuery:()=>Pv,ɵɵnamespaceHTML:()=>vn,ɵɵnamespaceMathML:()=>hn,ɵɵnamespaceSVG:()=>pn,ɵɵnextContext:()=>Zl,ɵɵngDeclareClassMetadata:()=>hb,ɵɵngDeclareComponent:()=>vb,ɵɵngDeclareDirective:()=>pb,ɵɵngDeclareFactory:()=>yb,ɵɵngDeclareInjectable:()=>bb,ɵɵngDeclareInjector:()=>mb,ɵɵngDeclareNgModule:()=>_b,ɵɵngDeclarePipe:()=>wb,ɵɵpipe:()=>Zh,ɵɵpipeBind1:()=>Qh,ɵɵpipeBind2:()=>Yh,ɵɵpipeBind3:()=>Xh,ɵɵpipeBind4:()=>ev,ɵɵpipeBindV:()=>tv,ɵɵprojection:()=>Xl,ɵɵprojectionDef:()=>Yl,ɵɵproperty:()=>jl,ɵɵpropertyInterpolate:()=>ef,ɵɵpropertyInterpolate1:()=>tf,ɵɵpropertyInterpolate2:()=>nf,ɵɵpropertyInterpolate3:()=>rf,ɵɵpropertyInterpolate4:()=>of,ɵɵpropertyInterpolate5:()=>sf,ɵɵpropertyInterpolate6:()=>af,ɵɵpropertyInterpolate7:()=>uf,ɵɵpropertyInterpolate8:()=>cf,ɵɵpropertyInterpolateV:()=>lf,ɵɵpureFunction0:()=>kh,ɵɵpureFunction1:()=>Nh,ɵɵpureFunction2:()=>Rh,ɵɵpureFunction3:()=>Fh,ɵɵpureFunction4:()=>Lh,ɵɵpureFunction5:()=>Vh,ɵɵpureFunction6:()=>$h,ɵɵpureFunction7:()=>Hh,ɵɵpureFunction8:()=>Uh,ɵɵpureFunctionV:()=>Bh,ɵɵqueryRefresh:()=>Sv,ɵɵreference:()=>ol,ɵɵresolveBody:()=>$i,ɵɵresolveDocument:()=>Vi,ɵɵresolveWindow:()=>Li,ɵɵrestoreView:()=>Nt,ɵɵsanitizeHtml:()=>ci,ɵɵsanitizeResourceUrl:()=>di,ɵɵsanitizeScript:()=>pi,ɵɵsanitizeStyle:()=>li,ɵɵsanitizeUrl:()=>fi,ɵɵsanitizeUrlOrResourceUrl:()=>yi,ɵɵsetComponentScope:()=>ge,ɵɵsetNgModuleScope:()=>Me,ɵɵstyleMap:()=>Of,ɵɵstyleMapInterpolate1:()=>sd,ɵɵstyleMapInterpolate2:()=>ad,ɵɵstyleMapInterpolate3:()=>ud,ɵɵstyleMapInterpolate4:()=>cd,ɵɵstyleMapInterpolate5:()=>ld,ɵɵstyleMapInterpolate6:()=>fd,ɵɵstyleMapInterpolate7:()=>dd,ɵɵstyleMapInterpolate8:()=>pd,ɵɵstyleMapInterpolateV:()=>hd,ɵɵstyleProp:()=>Cf,ɵɵstylePropInterpolate1:()=>vd,ɵɵstylePropInterpolate2:()=>yd,ɵɵstylePropInterpolate3:()=>gd,ɵɵstylePropInterpolate4:()=>bd,ɵɵstylePropInterpolate5:()=>md,ɵɵstylePropInterpolate6:()=>_d,ɵɵstylePropInterpolate7:()=>wd,ɵɵstylePropInterpolate8:()=>Md,ɵɵstylePropInterpolateV:()=>Cd,ɵɵsyntheticHostListener:()=>ql,ɵɵsyntheticHostProperty:()=>Od,ɵɵtemplate:()=>nl,ɵɵtemplateRefExtractor:()=>kv,ɵɵtext:()=>$f,ɵɵtextInterpolate:()=>Hf,ɵɵtextInterpolate1:()=>Uf,ɵɵtextInterpolate2:()=>Bf,ɵɵtextInterpolate3:()=>Wf,ɵɵtextInterpolate4:()=>zf,ɵɵtextInterpolate5:()=>qf,ɵɵtextInterpolate6:()=>Kf,ɵɵtextInterpolate7:()=>Gf,ɵɵtextInterpolate8:()=>Jf,ɵɵtextInterpolateV:()=>Zf,ɵɵtrustConstantHtml:()=>hi,ɵɵtrustConstantResourceUrl:()=>vi,ɵɵviewQuery:()=>Ev});var r=n(1964),o=n(4857);function i(e){for(let t in e)if(e[t]===i)return t;throw Error("Could not find renamed property on target object.")}function s(e,t){for(const n in t)t.hasOwnProperty(n)&&!e.hasOwnProperty(n)&&(e[n]=t[n])}function a(e){if("string"==typeof e)return e;if(Array.isArray(e))return"["+e.map(a).join(", ")+"]";if(null==e)return""+e;if(e.overriddenName)return`${e.overriddenName}`;if(e.name)return`${e.name}`;const t=e.toString();if(null==t)return""+t;const n=t.indexOf("\n");return-1===n?t:t.substring(0,n)}function u(e,t){return null==e||""===e?null===t?"":t:null==t||""===t?e:e+" "+t}const c=i({__forward_ref__:i});function l(e){return e.__forward_ref__=l,e.toString=function(){return a(this())},e}function f(e){return d(e)?e():e}function d(e){return"function"==typeof e&&e.hasOwnProperty(c)&&e.__forward_ref__===l}class p extends Error{constructor(e,t){super(h(e,t)),this.code=e}}function h(e,t){const n=`NG0${Math.abs(e)}`;let r=`${n}${t?": "+t:""}`;return ngDevMode&&e<0&&(r=`${r}. Find more at https://angular.io/errors/${n}`),r}function v(e){return"string"==typeof e?e:null==e?"":String(e)}function y(e){return"function"==typeof e?e.name||e.toString():"object"==typeof e&&null!=e&&"function"==typeof e.type?e.type.name||e.type.toString():v(e)}function g(e,t){const n=t?`. Dependency path: ${t.join(" > ")} > ${e}`:"";throw new p(-200,`Circular dependency in DI detected for ${e}${n}`)}function b(){throw new Error("Cannot mix multi providers and regular providers")}function m(e,t){const n=t?` in ${t}`:"";throw new p(-201,`No provider for ${y(e)} found${n}`)}function _(e,t){"number"!=typeof e&&A(t,typeof e,"number","===")}function w(e,t,n){_(e,"Expected a number"),E(e,n,"Expected number to be less than or equal to"),P(e,t,"Expected number to be greater than or equal to")}function M(e,t){"string"!=typeof e&&A(t,null===e?"null":typeof e,"string","===")}function C(e,t,n){e!=t&&A(n,e,t,"==")}function x(e,t,n){e==t&&A(n,e,t,"!=")}function O(e,t,n){e!==t&&A(n,e,t,"===")}function D(e,t,n){e===t&&A(n,e,t,"!==")}function S(e,t,n){e<t||A(n,e,t,"<")}function E(e,t,n){e<=t||A(n,e,t,"<=")}function I(e,t,n){e>t||A(n,e,t,">")}function P(e,t,n){e>=t||A(n,e,t,">=")}function T(e,t){null==e&&A(t,e,null,"!=")}function A(e,t,n,r){throw new Error(`ASSERTION ERROR: ${e}`+(null==r?"":` [Expected=> ${n} ${r} ${t} <=Actual]`))}function j(e){"undefined"!=typeof Node&&e instanceof Node||"object"==typeof e&&null!=e&&"WebWorkerRenderNode"===e.constructor.name||A(`The provided value must be an instance of a DOM Node but got ${a(e)}`)}function k(e,t){T(e,"Array must be defined.");const n=e.length;(t<0||t>=n)&&A(`Index expected to be less than ${n} but got ${t}`)}function N(e,...t){if(-1!==t.indexOf(e))return!0;A(`Expected value to be one of ${JSON.stringify(t)} but was ${JSON.stringify(e)}.`)}function R(e){return{token:e.token,providedIn:e.providedIn||null,factory:e.factory,value:void 0}}const F=R;function L(e){return{providers:e.providers||[],imports:e.imports||[]}}function V(e){return $(e,U)||$(e,W)}function $(e,t){return e.hasOwnProperty(t)?e[t]:null}function H(e){return e&&(e.hasOwnProperty(B)||e.hasOwnProperty(z))?e[B]:null}const U=i({ɵprov:i}),B=i({ɵinj:i}),W=i({ngInjectableDef:i}),z=i({ngInjectorDef:i});var q;let K;function G(e){const t=K;return K=e,t}function J(e,t,n){const r=V(e);return r&&"root"==r.providedIn?void 0===r.value?r.value=r.factory():r.value:n&q.Optional?null:void 0!==t?t:void m(a(e),"Injector")}function Z(e){return{toString:e}.toString()}var Q,Y,X;function ee(e){return null==e||e===Q.Default}!function(e){e[e.Default=0]="Default",e[e.Host=1]="Host",e[e.Self=2]="Self",e[e.SkipSelf=4]="SkipSelf",e[e.Optional=8]="Optional"}(q||(q={})),function(e){e[e.OnPush=0]="OnPush",e[e.Default=1]="Default"}(Q||(Q={})),function(e){e[e.CheckOnce=0]="CheckOnce",e[e.Checked=1]="Checked",e[e.CheckAlways=2]="CheckAlways",e[e.Detached=3]="Detached",e[e.Errored=4]="Errored",e[e.Destroyed=5]="Destroyed"}(Y||(Y={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(X||(X={}));const te="undefined"!=typeof globalThis&&globalThis,ne="undefined"!=typeof window&&window,re="undefined"!=typeof self&&"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&self,oe="undefined"!=typeof global&&global,ie=te||oe||ne||re;function se(){return!("undefined"!=typeof ngDevMode&&!ngDevMode||("object"!=typeof ngDevMode&&function(){const e="undefined"!=typeof location?location.toString():"",t={namedConstructors:-1!=e.indexOf("ngDevMode=namedConstructors"),firstCreatePass:0,tNode:0,tView:0,rendererCreateTextNode:0,rendererSetText:0,rendererCreateElement:0,rendererAddEventListener:0,rendererSetAttribute:0,rendererRemoveAttribute:0,rendererSetProperty:0,rendererSetClassName:0,rendererAddClass:0,rendererRemoveClass:0,rendererSetStyle:0,rendererRemoveStyle:0,rendererDestroy:0,rendererDestroyNode:0,rendererMoveNode:0,rendererRemoveNode:0,rendererAppendChild:0,rendererInsertBefore:0,rendererCreateComment:0},n=-1===e.indexOf("ngDevMode=false");ie.ngDevMode=n&&t}(),"undefined"==typeof ngDevMode||!ngDevMode))}const ae={},ue=[];("undefined"==typeof ngDevMode||ngDevMode)&&se()&&(Object.freeze(ae),Object.freeze(ue));const ce=i({ɵcmp:i}),le=i({ɵdir:i}),fe=i({ɵpipe:i}),de=i({ɵmod:i}),pe=i({ɵfac:i}),he=i({__NG_ELEMENT_ID__:i});let ve=0;function ye(e){return Z((()=>{("undefined"==typeof ngDevMode||ngDevMode)&&se();const t={},n={type:e.type,providersResolver:null,decls:e.decls,vars:e.vars,factory:null,template:e.template||null,consts:e.consts||null,ngContentSelectors:e.ngContentSelectors,hostBindings:e.hostBindings||null,hostVars:e.hostVars||0,hostAttrs:e.hostAttrs||null,contentQueries:e.contentQueries||null,declaredInputs:t,inputs:null,outputs:null,exportAs:e.exportAs||null,onPush:e.changeDetection===Q.OnPush,directiveDefs:null,pipeDefs:null,selectors:e.selectors||ue,viewQuery:e.viewQuery||null,features:e.features||null,data:e.data||{},encapsulation:e.encapsulation||X.Emulated,id:"c",styles:e.styles||ue,_:null,setInput:null,schemas:e.schemas||null,tView:null},r=e.directives,o=e.features,i=e.pipes;return n.id+=ve++,n.inputs=Ce(e.inputs,t),n.outputs=Ce(e.outputs),o&&o.forEach((e=>e(n))),n.directiveDefs=r?()=>("function"==typeof r?r():r).map(be):null,n.pipeDefs=i?()=>("function"==typeof i?i():i).map(me):null,n}))}function ge(e,t,n){const r=e.ɵcmp;r.directiveDefs=()=>t.map(be),r.pipeDefs=()=>n.map(me)}function be(e){const t=De(e)||Se(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is neither 'ComponentType' or 'DirectiveType'.`);return t}function me(e){const t=Ee(e);if(ngDevMode&&!t)throw new Error(`'${e.name}' is not a 'PipeType'.`);return t}const _e={};function we(e){return Z((()=>{const t={type:e.type,bootstrap:e.bootstrap||ue,declarations:e.declarations||ue,imports:e.imports||ue,exports:e.exports||ue,transitiveCompileScopes:null,schemas:e.schemas||null,id:e.id||null};return null!=e.id&&(_e[e.id]=e.type),t}))}function Me(e,t){return Z((()=>{const n=Ie(e,!0);n.declarations=t.declarations||ue,n.imports=t.imports||ue,n.exports=t.exports||ue}))}function Ce(e,t){if(null==e)return ae;const n={};for(const r in e)if(e.hasOwnProperty(r)){let o=e[r],i=o;Array.isArray(o)&&(i=o[1],o=o[0]),n[o]=r,t&&(t[o]=i)}return n}const xe=ye;function Oe(e){return{type:e.type,name:e.name,factory:null,pure:!1!==e.pure,onDestroy:e.type.prototype.ngOnDestroy||null}}function De(e){return e[ce]||null}function Se(e){return e[le]||null}function Ee(e){return e[fe]||null}function Ie(e,t){const n=e[de]||null;if(!n&&!0===t)throw new Error(`Type ${a(e)} does not have 'ɵmod' property.`);return n}const Pe=10,Te=20,Ae=["Root","Component","Embedded"];function je(e){return Array.isArray(e)&&"object"==typeof e[1]}function ke(e){return Array.isArray(e)&&!0===e[1]}function Ne(e){return 0!=(8&e.flags)}function Re(e){return 2==(2&e.flags)}function Fe(e){return 1==(1&e.flags)}function Le(e){return null!==e.template}function Ve(e,t){$e(e,t[1])}function $e(e,t){He(e),e.hasOwnProperty("tView_")&&C(e.tView_,t,"This TNode does not belong to this TView.")}function He(e){T(e,"TNode must be defined"),e&&"object"==typeof e&&e.hasOwnProperty("directiveStylingLast")||A("Not of type TNode, got: "+e)}function Ue(e){T(e,"Expected TIcu to be defined"),"number"!=typeof e.currentCaseLViewIndex&&A("Object is not of TIcu type.")}function Be(e,t="Type passed in is not ComponentType, it does not have 'ɵcmp' property."){De(e)||A(t)}function We(e){T(e,"currentTNode should exist!"),T(e.parent,"currentTNode should have a parent")}function ze(e){T(e,"LContainer must be defined"),C(ke(e),!0,"Expecting LContainer")}function qe(e){e&&C(je(e),!0,"Expecting LView or undefined or null")}function Ke(e){T(e,"LView must be defined"),C(je(e),!0,"Expecting LView")}function Ge(e,t){C(e.firstCreatePass,!0,t||"Should only be called in first create pass.")}function Je(e,t){C(e.firstUpdatePass,!0,t||"Should only be called in first update pass.")}function Ze(e,t){Qe(e[1].expandoStartIndex,e.length,t)}function Qe(e,t,n){e<=n&&n<t||A(`Index out of range (expecting ${e} <= ${n} < ${t})`)}function Ye(e,t){T(e,t||"Component views should always have a parent view (component's host view)")}function Xe(e,t){Ze(e,t),Ze(e,t+8),_(e[t+0],"injectorIndex should point to a bloom filter"),_(e[t+1],"injectorIndex should point to a bloom filter"),_(e[t+2],"injectorIndex should point to a bloom filter"),_(e[t+3],"injectorIndex should point to a bloom filter"),_(e[t+4],"injectorIndex should point to a bloom filter"),_(e[t+5],"injectorIndex should point to a bloom filter"),_(e[t+6],"injectorIndex should point to a bloom filter"),_(e[t+7],"injectorIndex should point to a bloom filter"),_(e[t+8],"injectorIndex should point to parent injector")}function et(e,t){const n=e.hasOwnProperty(pe);if(!n&&!0===t&&ngDevMode)throw new Error(`Type ${a(e)} does not have 'ɵfac' property.`);return n?e[pe]:null}class tt{constructor(e,t,n){this.previousValue=e,this.currentValue=t,this.firstChange=n}isFirstChange(){return this.firstChange}}function nt(){return rt}function rt(e){return e.type.prototype.ngOnChanges&&(e.setInput=it),ot}function ot(){const e=st(this),t=null==e?void 0:e.current;if(t){const n=e.previous;if(n===ae)e.previous=t;else for(let e in t)n[e]=t[e];e.current=null,this.ngOnChanges(t)}}function it(e,t,n,r){const o=st(e)||function(e,t){return e.__ngSimpleChanges__=t}(e,{previous:ae,current:null}),i=o.current||(o.current={}),s=o.previous,a=this.declaredInputs[n],u=s[a];i[a]=new tt(u&&u.currentValue,t,s===ae),e[r]=t}function st(e){return e.__ngSimpleChanges__||null}nt.ngInherit=!0;let at=null;const ut=e=>{at=e},ct=function(e,t,n){null!=at&&at(e,t,n)},lt="svg",ft="math";let dt;function pt(e){dt=e}function ht(){return void 0!==dt?dt:"undefined"!=typeof document?document:void 0}var vt;function yt(e){return!!e.listen}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(vt||(vt={}));const gt={createRenderer:(e,t)=>ht()};function bt(e){for(;Array.isArray(e);)e=e[0];return e}function mt(e,t){return ngDevMode&&k(t,e),ngDevMode&&P(e,Te,"Expected to be past HEADER_OFFSET"),bt(t[e])}function _t(e,t){ngDevMode&&Ve(e,t),ngDevMode&&k(t,e.index);const n=bt(t[e.index]);return ngDevMode&&!yt(t[11])&&j(n),n}function wt(e,t){ngDevMode&&I(t,-1,"wrong index for TNode"),ngDevMode&&S(t,e.data.length,"wrong index for TNode");const n=e.data[t];return ngDevMode&&null!==n&&He(n),n}function Mt(e,t){return ngDevMode&&k(e,t),e[t]}function Ct(e,t){ngDevMode&&k(t,e);const n=t[e];return je(n)?n:n[0]}function xt(e){return 4==(4&e[2])}function Ot(e){return 128==(128&e[2])}function Dt(e,t){return null==t?null:(ngDevMode&&k(e,t),e[t])}function St(e){e[18]=0}function Et(e,t){e[5]+=t;let n=e,r=e[3];for(;null!==r&&(1===t&&1===n[5]||-1===t&&0===n[5]);)r[5]+=t,n=r,r=r[3]}const It={lFrame:sn(null),bindingsEnabled:!0,isInCheckNoChangesMode:!1};function Pt(){return It.bindingsEnabled}function Tt(){It.bindingsEnabled=!0}function At(){It.bindingsEnabled=!1}function jt(){return It.lFrame.lView}function kt(){return It.lFrame.tView}function Nt(e){return It.lFrame.contextLView=e,e[8]}function Rt(){let e=Ft();for(;null!==e&&64===e.type;)e=e.parent;return e}function Ft(){return It.lFrame.currentTNode}function Lt(){const e=It.lFrame,t=e.currentTNode;return e.isParent?t:t.parent}function Vt(e,t){ngDevMode&&e&&$e(e,It.lFrame.tView);const n=It.lFrame;n.currentTNode=e,n.isParent=t}function $t(){return It.lFrame.isParent}function Ht(){It.lFrame.isParent=!1}function Ut(){return It.isInCheckNoChangesMode}function Bt(e){It.isInCheckNoChangesMode=e}function Wt(){const e=It.lFrame;let t=e.bindingRootIndex;return-1===t&&(t=e.bindingRootIndex=e.tView.bindingStartIndex),t}function zt(){return It.lFrame.bindingIndex}function qt(e){return It.lFrame.bindingIndex=e}function Kt(){return It.lFrame.bindingIndex++}function Gt(e){const t=It.lFrame,n=t.bindingIndex;return t.bindingIndex=t.bindingIndex+e,n}function Jt(e){It.lFrame.inI18n=e}function Zt(e,t){const n=It.lFrame;n.bindingIndex=n.bindingRootIndex=e,Qt(t)}function Qt(e){It.lFrame.currentDirectiveIndex=e}function Yt(e){const t=It.lFrame.currentDirectiveIndex;return-1===t?null:e[t]}function Xt(){return It.lFrame.currentQueryIndex}function en(e){It.lFrame.currentQueryIndex=e}function tn(e){const t=e[1];return 2===t.type?(ngDevMode&&T(t.declTNode,"Embedded TNodes should have declaration parents."),t.declTNode):1===t.type?e[6]:null}function nn(e,t,n){if(ngDevMode&&qe(e),n&q.SkipSelf){ngDevMode&&$e(t,e[1]);let r=t,o=e;for(;ngDevMode&&T(r,"Parent TNode should be defined"),r=r.parent,!(null!==r||n&q.Host||(r=tn(o),null===r)||(ngDevMode&&T(o,"Parent LView should be defined"),o=o[15],10&r.type)););if(null===r)return!1;t=r,e=o}ngDevMode&&Ve(t,e);const r=It.lFrame=on();return r.currentTNode=t,r.lView=e,!0}function rn(e){ngDevMode&&x(e[0],e[1],"????"),ngDevMode&&qe(e);const t=on();ngDevMode&&(C(t.isParent,!0,"Expected clean LFrame"),C(t.lView,null,"Expected clean LFrame"),C(t.tView,null,"Expected clean LFrame"),C(t.selectedIndex,-1,"Expected clean LFrame"),C(t.elementDepthCount,0,"Expected clean LFrame"),C(t.currentDirectiveIndex,-1,"Expected clean LFrame"),C(t.currentNamespace,null,"Expected clean LFrame"),C(t.bindingRootIndex,-1,"Expected clean LFrame"),C(t.currentQueryIndex,0,"Expected clean LFrame"));const n=e[1];It.lFrame=t,ngDevMode&&n.firstChild&&$e(n.firstChild,n),t.currentTNode=n.firstChild,t.lView=e,t.tView=n,t.contextLView=e,t.bindingIndex=n.bindingStartIndex,t.inI18n=!1}function on(){const e=It.lFrame,t=null===e?null:e.child;return null===t?sn(e):t}function sn(e){const t={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:e,child:null,inI18n:!1};return null!==e&&(e.child=t),t}function an(){const e=It.lFrame;return It.lFrame=e.parent,e.currentTNode=null,e.lView=null,e}const un=an;function cn(){const e=an();e.isParent=!0,e.tView=null,e.selectedIndex=-1,e.contextLView=null,e.elementDepthCount=0,e.currentDirectiveIndex=-1,e.currentNamespace=null,e.bindingRootIndex=-1,e.bindingIndex=-1,e.currentQueryIndex=0}function ln(){return It.lFrame.selectedIndex}function fn(e){ngDevMode&&-1!==e&&P(e,Te,"Index must be past HEADER_OFFSET (or -1)."),ngDevMode&&S(e,It.lFrame.lView.length,"Can't set index passed end of LView"),It.lFrame.selectedIndex=e}function dn(){const e=It.lFrame;return wt(e.tView,e.selectedIndex)}function pn(){It.lFrame.currentNamespace=lt}function hn(){It.lFrame.currentNamespace=ft}function vn(){It.lFrame.currentNamespace=null}function yn(e,t){ngDevMode&&Ge(e);for(let n=t.directiveStart,r=t.directiveEnd;n<r;n++){const t=e.data[n];ngDevMode&&T(t,"Expecting DirectiveDef");const r=t.type.prototype,{ngAfterContentInit:o,ngAfterContentChecked:i,ngAfterViewInit:s,ngAfterViewChecked:a,ngOnDestroy:u}=r;o&&(e.contentHooks||(e.contentHooks=[])).push(-n,o),i&&((e.contentHooks||(e.contentHooks=[])).push(n,i),(e.contentCheckHooks||(e.contentCheckHooks=[])).push(n,i)),s&&(e.viewHooks||(e.viewHooks=[])).push(-n,s),a&&((e.viewHooks||(e.viewHooks=[])).push(n,a),(e.viewCheckHooks||(e.viewCheckHooks=[])).push(n,a)),null!=u&&(e.destroyHooks||(e.destroyHooks=[])).push(n,u)}}function gn(e,t,n){_n(e,t,3,n)}function bn(e,t,n,r){ngDevMode&&x(n,3,"Init pre-order hooks should not be called more than once"),(3&e[2])===n&&_n(e,t,n,r)}function mn(e,t){ngDevMode&&x(t,3,"Init hooks phase should not be incremented after all init hooks have been run.");let n=e[2];(3&n)===t&&(n&=2047,n+=1,e[2]=n)}function _n(e,t,n,r){ngDevMode&&C(Ut(),!1,"Hooks should never be run when in check no changes mode.");const o=void 0!==r?65535&e[18]:0,i=null!=r?r:-1,s=t.length-1;let a=0;for(let u=o;u<s;u++)if("number"==typeof t[u+1]){if(a=t[u],null!=r&&a>=r)break}else t[u]<0&&(e[18]+=65536),(a<i||-1==i)&&(wn(e,n,t,u),e[18]=(4294901760&e[18])+u+2),u++}function wn(e,t,n,r){const o=n[r]<0,i=n[r+1],s=e[o?-n[r]:n[r]];if(o){if(e[2]>>11<e[18]>>16&&(3&e[2])===t){e[2]+=2048,ct(4,s,i);try{i.call(s)}finally{ct(5,s,i)}}}else{ct(4,s,i);try{i.call(s)}finally{ct(5,s,i)}}}const Mn=-1;class Cn{constructor(e,t,n){this.factory=e,this.resolving=!1,ngDevMode&&T(e,"Factory not specified"),ngDevMode&&C(typeof e,"function","Expected factory function."),this.canSeeViewProviders=t,this.injectImpl=n}}function xn(e){let t="";return 1&e&&(t+="|Text"),2&e&&(t+="|Element"),4&e&&(t+="|Container"),8&e&&(t+="|ElementContainer"),16&e&&(t+="|Projection"),32&e&&(t+="|IcuContainer"),64&e&&(t+="|Placeholder"),t.length>0?t.substring(1):t}function On(e,t,n){T(e,"should be called with a TNode"),0==(e.type&t)&&A(n||`Expected [${xn(t)}] but got ${xn(e.type)}.`)}function Dn(e,t,n){const r=yt(e);let o=0;for(;o<n.length;){const i=n[o];if("number"==typeof i){if(0!==i)break;o++;const s=n[o++],a=n[o++],u=n[o++];ngDevMode&&ngDevMode.rendererSetAttribute++,r?e.setAttribute(t,a,u,s):t.setAttributeNS(s,a,u)}else{const s=i,a=n[++o];ngDevMode&&ngDevMode.rendererSetAttribute++,En(s)?r&&e.setProperty(t,s,a):r?e.setAttribute(t,s,a):t.setAttribute(s,a),o++}}return o}function Sn(e){return 3===e||4===e||6===e}function En(e){return 64===e.charCodeAt(0)}function In(e,t){if(null===t||0===t.length);else if(null===e||0===e.length)e=t.slice();else{let n=-1;for(let r=0;r<t.length;r++){const o=t[r];"number"==typeof o?n=o:0===n||Pn(e,n,o,null,-1===n||2===n?t[++r]:null)}}return e}function Pn(e,t,n,r,o){let i=0,s=e.length;if(-1===t)s=-1;else for(;i<e.length;){const n=e[i++];if("number"==typeof n){if(n===t){s=-1;break}if(n>t){s=i-1;break}}}for(;i<e.length;){const t=e[i];if("number"==typeof t)break;if(t===n){if(null===r)return void(null!==o&&(e[i+1]=o));if(r===e[i+1])return void(e[i+2]=o)}i++,null!==r&&i++,null!==o&&i++}-1!==s&&(e.splice(s,0,t),i=s+1),e.splice(i++,0,n),null!==r&&e.splice(i++,0,r),null!==o&&e.splice(i++,0,o)}function Tn(e){return e!==Mn}function An(e){return ngDevMode&&_(e,"Number expected"),ngDevMode&&x(e,-1,"Not a valid state."),ngDevMode&&I(32767&e,Te,"Parent injector must be pointing past HEADER_OFFSET."),32767&e}function jn(e,t){let n=e>>16,r=t;for(;n>0;)r=r[15],n--;return r}let kn=!0;function Nn(e){const t=kn;return kn=e,t}let Rn=0;function Fn(e,t){const n=Vn(e,t);if(-1!==n)return n;const r=t[1];r.firstCreatePass&&(e.injectorIndex=t.length,Ln(r.data,e),Ln(t,null),Ln(r.blueprint,null));const o=$n(e,t),i=e.injectorIndex;if(Tn(o)){const e=An(o),n=jn(o,t),r=n[1].data;for(let o=0;o<8;o++)t[i+o]=n[e+o]|r[e+o]}return t[i+8]=o,i}function Ln(e,t){e.push(0,0,0,0,0,0,0,0,t)}function Vn(e,t){return-1===e.injectorIndex||e.parent&&e.parent.injectorIndex===e.injectorIndex||null===t[e.injectorIndex+8]?-1:(ngDevMode&&k(t,e.injectorIndex),e.injectorIndex)}function $n(e,t){if(e.parent&&-1!==e.parent.injectorIndex)return e.parent.injectorIndex;let n=0,r=null,o=t;for(;null!==o;){const e=o[1],t=e.type;if(2===t?(ngDevMode&&T(e.declTNode,"Embedded TNodes should have declaration parents."),r=e.declTNode):1===t?r=o[6]:(ngDevMode&&C(e.type,0,"Root type expected"),r=null),null===r)return Mn;if(ngDevMode&&r&&Ve(r,o[15]),n++,o=o[15],-1!==r.injectorIndex)return r.injectorIndex|n<<16}return Mn}function Hn(e,t,n){!function(e,t,n){let r;ngDevMode&&C(t.firstCreatePass,!0,"expected firstCreatePass to be true"),"string"==typeof n?r=n.charCodeAt(0)||0:n.hasOwnProperty(he)&&(r=n[he]),null==r&&(r=n[he]=Rn++);const o=255&r,i=1<<o;t.data[e+(o>>5)]|=i}(e,t,n)}function Un(e,t,n){if(n&q.Optional)return e;m(t,"NodeInjector")}function Bn(e,t,n,r){if(n&q.Optional&&void 0===r&&(r=null),0==(n&(q.Self|q.Host))){const o=e[9],i=G(void 0);try{return o?o.get(t,r,n&q.Optional):J(t,r,n&q.Optional)}finally{G(i)}}return Un(r,t,n)}function Wn(e,t,n,r=q.Default,o){if(null!==e){const i=function(e){if(ngDevMode&&T(e,"token must be defined"),"string"==typeof e)return e.charCodeAt(0)||0;const t=e.hasOwnProperty(he)?e[he]:void 0;return"number"==typeof t?t>=0?255&t:(ngDevMode&&C(t,-1,"Expecting to get Special Injector Id"),qn):t}(n);if("function"==typeof i){if(!nn(t,e,r))return r&q.Host?Un(o,n,r):Bn(t,n,r,o);try{const e=i(r);if(null!=e||r&q.Optional)return e;m(n)}finally{un()}}else if("number"==typeof i){let o=null,s=Vn(e,t),a=Mn,u=r&q.Host?t[16][6]:null;for((-1===s||r&q.SkipSelf)&&(a=-1===s?$n(e,t):t[s+8],a!==Mn&&Qn(r,!1)?(o=t[1],s=An(a),t=jn(a,t)):s=-1);-1!==s;){ngDevMode&&Xe(t,s);const e=t[1];if(ngDevMode&&Ve(e.data[s+8],t),Zn(i,s,e.data)){const e=Kn(s,t,n,o,r,u);if(e!==zn)return e}a=t[s+8],a!==Mn&&Qn(r,t[1].data[s+8]===u)&&Zn(i,s,t)?(o=e,s=An(a),t=jn(a,t)):s=-1}}}return Bn(t,n,r,o)}const zn={};function qn(){return new Yn(Rt(),jt())}function Kn(e,t,n,r,o,i){const s=t[1],a=s.data[e+8],u=Gn(a,s,n,null==r?Re(a)&&kn:r!=s&&0!=(3&a.type),o&q.Host&&i===a);return null!==u?Jn(t,s,u,a):zn}function Gn(e,t,n,r,o){const i=e.providerIndexes,s=t.data,a=1048575&i,u=e.directiveStart,c=e.directiveEnd,l=i>>20,f=o?a+l:c;for(let e=r?a:a+l;e<f;e++){const t=s[e];if(e<u&&n===t||e>=u&&t.type===n)return e}if(o){const e=s[u];if(e&&Le(e)&&e.type===n)return u}return null}function Jn(e,t,n,r){let o=e[n];const i=t.data;if(o instanceof Cn){const a=o;a.resolving&&g(y(i[n]));const u=Nn(a.canSeeViewProviders);a.resolving=!0;const c=a.injectImpl?G(a.injectImpl):null,l=nn(e,r,q.Default);ngDevMode&&C(l,!0,"Because flags do not contain `SkipSelf' we expect this to always succeed.");try{o=e[n]=a.factory(void 0,i,e,r),t.firstCreatePass&&n>=r.directiveStart&&(ngDevMode&&(void 0!==(s=i[n]).type&&null!=s.selectors&&void 0!==s.inputs||A("Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.")),function(e,t,n){ngDevMode&&Ge(n);const{ngOnChanges:r,ngOnInit:o,ngDoCheck:i}=t.type.prototype;if(r){const r=rt(t);(n.preOrderHooks||(n.preOrderHooks=[])).push(e,r),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,r)}o&&(n.preOrderHooks||(n.preOrderHooks=[])).push(0-e,o),i&&((n.preOrderHooks||(n.preOrderHooks=[])).push(e,i),(n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(e,i))}(n,i[n],t))}finally{null!==c&&G(c),Nn(u),a.resolving=!1,un()}}var s;return o}function Zn(e,t,n){const r=1<<e;return!!(n[t+(e>>5)]&r)}function Qn(e,t){return!(e&q.Self||e&q.Host&&t)}class Yn{constructor(e,t){this._tNode=e,this._lView=t}get(e,t,n){return Wn(this._tNode,this._lView,e,n,t)}}function Xn(e){return Z((()=>{const t=e.prototype.constructor,n=t[pe]||er(t),r=Object.prototype;let o=Object.getPrototypeOf(e.prototype).constructor;for(;o&&o!==r;){const e=o[pe]||er(o);if(e&&e!==n)return e;o=Object.getPrototypeOf(o)}return e=>new e}))}function er(e){return d(e)?()=>{const t=er(f(e));return t&&t()}:et(e)}function tr(e){return function(e,t){if(ngDevMode&&On(e,15),ngDevMode&&T(e,"expecting tNode"),"class"===t)return e.classes;if("style"===t)return e.styles;const n=e.attrs;if(n){const e=n.length;let r=0;for(;r<e;){const o=n[r];if(Sn(o))break;if(0===o)r+=2;else if("number"==typeof o)for(r++;r<e&&"string"==typeof n[r];)r++;else{if(o===t)return n[r+1];r+=2}}}return null}(Rt(),e)}const nr="__annotations__",rr="__parameters__",or="__prop__metadata__";function ir(e,t,n,r,o){return Z((()=>{const i=sr(t);function s(...e){if(this instanceof s)return i.call(this,...e),this;const t=new s(...e);return function(n){return o&&o(n,...e),(n.hasOwnProperty(nr)?n[nr]:Object.defineProperty(n,nr,{value:[]})[nr]).push(t),r&&r(n),n}}return n&&(s.prototype=Object.create(n.prototype)),s.prototype.ngMetadataName=e,s.annotationCls=s,s}))}function sr(e){return function(...t){if(e){const n=e(...t);for(const e in n)this[e]=n[e]}}}function ar(e,t,n){return Z((()=>{const r=sr(t);function o(...e){if(this instanceof o)return r.apply(this,e),this;const t=new o(...e);return n.annotation=t,n;function n(e,n,r){const o=e.hasOwnProperty(rr)?e[rr]:Object.defineProperty(e,rr,{value:[]})[rr];for(;o.length<=r;)o.push(null);return(o[r]=o[r]||[]).push(t),e}}return n&&(o.prototype=Object.create(n.prototype)),o.prototype.ngMetadataName=e,o.annotationCls=o,o}))}function ur(e,t,n,r){return Z((()=>{const o=sr(t);function i(...e){if(this instanceof i)return o.apply(this,e),this;const t=new i(...e);return function(n,o){const i=n.constructor,s=i.hasOwnProperty(or)?i[or]:Object.defineProperty(i,or,{value:{}})[or];s[o]=s.hasOwnProperty(o)&&s[o]||[],s[o].unshift(t),r&&r(n,o,...e)}}return n&&(i.prototype=Object.create(n.prototype)),i.prototype.ngMetadataName=e,i.annotationCls=i,i}))}const cr=ar("Attribute",(e=>({attributeName:e,__NG_ELEMENT_ID__:()=>tr(e)})));class lr{constructor(e,t){this._desc=e,this.ngMetadataName="InjectionToken",this.ɵprov=void 0,"number"==typeof t?(("undefined"==typeof ngDevMode||ngDevMode)&&S(t,0,"Only negative numbers are supported here"),this.__NG_ELEMENT_ID__=t):void 0!==t&&(this.ɵprov=R({token:this,providedIn:t.providedIn||"root",factory:t.factory}))}toString(){return`InjectionToken ${this._desc}`}}const fr=new lr("AnalyzeForEntryComponents");class dr{}const pr=ur("ContentChildren",((e,t={})=>Object.assign({selector:e,first:!1,isViewQuery:!1,descendants:!1,emitDistinctChangesOnly:!0},t)),dr),hr=ur("ContentChild",((e,t={})=>Object.assign({selector:e,first:!0,isViewQuery:!1,descendants:!0},t)),dr),vr=ur("ViewChildren",((e,t={})=>Object.assign({selector:e,first:!1,isViewQuery:!0,descendants:!0,emitDistinctChangesOnly:!0},t)),dr),yr=ur("ViewChild",((e,t)=>Object.assign({selector:e,first:!0,isViewQuery:!0,descendants:!0},t)),dr);var gr,br;function mr(e){const t=ie.ng;if(t&&t.ɵcompilerFacade)return t.ɵcompilerFacade;if("undefined"==typeof ngDevMode||ngDevMode){console.error(`JIT compilation failed for ${e.kind}`,e.type);let t=`The ${e.kind} '${e.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.\n\n`;throw 1===e.usage?(t+=`The ${e.kind} is part of a library that has been partially compiled.\n`,t+="However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.\n",t+="\n",t+="Ideally, the library is processed using the Angular Linker to become fully AOT compiled.\n"):t+="JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.\n",t+="Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',\n",t+="or manually provide the compiler with 'import \"@angular/compiler\";' before bootstrapping.",new Error(t)}throw new Error("JIT compiler unavailable")}!function(e){e[e.Directive=0]="Directive",e[e.Component=1]="Component",e[e.Injectable=2]="Injectable",e[e.Pipe=3]="Pipe",e[e.NgModule=4]="NgModule"}(gr||(gr={})),function(e){e[e.Emulated=0]="Emulated",e[e.None=2]="None",e[e.ShadowDom=3]="ShadowDom"}(br||(br={}));const _r=Function;function wr(e){return"function"==typeof e}function Mr(e,t){void 0===t&&(t=e);for(let n=0;n<e.length;n++){let r=e[n];Array.isArray(r)?(t===e&&(t=e.slice(0,n)),Mr(r,t)):t!==e&&t.push(r)}return t}function Cr(e,t){e.forEach((e=>Array.isArray(e)?Cr(e,t):t(e)))}function xr(e,t,n){t>=e.length?e.push(n):e.splice(t,0,n)}function Or(e,t){return t>=e.length-1?e.pop():e.splice(t,1)[0]}function Dr(e,t){const n=[];for(let r=0;r<e;r++)n.push(t);return n}function Sr(e,t,n){let r=Ir(e,t);return r>=0?e[1|r]=n:(r=~r,function(e,t,n,r){ngDevMode&&E(t,e.length,"Can't insert past array end.");let o=e.length;if(o==t)e.push(n,r);else if(1===o)e.push(r,e[0]),e[0]=n;else{for(o--,e.push(e[o-1],e[o]);o>t;){const t=o-2;e[o]=e[t],o--}e[t]=n,e[t+1]=r}}(e,r,t,n)),r}function Er(e,t){const n=Ir(e,t);if(n>=0)return e[1|n]}function Ir(e,t){return function(e,t,n){ngDevMode&&C(Array.isArray(e),!0,"Expecting an array");let r=0,o=e.length>>n;for(;o!==r;){const i=r+(o-r>>1),s=e[i<<n];if(t===s)return i<<n;s>t?o=i:r=i+1}return~(o<<n)}(e,t,1)}const Pr=/^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/,Tr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/,Ar=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/,jr=/^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;class kr{constructor(e){this._reflect=e||ie.Reflect}isReflectionEnabled(){return!0}factory(e){return(...t)=>new e(...t)}_zipTypesAndAnnotations(e,t){let n;n=Dr(void 0===e?t.length:e.length);for(let r=0;r<n.length;r++)void 0===e?n[r]=[]:e[r]&&e[r]!=Object?n[r]=[e[r]]:n[r]=[],t&&null!=t[r]&&(n[r]=n[r].concat(t[r]));return n}_ownParameters(e,t){if(n=e.toString(),Pr.test(n)||jr.test(n)||Tr.test(n)&&!Ar.test(n))return null;var n;if(e.parameters&&e.parameters!==t.parameters)return e.parameters;const r=e.ctorParameters;if(r&&r!==t.ctorParameters){const e="function"==typeof r?r():r,t=e.map((e=>e&&e.type)),n=e.map((e=>e&&Nr(e.decorators)));return this._zipTypesAndAnnotations(t,n)}const o=e.hasOwnProperty(rr)&&e[rr],i=this._reflect&&this._reflect.getOwnMetadata&&this._reflect.getOwnMetadata("design:paramtypes",e);return i||o?this._zipTypesAndAnnotations(i,o):Dr(e.length)}parameters(e){if(!wr(e))return[];const t=Rr(e);let n=this._ownParameters(e,t);return n||t===Object||(n=this.parameters(t)),n||[]}_ownAnnotations(e,t){if(e.annotations&&e.annotations!==t.annotations){let t=e.annotations;return"function"==typeof t&&t.annotations&&(t=t.annotations),t}return e.decorators&&e.decorators!==t.decorators?Nr(e.decorators):e.hasOwnProperty(nr)?e[nr]:null}annotations(e){if(!wr(e))return[];const t=Rr(e),n=this._ownAnnotations(e,t)||[];return(t!==Object?this.annotations(t):[]).concat(n)}_ownPropMetadata(e,t){if(e.propMetadata&&e.propMetadata!==t.propMetadata){let t=e.propMetadata;return"function"==typeof t&&t.propMetadata&&(t=t.propMetadata),t}if(e.propDecorators&&e.propDecorators!==t.propDecorators){const t=e.propDecorators,n={};return Object.keys(t).forEach((e=>{n[e]=Nr(t[e])})),n}return e.hasOwnProperty(or)?e[or]:null}propMetadata(e){if(!wr(e))return{};const t=Rr(e),n={};if(t!==Object){const e=this.propMetadata(t);Object.keys(e).forEach((t=>{n[t]=e[t]}))}const r=this._ownPropMetadata(e,t);return r&&Object.keys(r).forEach((e=>{const t=[];n.hasOwnProperty(e)&&t.push(...n[e]),t.push(...r[e]),n[e]=t})),n}ownPropMetadata(e){return wr(e)&&this._ownPropMetadata(e,Rr(e))||{}}hasLifecycleHook(e,t){return e instanceof _r&&t in e.prototype}guards(e){return{}}getter(e){return new Function("o","return o."+e+";")}setter(e){return new Function("o","v","return o."+e+" = v;")}method(e){return new Function("o","args",`if (!o.${e}) throw new Error('"${e}" is undefined');\n        return o.${e}.apply(o, args);`)}importUri(e){return"object"==typeof e&&e.filePath?e.filePath:`./${a(e)}`}resourceUri(e){return`./${a(e)}`}resolveIdentifier(e,t,n,r){return r}resolveEnum(e,t){return e[t]}}function Nr(e){return e?e.map((e=>new(0,e.type.annotationCls)(...e.args?e.args:[]))):[]}function Rr(e){const t=e.prototype?Object.getPrototypeOf(e.prototype):null;return(t?t.constructor:null)||Object}const Fr={},Lr=/\n/gm,Vr="__source",$r=i({provide:String,useValue:i});let Hr;function Ur(e){const t=Hr;return Hr=e,t}function Br(e,t=q.Default){if(void 0===Hr){const e="undefined"==typeof ngDevMode||ngDevMode?"inject() must be called from an injection context":"";throw new p(203,e)}return null===Hr?J(e,void 0,t):Hr.get(e,t&q.Optional?null:void 0,t)}function Wr(e,t=q.Default){return(K||Br)(f(e),t)}function zr(e){const t=ngDevMode?`This constructor is not compatible with Angular Dependency Injection because its dependency at index ${e} of the parameter list is invalid.\nThis can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.\n\nPlease check that 1) the type for the parameter at index ${e} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`:"invalid";throw new Error(t)}const qr=Wr;function Kr(e){const t=[];for(let n=0;n<e.length;n++){const r=f(e[n]);if(Array.isArray(r)){if(0===r.length){const e="undefined"==typeof ngDevMode||ngDevMode?"Arguments array must have arguments.":"";throw new p(900,e)}let e,n=q.Default;for(let t=0;t<r.length;t++){const o=r[t],i=o.__NG_DI_FLAG__;"number"==typeof i?-1===i?e=o.token:n|=i:e=o}t.push(Wr(e,n))}else t.push(Wr(r))}return t}function Gr(e,t){return e.__NG_DI_FLAG__=t,e.prototype.__NG_DI_FLAG__=t,e}const Jr=Gr(ar("Inject",(e=>({token:e}))),-1),Zr=Gr(ar("Optional"),8),Qr=Gr(ar("Self"),2),Yr=Gr(ar("SkipSelf"),4),Xr=Gr(ar("Host"),1);let eo=null;function to(){return eo=eo||new kr}function no(e){return ro(to().parameters(e))}function ro(e){return e.map((e=>function(e){const t={token:null,attribute:null,host:!1,optional:!1,self:!1,skipSelf:!1};if(Array.isArray(e)&&e.length>0)for(let n=0;n<e.length;n++){const r=e[n];if(void 0===r)continue;const o=Object.getPrototypeOf(r);if(r instanceof Zr||"Optional"===o.ngMetadataName)t.optional=!0;else if(r instanceof Yr||"SkipSelf"===o.ngMetadataName)t.skipSelf=!0;else if(r instanceof Qr||"Self"===o.ngMetadataName)t.self=!0;else if(r instanceof Xr||"Host"===o.ngMetadataName)t.host=!0;else if(r instanceof Jr)t.token=r.token;else if(r instanceof cr){if(void 0===r.attributeName)throw new Error("Attribute name must be defined.");t.attribute=r.attributeName}else t.token=r}else void 0===e||Array.isArray(e)&&0===e.length?t.token=null:t.token=e;return t}(e)))}function oo(e){const t=[],n=new Map;function r(t){let r=n.get(t);if(!r){const o=e(t);n.set(t,r=o.then(co))}return r}return io.forEach(((e,n)=>{const o=[];e.templateUrl&&o.push(r(e.templateUrl).then((t=>{e.template=t})));const i=e.styleUrls,s=e.styles||(e.styles=[]),a=e.styles.length;i&&i.forEach(((t,n)=>{s.push(""),o.push(r(t).then((r=>{s[a+n]=r,i.splice(i.indexOf(t),1),0==i.length&&(e.styleUrls=void 0)})))}));const u=Promise.all(o).then((()=>function(e){so.delete(e)}(n)));t.push(u)})),uo(),Promise.all(t).then((()=>{}))}let io=new Map;const so=new Set;function ao(e){return!!(e.templateUrl&&!e.hasOwnProperty("template")||e.styleUrls&&e.styleUrls.length)}function uo(){const e=io;return io=new Map,e}function co(e){return"string"==typeof e?e:e.text()}let lo,fo;function po(){if(void 0===lo&&(lo=null,ie.trustedTypes))try{lo=ie.trustedTypes.createPolicy("angular",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch(e){}return lo}function ho(e){var t;return(null===(t=po())||void 0===t?void 0:t.createHTML(e))||e}function vo(){if(void 0===fo&&(fo=null,ie.trustedTypes))try{fo=ie.trustedTypes.createPolicy("angular#unsafe-bypass",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e})}catch(e){}return fo}function yo(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createHTML(e))||e}function go(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createScript(e))||e}function bo(e){var t;return(null===(t=vo())||void 0===t?void 0:t.createScriptURL(e))||e}class mo{constructor(e){this.changingThisBreaksApplicationSecurity=e}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see https://g.co/ng/security#xss)`}}class _o extends mo{getTypeName(){return"HTML"}}class wo extends mo{getTypeName(){return"Style"}}class Mo extends mo{getTypeName(){return"Script"}}class Co extends mo{getTypeName(){return"URL"}}class xo extends mo{getTypeName(){return"ResourceURL"}}function Oo(e){return e instanceof mo?e.changingThisBreaksApplicationSecurity:e}function Do(e,t){const n=So(e);if(null!=n&&n!==t){if("ResourceURL"===n&&"URL"===t)return!0;throw new Error(`Required a safe ${t}, got a ${n} (see https://g.co/ng/security#xss)`)}return n===t}function So(e){return e instanceof mo&&e.getTypeName()||null}function Eo(e){return new _o(e)}function Io(e){return new wo(e)}function Po(e){return new Mo(e)}function To(e){return new Co(e)}function Ao(e){return new xo(e)}function jo(e){const t=new No(e);return function(){try{return!!(new window.DOMParser).parseFromString(ho(""),"text/html")}catch(e){return!1}}()?new ko(t):t}class ko{constructor(e){this.inertDocumentHelper=e}getInertBodyElement(e){e="<body><remove></remove>"+e;try{const t=(new window.DOMParser).parseFromString(ho(e),"text/html").body;return null===t?this.inertDocumentHelper.getInertBodyElement(e):(t.removeChild(t.firstChild),t)}catch(e){return null}}}class No{constructor(e){if(this.defaultDoc=e,this.inertDocument=this.defaultDoc.implementation.createHTMLDocument("sanitization-inert"),null==this.inertDocument.body){const e=this.inertDocument.createElement("html");this.inertDocument.appendChild(e);const t=this.inertDocument.createElement("body");e.appendChild(t)}}getInertBodyElement(e){const t=this.inertDocument.createElement("template");if("content"in t)return t.innerHTML=ho(e),t;const n=this.inertDocument.createElement("body");return n.innerHTML=ho(e),this.defaultDoc.documentMode&&this.stripCustomNsAttrs(n),n}stripCustomNsAttrs(e){const t=e.attributes;for(let n=t.length-1;0<n;n--){const r=t.item(n).name;"xmlns:ns1"!==r&&0!==r.indexOf("ns1:")||e.removeAttribute(r)}let n=e.firstChild;for(;n;)n.nodeType===Node.ELEMENT_NODE&&this.stripCustomNsAttrs(n),n=n.nextSibling}}const Ro=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi,Fo=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;function Lo(e){return(e=String(e)).match(Ro)||e.match(Fo)?e:(("undefined"==typeof ngDevMode||ngDevMode)&&console.warn(`WARNING: sanitizing unsafe URL value ${e} (see https://g.co/ng/security#xss)`),"unsafe:"+e)}function Vo(e){return(e=String(e)).split(",").map((e=>Lo(e.trim()))).join(", ")}function $o(e){const t={};for(const n of e.split(","))t[n]=!0;return t}function Ho(...e){const t={};for(const n of e)for(const e in n)n.hasOwnProperty(e)&&(t[e]=!0);return t}const Uo=$o("area,br,col,hr,img,wbr"),Bo=$o("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),Wo=$o("rp,rt"),zo=Ho(Wo,Bo),qo=Ho(Bo,$o("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul")),Ko=Ho(Wo,$o("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video")),Go=Ho(Uo,qo,Ko,zo),Jo=$o("background,cite,href,itemtype,longdesc,poster,src,xlink:href"),Zo=$o("srcset"),Qo=$o("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width"),Yo=$o("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext"),Xo=Ho(Jo,Zo,Qo,Yo),ei=$o("script,style,template");class ti{constructor(){this.sanitizedSomething=!1,this.buf=[]}sanitizeChildren(e){let t=e.firstChild,n=!0;for(;t;)if(t.nodeType===Node.ELEMENT_NODE?n=this.startElement(t):t.nodeType===Node.TEXT_NODE?this.chars(t.nodeValue):this.sanitizedSomething=!0,n&&t.firstChild)t=t.firstChild;else for(;t;){t.nodeType===Node.ELEMENT_NODE&&this.endElement(t);let e=this.checkClobberedElement(t,t.nextSibling);if(e){t=e;break}t=this.checkClobberedElement(t,t.parentNode)}return this.buf.join("")}startElement(e){const t=e.nodeName.toLowerCase();if(!Go.hasOwnProperty(t))return this.sanitizedSomething=!0,!ei.hasOwnProperty(t);this.buf.push("<"),this.buf.push(t);const n=e.attributes;for(let e=0;e<n.length;e++){const t=n.item(e),r=t.name,o=r.toLowerCase();if(!Xo.hasOwnProperty(o)){this.sanitizedSomething=!0;continue}let i=t.value;Jo[o]&&(i=Lo(i)),Zo[o]&&(i=Vo(i)),this.buf.push(" ",r,'="',oi(i),'"')}return this.buf.push(">"),!0}endElement(e){const t=e.nodeName.toLowerCase();Go.hasOwnProperty(t)&&!Uo.hasOwnProperty(t)&&(this.buf.push("</"),this.buf.push(t),this.buf.push(">"))}chars(e){this.buf.push(oi(e))}checkClobberedElement(e,t){if(t&&(e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_CONTAINED_BY)===Node.DOCUMENT_POSITION_CONTAINED_BY)throw new Error(`Failed to sanitize html because the element is clobbered: ${e.outerHTML}`);return t}}const ni=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,ri=/([^\#-~ |!])/g;function oi(e){return e.replace(/&/g,"&amp;").replace(ni,(function(e){return"&#"+(1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536)+";"})).replace(ri,(function(e){return"&#"+e.charCodeAt(0)+";"})).replace(/</g,"&lt;").replace(/>/g,"&gt;")}let ii;function si(e,t){let n=null;try{ii=ii||jo(e);let r=t?String(t):"";n=ii.getInertBodyElement(r);let o=5,i=r;do{if(0===o)throw new Error("Failed to sanitize html because the input is unstable");o--,r=i,i=n.innerHTML,n=ii.getInertBodyElement(r)}while(r!==i);const s=new ti,a=s.sanitizeChildren(ai(n)||n);return("undefined"==typeof ngDevMode||ngDevMode)&&s.sanitizedSomething&&console.warn("WARNING: sanitizing HTML stripped some content, see https://g.co/ng/security#xss"),ho(a)}finally{if(n){const e=ai(n)||n;for(;e.firstChild;)e.removeChild(e.firstChild)}}}function ai(e){return"content"in e&&function(e){return e.nodeType===Node.ELEMENT_NODE&&"TEMPLATE"===e.nodeName}(e)?e.content:null}var ui;function ci(e){const t=gi();return t?yo(t.sanitize(ui.HTML,e)||""):Do(e,"HTML")?yo(Oo(e)):si(ht(),v(e))}function li(e){const t=gi();return t?t.sanitize(ui.STYLE,e)||"":Do(e,"Style")?Oo(e):v(e)}function fi(e){const t=gi();return t?t.sanitize(ui.URL,e)||"":Do(e,"URL")?Oo(e):Lo(v(e))}function di(e){const t=gi();if(t)return bo(t.sanitize(ui.RESOURCE_URL,e)||"");if(Do(e,"ResourceURL"))return bo(Oo(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a resource URL context (see https://g.co/ng/security#xss)":"";throw new p(904,n)}function pi(e){const t=gi();if(t)return go(t.sanitize(ui.SCRIPT,e)||"");if(Do(e,"Script"))return go(Oo(e));const n="undefined"==typeof ngDevMode||ngDevMode?"unsafe value used in a script context":"";throw new p(905,n)}function hi(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted HTML constant: ${e.join("?")}`);return ho(e[0])}function vi(e){if(ngDevMode&&(!Array.isArray(e)||!Array.isArray(e.raw)||1!==e.length))throw new Error(`Unexpected interpolation in trusted URL constant: ${e.join("?")}`);return function(e){var t;return(null===(t=po())||void 0===t?void 0:t.createScriptURL(e))||e}(e[0])}function yi(e,t,n){return function(e,t){return"src"===t&&("embed"===e||"frame"===e||"iframe"===e||"media"===e||"script"===e)||"href"===t&&("base"===e||"link"===e)?di:fi}(t,n)(e)}function gi(){const e=jt();return e&&e[12]}function bi(e){let t=Mi(e);if(t){if(Array.isArray(t)){const r=t;let o,i,s;if((n=e)&&n.constructor&&n.constructor.ɵcmp){if(o=Di(r,e),-1==o)throw new Error("The provided component was not found in the application");i=e}else if(function(e){return e&&e.constructor&&e.constructor.ɵdir}(e)){if(o=function(e,t){let n=e[1].firstChild;for(;n;){const r=n.directiveStart,o=n.directiveEnd;for(let i=r;i<o;i++)if(e[i]===t)return n.index;n=Oi(n)}return-1}(r,e),-1==o)throw new Error("The provided directive was not found in the application");s=Si(o,r,!1)}else if(o=xi(r,e),-1==o)return null;const a=bt(r[o]),u=Mi(a),c=u&&!Array.isArray(u)?u:mi(r,o,a);if(i&&void 0===c.component&&(c.component=i,wi(c.component,c)),s&&void 0===c.directives){c.directives=s;for(let e=0;e<s.length;e++)wi(s[e],c)}wi(c.native,c),t=c}}else{const n=e;ngDevMode&&j(n);let r=n;for(;r=r.parentNode;){const e=Mi(r);if(e){let r;if(r=Array.isArray(e)?e:e.lView,!r)return null;const o=xi(r,n);if(o>=0){const e=bt(r[o]),n=mi(r,o,e);wi(e,n),t=n;break}}}}var n;return t||null}function mi(e,t,n){return{lView:e,nodeIndex:t,native:n,component:void 0,directives:void 0,localRefs:void 0}}function _i(e){let t,n=Mi(e);if(Array.isArray(n)){const r=Di(n,e);t=Ct(r,n);const o=mi(n,r,t[0]);o.component=e,wi(e,o),wi(o.native,o)}else{const e=n;t=Ct(e.nodeIndex,e.lView)}return t}function wi(e,t){ngDevMode&&T(e,"Target expected"),e.__ngContext__=t}function Mi(e){return ngDevMode&&T(e,"Target expected"),e.__ngContext__||null}function Ci(e){const t=Mi(e);return t?Array.isArray(t)?t:t.lView:null}function xi(e,t){const n=e[1];for(let r=Te;r<n.bindingStartIndex;r++)if(bt(e[r])===t)return r;return-1}function Oi(e){if(e.child)return e.child;if(e.next)return e.next;for(;e.parent&&!e.parent.next;)e=e.parent;return e.parent&&e.parent.next}function Di(e,t){const n=e[1].components;if(n)for(let r=0;r<n.length;r++){const o=n[r];if(Ct(o,e)[8]===t)return o}else if(Ct(Te,e)[8]===t)return Te;return-1}function Si(e,t,n){const r=t[1].data[e];let o=r.directiveStart;if(0==o)return ue;const i=r.directiveEnd;return!n&&2&r.flags&&o++,t.slice(o,i)}function Ei(e){return e.ngOriginalError}function Ii(e,...t){e.error(...t)}!function(e){e[e.NONE=0]="NONE",e[e.HTML=1]="HTML",e[e.STYLE=2]="STYLE",e[e.SCRIPT=3]="SCRIPT",e[e.URL=4]="URL",e[e.RESOURCE_URL=5]="RESOURCE_URL"}(ui||(ui={}));class Pi{constructor(){this._console=console}handleError(e){const t=this._findOriginalError(e),n=function(e){return e&&e.ngErrorLogger||Ii}(e);n(this._console,"ERROR",e),t&&n(this._console,"ORIGINAL ERROR",t)}_findOriginalError(e){let t=e&&Ei(e);for(;t&&Ei(t);)t=Ei(t);return t||null}}const Ti={name:"custom-elements"},Ai={name:"no-errors-schema"},ji=/^>|^->|<!--|-->|--!>|<!-$/g,ki=/(<|>)/;function Ni(e){return e.replace(ji,(e=>e.replace(ki,"​$1​")))}const Ri=/([A-Z])/g,Fi=("undefined"!=typeof requestAnimationFrame&&requestAnimationFrame||setTimeout).bind(ie);function Li(e){return e.ownerDocument.defaultView}function Vi(e){return e.ownerDocument}function $i(e){return e.ownerDocument.body}const Hi="�";function Ui(e){return e instanceof Function?e():e}function Bi(e){throw new p(-300,`Multiple components match node with tagname ${e.value}`)}function Wi(e,t,n,r,o){const[i,s,...a]=r.split(Hi);let u=s,c=s;for(let r=0;r<a.length;r++){const i=t+r;u+=`${e[i]}${a[r]}`,c+=`${i===n?o:e[i]}${a[r]}`}return{propName:i,oldValue:u,newValue:c}}var zi;let qi;function Ki(e,t){return qi(e,t)}function Gi(e){ngDevMode&&Ke(e);const t=e[3];return ke(t)?t[3]:t}function Ji(e){const t=function(e){ngDevMode&&T(e,"component");let t=je(e)?e:Ci(e);for(;t&&!(512&t[2]);)t=Gi(t);return ngDevMode&&Ke(t),t}(e);return ngDevMode&&T(t[8],"RootView has no context. Perhaps it is disconnected?"),t[8]}function Zi(e){return Yi(e[13])}function Qi(e){return Yi(e[4])}function Yi(e){for(;null!==e&&!ke(e);)e=e[4];return e}function Xi(e,t,n,r,o){if(null!=r){let i,s=!1;ke(r)?i=r:je(r)&&(s=!0,ngDevMode&&T(r[0],"HOST must be defined for a component LView"),r=r[0]);const a=bt(r);ngDevMode&&!yt(t)&&j(a),0===e&&null!==n?null==o?fs(t,n,a):ls(t,n,a,o||null,!0):1===e&&null!==n?ls(t,n,a,o||null,!0):2===e?Cs(t,a,s):3===e&&(ngDevMode&&ngDevMode.rendererDestroyNode++,t.destroyNode(a)),null!=i&&function(e,t,n,r,o){ngDevMode&&ze(n);const i=n[7];i!==bt(n)&&Xi(t,e,r,i,o);for(let o=Pe;o<n.length;o++){const s=n[o];Os(s[1],s,e,t,r,i)}}(t,e,i,n,o)}}function es(e,t){return ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&ngDevMode.rendererSetText++,yt(e)?e.createText(t):e.createTextNode(t)}function ts(e,t,n){ngDevMode&&ngDevMode.rendererSetText++,yt(e)?e.setValue(t,n):t.textContent=n}function ns(e,t){return ngDevMode&&ngDevMode.rendererCreateComment++,e.createComment(Ni(t))}function rs(e,t,n){if(ngDevMode&&ngDevMode.rendererCreateElement++,yt(e))return e.createElement(t,n);{const r=null!==n?function(e){const t=e.toLowerCase();return t===lt?"http://www.w3.org/2000/svg":t===ft?"http://www.w3.org/1998/MathML/":null}(n):null;return null===r?e.createElement(t):e.createElementNS(r,t)}}function os(e,t){ngDevMode&&ze(e),ngDevMode&&T(e[9],"A projected view should belong to a non-empty projected views collection");const n=e[9],r=n.indexOf(t),o=t[3];ngDevMode&&ze(o),1024&t[2]&&(t[2]&=-1025,Et(o,-1)),n.splice(r,1)}function is(e,t){if(e.length<=Pe)return;const n=Pe+t,r=e[n];if(r){const i=r[17];null!==i&&i!==e&&os(i,r),t>0&&(e[n-1][4]=r[4]);const s=Or(e,Pe+t);Os(r[1],o=r,o[11],2,null,null),o[0]=null,o[6]=null;const a=s[19];null!==a&&a.detachView(s[1]),r[3]=null,r[4]=null,r[2]&=-129}var o;return r}function ss(e,t){if(!(256&t[2])){const n=t[11];yt(n)&&n.destroyNode&&Os(e,t,n,3,null,null),function(e){let t=e[13];if(!t)return as(e[1],e);for(;t;){let n=null;if(je(t))n=t[13];else{ngDevMode&&ze(t);const e=t[10];e&&(n=e)}if(!n){for(;t&&!t[4]&&t!==e;)je(t)&&as(t[1],t),t=t[3];null===t&&(t=e),je(t)&&as(t[1],t),n=t&&t[4]}t=n}}(t)}}function as(e,t){if(!(256&t[2])){t[2]&=-129,t[2]|=256,function(e,t){let n;if(null!=e&&null!=(n=e.destroyHooks))for(let e=0;e<n.length;e+=2){const r=t[n[e]];if(!(r instanceof Cn)){const t=n[e+1];if(Array.isArray(t))for(let e=0;e<t.length;e+=2){const n=r[t[e]],o=t[e+1];ct(4,n,o);try{o.call(n)}finally{ct(5,n,o)}}else{ct(4,r,t);try{t.call(r)}finally{ct(5,r,t)}}}}}(e,t),function(e,t){const n=e.cleanup,r=t[7];let o=-1;if(null!==n)for(let e=0;e<n.length-1;e+=2)if("string"==typeof n[e]){const i=n[e+1],s="function"==typeof i?i(t):bt(t[i]),a=r[o=n[e+2]],u=n[e+3];"boolean"==typeof u?s.removeEventListener(n[e],a,u):u>=0?r[o=u]():r[o=-u].unsubscribe(),e+=2}else{const t=r[o=n[e+1]];n[e].call(t)}if(null!==r){for(let e=o+1;e<r.length;e++){const t=r[e];ngDevMode&&(s="Expecting instance cleanup function.","function"!=typeof(i=t)&&A(s,null===i?"null":typeof i,"function","===")),t()}t[7]=null}var i,s}(e,t),1===t[1].type&&yt(t[11])&&(ngDevMode&&ngDevMode.rendererDestroy++,t[11].destroy());const n=t[17];if(null!==n&&ke(t[3])){n!==t[3]&&os(n,t);const r=t[19];null!==r&&r.detachView(e)}}}function us(e,t,n){return cs(e,t.parent,n)}function cs(e,t,n){let r=t;for(;null!==r&&40&r.type;)r=(t=r).parent;if(null===r)return n[0];if(ngDevMode&&On(r,7),2&r.flags){ngDevMode&&Ve(r,n);const t=e.data[r.directiveStart].encapsulation;if(t===X.None||t===X.Emulated)return null}return _t(r,n)}function ls(e,t,n,r,o){ngDevMode&&ngDevMode.rendererInsertBefore++,yt(e)?e.insertBefore(t,n,r,o):t.insertBefore(n,r,o)}function fs(e,t,n){ngDevMode&&ngDevMode.rendererAppendChild++,ngDevMode&&T(t,"parent node must be defined"),yt(e)?e.appendChild(t,n):t.appendChild(n)}function ds(e,t,n,r,o){null!==r?ls(e,t,n,r,o):fs(e,t,n)}function ps(e,t){return yt(e)?e.parentNode(t):t.parentNode}function hs(e,t,n){return gs(e,t,n)}function vs(e,t,n){return 40&e.type?_t(e,n):null}!function(e){e[e.Important=1]="Important",e[e.DashCase=2]="DashCase"}(zi||(zi={}));let ys,gs=vs;function bs(e,t){gs=e,ys=t}function ms(e,t,n,r){const o=us(e,r,t),i=t[11],s=hs(r.parent||t[6],r,t);if(null!=o)if(Array.isArray(n))for(let e=0;e<n.length;e++)ds(i,o,n[e],s,!1);else ds(i,o,n,s,!1);void 0!==ys&&ys(i,r,t,n,o)}function _s(e,t){if(null!==t){ngDevMode&&On(t,63);const n=t.type;if(3&n)return _t(t,e);if(4&n)return Ms(-1,e[t.index]);if(8&n){const n=t.child;if(null!==n)return _s(e,n);{const n=e[t.index];return ke(n)?Ms(-1,n):bt(n)}}if(32&n)return Ki(t,e)()||bt(e[t.index]);{const n=ws(e,t);if(null!==n){if(Array.isArray(n))return n[0];const t=Gi(e[16]);return ngDevMode&&Ye(t),_s(t,n)}return _s(e,t.next)}}return null}function ws(e,t){if(null!==t){const n=e[16][6],r=t.projection;return ngDevMode&&function(e,t){T(e[16],"Component views should exist."),T(e[16][6].projection,"Components with projection nodes (<ng-content>) must have projection slots defined.")}(e),n.projection[r]}return null}function Ms(e,t){const n=Pe+e+1;if(n<t.length){const e=t[n],r=e[1].firstChild;if(null!==r)return _s(e,r)}return t[7]}function Cs(e,t,n){ngDevMode&&ngDevMode.rendererRemoveNode++;const r=ps(e,t);r&&function(e,t,n,r){yt(e)?e.removeChild(t,n,r):t.removeChild(n)}(e,r,t,n)}function xs(e,t,n,r,o,i,s){for(;null!=n;){ngDevMode&&Ve(n,r),ngDevMode&&On(n,63);const a=r[n.index],u=n.type;if(s&&0===t&&(a&&wi(bt(a),r),n.flags|=4),64!=(64&n.flags))if(8&u)xs(e,t,n.child,r,o,i,!1),Xi(t,e,o,a,i);else if(32&u){const s=Ki(n,r);let u;for(;u=s();)Xi(t,e,o,u,i);Xi(t,e,o,a,i)}else 16&u?Ds(e,t,r,n,o,i):(ngDevMode&&On(n,7),Xi(t,e,o,a,i));n=s?n.projectionNext:n.next}}function Os(e,t,n,r,o,i){xs(n,r,e.firstChild,t,o,i,!1)}function Ds(e,t,n,r,o,i){const s=n[16],a=s[6];ngDevMode&&C(typeof r.projection,"number","expecting projection index");const u=a.projection[r.projection];if(Array.isArray(u))for(let n=0;n<u.length;n++)Xi(t,e,o,u[n],i);else xs(e,t,u,s[3],o,i,!0)}function Ss(e,t,n){ngDevMode&&M(n,"'newValue' should be a string"),yt(e)?e.setAttribute(t,"style",n):t.style.cssText=n,ngDevMode&&ngDevMode.rendererSetStyle++}function Es(e,t,n){ngDevMode&&M(n,"'newValue' should be a string"),yt(e)?""===n?e.removeAttribute(t,"class"):e.setAttribute(t,"class",n):t.className=n,ngDevMode&&ngDevMode.rendererSetClassName++}function Is(e,t,n){ngDevMode&&x(t,"",'can not look for "" string.');let r=e.length;for(;;){const o=e.indexOf(t,n);if(-1===o)return o;if(0===o||e.charCodeAt(o-1)<=32){const n=t.length;if(o+n===r||e.charCodeAt(o+n)<=32)return o}n=o+1}}const Ps="ng-template";function Ts(e,t,n){ngDevMode&&C(t,t.toLowerCase(),"Class name expected to be lowercase.");let r=0;for(;r<e.length;){let o=e[r++];if(n&&"class"===o){if(o=e[r],-1!==Is(o.toLowerCase(),t,0))return!0}else if(1===o){for(;r<e.length&&"string"==typeof(o=e[r++]);)if(o.toLowerCase()===t)return!0;return!1}}return!1}function As(e){return 4===e.type&&e.value!==Ps}function js(e,t,n){return t===(4!==e.type||n?e.value:Ps)}function ks(e,t,n){ngDevMode&&T(t[0],"Selector should have a tag name");let r=4;const o=e.attrs||[],i=function(e){for(let t=0;t<e.length;t++)if(Sn(e[t]))return t;return e.length}(o);let s=!1;for(let a=0;a<t.length;a++){const u=t[a];if("number"!=typeof u){if(!s)if(4&r){if(r=2|1&r,""!==u&&!js(e,u,n)||""===u&&1===t.length){if(Ns(r))return!1;s=!0}}else{const c=8&r?u:t[++a];if(8&r&&null!==e.attrs){if(!Ts(e.attrs,c,n)){if(Ns(r))return!1;s=!0}continue}const l=Rs(8&r?"class":u,o,As(e),n);if(-1===l){if(Ns(r))return!1;s=!0;continue}if(""!==c){let e;l>i?e="":(ngDevMode&&x(o[l],0,"We do not match directives on namespaced attributes"),e=o[l+1].toLowerCase());const t=8&r?e:null;if(t&&-1!==Is(t,c,0)||2&r&&c!==e){if(Ns(r))return!1;s=!0}}}}else{if(!s&&!Ns(r)&&!Ns(u))return!1;if(s&&Ns(u))continue;s=!1,r=u|1&r}}return Ns(r)||s}function Ns(e){return 0==(1&e)}function Rs(e,t,n,r){if(null===t)return-1;let o=0;if(r||!n){let n=!1;for(;o<t.length;){const r=t[o];if(r===e)return o;if(3===r||6===r)n=!0;else{if(1===r||2===r){let e=t[++o];for(;"string"==typeof e;)e=t[++o];continue}if(4===r)break;if(0===r){o+=4;continue}}o+=n?1:2}return-1}return function(e,t){let n=e.indexOf(4);if(n>-1)for(n++;n<e.length;){const r=e[n];if("number"==typeof r)return-1;if(r===t)return n;n++}return-1}(t,e)}function Fs(e,t,n=!1){for(let r=0;r<t.length;r++)if(ks(e,t[r],n))return!0;return!1}function Ls(e,t){e:for(let n=0;n<t.length;n++){const r=t[n];if(e.length===r.length){for(let t=0;t<e.length;t++)if(e[t]!==r[t])continue e;return!0}}return!1}function Vs(e,t){return e?":not("+t.trim()+")":t}function $s(e){let t=e[0],n=1,r=2,o="",i=!1;for(;n<e.length;){let s=e[n];if("string"==typeof s)if(2&r){const t=e[++n];o+="["+s+(t.length>0?'="'+t+'"':"")+"]"}else 8&r?o+="."+s:4&r&&(o+=" "+s);else""===o||Ns(s)||(t+=Vs(i,o),o=""),r=s,i=i||!Ns(r);n++}return""!==o&&(t+=Vs(i,o)),t}const Hs="undefined"==typeof ngDevMode||ngDevMode?{__brand__:"NO_CHANGE"}:{};function Us(e){ngDevMode&&I(e,0,"Can only advance forward"),Bs(kt(),jt(),ln()+e,Ut())}function Bs(e,t,n,r){if(ngDevMode&&function(e,t){const n=e[1];Qe(Te,n.bindingStartIndex,t)}(t,n),!r)if(3==(3&t[2])){const r=e.preOrderCheckHooks;null!==r&&gn(t,r,n)}else{const r=e.preOrderHooks;null!==r&&bn(t,r,0,n)}fn(n)}function Ws(e){if(!ngDevMode)throw new Error("Looks like we are in 'prod mode', but we are creating a named Array type, which is wrong! Check your code");try{return function(...e){if("undefined"==typeof ngDevMode)throw new Error("newTrustedFunctionForDev should never be called in production");if(!ie.trustedTypes)return new Function(...e);const t=`(function anonymous(${e.slice(0,-1).join(",")}\n) { ${e[e.length-1]}\n})`,n=ie.eval((r=t,(null===(o=po())||void 0===o?void 0:o.createScript(r))||r));var r,o;return void 0===n.bind?new Function(...e):(n.toString=()=>t,n.bind(ie))}("Array",`return class ${e} extends Array{}`)(Array)}catch(e){return Array}}function zs(e,t){return ngDevMode&&w(e,0,32767),ngDevMode&&w(t,0,32767),e<<17|t<<2}function qs(e){return ngDevMode&&_(e,"expected number"),e>>17&32767}function Ks(e){return ngDevMode&&_(e,"expected number"),2==(2&e)}function Gs(e){return ngDevMode&&_(e,"expected number"),2|e}function Js(e){return ngDevMode&&_(e,"expected number"),(131068&e)>>2}function Zs(e,t){return ngDevMode&&_(e,"expected number"),ngDevMode&&w(t,0,32767),-131069&e|t<<2}function Qs(e){return ngDevMode&&_(e,"expected number"),1==(1&e)}function Ys(e){return ngDevMode&&_(e,"expected number"),1|e}function Xs(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{value:t,enumerable:!1})}function ea(e,t){if(!ngDevMode)throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");Object.defineProperty(e,"debug",{get:t,enumerable:!1})}let ta,na,ra,oa,ia;class sa extends Array{}class aa extends Array{}class ua extends Array{}function ca(e){if(null==e)return"";const t=e.lastIndexOf("_Template");return"_"+(-1===t?e:e.substr(0,t))}function la(e,t){const n=e.tView_.data,r=[],o=t?e.classBindings:e.styleBindings,i=qs(o),s=Js(o);let a=0!==s,u=a?s:i;for(;0!==u;){const e=n[u],t=n[u+1];r.unshift({key:e,index:u,isTemplate:a,prevDuplicate:Ks(t),nextDuplicate:Qs(t),nextIndex:Js(t),prevIndex:qs(t)}),u===i&&(a=!1),u=qs(t)}return r.push((t?e.residualClasses:e.residualStyles)||null),r}function fa(e,t){for(;e;)t.push(e.template_),e=e.next}class da extends Array{}let pa;class ha extends Array{}class va extends Array{}class ya extends Array{}class ga extends Array{}class ba extends Array{}class ma extends Array{}class _a extends Array{}function wa(e){if(e){const t=e.debug;return T(t,"Object does not have a debug representation."),t}return e}function Ma(e,t=!1){const n=bt(e);if(n)switch(n.nodeType){case Node.TEXT_NODE:return n.textContent;case Node.COMMENT_NODE:return`\x3c!--${n.textContent}--\x3e`;case Node.ELEMENT_NODE:const e=n.outerHTML;if(t)return e;{const t=">"+n.innerHTML+"<";return e.split(t)[0]+">"}}return null}class Ca{constructor(e){this._raw_lView=e}get flags(){const e=this._raw_lView[2];return{__raw__flags__:e,initPhaseState:3&e,creationMode:!!(4&e),firstViewPass:!!(8&e),checkAlways:!!(16&e),dirty:!!(64&e),attached:!!(128&e),destroyed:!!(256&e),isRoot:!!(512&e),indexWithinInitPhase:e>>11}}get parent(){return wa(this._raw_lView[3])}get hostHTML(){return Ma(this._raw_lView[0],!0)}get html(){return(this.nodes||[]).map(xa).join("")}get context(){return this._raw_lView[8]}get nodes(){const e=this._raw_lView;return Da(e[1].firstChild,e)}get template(){return this.tView.template_}get tView(){return this._raw_lView[1]}get cleanup(){return this._raw_lView[7]}get injector(){return this._raw_lView[9]}get rendererFactory(){return this._raw_lView[10]}get renderer(){return this._raw_lView[11]}get sanitizer(){return this._raw_lView[12]}get childHead(){return wa(this._raw_lView[13])}get next(){return wa(this._raw_lView[4])}get childTail(){return wa(this._raw_lView[14])}get declarationView(){return wa(this._raw_lView[15])}get queries(){return this._raw_lView[19]}get tHost(){return this._raw_lView[6]}get decls(){return Oa(this.tView,this._raw_lView,Te,this.tView.bindingStartIndex)}get vars(){return Oa(this.tView,this._raw_lView,this.tView.bindingStartIndex,this.tView.expandoStartIndex)}get expando(){return Oa(this.tView,this._raw_lView,this.tView.expandoStartIndex,this._raw_lView.length)}get childViews(){const e=[];let t=this.childHead;for(;t;)e.push(t),t=t.next;return e}}function xa(e){if("ElementContainer"===e.type)return(e.children||[]).map(xa).join("");if("IcuContainer"===e.type)throw new Error("Not implemented");return Ma(e.native,!0)||""}function Oa(e,t,n,r){let o=[];for(let i=n;i<r;i++)o.push({index:i,t:e.data[i],l:t[i]});return{start:n,end:r,length:r-n,content:o}}function Da(e,t){if(e){const n=[];let r=e;for(;r;)n.push(Sa(r,t)),r=r.next;return n}return[]}function Sa(e,t){const n=bt(t[e.index]),r=[],o=[],i=t[1];for(let n=e.directiveStart;n<e.directiveEnd;n++){const e=i.data[n];r.push(e.type),o.push(t[n])}return{html:Ma(n),type:xn(e.type),tNode:e,native:n,children:Da(e.child,t),factories:r,instances:o,injector:Ea(e,i,t),get injectorResolutionPath(){return e.debugNodeInjectorPath(t)}}}function Ea(e,t,n){const r=[];for(let n=e.providerIndexStart_;n<e.providerIndexEnd_;n++)r.push(t.data[n]);const o=[];for(let n=e.providerIndexEnd_;n<e.directiveEnd;n++)o.push(t.data[n]);return{bloom:Pa(n,e.injectorIndex),cumulativeBloom:Pa(t.data,e.injectorIndex),providers:o,viewProviders:r,parentInjectorIndex:n[e.providerIndexStart_-1]}}function Ia(e,t){const n=e[t];if("number"!=typeof n)return"????????";const r="00000000"+n.toString(2);return r.substring(r.length-8)}function Pa(e,t){return t<0?"NO_NODE_INJECTOR":`${Ia(e,t+7)}_${Ia(e,t+6)}_${Ia(e,t+5)}_${Ia(e,t+4)}_${Ia(e,t+3)}_${Ia(e,t+2)}_${Ia(e,t+1)}_${Ia(e,t+0)}`}class Ta{constructor(e){this._raw_lContainer=e}get hasTransplantedViews(){return this._raw_lContainer[2]}get views(){return this._raw_lContainer.slice(Pe).map(wa)}get parent(){return wa(this._raw_lContainer[3])}get movedViews(){return this._raw_lContainer[9]}get host(){return this._raw_lContainer[0]}get native(){return this._raw_lContainer[7]}get next(){return wa(this._raw_lContainer[4])}}const Aa=Promise.resolve(null);function ja(e,t){const n=e.contentQueries;if(null!==n)for(let r=0;r<n.length;r+=2){const o=n[r],i=n[r+1];if(-1!==i){const n=e.data[i];ngDevMode&&T(n,"DirectiveDef not found."),ngDevMode&&T(n.contentQueries,"contentQueries function should be defined"),en(o),n.contentQueries(2,t[i],i)}}}function ka(e,t,n,r,o,i,s,a,u,c){const l=ngDevMode?function(e){return function(e,t){switch(e){case 0:return void 0===ra&&(ra=new sa),ra;case 1:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===oa&&(oa=new aa),oa;void 0===ta&&(ta=new Map);let e=ta.get(t);return void 0===e&&(e=new(Ws("LComponentView"+ca(t))),ta.set(t,e)),e;case 2:if(!ngDevMode||!ngDevMode.namedConstructors)return void 0===ia&&(ia=new ua),ia;void 0===na&&(na=new Map);let n=na.get(t);return void 0===n&&(n=new(Ws("LEmbeddedView"+ca(t))),na.set(t,n)),n}}(e.type,e.template&&e.template.name).concat(e.blueprint)}(t):t.blueprint.slice();return l[0]=o,l[2]=140|r,St(l),ngDevMode&&t.declTNode&&e&&Ve(t.declTNode,e),l[3]=l[15]=e,l[8]=n,l[10]=s||e&&e[10],ngDevMode&&T(l[10],"RendererFactory is required"),l[11]=a||e&&e[11],ngDevMode&&T(l[11],"Renderer is required"),l[12]=u||e&&e[12]||null,l[9]=c||e&&e[9]||null,l[6]=i,ngDevMode&&C(2!=t.type||null!==e,!0,"Embedded views must have parentLView"),l[16]=2==t.type?e[16]:l,ngDevMode&&function(e){Xs(e,new Ca(e))}(l),l}function Na(e,t,n,r,o){ngDevMode&&0!==t&&P(t,Te,"TNodes can't be in the LView header."),ngDevMode&&function(e){2!==e&&1!==e&&4!==e&&8!==e&&32!==e&&16!==e&&64!==e&&A(`Expected TNodeType to have only a single type selected, but got ${xn(e)}.`)}(n);let i=e.data[t];if(null===i)i=Ra(e,t,n,r,o),It.lFrame.inI18n&&(i.flags|=64);else if(64&i.type){i.type=n,i.value=r,i.attrs=o;const s=Lt();i.injectorIndex=null===s?-1:s.injectorIndex,ngDevMode&&$e(i,e),ngDevMode&&C(t,i.index,"Expecting same index")}return Vt(i,!0),i}function Ra(e,t,n,r,o){const i=Ft(),s=$t(),a=s?i:i&&i.parent,u=e.data[t]=function(e,t,n,r,o,i){ngDevMode&&0!==r&&P(r,Te,"TNodes can't be in the LView header."),ngDevMode&&D(i,void 0,"'undefined' is not valid value for 'attrs'"),ngDevMode&&ngDevMode.tNode++,ngDevMode&&t&&$e(t,e);let s=t?t.injectorIndex:-1;const a=ngDevMode?new class{constructor(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b,m,_,w,M,C,x,O,D,S,E,I,P,T){this.tView_=e,this.type=t,this.index=n,this.insertBeforeIndex=r,this.injectorIndex=o,this.directiveStart=i,this.directiveEnd=s,this.directiveStylingLast=a,this.propertyBindings=u,this.flags=c,this.providerIndexes=l,this.value=f,this.attrs=d,this.mergedAttrs=p,this.localNames=h,this.initialInputs=v,this.inputs=y,this.outputs=g,this.tViews=b,this.next=m,this.projectionNext=_,this.child=w,this.parent=M,this.projection=C,this.styles=x,this.stylesWithoutHost=O,this.residualStyles=D,this.classes=S,this.classesWithoutHost=E,this.residualClasses=I,this.classBindings=P,this.styleBindings=T}debugNodeInjectorPath(e){const t=[];let n=Vn(this,e);if(-1===n){const t=$n(this,e);t!==Mn&&(n=An(t),e=jn(t,e))}for(;-1!==n;){ngDevMode&&Xe(e,n);const r=e[1].data[n+8];t.push(Sa(r,e));const o=e[n+8];o===Mn?n=-1:(n=An(o),e=jn(o,e))}return t}get type_(){return xn(this.type)||`TNodeType.?${this.type}?`}get flags_(){const e=[];return 16&this.flags&&e.push("TNodeFlags.hasClassInput"),8&this.flags&&e.push("TNodeFlags.hasContentQuery"),32&this.flags&&e.push("TNodeFlags.hasStyleInput"),128&this.flags&&e.push("TNodeFlags.hasHostBindings"),2&this.flags&&e.push("TNodeFlags.isComponentHost"),1&this.flags&&e.push("TNodeFlags.isDirectiveHost"),64&this.flags&&e.push("TNodeFlags.isDetached"),4&this.flags&&e.push("TNodeFlags.isProjected"),e.join("|")}get template_(){if(1&this.type)return this.value;const e=[],t="string"==typeof this.value&&this.value||this.type_;if(e.push("<",t),this.flags&&e.push(" ",this.flags_),this.attrs)for(let t=0;t<this.attrs.length;){const n=this.attrs[t++];if("number"==typeof n)break;const r=this.attrs[t++];e.push(" ",n,'="',r,'"')}return e.push(">"),fa(this.child,e),e.push("</",t,">"),e.join("")}get styleBindings_(){return la(this,!1)}get classBindings_(){return la(this,!0)}get providerIndexStart_(){return 1048575&this.providerIndexes}get providerIndexEnd_(){return this.providerIndexStart_+(this.providerIndexes>>>20)}}(e,n,r,null,s,-1,-1,-1,null,0,0,o,i,null,null,void 0,null,null,null,null,null,null,t,null,null,null,void 0,null,null,void 0,0,0):{type:n,index:r,insertBeforeIndex:null,injectorIndex:s,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,value:o,attrs:i,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:t,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0};return ngDevMode&&Object.seal(a),a}(e,a,n,t,r,o);return null===e.firstChild&&(e.firstChild=u),null!==i&&(s?null==i.child&&null!==u.parent&&(i.child=u):null===i.next&&(i.next=u)),u}function Fa(e,t,n,r){if(0===n)return-1;ngDevMode&&(Ge(e),O(e,t[1],"`LView` must be associated with `TView`!"),C(e.data.length,t.length,"Expecting LView to be same size as TView"),C(e.data.length,e.blueprint.length,"Expecting Blueprint to be same size as TView"),Je(e));const o=t.length;for(let o=0;o<n;o++)t.push(r),e.blueprint.push(r),e.data.push(null);return o}function La(e,t,n){ngDevMode&&C(xt(t),!0,"Should be run in creation mode"),rn(t);try{const r=e.viewQuery;null!==r&&Mu(1,r,n);const o=e.template;null!==o&&Ha(e,t,o,1,n),e.firstCreatePass&&(e.firstCreatePass=!1),e.staticContentQueries&&ja(e,t),e.staticViewQueries&&Mu(2,e.viewQuery,n);const i=e.components;null!==i&&function(e,t){for(let n=0;n<t.length;n++)yu(e,t[n])}(t,i)}catch(t){throw e.firstCreatePass&&(e.incompleteFirstPass=!0,e.firstCreatePass=!1),t}finally{t[2]&=-5,cn()}}function Va(e,t,n,r){ngDevMode&&C(xt(t),!1,"Should be run in update mode");const o=t[2];if(256==(256&o))return;rn(t);const i=Ut();try{St(t),qt(e.bindingStartIndex),null!==n&&Ha(e,t,n,2,r);const s=3==(3&o);if(!i)if(s){const n=e.preOrderCheckHooks;null!==n&&gn(t,n,null)}else{const n=e.preOrderHooks;null!==n&&bn(t,n,0,null),mn(t,0)}if(function(e){for(let t=Zi(e);null!==t;t=Qi(t)){if(!t[2])continue;const e=t[9];ngDevMode&&T(e,"Transplanted View flags set but missing MOVED_VIEWS");for(let t=0;t<e.length;t++){const n=e[t],r=n[3];ngDevMode&&ze(r),0==(1024&n[2])&&Et(r,1),n[2]|=1024}}}(t),function(e){for(let t=Zi(e);null!==t;t=Qi(t))for(let e=Pe;e<t.length;e++){const n=t[e],r=n[1];ngDevMode&&T(r,"TView must be allocated"),Ot(n)&&Va(r,n,r.template,n[8])}}(t),null!==e.contentQueries&&ja(e,t),!i)if(s){const n=e.contentCheckHooks;null!==n&&gn(t,n)}else{const n=e.contentHooks;null!==n&&bn(t,n,1),mn(t,1)}!function(e,t){const n=e.hostBindingOpCodes;if(null!==n)try{for(let e=0;e<n.length;e++){const r=n[e];if(r<0)fn(~r);else{const o=r,i=n[++e],s=n[++e];Zt(i,o),s(2,t[o])}}}finally{fn(-1)}}(e,t);const a=e.components;null!==a&&function(e,t){for(let n=0;n<t.length;n++)hu(e,t[n])}(t,a);const u=e.viewQuery;if(null!==u&&Mu(2,u,r),!i)if(s){const n=e.viewCheckHooks;null!==n&&gn(t,n)}else{const n=e.viewHooks;null!==n&&bn(t,n,2),mn(t,2)}!0===e.firstUpdatePass&&(e.firstUpdatePass=!1),i||(t[2]&=-73),1024&t[2]&&(t[2]&=-1025,Et(t[3],-1))}finally{cn()}}function $a(e,t,n,r){const o=t[10],i=!Ut(),s=xt(t);try{i&&!s&&o.begin&&o.begin(),s&&La(e,t,r),Va(e,t,n,r)}finally{i&&!s&&o.end&&o.end()}}function Ha(e,t,n,r,o){const i=ln(),s=2&r;try{fn(-1),s&&t.length>Te&&Bs(e,t,Te,Ut()),ct(s?2:0,o),n(r,o)}finally{fn(i),ct(s?3:1,o)}}function Ua(e,t,n){if(Ne(t)){const r=t.directiveStart,o=t.directiveEnd;for(let t=r;t<o;t++){const r=e.data[t];r.contentQueries&&r.contentQueries(1,n[t],t)}}}function Ba(e,t,n){Pt()&&(function(e,t,n,r){const o=n.directiveStart,i=n.directiveEnd;e.firstCreatePass||Fn(n,t),wi(r,t);const s=n.initialInputs;for(let r=o;r<i;r++){const i=e.data[r],a=Le(i);a&&(ngDevMode&&On(n,3),au(t,n,i));const u=Jn(t,e,r,n);wi(u,t),null!==s&&lu(t,r-o,u,i,n,s),a&&(Ct(n.index,t)[8]=u)}}(e,t,n,_t(n,t)),128==(128&n.flags)&&function(e,t,n){const r=n.directiveStart,o=n.directiveEnd,i=(e.firstCreatePass,n.index),s=It.lFrame.currentDirectiveIndex;try{fn(i);for(let n=r;n<o;n++){const r=e.data[n],o=t[n];Qt(n),null===r.hostBindings&&0===r.hostVars&&null===r.hostAttrs||nu(r,o)}}finally{fn(-1),Qt(s)}}(e,t,n))}function Wa(e,t,n=_t){const r=t.localNames;if(null!==r){let o=t.index+1;for(let i=0;i<r.length;i+=2){const s=r[i+1],a=-1===s?n(t,e):e[s];e[o++]=a}}}function za(e){const t=e.tView;if(null===t||t.incompleteFirstPass){const t=null;return e.tView=qa(1,t,e.template,e.decls,e.vars,e.directiveDefs,e.pipeDefs,e.viewQuery,e.schemas,e.consts)}return t}function qa(e,t,n,r,o,i,s,a,u,c){ngDevMode&&ngDevMode.tView++;const l=Te+r,f=l+o,d=function(e,t){const n=ngDevMode?new ha:[];for(let r=0;r<t;r++)n.push(r<e?null:Hs);return n}(l,f),p="function"==typeof c?c():c,h=d[1]=ngDevMode?new class{constructor(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b,m,_,w,M,C,x,O,D,S,E,I,P,T){this.type=e,this.blueprint=t,this.template=n,this.queries=r,this.viewQuery=o,this.declTNode=i,this.data=s,this.bindingStartIndex=a,this.expandoStartIndex=u,this.hostBindingOpCodes=c,this.firstCreatePass=l,this.firstUpdatePass=f,this.staticViewQueries=d,this.staticContentQueries=p,this.preOrderHooks=h,this.preOrderCheckHooks=v,this.contentHooks=y,this.contentCheckHooks=g,this.viewHooks=b,this.viewCheckHooks=m,this.destroyHooks=_,this.cleanup=w,this.contentQueries=M,this.components=C,this.directiveRegistry=x,this.pipeRegistry=O,this.firstChild=D,this.schemas=S,this.consts=E,this.incompleteFirstPass=I,this._decls=P,this._vars=T}get template_(){const e=[];return fa(this.firstChild,e),e.join("")}get type_(){return Ae[this.type]||`TViewType.?${this.type}?`}}(e,d,n,null,a,t,(v=d,void 0===pa&&(pa=new da),pa.concat(v)).fill(null,l),l,f,null,!0,!0,!1,!1,null,null,null,null,null,null,null,null,null,null,"function"==typeof i?i():i,"function"==typeof s?s():s,null,u,p,!1,r,o):{type:e,blueprint:d,template:n,queries:null,viewQuery:a,declTNode:t,data:d.slice().fill(null,l),bindingStartIndex:l,expandoStartIndex:f,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof i?i():i,pipeRegistry:"function"==typeof s?s():s,firstChild:null,schemas:u,consts:p,incompleteFirstPass:!1};var v;return ngDevMode&&Object.seal(h),h}function Ka(e,t,n){if(yt(e)){const r=n===X.ShadowDom;return e.selectRootElement(t,r)}let r="string"==typeof t?e.querySelector(t):t;return ngDevMode&&function(e,t){if(!e)throw new Error(`Renderer: ${"string"==typeof t?"Host node with selector not found:":"Host node is required:"} [${y(t)}]`)}(r,t),r.textContent="",r}function Ga(e,t,n,r){const o=Ou(t);null===n?(ngDevMode&&Object.freeze(Du(e)),o.push(r)):(o.push(n),e.firstCreatePass&&Du(e).push(r,o.length-1))}function Ja(e,t,n){for(let r in e)if(e.hasOwnProperty(r)){n=null===n?{}:n;const o=e[r];n.hasOwnProperty(r)?n[r].push(t,o):n[r]=[t,o]}return n}function Za(e,t,n,r,o,i,s,a){ngDevMode&&D(o,Hs,"Incoming value should never be NO_CHANGE.");const u=_t(t,n);let c,l=t.inputs;if(!a&&null!=l&&(c=l[r]))Iu(e,n,c,r,o),Re(t)&&function(e,t){ngDevMode&&Ke(e);const n=Ct(t,e);16&n[2]||(n[2]|=64)}(n,t.index),ngDevMode&&function(e,t,n,r,o){if(7&n)for(let i=0;i<r.length;i+=2)Qa(e,t,n,r[i+1],o)}(n,u,t.type,c,o);else if(3&t.type){if(r="class"===(f=r)?"className":"for"===f?"htmlFor":"formaction"===f?"formAction":"innerHtml"===f?"innerHTML":"readonly"===f?"readOnly":"tabindex"===f?"tabIndex":f,ngDevMode){if(function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event property '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...\nIf '${e}' is a directive input, make sure the directive is imported by the current module.`;throw new p(306,t)}}(r),!function(e,t,n,r){return null===e.schemas||(!!(Ya(e,r.value)||n in t||En(n))||("undefined"==typeof Node||null===Node||!(t instanceof Node)))}(e,u,r,t))return void Xa(r,t);ngDevMode.rendererSetProperty++}o=null!=s?s(o,t.value||"",r):o,yt(i)?i.setProperty(u,r,o):En(r)||(u.setProperty?u.setProperty(r,o):u[r]=o)}else 12&t.type&&ngDevMode&&!Ya(e,t.value)&&Xa(r,t);var f}function Qa(e,t,n,r,o){const i=e[11];var s;s=r.replace(/[$@]/g,"_"),r=`ng-reflect-${s.replace(Ri,((...e)=>"-"+e[1].toLowerCase()))}`;const a=function(e){try{return null!=e?e.toString().slice(0,30):e}catch(e){return"[ERROR] Exception while trying to serialize the value"}}(o);if(3&n)null==o?yt(i)?i.removeAttribute(t,r):t.removeAttribute(r):yt(i)?i.setAttribute(t,r,a):t.setAttribute(r,a);else{const e=Ni(`bindings=${JSON.stringify({[r]:a},null,2)}`);yt(i)?i.setValue(t,e):t.textContent=e}}function Ya(e,t){const n=e.schemas;if(null!==n)for(let e=0;e<n.length;e++){const r=n[e];if(r===Ai||r===Ti&&t&&t.indexOf("-")>-1)return!0}return!1}function Xa(e,t){let n=`Can't bind to '${e}' since it isn't a known property of '${t.value}'.`;console.error(h(303,n))}function eu(e,t,n,r){ngDevMode&&Ge(e);let o=!1;if(Pt()){const i=function(e,t,n){ngDevMode&&Ge(e),ngDevMode&&On(n,15);const r=e.directiveRegistry;let o=null;if(r)for(let i=0;i<r.length;i++){const s=r[i];Fs(n,s.selectors,!1)&&(o||(o=ngDevMode?new va:[]),Hn(Fn(n,t),e,s.type),Le(s)?(ngDevMode&&(On(n,2,`"${n.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${a(s.type)} component.`),2&n.flags&&Bi(n)),ru(e,n),o.unshift(s)):o.push(s))}return o}(e,t,n),s=null===r?null:{"":-1};if(null!==i){o=!0,iu(n,e.data.length,i.length);for(let e=0;e<i.length;e++){const t=i[e];t.providersResolver&&t.providersResolver(t)}let r=!1,a=!1,u=Fa(e,t,i.length,null);ngDevMode&&O(u,n.directiveStart,"TNode.directiveStart should point to just allocated space");for(let o=0;o<i.length;o++){const c=i[o];n.mergedAttrs=In(n.mergedAttrs,c.hostAttrs),su(e,n,t,u,c),ou(u,c,s),null!==c.contentQueries&&(n.flags|=8),null===c.hostBindings&&null===c.hostAttrs&&0===c.hostVars||(n.flags|=128);const l=c.type.prototype;!r&&(l.ngOnChanges||l.ngOnInit||l.ngDoCheck)&&((e.preOrderHooks||(e.preOrderHooks=[])).push(n.index),r=!0),a||!l.ngOnChanges&&!l.ngDoCheck||((e.preOrderCheckHooks||(e.preOrderCheckHooks=[])).push(n.index),a=!0),u++}!function(e,t){ngDevMode&&Ge(e);const n=t.directiveStart,r=t.directiveEnd,o=e.data,i=t.attrs,s=ngDevMode?new ba:[];let a=null,u=null;for(let e=n;e<r;e++){const n=o[e],r=n.inputs,c=null===i||As(t)?null:fu(r,i);s.push(c),a=Ja(r,e,a),u=Ja(n.outputs,e,u)}null!==a&&(a.hasOwnProperty("class")&&(t.flags|=16),a.hasOwnProperty("style")&&(t.flags|=32)),t.initialInputs=s,t.inputs=a,t.outputs=u}(e,n)}s&&function(e,t,n){if(t){const r=e.localNames=ngDevMode?new ga:[];for(let e=0;e<t.length;e+=2){const o=n[t[e+1]];if(null==o)throw new p(-301,ngDevMode&&`Export of name '${t[e+1]}' not found!`);r.push(t[e],o)}}}(n,r,s)}return n.mergedAttrs=In(n.mergedAttrs,n.attrs),o}function tu(e,t,n,r,o,i){ngDevMode&&Ge(e);const s=i.hostBindings;if(s){let n=e.hostBindingOpCodes;null===n&&(n=e.hostBindingOpCodes=[]);const i=~t.index;(function(e){let t=e.length;for(;t>0;){const n=e[--t];if("number"==typeof n&&n<0)return n}return 0})(n)!=i&&n.push(i),n.push(r,o,s)}}function nu(e,t){null!==e.hostBindings&&e.hostBindings(1,t)}function ru(e,t){ngDevMode&&Ge(e),t.flags|=2,(e.components||(e.components=ngDevMode?new ya:[])).push(t.index)}function ou(e,t,n){if(n){if(t.exportAs)for(let r=0;r<t.exportAs.length;r++)n[t.exportAs[r]]=e;Le(t)&&(n[""]=e)}}function iu(e,t,n){ngDevMode&&x(n,e.directiveEnd-e.directiveStart,"Reached the max number of directives"),e.flags|=1,e.directiveStart=t,e.directiveEnd=t+n,e.providerIndexes=t}function su(e,t,n,r,o){ngDevMode&&P(r,Te,"Must be in Expando section"),e.data[r]=o;const i=o.factory||(o.factory=et(o.type,!0)),s=new Cn(i,Le(o),null);e.blueprint[r]=s,n[r]=s,tu(e,t,0,r,Fa(e,n,o.hostVars,Hs),o)}function au(e,t,n){const r=_t(t,e),o=za(n),i=e[10],s=gu(e,ka(e,o,null,n.onPush?64:16,r,t,i,i.createRenderer(r,n),null,null));e[t.index]=s}function uu(e,t,n,r,o,i){ngDevMode&&(D(r,Hs,"Incoming value should never be NO_CHANGE."),function(e){if(e.toLowerCase().startsWith("on")){const t=`Binding to event attribute '${e}' is disallowed for security reasons, please use (${e.slice(2)})=...`;throw new p(306,t)}}(n),On(e,2,`Attempted to set attribute \`${n}\` on a container node. Host bindings are not valid on ng-container or ng-template.`));const s=_t(e,t);cu(t[11],s,i,e.value,n,r,o)}function cu(e,t,n,r,o,i,s){if(null==i)ngDevMode&&ngDevMode.rendererRemoveAttribute++,yt(e)?e.removeAttribute(t,o,n):t.removeAttribute(o);else{ngDevMode&&ngDevMode.rendererSetAttribute++;const a=null==s?v(i):s(i,r||"",o);yt(e)?e.setAttribute(t,o,a,n):n?t.setAttributeNS(n,o,a):t.setAttribute(o,a)}}function lu(e,t,n,r,o,i){const s=i[t];if(null!==s){const t=r.setInput;for(let i=0;i<s.length;){const a=s[i++],u=s[i++],c=s[i++];null!==t?r.setInput(n,c,a,u):n[u]=c,ngDevMode&&Qa(e,_t(o,e),o.type,u,c)}}}function fu(e,t){let n=null,r=0;for(;r<t.length;){const o=t[r];if(0!==o)if(5!==o){if("number"==typeof o)break;e.hasOwnProperty(o)&&(null===n&&(n=[]),n.push(o,e[o],t[r+1])),r+=2}else r+=2;else r+=4}return n}const du=class extends Array{};function pu(e,t,n,r){ngDevMode&&Ke(t),ngDevMode&&!yt(t[11])&&j(n);const o=new(ngDevMode?du:Array)(e,!0,!1,t,null,0,r,n,null,null);return ngDevMode&&C(o.length,Pe,"Should allocate correct number of slots for LContainer header."),ngDevMode&&function(e){Xs(e,new Ta(e))}(o),o}function hu(e,t){ngDevMode&&C(xt(e),!1,"Should be run in update mode");const n=Ct(t,e);if(Ot(n)){const e=n[1];80&n[2]?Va(e,n,e.template,n[8]):n[5]>0&&vu(n)}}function vu(e){for(let t=Zi(e);null!==t;t=Qi(t))for(let e=Pe;e<t.length;e++){const n=t[e];if(1024&n[2]){const e=n[1];ngDevMode&&T(e,"TView must be allocated"),Va(e,n,e.template,n[8])}else n[5]>0&&vu(n)}const t=e[1].components;if(null!==t)for(let n=0;n<t.length;n++){const r=Ct(t[n],e);Ot(r)&&r[5]>0&&vu(r)}}function yu(e,t){ngDevMode&&C(xt(e),!0,"Should be run in creation mode");const n=Ct(t,e),r=n[1];!function(e,t){for(let n=t.length;n<e.blueprint.length;n++)t.push(e.blueprint[n])}(r,n),La(r,n,n[8])}function gu(e,t){return e[13]?e[14][4]=t:e[13]=t,e[14]=t,t}function bu(e){for(;e;){e[2]|=64;const t=Gi(e);if(0!=(512&e[2])&&!t)return e;e=t}return null}function mu(e){for(let t=0;t<e.components.length;t++){const n=e.components[t],r=Ci(n),o=r[1];$a(o,r,o.template,n)}}function _u(e,t,n){const r=t[10];r.begin&&r.begin();try{Va(e,t,e.template,n)}catch(e){throw Eu(t,e),e}finally{r.end&&r.end()}}function wu(e){mu(e[8])}function Mu(e,t,n){ngDevMode&&T(t,"View queries function to execute must be defined."),en(0),t(e,n)}function Cu(e,t,n,r,...o){if(null===e[r]&&(null==t.inputs||!t.inputs[n])){(t.propertyBindings||(t.propertyBindings=[])).push(r);let i=n;o.length>0&&(i+=Hi+o.join(Hi)),e[r]=i}}const xu=Aa;function Ou(e){return e[7]||(e[7]=ngDevMode?new ma:[])}function Du(e){return e.cleanup||(e.cleanup=ngDevMode?new _a:[])}function Su(e,t,n){return(null===e||Le(e))&&(n=function(e){for(;Array.isArray(e);){if("object"==typeof e[1])return e;e=e[0]}return null}(n[t.index])),n[11]}function Eu(e,t){const n=e[9],r=n?n.get(Pi,null):null;r&&r.handleError(t)}function Iu(e,t,n,r,o){for(let i=0;i<n.length;){const s=n[i++],a=n[i++],u=t[s];ngDevMode&&k(t,s);const c=e.data[s];null!==c.setInput?c.setInput(u,o,r,a):u[a]=o}}function Pu(e,t,n){ngDevMode&&M(n,"Value should be a string"),ngDevMode&&D(n,Hs,"value should not be NO_CHANGE"),ngDevMode&&k(e,t);const r=mt(t,e);ngDevMode&&T(r,"native element should exist"),ts(e[11],r,n)}function Tu(e,t,n){ngDevMode&&Ge(kt(),"Expecting to be called in first template pass only");let r=n?e.styles:null,o=n?e.classes:null,i=0;if(null!==t)for(let e=0;e<t.length;e++){const n=t[e];"number"==typeof n?i=n:1==i?o=u(o,n):2==i&&(r=u(r,n+": "+t[++e]+";"))}n?e.styles=r:e.stylesWithoutHost=r,n?e.classes=o:e.classesWithoutHost=o}function Au(e){const t=_i(e);_u(t[1],t,e)}function ju(e){ngDevMode&&T(e,"component");const t=bu(_i(e));ngDevMode&&T(t[8],"rootContext should be defined"),function(e,t){if(0===e.flags&&e.clean==Aa){let t;e.flags|=1,e.clean=new Promise((e=>t=e)),e.scheduler((()=>{if(1&e.flags&&(e.flags&=-2,mu(e)),2&e.flags){e.flags&=-3;const t=e.playerHandler;t&&t.flushPlayers()}e.clean=Aa,t(null)}))}}(t[8])}const ku=new lr("INJECTOR",-1);class Nu{get(e,t=Fr){if(t===Fr){const t=new Error(`NullInjectorError: No provider for ${a(e)}!`);throw t.name="NullInjectorError",t}return t}}const Ru=new lr("Set Injector scope."),Fu={},Lu={};let Vu;function $u(){return void 0===Vu&&(Vu=new Nu),Vu}function Hu(e,t=null,n=null,r){const o=Uu(e,t,n,r);return o._resolveInjectorDefTypes(),o}function Uu(e,t=null,n=null,r){return new Bu(e,n,t||$u(),r)}class Bu{constructor(e,t,n,r=null){this.parent=n,this.records=new Map,this.injectorDefTypes=new Set,this.onDestroy=new Set,this._destroyed=!1;const o=[];t&&Cr(t,(n=>this.processProvider(n,e,t))),Cr([e],(e=>this.processInjectorType(e,[],o))),this.records.set(ku,qu(void 0,this));const i=this.records.get(Ru);this.scope=null!=i?i.value:null,this.source=r||("object"==typeof e?null:a(e))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{this.onDestroy.forEach((e=>e.ngOnDestroy()))}finally{this.records.clear(),this.onDestroy.clear(),this.injectorDefTypes.clear()}}get(e,t=Fr,n=q.Default){this.assertNotDestroyed();const r=Ur(this),o=G(void 0);try{if(!(n&q.SkipSelf)){let t=this.records.get(e);if(void 0===t){const n=("function"==typeof(i=e)||"object"==typeof i&&i instanceof lr)&&V(e);t=n&&this.injectableDefInScope(n)?qu(Wu(e),Fu):null,this.records.set(e,t)}if(null!=t)return this.hydrate(e,t)}const s=n&q.Self?$u():this.parent;return t=n&q.Optional&&t===Fr?null:t,s.get(e,t)}catch(t){if("NullInjectorError"===t.name){if((t.ngTempTokenPath=t.ngTempTokenPath||[]).unshift(a(e)),r)throw t;return function(e,t,n,r){const o=e.ngTempTokenPath;throw t[Vr]&&o.unshift(t[Vr]),e.message=function(e,t,n,r=null){e=e&&"\n"===e.charAt(0)&&"ɵ"==e.charAt(1)?e.substr(2):e;let o=a(t);if(Array.isArray(t))o=t.map(a).join(" -> ");else if("object"==typeof t){let e=[];for(let n in t)if(t.hasOwnProperty(n)){let r=t[n];e.push(n+":"+("string"==typeof r?JSON.stringify(r):a(r)))}o=`{${e.join(", ")}}`}return`${n}${r?"("+r+")":""}[${o}]: ${e.replace(Lr,"\n  ")}`}("\n"+e.message,o,n,r),e.ngTokenPath=o,e.ngTempTokenPath=null,e}(t,e,"R3InjectorError",this.source)}throw t}finally{G(o),Ur(r)}var i}_resolveInjectorDefTypes(){this.injectorDefTypes.forEach((e=>this.get(e)))}toString(){const e=[];return this.records.forEach(((t,n)=>e.push(a(n)))),`R3Injector[${e.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new p(205,ngDevMode&&"Injector has already been destroyed.")}processInjectorType(e,t,n){if(!(e=f(e)))return!1;let r=H(e);const o=null==r&&e.ngModule||void 0,i=void 0===o?e:o;ngDevMode&&-1!==t.indexOf(i)&&g(a(i),t.map(a));const s=-1!==n.indexOf(i);if(void 0!==o&&(r=H(o)),null==r)return!1;if(null!=r.imports&&!s){let e;ngDevMode&&t.push(i),n.push(i);try{Cr(r.imports,(r=>{this.processInjectorType(r,t,n)&&(void 0===e&&(e=[]),e.push(r))}))}finally{ngDevMode&&t.pop()}if(void 0!==e)for(let t=0;t<e.length;t++){const{ngModule:n,providers:r}=e[t];Cr(r,(e=>this.processProvider(e,n,r||ue)))}}this.injectorDefTypes.add(i);const u=et(i)||(()=>new i);this.records.set(i,qu(u,Fu));const c=r.providers;if(null!=c&&!s){const t=e;Cr(c,(e=>this.processProvider(e,t,c)))}return void 0!==o&&void 0!==e.providers}processProvider(e,t,n){let r=Gu(e=f(e))?e:f(e&&e.provide);const o=function(e,t,n){return Ku(e)?qu(void 0,e.useValue):qu(zu(e,t,n),Fu)}(e,t,n);if(Gu(e)||!0!==e.multi){const e=this.records.get(r);ngDevMode&&e&&void 0!==e.multi&&b()}else{let t=this.records.get(r);t?ngDevMode&&void 0===t.multi&&b():(t=qu(void 0,Fu,!0),t.factory=()=>Kr(t.multi),this.records.set(r,t)),r=e,t.multi.push(e)}this.records.set(r,o)}hydrate(e,t){var n;return ngDevMode&&t.value===Lu?g(a(e)):t.value===Fu&&(t.value=Lu,t.value=t.factory()),"object"==typeof t.value&&t.value&&null!==(n=t.value)&&"object"==typeof n&&"function"==typeof n.ngOnDestroy&&this.onDestroy.add(t.value),t.value}injectableDefInScope(e){if(!e.providedIn)return!1;const t=f(e.providedIn);return"string"==typeof t?"any"===t||t===this.scope:this.injectorDefTypes.has(t)}}function Wu(e){const t=V(e),n=null!==t?t.factory:et(e);if(null!==n)return n;if(e instanceof lr)throw new p(204,ngDevMode&&`Token ${a(e)} is missing a ɵprov definition.`);if(e instanceof Function)return function(e){const t=e.length;if(t>0){const n=Dr(t,"?");throw new p(204,ngDevMode&&`Can't resolve all parameters for ${a(e)}: (${n.join(", ")}).`)}const n=function(e){const t=e&&(e[U]||e[W]);if(t){const n=function(e){if(e.hasOwnProperty("name"))return e.name;const t=(""+e).match(/^function\s*([^\s(]+)/);return null===t?"":t[1]}(e);return console.warn(`DEPRECATED: DI is instantiating a token "${n}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${n}" class.`),t}return null}(e);return null!==n?()=>n.factory(e):()=>new e}(e);throw new p(204,ngDevMode&&"unreachable")}function zu(e,t,n){let r;if(Gu(e)){const t=f(e);return et(t)||Wu(t)}if(Ku(e))r=()=>f(e.useValue);else if((o=e)&&o.useFactory)r=()=>e.useFactory(...Kr(e.deps||[]));else if(function(e){return!(!e||!e.useExisting)}(e))r=()=>Wr(f(e.useExisting));else{const o=f(e&&(e.useClass||e.provide));if(ngDevMode&&!o&&function(e,t,n){let r="";throw e&&t&&(r=` - only instances of Provider and Type are allowed, got: [${t.map((e=>e==n?"?"+n+"?":"...")).join(", ")}]`),new Error(`Invalid provider for the NgModule '${a(e)}'`+r)}(t,n,e),!function(e){return!!e.deps}(e))return et(o)||Wu(o);r=()=>new o(...Kr(e.deps))}var o;return r}function qu(e,t,n=!1){return{factory:e,value:t,multi:n?[]:void 0}}function Ku(e){return null!==e&&"object"==typeof e&&$r in e}function Gu(e){return"function"==typeof e}class Ju{static create(e,t){var n;if(Array.isArray(e))return Hu({name:""},t,e,"");{const t=null!==(n=e.name)&&void 0!==n?n:"";return Hu({name:t},e.parent,e.providers,t)}}}function Zu(e){sc(e);const t=bi(e);return null===t?null:(void 0===t.component&&(t.component=function(e,t){const n=t[1].data[e];let r=n.directiveStart;return 2&n.flags?t[r]:null}(t.nodeIndex,t.lView)),t.component)}function Qu(e){sc(e);const t=bi(e);return null===t?null:t.lView[8]}function Yu(e){const t=bi(e);if(null===t)return null;let n,r=t.lView;for(ngDevMode&&Ke(r);2===r[1].type&&(n=Gi(r));)r=n;return 512&r[2]?null:r[8]}function Xu(e){return[...Ji(e).components]}function ec(e){const t=bi(e);if(null===t)return Ju.NULL;const n=t.lView[1].data[t.nodeIndex];return new Yn(n,t.lView)}function tc(e){if(e instanceof Text)return[];const t=bi(e);if(null===t)return[];const n=t.lView,r=n[1],o=t.nodeIndex;return(null==r?void 0:r.data[o])?(void 0===t.directives&&(t.directives=Si(o,n,!1)),null===t.directives?[]:[...t.directives]):[]}function nc(e){const{constructor:t}=e;if(!t)throw new Error("Unable to find the instance constructor");const n=De(t);if(n)return{inputs:n.inputs,outputs:n.outputs,encapsulation:n.encapsulation,changeDetection:n.onPush?Q.OnPush:Q.Default};const r=Se(t);return r?{inputs:r.inputs,outputs:r.outputs}:null}function rc(e){return bi(e).native}function oc(e){sc(e);const t=bi(e);if(null===t)return[];const n=t.lView,r=n[1],o=n[7],i=r.cleanup,s=[];if(i&&o)for(let t=0;t<i.length;){const r=i[t++],a=i[t++];if("string"==typeof r){const u=r,c=bt(n[a]),l=o[i[t++]],f=i[t++],d="boolean"==typeof f||f>=0?"dom":"output",p="boolean"==typeof f&&f;e==c&&s.push({element:e,name:u,callback:l,useCapture:p,type:d})}}return s.sort(ic),s}function ic(e,t){return e.name==t.name?0:e.name<t.name?-1:1}function sc(e){if("undefined"!=typeof Element&&!(e instanceof Element))throw new Error("Expecting instance of DOM Element")}function ac(e){ju(e),Xu(e).forEach((e=>Au(e)))}Ju.THROW_IF_NOT_FOUND=Fr,Ju.NULL=new Nu,Ju.ɵprov=R({token:Ju,providedIn:"any",factory:()=>Wr(ku)}),Ju.__NG_ELEMENT_ID__=-1;let uc=!1;function cc(){uc||(uc=!0,lc("ɵsetProfiler",ut),lc("getDirectiveMetadata",nc),lc("getComponent",Zu),lc("getContext",Qu),lc("getListeners",oc),lc("getOwningComponent",Yu),lc("getHostElement",rc),lc("getInjector",ec),lc("getRootComponents",Xu),lc("getDirectives",tc),lc("applyChanges",ac))}function lc(e,t){if("undefined"==typeof COMPILED||!COMPILED){const n=ie;if(ngDevMode&&T(t,"function not defined"),n){let r=n.ng;r||(r=n.ng={}),r[e]=t}}}function fc(e,t={}){ngDevMode&&cc(),ngDevMode&&Be(e);const n=t.rendererFactory||gt,r=t.sanitizer||null,o=De(e);o.type!=e&&(o.type=e);const i=o.selectors[0][0],s=Ka(n.createRenderer(null,null),t.host||i,o.encapsulation),a=o.onPush?576:528,u=hc(t.scheduler,t.playerHandler),c=n.createRenderer(s,o),l=qa(0,null,null,1,0,null,null,null,null,null),f=ka(null,l,u,a,null,null,n,c,null,t.injector||null);let d;rn(f);try{n.begin&&n.begin(),d=pc(dc(s,o,f,n,c,r),o,f,u,t.hostFeatures||null),La(l,f,null),Va(l,f,null,null)}finally{cn(),n.end&&n.end()}return d}function dc(e,t,n,r,o,i){const s=n[1];ngDevMode&&k(n,20),n[20]=e;const a=Na(s,20,2,"#host",null),u=a.mergedAttrs=t.hostAttrs;null!==u&&(Tu(a,u,!0),null!==e&&(Dn(o,e,u),null!==a.classes&&Es(o,e,a.classes),null!==a.styles&&Ss(o,e,a.styles)));const c=r.createRenderer(e,t),l=ka(n,za(t),null,t.onPush?64:16,n[20],a,r,c,i||null,null);return s.firstCreatePass&&(Hn(Fn(a,n),s,t.type),ru(s,a),iu(a,n.length,1)),gu(n,l),n[20]=l}function pc(e,t,n,r,o){const i=n[1],s=function(e,t,n){const r=Rt();if(e.firstCreatePass){n.providersResolver&&n.providersResolver(n);const o=Fa(e,t,1,null);ngDevMode&&C(o,r.directiveStart,"Because this is a root component the allocated expando should match the TNode component."),su(e,r,t,o,n)}const o=Jn(t,e,r.directiveStart,r);wi(o,t);const i=_t(r,t);return i&&wi(i,t),o}(i,n,t);if(r.components.push(s),e[8]=s,o&&o.forEach((e=>e(s,t))),t.contentQueries){const e=Rt();ngDevMode&&T(e,"TNode expected"),t.contentQueries(1,s,e.directiveStart)}const a=Rt();return ngDevMode&&T(a,"tNode should have been already created"),!i.firstCreatePass||null===t.hostBindings&&null===t.hostAttrs||(fn(a.index),tu(n[1],a,0,a.directiveStart,a.directiveEnd,t),nu(t,s)),s}function hc(e,t){return{components:[],scheduler:e||Fi,clean:xu,playerHandler:t||null,flags:0}}function vc(e,t){const n=Ci(e);ngDevMode&&T(n,"LView is required");const r=n[1],o=Rt();ngDevMode&&T(o,"TNode is required"),yn(r,o)}function yc(e){return Ji(e).clean}function gc(e){return Object.getPrototypeOf(e.prototype).constructor}function bc(e){let t=gc(e.type),n=!0;const r=[e];for(;t;){let o;if(Le(e))o=t.ɵcmp||t.ɵdir;else{if(t.ɵcmp){const e="undefined"==typeof ngDevMode||ngDevMode?"Directives cannot inherit Components":"";throw new p(903,e)}o=t.ɵdir}if(o){if(n){r.push(o);const t=e;t.inputs=mc(e.inputs),t.declaredInputs=mc(e.declaredInputs),t.outputs=mc(e.outputs);const n=o.hostBindings;n&&Mc(e,n);const i=o.viewQuery,a=o.contentQueries;if(i&&_c(e,i),a&&wc(e,a),s(e.inputs,o.inputs),s(e.declaredInputs,o.declaredInputs),s(e.outputs,o.outputs),Le(o)&&o.data.animation){const t=e.data;t.animation=(t.animation||[]).concat(o.data.animation)}}const t=o.features;if(t)for(let r=0;r<t.length;r++){const o=t[r];o&&o.ngInherit&&o(e),o===bc&&(n=!1)}}t=Object.getPrototypeOf(t)}!function(e){let t=0,n=null;for(let r=e.length-1;r>=0;r--){const o=e[r];o.hostVars=t+=o.hostVars,o.hostAttrs=In(o.hostAttrs,n=In(n,o.hostAttrs))}}(r)}function mc(e){return e===ae?{}:e===ue?[]:e}function _c(e,t){const n=e.viewQuery;e.viewQuery=n?(e,r)=>{t(e,r),n(e,r)}:t}function wc(e,t){const n=e.contentQueries;e.contentQueries=n?(e,r,o)=>{t(e,r,o),n(e,r,o)}:t}function Mc(e,t){const n=e.hostBindings;e.hostBindings=n?(e,r)=>{t(e,r),n(e,r)}:t}const Cc=["providersResolver"],xc=["template","decls","consts","vars","onPush","ngContentSelectors","styles","encapsulation","schemas"];function Oc(e){let t,n=gc(e.type);t=Le(e)?n.ɵcmp:n.ɵdir;const r=e;for(const e of Cc)r[e]=t[e];if(Le(t))for(const e of xc)r[e]=t[e]}let Dc=null;function Sc(){if(!Dc){const e=ie.Symbol;if(e&&e.iterator)Dc=e.iterator;else{const e=Object.getOwnPropertyNames(Map.prototype);for(let t=0;t<e.length;++t){const n=e[t];"entries"!==n&&"size"!==n&&Map.prototype[n]===Map.prototype.entries&&(Dc=n)}}}return Dc}function Ec(e,t){const n=Ic(e),r=Ic(t);if(n&&r)return function(e,t,n){const r=e[Sc()](),o=t[Sc()]();for(;;){const e=r.next(),t=o.next();if(e.done&&t.done)return!0;if(e.done||t.done)return!1;if(!n(e.value,t.value))return!1}}(e,t,Ec);{const o=e&&("object"==typeof e||"function"==typeof e),i=t&&("object"==typeof t||"function"==typeof t);return!(n||!o||r||!i)||Object.is(e,t)}}function Ic(e){return!!Pc(e)&&(Array.isArray(e)||!(e instanceof Map)&&Sc()in e)}function Pc(e){return null!==e&&("function"==typeof e||"object"==typeof e)}function Tc(e,t,n){return e[t]=n}function Ac(e,t){return ngDevMode&&k(e,t),ngDevMode&&D(e[t],Hs,"Stored value should never be NO_CHANGE."),e[t]}function jc(e,t,n){ngDevMode&&D(n,Hs,"Incoming value should never be NO_CHANGE."),ngDevMode&&S(t,e.length,"Slot should have been initialized to NO_CHANGE");const r=e[t];if(Object.is(r,n))return!1;if(ngDevMode&&Ut()){const o=r!==Hs?r:void 0;if(!Ec(o,n)){const i=function(e,t,n,r){const o=e[1].data,i=o[t];if("string"==typeof i)return i.indexOf(Hi)>-1?Wi(e,t,t,i,r):{propName:i,oldValue:n,newValue:r};if(null===i){let n=t-1;for(;"string"!=typeof o[n]&&null===o[n+1];)n--;const i=o[n];if("string"==typeof i){const o=i.match(new RegExp(Hi,"g"));if(o&&o.length-1>t-n)return Wi(e,n,t,i,r)}}return{propName:void 0,oldValue:n,newValue:r}}(e,t,o,n);!function(e,t,n,r){let o=`ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${r?` for '${r}'`:""}: '${t}'. Current value: '${n}'.`;throw e&&(o+=" It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?"),new p(-100,o)}(r===Hs,i.oldValue,i.newValue,i.propName)}return!1}return e[t]=n,!0}function kc(e,t,n,r){const o=jc(e,t,n);return jc(e,t+1,r)||o}function Nc(e,t,n,r,o){const i=kc(e,t,n,r);return jc(e,t+2,o)||i}function Rc(e,t,n,r,o,i){const s=kc(e,t,n,r);return kc(e,t+2,o,i)||s}function Fc(e,t,n,r){const o=jt(),i=Kt();if(jc(o,i,t)){const s=kt(),a=dn();uu(a,o,e,t,n,r),ngDevMode&&Cu(s.data,a,"attr."+e,i)}return Fc}function Lc(e,t){ngDevMode&&S(2,t.length,"should have at least 3 values"),ngDevMode&&C(t.length%2,1,"should have an odd number of values");let n=!1,r=zt();for(let o=1;o<t.length;o+=2)n=jc(e,r++,t[o])||n;if(qt(r),!n)return Hs;let o=t[0];for(let e=1;e<t.length;e+=2)o+=v(t[e])+t[e+1];return o}function Vc(e,t,n,r){return jc(e,Kt(),n)?t+v(n)+r:Hs}function $c(e,t,n,r,o,i){const s=kc(e,zt(),n,o);return Gt(2),s?t+v(n)+r+v(o)+i:Hs}function Hc(e,t,n,r,o,i,s,a){const u=Nc(e,zt(),n,o,s);return Gt(3),u?t+v(n)+r+v(o)+i+v(s)+a:Hs}function Uc(e,t,n,r,o,i,s,a,u,c){const l=Rc(e,zt(),n,o,s,u);return Gt(4),l?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c:Hs}function Bc(e,t,n,r,o,i,s,a,u,c,l,f){const d=zt();let p=Rc(e,d,n,o,s,u);return p=jc(e,d+4,l)||p,Gt(5),p?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c+v(l)+f:Hs}function Wc(e,t,n,r,o,i,s,a,u,c,l,f,d,p){const h=zt();let y=Rc(e,h,n,o,s,u);return y=kc(e,h+4,l,d)||y,Gt(6),y?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c+v(l)+f+v(d)+p:Hs}function zc(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,y){const g=zt();let b=Rc(e,g,n,o,s,u);return b=Nc(e,g+4,l,d,h)||b,Gt(7),b?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c+v(l)+f+v(d)+p+v(h)+y:Hs}function qc(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,y,g,b){const m=zt();let _=Rc(e,m,n,o,s,u);return _=Rc(e,m+4,l,d,h,g)||_,Gt(8),_?t+v(n)+r+v(o)+i+v(s)+a+v(u)+c+v(l)+f+v(d)+p+v(h)+y+v(g)+b:Hs}function Kc(e,t,n,r,o,i){const s=jt(),a=Vc(s,t,n,r);if(a!==Hs){const n=dn();uu(n,s,e,a,o,i),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-1,t,r)}return Kc}function Gc(e,t,n,r,o,i,s,a){const u=jt(),c=$c(u,t,n,r,o,i);if(c!==Hs){const n=dn();uu(n,u,e,c,s,a),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-2,t,r,i)}return Gc}function Jc(e,t,n,r,o,i,s,a,u,c){const l=jt(),f=Hc(l,t,n,r,o,i,s,a);if(f!==Hs){const n=dn();uu(n,l,e,f,u,c),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-3,t,r,i,a)}return Jc}function Zc(e,t,n,r,o,i,s,a,u,c,l,f){const d=jt(),p=Uc(d,t,n,r,o,i,s,a,u,c);if(p!==Hs){const n=dn();uu(n,d,e,p,l,f),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-4,t,r,i,a,c)}return Zc}function Qc(e,t,n,r,o,i,s,a,u,c,l,f,d,p){const h=jt(),v=Bc(h,t,n,r,o,i,s,a,u,c,l,f);if(v!==Hs){const n=dn();uu(n,h,e,v,d,p),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-5,t,r,i,a,c,f)}return Qc}function Yc(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v){const y=jt(),g=Wc(y,t,n,r,o,i,s,a,u,c,l,f,d,p);if(g!==Hs){const n=dn();uu(n,y,e,g,h,v),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-6,t,r,i,a,c,f,p)}return Yc}function Xc(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g){const b=jt(),m=zc(b,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v);if(m!==Hs){const n=dn();uu(n,b,e,m,y,g),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-7,t,r,i,a,c,f,p,v)}return Xc}function el(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b,m){const _=jt(),w=qc(_,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g);if(w!==Hs){const n=dn();uu(n,_,e,w,b,m),ngDevMode&&Cu(kt().data,n,"attr."+e,zt()-8,t,r,i,a,c,f,p,v,g)}return el}function tl(e,t,n,r){const o=jt(),i=Lc(o,t);if(i!==Hs){const s=dn();if(uu(s,o,e,i,n,r),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Cu(kt().data,s,"attr."+e,zt()-n.length+1,...n)}}return tl}function nl(e,t,n,r,o,i,s,a){const u=jt(),c=kt(),l=e+Te,f=c.firstCreatePass?function(e,t,n,r,o,i,s,a,u){ngDevMode&&Ge(t),ngDevMode&&ngDevMode.firstCreatePass++;const c=t.consts,l=Na(t,e,4,s||null,Dt(c,a));eu(t,n,l,Dt(c,u)),yn(t,l);const f=l.tViews=qa(2,l,r,o,i,t.directiveRegistry,t.pipeRegistry,null,t.schemas,c);return null!==t.queries&&(t.queries.template(t,l),f.queries=t.queries.embeddedTView(l)),l}(l,c,u,t,n,r,o,i,s):c.data[l];Vt(f,!1);const d=u[11].createComment(ngDevMode?"container":"");ms(c,u,d,f),wi(d,u),gu(u,u[l]=pu(d,u,d,f)),Fe(f)&&Ba(c,u,f),null!=s&&Wa(u,f,a)}function rl(e,t,n,r){n>=e.data.length&&(e.data[n]=null,e.blueprint[n]=null),t[n]=r}function ol(e){return Mt(It.lFrame.contextLView,Te+e)}const il={ɵɵdefineInjectable:R,ɵɵdefineInjector:L,ɵɵinject:Wr,ɵɵinvalidFactoryDep:zr,resolveForwardRef:f};const sl=i({provide:String,useValue:i});function al(e){return void 0!==e.useClass}function ul(e){return void 0!==e.useFactory}const cl=ir("Injectable",void 0,void 0,void 0,((e,t)=>function(e,t){let n=null,r=null;e.hasOwnProperty(U)||Object.defineProperty(e,U,{get:()=>{if(null===n){const r=mr({usage:0,kind:"injectable",type:e});n=r.compileInjectable(il,`ng:///${e.name}/ɵprov.js`,function(e,t){const n=t||{providedIn:null},r={name:e.name,type:e,typeArgumentCount:0,providedIn:n.providedIn};return(al(n)||ul(n))&&void 0!==n.deps&&(r.deps=ro(n.deps)),al(n)?r.useClass=n.useClass:function(e){return sl in e}(n)?r.useValue=n.useValue:ul(n)?r.useFactory=n.useFactory:function(e){return void 0!==e.useExisting}(n)&&(r.useExisting=n.useExisting),r}(e,t))}return n}}),e.hasOwnProperty(pe)||Object.defineProperty(e,pe,{get:()=>{if(null===r){const t=mr({usage:0,kind:"injectable",type:e});r=t.compileFactory(il,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,typeArgumentCount:0,deps:no(e),target:t.FactoryTarget.Injectable})}return r},configurable:!0})}(e,t)));function ll(e){return e.length>1?" ("+function(e){const t=[];for(let n=0;n<e.length;++n){if(t.indexOf(e[n])>-1)return t.push(e[n]),t;t.push(e[n])}return t}(e.slice().reverse()).map((e=>a(e.token))).join(" -> ")+")":""}function fl(e,t,n,r){const o=[t],i=n(o),s=r?function(e,t){const n=`${e} caused by: ${t instanceof Error?t.message:t}`,r=Error(n);return r.ngOriginalError=t,r}(i,r):Error(i);return s.addKey=dl,s.keys=o,s.injectors=[e],s.constructResolvingMessage=n,s.ngOriginalError=r,s}function dl(e,t){this.injectors.push(e),this.keys.push(t),this.message=this.constructResolvingMessage(this.keys)}function pl(e,t){const n=[];for(let e=0,r=t.length;e<r;e++){const r=t[e];r&&0!=r.length?n.push(r.map(a).join(" ")):n.push("?")}return Error("Cannot resolve all parameters for '"+a(e)+"'("+n.join(", ")+"). Make sure that all the parameters are decorated with Inject or have valid type annotations and that '"+a(e)+"' is decorated with Injectable.")}class hl{constructor(e,t){if(this.token=e,this.id=t,!e)throw new Error("Token must be defined!");this.displayName=a(this.token)}static get(e){return vl.get(f(e))}static get numberOfKeys(){return vl.numberOfKeys}}const vl=new class{constructor(){this._allKeys=new Map}get(e){if(e instanceof hl)return e;if(this._allKeys.has(e))return this._allKeys.get(e);const t=new hl(e,hl.numberOfKeys);return this._allKeys.set(e,t),t}get numberOfKeys(){return this._allKeys.size}},yl=new class{constructor(e){this.reflectionCapabilities=e}updateCapabilities(e){this.reflectionCapabilities=e}factory(e){return this.reflectionCapabilities.factory(e)}parameters(e){return this.reflectionCapabilities.parameters(e)}annotations(e){return this.reflectionCapabilities.annotations(e)}propMetadata(e){return this.reflectionCapabilities.propMetadata(e)}hasLifecycleHook(e,t){return this.reflectionCapabilities.hasLifecycleHook(e,t)}getter(e){return this.reflectionCapabilities.getter(e)}setter(e){return this.reflectionCapabilities.setter(e)}method(e){return this.reflectionCapabilities.method(e)}importUri(e){return this.reflectionCapabilities.importUri(e)}resourceUri(e){return this.reflectionCapabilities.resourceUri(e)}resolveIdentifier(e,t,n,r){return this.reflectionCapabilities.resolveIdentifier(e,t,n,r)}resolveEnum(e,t){return this.reflectionCapabilities.resolveEnum(e,t)}}(new kr);class gl{constructor(e,t,n){this.key=e,this.optional=t,this.visibility=n}static fromKey(e){return new gl(e,!1,null)}}const bl=[];class ml{constructor(e,t,n){this.key=e,this.resolvedFactories=t,this.multiProvider=n,this.resolvedFactory=this.resolvedFactories[0]}}class _l{constructor(e,t){this.factory=e,this.dependencies=t}}function wl(e){let t,n;if(e.useClass){const r=f(e.useClass);t=yl.factory(r),n=Ol(r)}else e.useExisting?(t=e=>e,n=[gl.fromKey(hl.get(e.useExisting))]):e.useFactory?(t=e.useFactory,n=function(e,t){if(t){const n=t.map((e=>[e]));return t.map((t=>Dl(e,t,n)))}return Ol(e)}(e.useFactory,e.deps)):(t=()=>e.useValue,n=bl);return new _l(t,n)}function Ml(e){return new ml(hl.get(e.provide),[wl(e)],e.multi||!1)}function Cl(e){const t=function(e,t){for(let n=0;n<e.length;n++){const r=e[n],o=t.get(r.key.id);if(o){if(r.multiProvider!==o.multiProvider)throw Error(`Cannot mix multi providers and regular providers, got: ${o} ${r}`);if(r.multiProvider)for(let e=0;e<r.resolvedFactories.length;e++)o.resolvedFactories.push(r.resolvedFactories[e]);else t.set(r.key.id,r)}else{let e;e=r.multiProvider?new ml(r.key,r.resolvedFactories.slice(),r.multiProvider):r,t.set(r.key.id,e)}}return t}(xl(e,[]).map(Ml),new Map);return Array.from(t.values())}function xl(e,t){return e.forEach((e=>{if(e instanceof _r)t.push({provide:e,useClass:e});else if(e&&"object"==typeof e&&void 0!==e.provide)t.push(e);else{if(!Array.isArray(e))throw Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${e}`);xl(e,t)}})),t}function Ol(e){const t=yl.parameters(e);if(!t)return[];if(t.some((e=>null==e)))throw pl(e,t);return t.map((n=>Dl(e,n,t)))}function Dl(e,t,n){let r=null,o=!1;if(!Array.isArray(t))return Sl(t instanceof Jr?t.token:t,o,null);let i=null;for(let e=0;e<t.length;++e){const n=t[e];n instanceof _r?r=n:n instanceof Jr?r=n.token:n instanceof Zr?o=!0:n instanceof Qr||n instanceof Yr?i=n:n instanceof lr&&(r=n)}if(r=f(r),null!=r)return Sl(r,o,i);throw pl(e,n)}function Sl(e,t,n){return new gl(hl.get(e),t,n)}const El={};class Il{static resolve(e){return Cl(e)}static resolveAndCreate(e,t){const n=Il.resolve(e);return Il.fromResolvedProviders(n,t)}static fromResolvedProviders(e,t){return new Pl(e,t)}}class Pl{constructor(e,t){this._constructionCounter=0,this._providers=e,this.parent=t||null;const n=e.length;this.keyIds=[],this.objs=[];for(let t=0;t<n;t++)this.keyIds[t]=e[t].key.id,this.objs[t]=El}get(e,t=Fr){return this._getByKey(hl.get(e),null,t)}resolveAndCreateChild(e){const t=Il.resolve(e);return this.createChildFromResolved(t)}createChildFromResolved(e){const t=new Pl(e);return t.parent=this,t}resolveAndInstantiate(e){return this.instantiateResolved(Il.resolve([e])[0])}instantiateResolved(e){return this._instantiateProvider(e)}getProviderAtIndex(e){if(e<0||e>=this._providers.length)throw function(e){return Error(`Index ${e} is out-of-bounds.`)}(e);return this._providers[e]}_new(e){if(this._constructionCounter++>this._getMaxNumberOfObjects())throw this,fl(this,e.key,(function(e){return`Cannot instantiate cyclic dependency!${ll(e)}`}));return this._instantiateProvider(e)}_getMaxNumberOfObjects(){return this.objs.length}_instantiateProvider(e){if(e.multiProvider){const t=[];for(let n=0;n<e.resolvedFactories.length;++n)t[n]=this._instantiate(e,e.resolvedFactories[n]);return t}return this._instantiate(e,e.resolvedFactories[0])}_instantiate(e,t){const n=t.factory;let r,o;try{r=t.dependencies.map((e=>this._getByReflectiveDependency(e)))}catch(t){throw t.addKey&&t.addKey(this,e.key),t}try{o=n(...r)}catch(t){throw this,i=t,t.stack,fl(this,e.key,(function(e){const t=a(e[0].token);return`${i.message}: Error during instantiation of ${t}!${ll(e)}.`}),i)}var i;return o}_getByReflectiveDependency(e){return this._getByKey(e.key,e.visibility,e.optional?null:Fr)}_getByKey(e,t,n){return e===Pl.INJECTOR_KEY?this:t instanceof Qr?this._getByKeySelf(e,n):this._getByKeyDefault(e,n,t)}_getObjByKeyId(e){for(let t=0;t<this.keyIds.length;t++)if(this.keyIds[t]===e)return this.objs[t]===El&&(this.objs[t]=this._new(this._providers[t])),this.objs[t];return El}_throwOrNull(e,t){if(t!==Fr)return t;throw function(e,t){return fl(e,t,(function(e){return`No provider for ${a(e[0].token)}!${ll(e)}`}))}(this,e)}_getByKeySelf(e,t){const n=this._getObjByKeyId(e.id);return n!==El?n:this._throwOrNull(e,t)}_getByKeyDefault(e,t,n){let r;for(r=n instanceof Yr?this.parent:this;r instanceof Pl;){const t=r,n=t._getObjByKeyId(e.id);if(n!==El)return n;r=t.parent}return null!==r?r.get(e.token,t):this._throwOrNull(e,t)}get displayName(){return`ReflectiveInjector(providers: [${function(e,t){const n=[];for(let t=0;t<e._providers.length;++t)n[t]=' "'+e.getProviderAtIndex(t).key.displayName+'" ';return n}(this).join(", ")}])`}toString(){return this.displayName}}function Tl(e,t=q.Default){const n=jt();return null===n?(ngDevMode&&(ngDevMode&&x(K,Tl,"Calling ɵɵinject would cause infinite recursion")),Wr(e,t)):Wn(Rt(),n,f(e),t)}function Al(){const e=ngDevMode?"This constructor was not compatible with Dependency Injection.":"invalid";throw new Error(e)}function jl(e,t,n){const r=jt(),o=Kt();if(jc(r,o,t)){const i=kt(),s=dn();Za(i,s,r,e,t,r[11],n,!1),ngDevMode&&Cu(i.data,s,e,o)}return jl}function kl(e,t,n,r,o){const i=o?"class":"style";Iu(e,n,t.inputs[i],i,r)}function Nl(e,t,n,r){const o=jt(),i=kt(),s=Te+e;ngDevMode&&C(zt(),i.bindingStartIndex,"elements should be created before any bindings"),ngDevMode&&k(o,s);const a=o[11],u=o[s]=rs(a,t,It.lFrame.currentNamespace),c=i.firstCreatePass?function(e,t,n,r,o,i,s){ngDevMode&&Ge(t),ngDevMode&&ngDevMode.firstCreatePass++;const a=t.consts,u=Na(t,e,2,o,Dt(a,i)),c=eu(t,n,u,Dt(a,s));return ngDevMode&&function(e,t,n,r){if(null===e.schemas)return;const o=n.value;if(!r&&null!==o&&("undefined"!=typeof HTMLUnknownElement&&HTMLUnknownElement&&t instanceof HTMLUnknownElement||"undefined"!=typeof customElements&&o.indexOf("-")>-1&&!customElements.get(o))&&!Ya(e,o)){let e=`'${o}' is not a known element:\n`;e+=`1. If '${o}' is an Angular component, then verify that it is part of this module.\n`,o&&o.indexOf("-")>-1?e+=`2. If '${o}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`:e+="2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.",console.error(h(304,e))}}(t,r,u,c),null!==u.attrs&&Tu(u,u.attrs,!1),null!==u.mergedAttrs&&Tu(u,u.mergedAttrs,!0),null!==t.queries&&t.queries.elementStart(t,u),u}(s,i,o,u,t,n,r):i.data[s];Vt(c,!0);const l=c.mergedAttrs;null!==l&&Dn(a,u,l);const f=c.classes;null!==f&&Es(a,u,f);const d=c.styles;return null!==d&&Ss(a,u,d),64!=(64&c.flags)&&ms(i,o,u,c),0===It.lFrame.elementDepthCount&&wi(u,o),It.lFrame.elementDepthCount++,Fe(c)&&(Ba(i,o,c),Ua(i,c,o)),null!==r&&Wa(o,c),Nl}function Rl(){let e=Rt();ngDevMode&&T(e,"No parent node to close."),$t()?Ht():(ngDevMode&&We(Rt()),e=e.parent,Vt(e,!1));const t=e;ngDevMode&&On(t,3),It.lFrame.elementDepthCount--;const n=kt();return n.firstCreatePass&&(yn(n,e),Ne(e)&&n.queries.elementEnd(e)),null!=t.classesWithoutHost&&function(e){return 0!=(16&e.flags)}(t)&&kl(n,t,jt(),t.classesWithoutHost,!0),null!=t.stylesWithoutHost&&function(e){return 0!=(32&e.flags)}(t)&&kl(n,t,jt(),t.stylesWithoutHost,!1),Rl}function Fl(e,t,n,r){return Nl(e,t,n,r),Rl(),Fl}function Ll(e,t,n){const r=jt(),o=kt(),i=e+Te;ngDevMode&&k(r,i),ngDevMode&&C(zt(),o.bindingStartIndex,"element containers should be created before any bindings");const s=o.firstCreatePass?function(e,t,n,r,o){ngDevMode&&ngDevMode.firstCreatePass++;const i=t.consts,s=Dt(i,r),a=Na(t,e,8,"ng-container",s);return null!==s&&Tu(a,s,!0),eu(t,n,a,Dt(i,o)),null!==t.queries&&t.queries.elementStart(t,a),a}(i,o,r,t,n):o.data[i];Vt(s,!0),ngDevMode&&ngDevMode.rendererCreateComment++;const a=r[i]=r[11].createComment(ngDevMode?"ng-container":"");return ms(o,r,a,s),wi(a,r),Fe(s)&&(Ba(o,r,s),Ua(o,s,r)),null!=n&&Wa(r,s),Ll}function Vl(){let e=Rt();const t=kt();return $t()?Ht():(ngDevMode&&We(e),e=e.parent,Vt(e,!1)),ngDevMode&&On(e,8),t.firstCreatePass&&(yn(t,e),Ne(e)&&t.queries.elementEnd(e)),Vl}function $l(e,t,n){return Ll(e,t,n),Vl(),$l}function Hl(){return jt()}function Ul(e){return!!e&&"function"==typeof e.then}function Bl(e){return!!e&&"function"==typeof e.subscribe}Pl.INJECTOR_KEY=hl.get(Ju);const Wl=Bl;function zl(e,t,n,r){const o=jt(),i=kt(),s=Rt();return Kl(i,o,o[11],s,e,t,!!n,r),zl}function ql(e,t){const n=Rt(),r=jt(),o=kt();return Kl(o,r,Su(Yt(o.data),n,r),n,e,t,!1),ql}function Kl(e,t,n,r,o,i,s,a){const u=Fe(r),c=e.firstCreatePass&&Du(e),l=t[8],f=Ou(t);ngDevMode&&On(r,15);let d=!0;if(3&r.type||a){const p=_t(r,t),h=a?a(p):p,v=f.length,y=a?e=>a(bt(e[r.index])):r.index;if(yt(n)){let s=null;if(!a&&u&&(s=function(e,t,n,r){const o=e.cleanup;if(null!=o)for(let e=0;e<o.length-1;e+=2){const i=o[e];if(i===n&&o[e+1]===r){const n=t[7],r=o[e+2];return n.length>r?n[r]:null}"string"==typeof i&&(e+=2)}return null}(e,t,o,r.index)),null!==s)(s.__ngLastListenerFn__||s).__ngNextListenerFn__=i,s.__ngLastListenerFn__=i,d=!1;else{i=Jl(r,t,l,i,!1);const e=n.listen(h,o,i);ngDevMode&&ngDevMode.rendererAddEventListener++,f.push(i,e),c&&c.push(o,y,v,v+1)}}else i=Jl(r,t,l,i,!0),h.addEventListener(o,i,s),ngDevMode&&ngDevMode.rendererAddEventListener++,f.push(i),c&&c.push(o,y,v,s)}else i=Jl(r,t,l,i,!1);const p=r.outputs;let h;if(d&&null!==p&&(h=p[o])){const e=h.length;if(e)for(let n=0;n<e;n+=2){const e=h[n];ngDevMode&&k(t,e);const s=h[n+1],a=t[e],u=a[s];if(ngDevMode&&!Wl(u))throw new Error(`@Output ${s} not initialized in '${a.constructor.name}'.`);const l=u.subscribe(i),d=f.length;f.push(i,l),c&&c.push(o,r.index,d,-(d+1))}}}function Gl(e,t,n,r){try{return ct(6,t,n),!1!==n(r)}catch(t){return Eu(e,t),!1}finally{ct(7,t,n)}}function Jl(e,t,n,r,o){return function i(s){if(s===Function)return r;const a=2&e.flags?Ct(e.index,t):t;0==(32&t[2])&&bu(a);let u=Gl(t,n,r,s),c=i.__ngNextListenerFn__;for(;c;)u=Gl(t,n,c,s)&&u,c=c.__ngNextListenerFn__;return o&&!1===u&&(s.preventDefault(),s.returnValue=!1),u}}function Zl(e=1){return function(e){return(It.lFrame.contextLView=function(e,t){for(;e>0;)ngDevMode&&T(t[15],"Declaration view should be defined if nesting level is greater than 0."),t=t[15],e--;return t}(e,It.lFrame.contextLView))[8]}(e)}function Ql(e,t){let n=null;const r=function(e){const t=e.attrs;if(null!=t){const e=t.indexOf(5);if(0==(1&e))return t[e+1]}return null}(e);for(let o=0;o<t.length;o++){const i=t[o];if("*"!==i){if(null===r?Fs(e,i,!0):Ls(r,i))return o}else n=o}return n}function Yl(e){const t=jt()[16][6];if(!t.projection){const n=e?e.length:1,r=t.projection=Dr(n,null),o=r.slice();let i=t.child;for(;null!==i;){const t=e?Ql(i,e):0;null!==t&&(o[t]?o[t].projectionNext=i:r[t]=i,o[t]=i),i=i.next}}}function Xl(e,t=0,n){const r=jt(),o=kt(),i=Na(o,Te+e,16,null,n||null);null===i.projection&&(i.projection=t),Ht(),64!=(64&i.flags)&&function(e,t,n){Ds(t[11],0,t,n,us(e,n,t),hs(n.parent||t[6],n,t))}(o,r,i)}function ef(e,t,n){return tf(e,"",t,"",n),ef}function tf(e,t,n,r,o){const i=jt(),s=Vc(i,t,n,r);if(s!==Hs){const n=kt(),a=dn();Za(n,a,i,e,s,i[11],o,!1),ngDevMode&&Cu(n.data,a,e,zt()-1,t,r)}return tf}function nf(e,t,n,r,o,i,s){const a=jt(),u=$c(a,t,n,r,o,i);if(u!==Hs){const n=kt(),o=dn();Za(n,o,a,e,u,a[11],s,!1),ngDevMode&&Cu(n.data,o,e,zt()-2,t,r,i)}return nf}function rf(e,t,n,r,o,i,s,a,u){const c=jt(),l=Hc(c,t,n,r,o,i,s,a);if(l!==Hs){const n=kt(),o=dn();Za(n,o,c,e,l,c[11],u,!1),ngDevMode&&Cu(n.data,o,e,zt()-3,t,r,i,a)}return rf}function of(e,t,n,r,o,i,s,a,u,c,l){const f=jt(),d=Uc(f,t,n,r,o,i,s,a,u,c);if(d!==Hs){const n=kt(),o=dn();Za(n,o,f,e,d,f[11],l,!1),ngDevMode&&Cu(n.data,o,e,zt()-4,t,r,i,a,c)}return of}function sf(e,t,n,r,o,i,s,a,u,c,l,f,d){const p=jt(),h=Bc(p,t,n,r,o,i,s,a,u,c,l,f);if(h!==Hs){const n=kt(),o=dn();Za(n,o,p,e,h,p[11],d,!1),ngDevMode&&Cu(n.data,o,e,zt()-5,t,r,i,a,c,f)}return sf}function af(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){const v=jt(),y=Wc(v,t,n,r,o,i,s,a,u,c,l,f,d,p);if(y!==Hs){const n=kt(),o=dn();Za(n,o,v,e,y,v[11],h,!1),ngDevMode&&Cu(n.data,o,e,zt()-6,t,r,i,a,c,f,p)}return af}function uf(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){const g=jt(),b=zc(g,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v);if(b!==Hs){const n=kt(),o=dn();Za(n,o,g,e,b,g[11],y,!1),ngDevMode&&Cu(n.data,o,e,zt()-7,t,r,i,a,c,f,p,v)}return uf}function cf(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b){const m=jt(),_=qc(m,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g);if(_!==Hs){const n=kt(),o=dn();Za(n,o,m,e,_,m[11],b,!1),ngDevMode&&Cu(n.data,o,e,zt()-8,t,r,i,a,c,f,p,v,g)}return cf}function lf(e,t,n){const r=jt(),o=Lc(r,t);if(o!==Hs){const i=kt(),s=dn();if(Za(i,s,r,e,o,r[11],n,!1),ngDevMode){const n=[t[0]];for(let e=2;e<t.length;e+=2)n.push(t[e]);Cu(i.data,s,e,zt()-n.length+1,...n)}}return lf}function ff(e,t,n,r,o){const i=e[n+1],s=null===t;let a=r?qs(i):Js(i),u=!1;for(;0!==a&&(!1===u||s);){ngDevMode&&k(e,a);const n=e[a],o=e[a+1];df(n,t)&&(u=!0,e[a+1]=r?Ys(o):Gs(o)),a=r?qs(o):Js(o)}u&&(e[n+1]=r?Gs(i):Ys(i))}function df(e,t){return ngDevMode&&x(Array.isArray(t),!0,"Expected that 'tStylingKey' has been unwrapped"),null===e||null==t||(Array.isArray(e)?e[1]:e)===t||!(!Array.isArray(e)||"string"!=typeof t)&&Ir(e,t)>=0}const pf={textEnd:0,key:0,keyEnd:0,value:0,valueEnd:0};function hf(e){return e.substring(pf.key,pf.keyEnd)}function vf(e){return e.substring(pf.value,pf.valueEnd)}function yf(e,t){const n=pf.textEnd;return n===t?-1:(t=pf.keyEnd=function(e,t,n){for(;t<n&&e.charCodeAt(t)>32;)t++;return t}(e,pf.key=t,n),mf(e,t,n))}function gf(e,t){const n=pf.textEnd;let r=pf.key=mf(e,t,n);return n===r?-1:(r=pf.keyEnd=function(e,t,n){let r;for(;t<n&&(45===(r=e.charCodeAt(t))||95===r||(-33&r)>=65&&(-33&r)<=90||r>=48&&r<=57);)t++;return t}(e,r,n),r=_f(e,r,n,58),r=pf.value=mf(e,r,n),r=pf.valueEnd=function(e,t,n){let r=-1,o=-1,i=-1,s=t,a=s;for(;s<n;){const u=e.charCodeAt(s++);if(59===u)return a;34===u||39===u?a=s=wf(e,u,s,n):t===s-4&&85===i&&82===o&&76===r&&40===u?a=s=wf(e,41,s,n):u>32&&(a=s),i=o,o=r,r=-33&u}return a}(e,r,n),_f(e,r,n,59))}function bf(e){pf.key=0,pf.keyEnd=0,pf.value=0,pf.valueEnd=0,pf.textEnd=e.length}function mf(e,t,n){for(;t<n&&e.charCodeAt(t)<=32;)t++;return t}function _f(e,t,n,r){return(t=mf(e,t,n))<n&&(ngDevMode&&e.charCodeAt(t)!==r&&Mf(e,String.fromCharCode(r),t),t++),t}function wf(e,t,n,r){let o=-1,i=n;for(;i<r;){const n=e.charCodeAt(i++);if(n==t&&92!==o)return i;o=92==n&&92===o?0:n}throw ngDevMode?Mf(e,String.fromCharCode(t),r):new Error}function Mf(e,t,n){throw ngDevMode&&C("string"==typeof e,!0,"String expected here"),A(`Malformed style at location ${n} in string '`+e.substring(0,n)+"[>>"+e.substring(n,n+1)+"<<]"+e.substr(n+1)+`'. Expecting '${t}'.`)}function Cf(e,t,n){return If(e,t,n,!1),Cf}function xf(e,t){return If(e,t,null,!0),xf}function Of(e){Pf(Nf,Df,e,!1)}function Df(e,t){for(let n=function(e){return bf(e),gf(e,mf(e,0,pf.textEnd))}(t);n>=0;n=gf(t,n))Nf(e,hf(t),vf(t))}function Sf(e){Pf(Sr,Ef,e,!0)}function Ef(e,t){for(let n=function(e){return bf(e),yf(e,mf(e,0,pf.textEnd))}(t);n>=0;n=yf(t,n))Sr(e,hf(t),!0)}function If(e,t,n,r){const o=jt(),i=kt(),s=Gt(2);i.firstUpdatePass&&Af(i,e,s,r),t!==Hs&&jc(o,s,t)&&Rf(i,i.data[ln()],o,o[11],e,o[s+1]=function(e,t){return null==e||("string"==typeof t?e+=t:"object"==typeof e&&(e=a(Oo(e)))),e}(t,n),r,s)}function Pf(e,t,n,r){const o=kt(),i=Gt(2);o.firstUpdatePass&&Af(o,null,i,r);const s=jt();if(n!==Hs&&jc(s,i,n)){const a=o.data[ln()];if(Vf(a,r)&&!Tf(o,i)){if(ngDevMode){const e=o.data[i];C(Array.isArray(e)?e[1]:e,!1,"Styling linked list shadow input should be marked as 'false'")}let e=r?a.classesWithoutHost:a.stylesWithoutHost;ngDevMode&&!1===r&&null!==e&&C(e.endsWith(";"),!0,"Expecting static portion to end with ';'"),null!==e&&(n=u(e,n||"")),kl(o,a,s,n,r)}else!function(e,t,n,r,o,i,s,a){o===Hs&&(o=ue);let u=0,c=0,l=0<o.length?o[0]:null,f=0<i.length?i[0]:null;for(;null!==l||null!==f;){ngDevMode&&S(u,999,"Are we stuck in infinite loop?"),ngDevMode&&S(c,999,"Are we stuck in infinite loop?");const d=u<o.length?o[u+1]:void 0,p=c<i.length?i[c+1]:void 0;let h,v=null;l===f?(u+=2,c+=2,d!==p&&(v=f,h=p)):null===f||null!==l&&l<f?(u+=2,v=l):(ngDevMode&&T(f,"Expecting to have a valid key"),c+=2,v=f,h=p),null!==v&&Rf(e,t,n,r,v,h,s,a),l=u<o.length?o[u]:null,f=c<i.length?i[c]:null}}(o,a,s,s[11],s[i+1],s[i+1]=function(e,t,n){if(null==n||""===n)return ue;const r=[],o=Oo(n);if(Array.isArray(o))for(let t=0;t<o.length;t++)e(r,o[t],!0);else if("object"==typeof o)for(const t in o)o.hasOwnProperty(t)&&e(r,t,o[t]);else"string"==typeof o?t(r,o):ngDevMode&&A("Unsupported styling type "+typeof o+": "+o);return r}(e,t,n),r,i)}}function Tf(e,t){return t>=e.expandoStartIndex}function Af(e,t,n,r){ngDevMode&&Je(e);const o=e.data;if(null===o[n+1]){const i=o[ln()];ngDevMode&&T(i,"TNode expected");const s=Tf(e,n);Vf(i,r)&&null===t&&!s&&(t=!1),t=function(e,t,n,r){const o=Yt(e);let i=r?t.residualClasses:t.residualStyles;if(null===o)0===(r?t.classBindings:t.styleBindings)&&(n=kf(n=jf(null,e,t,n,r),t.attrs,r),i=null);else{const s=t.directiveStylingLast;if(-1===s||e[s]!==o)if(n=jf(o,e,t,n,r),null===i){let n=function(e,t,n){const r=n?t.classBindings:t.styleBindings;if(0!==Js(r))return e[qs(r)]}(e,t,r);void 0!==n&&Array.isArray(n)&&(n=jf(null,e,t,n[1],r),n=kf(n,t.attrs,r),function(e,t,n,r){const o=n?t.classBindings:t.styleBindings;ngDevMode&&x(Js(o),0,"Expecting to have at least one template styling binding."),e[qs(o)]=r}(e,t,r,n))}else i=function(e,t,n){let r;const o=t.directiveEnd;ngDevMode&&x(t.directiveStylingLast,-1,"By the time this function gets called at least one hostBindings-node styling instruction must have executed.");for(let i=1+t.directiveStylingLast;i<o;i++)r=kf(r,e[i].hostAttrs,n);return kf(r,t.attrs,n)}(e,t,r)}return void 0!==i&&(r?t.residualClasses=i:t.residualStyles=i),n}(o,i,t,r),function(e,t,n,r,o,i){ngDevMode&&Je(kt());let s=i?t.classBindings:t.styleBindings,a=qs(s),u=Js(s);e[r]=n;let c,l=!1;if(Array.isArray(n)){const e=n;c=e[1],(null===c||Ir(e,c)>0)&&(l=!0)}else c=n;if(o)if(0!==u){const t=qs(e[a+1]);e[r+1]=zs(t,a),0!==t&&(e[t+1]=Zs(e[t+1],r)),e[a+1]=(f=e[a+1],d=r,ngDevMode&&_(f,"expected number"),ngDevMode&&w(d,0,32767),131071&f|d<<17)}else e[r+1]=zs(a,0),0!==a&&(e[a+1]=Zs(e[a+1],r)),a=r;else e[r+1]=zs(u,0),ngDevMode&&C(0!==a&&0===u,!1,"Adding template bindings after hostBindings is not allowed."),0===a?a=r:e[u+1]=Zs(e[u+1],r),u=r;var f,d;l&&(e[r+1]=Gs(e[r+1])),ff(e,c,r,!0),ff(e,c,r,!1),function(e,t,n,r,o){const i=o?e.residualClasses:e.residualStyles;null!=i&&"string"==typeof t&&Ir(i,t)>=0&&(n[r+1]=Ys(n[r+1]))}(t,c,e,r,i),s=zs(a,u),i?t.classBindings=s:t.styleBindings=s}(o,i,t,n,s,r)}}function jf(e,t,n,r,o){let i=null;const s=n.directiveEnd;let a=n.directiveStylingLast;for(-1===a?a=n.directiveStart:a++;a<s&&(i=t[a],ngDevMode&&T(i,"expected to be defined"),r=kf(r,i.hostAttrs,o),i!==e);)a++;return null!==e&&(n.directiveStylingLast=a),r}function kf(e,t,n){const r=n?1:2;let o=-1;if(null!==t)for(let i=0;i<t.length;i++){const s=t[i];"number"==typeof s?o=s:o===r&&(Array.isArray(e)||(e=void 0===e?[]:["",e]),Sr(e,s,!!n||t[++i]))}return void 0===e?null:e}function Nf(e,t,n){Sr(e,t,Oo(n))}function Rf(e,t,n,r,o,i,s,a){if(!(3&t.type))return;const u=e.data,c=u[a+1];Lf(Qs(c)?Ff(u,t,n,o,Js(c),s):void 0)||(Lf(i)||Ks(c)&&(i=Ff(u,null,n,o,a,s)),function(e,t,n,r,o){const i=yt(e);if(t)o?(ngDevMode&&ngDevMode.rendererAddClass++,i?e.addClass(n,r):(ngDevMode&&T(n.classList,"HTMLElement expected"),n.classList.add(r))):(ngDevMode&&ngDevMode.rendererRemoveClass++,i?e.removeClass(n,r):n.classList.remove(r));else{let t=-1===r.indexOf("-")?void 0:zi.DashCase;if(null==o)ngDevMode&&ngDevMode.rendererRemoveStyle++,i?e.removeStyle(n,r,t):n.style.removeProperty(r);else{const s="string"==typeof o&&o.endsWith("!important");s&&(o=o.slice(0,-10),t|=zi.Important),ngDevMode&&ngDevMode.rendererSetStyle++,i?e.setStyle(n,r,o,t):(ngDevMode&&T(n.style,"HTMLElement expected"),n.style.setProperty(r,o,s?"important":""))}}}(r,s,mt(ln(),n),o,i))}function Ff(e,t,n,r,o,i){const s=null===t;let a;for(;o>0;){const t=e[o],i=Array.isArray(t),u=i?t[1]:t,c=null===u;let l=n[o+1];l===Hs&&(l=c?ue:void 0);let f=c?Er(l,r):u===r?l:void 0;if(i&&!Lf(f)&&(f=Er(t,r)),Lf(f)&&(a=f,s))return a;const d=e[o+1];o=s?qs(d):Js(d)}if(null!==t){let e=i?t.residualClasses:t.residualStyles;null!=e&&(a=Er(e,r))}return a}function Lf(e){return void 0!==e}function Vf(e,t){return 0!=(e.flags&(t?16:32))}function $f(e,t=""){const n=jt(),r=kt(),o=e+Te;ngDevMode&&C(zt(),r.bindingStartIndex,"text nodes should be created before any bindings"),ngDevMode&&k(n,o);const i=r.firstCreatePass?Na(r,o,1,t,null):r.data[o],s=n[o]=es(n[11],t);ms(r,n,s,i),Vt(i,!1)}function Hf(e){return Uf("",e,""),Hf}function Uf(e,t,n){const r=jt(),o=Vc(r,e,t,n);return o!==Hs&&Pu(r,ln(),o),Uf}function Bf(e,t,n,r,o){const i=jt(),s=$c(i,e,t,n,r,o);return s!==Hs&&Pu(i,ln(),s),Bf}function Wf(e,t,n,r,o,i,s){const a=jt(),u=Hc(a,e,t,n,r,o,i,s);return u!==Hs&&Pu(a,ln(),u),Wf}function zf(e,t,n,r,o,i,s,a,u){const c=jt(),l=Uc(c,e,t,n,r,o,i,s,a,u);return l!==Hs&&Pu(c,ln(),l),zf}function qf(e,t,n,r,o,i,s,a,u,c,l){const f=jt(),d=Bc(f,e,t,n,r,o,i,s,a,u,c,l);return d!==Hs&&Pu(f,ln(),d),qf}function Kf(e,t,n,r,o,i,s,a,u,c,l,f,d){const p=jt(),h=Wc(p,e,t,n,r,o,i,s,a,u,c,l,f,d);return h!==Hs&&Pu(p,ln(),h),Kf}function Gf(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){const v=jt(),y=zc(v,e,t,n,r,o,i,s,a,u,c,l,f,d,p,h);return y!==Hs&&Pu(v,ln(),y),Gf}function Jf(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){const g=jt(),b=qc(g,e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y);return b!==Hs&&Pu(g,ln(),b),Jf}function Zf(e){const t=jt(),n=Lc(t,e);return n!==Hs&&Pu(t,ln(),n),Zf}function Qf(e,t,n){Pf(Sr,Ef,Vc(jt(),e,t,n),!0)}function Yf(e,t,n,r,o){Pf(Sr,Ef,$c(jt(),e,t,n,r,o),!0)}function Xf(e,t,n,r,o,i,s){Pf(Sr,Ef,Hc(jt(),e,t,n,r,o,i,s),!0)}function ed(e,t,n,r,o,i,s,a,u){Pf(Sr,Ef,Uc(jt(),e,t,n,r,o,i,s,a,u),!0)}function td(e,t,n,r,o,i,s,a,u,c,l){Pf(Sr,Ef,Bc(jt(),e,t,n,r,o,i,s,a,u,c,l),!0)}function nd(e,t,n,r,o,i,s,a,u,c,l,f,d){Pf(Sr,Ef,Wc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d),!0)}function rd(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){Pf(Sr,Ef,zc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d,p,h),!0)}function od(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){Pf(Sr,Ef,qc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y),!0)}function id(e){Pf(Sr,Ef,Lc(jt(),e),!0)}function sd(e,t,n){Of(Vc(jt(),e,t,n))}function ad(e,t,n,r,o){Of($c(jt(),e,t,n,r,o))}function ud(e,t,n,r,o,i,s){Of(Hc(jt(),e,t,n,r,o,i,s))}function cd(e,t,n,r,o,i,s,a,u){Of(Uc(jt(),e,t,n,r,o,i,s,a,u))}function ld(e,t,n,r,o,i,s,a,u,c,l){Of(Bc(jt(),e,t,n,r,o,i,s,a,u,c,l))}function fd(e,t,n,r,o,i,s,a,u,c,l,f,d){Of(Wc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d))}function dd(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){Of(zc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d,p,h))}function pd(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){Of(qc(jt(),e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y))}function hd(e){Of(Lc(jt(),e))}function vd(e,t,n,r,o){return If(e,Vc(jt(),t,n,r),o,!1),vd}function yd(e,t,n,r,o,i,s){return If(e,$c(jt(),t,n,r,o,i),s,!1),yd}function gd(e,t,n,r,o,i,s,a,u){return If(e,Hc(jt(),t,n,r,o,i,s,a),u,!1),gd}function bd(e,t,n,r,o,i,s,a,u,c,l){return If(e,Uc(jt(),t,n,r,o,i,s,a,u,c),l,!1),bd}function md(e,t,n,r,o,i,s,a,u,c,l,f,d){return If(e,Bc(jt(),t,n,r,o,i,s,a,u,c,l,f),d,!1),md}function _d(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h){return If(e,Wc(jt(),t,n,r,o,i,s,a,u,c,l,f,d,p),h,!1),_d}function wd(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y){return If(e,zc(jt(),t,n,r,o,i,s,a,u,c,l,f,d,p,h,v),y,!1),wd}function Md(e,t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g,b){return If(e,qc(jt(),t,n,r,o,i,s,a,u,c,l,f,d,p,h,v,y,g),b,!1),Md}function Cd(e,t,n){return If(e,Lc(jt(),t),n,!1),Cd}function xd(e,t,n){const r=jt(),o=Kt();if(jc(r,o,t)){const i=kt(),s=dn();Za(i,s,r,e,t,r[11],n,!0),ngDevMode&&Cu(i.data,s,e,o)}return xd}function Od(e,t,n){const r=jt(),o=Kt();if(jc(r,o,t)){const i=kt(),s=dn();Za(i,s,r,e,t,Su(Yt(i.data),s,r),n,!0),ngDevMode&&Cu(i.data,s,e,o)}return Od}"undefined"==typeof ngI18nClosureMode&&(ie.ngI18nClosureMode="undefined"!=typeof goog&&"function"==typeof goog.getMsg);const Dd=void 0;var Sd=["en",[["a","p"],["AM","PM"],Dd],[["AM","PM"],Dd,Dd],[["S","M","T","W","T","F","S"],["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],["Su","Mo","Tu","We","Th","Fr","Sa"]],Dd,[["J","F","M","A","M","J","J","A","S","O","N","D"],["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],["January","February","March","April","May","June","July","August","September","October","November","December"]],Dd,[["B","A"],["BC","AD"],["Before Christ","Anno Domini"]],0,[6,0],["M/d/yy","MMM d, y","MMMM d, y","EEEE, MMMM d, y"],["h:mm a","h:mm:ss a","h:mm:ss a z","h:mm:ss a zzzz"],["{1}, {0}",Dd,"{1} 'at' {0}",Dd],[".",",",";","%","+","-","E","×","‰","∞","NaN",":"],["#,##0.###","#,##0%","¤#,##0.00","#E0"],"USD","$","US Dollar",{},"ltr",function(e){const t=Math.floor(Math.abs(e)),n=e.toString().replace(/^[^.]*\.?/,"").length;return 1===t&&0===n?1:5}];let Ed={};function Id(e,t,n){"string"!=typeof t&&(n=t,t=e[Nd.LocaleId]),t=t.toLowerCase().replace(/_/g,"-"),Ed[t]=e,n&&(Ed[t][Nd.ExtraData]=n)}function Pd(e){const t=function(e){return e.toLowerCase().replace(/_/g,"-")}(e);let n=jd(t);if(n)return n;const r=t.split("-")[0];if(n=jd(r),n)return n;if("en"===r)return Sd;throw new Error(`Missing locale data for the locale "${e}".`)}function Td(e){return Pd(e)[Nd.CurrencyCode]||null}function Ad(e){return Pd(e)[Nd.PluralCase]}function jd(e){return e in Ed||(Ed[e]=ie.ng&&ie.ng.common&&ie.ng.common.locales&&ie.ng.common.locales[e]),Ed[e]}function kd(){Ed={}}var Nd;!function(e){e[e.LocaleId=0]="LocaleId",e[e.DayPeriodsFormat=1]="DayPeriodsFormat",e[e.DayPeriodsStandalone=2]="DayPeriodsStandalone",e[e.DaysFormat=3]="DaysFormat",e[e.DaysStandalone=4]="DaysStandalone",e[e.MonthsFormat=5]="MonthsFormat",e[e.MonthsStandalone=6]="MonthsStandalone",e[e.Eras=7]="Eras",e[e.FirstDayOfWeek=8]="FirstDayOfWeek",e[e.WeekendRange=9]="WeekendRange",e[e.DateFormat=10]="DateFormat",e[e.TimeFormat=11]="TimeFormat",e[e.DateTimeFormat=12]="DateTimeFormat",e[e.NumberSymbols=13]="NumberSymbols",e[e.NumberFormats=14]="NumberFormats",e[e.CurrencyCode=15]="CurrencyCode",e[e.CurrencySymbol=16]="CurrencySymbol",e[e.CurrencyName=17]="CurrencyName",e[e.Currencies=18]="Currencies",e[e.Directionality=19]="Directionality",e[e.PluralCase=20]="PluralCase",e[e.ExtraData=21]="ExtraData"}(Nd||(Nd={}));const Rd=["zero","one","two","few","many"],Fd="en-US",Ld={marker:"element"},Vd={marker:"ICU"};var $d;!function(e){e[e.SHIFT=2]="SHIFT",e[e.APPEND_EAGERLY=1]="APPEND_EAGERLY",e[e.COMMENT=2]="COMMENT"}($d||($d={}));let Hd=Fd;function Ud(e){T(e,"Expected localeId to be defined"),"string"==typeof e&&(Hd=e.toLowerCase().replace(/_/g,"-"))}function Bd(e,t,n){const r=t.insertBeforeIndex,o=Array.isArray(r)?r[0]:r;return null===o?vs(e,0,n):(ngDevMode&&k(n,o),bt(n[o]))}function Wd(e,t,n,r,o){const i=t.insertBeforeIndex;if(Array.isArray(i)){ngDevMode&&j(r);let s=r,a=null;if(3&t.type||(a=s,s=o),null!==s&&0==(2&t.flags))for(let t=1;t<i.length;t++)ls(e,s,n[i[t]],a,!1)}}function zd(e,t){if(ngDevMode&&C(t.insertBeforeIndex,null,"We expect that insertBeforeIndex is not set"),e.push(t),e.length>1)for(let n=e.length-2;n>=0;n--){const r=e[n];qd(r)||Kd(r,t)&&null===Gd(r)&&Jd(r,t.index)}}function qd(e){return!(64&e.type)}function Kd(e,t){return qd(t)||e.index>t.index}function Gd(e){const t=e.insertBeforeIndex;return Array.isArray(t)?t[0]:t}function Jd(e,t){const n=e.insertBeforeIndex;Array.isArray(n)?n[0]=t:(bs(Bd,Wd),e.insertBeforeIndex=t)}function Zd(e,t){const n=e.data[t];if(null===n||"string"==typeof n)return null;!ngDevMode||n.hasOwnProperty("tViews")||n.hasOwnProperty("currentCaseLViewIndex")||A("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: "+n);const r=n.hasOwnProperty("currentCaseLViewIndex")?n:n.value;return ngDevMode&&Ue(r),r}function Qd(e,t,n){const r=Ra(e,n,64,null,null);return zd(t,r),r}function Yd(e,t){const n=t[e.currentCaseLViewIndex];return null===n?n:n<0?~n:n}function Xd(e){return e>>>17}function ep(e){return(131070&e)>>>1}function tp(e){return 1&e}let np=0,rp=0;function op(e,t,n,r){ngDevMode&&j(r);const o=n[11];let i,s=null;for(let a=0;a<t.length;a++){const u=t[a];if("string"==typeof u){const e=t[++a];null===n[e]&&(ngDevMode&&ngDevMode.rendererCreateTextNode++,ngDevMode&&k(n,e),n[e]=es(o,u))}else if("number"==typeof u)switch(1&u){case 0:const c=Xd(u);let l,f;if(null===s&&(s=c,i=ps(o,r)),c===s?(l=r,f=i):(l=null,f=bt(n[c])),null!==f){ngDevMode&&j(f);const t=ep(u);ngDevMode&&I(t,Te,"Missing ref");const r=n[t];ngDevMode&&j(r),ls(o,f,r,l,!1);const i=Zd(e,t);if(null!==i&&"object"==typeof i){ngDevMode&&Ue(i);const t=Yd(i,n);null!==t&&op(e,i.create[t],n,n[i.anchorIdx])}}break;case 1:const d=u>>>1,h=t[++a],v=t[++a];cu(o,mt(d,n),null,null,h,v,null);break;default:if(ngDevMode)throw new p(700,`Unable to determine the type of mutate operation for "${u}"`)}else switch(u){case Vd:const e=t[++a],r=t[++a];null===n[r]&&(ngDevMode&&C(typeof e,"string",`Expected "${e}" to be a comment node value`),ngDevMode&&ngDevMode.rendererCreateComment++,ngDevMode&&Ze(n,r),wi(n[r]=ns(o,e),n));break;case Ld:const i=t[++a],s=t[++a];null===n[s]&&(ngDevMode&&C(typeof i,"string",`Expected "${i}" to be an element node tag name`),ngDevMode&&ngDevMode.rendererCreateElement++,ngDevMode&&Ze(n,s),wi(n[s]=rs(o,i,null),n));break;default:ngDevMode&&A(`Unable to determine the type of mutate operation for "${u}"`)}}}function ip(e,t,n,r,o){for(let i=0;i<n.length;i++){const s=n[i],a=n[++i];if(s&o){let o="";for(let s=i+1;s<=i+a;s++){const i=n[s];if("string"==typeof i)o+=i;else if("number"==typeof i)if(i<0)o+=v(t[r-i]);else{const a=i>>>2;switch(3&i){case 1:const i=n[++s],u=n[++s],c=e.data[a];ngDevMode&&T(c,"Experting TNode or string"),"string"==typeof c?cu(t[11],t[a],null,c,i,o,u):Za(e,c,t,i,o,t[11],u,!1);break;case 0:const l=t[a];null!==l&&ts(t[11],l,o);break;case 2:ap(e,Zd(e,a),t,o);break;case 3:sp(e,Zd(e,a),r,t)}}}}else{const o=n[i+1];if(o>0&&3==(3&o)){const n=Zd(e,o>>>2);t[n.currentCaseLViewIndex]<0&&sp(e,n,r,t)}}i+=a}}function sp(e,t,n,r){ngDevMode&&k(r,t.currentCaseLViewIndex);let o=r[t.currentCaseLViewIndex];if(null!==o){let i=np;o<0&&(o=r[t.currentCaseLViewIndex]=~o,i=-1),ip(e,r,t.update[o],n,i)}}function ap(e,t,n,r){const o=function(e,t){let n=e.cases.indexOf(t);if(-1===n)switch(e.type){case 1:{const r=function(e,t){const n=Ad(t)(parseInt(e,10)),r=Rd[n];return void 0!==r?r:"other"}(t,Hd);n=e.cases.indexOf(r),-1===n&&"other"!==r&&(n=e.cases.indexOf("other"));break}case 0:n=e.cases.indexOf("other")}return-1===n?null:n}(t,r);if(Yd(t,n)!==o&&(up(e,t,n),n[t.currentCaseLViewIndex]=null===o?null:~o,null!==o)){const r=n[t.anchorIdx];r&&(ngDevMode&&j(r),op(e,t.create[o],n,r))}}function up(e,t,n){let r=Yd(t,n);if(null!==r){const o=t.remove[r];for(let t=0;t<o.length;t++){const r=o[t];if(r>0){const e=mt(r,n);null!==e&&Cs(n[11],e)}else up(e,Zd(e,~r),n)}}}function cp(){const e=[];let t,n,r=-1;function o(e,t){r=0;const o=Yd(e,t);null!==o?(ngDevMode&&w(o,0,e.cases.length-1),n=e.remove[o]):n=ue}function i(){if(r<n.length){const s=n[r++];if(ngDevMode&&_(s,"Expecting OpCode number"),s>0){const e=t[s];return ngDevMode&&j(e),e}{e.push(r,n);const a=~s,u=t[1].data[a];return ngDevMode&&Ue(u),o(u,t),i()}}return 0===e.length?null:(n=e.pop(),r=e.pop(),i())}return function(n,r){for(t=r;e.length;)e.pop();return ngDevMode&&Ve(n,r),o(n.value,r),i}}function lp(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const r=t[e++],o=t[e],i=(r&$d.COMMENT)===$d.COMMENT,s=(r&$d.APPEND_EAGERLY)===$d.APPEND_EAGERLY,a=r>>>$d.SHIFT;n.push(`lView[${a}] = document.${i?"createComment":"createText"}(${JSON.stringify(o)});`),s&&n.push(`parent.appendChild(lView[${a}]);`)}return n}function fp(e){const t=new hp(e||(Array.isArray(this)?this:[]));let n=[];function r(e){const n=e>>>2;switch(3&e){case 0:return`(lView[${n}] as Text).textContent = $$$`;case 1:const e=t.consumeString(),r=t.consumeFunction();return`(lView[${n}] as Element).setAttribute('${e}', ${r?`(${r})($$$)`:"$$$"})`;case 2:return`icuSwitchCase(${n}, $$$)`;case 3:return`icuUpdateCase(${n})`}throw new Error("unexpected OpCode")}for(;t.hasMore();){let e=t.consumeNumber(),o=t.consumeNumber();const i=t.i+o,s=[];let a="";for(;t.i<i;){let e=t.consumeNumberOrString();if("string"==typeof e)a+=e;else if(e<0)a+="${lView[i"+e+"]}";else{const t=r(e);s.push(t.replace("$$$","`"+a+"`")+";"),a=""}}n.push(`if (mask & 0b${e.toString(2)}) { ${s.join(" ")} }`)}return n}function dp(e){const t=new hp(e||(Array.isArray(this)?this:[]));let n=[];function r(e){const n=Xd(e),r=ep(e);switch(tp(e)){case 0:return`(lView[${n}] as Element).appendChild(lView[${o}])`;case 1:return`(lView[${r}] as Element).setAttribute("${t.consumeString()}", "${t.consumeString()}")`}throw new Error("Unexpected OpCode: "+tp(e))}let o=-1;for(;t.hasMore();){let e=t.consumeNumberStringOrMarker();if(e===Vd){const e=t.consumeString();o=t.consumeNumber(),n.push(`lView[${o}] = document.createComment("${e}")`)}else if(e===Ld){const e=t.consumeString();o=t.consumeNumber(),n.push(`lView[${o}] = document.createElement("${e}")`)}else if("string"==typeof e)o=t.consumeNumber(),n.push(`lView[${o}] = document.createTextNode("${e}")`);else{if("number"!=typeof e)throw new Error("Unexpected value");{const t=r(e);t&&n.push(t)}}}return n}function pp(e){const t=e||(Array.isArray(this)?this:[]);let n=[];for(let e=0;e<t.length;e++){const r=t[e];r>0?n.push(`remove(lView[${r}])`):n.push(`removeNestedICU(${~r})`)}return n}class hp{constructor(e){this.i=0,this.codes=e}hasMore(){return this.i<this.codes.length}consumeNumber(){let e=this.codes[this.i++];return _(e,"expecting number in OpCode"),e}consumeString(){let e=this.codes[this.i++];return M(e,"expecting string in OpCode"),e}consumeFunction(){let e=this.codes[this.i++];if(null===e||"function"==typeof e)return e;throw new Error("expecting function in OpCode")}consumeNumberOrString(){let e=this.codes[this.i++];return"string"==typeof e||_(e,"expecting number or string in OpCode"),e}consumeNumberStringOrMarker(){let e=this.codes[this.i++];return"string"==typeof e||"number"==typeof e||e==Vd||e==Ld||_(e,"expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode"),e}}const vp=/�(\d+):?\d*�/gi,yp=/({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi,gp=/�(\d+)�/,bp=/^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/,mp=/�\/?\*(\d+:\d+)�/gi,_p=/�(\/?[#*]\d+):?\d*�/gi,wp=/\uE500/g;function Mp(e,t,n,r,o,i,s){const a=Fa(e,r,1,null);let u=a<<$d.SHIFT,c=Lt();t===c&&(c=null),null===c&&(u|=$d.APPEND_EAGERLY),s&&(u|=$d.COMMENT,void 0===qi&&(qi=cp())),o.push(u,null===i?"":i);const l=Ra(e,a,s?32:1,null===i?ngDevMode?"{{?}}":"":i,null);zd(n,l);const f=l.index;return Vt(l,!1),null!==c&&t!==c&&function(e,t){ngDevMode&&He(e);let n=e.insertBeforeIndex;null===n?(bs(Bd,Wd),n=e.insertBeforeIndex=[null,t]):(C(Array.isArray(n),!0,"Expecting array here"),n.push(t))}(c,f),l}function Cp(e,t,n,r,o,i,s){const a=s.match(vp),u=Mp(e,t,n,i,r,a?null:s,!1);a&&xp(o,s,u.index,null,0,null)}function xp(e,t,n,r,o,i){ngDevMode&&P(n,Te,"Index must be in absolute LView offset");const s=e.length,a=s+1;e.push(null,null);const u=s+2;ngDevMode&&ea(e,fp);const c=t.split(vp);let l=0;for(let t=0;t<c.length;t++){const n=c[t];if(1&t){const t=o+parseInt(n,10);e.push(-1-t),l|=Dp(t)}else""!==n&&e.push(n)}return e.push(n<<2|(r?1:0)),r&&e.push(r,i),e[s]=l,e[a]=e.length-u,l}function Op(e){let t=0;for(let n=0;n<e.length;n++){const r=e[n];"number"==typeof r&&r<0&&t++}return t}function Dp(e){return 1<<Math.min(e,31)}function Sp(e){let t,n,r="",o=0,i=!1;for(;null!==(t=mp.exec(e));)i?t[0]===`�/*${n}�`&&(o=t.index,i=!1):(r+=e.substring(o,t.index+t[0].length),n=t[1],i=!0);return ngDevMode&&C(i,!1,`Tag mismatch: unable to find the end of the sub-template in the translation "${e}"`),r+=e.substr(o),r}function Ep(e,t,n,r,o,i){ngDevMode&&T(o,"ICU expression must be defined");let s=0;const a={type:o.type,currentCaseLViewIndex:Fa(e,t,1,null),anchorIdx:i,cases:[],create:[],remove:[],update:[]};!function(e,t,n){e.push(Dp(t.mainBinding),2,-1-t.mainBinding,n<<2|2)}(n,o,i),function(e,t,n){const r=e.data[t];ngDevMode&&C(null===r||r.hasOwnProperty("tViews"),!0,"We expect to get 'null'|'TIcuContainer'"),null===r?e.data[t]=n:(ngDevMode&&On(r,32),r.value=n)}(e,i,a);const u=o.values;for(let i=0;i<u.length;i++){const c=u[i],l=[];for(let e=0;e<c.length;e++){const t=c[e];if("string"!=typeof t){const n=l.push(t)-1;c[e]=`\x3c!--�${n}�--\x3e`}}s=Tp(e,a,t,n,r,o.cases[i],c.join(""),l)|s}s&&function(e,t,n){e.push(t,1,n<<2|3)}(n,s,i)}function Ip(e){const t=[],n=[];let r=1,o=0;const i=Pp(e=e.replace(bp,(function(e,t,n){return r="select"===n?0:1,o=parseInt(t.substr(1),10),""})));for(let e=0;e<i.length;){let o=i[e++].trim();1===r&&(o=o.replace(/\s*(?:=)?(\w+)\s*/,"$1")),o.length&&t.push(o);const s=Pp(i[e++]);t.length>n.length&&n.push(s)}return{type:r,mainBinding:o,cases:t,values:n}}function Pp(e){if(!e)return[];let t=0;const n=[],r=[],o=/[{}]/g;let i;for(o.lastIndex=0;i=o.exec(e);){const o=i.index;if("}"==i[0]){if(n.pop(),0==n.length){const n=e.substring(t,o);bp.test(n)?r.push(Ip(n)):r.push(n),t=o+1}}else{if(0==n.length){const n=e.substring(t,o);r.push(n),t=o+1}n.push("{")}}const s=e.substring(t);return r.push(s),r}function Tp(e,t,n,r,o,i,s,a){const u=[],c=[],l=[];ngDevMode&&(ea(u,dp),ea(c,pp),ea(l,fp)),t.cases.push(i),t.create.push(u),t.remove.push(c),t.update.push(l);const f=jo(ht()).getInertBodyElement(s);ngDevMode&&T(f,"Unable to generate inert body element");const d=ai(f)||f;return d?Ap(e,t,n,r,u,c,l,d,o,a,0):0}function Ap(e,t,n,r,o,i,s,a,u,c,l){let f=0,d=a.firstChild;for(;d;){const a=Fa(e,n,1,null);switch(d.nodeType){case Node.ELEMENT_NODE:const p=d,h=p.tagName.toLowerCase();if(Go.hasOwnProperty(h)){Np(o,Ld,h,u,a),e.data[a]=h;const v=p.attributes;for(let e=0;e<v.length;e++){const t=v.item(e),n=t.name.toLowerCase();t.value.match(vp)?Xo.hasOwnProperty(n)?Jo[n]?xp(s,t.value,a,t.name,0,Lo):Zo[n]?xp(s,t.value,a,t.name,0,Vo):xp(s,t.value,a,t.name,0,null):ngDevMode&&console.warn(`WARNING: ignoring unsafe attribute value ${n} on element ${h} (see https://g.co/ng/security#xss)`):Rp(o,a,t)}f=Ap(e,t,n,r,o,i,s,d,a,c,l+1)|f,jp(i,a,l)}break;case Node.TEXT_NODE:const v=d.textContent||"",y=v.match(vp);Np(o,null,y?"":v,u,a),jp(i,a,l),y&&(f=xp(s,v,a,null,0,null)|f);break;case Node.COMMENT_NODE:const g=gp.exec(d.textContent||"");if(g){const t=parseInt(g[1],10),s=c[t];Np(o,Vd,ngDevMode?`nested ICU ${t}`:"",u,a),Ep(e,n,r,u,s,a),kp(i,a,l)}}d=d.nextSibling}return f}function jp(e,t,n){0===n&&e.push(t)}function kp(e,t,n){0===n&&(e.push(~t),e.push(t))}function Np(e,t,n,r,o){var i,s;null!==t&&e.push(t),e.push(n,o,(0,i=r,s=o,ngDevMode&&P(i,0,"Missing parent index"),ngDevMode&&I(s,0,"Missing ref index"),0|i<<17|s<<1))}function Rp(e,t,n){e.push(t<<1|1,n.name,n.value)}const Fp=/\[(�.+?�?)\]/,Lp=/\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g,Vp=/({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g,$p=/{([A-Z0-9_]+)}/g,Hp=/�I18N_EXP_(ICU(_\d+)?)�/g,Up=/\/\*/,Bp=/\d+\:(\d+)/;function Wp(e,t,n=-1){const r=kt(),o=jt(),i=Te+e;ngDevMode&&T(r,"tView should be defined");const s=Dt(r.consts,t),a=Lt();r.firstCreatePass&&function(e,t,n,r,o,i){const s=Lt(),a=[],u=[],c=[[]];ngDevMode&&(ea(a,lp),ea(u,fp)),o=function(e,t){if(function(e){return-1===e}(t))return Sp(e);{const n=e.indexOf(`:${t}�`)+2+t.toString().length,r=e.search(new RegExp(`�\\/\\*\\d+:${t}�`));return Sp(e.substring(n,r))}}(o,i);const l=(f=o,f.replace(wp," ")).split(_p);var f;for(let i=0;i<l.length;i++){let f=l[i];if(0==(1&i)){const i=Pp(f);for(let l=0;l<i.length;l++){let f=i[l];if(0==(1&l)){const t=f;ngDevMode&&M(t,"Parsed ICU part should be string"),""!==t&&Cp(e,s,c[0],a,u,n,t)}else{const i=f;if("object"!=typeof i)throw new Error(`Unable to parse ICU expression in "${o}" message.`);const l=Mp(e,s,c[0],n,a,ngDevMode?`ICU ${r}:${i.mainBinding}`:"",!0).index;ngDevMode&&P(l,Te,"Index must be in absolute LView offset"),Ep(e,n,u,t,i,l)}}}else{const t=47===f.charCodeAt(0),n=f.charCodeAt(t?1:0);ngDevMode&&N(n,42,35);const r=Te+Number.parseInt(f.substring(t?2:1));if(t)c.shift(),Vt(Lt(),!1);else{const t=Qd(e,c[0],r);c.unshift([]),Vt(t,!0)}}}e.data[r]={create:a,update:u}}(r,null===a?0:a.index,o,i,s,n);const u=r.data[i],c=cs(r,a===o[6]?null:a,o),l=a&&8&a.type?o[a.index]:null;!function(e,t,n,r){const o=e[11];for(let i=0;i<t.length;i++){const s=t[i++],a=t[i],u=(s&$d.COMMENT)===$d.COMMENT,c=(s&$d.APPEND_EAGERLY)===$d.APPEND_EAGERLY,l=s>>>$d.SHIFT;let f=e[l];null===f&&(f=e[l]=u?o.createComment(a):es(o,a)),c&&null!==n&&ls(o,n,f,r,!1)}}(o,u.create,c,l),Jt(!0)}function zp(){Jt(!1)}function qp(e,t,n){Wp(e,t,n),zp()}function Kp(e,t){const n=kt();ngDevMode&&T(n,"tView should be defined");const r=Dt(n.consts,t);!function(e,t,n){const r=Rt().index,o=[];if(ngDevMode&&ea(o,fp),e.firstCreatePass&&null===e.data[t]){for(let e=0;e<n.length;e+=2){const t=n[e],i=n[e+1];if(""!==i){if(yp.test(i))throw new Error(`ICU expressions are not supported in attributes. Message: "${i}".`);xp(o,i,r,t,Op(o),null)}}e.data[t]=o}}(n,e+Te,r)}function Gp(e){return jc(jt(),Kt(),e)&&(np|=1<<Math.min(rp,31)),rp++,Gp}function Jp(e){!function(e,t,n){if(rp>0){ngDevMode&&T(e,"tView should be defined");const r=e.data[n];ip(e,t,Array.isArray(r)?r:r.update,zt()-rp-1,np)}np=0,rp=0}(kt(),jt(),e+Te)}function Zp(e,t={}){return function(e,t={}){let n=e;if(Fp.test(e)){const e={},t=[0];n=n.replace(Lp,((n,r,o)=>{const i=r||o,s=e[i]||[];if(s.length||(i.split("|").forEach((e=>{const t=e.match(Bp),n=t?parseInt(t[1],10):0,r=Up.test(e);s.push([n,r,e])})),e[i]=s),!s.length)throw new Error(`i18n postprocess: unmatched placeholder - ${i}`);const a=t[t.length-1];let u=0;for(let e=0;e<s.length;e++)if(s[e][0]===a){u=e;break}const[c,l,f]=s[u];return l?t.pop():a!==c&&t.push(c),s.splice(u,1),f}))}return Object.keys(t).length?(n=n.replace(Vp,((e,n,r,o,i,s)=>t.hasOwnProperty(r)?`${n}${t[r]}${s}`:e)),n=n.replace($p,((e,n)=>t.hasOwnProperty(n)?t[n]:e)),n=n.replace(Hp,((e,n)=>{if(t.hasOwnProperty(n)){const r=t[n];if(!r.length)throw new Error(`i18n postprocess: unmatched ICU - ${e} with key: ${n}`);return r.shift()}return e})),n):n}(e,t)}function Qp(e,t,n,r,o){if(e=f(e),Array.isArray(e))for(let i=0;i<e.length;i++)Qp(e[i],t,n,r,o);else{const i=kt(),s=jt();let a=Gu(e)?e:f(e.provide),u=zu(e);const c=Rt(),l=1048575&c.providerIndexes,d=c.directiveStart,p=c.providerIndexes>>20;if(Gu(e)||!e.multi){const r=new Cn(u,o,Tl),f=eh(a,t,o?l:l+p,d);-1===f?(Hn(Fn(c,s),i,a),Yp(i,e,t.length),t.push(a),c.directiveStart++,c.directiveEnd++,o&&(c.providerIndexes+=1048576),n.push(r),s.push(r)):(n[f]=r,s[f]=r)}else{const f=eh(a,t,l+p,d),h=eh(a,t,l,l+p),v=f>=0&&n[f],y=h>=0&&n[h];if(o&&!y||!o&&!v){Hn(Fn(c,s),i,a);const l=function(e,t,n,r,o){const i=new Cn(e,n,Tl);return i.multi=[],i.index=t,i.componentProviders=0,Xp(i,o,r&&!n),i}(o?nh:th,n.length,o,r,u);!o&&y&&(n[h].providerFactory=l),Yp(i,e,t.length,0),t.push(a),c.directiveStart++,c.directiveEnd++,o&&(c.providerIndexes+=1048576),n.push(l),s.push(l)}else Yp(i,e,f>-1?f:h,Xp(n[o?h:f],u,!o&&r));!o&&r&&y&&n[h].componentProviders++}}}function Yp(e,t,n,r){const o=Gu(t),i=!!t.useClass;if(o||i){const s=(i?f(t.useClass):t).prototype.ngOnDestroy;if(s){const i=e.destroyHooks||(e.destroyHooks=[]);if(!o&&t.multi){ngDevMode&&T(r,"indexInFactory when registering multi factory destroy hook");const e=i.indexOf(n);-1===e?i.push(n,[r,s]):i[e+1].push(r,s)}else i.push(n,s)}}}function Xp(e,t,n){return n&&e.componentProviders++,e.multi.push(t)-1}function eh(e,t,n,r){for(let o=n;o<r;o++)if(t[o]===e)return o;return-1}function th(e,t,n,r){return rh(this.multi,[])}function nh(e,t,n,r){const o=this.multi;let i;if(this.providerFactory){const e=this.providerFactory.componentProviders,t=Jn(n,n[1],this.providerFactory.index,r);i=t.slice(0,e),rh(o,i);for(let n=e;n<t.length;n++)i.push(t[n])}else i=[],rh(o,i);return i}function rh(e,t){for(let n=0;n<e.length;n++){const r=e[n];t.push(r())}return t}function oh(e,t=[]){return n=>{n.providersResolver=(n,r)=>function(e,t,n){const r=kt();if(r.firstCreatePass){const o=Le(e);Qp(n,r.data,r.blueprint,o,!0),Qp(t,r.data,r.blueprint,o,!1)}}(n,r?r(e):e,t)}}class ih{}class sh{}class ah{resolveComponentFactory(e){throw function(e){const t=Error(`No component factory found for ${a(e)}. Did you add it to @NgModule.entryComponents?`);return t.ngComponent=e,t}(e)}}class uh{}function ch(e,t){return new lh(_t(e,t))}uh.NULL=new ah;class lh{constructor(e){this.nativeElement=e}}function fh(e){return e instanceof lh?e.nativeElement:e}lh.__NG_ELEMENT_ID__=function(){return ch(Rt(),jt())},new lr("Renderer2Interceptor");class dh{}class ph{}ph.__NG_ELEMENT_ID__=()=>function(){const e=jt(),t=Ct(Rt().index,e);return function(e){const t=e[11];if(ngDevMode&&!yt(t))throw new Error("Cannot inject Renderer2 when the application uses Renderer3!");return t}(je(t)?t:e)}();class hh{}hh.ɵprov=R({token:hh,providedIn:"root",factory:()=>null});class vh{constructor(e){this.full=e,this.major=e.split(".")[0],this.minor=e.split(".")[1],this.patch=e.split(".").slice(2).join(".")}}const yh=new vh("13.2.6"),gh={};function bh(e,t,n,r,o=!1){for(;null!==n;){ngDevMode&&On(n,63);const i=t[n.index];if(null!==i&&r.push(bt(i)),ke(i))for(let e=Pe;e<i.length;e++){const t=i[e],n=t[1].firstChild;null!==n&&bh(t[1],t,n,r)}const s=n.type;if(8&s)bh(e,t,n.child,r);else if(32&s){const e=Ki(n,t);let o;for(;o=e();)r.push(o)}else if(16&s){const e=ws(t,n);if(Array.isArray(e))r.push(...e);else{const n=Gi(t[16]);ngDevMode&&Ye(n),bh(n[1],n,e,r,!0)}}n=o?n.projectionNext:n.next}return r}class mh{constructor(e,t){this._lView=e,this._cdRefInjectingView=t,this._appRef=null,this._attachedToViewContainer=!1}get rootNodes(){const e=this._lView,t=e[1];return bh(t,e,t.firstChild,[])}get context(){return this._lView[8]}set context(e){this._lView[8]=e}get destroyed(){return 256==(256&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._attachedToViewContainer){const e=this._lView[3];if(ke(e)){const t=e[8],n=t?t.indexOf(this):-1;n>-1&&(ngDevMode&&C(n,e.indexOf(this._lView)-Pe,"An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array."),is(e,n),Or(t,n))}this._attachedToViewContainer=!1}ss(this._lView[1],this._lView)}onDestroy(e){Ga(this._lView[1],this._lView,null,e)}markForCheck(){bu(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-129}reattach(){this._lView[2]|=128}detectChanges(){_u(this._lView[1],this._lView,this.context)}checkNoChanges(){!function(e,t,n){Bt(!0);try{_u(e,t,n)}finally{Bt(!1)}}(this._lView[1],this._lView,this.context)}attachToViewContainerRef(){if(this._appRef){const e=ngDevMode?"This view is already attached directly to the ApplicationRef!":"";throw new p(902,e)}this._attachedToViewContainer=!0}detachFromAppRef(){var e;this._appRef=null,Os(this._lView[1],e=this._lView,e[11],2,null,null)}attachToAppRef(e){if(this._attachedToViewContainer){const e=ngDevMode?"This view is already attached to a ViewContainer!":"";throw new p(902,e)}this._appRef=e}}class _h extends mh{constructor(e){super(e),this._view=e}detectChanges(){wu(this._view)}checkNoChanges(){!function(e){Bt(!0);try{wu(e)}finally{Bt(!1)}}(this._view)}get context(){return null}}class wh extends uh{constructor(e){super(),this.ngModule=e}resolveComponentFactory(e){ngDevMode&&Be(e);const t=De(e);return new Ch(t,this.ngModule)}}function Mh(e){const t=[];for(let n in e)if(e.hasOwnProperty(n)){const r=e[n];t.push({propName:r,templateName:n})}return t}class Ch extends sh{constructor(e,t){super(),this.componentDef=e,this.ngModule=t,this.componentType=e.type,this.selector=e.selectors.map($s).join(","),this.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],this.isBoundToModule=!!t}get inputs(){return Mh(this.componentDef.inputs)}get outputs(){return Mh(this.componentDef.outputs)}create(e,t,n,r){const o=(r=r||this.ngModule)?function(e,t){return{get:(n,r,o)=>{const i=e.get(n,gh,o);return i!==gh||r===gh?i:t.get(n,r,o)}}}(e,r.injector):e,i=o.get(dh,gt),s=o.get(hh,null),a=i.createRenderer(null,this.componentDef),u=this.componentDef.selectors[0][0]||"div",c=n?Ka(a,n,this.componentDef.encapsulation):rs(i.createRenderer(null,this.componentDef),u,function(e){const t=e.toLowerCase();return"svg"===t?lt:"math"===t?ft:null}(u)),l=this.componentDef.onPush?576:528,f=hc(),d=qa(0,null,null,1,0,null,null,null,null,null),p=ka(null,d,f,l,null,null,i,a,s,o);let h,v;rn(p);try{const e=dc(c,this.componentDef,p,i,a);if(c)if(n)Dn(a,c,["ng-version",yh.full]);else{const{attrs:e,classes:t}=function(e){const t=[],n=[];let r=1,o=2;for(;r<e.length;){let i=e[r];if("string"==typeof i)2===o?""!==i&&t.push(i,e[++r]):8===o&&n.push(i);else{if(!Ns(o))break;o=i}r++}return{attrs:t,classes:n}}(this.componentDef.selectors[0]);e&&Dn(a,c,e),t&&t.length>0&&Es(a,c,t.join(" "))}if(v=wt(d,Te),void 0!==t){const e=v.projection=[];for(let n=0;n<this.ngContentSelectors.length;n++){const r=t[n];e.push(null!=r?Array.from(r):null)}}h=pc(e,this.componentDef,p,f,[vc]),La(d,p,null)}finally{cn()}return new xh(this.componentType,h,ch(v,p),p,v)}}new wh;class xh extends ih{constructor(e,t,n,r,o){super(),this.location=n,this._rootLView=r,this._tNode=o,this.instance=t,this.hostView=this.changeDetectorRef=new _h(r),this.componentType=e}get injector(){return new Yn(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(e){this.hostView.onDestroy(e)}}function Oh(e,t,n,r){return Z((()=>{const o=e;null!==t&&(o.hasOwnProperty("decorators")&&void 0!==o.decorators?o.decorators.push(...t):o.decorators=t),null!==n&&(o.ctorParameters=n),null!==r&&(o.hasOwnProperty("propDecorators")&&void 0!==o.propDecorators?o.propDecorators=Object.assign(Object.assign({},o.propDecorators),r):o.propDecorators=r)}))}class Dh{}class Sh{}const Eh=new Map;function Ih(e){const t=new Set;!function e(n){const r=Ie(n,!0),o=r.id;if(null!==o){(function(e,t,n){if(t&&t!==n)throw new Error(`Duplicate module registered for ${e} - ${a(t)} vs ${a(t.name)}`)})(o,Eh.get(o),n),Eh.set(o,n)}const i=Ui(r.imports);for(const n of i)t.has(n)||(t.add(n),e(n))}(e)}function Ph(e){return Eh.get(e)||_e[e]}function Th(e,t){return new Ah(e,null!=t?t:null)}class Ah extends Dh{constructor(e,t){super(),this._parent=t,this._bootstrapComponents=[],this.injector=this,this.destroyCbs=[],this.componentFactoryResolver=new wh(this);const n=Ie(e);ngDevMode&&T(n,`NgModule '${a(e)}' is not a subtype of 'NgModuleType'.`),this._bootstrapComponents=Ui(n.bootstrap),this._r3Injector=Uu(e,t,[{provide:Dh,useValue:this},{provide:uh,useValue:this.componentFactoryResolver}],a(e)),this._r3Injector._resolveInjectorDefTypes(),this.instance=this.get(e)}get(e,t=Ju.THROW_IF_NOT_FOUND,n=q.Default){return e===Ju||e===Dh||e===ku?this:this._r3Injector.get(e,t,n)}destroy(){ngDevMode&&T(this.destroyCbs,"NgModule already destroyed");const e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach((e=>e())),this.destroyCbs=null}onDestroy(e){ngDevMode&&T(this.destroyCbs,"NgModule already destroyed"),this.destroyCbs.push(e)}}class jh extends Sh{constructor(e){super(),this.moduleType=e,null!==Ie(e)&&Ih(e)}create(e){return new Ah(this.moduleType,e)}}function kh(e,t,n){const r=Wt()+e,o=jt();return o[r]===Hs?Tc(o,r,n?t.call(n):t()):Ac(o,r)}function Nh(e,t,n,r){return zh(jt(),Wt(),e,t,n,r)}function Rh(e,t,n,r,o){return qh(jt(),Wt(),e,t,n,r,o)}function Fh(e,t,n,r,o,i){return Kh(jt(),Wt(),e,t,n,r,o,i)}function Lh(e,t,n,r,o,i,s){return Gh(jt(),Wt(),e,t,n,r,o,i,s)}function Vh(e,t,n,r,o,i,s,a){const u=Wt()+e,c=jt(),l=Rc(c,u,n,r,o,i);return jc(c,u+4,s)||l?Tc(c,u+5,a?t.call(a,n,r,o,i,s):t(n,r,o,i,s)):Ac(c,u+5)}function $h(e,t,n,r,o,i,s,a,u){const c=Wt()+e,l=jt(),f=Rc(l,c,n,r,o,i);return kc(l,c+4,s,a)||f?Tc(l,c+6,u?t.call(u,n,r,o,i,s,a):t(n,r,o,i,s,a)):Ac(l,c+6)}function Hh(e,t,n,r,o,i,s,a,u,c){const l=Wt()+e,f=jt();let d=Rc(f,l,n,r,o,i);return Nc(f,l+4,s,a,u)||d?Tc(f,l+7,c?t.call(c,n,r,o,i,s,a,u):t(n,r,o,i,s,a,u)):Ac(f,l+7)}function Uh(e,t,n,r,o,i,s,a,u,c,l){const f=Wt()+e,d=jt(),p=Rc(d,f,n,r,o,i);return Rc(d,f+4,s,a,u,c)||p?Tc(d,f+8,l?t.call(l,n,r,o,i,s,a,u,c):t(n,r,o,i,s,a,u,c)):Ac(d,f+8)}function Bh(e,t,n,r){return Jh(jt(),Wt(),e,t,n,r)}function Wh(e,t){ngDevMode&&k(e,t);const n=e[t];return n===Hs?void 0:n}function zh(e,t,n,r,o,i){const s=t+n;return jc(e,s,o)?Tc(e,s+1,i?r.call(i,o):r(o)):Wh(e,s+1)}function qh(e,t,n,r,o,i,s){const a=t+n;return kc(e,a,o,i)?Tc(e,a+2,s?r.call(s,o,i):r(o,i)):Wh(e,a+2)}function Kh(e,t,n,r,o,i,s,a){const u=t+n;return Nc(e,u,o,i,s)?Tc(e,u+3,a?r.call(a,o,i,s):r(o,i,s)):Wh(e,u+3)}function Gh(e,t,n,r,o,i,s,a,u){const c=t+n;return Rc(e,c,o,i,s,a)?Tc(e,c+4,u?r.call(u,o,i,s,a):r(o,i,s,a)):Wh(e,c+4)}function Jh(e,t,n,r,o,i){let s=t+n,a=!1;for(let t=0;t<o.length;t++)jc(e,s++,o[t])&&(a=!0);return a?Tc(e,s,r.apply(i,o)):Wh(e,s)}function Zh(e,t){const n=kt();let r;const o=e+Te;n.firstCreatePass?(r=function(e,t){if(t)for(let n=t.length-1;n>=0;n--){const r=t[n];if(e===r.name)return r}if(ngDevMode){const t=jt()[16][8],n=t?` in the '${t.constructor.name}' component`:"";throw new p(-302,`The pipe '${e}' could not be found${n}!`)}}(t,n.pipeRegistry),n.data[o]=r,r.onDestroy&&(n.destroyHooks||(n.destroyHooks=[])).push(o,r.onDestroy)):r=n.data[o];const i=r.factory||(r.factory=et(r.type,!0)),s=G(Tl);try{const e=Nn(!1),t=i();return Nn(e),rl(n,jt(),o,t),t}finally{G(s)}}function Qh(e,t,n){const r=e+Te,o=jt(),i=Mt(o,r);return nv(o,r)?zh(o,Wt(),t,i.transform,n,i):i.transform(n)}function Yh(e,t,n,r){const o=e+Te,i=jt(),s=Mt(i,o);return nv(i,o)?qh(i,Wt(),t,s.transform,n,r,s):s.transform(n,r)}function Xh(e,t,n,r,o){const i=e+Te,s=jt(),a=Mt(s,i);return nv(s,i)?Kh(s,Wt(),t,a.transform,n,r,o,a):a.transform(n,r,o)}function ev(e,t,n,r,o,i){const s=e+Te,a=jt(),u=Mt(a,s);return nv(a,s)?Gh(a,Wt(),t,u.transform,n,r,o,i,u):u.transform(n,r,o,i)}function tv(e,t,n){const r=e+Te,o=jt(),i=Mt(o,r);return nv(o,r)?Jh(o,Wt(),t,i.transform,n,i):i.transform.apply(i,n)}function nv(e,t){return e[1].data[t].pure}class rv extends r.Subject{constructor(e=!1){super(),this.__isAsync=e}emit(e){super.next(e)}subscribe(e,t,n){var o,i,s;let a=e,u=t||(()=>null),c=n;if(e&&"object"==typeof e){const t=e;a=null===(o=t.next)||void 0===o?void 0:o.bind(t),u=null===(i=t.error)||void 0===i?void 0:i.bind(t),c=null===(s=t.complete)||void 0===s?void 0:s.bind(t)}this.__isAsync&&(u=ov(u),a&&(a=ov(a)),c&&(c=ov(c)));const l=super.subscribe({next:a,error:u,complete:c});return e instanceof r.Subscription&&e.add(l),l}}function ov(e){return t=>{setTimeout(e,void 0,t)}}const iv=rv;function sv(){return this._results[Sc()]()}class av{constructor(e=!1){this._emitDistinctChangesOnly=e,this.dirty=!0,this._results=[],this._changesDetected=!1,this._changes=null,this.length=0,this.first=void 0,this.last=void 0;const t=Sc(),n=av.prototype;n[t]||(n[t]=sv)}get changes(){return this._changes||(this._changes=new iv)}get(e){return this._results[e]}map(e){return this._results.map(e)}filter(e){return this._results.filter(e)}find(e){return this._results.find(e)}reduce(e,t){return this._results.reduce(e,t)}forEach(e){this._results.forEach(e)}some(e){return this._results.some(e)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(e,t){const n=this;n.dirty=!1;const r=Mr(e);(this._changesDetected=!function(e,t,n){if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++){let o=e[r],i=t[r];if(n&&(o=n(o),i=n(i)),i!==o)return!1}return!0}(n._results,r,t))&&(n._results=r,n.length=r.length,n.last=r[this.length-1],n.first=r[0])}notifyOnChanges(){!this._changes||!this._changesDetected&&this._emitDistinctChangesOnly||this._changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}Symbol.iterator;class uv{}uv.__NG_ELEMENT_ID__=function(){return fv(Rt(),jt())};const cv=uv,lv=class extends cv{constructor(e,t,n){super(),this._declarationLView=e,this._declarationTContainer=t,this.elementRef=n}createEmbeddedView(e){const t=this._declarationTContainer.tViews,n=ka(this._declarationLView,t,e,16,null,t.declTNode,null,null,null,null),r=this._declarationLView[this._declarationTContainer.index];ngDevMode&&ze(r),n[17]=r;const o=this._declarationLView[19];return null!==o&&(n[19]=o.createEmbeddedView(t)),La(t,n,e),new mh(n)}};function fv(e,t){return 4&e.type?(ngDevMode&&T(e.tViews,"TView must be allocated"),new lv(t,e,ch(e,t))):null}class dv{}dv.__NG_ELEMENT_ID__=function(){return gv(Rt(),jt())};const pv=dv,hv=class extends pv{constructor(e,t,n){super(),this._lContainer=e,this._hostTNode=t,this._hostLView=n}get element(){return ch(this._hostTNode,this._hostLView)}get injector(){return new Yn(this._hostTNode,this._hostLView)}get parentInjector(){const e=$n(this._hostTNode,this._hostLView);if(Tn(e)){const t=jn(e,this._hostLView),n=An(e);ngDevMode&&Xe(t,n);const r=t[1].data[n+8];return new Yn(r,t)}return new Yn(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(e){const t=vv(this._lContainer);return null!==t&&t[e]||null}get length(){return this._lContainer.length-Pe}createEmbeddedView(e,t,n){const r=e.createEmbeddedView(t||{});return this.insert(r,n),r}createComponent(e,t,n,r,o){const i=e&&!wr(e);let s;if(i)ngDevMode&&C("object"!=typeof t,!0,"It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)"),s=t;else{ngDevMode&&(T(De(e),"Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator."),C("number"!=typeof t,!0,"It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead."));const i=t||{};s=i.index,n=i.injector,r=i.projectableNodes,o=i.ngModuleRef}const a=i?e:new Ch(De(e)),u=n||this.parentInjector;if(!o&&null==a.ngModule){const e=(i?u:this.parentInjector).get(Dh,null);e&&(o=e)}const c=a.create(u,r,void 0,o);return this.insert(c.hostView,s),c}insert(e,t){const n=e._lView,r=n[1];if(ngDevMode&&e.destroyed)throw new Error("Cannot insert a destroyed View in a ViewContainer!");if(ke(n[3])){const t=this.indexOf(e);if(-1!==t)this.detach(t);else{const t=n[3];ngDevMode&&C(ke(t),!0,"An attached view should have its PARENT point to a container.");const r=new hv(t,t[6],t[3]);r.detach(r.indexOf(e))}}const o=this._adjustIndex(t),i=this._lContainer;!function(e,t,n,r){ngDevMode&&Ke(t),ngDevMode&&ze(n);const o=Pe+r,i=n.length;r>0&&(n[o-1][4]=t),r<i-Pe?(t[4]=n[o],xr(n,Pe+r,t)):(n.push(t),t[4]=null),t[3]=n;const s=t[17];null!==s&&n!==s&&function(e,t){ngDevMode&&T(t,"LView required"),ngDevMode&&ze(e);const n=e[9],r=t[3];ngDevMode&&ze(r);const o=r[3][16];ngDevMode&&T(o,"Missing insertedComponentLView");const i=t[16];ngDevMode&&T(i,"Missing declaredComponentLView"),i!==o&&(e[2]=!0),null===n?e[9]=[t]:n.push(t)}(s,t);const a=t[19];null!==a&&a.insertView(e),t[2]|=128}(r,n,i,o);const s=Ms(o,i),a=n[11],u=ps(a,i[7]);return null!==u&&function(e,t,n,r,o,i){r[0]=o,r[6]=t,Os(e,r,n,1,o,i)}(r,i[6],a,n,u,s),e.attachToViewContainerRef(),xr(yv(i),o,e),e}move(e,t){if(ngDevMode&&e.destroyed)throw new Error("Cannot move a destroyed View in a ViewContainer!");return this.insert(e,t)}indexOf(e){const t=vv(this._lContainer);return null!==t?t.indexOf(e):-1}remove(e){const t=this._adjustIndex(e,-1),n=is(this._lContainer,t);n&&(Or(yv(this._lContainer),t),ss(n[1],n))}detach(e){const t=this._adjustIndex(e,-1),n=is(this._lContainer,t);return n&&null!=Or(yv(this._lContainer),t)?new mh(n):null}_adjustIndex(e,t=0){return null==e?this.length+t:(ngDevMode&&(I(e,-1,`ViewRef index must be positive, got ${e}`),S(e,this.length+1+t,"index")),e)}};function vv(e){return e[8]}function yv(e){return e[8]||(e[8]=[])}function gv(e,t){let n;ngDevMode&&On(e,15);const r=t[e.index];if(ke(r))n=r;else{let o;if(8&e.type)o=bt(r);else{const n=t[11];ngDevMode&&ngDevMode.rendererCreateComment++,o=n.createComment(ngDevMode?"container":"");const r=_t(e,t);ls(n,ps(n,r),o,function(e,t){return yt(e)?e.nextSibling(t):t.nextSibling}(n,r),!1)}t[e.index]=n=pu(r,t,o,e),gu(t,n)}return new hv(n,e,t)}class bv{constructor(e){this.queryList=e,this.matches=null}clone(){return new bv(this.queryList)}setDirty(){this.queryList.setDirty()}}class mv{constructor(e=[]){this.queries=e}createEmbeddedView(e){const t=e.queries;if(null!==t){const n=null!==e.contentQueries?e.contentQueries[0]:t.length,r=[];for(let e=0;e<n;e++){const n=t.getByIndex(e),o=this.queries[n.indexInDeclarationView];r.push(o.clone())}return new mv(r)}return null}insertView(e){this.dirtyQueriesWithMatches(e)}detachView(e){this.dirtyQueriesWithMatches(e)}dirtyQueriesWithMatches(e){for(let t=0;t<this.queries.length;t++)null!==jv(e,t).matches&&this.queries[t].setDirty()}}class _v{constructor(e,t,n=null){this.predicate=e,this.flags=t,this.read=n}}class wv{constructor(e=[]){this.queries=e}elementStart(e,t){ngDevMode&&Ge(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].elementStart(e,t)}elementEnd(e){for(let t=0;t<this.queries.length;t++)this.queries[t].elementEnd(e)}embeddedTView(e){let t=null;for(let n=0;n<this.length;n++){const r=null!==t?t.length:0,o=this.getByIndex(n).embeddedTView(e,r);o&&(o.indexInDeclarationView=n,null!==t?t.push(o):t=[o])}return null!==t?new wv(t):null}template(e,t){ngDevMode&&Ge(e,"Queries should collect results on the first template pass only");for(let n=0;n<this.queries.length;n++)this.queries[n].template(e,t)}getByIndex(e){return ngDevMode&&k(this.queries,e),this.queries[e]}get length(){return this.queries.length}track(e){this.queries.push(e)}}class Mv{constructor(e,t=-1){this.metadata=e,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=t}elementStart(e,t){this.isApplyingToNode(t)&&this.matchTNode(e,t)}elementEnd(e){this._declarationNodeIndex===e.index&&(this._appliesToNextNode=!1)}template(e,t){this.elementStart(e,t)}embeddedTView(e,t){return this.isApplyingToNode(e)?(this.crossesNgTemplate=!0,this.addMatch(-e.index,t),new Mv(this.metadata)):null}isApplyingToNode(e){if(this._appliesToNextNode&&1!=(1&this.metadata.flags)){const t=this._declarationNodeIndex;let n=e.parent;for(;null!==n&&8&n.type&&n.index!==t;)n=n.parent;return t===(null!==n?n.index:-1)}return this._appliesToNextNode}matchTNode(e,t){const n=this.metadata.predicate;if(Array.isArray(n))for(let r=0;r<n.length;r++){const o=n[r];this.matchTNodeWithReadOption(e,t,Cv(t,o)),this.matchTNodeWithReadOption(e,t,Gn(t,e,o,!1,!1))}else n===uv?4&t.type&&this.matchTNodeWithReadOption(e,t,-1):this.matchTNodeWithReadOption(e,t,Gn(t,e,n,!1,!1))}matchTNodeWithReadOption(e,t,n){if(null!==n){const r=this.metadata.read;if(null!==r)if(r===lh||r===dv||r===uv&&4&t.type)this.addMatch(t.index,-2);else{const n=Gn(t,e,r,!1,!1);null!==n&&this.addMatch(t.index,n)}else this.addMatch(t.index,n)}}addMatch(e,t){null===this.matches?this.matches=[e,t]:this.matches.push(e,t)}}function Cv(e,t){const n=e.localNames;if(null!==n)for(let e=0;e<n.length;e+=2)if(n[e]===t)return n[e+1];return null}function xv(e,t,n,r){return-1===n?function(e,t){return 11&e.type?ch(e,t):4&e.type?fv(e,t):null}(t,e):-2===n?function(e,t,n){return n===lh?ch(t,e):n===uv?fv(t,e):n===dv?(ngDevMode&&On(t,15),gv(t,e)):void(ngDevMode&&A(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${a(n)}.`))}(e,t,r):Jn(e,e[1],n,t)}function Ov(e,t,n,r){const o=t[19].queries[r];if(null===o.matches){const r=e.data,i=n.matches,s=[];for(let e=0;e<i.length;e+=2){const o=i[e];if(o<0)s.push(null);else{ngDevMode&&k(r,o);const a=r[o];s.push(xv(t,a,i[e+1],n.metadata.read))}}o.matches=s}return o.matches}function Dv(e,t,n,r){const o=e.queries.getByIndex(n),i=o.matches;if(null!==i){const s=Ov(e,t,o,n);for(let e=0;e<i.length;e+=2){const n=i[e];if(n>0)r.push(s[e/2]);else{const o=i[e+1],s=t[-n];ngDevMode&&ze(s);for(let e=Pe;e<s.length;e++){const t=s[e];t[17]===t[3]&&Dv(t[1],t,o,r)}if(null!==s[9]){const e=s[9];for(let t=0;t<e.length;t++){const n=e[t];Dv(n[1],n,o,r)}}}}}return r}function Sv(e){const t=jt(),n=kt(),r=Xt();en(r+1);const o=jv(n,r);if(e.dirty&&xt(t)===(2==(2&o.metadata.flags))){if(null===o.matches)e.reset([]);else{const i=o.crossesNgTemplate?Dv(n,t,r,[]):Ov(n,t,o,r);e.reset(i,fh),e.notifyOnChanges()}return!0}return!1}function Ev(e,t,n){ngDevMode&&_(t,"Expecting flags");const r=kt();r.firstCreatePass&&(Av(r,new _v(e,t,n),-1),2==(2&t)&&(r.staticViewQueries=!0)),Tv(r,jt(),t)}function Iv(e,t,n,r){ngDevMode&&_(n,"Expecting flags");const o=kt();if(o.firstCreatePass){const i=Rt();Av(o,new _v(t,n,r),i.index),function(e,t){const n=e.contentQueries||(e.contentQueries=[]);t!==(n.length?n[n.length-1]:-1)&&n.push(e.queries.length-1,t)}(o,e),2==(2&n)&&(o.staticContentQueries=!0)}Tv(o,jt(),n)}function Pv(){return e=jt(),t=Xt(),ngDevMode&&T(e[19],"LQueries should be defined when trying to load a query"),ngDevMode&&k(e[19].queries,t),e[19].queries[t].queryList;var e,t}function Tv(e,t,n){const r=new av(4==(4&n));Ga(e,t,r,r.destroy),null===t[19]&&(t[19]=new mv),t[19].queries.push(new bv(r))}function Av(e,t,n){null===e.queries&&(e.queries=new wv),e.queries.track(new Mv(t,n))}function jv(e,t){return ngDevMode&&T(e.queries,"TQueries must be defined to retrieve a TQuery"),e.queries.getByIndex(t)}function kv(e,t){return fv(e,t)}const Nv={ɵɵattribute:Fc,ɵɵattributeInterpolate1:Kc,ɵɵattributeInterpolate2:Gc,ɵɵattributeInterpolate3:Jc,ɵɵattributeInterpolate4:Zc,ɵɵattributeInterpolate5:Qc,ɵɵattributeInterpolate6:Yc,ɵɵattributeInterpolate7:Xc,ɵɵattributeInterpolate8:el,ɵɵattributeInterpolateV:tl,ɵɵdefineComponent:ye,ɵɵdefineDirective:xe,ɵɵdefineInjectable:R,ɵɵdefineInjector:L,ɵɵdefineNgModule:we,ɵɵdefinePipe:Oe,ɵɵdirectiveInject:Tl,ɵɵgetInheritedFactory:Xn,ɵɵinject:Wr,ɵɵinjectAttribute:tr,ɵɵinvalidFactory:Al,ɵɵinvalidFactoryDep:zr,ɵɵtemplateRefExtractor:kv,ɵɵNgOnChangesFeature:nt,ɵɵProvidersFeature:oh,ɵɵCopyDefinitionFeature:Oc,ɵɵInheritDefinitionFeature:bc,ɵɵnextContext:Zl,ɵɵnamespaceHTML:vn,ɵɵnamespaceMathML:hn,ɵɵnamespaceSVG:pn,ɵɵenableBindings:Tt,ɵɵdisableBindings:At,ɵɵelementStart:Nl,ɵɵelementEnd:Rl,ɵɵelement:Fl,ɵɵelementContainerStart:Ll,ɵɵelementContainerEnd:Vl,ɵɵelementContainer:$l,ɵɵpureFunction0:kh,ɵɵpureFunction1:Nh,ɵɵpureFunction2:Rh,ɵɵpureFunction3:Fh,ɵɵpureFunction4:Lh,ɵɵpureFunction5:Vh,ɵɵpureFunction6:$h,ɵɵpureFunction7:Hh,ɵɵpureFunction8:Uh,ɵɵpureFunctionV:Bh,ɵɵgetCurrentView:Hl,ɵɵrestoreView:Nt,ɵɵlistener:zl,ɵɵprojection:Xl,ɵɵsyntheticHostProperty:Od,ɵɵsyntheticHostListener:ql,ɵɵpipeBind1:Qh,ɵɵpipeBind2:Yh,ɵɵpipeBind3:Xh,ɵɵpipeBind4:ev,ɵɵpipeBindV:tv,ɵɵprojectionDef:Yl,ɵɵhostProperty:xd,ɵɵproperty:jl,ɵɵpropertyInterpolate:ef,ɵɵpropertyInterpolate1:tf,ɵɵpropertyInterpolate2:nf,ɵɵpropertyInterpolate3:rf,ɵɵpropertyInterpolate4:of,ɵɵpropertyInterpolate5:sf,ɵɵpropertyInterpolate6:af,ɵɵpropertyInterpolate7:uf,ɵɵpropertyInterpolate8:cf,ɵɵpropertyInterpolateV:lf,ɵɵpipe:Zh,ɵɵqueryRefresh:Sv,ɵɵviewQuery:Ev,ɵɵloadQuery:Pv,ɵɵcontentQuery:Iv,ɵɵreference:ol,ɵɵclassMap:Sf,ɵɵclassMapInterpolate1:Qf,ɵɵclassMapInterpolate2:Yf,ɵɵclassMapInterpolate3:Xf,ɵɵclassMapInterpolate4:ed,ɵɵclassMapInterpolate5:td,ɵɵclassMapInterpolate6:nd,ɵɵclassMapInterpolate7:rd,ɵɵclassMapInterpolate8:od,ɵɵclassMapInterpolateV:id,ɵɵstyleMap:Of,ɵɵstyleMapInterpolate1:sd,ɵɵstyleMapInterpolate2:ad,ɵɵstyleMapInterpolate3:ud,ɵɵstyleMapInterpolate4:cd,ɵɵstyleMapInterpolate5:ld,ɵɵstyleMapInterpolate6:fd,ɵɵstyleMapInterpolate7:dd,ɵɵstyleMapInterpolate8:pd,ɵɵstyleMapInterpolateV:hd,ɵɵstyleProp:Cf,ɵɵstylePropInterpolate1:vd,ɵɵstylePropInterpolate2:yd,ɵɵstylePropInterpolate3:gd,ɵɵstylePropInterpolate4:bd,ɵɵstylePropInterpolate5:md,ɵɵstylePropInterpolate6:_d,ɵɵstylePropInterpolate7:wd,ɵɵstylePropInterpolate8:Md,ɵɵstylePropInterpolateV:Cd,ɵɵclassProp:xf,ɵɵadvance:Us,ɵɵtemplate:nl,ɵɵtext:$f,ɵɵtextInterpolate:Hf,ɵɵtextInterpolate1:Uf,ɵɵtextInterpolate2:Bf,ɵɵtextInterpolate3:Wf,ɵɵtextInterpolate4:zf,ɵɵtextInterpolate5:qf,ɵɵtextInterpolate6:Kf,ɵɵtextInterpolate7:Gf,ɵɵtextInterpolate8:Jf,ɵɵtextInterpolateV:Zf,ɵɵi18n:qp,ɵɵi18nAttributes:Kp,ɵɵi18nExp:Gp,ɵɵi18nStart:Wp,ɵɵi18nEnd:zp,ɵɵi18nApply:Jp,ɵɵi18nPostprocess:Zp,ɵɵresolveWindow:Li,ɵɵresolveDocument:Vi,ɵɵresolveBody:$i,ɵɵsetComponentScope:ge,ɵɵsetNgModuleScope:Me,ɵɵsanitizeHtml:ci,ɵɵsanitizeStyle:li,ɵɵsanitizeResourceUrl:di,ɵɵsanitizeScript:pi,ɵɵsanitizeUrl:fi,ɵɵsanitizeUrlOrResourceUrl:yi,ɵɵtrustConstantHtml:hi,ɵɵtrustConstantResourceUrl:vi,forwardRef:l,resolveForwardRef:f};let Rv=null;function Fv(){Rv=null}const Lv=[];let Vv=!1;function $v(){if(!Vv){Vv=!0;try{for(let e=Lv.length-1;e>=0;e--){const{moduleType:t,ngModule:n}=Lv[e];n.declarations&&n.declarations.every(Hv)&&(Lv.splice(e,1),Qv(t,n))}}finally{Vv=!1}}}function Hv(e){return Array.isArray(e)?e.every(Hv):!!f(e)}function Uv(e,t={}){Bv(e,t),function(e,t){Lv.push({moduleType:e,ngModule:t})}(e,t)}function Bv(e,t,n=!1){ngDevMode&&T(e,"Required value moduleType"),ngDevMode&&T(t,"Required value ngModule");const r=Mr(t.declarations||ue);let o=null;Object.defineProperty(e,de,{configurable:!0,get:()=>{if(null===o){if(ngDevMode&&t.imports&&t.imports.indexOf(e)>-1)throw new Error(`'${y(e)}' module can't import itself`);const n=mr({usage:0,kind:"NgModule",type:e});o=n.compileNgModule(Nv,`ng:///${e.name}/ɵmod.js`,{type:e,bootstrap:Mr(t.bootstrap||ue).map(f),declarations:r.map(f),imports:Mr(t.imports||ue).map(f).map(ey),exports:Mr(t.exports||ue).map(f).map(ey),schemas:t.schemas?Mr(t.schemas):null,id:t.id||null}),o.schemas||(o.schemas=[])}return o}});let i=null;Object.defineProperty(e,pe,{get:()=>{if(null===i){const t=mr({usage:0,kind:"NgModule",type:e});i=t.compileFactory(Nv,`ng:///${e.name}/ɵfac.js`,{name:e.name,type:e,deps:no(e),target:t.FactoryTarget.NgModule,typeArgumentCount:0})}return i},configurable:!!ngDevMode});let s=null;Object.defineProperty(e,B,{get:()=>{if(null===s){ngDevMode&&Wv(e,n);const r={name:e.name,type:e,providers:t.providers||ue,imports:[(t.imports||ue).map(f),(t.exports||ue).map(f)]},o=mr({usage:0,kind:"NgModule",type:e});s=o.compileInjector(Nv,`ng:///${e.name}/ɵinj.js`,r)}return s},configurable:!!ngDevMode})}function Wv(e,t,n){if(Gv.get(e))return;let r;if(Gv.set(e,!0),e=f(e),n){if(r=Ie(e),!r)throw new Error(`Unexpected value '${e.name}' imported by the module '${n.name}'. Please add an @NgModule annotation.`)}else r=Ie(e,!0);const o=[],i=Ui(r.declarations),s=Ui(r.imports);Mr(s).map(zv).forEach((t=>{d(t,e),Wv(t,!1,e)}));const a=Ui(r.exports);i.forEach((function(t){De(t=f(t))||Se(t)||Ee(t)||o.push(`Unexpected value '${y(t)}' declared by the module '${y(e)}'. Please add a @Pipe/@Directive/@Component annotation.`)})),i.forEach((function(e){const t=Se(e=f(e));!De(e)&&t&&0==t.selectors.length&&o.push(`Directive ${y(e)} has no selector, please add it!`)}));const u=[...i.map(f),...Mr(s.map(Zv)).map(f)];a.forEach((function(t){const n=(De(t=f(t))?"component":Se(t)&&"directive")||Ee(t)&&"pipe";n&&-1===u.lastIndexOf(t)&&o.push(`Can't export ${n} ${y(t)} from ${y(e)} as it was neither declared nor imported!`)})),i.forEach((n=>function(t,n){t=f(t);const r=Kv.get(t);if(r&&r!==e){if(!n){const n=[r,e].map(y).sort();o.push(`Type ${y(t)} is part of the declarations of 2 modules: ${n[0]} and ${n[1]}! Please consider moving ${y(t)} to a higher module that imports ${n[0]} and ${n[1]}. You can also create a new NgModule that exports and includes ${y(t)} then import that NgModule in ${n[0]} and ${n[1]}.`)}}else Kv.set(t,e)}(n,t))),i.forEach((function(e){if(De(e=f(e))){const t=qv(e,"Component");t&&t.entryComponents&&Cr(t.entryComponents,l)}}));const c=qv(e,"NgModule");if(c&&(c.imports&&Mr(c.imports).map(zv).forEach((t=>{d(t,e),Wv(t,!1,e)})),c.bootstrap&&Cr(c.bootstrap,(function(e){De(e=f(e))||o.push(`${y(e)} cannot be used as an entry component.`)})),c.bootstrap&&Cr(c.bootstrap,l),c.entryComponents&&Cr(c.entryComponents,l)),o.length)throw new Error(o.join("\n"));function l(e){e=f(e),Kv.get(e)||o.push(`Component ${y(e)} is not part of any NgModule or the module has not been imported into your module.`)}function d(e,t){if(De(e=f(e))||Se(e))throw new Error(`Unexpected directive '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`);if(Ee(e))throw new Error(`Unexpected pipe '${e.name}' imported by the module '${t.name}'. Please add an @NgModule annotation.`)}}function zv(e){return(e=f(e)).ngModule||e}function qv(e,t){let n=null;return r(e.__annotations__),r(e.decorators),n;function r(e){e&&e.forEach(o)}function o(e){n||(Object.getPrototypeOf(e).ngMetadataName==t?n=e:e.type&&Object.getPrototypeOf(e.type).ngMetadataName==t&&(n=e.args[0]))}}let Kv=new WeakMap,Gv=new WeakMap;function Jv(){Kv=new WeakMap,Gv=new WeakMap,Lv.length=0}function Zv(e){return[...Mr(Ui(Ie(e=f(e),!0).exports).map((e=>Ie(e)?(Wv(e,!1),Zv(e)):e)))]}function Qv(e,t){const n=Mr(t.declarations||ue),r=Xv(e);n.forEach((t=>{t.hasOwnProperty(ce)?Yv(De(t),r):t.hasOwnProperty(le)||t.hasOwnProperty(fe)||(t.ngSelectorScope=e)}))}function Yv(e,t){e.directiveDefs=()=>Array.from(t.compilation.directives).map((e=>e.hasOwnProperty(ce)?De(e):Se(e))).filter((e=>!!e)),e.pipeDefs=()=>Array.from(t.compilation.pipes).map((e=>Ee(e))),e.schemas=t.schemas,e.tView=null}function Xv(e){if(!ty(e))throw new Error(`${e.name} does not have a module def (ɵmod property)`);const t=Ie(e);if(null!==t.transitiveCompileScopes)return t.transitiveCompileScopes;const n={schemas:t.schemas||null,compilation:{directives:new Set,pipes:new Set},exported:{directives:new Set,pipes:new Set}};return Ui(t.imports).forEach((e=>{const t=e;if(!ty(t))throw new Error(`Importing ${t.name} which does not have a ɵmod property`);const r=Xv(t);r.exported.directives.forEach((e=>n.compilation.directives.add(e))),r.exported.pipes.forEach((e=>n.compilation.pipes.add(e)))})),Ui(t.declarations).forEach((e=>{Ee(e)?n.compilation.pipes.add(e):n.compilation.directives.add(e)})),Ui(t.exports).forEach((e=>{const t=e;if(ty(t)){const e=Xv(t);e.exported.directives.forEach((e=>{n.compilation.directives.add(e),n.exported.directives.add(e)})),e.exported.pipes.forEach((e=>{n.compilation.pipes.add(e),n.exported.pipes.add(e)}))}else Ee(t)?n.exported.pipes.add(t):n.exported.directives.add(t)})),t.transitiveCompileScopes=n,n}function ey(e){return function(e){return void 0!==e.ngModule}(e)?e.ngModule:e}function ty(e){return!!Ie(e)}let ny=0;function ry(e,t){("undefined"==typeof ngDevMode||ngDevMode)&&se();let n=null;!function(e,t){ao(t)&&(io.set(e,t),so.add(e))}(e,t),sy(e,t),Object.defineProperty(e,ce,{get:()=>{if(null===n){const r=mr({usage:0,kind:"component",type:e});if(ao(t)){const n=[`Component '${e.name}' is not resolved:`];throw t.templateUrl&&n.push(` - templateUrl: ${t.templateUrl}`),t.styleUrls&&t.styleUrls.length&&n.push(` - styleUrls: ${JSON.stringify(t.styleUrls)}`),n.push("Did you run and wait for 'resolveComponentResources()'?"),new Error(n.join("\n"))}const o=Rv;let i=t.preserveWhitespaces;void 0===i&&(i=null!==o&&void 0!==o.preserveWhitespaces&&o.preserveWhitespaces);let s=t.encapsulation;void 0===s&&(s=null!==o&&void 0!==o.defaultEncapsulation?o.defaultEncapsulation:X.Emulated);const a=t.templateUrl||`ng:///${e.name}/template.html`,u=Object.assign(Object.assign({},uy(e,t)),{typeSourceSpan:r.createParseSourceSpan("Component",e.name,a),template:t.template||"",preserveWhitespaces:i,styles:t.styles||ue,animations:t.animations,directives:[],changeDetection:t.changeDetection,pipes:new Map,encapsulation:s,interpolation:t.interpolation,viewProviders:t.viewProviders||null});ny++;try{u.usesInheritance&&cy(e),n=r.compileComponent(Nv,a,u)}finally{ny--}if(0===ny&&$v(),void 0!==e.ngSelectorScope){const t=Xv(e.ngSelectorScope);Yv(n,t)}}return n},configurable:!!ngDevMode})}function oy(e,t){let n=null;sy(e,t||{}),Object.defineProperty(e,le,{get:()=>{if(null===n){const r=iy(e,t||{}),o=mr({usage:0,kind:"directive",type:e});n=o.compileDirective(Nv,r.sourceMapUrl,r.metadata)}return n},configurable:!!ngDevMode})}function iy(e,t){const n=e&&e.name,r=`ng:///${n}/ɵdir.js`,o=mr({usage:0,kind:"directive",type:e}),i=uy(e,t);return i.typeSourceSpan=o.createParseSourceSpan("Directive",n,r),i.usesInheritance&&cy(e),{metadata:i,sourceMapUrl:r}}function sy(e,t){let n=null;Object.defineProperty(e,pe,{get:()=>{if(null===n){const r=iy(e,t),o=mr({usage:0,kind:"directive",type:e});n=o.compileFactory(Nv,`ng:///${e.name}/ɵfac.js`,{name:r.metadata.name,type:r.metadata.type,typeArgumentCount:0,deps:no(e),target:o.FactoryTarget.Directive})}return n},configurable:!!ngDevMode})}function ay(e){return Object.getPrototypeOf(e.prototype)===Object.prototype}function uy(e,t){const n=to(),r=n.ownPropMetadata(e);return{name:e.name,type:e,selector:void 0!==t.selector?t.selector:null,host:t.host||ae,propMetadata:r,inputs:t.inputs||ue,outputs:t.outputs||ue,queries:fy(e,r,dy),lifecycle:{usesOnChanges:n.hasLifecycleHook(e,"ngOnChanges")},typeSourceSpan:null,usesInheritance:!ay(e),exportAs:(o=t.exportAs,void 0===o?null:vy(o)),providers:t.providers||null,viewQueries:fy(e,r,py)};var o}function cy(e){const t=Object.prototype;let n=Object.getPrototypeOf(e.prototype).constructor;for(;n&&n!==t;)Se(n)||De(n)||!gy(n)||oy(n,null),n=Object.getPrototypeOf(n)}function ly(e,t){return{propertyName:e,predicate:(n=t.selector,"string"==typeof n?vy(n):f(n)),descendants:t.descendants,first:t.first,read:t.read?t.read:null,static:!!t.static,emitDistinctChangesOnly:!!t.emitDistinctChangesOnly};var n}function fy(e,t,n){const r=[];for(const o in t)if(t.hasOwnProperty(o)){const i=t[o];i.forEach((t=>{if(n(t)){if(!t.selector)throw new Error(`Can't construct a query for the property "${o}" of "${y(e)}" since the query selector wasn't defined.`);if(i.some(hy))throw new Error("Cannot combine @Input decorators with query decorators");r.push(ly(o,t))}}))}return r}function dy(e){const t=e.ngMetadataName;return"ContentChild"===t||"ContentChildren"===t}function py(e){const t=e.ngMetadataName;return"ViewChild"===t||"ViewChildren"===t}function hy(e){return"Input"===e.ngMetadataName}function vy(e){return e.split(",").map((e=>e.trim()))}const yy=["ngOnChanges","ngOnInit","ngOnDestroy","ngDoCheck","ngAfterViewInit","ngAfterViewChecked","ngAfterContentInit","ngAfterContentChecked"];function gy(e){const t=to();if(yy.some((n=>t.hasLifecycleHook(e,n))))return!0;const n=t.propMetadata(e);for(const e in n){const t=n[e];for(let e=0;e<t.length;e++){const n=t[e],r=n.ngMetadataName;if(hy(n)||dy(n)||py(n)||"Output"===r||"HostBinding"===r||"HostListener"===r)return!0}}return!1}function by(e,t){let n=null,r=null;Object.defineProperty(e,pe,{get:()=>{if(null===r){const n=my(e,t),o=mr({usage:0,kind:"pipe",type:n.type});r=o.compileFactory(Nv,`ng:///${n.name}/ɵfac.js`,{name:n.name,type:n.type,typeArgumentCount:0,deps:no(e),target:o.FactoryTarget.Pipe})}return r},configurable:!!ngDevMode}),Object.defineProperty(e,fe,{get:()=>{if(null===n){const r=my(e,t),o=mr({usage:0,kind:"pipe",type:r.type});n=o.compilePipe(Nv,`ng:///${r.name}/ɵpipe.js`,r)}return n},configurable:!!ngDevMode})}function my(e,t){return{type:e,name:e.name,pipeName:t.name,pure:void 0===t.pure||t.pure}}const _y=ir("Directive",((e={})=>e),void 0,void 0,((e,t)=>oy(e,t))),wy=ir("Component",((e={})=>Object.assign({changeDetection:Q.Default},e)),_y,void 0,((e,t)=>ry(e,t))),My=ir("Pipe",(e=>Object.assign({pure:!0},e)),void 0,void 0,((e,t)=>by(e,t))),Cy=ur("Input",(e=>({bindingPropertyName:e}))),xy=ur("Output",(e=>({bindingPropertyName:e}))),Oy=ur("HostBinding",(e=>({hostPropertyName:e}))),Dy=ur("HostListener",((e,t)=>({eventName:e,args:t}))),Sy=ir("NgModule",(e=>e),void 0,void 0,((e,t)=>Uv(e,t)));function Ey(...e){}const Iy=new lr("Application Initializer");class Py{constructor(e){this.appInits=e,this.resolve=Ey,this.reject=Ey,this.initialized=!1,this.done=!1,this.donePromise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}runInitializers(){if(this.initialized)return;const e=[],t=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let t=0;t<this.appInits.length;t++){const n=this.appInits[t]();if(Ul(n))e.push(n);else if(Wl(n)){const t=new Promise(((e,t)=>{n.subscribe({complete:e,error:t})}));e.push(t)}}Promise.all(e).then((()=>{t()})).catch((e=>{this.reject(e)})),0===e.length&&t(),this.initialized=!0}}Py.ɵfac=function(e){return new(e||Py)(Wr(Iy,8))},Py.ɵprov=R({token:Py,factory:Py.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(Py,[{type:cl,args:[{providedIn:"root"}]}],(function(){return[{type:void 0,decorators:[{type:Jr,args:[Iy]},{type:Zr}]}]}),null);const Ty=new lr("AppId",{providedIn:"root",factory:Ay});function Ay(){return`${ky()}${ky()}${ky()}`}const jy={provide:Ty,useFactory:Ay,deps:[]};function ky(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const Ny=new lr("Platform Initializer"),Ry=new lr("Platform ID"),Fy=new lr("appBootstrapListener"),Ly=new lr("Application Packages Root URL");class Vy{log(e){console.log(e)}warn(e){console.warn(e)}}Vy.ɵfac=function(e){return new(e||Vy)},Vy.ɵprov=R({token:Vy,factory:Vy.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(Vy,[{type:cl}],null,null);const $y=new lr("LocaleId",{providedIn:"root",factory:()=>qr($y,q.Optional|q.SkipSelf)||("undefined"!=typeof ngI18nClosureMode&&ngI18nClosureMode&&"undefined"!=typeof goog&&"en"!==goog.getLocale()?goog.getLocale():"undefined"!=typeof $localize&&$localize.locale||Fd)}),Hy=new lr("DefaultCurrencyCode",{providedIn:"root",factory:()=>"USD"}),Uy=new lr("Translations"),By=new lr("TranslationsFormat");var Wy;!function(e){e[e.Error=0]="Error",e[e.Warning=1]="Warning",e[e.Ignore=2]="Ignore"}(Wy||(Wy={}));class zy{constructor(e,t){this.ngModuleFactory=e,this.componentFactories=t}}class qy{compileModuleSync(e){return new jh(e)}compileModuleAsync(e){return Promise.resolve(this.compileModuleSync(e))}compileModuleAndAllComponentsSync(e){const t=this.compileModuleSync(e),n=Ui(Ie(e).declarations).reduce(((e,t)=>{const n=De(t);return n&&e.push(new Ch(n)),e}),[]);return new zy(t,n)}compileModuleAndAllComponentsAsync(e){return Promise.resolve(this.compileModuleAndAllComponentsSync(e))}clearCache(){}clearCacheFor(e){}getModuleId(e){}}qy.ɵfac=function(e){return new(e||qy)},qy.ɵprov=R({token:qy,factory:qy.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(qy,[{type:cl,args:[{providedIn:"root"}]}],null,null);const Ky=new lr("compilerOptions");class Gy{}const Jy=Promise.resolve(0);function Zy(e){"undefined"==typeof Zone?Jy.then((()=>{e&&e.apply(null,null)})):Zone.current.scheduleMicroTask("scheduleMicrotask",e)}class Qy{constructor({enableLongStackTrace:e=!1,shouldCoalesceEventChangeDetection:t=!1,shouldCoalesceRunChangeDetection:n=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new iv(!1),this.onMicrotaskEmpty=new iv(!1),this.onStable=new iv(!1),this.onError=new iv(!1),"undefined"==typeof Zone)throw new Error("In this configuration Angular requires Zone.js");Zone.assertZonePatched();const r=this;r._nesting=0,r._outer=r._inner=Zone.current,Zone.TaskTrackingZoneSpec&&(r._inner=r._inner.fork(new Zone.TaskTrackingZoneSpec)),e&&Zone.longStackTraceZoneSpec&&(r._inner=r._inner.fork(Zone.longStackTraceZoneSpec)),r.shouldCoalesceEventChangeDetection=!n&&t,r.shouldCoalesceRunChangeDetection=n,r.lastRequestAnimationFrameId=-1,r.nativeRequestAnimationFrame=function(){let e=ie.requestAnimationFrame,t=ie.cancelAnimationFrame;if("undefined"!=typeof Zone&&e&&t){const n=e[Zone.__symbol__("OriginalDelegate")];n&&(e=n);const r=t[Zone.__symbol__("OriginalDelegate")];r&&(t=r)}return{nativeRequestAnimationFrame:e,nativeCancelAnimationFrame:t}}().nativeRequestAnimationFrame,function(e){const t=()=>{!function(e){e.isCheckStableRunning||-1!==e.lastRequestAnimationFrameId||(e.lastRequestAnimationFrameId=e.nativeRequestAnimationFrame.call(ie,(()=>{e.fakeTopEventTask||(e.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",(()=>{e.lastRequestAnimationFrameId=-1,eg(e),e.isCheckStableRunning=!0,Xy(e),e.isCheckStableRunning=!1}),void 0,(()=>{}),(()=>{}))),e.fakeTopEventTask.invoke()})),eg(e))}(e)};e._inner=e._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:(n,r,o,i,s,a)=>{try{return tg(e),n.invokeTask(o,i,s,a)}finally{(e.shouldCoalesceEventChangeDetection&&"eventTask"===i.type||e.shouldCoalesceRunChangeDetection)&&t(),ng(e)}},onInvoke:(n,r,o,i,s,a,u)=>{try{return tg(e),n.invoke(o,i,s,a,u)}finally{e.shouldCoalesceRunChangeDetection&&t(),ng(e)}},onHasTask:(t,n,r,o)=>{t.hasTask(r,o),n===r&&("microTask"==o.change?(e._hasPendingMicrotasks=o.microTask,eg(e),Xy(e)):"macroTask"==o.change&&(e.hasPendingMacrotasks=o.macroTask))},onHandleError:(t,n,r,o)=>(t.handleError(r,o),e.runOutsideAngular((()=>e.onError.emit(o))),!1)})}(r)}static isInAngularZone(){return"undefined"!=typeof Zone&&!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!Qy.isInAngularZone())throw new Error("Expected to be in Angular Zone, but it is not!")}static assertNotInAngularZone(){if(Qy.isInAngularZone())throw new Error("Expected to not be in Angular Zone, but it is!")}run(e,t,n){return this._inner.run(e,t,n)}runTask(e,t,n,r){const o=this._inner,i=o.scheduleEventTask("NgZoneEvent: "+r,e,Yy,Ey,Ey);try{return o.runTask(i,t,n)}finally{o.cancelTask(i)}}runGuarded(e,t,n){return this._inner.runGuarded(e,t,n)}runOutsideAngular(e){return this._outer.run(e)}}const Yy={};function Xy(e){if(0==e._nesting&&!e.hasPendingMicrotasks&&!e.isStable)try{e._nesting++,e.onMicrotaskEmpty.emit(null)}finally{if(e._nesting--,!e.hasPendingMicrotasks)try{e.runOutsideAngular((()=>e.onStable.emit(null)))}finally{e.isStable=!0}}}function eg(e){e._hasPendingMicrotasks||(e.shouldCoalesceEventChangeDetection||e.shouldCoalesceRunChangeDetection)&&-1!==e.lastRequestAnimationFrameId?e.hasPendingMicrotasks=!0:e.hasPendingMicrotasks=!1}function tg(e){e._nesting++,e.isStable&&(e.isStable=!1,e.onUnstable.emit(null))}function ng(e){e._nesting--,Xy(e)}class rg{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new iv,this.onMicrotaskEmpty=new iv,this.onStable=new iv,this.onError=new iv}run(e,t,n){return e.apply(t,n)}runGuarded(e,t,n){return e.apply(t,n)}runOutsideAngular(e){return e()}runTask(e,t,n,r){return e.apply(t,n)}}class og{constructor(e){this._ngZone=e,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,this._watchAngularEvents(),e.run((()=>{this.taskTrackingZone="undefined"==typeof Zone?null:Zone.current.get("TaskTrackingZone")}))}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular((()=>{this._ngZone.onStable.subscribe({next:()=>{Qy.assertNotInAngularZone(),Zy((()=>{this._isZoneStable=!0,this._runCallbacksIfReady()}))}})}))}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())Zy((()=>{for(;0!==this._callbacks.length;){let e=this._callbacks.pop();clearTimeout(e.timeoutId),e.doneCb(this._didWork)}this._didWork=!1}));else{let e=this.getPendingTasks();this._callbacks=this._callbacks.filter((t=>!t.updateCb||!t.updateCb(e)||(clearTimeout(t.timeoutId),!1))),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map((e=>({source:e.source,creationLocation:e.creationLocation,data:e.data}))):[]}addCallback(e,t,n){let r=-1;t&&t>0&&(r=setTimeout((()=>{this._callbacks=this._callbacks.filter((e=>e.timeoutId!==r)),e(this._didWork,this.getPendingTasks())}),t)),this._callbacks.push({doneCb:e,timeoutId:r,updateCb:n})}whenStable(e,t,n){if(n&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');this.addCallback(e,t,n),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}findProviders(e,t,n){return[]}}og.ɵfac=function(e){return new(e||og)(Wr(Qy))},og.ɵprov=R({token:og,factory:og.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(og,[{type:cl}],(function(){return[{type:Qy}]}),null);class ig{constructor(){this._applications=new Map,ug.addToWindow(this)}registerApplication(e,t){this._applications.set(e,t)}unregisterApplication(e){this._applications.delete(e)}unregisterAllApplications(){this._applications.clear()}getTestability(e){return this._applications.get(e)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(e,t=!0){return ug.findTestabilityInTree(this,e,t)}}function sg(e){ug=e}ig.ɵfac=function(e){return new(e||ig)},ig.ɵprov=R({token:ig,factory:ig.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(ig,[{type:cl}],(function(){return[]}),null);let ag,ug=new class{addToWindow(e){}findTestabilityInTree(e,t,n){return null}};function cg(e,t,n){ngDevMode&&function(e,t="Type passed in is not NgModuleType, it does not have 'ɵmod' property."){Ie(e)||A(t)}(n);const r=new jh(n);if("undefined"!=typeof ngJitMode&&!ngJitMode)return Promise.resolve(r);const o=e.get(Ky,[]).concat(t);if(function(e){if(null!==Rv){if(e.defaultEncapsulation!==Rv.defaultEncapsulation)return void(ngDevMode&&console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set."));if(e.preserveWhitespaces!==Rv.preserveWhitespaces)return void(ngDevMode&&console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set."))}Rv=e}({defaultEncapsulation:Mg(o.map((e=>e.defaultEncapsulation))),preserveWhitespaces:Mg(o.map((e=>e.preserveWhitespaces)))}),0===io.size)return Promise.resolve(r);const i=function(e){const t=[];return e.forEach((e=>e&&t.push(...e))),t}(o.map((e=>e.providers)));if(0===i.length)return Promise.resolve(r);const s=mr({usage:0,kind:"NgModule",type:n}),a=Ju.create({providers:i}).get(s.ResourceLoader);return oo((e=>Promise.resolve(a.get(e)))).then((()=>r))}function lg(e){return e.isBoundToModule}const fg=new lr("AllowMultipleToken");class dg{constructor(e,t){this.name=e,this.token=t}}function pg(e){if(ag&&!ag.destroyed&&!ag.injector.get(fg,!1)){const e="undefined"==typeof ngDevMode||ngDevMode?"There can be only one platform. Destroy the previous one to create a new one.":"";throw new p(400,e)}ngDevMode&&cc(),ag=e.get(bg);const t=e.get(Ny,null);return t&&t.forEach((e=>e())),ag}function hg(e,t,n=[]){const r=`Platform: ${t}`,o=new lr(r);return(t=[])=>{let i=gg();if(!i||i.injector.get(fg,!1))if(e)e(n.concat(t).concat({provide:o,useValue:!0}));else{const e=n.concat(t).concat({provide:o,useValue:!0},{provide:Ru,useValue:"platform"});pg(Ju.create({providers:e,name:r}))}return vg(o)}}function vg(e){const t=gg();if(!t){const e="undefined"==typeof ngDevMode||ngDevMode?"No platform exists!":"";throw new p(401,e)}if(("undefined"==typeof ngDevMode||ngDevMode)&&!t.injector.get(e,null))throw new p(400,"A platform with a different configuration has been created. Please destroy it first.");return t}function yg(){ag&&!ag.destroyed&&ag.destroy()}function gg(){return ag&&!ag.destroyed?ag:null}class bg{constructor(e){this._injector=e,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(e,t){const n=function(e,t){let n;return n="noop"===e?new rg:("zone.js"===e?void 0:e)||new Qy({enableLongStackTrace:"undefined"!=typeof ngDevMode&&!!ngDevMode,shouldCoalesceEventChangeDetection:!!(null==t?void 0:t.ngZoneEventCoalescing),shouldCoalesceRunChangeDetection:!!(null==t?void 0:t.ngZoneRunCoalescing)}),n}(t?t.ngZone:void 0,{ngZoneEventCoalescing:t&&t.ngZoneEventCoalescing||!1,ngZoneRunCoalescing:t&&t.ngZoneRunCoalescing||!1}),r=[{provide:Qy,useValue:n}];return n.run((()=>{const t=Ju.create({providers:r,parent:this.injector,name:e.moduleType.name}),o=e.create(t),i=o.injector.get(Pi,null);if(!i){const e="undefined"==typeof ngDevMode||ngDevMode?"No ErrorHandler. Is platform module (BrowserModule) included?":"";throw new p(402,e)}return n.runOutsideAngular((()=>{const e=n.onError.subscribe({next:e=>{i.handleError(e)}});o.onDestroy((()=>{wg(this._modules,o),e.unsubscribe()}))})),function(e,t,n){try{const r=n();return Ul(r)?r.catch((n=>{throw t.runOutsideAngular((()=>e.handleError(n))),n})):r}catch(n){throw t.runOutsideAngular((()=>e.handleError(n))),n}}(i,n,(()=>{const e=o.injector.get(Py);return e.runInitializers(),e.donePromise.then((()=>(Ud(o.injector.get($y,Fd)||Fd),this._moduleDoBootstrap(o),o)))}))}))}bootstrapModule(e,t=[]){const n=mg({},t);return cg(this.injector,n,e).then((e=>this.bootstrapModuleFactory(e,n)))}_moduleDoBootstrap(e){const t=e.injector.get(_g);if(e._bootstrapComponents.length>0)e._bootstrapComponents.forEach((e=>t.bootstrap(e)));else{if(!e.instance.ngDoBootstrap){const t="undefined"==typeof ngDevMode||ngDevMode?`The module ${a(e.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`:"";throw new p(403,t)}e.instance.ngDoBootstrap(t)}this._modules.push(e)}onDestroy(e){this._destroyListeners.push(e)}get injector(){return this._injector}destroy(){if(this._destroyed){const e="undefined"==typeof ngDevMode||ngDevMode?"The platform has already been destroyed!":"";throw new p(404,e)}this._modules.slice().forEach((e=>e.destroy())),this._destroyListeners.forEach((e=>e())),this._destroyed=!0}get destroyed(){return this._destroyed}}function mg(e,t){return Array.isArray(t)?t.reduce(mg,e):Object.assign(Object.assign({},e),t)}bg.ɵfac=function(e){return new(e||bg)(Wr(Ju))},bg.ɵprov=R({token:bg,factory:bg.ɵfac}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(bg,[{type:cl}],(function(){return[{type:Ju}]}),null);class _g{constructor(e,t,n,i,s){this._zone=e,this._injector=t,this._exceptionHandler=n,this._componentFactoryResolver=i,this._initStatus=s,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._stable=!0,this.componentTypes=[],this.components=[],this._onMicrotaskEmptySubscription=this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run((()=>{this.tick()}))}});const a=new r.Observable((e=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular((()=>{e.next(this._stable),e.complete()}))})),u=new r.Observable((e=>{let t;this._zone.runOutsideAngular((()=>{t=this._zone.onStable.subscribe((()=>{Qy.assertNotInAngularZone(),Zy((()=>{this._stable||this._zone.hasPendingMacrotasks||this._zone.hasPendingMicrotasks||(this._stable=!0,e.next(!0))}))}))}));const n=this._zone.onUnstable.subscribe((()=>{Qy.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular((()=>{e.next(!1)})))}));return()=>{t.unsubscribe(),n.unsubscribe()}}));this.isStable=(0,r.merge)(a,u.pipe((0,o.BN)()))}bootstrap(e,t){if(!this._initStatus.done){const e="undefined"==typeof ngDevMode||ngDevMode?"Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.":"";throw new p(405,e)}let n;n=e instanceof sh?e:this._componentFactoryResolver.resolveComponentFactory(e),this.componentTypes.push(n.componentType);const r=lg(n)?void 0:this._injector.get(Dh),o=t||n.selector,i=n.create(Ju.NULL,[],o,r),s=i.location.nativeElement,a=i.injector.get(og,null),u=a&&i.injector.get(ig);return a&&u&&u.registerApplication(s,a),i.onDestroy((()=>{this.detachView(i.hostView),wg(this.components,i),u&&u.unregisterApplication(s)})),this._loadComponent(i),("undefined"==typeof ngDevMode||ngDevMode)&&this._injector.get(Vy).log("Angular is running in development mode. Call enableProdMode() to enable production mode."),i}tick(){if(this._runningTick){const e="undefined"==typeof ngDevMode||ngDevMode?"ApplicationRef.tick is called recursively":"";throw new p(101,e)}try{this._runningTick=!0;for(let e of this._views)e.detectChanges();if("undefined"==typeof ngDevMode||ngDevMode)for(let e of this._views)e.checkNoChanges()}catch(e){this._zone.runOutsideAngular((()=>this._exceptionHandler.handleError(e)))}finally{this._runningTick=!1}}attachView(e){const t=e;this._views.push(t),t.attachToAppRef(this)}detachView(e){const t=e;wg(this._views,t),t.detachFromAppRef()}_loadComponent(e){this.attachView(e.hostView),this.tick(),this.components.push(e),this._injector.get(Fy,[]).concat(this._bootstrapListeners).forEach((t=>t(e)))}ngOnDestroy(){this._views.slice().forEach((e=>e.destroy())),this._onMicrotaskEmptySubscription.unsubscribe()}get viewCount(){return this._views.length}}function wg(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}function Mg(e){for(let t=e.length-1;t>=0;t--)if(void 0!==e[t])return e[t]}_g.ɵfac=function(e){return new(e||_g)(Wr(Qy),Wr(Ju),Wr(Pi),Wr(uh),Wr(Py))},_g.ɵprov=R({token:_g,factory:_g.ɵfac,providedIn:"root"}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(_g,[{type:cl,args:[{providedIn:"root"}]}],(function(){return[{type:Qy},{type:Ju},{type:Pi},{type:uh},{type:Py}]}),null);let Cg=!0,xg=!1;function Og(){return xg=!0,Cg}function Dg(){if(xg)throw new Error("Cannot enable prod mode after platform setup.");(void 0===typeof ngDevMode||ngDevMode)&&(ie.ngDevMode=!1),Cg=!1}function Sg(e){const t=Ph(e);if(!t)throw Ig(e);return new jh(t)}function Eg(e){const t=Ph(e);if(!t)throw Ig(e);return t}function Ig(e){return new Error(`No module with ID ${e} loaded`)}class Pg{}function Tg(e){return function(e,t,n){if(Re(e)&&!n){const n=Ct(e.index,t);return new mh(n,n)}if(47&e.type){const e=t[16];return new mh(e,t)}return null}(Rt(),jt(),16==(16&e))}Pg.__NG_ELEMENT_ID__=Tg;class Ag extends Pg{}class jg extends Ag{}class kg{constructor(e,t){this.name=e,this.callback=t}}function Ng(e){return e.map((e=>e.nativeElement))}class Rg{constructor(e){this.nativeNode=e}get parent(){const e=this.nativeNode.parentNode;return e?new Fg(e):null}get injector(){return ec(this.nativeNode)}get componentInstance(){const e=this.nativeNode;return e&&(Zu(e)||Yu(e))}get context(){return Zu(this.nativeNode)||Qu(this.nativeNode)}get listeners(){return oc(this.nativeNode).filter((e=>"dom"===e.type))}get references(){return function(e){const t=bi(e);return null===t?{}:(void 0===t.localRefs&&(t.localRefs=function(e,t){const n=e[1].data[t];if(n&&n.localNames){const t={};let r=n.index+1;for(let o=0;o<n.localNames.length;o+=2)t[n.localNames[o]]=e[r],r++;return t}return null}(t.lView,t.nodeIndex)),t.localRefs||{})}(this.nativeNode)}get providerTokens(){return function(e){const t=bi(e);if(null===t)return[];const n=t.lView[1],r=n.data[t.nodeIndex],o=[],i=1048575&r.providerIndexes,s=r.directiveEnd;for(let e=i;e<s;e++){let t=n.data[e];void 0!==(a=t).type&&void 0!==a.template&&void 0!==a.declaredInputs&&(t=t.type),o.push(t)}var a;return o}(this.nativeNode)}}class Fg extends Rg{constructor(e){ngDevMode&&j(e),super(e)}get nativeElement(){return this.nativeNode.nodeType==Node.ELEMENT_NODE?this.nativeNode:null}get name(){const e=bi(this.nativeNode);return null!==e?e.lView[1].data[e.nodeIndex].value:this.nativeNode.nodeName}get properties(){const e=bi(this.nativeNode);if(null===e)return{};const t=e.lView,n=t[1].data,r=n[e.nodeIndex],o={};return function(e,t){if(e){let n=Object.getPrototypeOf(e);const r=Node.prototype;for(;null!==n&&n!==r;){const r=Object.getOwnPropertyDescriptors(n);for(let n in r)if(!n.startsWith("__")&&!n.startsWith("on")){const r=e[n];Lg(r)&&(t[n]=r)}n=Object.getPrototypeOf(n)}}}(this.nativeElement,o),function(e,t,n,r){let o=t.propertyBindings;if(null!==o)for(let t=0;t<o.length;t++){const i=o[t],s=r[i].split(Hi),a=s[0];if(s.length>1){let t=s[1];for(let e=1;e<s.length-1;e++)t+=v(n[i+e-1])+s[e+1];e[a]=t}else e[a]=n[i]}}(o,r,t,n),o}get attributes(){const e={},t=this.nativeElement;if(!t)return e;const n=bi(t);if(null===n)return{};const r=n.lView[1].data[n.nodeIndex].attrs,o=[];if(r){let t=0;for(;t<r.length;){const n=r[t];if("string"!=typeof n)break;const i=r[t+1];e[n]=i,o.push(n.toLowerCase()),t+=2}}const i=t.attributes;for(let t=0;t<i.length;t++){const n=i[t],r=n.name.toLowerCase();-1===o.indexOf(r)&&(e[r]=n.value)}return e}get styles(){return this.nativeElement&&this.nativeElement.style?this.nativeElement.style:{}}get classes(){const e={},t=this.nativeElement.className;return("string"!=typeof t?t.baseVal.split(" "):t.split(" ")).forEach((t=>e[t]=!0)),e}get childNodes(){const e=this.nativeNode.childNodes,t=[];for(let n=0;n<e.length;n++){const r=e[n];t.push(Wg(r))}return t}get children(){const e=this.nativeElement;if(!e)return[];const t=e.children,n=[];for(let e=0;e<t.length;e++){const r=t[e];n.push(Wg(r))}return n}query(e){return this.queryAll(e)[0]||null}queryAll(e){const t=[];return Vg(this,e,t,!0),t}queryAllNodes(e){const t=[];return Vg(this,e,t,!1),t}triggerEventHandler(e,t){const n=this.nativeNode,r=[];this.listeners.forEach((o=>{if(o.name===e){const e=o.callback;e.call(n,t),r.push(e)}})),"function"==typeof n.eventListeners&&n.eventListeners(e).forEach((e=>{if(-1!==e.toString().indexOf("__ngUnwrap__")){const o=e("__ngUnwrap__");return-1===r.indexOf(o)&&o.call(n,t)}}))}}function Lg(e){return"string"==typeof e||"boolean"==typeof e||"number"==typeof e||null===e}function Vg(e,t,n,r){const o=bi(e.nativeNode);null!==o?$g(o.lView[1].data[o.nodeIndex],o.lView,t,n,r,e.nativeNode):Bg(e.nativeNode,t,n,r)}function $g(e,t,n,r,o,i){ngDevMode&&Ve(e,t);const s=function(e,t){const n=null===e?-1:e.index;if(-1!==n){ngDevMode&&Ve(e,t);const r=bt(t[n]);return ngDevMode&&null!==r&&!yt(t[11])&&j(r),r}return null}(e,t);if(11&e.type){if(Ug(s,n,r,o,i),Re(e)){const s=Ct(e.index,t);s&&s[1].firstChild&&$g(s[1].firstChild,s,n,r,o,i)}else e.child&&$g(e.child,t,n,r,o,i),s&&Bg(s,n,r,o);const a=t[e.index];ke(a)&&Hg(a,n,r,o,i)}else if(4&e.type){const s=t[e.index];Ug(s[7],n,r,o,i),Hg(s,n,r,o,i)}else if(16&e.type){const s=t[16],a=s[6].projection[e.projection];if(Array.isArray(a))for(let e of a)Ug(e,n,r,o,i);else if(a){const e=s[3];$g(e[1].data[a.index],e,n,r,o,i)}}else e.child&&$g(e.child,t,n,r,o,i);if(i!==s){const s=4&e.flags?e.projectionNext:e.next;s&&$g(s,t,n,r,o,i)}}function Hg(e,t,n,r,o){for(let i=Pe;i<e.length;i++){const s=e[i],a=s[1].firstChild;a&&$g(a,s,t,n,r,o)}}function Ug(e,t,n,r,o){if(o!==e){const o=Wg(e);if(!o)return;(r&&o instanceof Fg&&t(o)&&-1===n.indexOf(o)||!r&&t(o)&&-1===n.indexOf(o))&&n.push(o)}}function Bg(e,t,n,r){const o=e.childNodes,i=o.length;for(let e=0;e<i;e++){const i=o[e],s=Wg(i);s&&((r&&s instanceof Fg&&t(s)&&-1===n.indexOf(s)||!r&&t(s)&&-1===n.indexOf(s))&&n.push(s),Bg(i,t,n,r))}}new Map;function Wg(e){return e instanceof Node?(e.hasOwnProperty("__ng_debug__")||(e.__ng_debug__=e.nodeType==Node.ELEMENT_NODE?new Fg(e):new Rg(e)),e.__ng_debug__):null}function zg(e){return null}class qg{constructor(){}supports(e){return Ic(e)}create(e){return new Gg(e)}}const Kg=(e,t)=>t;class Gg{constructor(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||Kg}forEachItem(e){let t;for(t=this._itHead;null!==t;t=t._next)e(t)}forEachOperation(e){let t=this._itHead,n=this._removalsHead,r=0,o=null;for(;t||n;){const i=!n||t&&t.currentIndex<Yg(n,r,o)?t:n,s=Yg(i,r,o),a=i.currentIndex;if(i===n)r--,n=n._nextRemoved;else if(t=t._next,null==i.previousIndex)r++;else{o||(o=[]);const e=s-r,t=a-r;if(e!=t){for(let n=0;n<e;n++){const r=n<o.length?o[n]:o[n]=0,i=r+n;t<=i&&i<e&&(o[n]=r+1)}o[i.previousIndex]=t-e}}s!==a&&e(i,s,a)}}forEachPreviousItem(e){let t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachMovedItem(e){let t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}forEachIdentityChange(e){let t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)}diff(e){if(null==e&&(e=[]),!Ic(e)){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${a(e)}'. Only arrays and iterables are allowed`:"";throw new p(900,t)}return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t,n,r,o=this._itHead,i=!1;if(Array.isArray(e)){this.length=e.length;for(let t=0;t<this.length;t++)n=e[t],r=this._trackByFn(t,n),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,n,r,t)),Object.is(o.item,n)||this._addIdentityChange(o,n)):(o=this._mismatch(o,n,r,t),i=!0),o=o._next}else t=0,function(e,t){if(Array.isArray(e))for(let n=0;n<e.length;n++)t(e[n]);else{const n=e[Sc()]();let r;for(;!(r=n.next()).done;)t(r.value)}}(e,(e=>{r=this._trackByFn(t,e),null!==o&&Object.is(o.trackById,r)?(i&&(o=this._verifyReinsertion(o,e,r,t)),Object.is(o.item,e)||this._addIdentityChange(o,e)):(o=this._mismatch(o,e,r,t),i=!0),o=o._next,t++})),this.length=t;return this._truncate(o),this.collection=e,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let e;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=e._nextMoved)e.previousIndex=e.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(e,t,n,r){let o;return null===e?o=this._itTail:(o=e._prev,this._remove(e)),null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,o,r)):null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(n,r))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,o,r)):e=this._addAfter(new Jg(t,n),o,r),e}_verifyReinsertion(e,t,n,r){let o=null===this._unlinkedRecords?null:this._unlinkedRecords.get(n,null);return null!==o?e=this._reinsertAfter(o,e._prev,r):e.currentIndex!=r&&(e.currentIndex=r,this._addToMoves(e,r)),e}_truncate(e){for(;null!==e;){const t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(e,t,n){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);const r=e._prevRemoved,o=e._nextRemoved;return null===r?this._removalsHead=o:r._nextRemoved=o,null===o?this._removalsTail=r:o._prevRemoved=r,this._insertAfter(e,t,n),this._addToMoves(e,n),e}_moveAfter(e,t,n){return this._unlink(e),this._insertAfter(e,t,n),this._addToMoves(e,n),e}_addAfter(e,t,n){return this._insertAfter(e,t,n),null===this._additionsTail?this._additionsTail=this._additionsHead=e:this._additionsTail=this._additionsTail._nextAdded=e,e}_insertAfter(e,t,n){const r=null===t?this._itHead:t._next;return e._next=r,e._prev=t,null===r?this._itTail=e:r._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new Qg),this._linkedRecords.put(e),e.currentIndex=n,e}_remove(e){return this._addToRemovals(this._unlink(e))}_unlink(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);const t=e._prev,n=e._next;return null===t?this._itHead=n:t._next=n,null===n?this._itTail=t:n._prev=t,e}_addToMoves(e,t){return e.previousIndex===t||(null===this._movesTail?this._movesTail=this._movesHead=e:this._movesTail=this._movesTail._nextMoved=e),e}_addToRemovals(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new Qg),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}_addIdentityChange(e,t){return e.item=t,null===this._identityChangesTail?this._identityChangesTail=this._identityChangesHead=e:this._identityChangesTail=this._identityChangesTail._nextIdentityChange=e,e}}class Jg{constructor(e,t){this.item=e,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class Zg{constructor(){this._head=null,this._tail=null}add(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}get(e,t){let n;for(n=this._head;null!==n;n=n._nextDup)if((null===t||t<=n.currentIndex)&&Object.is(n.trackById,e))return n;return null}remove(e){const t=e._prevDup,n=e._nextDup;return null===t?this._head=n:t._nextDup=n,null===n?this._tail=t:n._prevDup=t,null===this._head}}class Qg{constructor(){this.map=new Map}put(e){const t=e.trackById;let n=this.map.get(t);n||(n=new Zg,this.map.set(t,n)),n.add(e)}get(e,t){const n=e,r=this.map.get(n);return r?r.get(e,t):null}remove(e){const t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function Yg(e,t,n){const r=e.previousIndex;if(null===r)return r;let o=0;return n&&r<n.length&&(o=n[r]),r+t+o}class Xg{constructor(){}supports(e){return e instanceof Map||Pc(e)}create(){return new eb}}class eb{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(e){let t;for(t=this._mapHead;null!==t;t=t._next)e(t)}forEachPreviousItem(e){let t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)}forEachChangedItem(e){let t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}diff(e){if(e){if(!(e instanceof Map||Pc(e))){const t="undefined"==typeof ngDevMode||ngDevMode?`Error trying to diff '${a(e)}'. Only maps and objects are allowed`:"";throw new p(900,t)}}else e=new Map;return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t=this._mapHead;if(this._appendAfter=null,this._forEach(e,((e,n)=>{if(t&&t.key===n)this._maybeAddToChanges(t,e),this._appendAfter=t,t=t._next;else{const r=this._getOrCreateRecordForKey(n,e);t=this._insertBeforeOrAppend(t,r)}})),t){t._prev&&(t._prev._next=null),this._removalsHead=t;for(let e=t;null!==e;e=e._nextRemoved)e===this._mapHead&&(this._mapHead=null),this._records.delete(e.key),e._nextRemoved=e._next,e.previousValue=e.currentValue,e.currentValue=null,e._prev=null,e._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(e,t){if(e){const n=e._prev;return t._next=e,t._prev=n,e._prev=t,n&&(n._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}_getOrCreateRecordForKey(e,t){if(this._records.has(e)){const n=this._records.get(e);this._maybeAddToChanges(n,t);const r=n._prev,o=n._next;return r&&(r._next=o),o&&(o._prev=r),n._next=null,n._prev=null,n}const n=new tb(e);return this._records.set(e,n),n.currentValue=t,this._addToAdditions(n),n}_reset(){if(this.isDirty){let e;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(e,t){Object.is(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))}_addToAdditions(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)}_addToChanges(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)}_forEach(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach((n=>t(e[n],n)))}}class tb{constructor(e){this.key=e,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}function nb(){return new rb([new qg])}class rb{constructor(e){this.factories=e}static create(e,t){if(null!=t){const n=t.factories.slice();e=e.concat(n)}return new rb(e)}static extend(e){return{provide:rb,useFactory:t=>rb.create(e,t||nb()),deps:[[rb,new Yr,new Zr]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(null!=t)return t;{const t="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}' of type '${n=e,n.name||typeof n}'`:"";throw new p(901,t)}var n}}function ob(){return new ib([new Xg])}rb.ɵprov=R({token:rb,providedIn:"root",factory:nb});class ib{constructor(e){this.factories=e}static create(e,t){if(t){const n=t.factories.slice();e=e.concat(n)}return new ib(e)}static extend(e){return{provide:ib,useFactory:t=>ib.create(e,t||ob()),deps:[[ib,new Yr,new Zr]]}}find(e){const t=this.factories.find((t=>t.supports(e)));if(t)return t;const n="undefined"==typeof ngDevMode||ngDevMode?`Cannot find a differ supporting object '${e}'`:"";throw new p(901,n)}}ib.ɵprov=R({token:ib,providedIn:"root",factory:ob});const sb=[new Xg],ab=[new qg],ub=new rb(ab),cb=new ib(sb),lb=hg(null,"core",[{provide:Ry,useValue:"unknown"},{provide:bg,deps:[Ju]},{provide:ig,deps:[]},{provide:Vy,deps:[]}]);class fb{constructor(e){}}fb.ɵfac=function(e){return new(e||fb)(Wr(_g))},fb.ɵmod=we({type:fb}),fb.ɵinj=L({}),("undefined"==typeof ngDevMode||ngDevMode)&&Oh(fb,[{type:Sy}],(function(){return[{type:_g}]}),null);const db=!0;function pb(e){return mr({usage:1,kind:"directive",type:e.type}).compileDirectiveDeclaration(Nv,`ng:///${e.type.name}/ɵfac.js`,e)}function hb(e){var t,n;Oh(e.type,e.decorators,null!==(t=e.ctorParameters)&&void 0!==t?t:null,null!==(n=e.propDecorators)&&void 0!==n?n:null)}function vb(e){return mr({usage:1,kind:"component",type:e.type}).compileComponentDeclaration(Nv,`ng:///${e.type.name}/ɵcmp.js`,e)}function yb(e){return mr({usage:1,kind:gb(e.target),type:e.type}).compileFactoryDeclaration(Nv,`ng:///${e.type.name}/ɵfac.js`,e)}function gb(e){switch(e){case gr.Directive:return"directive";case gr.Component:return"component";case gr.Injectable:return"injectable";case gr.Pipe:return"pipe";case gr.NgModule:return"NgModule"}}function bb(e){return mr({usage:1,kind:"injectable",type:e.type}).compileInjectableDeclaration(Nv,`ng:///${e.type.name}/ɵprov.js`,e)}function mb(e){return mr({usage:1,kind:"NgModule",type:e.type}).compileInjectorDeclaration(Nv,`ng:///${e.type.name}/ɵinj.js`,e)}function _b(e){return mr({usage:1,kind:"NgModule",type:e.type}).compileNgModuleDeclaration(Nv,`ng:///${e.type.name}/ɵmod.js`,e)}function wb(e){return mr({usage:1,kind:"pipe",type:e.type}).compilePipeDeclaration(Nv,`ng:///${e.type.name}/ɵpipe.js`,e)}"undefined"!=typeof ngDevMode&&ngDevMode&&(ie.$localize=ie.$localize||function(){throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)")})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};return(()=>{var e=r;Object.defineProperty(e,"__esModule",{value:!0}),e.checkKeyForDid=e.EProofmeDataStorage=e.EProofmeDataPurpose=e.EClaimType=e.ESignatureTypes=e.EMimeType=e.getSubDomain=e.SignalServerV2=e.ProofmeUtils=e.ProofmeUtilsProvider=e.WebRtcProvider=e.SignalingServer=void 0;var t=n(2582);Object.defineProperty(e,"SignalingServer",{enumerable:!0,get:function(){return t.SignalingServer}});var o=n(2733);Object.defineProperty(e,"WebRtcProvider",{enumerable:!0,get:function(){return o.WebRtcProvider}});var i=n(1015);Object.defineProperty(e,"ProofmeUtilsProvider",{enumerable:!0,get:function(){return i.ProofmeUtilsProvider}});var s=n(5583);Object.defineProperty(e,"ProofmeUtils",{enumerable:!0,get:function(){return s.ProofmeUtils}});var a=n(5456);Object.defineProperty(e,"SignalServerV2",{enumerable:!0,get:function(){return a.SignalServerV2}});var u=n(6919);Object.defineProperty(e,"getSubDomain",{enumerable:!0,get:function(){return u.getSubDomain}});var c=n(3244);Object.defineProperty(e,"EMimeType",{enumerable:!0,get:function(){return c.EMimeType}});var l=n(2178);Object.defineProperty(e,"ESignatureTypes",{enumerable:!0,get:function(){return l.ESignatureTypes}});var f=n(9137);Object.defineProperty(e,"EClaimType",{enumerable:!0,get:function(){return f.EClaimType}});var d=n(5018);Object.defineProperty(e,"EProofmeDataPurpose",{enumerable:!0,get:function(){return d.EProofmeDataPurpose}});var p=n(345);Object.defineProperty(e,"EProofmeDataStorage",{enumerable:!0,get:function(){return p.EProofmeDataStorage}});var h=n(3817);Object.defineProperty(e,"checkKeyForDid",{enumerable:!0,get:function(){return h.checkKeyForDid}})})(),r})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,